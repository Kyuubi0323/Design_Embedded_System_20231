
Embedded_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000130ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002190  08013290  08013290  00023290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015420  08015420  0003020c  2**0
                  CONTENTS
  4 .ARM          00000008  08015420  08015420  00025420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015428  08015428  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015428  08015428  00025428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801542c  0801542c  0002542c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08015430  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e10  2000020c  0801563c  0003020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000501c  0801563c  0003501c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026b71  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055fe  00000000  00000000  00056dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd8  00000000  00000000  0005c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001be0  00000000  00000000  0005e188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c808  00000000  00000000  0005fd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a29c  00000000  00000000  0007c570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a00ad  00000000  00000000  000a680c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001468b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000937c  00000000  00000000  0014690c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013274 	.word	0x08013274

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	08013274 	.word	0x08013274

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Touch_binary */
  Touch_binaryHandle = osSemaphoreNew(1, 1, &Touch_binary_attributes);
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_FREERTOS_Init+0x8c>)
 800100e:	2101      	movs	r1, #1
 8001010:	2001      	movs	r0, #1
 8001012:	f009 f8e4 	bl	800a1de <osSemaphoreNew>
 8001016:	4603      	mov	r3, r0
 8001018:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <MX_FREERTOS_Init+0x90>)
 800101a:	6013      	str	r3, [r2, #0]

  /* creation of Uart_binary */
  Uart_binaryHandle = osSemaphoreNew(1, 1, &Uart_binary_attributes);
 800101c:	4a1f      	ldr	r2, [pc, #124]	; (800109c <MX_FREERTOS_Init+0x94>)
 800101e:	2101      	movs	r1, #1
 8001020:	2001      	movs	r0, #1
 8001022:	f009 f8dc 	bl	800a1de <osSemaphoreNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <MX_FREERTOS_Init+0x98>)
 800102a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Timer02 */
  Timer02Handle = osTimerNew(LCD_Timeout, osTimerOnce, NULL, &Timer02_attributes);
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_FREERTOS_Init+0x9c>)
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	481d      	ldr	r0, [pc, #116]	; (80010a8 <MX_FREERTOS_Init+0xa0>)
 8001034:	f008 fff2 	bl	800a01c <osTimerNew>
 8001038:	4603      	mov	r3, r0
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MX_FREERTOS_Init+0xa4>)
 800103c:	6013      	str	r3, [r2, #0]

  /* creation of Timer03 */
  Timer03Handle = osTimerNew(Measure_Timer, osTimerPeriodic, NULL, &Timer03_attributes);
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <MX_FREERTOS_Init+0xa8>)
 8001040:	2200      	movs	r2, #0
 8001042:	2101      	movs	r1, #1
 8001044:	481b      	ldr	r0, [pc, #108]	; (80010b4 <MX_FREERTOS_Init+0xac>)
 8001046:	f008 ffe9 	bl	800a01c <osTimerNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a1a      	ldr	r2, [pc, #104]	; (80010b8 <MX_FREERTOS_Init+0xb0>)
 800104e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SuperQueue */
  SuperQueueHandle = osMessageQueueNew (64, sizeof(uint16_t), &SuperQueue_attributes);
 8001050:	4a1a      	ldr	r2, [pc, #104]	; (80010bc <MX_FREERTOS_Init+0xb4>)
 8001052:	2102      	movs	r1, #2
 8001054:	2040      	movs	r0, #64	; 0x40
 8001056:	f009 f9e1 	bl	800a41c <osMessageQueueNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <MX_FREERTOS_Init+0xb8>)
 800105e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LCD */
  LCDHandle = osThreadNew(LCD_task, NULL, &LCD_attributes);
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <MX_FREERTOS_Init+0xbc>)
 8001062:	2100      	movs	r1, #0
 8001064:	4818      	ldr	r0, [pc, #96]	; (80010c8 <MX_FREERTOS_Init+0xc0>)
 8001066:	f008 fed5 	bl	8009e14 <osThreadNew>
 800106a:	4603      	mov	r3, r0
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <MX_FREERTOS_Init+0xc4>)
 800106e:	6013      	str	r3, [r2, #0]

  /* creation of IRQ */
  IRQHandle = osThreadNew(IRQ_task, NULL, &IRQ_attributes);
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <MX_FREERTOS_Init+0xc8>)
 8001072:	2100      	movs	r1, #0
 8001074:	4817      	ldr	r0, [pc, #92]	; (80010d4 <MX_FREERTOS_Init+0xcc>)
 8001076:	f008 fecd 	bl	8009e14 <osThreadNew>
 800107a:	4603      	mov	r3, r0
 800107c:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <MX_FREERTOS_Init+0xd0>)
 800107e:	6013      	str	r3, [r2, #0]

  /* creation of Uart_user */
  Uart_userHandle = osThreadNew(Uart_task, NULL, &Uart_user_attributes);
 8001080:	4a16      	ldr	r2, [pc, #88]	; (80010dc <MX_FREERTOS_Init+0xd4>)
 8001082:	2100      	movs	r1, #0
 8001084:	4816      	ldr	r0, [pc, #88]	; (80010e0 <MX_FREERTOS_Init+0xd8>)
 8001086:	f008 fec5 	bl	8009e14 <osThreadNew>
 800108a:	4603      	mov	r3, r0
 800108c:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <MX_FREERTOS_Init+0xdc>)
 800108e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	08013a48 	.word	0x08013a48
 8001098:	200002ac 	.word	0x200002ac
 800109c:	08013a58 	.word	0x08013a58
 80010a0:	200002b0 	.word	0x200002b0
 80010a4:	08013a28 	.word	0x08013a28
 80010a8:	08001725 	.word	0x08001725
 80010ac:	200002a4 	.word	0x200002a4
 80010b0:	08013a38 	.word	0x08013a38
 80010b4:	08001771 	.word	0x08001771
 80010b8:	200002a8 	.word	0x200002a8
 80010bc:	08013a10 	.word	0x08013a10
 80010c0:	200002a0 	.word	0x200002a0
 80010c4:	080139a4 	.word	0x080139a4
 80010c8:	080010e9 	.word	0x080010e9
 80010cc:	20000294 	.word	0x20000294
 80010d0:	080139c8 	.word	0x080139c8
 80010d4:	08001575 	.word	0x08001575
 80010d8:	20000298 	.word	0x20000298
 80010dc:	080139ec 	.word	0x080139ec
 80010e0:	080016a1 	.word	0x080016a1
 80010e4:	2000029c 	.word	0x2000029c

080010e8 <LCD_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LCD_task */
void LCD_task(void *argument)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	6078      	str	r0, [r7, #4]
	char Strgbpm[4] ;
	char Strgspo2[4];
//	char *payload = {0};

	//Display
	ILI9341_Unselect();
 80010f0:	f001 fb6e 	bl	80027d0 <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 80010f4:	f001 ff4c 	bl	8002f90 <ILI9341_TouchUnselect>
	ILI9341_Init();
 80010f8:	f001 fc1c 	bl	8002934 <ILI9341_Init>
	ILI9341_FillScreen(ILI9341_BLACK);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f001 ff35 	bl	8002f6c <ILI9341_FillScreen>
	//Background
	ILI9341_WriteString(10, 10, "Embedded Design System 20231", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001102:	4bbb      	ldr	r3, [pc, #748]	; (80013f0 <LCD_task+0x308>)
 8001104:	2200      	movs	r2, #0
 8001106:	9202      	str	r2, [sp, #8]
 8001108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110c:	9201      	str	r2, [sp, #4]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4ab7      	ldr	r2, [pc, #732]	; (80013f4 <LCD_task+0x30c>)
 8001116:	210a      	movs	r1, #10
 8001118:	200a      	movs	r0, #10
 800111a:	f001 fe6c 	bl	8002df6 <ILI9341_WriteString>
	ILI9341_WriteString(30, 40, "20202647", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 800111e:	4bb6      	ldr	r3, [pc, #728]	; (80013f8 <LCD_task+0x310>)
 8001120:	2200      	movs	r2, #0
 8001122:	9202      	str	r2, [sp, #8]
 8001124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001128:	9201      	str	r2, [sp, #4]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	9200      	str	r2, [sp, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4ab2      	ldr	r2, [pc, #712]	; (80013fc <LCD_task+0x314>)
 8001132:	2128      	movs	r1, #40	; 0x28
 8001134:	201e      	movs	r0, #30
 8001136:	f001 fe5e 	bl	8002df6 <ILI9341_WriteString>
	ILI9341_WriteString(235, 40, "20202543", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 800113a:	4baf      	ldr	r3, [pc, #700]	; (80013f8 <LCD_task+0x310>)
 800113c:	2200      	movs	r2, #0
 800113e:	9202      	str	r2, [sp, #8]
 8001140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001144:	9201      	str	r2, [sp, #4]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	9200      	str	r2, [sp, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4aac      	ldr	r2, [pc, #688]	; (8001400 <LCD_task+0x318>)
 800114e:	2128      	movs	r1, #40	; 0x28
 8001150:	20eb      	movs	r0, #235	; 0xeb
 8001152:	f001 fe50 	bl	8002df6 <ILI9341_WriteString>
	ILI9341_DrawLine(0, 55, 320, 55, ILI9341_WHITE);
 8001156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2337      	movs	r3, #55	; 0x37
 800115e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001162:	2137      	movs	r1, #55	; 0x37
 8001164:	2000      	movs	r0, #0
 8001166:	f001 fd4c 	bl	8002c02 <ILI9341_DrawLine>
	ILI9341_DrawLine(0, 200, 320, 200, ILI9341_WHITE);
 800116a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	23c8      	movs	r3, #200	; 0xc8
 8001172:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001176:	21c8      	movs	r1, #200	; 0xc8
 8001178:	2000      	movs	r0, #0
 800117a:	f001 fd42 	bl	8002c02 <ILI9341_DrawLine>
	ILI9341_DrawLine(250, 55, 250, 200, ILI9341_WHITE);
 800117e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	23c8      	movs	r3, #200	; 0xc8
 8001186:	22fa      	movs	r2, #250	; 0xfa
 8001188:	2137      	movs	r1, #55	; 0x37
 800118a:	20fa      	movs	r0, #250	; 0xfa
 800118c:	f001 fd39 	bl	8002c02 <ILI9341_DrawLine>
	ILI9341_WriteString(10, 180, "Mode:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001190:	4b97      	ldr	r3, [pc, #604]	; (80013f0 <LCD_task+0x308>)
 8001192:	2200      	movs	r2, #0
 8001194:	9202      	str	r2, [sp, #8]
 8001196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119a:	9201      	str	r2, [sp, #4]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	9200      	str	r2, [sp, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a98      	ldr	r2, [pc, #608]	; (8001404 <LCD_task+0x31c>)
 80011a4:	21b4      	movs	r1, #180	; 0xb4
 80011a6:	200a      	movs	r0, #10
 80011a8:	f001 fe25 	bl	8002df6 <ILI9341_WriteString>
	ILI9341_WriteString(150, 180, "Hello", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 80011ac:	4b90      	ldr	r3, [pc, #576]	; (80013f0 <LCD_task+0x308>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	9202      	str	r2, [sp, #8]
 80011b2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80011b6:	9201      	str	r2, [sp, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	9200      	str	r2, [sp, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a92      	ldr	r2, [pc, #584]	; (8001408 <LCD_task+0x320>)
 80011c0:	21b4      	movs	r1, #180	; 0xb4
 80011c2:	2096      	movs	r0, #150	; 0x96
 80011c4:	f001 fe17 	bl	8002df6 <ILI9341_WriteString>
	ILI9341_WriteString(100, 210, "MANDEVICES", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 80011c8:	4b89      	ldr	r3, [pc, #548]	; (80013f0 <LCD_task+0x308>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	9202      	str	r2, [sp, #8]
 80011ce:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80011d2:	9201      	str	r2, [sp, #4]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a8c      	ldr	r2, [pc, #560]	; (800140c <LCD_task+0x324>)
 80011dc:	21d2      	movs	r1, #210	; 0xd2
 80011de:	2064      	movs	r0, #100	; 0x64
 80011e0:	f001 fe09 	bl	8002df6 <ILI9341_WriteString>

	//Data
	ILI9341_WriteString(10, 60, "Temperature:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80011e4:	4b82      	ldr	r3, [pc, #520]	; (80013f0 <LCD_task+0x308>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	9202      	str	r2, [sp, #8]
 80011ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ee:	9201      	str	r2, [sp, #4]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	9200      	str	r2, [sp, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a86      	ldr	r2, [pc, #536]	; (8001410 <LCD_task+0x328>)
 80011f8:	213c      	movs	r1, #60	; 0x3c
 80011fa:	200a      	movs	r0, #10
 80011fc:	f001 fdfb 	bl	8002df6 <ILI9341_WriteString>
	ftoa(Node_1.Temperature, StrgTemp, 1);
 8001200:	4b84      	ldr	r3, [pc, #528]	; (8001414 <LCD_task+0x32c>)
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	2101      	movs	r1, #1
 800120c:	4618      	mov	r0, r3
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	f001 f8e9 	bl	80023e8 <ftoa>
	ILI9341_WriteString(150, 60, StrgTemp, Font_11x18, ILI9341_ORANGE, ILI9341_BLACK);
 8001216:	4b76      	ldr	r3, [pc, #472]	; (80013f0 <LCD_task+0x308>)
 8001218:	f107 0118 	add.w	r1, r7, #24
 800121c:	2200      	movs	r2, #0
 800121e:	9202      	str	r2, [sp, #8]
 8001220:	f64f 5220 	movw	r2, #64800	; 0xfd20
 8001224:	9201      	str	r2, [sp, #4]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	9200      	str	r2, [sp, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	460a      	mov	r2, r1
 800122e:	213c      	movs	r1, #60	; 0x3c
 8001230:	2096      	movs	r0, #150	; 0x96
 8001232:	f001 fde0 	bl	8002df6 <ILI9341_WriteString>

	ILI9341_WriteString(10, 90, "Humidity:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001236:	4b6e      	ldr	r3, [pc, #440]	; (80013f0 <LCD_task+0x308>)
 8001238:	2200      	movs	r2, #0
 800123a:	9202      	str	r2, [sp, #8]
 800123c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001240:	9201      	str	r2, [sp, #4]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	9200      	str	r2, [sp, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a73      	ldr	r2, [pc, #460]	; (8001418 <LCD_task+0x330>)
 800124a:	215a      	movs	r1, #90	; 0x5a
 800124c:	200a      	movs	r0, #10
 800124e:	f001 fdd2 	bl	8002df6 <ILI9341_WriteString>
	intToStr((int)Node_1.Humidity, StrgHumd, 2);
 8001252:	4b70      	ldr	r3, [pc, #448]	; (8001414 <LCD_task+0x32c>)
 8001254:	edd3 7a01 	vldr	s15, [r3, #4]
 8001258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2202      	movs	r2, #2
 8001262:	4619      	mov	r1, r3
 8001264:	ee17 0a90 	vmov	r0, s15
 8001268:	f001 f91a 	bl	80024a0 <intToStr>
	ILI9341_WriteString(150, 90, StrgHumd, Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 800126c:	4b60      	ldr	r3, [pc, #384]	; (80013f0 <LCD_task+0x308>)
 800126e:	f107 0114 	add.w	r1, r7, #20
 8001272:	2200      	movs	r2, #0
 8001274:	9202      	str	r2, [sp, #8]
 8001276:	221f      	movs	r2, #31
 8001278:	9201      	str	r2, [sp, #4]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	9200      	str	r2, [sp, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	460a      	mov	r2, r1
 8001282:	215a      	movs	r1, #90	; 0x5a
 8001284:	2096      	movs	r0, #150	; 0x96
 8001286:	f001 fdb6 	bl	8002df6 <ILI9341_WriteString>
	ILI9341_WriteString(180, 90, "%", Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 800128a:	4b59      	ldr	r3, [pc, #356]	; (80013f0 <LCD_task+0x308>)
 800128c:	2200      	movs	r2, #0
 800128e:	9202      	str	r2, [sp, #8]
 8001290:	221f      	movs	r2, #31
 8001292:	9201      	str	r2, [sp, #4]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	9200      	str	r2, [sp, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a60      	ldr	r2, [pc, #384]	; (800141c <LCD_task+0x334>)
 800129c:	215a      	movs	r1, #90	; 0x5a
 800129e:	20b4      	movs	r0, #180	; 0xb4
 80012a0:	f001 fda9 	bl	8002df6 <ILI9341_WriteString>

	ILI9341_WriteString(10, 120, "BPM:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80012a4:	4b52      	ldr	r3, [pc, #328]	; (80013f0 <LCD_task+0x308>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	9202      	str	r2, [sp, #8]
 80012aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ae:	9201      	str	r2, [sp, #4]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	9200      	str	r2, [sp, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a5a      	ldr	r2, [pc, #360]	; (8001420 <LCD_task+0x338>)
 80012b8:	2178      	movs	r1, #120	; 0x78
 80012ba:	200a      	movs	r0, #10
 80012bc:	f001 fd9b 	bl	8002df6 <ILI9341_WriteString>
	intToStr(Node_1.bpm, Strgbpm, 2);
 80012c0:	4b54      	ldr	r3, [pc, #336]	; (8001414 <LCD_task+0x32c>)
 80012c2:	7a1b      	ldrb	r3, [r3, #8]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f107 0310 	add.w	r3, r7, #16
 80012ca:	2202      	movs	r2, #2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f001 f8e7 	bl	80024a0 <intToStr>
	ILI9341_WriteString(150, 120, Strgbpm, Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 80012d2:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <LCD_task+0x308>)
 80012d4:	f107 0110 	add.w	r1, r7, #16
 80012d8:	2200      	movs	r2, #0
 80012da:	9202      	str	r2, [sp, #8]
 80012dc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80012e0:	9201      	str	r2, [sp, #4]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	9200      	str	r2, [sp, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	460a      	mov	r2, r1
 80012ea:	2178      	movs	r1, #120	; 0x78
 80012ec:	2096      	movs	r0, #150	; 0x96
 80012ee:	f001 fd82 	bl	8002df6 <ILI9341_WriteString>

	ILI9341_WriteString(10, 150, "Spo2:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80012f2:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <LCD_task+0x308>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	9202      	str	r2, [sp, #8]
 80012f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fc:	9201      	str	r2, [sp, #4]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	9200      	str	r2, [sp, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a47      	ldr	r2, [pc, #284]	; (8001424 <LCD_task+0x33c>)
 8001306:	2196      	movs	r1, #150	; 0x96
 8001308:	200a      	movs	r0, #10
 800130a:	f001 fd74 	bl	8002df6 <ILI9341_WriteString>
	intToStr(Node_1.spo2, Strgspo2, 2);
 800130e:	4b41      	ldr	r3, [pc, #260]	; (8001414 <LCD_task+0x32c>)
 8001310:	7a5b      	ldrb	r3, [r3, #9]
 8001312:	4618      	mov	r0, r3
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	2202      	movs	r2, #2
 800131a:	4619      	mov	r1, r3
 800131c:	f001 f8c0 	bl	80024a0 <intToStr>
	ILI9341_WriteString(150, 150, Strgspo2, Font_11x18, ILI9341_PINK, ILI9341_BLACK);
 8001320:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <LCD_task+0x308>)
 8001322:	f107 010c 	add.w	r1, r7, #12
 8001326:	2200      	movs	r2, #0
 8001328:	9202      	str	r2, [sp, #8]
 800132a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800132e:	9201      	str	r2, [sp, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	9200      	str	r2, [sp, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	460a      	mov	r2, r1
 8001338:	2196      	movs	r1, #150	; 0x96
 800133a:	2096      	movs	r0, #150	; 0x96
 800133c:	f001 fd5b 	bl	8002df6 <ILI9341_WriteString>
//			ILI9341_DrawCircle(Button_1.pos_x, Button_1.pos_y, Button_1.shape_r/4, ILI9341_BLACK);
//		}

	//start timer and softimer

	osTimerStart(Timer02Handle, Timeout);
 8001340:	4b39      	ldr	r3, [pc, #228]	; (8001428 <LCD_task+0x340>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001348:	4618      	mov	r0, r3
 800134a:	f008 fee3 	bl	800a114 <osTimerStart>
	osTimerStart(Timer03Handle, MeasurePeriod);
 800134e:	4b37      	ldr	r3, [pc, #220]	; (800142c <LCD_task+0x344>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f241 3188 	movw	r1, #5000	; 0x1388
 8001356:	4618      	mov	r0, r3
 8001358:	f008 fedc 	bl	800a114 <osTimerStart>

	max30102_init();
 800135c:	f001 fe24 	bl	8002fa8 <max30102_init>
	HAL_TIM_Base_Start_IT(&htim11);
 8001360:	4833      	ldr	r0, [pc, #204]	; (8001430 <LCD_task+0x348>)
 8001362:	f007 f94d 	bl	8008600 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	osThreadSuspend(LCDHandle);
 8001366:	4b33      	ldr	r3, [pc, #204]	; (8001434 <LCD_task+0x34c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f008 fde4 	bl	8009f38 <osThreadSuspend>
	if (HAL_GPIO_ReadPin(IRQ_MAX_GPIO_Port, IRQ_MAX_Pin) == GPIO_PIN_RESET)
 8001370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001374:	4830      	ldr	r0, [pc, #192]	; (8001438 <LCD_task+0x350>)
 8001376:	f003 f81b 	bl	80043b0 <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d113      	bne.n	80013a8 <LCD_task+0x2c0>
	{
		max30102_cal();
 8001380:	f002 f876 	bl	8003470 <max30102_cal>
		Node_1.bpm = max30102_getHeartRate();
 8001384:	f002 f9e8 	bl	8003758 <max30102_getHeartRate>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	4b21      	ldr	r3, [pc, #132]	; (8001414 <LCD_task+0x32c>)
 800138e:	721a      	strb	r2, [r3, #8]
		Node_1.spo2 = max30102_getSpO2();
 8001390:	f002 f9ee 	bl	8003770 <max30102_getSpO2>
 8001394:	4603      	mov	r3, r0
 8001396:	461a      	mov	r2, r3
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <LCD_task+0x32c>)
 800139a:	725a      	strb	r2, [r3, #9]
		HAL_UART_Transmit(&huart2, (uint8_t *) "\x1B[31m[Action]: Done\r\n", 24, 10);
 800139c:	230a      	movs	r3, #10
 800139e:	2218      	movs	r2, #24
 80013a0:	4926      	ldr	r1, [pc, #152]	; (800143c <LCD_task+0x354>)
 80013a2:	4827      	ldr	r0, [pc, #156]	; (8001440 <LCD_task+0x358>)
 80013a4:	f007 fc38 	bl	8008c18 <HAL_UART_Transmit>
	}

	Time_keeper.LCD_Time[0] = HAL_GetTick();
 80013a8:	f002 fa4e 	bl	8003848 <HAL_GetTick>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4a25      	ldr	r2, [pc, #148]	; (8001444 <LCD_task+0x35c>)
 80013b0:	6013      	str	r3, [r2, #0]
	//Update

	ftoa(Node_1.Temperature, StrgTemp, 1);
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <LCD_task+0x32c>)
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	f107 0318 	add.w	r3, r7, #24
 80013bc:	2101      	movs	r1, #1
 80013be:	4618      	mov	r0, r3
 80013c0:	eeb0 0a67 	vmov.f32	s0, s15
 80013c4:	f001 f810 	bl	80023e8 <ftoa>
	ILI9341_WriteString(150, 60, StrgTemp, Font_11x18, ILI9341_ORANGE, ILI9341_BLACK);
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <LCD_task+0x308>)
 80013ca:	f107 0118 	add.w	r1, r7, #24
 80013ce:	2200      	movs	r2, #0
 80013d0:	9202      	str	r2, [sp, #8]
 80013d2:	f64f 5220 	movw	r2, #64800	; 0xfd20
 80013d6:	9201      	str	r2, [sp, #4]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	9200      	str	r2, [sp, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	460a      	mov	r2, r1
 80013e0:	213c      	movs	r1, #60	; 0x3c
 80013e2:	2096      	movs	r0, #150	; 0x96
 80013e4:	f001 fd07 	bl	8002df6 <ILI9341_WriteString>

	intToStr((int)Node_1.Humidity, StrgHumd, 2);
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <LCD_task+0x32c>)
 80013ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80013ee:	e02b      	b.n	8001448 <LCD_task+0x360>
 80013f0:	20000024 	.word	0x20000024
 80013f4:	080132e4 	.word	0x080132e4
 80013f8:	2000001c 	.word	0x2000001c
 80013fc:	08013304 	.word	0x08013304
 8001400:	08013310 	.word	0x08013310
 8001404:	0801331c 	.word	0x0801331c
 8001408:	08013324 	.word	0x08013324
 800140c:	0801332c 	.word	0x0801332c
 8001410:	08013338 	.word	0x08013338
 8001414:	20000230 	.word	0x20000230
 8001418:	08013348 	.word	0x08013348
 800141c:	08013354 	.word	0x08013354
 8001420:	08013358 	.word	0x08013358
 8001424:	08013360 	.word	0x08013360
 8001428:	200002a4 	.word	0x200002a4
 800142c:	200002a8 	.word	0x200002a8
 8001430:	200003ac 	.word	0x200003ac
 8001434:	20000294 	.word	0x20000294
 8001438:	40020400 	.word	0x40020400
 800143c:	08013368 	.word	0x08013368
 8001440:	200003f4 	.word	0x200003f4
 8001444:	2000023c 	.word	0x2000023c
 8001448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2202      	movs	r2, #2
 8001452:	4619      	mov	r1, r3
 8001454:	ee17 0a90 	vmov	r0, s15
 8001458:	f001 f822 	bl	80024a0 <intToStr>
	ILI9341_WriteString(150, 90, StrgHumd, Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 800145c:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <LCD_task+0x470>)
 800145e:	f107 0114 	add.w	r1, r7, #20
 8001462:	2200      	movs	r2, #0
 8001464:	9202      	str	r2, [sp, #8]
 8001466:	221f      	movs	r2, #31
 8001468:	9201      	str	r2, [sp, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	9200      	str	r2, [sp, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	460a      	mov	r2, r1
 8001472:	215a      	movs	r1, #90	; 0x5a
 8001474:	2096      	movs	r0, #150	; 0x96
 8001476:	f001 fcbe 	bl	8002df6 <ILI9341_WriteString>
	ILI9341_WriteString(180, 90, "%", Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 800147a:	4b37      	ldr	r3, [pc, #220]	; (8001558 <LCD_task+0x470>)
 800147c:	2200      	movs	r2, #0
 800147e:	9202      	str	r2, [sp, #8]
 8001480:	221f      	movs	r2, #31
 8001482:	9201      	str	r2, [sp, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	9200      	str	r2, [sp, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a34      	ldr	r2, [pc, #208]	; (800155c <LCD_task+0x474>)
 800148c:	215a      	movs	r1, #90	; 0x5a
 800148e:	20b4      	movs	r0, #180	; 0xb4
 8001490:	f001 fcb1 	bl	8002df6 <ILI9341_WriteString>

	intToStr(Node_1.bpm, Strgbpm, 2);
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <LCD_task+0x478>)
 8001496:	7a1b      	ldrb	r3, [r3, #8]
 8001498:	4618      	mov	r0, r3
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	2202      	movs	r2, #2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f000 fffd 	bl	80024a0 <intToStr>
	ILI9341_WriteString(150, 120, Strgbpm, Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <LCD_task+0x470>)
 80014a8:	f107 0110 	add.w	r1, r7, #16
 80014ac:	2200      	movs	r2, #0
 80014ae:	9202      	str	r2, [sp, #8]
 80014b0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80014b4:	9201      	str	r2, [sp, #4]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	9200      	str	r2, [sp, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	460a      	mov	r2, r1
 80014be:	2178      	movs	r1, #120	; 0x78
 80014c0:	2096      	movs	r0, #150	; 0x96
 80014c2:	f001 fc98 	bl	8002df6 <ILI9341_WriteString>

	intToStr(Node_1.spo2, Strgspo2, 2);
 80014c6:	4b26      	ldr	r3, [pc, #152]	; (8001560 <LCD_task+0x478>)
 80014c8:	7a5b      	ldrb	r3, [r3, #9]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2202      	movs	r2, #2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f000 ffe4 	bl	80024a0 <intToStr>
	ILI9341_WriteString(150, 150, Strgspo2, Font_11x18, ILI9341_PINK, ILI9341_BLACK);
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <LCD_task+0x470>)
 80014da:	f107 010c 	add.w	r1, r7, #12
 80014de:	2200      	movs	r2, #0
 80014e0:	9202      	str	r2, [sp, #8]
 80014e2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80014e6:	9201      	str	r2, [sp, #4]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	9200      	str	r2, [sp, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	460a      	mov	r2, r1
 80014f0:	2196      	movs	r1, #150	; 0x96
 80014f2:	2096      	movs	r0, #150	; 0x96
 80014f4:	f001 fc7f 	bl	8002df6 <ILI9341_WriteString>
	//check button state
	if (Button_1.state == 1)
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <LCD_task+0x47c>)
 80014fa:	7b1b      	ldrb	r3, [r3, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00f      	beq.n	8001520 <LCD_task+0x438>
		{
			ILI9341_WriteString(260, 120, "Bad ", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <LCD_task+0x470>)
 8001502:	2200      	movs	r2, #0
 8001504:	9202      	str	r2, [sp, #8]
 8001506:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800150a:	9201      	str	r2, [sp, #4]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	9200      	str	r2, [sp, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a15      	ldr	r2, [pc, #84]	; (8001568 <LCD_task+0x480>)
 8001514:	2178      	movs	r1, #120	; 0x78
 8001516:	f44f 7082 	mov.w	r0, #260	; 0x104
 800151a:	f001 fc6c 	bl	8002df6 <ILI9341_WriteString>
 800151e:	e00e      	b.n	800153e <LCD_task+0x456>
//			ILI9341_FillCircle(Button_1.pos_x, Button_1.pos_y + 0.5, Button_1.shape_r, ILI9341_BLUE);
//			ILI9341_DrawCircle(Button_1.pos_x, Button_1.pos_y, Button_1.shape_r/4, ILI9341_BLACK);
		}
	else
		{
			ILI9341_WriteString(260, 120 , "Good", Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <LCD_task+0x470>)
 8001522:	2200      	movs	r2, #0
 8001524:	9202      	str	r2, [sp, #8]
 8001526:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800152a:	9201      	str	r2, [sp, #4]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	9200      	str	r2, [sp, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <LCD_task+0x484>)
 8001534:	2178      	movs	r1, #120	; 0x78
 8001536:	f44f 7082 	mov.w	r0, #260	; 0x104
 800153a:	f001 fc5c 	bl	8002df6 <ILI9341_WriteString>
//	sprintf(payload, "{temp}: %2.2f, {humd}: %2f %, {bpm}: %2d, {spo2}: %2d \r\n", Node_1.Temperature, Node_1.Humidity, Node_1.bpm, Node_1.spo2);
//	HAL_UART_Transmit(&huart2, (uint8_t *) payload, strlen(payload), 200);

//	memset(payload, 0, strlen(payload));

	Time_keeper.LCD_Time[1] = HAL_GetTick();
 800153e:	f002 f983 	bl	8003848 <HAL_GetTick>
 8001542:	4603      	mov	r3, r0
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <LCD_task+0x488>)
 8001546:	6053      	str	r3, [r2, #4]
	Time_keeper.LCD_Time[2] = Time_keeper.LCD_Time[1] - Time_keeper.LCD_Time[0];
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <LCD_task+0x488>)
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <LCD_task+0x488>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	4a07      	ldr	r2, [pc, #28]	; (8001570 <LCD_task+0x488>)
 8001554:	6093      	str	r3, [r2, #8]
	osThreadSuspend(LCDHandle);
 8001556:	e706      	b.n	8001366 <LCD_task+0x27e>
 8001558:	20000024 	.word	0x20000024
 800155c:	08013354 	.word	0x08013354
 8001560:	20000230 	.word	0x20000230
 8001564:	20000004 	.word	0x20000004
 8001568:	08013380 	.word	0x08013380
 800156c:	08013388 	.word	0x08013388
 8001570:	2000023c 	.word	0x2000023c

08001574 <IRQ_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IRQ_task */
void IRQ_task(void *argument)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IRQ_task */
	uint32_t currentTick = 0, lastTick = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	if (osSemaphoreAcquire(Touch_binaryHandle, portMAX_DELAY) == osOK)
 8001584:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <IRQ_task+0xfc>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	4618      	mov	r0, r3
 800158e:	f008 feaf 	bl	800a2f0 <osSemaphoreAcquire>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f5      	bne.n	8001584 <IRQ_task+0x10>
	{
		Time_keeper.IRQ_Time[0] = HAL_GetTick();
 8001598:	f002 f956 	bl	8003848 <HAL_GetTick>
 800159c:	4603      	mov	r3, r0
 800159e:	4a35      	ldr	r2, [pc, #212]	; (8001674 <IRQ_task+0x100>)
 80015a0:	60d3      	str	r3, [r2, #12]
		osDelay(100);
 80015a2:	2064      	movs	r0, #100	; 0x64
 80015a4:	f008 fd0a 	bl	8009fbc <osDelay>

		//debounce irq touch
		currentTick = HAL_GetTick();
 80015a8:	f002 f94e 	bl	8003848 <HAL_GetTick>
 80015ac:	60b8      	str	r0, [r7, #8]
		if ((HAL_GPIO_ReadPin(T_IRQ_GPIO_Port, T_IRQ_Pin) == 0) && (currentTick - lastTick > 500))
 80015ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b2:	4831      	ldr	r0, [pc, #196]	; (8001678 <IRQ_task+0x104>)
 80015b4:	f002 fefc 	bl	80043b0 <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1e2      	bne.n	8001584 <IRQ_task+0x10>
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015c8:	d9dc      	bls.n	8001584 <IRQ_task+0x10>
		{
			osThreadResume(LCDHandle);
 80015ca:	4b2c      	ldr	r3, [pc, #176]	; (800167c <IRQ_task+0x108>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f008 fcd3 	bl	8009f7a <osThreadResume>
			HAL_UART_Transmit(&huart2, (uint8_t *) "\x1b[32m[Action]: Touch\r\n", 24, 10);
 80015d4:	230a      	movs	r3, #10
 80015d6:	2218      	movs	r2, #24
 80015d8:	4929      	ldr	r1, [pc, #164]	; (8001680 <IRQ_task+0x10c>)
 80015da:	482a      	ldr	r0, [pc, #168]	; (8001684 <IRQ_task+0x110>)
 80015dc:	f007 fb1c 	bl	8008c18 <HAL_UART_Transmit>
			lastTick = currentTick;
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	60fb      	str	r3, [r7, #12]

			//init spi lcd
			HAL_SPI_DeInit(&hspi1);
 80015e4:	4828      	ldr	r0, [pc, #160]	; (8001688 <IRQ_task+0x114>)
 80015e6:	f006 fbc5 	bl	8007d74 <HAL_SPI_DeInit>
			hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80015ea:	4b27      	ldr	r3, [pc, #156]	; (8001688 <IRQ_task+0x114>)
 80015ec:	2230      	movs	r2, #48	; 0x30
 80015ee:	61da      	str	r2, [r3, #28]
			HAL_SPI_Init(&hspi1);
 80015f0:	4825      	ldr	r0, [pc, #148]	; (8001688 <IRQ_task+0x114>)
 80015f2:	f006 fa2b 	bl	8007a4c <HAL_SPI_Init>

			//reset Timeout Timer
			osTimerStop(Timer02Handle);
 80015f6:	4b25      	ldr	r3, [pc, #148]	; (800168c <IRQ_task+0x118>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f008 fdb8 	bl	800a170 <osTimerStop>
			osTimerStart(Timer02Handle, 100);
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <IRQ_task+0x118>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2164      	movs	r1, #100	; 0x64
 8001606:	4618      	mov	r0, r3
 8001608:	f008 fd84 	bl	800a114 <osTimerStart>

			//Handle touch
			if (Mode == SLEEP)
 800160c:	4b20      	ldr	r3, [pc, #128]	; (8001690 <IRQ_task+0x11c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d113      	bne.n	800163c <IRQ_task+0xc8>
			{
				Mode = ACTIVE;
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <IRQ_task+0x11c>)
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, 1);
 800161a:	2201      	movs	r2, #1
 800161c:	2102      	movs	r1, #2
 800161e:	481d      	ldr	r0, [pc, #116]	; (8001694 <IRQ_task+0x120>)
 8001620:	f002 feec 	bl	80043fc <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, (uint8_t *) "\x1b[32m[Action]: Wake\r\n", 23, 10);
 8001624:	230a      	movs	r3, #10
 8001626:	2217      	movs	r2, #23
 8001628:	491b      	ldr	r1, [pc, #108]	; (8001698 <IRQ_task+0x124>)
 800162a:	4816      	ldr	r0, [pc, #88]	; (8001684 <IRQ_task+0x110>)
 800162c:	f007 faf4 	bl	8008c18 <HAL_UART_Transmit>
				osThreadResume(LCDHandle);
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <IRQ_task+0x108>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f008 fca0 	bl	8009f7a <osThreadResume>
 800163a:	e005      	b.n	8001648 <IRQ_task+0xd4>
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *) "\x1b[32m[Action]: Active\r\n", 24, 10);
 800163c:	230a      	movs	r3, #10
 800163e:	2218      	movs	r2, #24
 8001640:	4916      	ldr	r1, [pc, #88]	; (800169c <IRQ_task+0x128>)
 8001642:	4810      	ldr	r0, [pc, #64]	; (8001684 <IRQ_task+0x110>)
 8001644:	f007 fae8 	bl	8008c18 <HAL_UART_Transmit>
			}
			osTimerStart(Timer02Handle, Timeout);
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <IRQ_task+0x118>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001650:	4618      	mov	r0, r3
 8001652:	f008 fd5f 	bl	800a114 <osTimerStart>
			Time_keeper.IRQ_Time[1] = HAL_GetTick();
 8001656:	f002 f8f7 	bl	8003848 <HAL_GetTick>
 800165a:	4603      	mov	r3, r0
 800165c:	4a05      	ldr	r2, [pc, #20]	; (8001674 <IRQ_task+0x100>)
 800165e:	6113      	str	r3, [r2, #16]
			Time_keeper.IRQ_Time[2] = Time_keeper.IRQ_Time[1] - Time_keeper.IRQ_Time[0];
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <IRQ_task+0x100>)
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <IRQ_task+0x100>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	4a02      	ldr	r2, [pc, #8]	; (8001674 <IRQ_task+0x100>)
 800166c:	6153      	str	r3, [r2, #20]
	if (osSemaphoreAcquire(Touch_binaryHandle, portMAX_DELAY) == osOK)
 800166e:	e789      	b.n	8001584 <IRQ_task+0x10>
 8001670:	200002ac 	.word	0x200002ac
 8001674:	2000023c 	.word	0x2000023c
 8001678:	40020000 	.word	0x40020000
 800167c:	20000294 	.word	0x20000294
 8001680:	08013390 	.word	0x08013390
 8001684:	200003f4 	.word	0x200003f4
 8001688:	20000308 	.word	0x20000308
 800168c:	200002a4 	.word	0x200002a4
 8001690:	20000000 	.word	0x20000000
 8001694:	40020400 	.word	0x40020400
 8001698:	080133a8 	.word	0x080133a8
 800169c:	080133c0 	.word	0x080133c0

080016a0 <Uart_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Uart_task */
void Uart_task(void *argument)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Uart_task */

	HAL_UART_Transmit(&huart2, (uint8_t *) EDS_INFO, 282, 50);
 80016a8:	2332      	movs	r3, #50	; 0x32
 80016aa:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80016ae:	4916      	ldr	r1, [pc, #88]	; (8001708 <Uart_task+0x68>)
 80016b0:	4816      	ldr	r0, [pc, #88]	; (800170c <Uart_task+0x6c>)
 80016b2:	f007 fab1 	bl	8008c18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *) EDS_INFO_FM, 143, 50);
 80016b6:	2332      	movs	r3, #50	; 0x32
 80016b8:	228f      	movs	r2, #143	; 0x8f
 80016ba:	4915      	ldr	r1, [pc, #84]	; (8001710 <Uart_task+0x70>)
 80016bc:	4813      	ldr	r0, [pc, #76]	; (800170c <Uart_task+0x6c>)
 80016be:	f007 faab 	bl	8008c18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *) "[Action]: Init..\r\n", 18, 10);
 80016c2:	230a      	movs	r3, #10
 80016c4:	2212      	movs	r2, #18
 80016c6:	4913      	ldr	r1, [pc, #76]	; (8001714 <Uart_task+0x74>)
 80016c8:	4810      	ldr	r0, [pc, #64]	; (800170c <Uart_task+0x6c>)
 80016ca:	f007 faa5 	bl	8008c18 <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(Uart_binaryHandle, osWaitForever) == osOK)
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <Uart_task+0x78>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f04f 31ff 	mov.w	r1, #4294967295
 80016d6:	4618      	mov	r0, r3
 80016d8:	f008 fe0a 	bl	800a2f0 <osSemaphoreAcquire>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f5      	bne.n	80016ce <Uart_task+0x2e>
		  {
		  	  HAL_UART_Transmit(&huart2, (uint8_t *) action, sizeof(action), 10);
 80016e2:	230a      	movs	r3, #10
 80016e4:	2232      	movs	r2, #50	; 0x32
 80016e6:	490d      	ldr	r1, [pc, #52]	; (800171c <Uart_task+0x7c>)
 80016e8:	4808      	ldr	r0, [pc, #32]	; (800170c <Uart_task+0x6c>)
 80016ea:	f007 fa95 	bl	8008c18 <HAL_UART_Transmit>
		  	  memset(action, 0, sizeof(action));
 80016ee:	2232      	movs	r2, #50	; 0x32
 80016f0:	2100      	movs	r1, #0
 80016f2:	480a      	ldr	r0, [pc, #40]	; (800171c <Uart_task+0x7c>)
 80016f4:	f00c fac5 	bl	800dc82 <memset>
		  	  HAL_UART_Transmit(&huart2, (uint8_t *) "[Action]: Acquire\r\n", 19, 10);
 80016f8:	230a      	movs	r3, #10
 80016fa:	2213      	movs	r2, #19
 80016fc:	4908      	ldr	r1, [pc, #32]	; (8001720 <Uart_task+0x80>)
 80016fe:	4803      	ldr	r0, [pc, #12]	; (800170c <Uart_task+0x6c>)
 8001700:	f007 fa8a 	bl	8008c18 <HAL_UART_Transmit>
	  if (osSemaphoreAcquire(Uart_binaryHandle, osWaitForever) == osOK)
 8001704:	e7e3      	b.n	80016ce <Uart_task+0x2e>
 8001706:	bf00      	nop
 8001708:	080133d8 	.word	0x080133d8
 800170c:	200003f4 	.word	0x200003f4
 8001710:	080134f4 	.word	0x080134f4
 8001714:	08013584 	.word	0x08013584
 8001718:	200002b0 	.word	0x200002b0
 800171c:	20000260 	.word	0x20000260
 8001720:	08013598 	.word	0x08013598

08001724 <LCD_Timeout>:
  /* USER CODE END Uart_task */
}

/* LCD_Timeout function */
void LCD_Timeout(void *argument)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCD_Timeout */
	HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2102      	movs	r1, #2
 8001730:	480a      	ldr	r0, [pc, #40]	; (800175c <LCD_Timeout+0x38>)
 8001732:	f002 fe63 	bl	80043fc <HAL_GPIO_WritePin>
	Mode = SLEEP;
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <LCD_Timeout+0x3c>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) "\x1B[34m[Action]: Sleep\r\n", 24, 50);
 800173c:	2332      	movs	r3, #50	; 0x32
 800173e:	2218      	movs	r2, #24
 8001740:	4908      	ldr	r1, [pc, #32]	; (8001764 <LCD_Timeout+0x40>)
 8001742:	4809      	ldr	r0, [pc, #36]	; (8001768 <LCD_Timeout+0x44>)
 8001744:	f007 fa68 	bl	8008c18 <HAL_UART_Transmit>
	osThreadSuspend(LCDHandle);
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <LCD_Timeout+0x48>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f008 fbf3 	bl	8009f38 <osThreadSuspend>
  /* USER CODE END LCD_Timeout */
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40020400 	.word	0x40020400
 8001760:	20000000 	.word	0x20000000
 8001764:	080135ac 	.word	0x080135ac
 8001768:	200003f4 	.word	0x200003f4
 800176c:	20000294 	.word	0x20000294

08001770 <Measure_Timer>:

/* Measure_Timer function */
void Measure_Timer(void *argument)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af04      	add	r7, sp, #16
 8001776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Measure_Timer */

	ILI9341_WriteString(150, 180, "Measure", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <Measure_Timer+0x98>)
 800177a:	2200      	movs	r2, #0
 800177c:	9202      	str	r2, [sp, #8]
 800177e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001782:	9201      	str	r2, [sp, #4]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	9200      	str	r2, [sp, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a20      	ldr	r2, [pc, #128]	; (800180c <Measure_Timer+0x9c>)
 800178c:	21b4      	movs	r1, #180	; 0xb4
 800178e:	2096      	movs	r0, #150	; 0x96
 8001790:	f001 fb31 	bl	8002df6 <ILI9341_WriteString>
	Time_keeper.Measure_Time[0] = HAL_GetTick();
 8001794:	f002 f858 	bl	8003848 <HAL_GetTick>
 8001798:	4603      	mov	r3, r0
 800179a:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <Measure_Timer+0xa0>)
 800179c:	6193      	str	r3, [r2, #24]
	HAL_UART_Transmit(&huart2, (uint8_t *) "\x1B[31m[Action]: Measure\r\n", 26, 100);
 800179e:	2364      	movs	r3, #100	; 0x64
 80017a0:	221a      	movs	r2, #26
 80017a2:	491c      	ldr	r1, [pc, #112]	; (8001814 <Measure_Timer+0xa4>)
 80017a4:	481c      	ldr	r0, [pc, #112]	; (8001818 <Measure_Timer+0xa8>)
 80017a6:	f007 fa37 	bl	8008c18 <HAL_UART_Transmit>

    DHT_GetData(&DHT);
 80017aa:	481c      	ldr	r0, [pc, #112]	; (800181c <Measure_Timer+0xac>)
 80017ac:	f000 ffa6 	bl	80026fc <DHT_GetData>
   	//uint16_t Presence = DHT_Check_Response ();
	//uint8_t temp = DHT.Temperature;



	Time_keeper.Measure_Time[1] = HAL_GetTick();
 80017b0:	f002 f84a 	bl	8003848 <HAL_GetTick>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4a16      	ldr	r2, [pc, #88]	; (8001810 <Measure_Timer+0xa0>)
 80017b8:	61d3      	str	r3, [r2, #28]
	Time_keeper.Measure_Time[2] = Time_keeper.Measure_Time[1] - Time_keeper.Measure_Time[0];
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <Measure_Timer+0xa0>)
 80017bc:	69da      	ldr	r2, [r3, #28]
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <Measure_Timer+0xa0>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	4a12      	ldr	r2, [pc, #72]	; (8001810 <Measure_Timer+0xa0>)
 80017c6:	6213      	str	r3, [r2, #32]

	osDelay(1000);
 80017c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017cc:	f008 fbf6 	bl	8009fbc <osDelay>
	ILI9341_WriteString(150, 180, "Idle   ", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <Measure_Timer+0x98>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	9202      	str	r2, [sp, #8]
 80017d6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80017da:	9201      	str	r2, [sp, #4]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	9200      	str	r2, [sp, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <Measure_Timer+0xb0>)
 80017e4:	21b4      	movs	r1, #180	; 0xb4
 80017e6:	2096      	movs	r0, #150	; 0x96
 80017e8:	f001 fb05 	bl	8002df6 <ILI9341_WriteString>
	if (Mode == ACTIVE)
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <Measure_Timer+0xb4>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d104      	bne.n	80017fe <Measure_Timer+0x8e>
		osThreadResume(LCDHandle);
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <Measure_Timer+0xb8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f008 fbbe 	bl	8009f7a <osThreadResume>
  /* USER CODE END Measure_Timer */
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000024 	.word	0x20000024
 800180c:	080135c4 	.word	0x080135c4
 8001810:	2000023c 	.word	0x2000023c
 8001814:	080135cc 	.word	0x080135cc
 8001818:	200003f4 	.word	0x200003f4
 800181c:	20000228 	.word	0x20000228
 8001820:	080135e8 	.word	0x080135e8
 8001824:	20000000 	.word	0x20000000
 8001828:	20000294 	.word	0x20000294

0800182c <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == T_IRQ_Pin)
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800183c:	d11f      	bne.n	800187e <HAL_GPIO_EXTI_Callback+0x52>
  {
	  	Button_1.state = !Button_1.state;
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001840:	7b1b      	ldrb	r3, [r3, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf14      	ite	ne
 8001846:	2301      	movne	r3, #1
 8001848:	2300      	moveq	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	f083 0301 	eor.w	r3, r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_GPIO_EXTI_Callback+0x5c>)
 800185a:	731a      	strb	r2, [r3, #12]
	  	Node_1.Temperature = 22.5;
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_GPIO_EXTI_Callback+0x60>)
 800185e:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <HAL_GPIO_EXTI_Callback+0x64>)
 8001860:	601a      	str	r2, [r3, #0]
	  	Node_1.bpm = 110;
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_GPIO_EXTI_Callback+0x60>)
 8001864:	226e      	movs	r2, #110	; 0x6e
 8001866:	721a      	strb	r2, [r3, #8]
	  	Node_1.Humidity = 82.0;
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_GPIO_EXTI_Callback+0x60>)
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_GPIO_EXTI_Callback+0x68>)
 800186c:	605a      	str	r2, [r3, #4]
	  	Node_1.spo2 = 85;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <HAL_GPIO_EXTI_Callback+0x60>)
 8001870:	2255      	movs	r2, #85	; 0x55
 8001872:	725a      	strb	r2, [r3, #9]
		osSemaphoreRelease(Touch_binaryHandle);
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f008 fd8b 	bl	800a394 <osSemaphoreRelease>
  }

}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000004 	.word	0x20000004
 800188c:	20000230 	.word	0x20000230
 8001890:	41b40000 	.word	0x41b40000
 8001894:	42a40000 	.word	0x42a40000
 8001898:	200002ac 	.word	0x200002ac

0800189c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af04      	add	r7, sp, #16
 80018a2:	6078      	str	r0, [r7, #4]

	if (huart == &huart2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <HAL_UART_RxCpltCallback+0x5c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d121      	bne.n	80018f0 <HAL_UART_RxCpltCallback+0x54>
	{
		osSemaphoreRelease(Uart_binaryHandle);
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <HAL_UART_RxCpltCallback+0x60>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f008 fd6f 	bl	800a394 <osSemaphoreRelease>
		HAL_UART_Transmit(&huart2, (uint8_t *) "\x1B[31m[Action]: EXTI\r\n", 24, 10);
 80018b6:	230a      	movs	r3, #10
 80018b8:	2218      	movs	r2, #24
 80018ba:	4911      	ldr	r1, [pc, #68]	; (8001900 <HAL_UART_RxCpltCallback+0x64>)
 80018bc:	480e      	ldr	r0, [pc, #56]	; (80018f8 <HAL_UART_RxCpltCallback+0x5c>)
 80018be:	f007 f9ab 	bl	8008c18 <HAL_UART_Transmit>
		ILI9341_WriteString(150, 180, "Uart   ", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_UART_RxCpltCallback+0x68>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	9202      	str	r2, [sp, #8]
 80018c8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80018cc:	9201      	str	r2, [sp, #4]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	9200      	str	r2, [sp, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <HAL_UART_RxCpltCallback+0x6c>)
 80018d6:	21b4      	movs	r1, #180	; 0xb4
 80018d8:	2096      	movs	r0, #150	; 0x96
 80018da:	f001 fa8c 	bl	8002df6 <ILI9341_WriteString>
		osDelay(1000);
 80018de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e2:	f008 fb6b 	bl	8009fbc <osDelay>
		HAL_UART_Receive_IT(&huart2, (uint8_t*) action, sizeof(action));
 80018e6:	2232      	movs	r2, #50	; 0x32
 80018e8:	4908      	ldr	r1, [pc, #32]	; (800190c <HAL_UART_RxCpltCallback+0x70>)
 80018ea:	4803      	ldr	r0, [pc, #12]	; (80018f8 <HAL_UART_RxCpltCallback+0x5c>)
 80018ec:	f007 fa26 	bl	8008d3c <HAL_UART_Receive_IT>
	}
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200003f4 	.word	0x200003f4
 80018fc:	200002b0 	.word	0x200002b0
 8001900:	080135f0 	.word	0x080135f0
 8001904:	20000024 	.word	0x20000024
 8001908:	08013608 	.word	0x08013608
 800190c:	20000260 	.word	0x20000260

08001910 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <MX_GPIO_Init+0x190>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a5c      	ldr	r2, [pc, #368]	; (8001aa0 <MX_GPIO_Init+0x190>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b5a      	ldr	r3, [pc, #360]	; (8001aa0 <MX_GPIO_Init+0x190>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4b56      	ldr	r3, [pc, #344]	; (8001aa0 <MX_GPIO_Init+0x190>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a55      	ldr	r2, [pc, #340]	; (8001aa0 <MX_GPIO_Init+0x190>)
 800194c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <MX_GPIO_Init+0x190>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	4b4f      	ldr	r3, [pc, #316]	; (8001aa0 <MX_GPIO_Init+0x190>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a4e      	ldr	r2, [pc, #312]	; (8001aa0 <MX_GPIO_Init+0x190>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b4c      	ldr	r3, [pc, #304]	; (8001aa0 <MX_GPIO_Init+0x190>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	4b48      	ldr	r3, [pc, #288]	; (8001aa0 <MX_GPIO_Init+0x190>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a47      	ldr	r2, [pc, #284]	; (8001aa0 <MX_GPIO_Init+0x190>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b45      	ldr	r3, [pc, #276]	; (8001aa0 <MX_GPIO_Init+0x190>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|DHT_Pin, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800199c:	4841      	ldr	r0, [pc, #260]	; (8001aa4 <MX_GPIO_Init+0x194>)
 800199e:	f002 fd2d 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_LED_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80019a2:	2200      	movs	r2, #0
 80019a4:	f240 3102 	movw	r1, #770	; 0x302
 80019a8:	483f      	ldr	r0, [pc, #252]	; (8001aa8 <MX_GPIO_Init+0x198>)
 80019aa:	f002 fd27 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80019b4:	483d      	ldr	r0, [pc, #244]	; (8001aac <MX_GPIO_Init+0x19c>)
 80019b6:	f002 fd21 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	4834      	ldr	r0, [pc, #208]	; (8001aa4 <MX_GPIO_Init+0x194>)
 80019d4:	f002 f956 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT_Pin;
 80019d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	482c      	ldr	r0, [pc, #176]	; (8001aa4 <MX_GPIO_Init+0x194>)
 80019f2:	f002 f947 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 80019f6:	2302      	movs	r3, #2
 80019f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4826      	ldr	r0, [pc, #152]	; (8001aa8 <MX_GPIO_Init+0x198>)
 8001a0e:	f002 f939 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_MAX_Pin;
 8001a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a18:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_MAX_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	481f      	ldr	r0, [pc, #124]	; (8001aa8 <MX_GPIO_Init+0x198>)
 8001a2a:	f002 f92b 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	4819      	ldr	r0, [pc, #100]	; (8001aac <MX_GPIO_Init+0x19c>)
 8001a46:	f002 f91d 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin;
 8001a4a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	4812      	ldr	r0, [pc, #72]	; (8001aac <MX_GPIO_Init+0x19c>)
 8001a64:	f002 f90e 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 8001a68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <MX_GPIO_Init+0x198>)
 8001a82:	f002 f8ff 	bl	8003c84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2105      	movs	r1, #5
 8001a8a:	2017      	movs	r0, #23
 8001a8c:	f001 fffe 	bl	8003a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a90:	2017      	movs	r0, #23
 8001a92:	f002 f827 	bl	8003ae4 <HAL_NVIC_EnableIRQ>

}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	40020000 	.word	0x40020000

08001ab0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <MX_I2C1_Init+0x50>)
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <MX_I2C1_Init+0x54>)
 8001ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_I2C1_Init+0x50>)
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <MX_I2C1_Init+0x58>)
 8001abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <MX_I2C1_Init+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_I2C1_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_I2C1_Init+0x50>)
 8001ace:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ad2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <MX_I2C1_Init+0x50>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_I2C1_Init+0x50>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <MX_I2C1_Init+0x50>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_I2C1_Init+0x50>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <MX_I2C1_Init+0x50>)
 8001aee:	f002 fccf 	bl	8004490 <HAL_I2C_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001af8:	f000 f90e 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200002b4 	.word	0x200002b4
 8001b04:	40005400 	.word	0x40005400
 8001b08:	00061a80 	.word	0x00061a80

08001b0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <HAL_I2C_MspInit+0xa4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d13b      	bne.n	8001ba6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_I2C_MspInit+0xa8>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <HAL_I2C_MspInit+0xa8>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_I2C_MspInit+0xa8>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b4a:	23c0      	movs	r3, #192	; 0xc0
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b4e:	2312      	movs	r3, #18
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <HAL_I2C_MspInit+0xac>)
 8001b66:	f002 f88d 	bl	8003c84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_I2C_MspInit+0xa8>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <HAL_I2C_MspInit+0xa8>)
 8001b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_I2C_MspInit+0xa8>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2105      	movs	r1, #5
 8001b8a:	201f      	movs	r0, #31
 8001b8c:	f001 ff7e 	bl	8003a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b90:	201f      	movs	r0, #31
 8001b92:	f001 ffa7 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2105      	movs	r1, #5
 8001b9a:	2020      	movs	r0, #32
 8001b9c:	f001 ff76 	bl	8003a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ba0:	2020      	movs	r0, #32
 8001ba2:	f001 ff9f 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	3728      	adds	r7, #40	; 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40005400 	.word	0x40005400
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020400 	.word	0x40020400

08001bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc0:	f001 fe0c 	bl	80037dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc4:	f000 f81a 	bl	8001bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bc8:	f7ff fea2 	bl	8001910 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001bcc:	f000 f8b4 	bl	8001d38 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001bd0:	f000 fb8e 	bl	80022f0 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8001bd4:	f000 fb40 	bl	8002258 <MX_TIM11_Init>
  MX_I2C1_Init();
 8001bd8:	f7ff ff6a 	bl	8001ab0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, (uint8_t*) action, sizeof(action));
 8001bdc:	2232      	movs	r2, #50	; 0x32
 8001bde:	4905      	ldr	r1, [pc, #20]	; (8001bf4 <main+0x38>)
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <main+0x3c>)
 8001be2:	f007 f8ab 	bl	8008d3c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001be6:	f008 f8cb 	bl	8009d80 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001bea:	f7ff fa0d 	bl	8001008 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001bee:	f008 f8eb 	bl	8009dc8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <main+0x36>
 8001bf4:	20000260 	.word	0x20000260
 8001bf8:	200003f4 	.word	0x200003f4

08001bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b094      	sub	sp, #80	; 0x50
 8001c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c02:	f107 0320 	add.w	r3, r7, #32
 8001c06:	2230      	movs	r2, #48	; 0x30
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f00c f839 	bl	800dc82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <SystemClock_Config+0xcc>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	4a27      	ldr	r2, [pc, #156]	; (8001cc8 <SystemClock_Config+0xcc>)
 8001c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c30:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <SystemClock_Config+0xcc>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <SystemClock_Config+0xd0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c48:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <SystemClock_Config+0xd0>)
 8001c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <SystemClock_Config+0xd0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c60:	2301      	movs	r3, #1
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c64:	2310      	movs	r3, #16
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c70:	2308      	movs	r3, #8
 8001c72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001c74:	2354      	movs	r3, #84	; 0x54
 8001c76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c80:	f107 0320 	add.w	r3, r7, #32
 8001c84:	4618      	mov	r0, r3
 8001c86:	f005 f8ff 	bl	8006e88 <HAL_RCC_OscConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c90:	f000 f842 	bl	8001d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c94:	230f      	movs	r3, #15
 8001c96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	2102      	movs	r1, #2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f005 fc11 	bl	80074d8 <HAL_RCC_ClockConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001cbc:	f000 f82c 	bl	8001d18 <Error_Handler>
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3750      	adds	r7, #80	; 0x50
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40007000 	.word	0x40007000

08001cd0 <__io_putchar>:
	 set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10);
 8001cd8:	1d39      	adds	r1, r7, #4
 8001cda:	230a      	movs	r3, #10
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <__io_putchar+0x20>)
 8001ce0:	f006 ff9a 	bl	8008c18 <HAL_UART_Transmit>
  return ch;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200003f4 	.word	0x200003f4

08001cf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d06:	f001 fd8b 	bl	8003820 <HAL_IncTick>
  {
//	  HAL_TIM_Base_Stop_IT(htim);
//	  if (Button_1.state == false)
  }
  /* USER CODE END Callback 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40014400 	.word	0x40014400

08001d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d1c:	b672      	cpsid	i
}
 8001d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <Error_Handler+0x8>

08001d22 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d3e:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <MX_SPI1_Init+0x68>)
 8001d40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d84:	220a      	movs	r2, #10
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d88:	4804      	ldr	r0, [pc, #16]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d8a:	f005 fe5f 	bl	8007a4c <HAL_SPI_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d94:	f7ff ffc0 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000308 	.word	0x20000308
 8001da0:	40013000 	.word	0x40013000

08001da4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <HAL_SPI_MspInit+0x94>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d133      	bne.n	8001e2e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <HAL_SPI_MspInit+0x98>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <HAL_SPI_MspInit+0x98>)
 8001dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_SPI_MspInit+0x98>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_SPI_MspInit+0x98>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <HAL_SPI_MspInit+0x98>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_SPI_MspInit+0x98>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dfe:	23e0      	movs	r3, #224	; 0xe0
 8001e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e0e:	2305      	movs	r3, #5
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	4809      	ldr	r0, [pc, #36]	; (8001e40 <HAL_SPI_MspInit+0x9c>)
 8001e1a:	f001 ff33 	bl	8003c84 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2105      	movs	r1, #5
 8001e22:	2023      	movs	r0, #35	; 0x23
 8001e24:	f001 fe32 	bl	8003a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e28:	2023      	movs	r0, #35	; 0x23
 8001e2a:	f001 fe5b 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e2e:	bf00      	nop
 8001e30:	3728      	adds	r7, #40	; 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40013000 	.word	0x40013000
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020000 	.word	0x40020000

08001e44 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a09      	ldr	r2, [pc, #36]	; (8001e78 <HAL_SPI_MspDeInit+0x34>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10c      	bne.n	8001e70 <HAL_SPI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_SPI_MspDeInit+0x38>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_SPI_MspDeInit+0x38>)
 8001e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001e62:	21e0      	movs	r1, #224	; 0xe0
 8001e64:	4806      	ldr	r0, [pc, #24]	; (8001e80 <HAL_SPI_MspDeInit+0x3c>)
 8001e66:	f002 f9a1 	bl	80041ac <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8001e6a:	2023      	movs	r0, #35	; 0x23
 8001e6c:	f001 fe52 	bl	8003b14 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40013000 	.word	0x40013000
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40020000 	.word	0x40020000

08001e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <HAL_MspInit+0x64>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <HAL_MspInit+0x64>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e98:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <HAL_MspInit+0x64>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_MspInit+0x64>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <HAL_MspInit+0x64>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_MspInit+0x64>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	210f      	movs	r1, #15
 8001ec6:	f06f 0001 	mvn.w	r0, #1
 8001eca:	f001 fddf 	bl	8003a8c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2105      	movs	r1, #5
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f001 fdda 	bl	8003a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f001 fe03 	bl	8003ae4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800

08001eec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	; 0x30
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <HAL_InitTick+0xd0>)
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	4a2d      	ldr	r2, [pc, #180]	; (8001fbc <HAL_InitTick+0xd0>)
 8001f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_InitTick+0xd0>)
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f18:	f107 020c 	add.w	r2, r7, #12
 8001f1c:	f107 0310 	add.w	r3, r7, #16
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f005 fd60 	bl	80079e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f28:	f005 fd4a 	bl	80079c0 <HAL_RCC_GetPCLK2Freq>
 8001f2c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f30:	4a23      	ldr	r2, [pc, #140]	; (8001fc0 <HAL_InitTick+0xd4>)
 8001f32:	fba2 2303 	umull	r2, r3, r2, r3
 8001f36:	0c9b      	lsrs	r3, r3, #18
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_InitTick+0xd8>)
 8001f3e:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <HAL_InitTick+0xdc>)
 8001f40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_InitTick+0xd8>)
 8001f44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f48:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_InitTick+0xd8>)
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001f50:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <HAL_InitTick+0xd8>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_InitTick+0xd8>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_InitTick+0xd8>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001f62:	4818      	ldr	r0, [pc, #96]	; (8001fc4 <HAL_InitTick+0xd8>)
 8001f64:	f006 fa86 	bl	8008474 <HAL_TIM_Base_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d11b      	bne.n	8001fae <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001f76:	4813      	ldr	r0, [pc, #76]	; (8001fc4 <HAL_InitTick+0xd8>)
 8001f78:	f006 fb42 	bl	8008600 <HAL_TIM_Base_Start_IT>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001f82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d111      	bne.n	8001fae <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f8a:	2019      	movs	r0, #25
 8001f8c:	f001 fdaa 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b0f      	cmp	r3, #15
 8001f94:	d808      	bhi.n	8001fa8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001f96:	2200      	movs	r2, #0
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	2019      	movs	r0, #25
 8001f9c:	f001 fd76 	bl	8003a8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <HAL_InitTick+0xe0>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e002      	b.n	8001fae <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3730      	adds	r7, #48	; 0x30
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	431bde83 	.word	0x431bde83
 8001fc4:	20000360 	.word	0x20000360
 8001fc8:	40014400 	.word	0x40014400
 8001fcc:	2000002c 	.word	0x2000002c

08001fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <NMI_Handler+0x4>

08001fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fda:	e7fe      	b.n	8001fda <HardFault_Handler+0x4>

08001fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <MemManage_Handler+0x4>

08001fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe6:	e7fe      	b.n	8001fe6 <BusFault_Handler+0x4>

08001fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <UsageFault_Handler+0x4>

08001fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002000:	f004 ff28 	bl	8006e54 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 800200c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002010:	f002 fa26 	bl	8004460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}

08002018 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(timeout > 0)
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <TIM1_UP_TIM10_IRQHandler+0x24>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <TIM1_UP_TIM10_IRQHandler+0x18>
		timeout--;
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <TIM1_UP_TIM10_IRQHandler+0x24>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <TIM1_UP_TIM10_IRQHandler+0x24>)
 800202e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002030:	4803      	ldr	r0, [pc, #12]	; (8002040 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8002032:	f006 fb77 	bl	8008724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200005f6 	.word	0x200005f6
 8002040:	20000360 	.word	0x20000360

08002044 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800204a:	f006 fb6b 	bl	8008724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200003ac 	.word	0x200003ac

08002058 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <I2C1_EV_IRQHandler+0x10>)
 800205e:	f002 ff99 	bl	8004f94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200002b4 	.word	0x200002b4

0800206c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <I2C1_ER_IRQHandler+0x10>)
 8002072:	f003 f900 	bl	8005276 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200002b4 	.word	0x200002b4

08002080 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <SPI1_IRQHandler+0x10>)
 8002086:	f006 f80d 	bl	80080a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000308 	.word	0x20000308

08002094 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <USART2_IRQHandler+0x10>)
 800209a:	f006 fe7f 	bl	8008d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200003f4 	.word	0x200003f4

080020a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return 1;
 80020ac:	2301      	movs	r3, #1
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <_kill>:

int _kill(int pid, int sig)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020c2:	f00b fcad 	bl	800da20 <__errno>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2216      	movs	r2, #22
 80020ca:	601a      	str	r2, [r3, #0]
  return -1;
 80020cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <_exit>:

void _exit (int status)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ffe7 	bl	80020b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020ea:	e7fe      	b.n	80020ea <_exit+0x12>

080020ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	e00a      	b.n	8002114 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020fe:	f3af 8000 	nop.w
 8002102:	4601      	mov	r1, r0
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	60ba      	str	r2, [r7, #8]
 800210a:	b2ca      	uxtb	r2, r1
 800210c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3301      	adds	r3, #1
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	429a      	cmp	r2, r3
 800211a:	dbf0      	blt.n	80020fe <_read+0x12>
  }

  return len;
 800211c:	687b      	ldr	r3, [r7, #4]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	e009      	b.n	800214c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	60ba      	str	r2, [r7, #8]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fdc5 	bl	8001cd0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3301      	adds	r3, #1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	dbf1      	blt.n	8002138 <_write+0x12>
  }
  return len;
 8002154:	687b      	ldr	r3, [r7, #4]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <_close>:

int _close(int file)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002186:	605a      	str	r2, [r3, #4]
  return 0;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_isatty>:

int _isatty(int file)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d0:	4a14      	ldr	r2, [pc, #80]	; (8002224 <_sbrk+0x5c>)
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <_sbrk+0x60>)
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021dc:	4b13      	ldr	r3, [pc, #76]	; (800222c <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d102      	bne.n	80021ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <_sbrk+0x64>)
 80021e6:	4a12      	ldr	r2, [pc, #72]	; (8002230 <_sbrk+0x68>)
 80021e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d207      	bcs.n	8002208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021f8:	f00b fc12 	bl	800da20 <__errno>
 80021fc:	4603      	mov	r3, r0
 80021fe:	220c      	movs	r2, #12
 8002200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	e009      	b.n	800221c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <_sbrk+0x64>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800220e:	4b07      	ldr	r3, [pc, #28]	; (800222c <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	4a05      	ldr	r2, [pc, #20]	; (800222c <_sbrk+0x64>)
 8002218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800221a:	68fb      	ldr	r3, [r7, #12]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20010000 	.word	0x20010000
 8002228:	00000400 	.word	0x00000400
 800222c:	200003a8 	.word	0x200003a8
 8002230:	20005020 	.word	0x20005020

08002234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <SystemInit+0x20>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223e:	4a05      	ldr	r2, [pc, #20]	; (8002254 <SystemInit+0x20>)
 8002240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <MX_TIM11_Init+0x40>)
 800225e:	4a0f      	ldr	r2, [pc, #60]	; (800229c <MX_TIM11_Init+0x44>)
 8002260:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 839;
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <MX_TIM11_Init+0x40>)
 8002264:	f240 3247 	movw	r2, #839	; 0x347
 8002268:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <MX_TIM11_Init+0x40>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <MX_TIM11_Init+0x40>)
 8002272:	2263      	movs	r2, #99	; 0x63
 8002274:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <MX_TIM11_Init+0x40>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <MX_TIM11_Init+0x40>)
 800227e:	2200      	movs	r2, #0
 8002280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002282:	4805      	ldr	r0, [pc, #20]	; (8002298 <MX_TIM11_Init+0x40>)
 8002284:	f006 f8f6 	bl	8008474 <HAL_TIM_Base_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800228e:	f7ff fd43 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200003ac 	.word	0x200003ac
 800229c:	40014800 	.word	0x40014800

080022a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <HAL_TIM_Base_MspInit+0x48>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d115      	bne.n	80022de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <HAL_TIM_Base_MspInit+0x4c>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a0c      	ldr	r2, [pc, #48]	; (80022ec <HAL_TIM_Base_MspInit+0x4c>)
 80022bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_TIM_Base_MspInit+0x4c>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2105      	movs	r1, #5
 80022d2:	201a      	movs	r0, #26
 80022d4:	f001 fbda 	bl	8003a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80022d8:	201a      	movs	r0, #26
 80022da:	f001 fc03 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40014800 	.word	0x40014800
 80022ec:	40023800 	.word	0x40023800

080022f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <MX_USART2_UART_Init+0x4c>)
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <MX_USART2_UART_Init+0x50>)
 80022f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <MX_USART2_UART_Init+0x4c>)
 80022fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <MX_USART2_UART_Init+0x4c>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <MX_USART2_UART_Init+0x4c>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <MX_USART2_UART_Init+0x4c>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <MX_USART2_UART_Init+0x4c>)
 8002316:	220c      	movs	r2, #12
 8002318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <MX_USART2_UART_Init+0x4c>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <MX_USART2_UART_Init+0x4c>)
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_USART2_UART_Init+0x4c>)
 8002328:	f006 fbc0 	bl	8008aac <HAL_UART_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002332:	f7ff fcf1 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200003f4 	.word	0x200003f4
 8002340:	40004400 	.word	0x40004400

08002344 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <HAL_UART_MspInit+0x94>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d133      	bne.n	80023ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_UART_MspInit+0x98>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <HAL_UART_MspInit+0x98>)
 8002370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_UART_MspInit+0x98>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_UART_MspInit+0x98>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a14      	ldr	r2, [pc, #80]	; (80023dc <HAL_UART_MspInit+0x98>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_UART_MspInit+0x98>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800239e:	230c      	movs	r3, #12
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ae:	2307      	movs	r3, #7
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	4809      	ldr	r0, [pc, #36]	; (80023e0 <HAL_UART_MspInit+0x9c>)
 80023ba:	f001 fc63 	bl	8003c84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	210a      	movs	r1, #10
 80023c2:	2026      	movs	r0, #38	; 0x26
 80023c4:	f001 fb62 	bl	8003a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023c8:	2026      	movs	r0, #38	; 0x26
 80023ca:	f001 fb8b 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023ce:	bf00      	nop
 80023d0:	3728      	adds	r7, #40	; 0x28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40004400 	.word	0x40004400
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020000 	.word	0x40020000
 80023e4:	00000000 	.word	0x00000000

080023e8 <ftoa>:
#include "common.h"
#include <math.h>
#include <stdio.h>
// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80023f2:	60b8      	str	r0, [r7, #8]
 80023f4:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 80023f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80023fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023fe:	ee17 3a90 	vmov	r3, s15
 8002402:	61fb      	str	r3, [r7, #28]
    // Extract floating part
    float fpart = n - (float)ipart;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800240e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002416:	edc7 7a06 	vstr	s15, [r7, #24]
    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	69f8      	ldr	r0, [r7, #28]
 8002420:	f000 f83e 	bl	80024a0 <intToStr>
 8002424:	6178      	str	r0, [r7, #20]
    // check for display option after point
    if (afterpoint != 0)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d030      	beq.n	800248e <ftoa+0xa6>
    {
        res[i] = '.'; // add dot
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	4413      	add	r3, r2
 8002432:	222e      	movs	r2, #46	; 0x2e
 8002434:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 8002436:	69b8      	ldr	r0, [r7, #24]
 8002438:	f7fe f88e 	bl	8000558 <__aeabi_f2d>
 800243c:	4604      	mov	r4, r0
 800243e:	460d      	mov	r5, r1
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7fe f877 	bl	8000534 <__aeabi_i2d>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	ec43 2b11 	vmov	d1, r2, r3
 800244e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002498 <ftoa+0xb0>
 8002452:	f00f fff3 	bl	801243c <pow>
 8002456:	ec53 2b10 	vmov	r2, r3, d0
 800245a:	4620      	mov	r0, r4
 800245c:	4629      	mov	r1, r5
 800245e:	f7fe f8d3 	bl	8000608 <__aeabi_dmul>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f7fe fbc5 	bl	8000bf8 <__aeabi_d2f>
 800246e:	4603      	mov	r3, r0
 8002470:	61bb      	str	r3, [r7, #24]
        intToStr((int)fpart, res + i + 1, afterpoint);
 8002472:	edd7 7a06 	vldr	s15, [r7, #24]
 8002476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3301      	adds	r3, #1
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	4413      	add	r3, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	4619      	mov	r1, r3
 8002486:	ee17 0a90 	vmov	r0, s15
 800248a:	f000 f809 	bl	80024a0 <intToStr>
    }
}
 800248e:	bf00      	nop
 8002490:	3720      	adds	r7, #32
 8002492:	46bd      	mov	sp, r7
 8002494:	bdb0      	pop	{r4, r5, r7, pc}
 8002496:	bf00      	nop
 8002498:	00000000 	.word	0x00000000
 800249c:	40240000 	.word	0x40240000

080024a0 <intToStr>:

int intToStr(int x, char str[], int d)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
    int i = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
    if (x == 0)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d126      	bne.n	8002504 <intToStr+0x64>
    {
        str[i++] = '0';
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	617a      	str	r2, [r7, #20]
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4413      	add	r3, r2
 80024c2:	2230      	movs	r2, #48	; 0x30
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	e029      	b.n	800251c <intToStr+0x7c>
    }
    else
    {
        while (x)
        {
            str[i++] = (x % 10) + '0';
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <intToStr+0xa0>)
 80024cc:	fb83 1302 	smull	r1, r3, r3, r2
 80024d0:	1099      	asrs	r1, r3, #2
 80024d2:	17d3      	asrs	r3, r2, #31
 80024d4:	1ac9      	subs	r1, r1, r3
 80024d6:	460b      	mov	r3, r1
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	1ad1      	subs	r1, r2, r3
 80024e0:	b2ca      	uxtb	r2, r1
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	1c59      	adds	r1, r3, #1
 80024e6:	6179      	str	r1, [r7, #20]
 80024e8:	4619      	mov	r1, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	440b      	add	r3, r1
 80024ee:	3230      	adds	r2, #48	; 0x30
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	701a      	strb	r2, [r3, #0]
            x = x / 10;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <intToStr+0xa0>)
 80024f8:	fb82 1203 	smull	r1, r2, r2, r3
 80024fc:	1092      	asrs	r2, r2, #2
 80024fe:	17db      	asrs	r3, r3, #31
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	60fb      	str	r3, [r7, #12]
        while (x)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1de      	bne.n	80024c8 <intToStr+0x28>
        }
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 800250a:	e007      	b.n	800251c <intToStr+0x7c>
        str[i++] = '0';
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	617a      	str	r2, [r7, #20]
 8002512:	461a      	mov	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4413      	add	r3, r2
 8002518:	2230      	movs	r2, #48	; 0x30
 800251a:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	dbf3      	blt.n	800250c <intToStr+0x6c>

    reverse(str, i);
 8002524:	6979      	ldr	r1, [r7, #20]
 8002526:	68b8      	ldr	r0, [r7, #8]
 8002528:	f000 f80c 	bl	8002544 <reverse>
    str[i] = '\0';
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4413      	add	r3, r2
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
    return i;
 8002536:	697b      	ldr	r3, [r7, #20]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	66666667 	.word	0x66666667

08002544 <reverse>:

void reverse(char* str, int len)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	3b01      	subs	r3, #1
 8002556:	613b      	str	r3, [r7, #16]
    while (i < j)
 8002558:	e018      	b.n	800258c <reverse+0x48>
    {
        temp = str[i];
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4413      	add	r3, r2
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	441a      	add	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	440b      	add	r3, r1
 8002570:	7812      	ldrb	r2, [r2, #0]
 8002572:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]
        i++;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
        j--;
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	3b01      	subs	r3, #1
 800258a:	613b      	str	r3, [r7, #16]
    while (i < j)
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	429a      	cmp	r2, r3
 8002592:	dbe2      	blt.n	800255a <reverse+0x16>
    }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <delay_us>:
//	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
//}
void delay_us(uint16_t us)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim11, 0);
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <delay_us+0x30>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2200      	movs	r2, #0
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim11) < us);
 80025b6:	bf00      	nop
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <delay_us+0x30>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d3f9      	bcc.n	80025b8 <delay_us+0x14>
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	200003ac 	.word	0x200003ac

080025d8 <DHT_Start>:

void DHT_Start (void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0

//	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80025dc:	2200      	movs	r2, #0
 80025de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025e2:	4808      	ldr	r0, [pc, #32]	; (8002604 <DHT_Start+0x2c>)
 80025e4:	f001 ff0a 	bl	80043fc <HAL_GPIO_WritePin>
	osDelay(18);
 80025e8:	2012      	movs	r0, #18
 80025ea:	f007 fce7 	bl	8009fbc <osDelay>
    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 80025ee:	2201      	movs	r2, #1
 80025f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <DHT_Start+0x2c>)
 80025f6:	f001 ff01 	bl	80043fc <HAL_GPIO_WritePin>
    osDelay(1);   // wait for 30us
 80025fa:	2001      	movs	r0, #1
 80025fc:	f007 fcde 	bl	8009fbc <osDelay>
//	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40020800 	.word	0x40020800

08002608 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	71fb      	strb	r3, [r7, #7]
	osDelay(1);
 8002612:	2001      	movs	r0, #1
 8002614:	f007 fcd2 	bl	8009fbc <osDelay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8002618:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800261c:	4810      	ldr	r0, [pc, #64]	; (8002660 <DHT_Check_Response+0x58>)
 800261e:	f001 fec7 	bl	80043b0 <HAL_GPIO_ReadPin>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10c      	bne.n	8002642 <DHT_Check_Response+0x3a>
	{
//		delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8002628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800262c:	480c      	ldr	r0, [pc, #48]	; (8002660 <DHT_Check_Response+0x58>)
 800262e:	f001 febf 	bl	80043b0 <HAL_GPIO_ReadPin>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <DHT_Check_Response+0x36>
 8002638:	2301      	movs	r3, #1
 800263a:	71fb      	strb	r3, [r7, #7]
 800263c:	e001      	b.n	8002642 <DHT_Check_Response+0x3a>
		else Response = -1;
 800263e:	23ff      	movs	r3, #255	; 0xff
 8002640:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8002642:	bf00      	nop
 8002644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002648:	4805      	ldr	r0, [pc, #20]	; (8002660 <DHT_Check_Response+0x58>)
 800264a:	f001 feb1 	bl	80043b0 <HAL_GPIO_ReadPin>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f7      	bne.n	8002644 <DHT_Check_Response+0x3c>

	return Response;
 8002654:	79fb      	ldrb	r3, [r7, #7]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40020800 	.word	0x40020800

08002664 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800266a:	2300      	movs	r3, #0
 800266c:	71bb      	strb	r3, [r7, #6]
 800266e:	e03a      	b.n	80026e6 <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8002670:	bf00      	nop
 8002672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002676:	4820      	ldr	r0, [pc, #128]	; (80026f8 <DHT_Read+0x94>)
 8002678:	f001 fe9a 	bl	80043b0 <HAL_GPIO_ReadPin>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f7      	beq.n	8002672 <DHT_Read+0xe>
		delay_us (40);   // wait for 40 us
 8002682:	2028      	movs	r0, #40	; 0x28
 8002684:	f7ff ff8e 	bl	80025a4 <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8002688:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800268c:	481a      	ldr	r0, [pc, #104]	; (80026f8 <DHT_Read+0x94>)
 800268e:	f001 fe8f 	bl	80043b0 <HAL_GPIO_ReadPin>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10e      	bne.n	80026b6 <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8002698:	79bb      	ldrb	r3, [r7, #6]
 800269a:	f1c3 0307 	rsb	r3, r3, #7
 800269e:	2201      	movs	r2, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	b25b      	sxtb	r3, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	b25a      	sxtb	r2, r3
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	4013      	ands	r3, r2
 80026b0:	b25b      	sxtb	r3, r3
 80026b2:	71fb      	strb	r3, [r7, #7]
 80026b4:	e00b      	b.n	80026ce <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80026b6:	79bb      	ldrb	r3, [r7, #6]
 80026b8:	f1c3 0307 	rsb	r3, r3, #7
 80026bc:	2201      	movs	r2, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	b25a      	sxtb	r2, r3
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b25b      	sxtb	r3, r3
 80026cc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80026ce:	bf00      	nop
 80026d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026d4:	4808      	ldr	r0, [pc, #32]	; (80026f8 <DHT_Read+0x94>)
 80026d6:	f001 fe6b 	bl	80043b0 <HAL_GPIO_ReadPin>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f7      	bne.n	80026d0 <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 80026e0:	79bb      	ldrb	r3, [r7, #6]
 80026e2:	3301      	adds	r3, #1
 80026e4:	71bb      	strb	r3, [r7, #6]
 80026e6:	79bb      	ldrb	r3, [r7, #6]
 80026e8:	2b07      	cmp	r3, #7
 80026ea:	d9c1      	bls.n	8002670 <DHT_Read+0xc>
	}
	return i;
 80026ec:	79fb      	ldrb	r3, [r7, #7]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40020800 	.word	0x40020800

080026fc <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8002704:	f7ff ff68 	bl	80025d8 <DHT_Start>
	Presence = DHT_Check_Response ();
 8002708:	f7ff ff7e 	bl	8002608 <DHT_Check_Response>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <DHT_GetData+0xa4>)
 8002712:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8002714:	f7ff ffa6 	bl	8002664 <DHT_Read>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <DHT_GetData+0xa8>)
 800271e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8002720:	f7ff ffa0 	bl	8002664 <DHT_Read>
 8002724:	4603      	mov	r3, r0
 8002726:	461a      	mov	r2, r3
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <DHT_GetData+0xac>)
 800272a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 800272c:	f7ff ff9a 	bl	8002664 <DHT_Read>
 8002730:	4603      	mov	r3, r0
 8002732:	461a      	mov	r2, r3
 8002734:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <DHT_GetData+0xb0>)
 8002736:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8002738:	f7ff ff94 	bl	8002664 <DHT_Read>
 800273c:	4603      	mov	r3, r0
 800273e:	461a      	mov	r2, r3
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <DHT_GetData+0xb4>)
 8002742:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8002744:	f7ff ff8e 	bl	8002664 <DHT_Read>
 8002748:	4603      	mov	r3, r0
 800274a:	b29a      	uxth	r2, r3
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <DHT_GetData+0xb8>)
 800274e:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8002750:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <DHT_GetData+0xb8>)
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	4619      	mov	r1, r3
 8002756:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <DHT_GetData+0xa8>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <DHT_GetData+0xac>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4413      	add	r3, r2
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <DHT_GetData+0xb0>)
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	4413      	add	r3, r2
 8002768:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <DHT_GetData+0xb4>)
 800276a:	7812      	ldrb	r2, [r2, #0]
 800276c:	4413      	add	r3, r2
 800276e:	4299      	cmp	r1, r3
 8002770:	d111      	bne.n	8002796 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <DHT_GetData+0xb0>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8002784:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <DHT_GetData+0xa8>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	ee07 3a90 	vmov	s15, r3
 800278c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	2000043e 	.word	0x2000043e
 80027a4:	20000438 	.word	0x20000438
 80027a8:	20000439 	.word	0x20000439
 80027ac:	2000043a 	.word	0x2000043a
 80027b0:	2000043b 	.word	0x2000043b
 80027b4:	2000043c 	.word	0x2000043c

080027b8 <ILI9341_Select>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"


static void ILI9341_Select()
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 80027bc:	2200      	movs	r2, #0
 80027be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027c2:	4802      	ldr	r0, [pc, #8]	; (80027cc <ILI9341_Select+0x14>)
 80027c4:	f001 fe1a 	bl	80043fc <HAL_GPIO_WritePin>

}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40020000 	.word	0x40020000

080027d0 <ILI9341_Unselect>:

void ILI9341_Unselect()
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80027d4:	2201      	movs	r2, #1
 80027d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027da:	4802      	ldr	r0, [pc, #8]	; (80027e4 <ILI9341_Unselect+0x14>)
 80027dc:	f001 fe0e 	bl	80043fc <HAL_GPIO_WritePin>
}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40020000 	.word	0x40020000

080027e8 <ILI9341_Reset>:

static void ILI9341_Reset()
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80027ec:	2200      	movs	r2, #0
 80027ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027f2:	4807      	ldr	r0, [pc, #28]	; (8002810 <ILI9341_Reset+0x28>)
 80027f4:	f001 fe02 	bl	80043fc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80027f8:	200a      	movs	r0, #10
 80027fa:	f001 f831 	bl	8003860 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80027fe:	2201      	movs	r2, #1
 8002800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <ILI9341_Reset+0x28>)
 8002806:	f001 fdf9 	bl	80043fc <HAL_GPIO_WritePin>
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40020400 	.word	0x40020400

08002814 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800281e:	2200      	movs	r2, #0
 8002820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002824:	4806      	ldr	r0, [pc, #24]	; (8002840 <ILI9341_WriteCommand+0x2c>)
 8002826:	f001 fde9 	bl	80043fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800282a:	1df9      	adds	r1, r7, #7
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
 8002830:	2201      	movs	r2, #1
 8002832:	4804      	ldr	r0, [pc, #16]	; (8002844 <ILI9341_WriteCommand+0x30>)
 8002834:	f005 faea 	bl	8007e0c <HAL_SPI_Transmit>
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40020400 	.word	0x40020400
 8002844:	20000308 	.word	0x20000308

08002848 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8002852:	2201      	movs	r2, #1
 8002854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002858:	4810      	ldr	r0, [pc, #64]	; (800289c <ILI9341_WriteData+0x54>)
 800285a:	f001 fdcf 	bl	80043fc <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 800285e:	e015      	b.n	800288c <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002866:	bf28      	it	cs
 8002868:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800286c:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800286e:	89fa      	ldrh	r2, [r7, #14]
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	480a      	ldr	r0, [pc, #40]	; (80028a0 <ILI9341_WriteData+0x58>)
 8002878:	f005 fac8 	bl	8007e0c <HAL_SPI_Transmit>
        buff += chunk_size;
 800287c:	89fb      	ldrh	r3, [r7, #14]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8002884:	89fb      	ldrh	r3, [r7, #14]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1e6      	bne.n	8002860 <ILI9341_WriteData+0x18>
    }
}
 8002892:	bf00      	nop
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40020400 	.word	0x40020400
 80028a0:	20000308 	.word	0x20000308

080028a4 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4604      	mov	r4, r0
 80028ac:	4608      	mov	r0, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	461a      	mov	r2, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	80fb      	strh	r3, [r7, #6]
 80028b6:	4603      	mov	r3, r0
 80028b8:	80bb      	strh	r3, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	807b      	strh	r3, [r7, #2]
 80028be:	4613      	mov	r3, r2
 80028c0:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 80028c2:	202a      	movs	r0, #42	; 0x2a
 80028c4:	f7ff ffa6 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	733b      	strb	r3, [r7, #12]
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	737b      	strb	r3, [r7, #13]
 80028d8:	887b      	ldrh	r3, [r7, #2]
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	b29b      	uxth	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	73bb      	strb	r3, [r7, #14]
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	2104      	movs	r1, #4
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff ffaa 	bl	8002848 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80028f4:	202b      	movs	r0, #43	; 0x2b
 80028f6:	f7ff ff8d 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80028fa:	88bb      	ldrh	r3, [r7, #4]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	b29b      	uxth	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	723b      	strb	r3, [r7, #8]
 8002904:	88bb      	ldrh	r3, [r7, #4]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	727b      	strb	r3, [r7, #9]
 800290a:	883b      	ldrh	r3, [r7, #0]
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	b29b      	uxth	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	72bb      	strb	r3, [r7, #10]
 8002914:	883b      	ldrh	r3, [r7, #0]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800291a:	f107 0308 	add.w	r3, r7, #8
 800291e:	2104      	movs	r1, #4
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff91 	bl	8002848 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8002926:	202c      	movs	r0, #44	; 0x2c
 8002928:	f7ff ff74 	bl	8002814 <ILI9341_WriteCommand>
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bd90      	pop	{r4, r7, pc}

08002934 <ILI9341_Init>:

void ILI9341_Init()
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b09b      	sub	sp, #108	; 0x6c
 8002938:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800293a:	f7ff ff3d 	bl	80027b8 <ILI9341_Select>
    ILI9341_Reset();
 800293e:	f7ff ff53 	bl	80027e8 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8002942:	2001      	movs	r0, #1
 8002944:	f7ff ff66 	bl	8002814 <ILI9341_WriteCommand>
    HAL_Delay(500);
 8002948:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800294c:	f000 ff88 	bl	8003860 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8002950:	20cb      	movs	r0, #203	; 0xcb
 8002952:	f7ff ff5f 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8002956:	4a8a      	ldr	r2, [pc, #552]	; (8002b80 <ILI9341_Init+0x24c>)
 8002958:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800295c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002960:	6018      	str	r0, [r3, #0]
 8002962:	3304      	adds	r3, #4
 8002964:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002966:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800296a:	2105      	movs	r1, #5
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff6b 	bl	8002848 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8002972:	20cf      	movs	r0, #207	; 0xcf
 8002974:	f7ff ff4e 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8002978:	4a82      	ldr	r2, [pc, #520]	; (8002b84 <ILI9341_Init+0x250>)
 800297a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	4611      	mov	r1, r2
 8002982:	8019      	strh	r1, [r3, #0]
 8002984:	3302      	adds	r3, #2
 8002986:	0c12      	lsrs	r2, r2, #16
 8002988:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800298a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800298e:	2103      	movs	r1, #3
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff59 	bl	8002848 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8002996:	20e8      	movs	r0, #232	; 0xe8
 8002998:	f7ff ff3c 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 800299c:	4a7a      	ldr	r2, [pc, #488]	; (8002b88 <ILI9341_Init+0x254>)
 800299e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	4611      	mov	r1, r2
 80029a6:	8019      	strh	r1, [r3, #0]
 80029a8:	3302      	adds	r3, #2
 80029aa:	0c12      	lsrs	r2, r2, #16
 80029ac:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80029ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029b2:	2103      	movs	r1, #3
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff47 	bl	8002848 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80029ba:	20ea      	movs	r0, #234	; 0xea
 80029bc:	f7ff ff2a 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 80029c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029ca:	2102      	movs	r1, #2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff3b 	bl	8002848 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 80029d2:	20ed      	movs	r0, #237	; 0xed
 80029d4:	f7ff ff1e 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80029d8:	4b6c      	ldr	r3, [pc, #432]	; (8002b8c <ILI9341_Init+0x258>)
 80029da:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 80029dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029e0:	2104      	movs	r1, #4
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ff30 	bl	8002848 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80029e8:	20f7      	movs	r0, #247	; 0xf7
 80029ea:	f7ff ff13 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80029ee:	2320      	movs	r3, #32
 80029f0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80029f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff24 	bl	8002848 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8002a00:	20c0      	movs	r0, #192	; 0xc0
 8002a02:	f7ff ff07 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8002a06:	2323      	movs	r3, #35	; 0x23
 8002a08:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8002a0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a10:	2101      	movs	r1, #1
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff18 	bl	8002848 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8002a18:	20c1      	movs	r0, #193	; 0xc1
 8002a1a:	f7ff fefb 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8002a1e:	2310      	movs	r3, #16
 8002a20:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8002a24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a28:	2101      	movs	r1, #1
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ff0c 	bl	8002848 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8002a30:	20c5      	movs	r0, #197	; 0xc5
 8002a32:	f7ff feef 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8002a36:	f642 033e 	movw	r3, #10302	; 0x283e
 8002a3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 8002a3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a42:	2102      	movs	r1, #2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff feff 	bl	8002848 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8002a4a:	20c7      	movs	r0, #199	; 0xc7
 8002a4c:	f7ff fee2 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8002a50:	2386      	movs	r3, #134	; 0x86
 8002a52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8002a56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fef3 	bl	8002848 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8002a62:	2036      	movs	r0, #54	; 0x36
 8002a64:	f7ff fed6 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8002a68:	2348      	movs	r3, #72	; 0x48
 8002a6a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 8002a6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a72:	2101      	movs	r1, #1
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fee7 	bl	8002848 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8002a7a:	203a      	movs	r0, #58	; 0x3a
 8002a7c:	f7ff feca 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8002a80:	2355      	movs	r3, #85	; 0x55
 8002a82:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 8002a86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fedb 	bl	8002848 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8002a92:	20b1      	movs	r0, #177	; 0xb1
 8002a94:	f7ff febe 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8002a98:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a9c:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 8002a9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fecf 	bl	8002848 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8002aaa:	20b6      	movs	r0, #182	; 0xb6
 8002aac:	f7ff feb2 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8002ab0:	4a37      	ldr	r2, [pc, #220]	; (8002b90 <ILI9341_Init+0x25c>)
 8002ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	4611      	mov	r1, r2
 8002aba:	8019      	strh	r1, [r3, #0]
 8002abc:	3302      	adds	r3, #2
 8002abe:	0c12      	lsrs	r2, r2, #16
 8002ac0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ac6:	2103      	movs	r1, #3
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff febd 	bl	8002848 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8002ace:	20f2      	movs	r0, #242	; 0xf2
 8002ad0:	f7ff fea0 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 8002ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ade:	2101      	movs	r1, #1
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff feb1 	bl	8002848 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8002ae6:	2026      	movs	r0, #38	; 0x26
 8002ae8:	f7ff fe94 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 8002af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fea5 	bl	8002848 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8002afe:	20e0      	movs	r0, #224	; 0xe0
 8002b00:	f7ff fe88 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8002b04:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <ILI9341_Init+0x260>)
 8002b06:	f107 0414 	add.w	r4, r7, #20
 8002b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b0c:	c407      	stmia	r4!, {r0, r1, r2}
 8002b0e:	8023      	strh	r3, [r4, #0]
 8002b10:	3402      	adds	r4, #2
 8002b12:	0c1b      	lsrs	r3, r3, #16
 8002b14:	7023      	strb	r3, [r4, #0]
                            0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8002b16:	f107 0314 	add.w	r3, r7, #20
 8002b1a:	210f      	movs	r1, #15
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fe93 	bl	8002848 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8002b22:	20e1      	movs	r0, #225	; 0xe1
 8002b24:	f7ff fe76 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8002b28:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <ILI9341_Init+0x264>)
 8002b2a:	1d3c      	adds	r4, r7, #4
 8002b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b2e:	c407      	stmia	r4!, {r0, r1, r2}
 8002b30:	8023      	strh	r3, [r4, #0]
 8002b32:	3402      	adds	r4, #2
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	7023      	strb	r3, [r4, #0]
                            0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	210f      	movs	r1, #15
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fe83 	bl	8002848 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8002b42:	2011      	movs	r0, #17
 8002b44:	f7ff fe66 	bl	8002814 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8002b48:	2078      	movs	r0, #120	; 0x78
 8002b4a:	f000 fe89 	bl	8003860 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8002b4e:	2029      	movs	r0, #41	; 0x29
 8002b50:	f7ff fe60 	bl	8002814 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8002b54:	2036      	movs	r0, #54	; 0x36
 8002b56:	f7ff fe5d 	bl	8002814 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8002b5a:	23e8      	movs	r3, #232	; 0xe8
 8002b5c:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002b5e:	463b      	mov	r3, r7
 8002b60:	2101      	movs	r1, #1
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fe70 	bl	8002848 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8002b68:	f7ff fe32 	bl	80027d0 <ILI9341_Unselect>

    HAL_GPIO_WritePin(ILI9341_LED_GPIO_Port, ILI9341_LED_Pin, SET);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	2102      	movs	r1, #2
 8002b70:	480a      	ldr	r0, [pc, #40]	; (8002b9c <ILI9341_Init+0x268>)
 8002b72:	f001 fc43 	bl	80043fc <HAL_GPIO_WritePin>
}
 8002b76:	bf00      	nop
 8002b78:	376c      	adds	r7, #108	; 0x6c
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd90      	pop	{r4, r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	08013610 	.word	0x08013610
 8002b84:	08013618 	.word	0x08013618
 8002b88:	0801361c 	.word	0x0801361c
 8002b8c:	81120364 	.word	0x81120364
 8002b90:	08013620 	.word	0x08013620
 8002b94:	08013624 	.word	0x08013624
 8002b98:	08013634 	.word	0x08013634
 8002b9c:	40020400 	.word	0x40020400

08002ba0 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80fb      	strh	r3, [r7, #6]
 8002baa:	460b      	mov	r3, r1
 8002bac:	80bb      	strh	r3, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002bb8:	d21f      	bcs.n	8002bfa <ILI9341_DrawPixel+0x5a>
 8002bba:	88bb      	ldrh	r3, [r7, #4]
 8002bbc:	2bef      	cmp	r3, #239	; 0xef
 8002bbe:	d81c      	bhi.n	8002bfa <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 8002bc0:	f7ff fdfa 	bl	80027b8 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	88bb      	ldrh	r3, [r7, #4]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	88b9      	ldrh	r1, [r7, #4]
 8002bd2:	88f8      	ldrh	r0, [r7, #6]
 8002bd4:	f7ff fe66 	bl	80028a4 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002bd8:	887b      	ldrh	r3, [r7, #2]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	733b      	strb	r3, [r7, #12]
 8002be2:	887b      	ldrh	r3, [r7, #2]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	2102      	movs	r1, #2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fe2a 	bl	8002848 <ILI9341_WriteData>

    ILI9341_Unselect();
 8002bf4:	f7ff fdec 	bl	80027d0 <ILI9341_Unselect>
 8002bf8:	e000      	b.n	8002bfc <ILI9341_DrawPixel+0x5c>
        return;
 8002bfa:	bf00      	nop
}
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <ILI9341_DrawLine>:

void ILI9341_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8002c02:	b590      	push	{r4, r7, lr}
 8002c04:	b08d      	sub	sp, #52	; 0x34
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4604      	mov	r4, r0
 8002c0a:	4608      	mov	r0, r1
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4623      	mov	r3, r4
 8002c12:	80fb      	strh	r3, [r7, #6]
 8002c14:	4603      	mov	r3, r0
 8002c16:	80bb      	strh	r3, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	803b      	strh	r3, [r7, #0]
    uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8002c20:	2300      	movs	r3, #0
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;

	delta_x = x2 - x1;
 8002c28:	887a      	ldrh	r2, [r7, #2]
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8002c30:	883a      	ldrh	r2, [r7, #0]
 8002c32:	88bb      	ldrh	r3, [r7, #4]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8002c3c:	88bb      	ldrh	r3, [r7, #4]
 8002c3e:	60bb      	str	r3, [r7, #8]

	if (delta_x > 0)
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	dd02      	ble.n	8002c4c <ILI9341_DrawLine+0x4a>
        incx = 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	e00b      	b.n	8002c64 <ILI9341_DrawLine+0x62>
	else if (delta_x == 0)
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <ILI9341_DrawLine+0x56>
        incx = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	e005      	b.n	8002c64 <ILI9341_DrawLine+0x62>
	else
    {
        incx = -1;
 8002c58:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5c:	617b      	str	r3, [r7, #20]
        delta_x = -delta_x;
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	425b      	negs	r3, r3
 8002c62:	623b      	str	r3, [r7, #32]
    }

    if (delta_y > 0)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	dd02      	ble.n	8002c70 <ILI9341_DrawLine+0x6e>
        incy = 1;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	e00b      	b.n	8002c88 <ILI9341_DrawLine+0x86>
	else if (delta_y==0)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d102      	bne.n	8002c7c <ILI9341_DrawLine+0x7a>
        incy = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	e005      	b.n	8002c88 <ILI9341_DrawLine+0x86>
	else
    {
        incy = -1;
 8002c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c80:	613b      	str	r3, [r7, #16]
        delta_y = -delta_y;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	425b      	negs	r3, r3
 8002c86:	61fb      	str	r3, [r7, #28]
    }

	if (delta_x > delta_y)
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	dd02      	ble.n	8002c96 <ILI9341_DrawLine+0x94>
        distance = delta_x;
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	61bb      	str	r3, [r7, #24]
 8002c94:	e001      	b.n	8002c9a <ILI9341_DrawLine+0x98>
	else
        distance = delta_y;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	61bb      	str	r3, [r7, #24]

	for(t = 0; t <= distance + 1; t++)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002c9e:	e02b      	b.n	8002cf8 <ILI9341_DrawLine+0xf6>
	{
		ILI9341_DrawPixel(uRow, uCol, color);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	b291      	uxth	r1, r2
 8002ca8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff77 	bl	8002ba0 <ILI9341_DrawPixel>

		xerr += delta_x;
 8002cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 8002cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24

		if (xerr > distance)
 8002cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	dd07      	ble.n	8002cda <ILI9341_DrawLine+0xd8>
		{
			xerr -= distance;
 8002cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance)
 8002cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	dd07      	ble.n	8002cf2 <ILI9341_DrawLine+0xf0>
		{
			yerr -= distance;
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4413      	add	r3, r2
 8002cf0:	60bb      	str	r3, [r7, #8]
	for(t = 0; t <= distance + 1; t++)
 8002cf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002cf8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	ddce      	ble.n	8002ca0 <ILI9341_DrawLine+0x9e>
		}
	}
}
 8002d02:	bf00      	nop
 8002d04:	bf00      	nop
 8002d06:	3734      	adds	r7, #52	; 0x34
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd90      	pop	{r4, r7, pc}

08002d0c <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	b590      	push	{r4, r7, lr}
 8002d10:	b089      	sub	sp, #36	; 0x24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
 8002d16:	4603      	mov	r3, r0
 8002d18:	80fb      	strh	r3, [r7, #6]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	80bb      	strh	r3, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002d22:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29c      	uxth	r4, r3
 8002d32:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	88bb      	ldrh	r3, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	88b9      	ldrh	r1, [r7, #4]
 8002d44:	88f8      	ldrh	r0, [r7, #6]
 8002d46:	4622      	mov	r2, r4
 8002d48:	f7ff fdac 	bl	80028a4 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	e043      	b.n	8002dda <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 8002d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	3b20      	subs	r3, #32
 8002d58:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4619      	mov	r1, r3
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	440b      	add	r3, r1
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	e029      	b.n	8002dc8 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00e      	beq.n	8002da2 <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002d84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	743b      	strb	r3, [r7, #16]
 8002d8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8002d94:	f107 0310 	add.w	r3, r7, #16
 8002d98:	2102      	movs	r1, #2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fd54 	bl	8002848 <ILI9341_WriteData>
 8002da0:	e00f      	b.n	8002dc2 <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002da2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	733b      	strb	r3, [r7, #12]
 8002dae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8002db6:	f107 030c 	add.w	r3, r7, #12
 8002dba:	2102      	movs	r1, #2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fd43 	bl	8002848 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002dcc:	461a      	mov	r2, r3
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d3cf      	bcc.n	8002d74 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002dde:	461a      	mov	r2, r3
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d3b5      	bcc.n	8002d52 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 8002de6:	bf00      	nop
 8002de8:	bf00      	nop
 8002dea:	3724      	adds	r7, #36	; 0x24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002df2:	b002      	add	sp, #8
 8002df4:	4770      	bx	lr

08002df6 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002df6:	b082      	sub	sp, #8
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af04      	add	r7, sp, #16
 8002dfe:	603a      	str	r2, [r7, #0]
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	4603      	mov	r3, r0
 8002e04:	80fb      	strh	r3, [r7, #6]
 8002e06:	460b      	mov	r3, r1
 8002e08:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8002e0a:	f7ff fcd5 	bl	80027b8 <ILI9341_Select>

    while(*str) {
 8002e0e:	e02e      	b.n	8002e6e <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	7d3a      	ldrb	r2, [r7, #20]
 8002e14:	4413      	add	r3, r2
 8002e16:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002e1a:	db13      	blt.n	8002e44 <ILI9341_WriteString+0x4e>
            x = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002e20:	7d7b      	ldrb	r3, [r7, #21]
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	88bb      	ldrh	r3, [r7, #4]
 8002e26:	4413      	add	r3, r2
 8002e28:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8002e2a:	88bb      	ldrh	r3, [r7, #4]
 8002e2c:	7d7a      	ldrb	r2, [r7, #21]
 8002e2e:	4413      	add	r3, r2
 8002e30:	2bef      	cmp	r3, #239	; 0xef
 8002e32:	dc21      	bgt.n	8002e78 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d103      	bne.n	8002e44 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	603b      	str	r3, [r7, #0]
                continue;
 8002e42:	e014      	b.n	8002e6e <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	88b9      	ldrh	r1, [r7, #4]
 8002e4a:	88f8      	ldrh	r0, [r7, #6]
 8002e4c:	8c3b      	ldrh	r3, [r7, #32]
 8002e4e:	9302      	str	r3, [sp, #8]
 8002e50:	8bbb      	ldrh	r3, [r7, #28]
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f7ff ff57 	bl	8002d0c <ILI9341_WriteChar>
        x += font.width;
 8002e5e:	7d3b      	ldrb	r3, [r7, #20]
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	4413      	add	r3, r2
 8002e66:	80fb      	strh	r3, [r7, #6]
        str++;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1cc      	bne.n	8002e10 <ILI9341_WriteString+0x1a>
 8002e76:	e000      	b.n	8002e7a <ILI9341_WriteString+0x84>
                break;
 8002e78:	bf00      	nop
    }

    ILI9341_Unselect();
 8002e7a:	f7ff fca9 	bl	80027d0 <ILI9341_Unselect>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e88:	b002      	add	sp, #8
 8002e8a:	4770      	bx	lr

08002e8c <ILI9341_FillRectangle>:
    ILI9341_DrawLine(x, y, x, y + h, color);
    ILI9341_DrawLine(x, y + h, x + w, y + h, color);
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4604      	mov	r4, r0
 8002e94:	4608      	mov	r0, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4623      	mov	r3, r4
 8002e9c:	80fb      	strh	r3, [r7, #6]
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	80bb      	strh	r3, [r7, #4]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	807b      	strh	r3, [r7, #2]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002eb0:	d253      	bcs.n	8002f5a <ILI9341_FillRectangle+0xce>
 8002eb2:	88bb      	ldrh	r3, [r7, #4]
 8002eb4:	2bef      	cmp	r3, #239	; 0xef
 8002eb6:	d850      	bhi.n	8002f5a <ILI9341_FillRectangle+0xce>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8002eb8:	88fa      	ldrh	r2, [r7, #6]
 8002eba:	887b      	ldrh	r3, [r7, #2]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002ec2:	dd03      	ble.n	8002ecc <ILI9341_FillRectangle+0x40>
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002eca:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8002ecc:	88ba      	ldrh	r2, [r7, #4]
 8002ece:	883b      	ldrh	r3, [r7, #0]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	2bf0      	cmp	r3, #240	; 0xf0
 8002ed4:	dd03      	ble.n	8002ede <ILI9341_FillRectangle+0x52>
 8002ed6:	88bb      	ldrh	r3, [r7, #4]
 8002ed8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002edc:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8002ede:	f7ff fc6b 	bl	80027b8 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002ee2:	88fa      	ldrh	r2, [r7, #6]
 8002ee4:	887b      	ldrh	r3, [r7, #2]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29c      	uxth	r4, r3
 8002eee:	88ba      	ldrh	r2, [r7, #4]
 8002ef0:	883b      	ldrh	r3, [r7, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	88b9      	ldrh	r1, [r7, #4]
 8002efc:	88f8      	ldrh	r0, [r7, #6]
 8002efe:	4622      	mov	r2, r4
 8002f00:	f7ff fcd0 	bl	80028a4 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002f04:	8c3b      	ldrh	r3, [r7, #32]
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	733b      	strb	r3, [r7, #12]
 8002f0e:	8c3b      	ldrh	r3, [r7, #32]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8002f14:	2201      	movs	r2, #1
 8002f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f1a:	4812      	ldr	r0, [pc, #72]	; (8002f64 <ILI9341_FillRectangle+0xd8>)
 8002f1c:	f001 fa6e 	bl	80043fc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002f20:	883b      	ldrh	r3, [r7, #0]
 8002f22:	80bb      	strh	r3, [r7, #4]
 8002f24:	e013      	b.n	8002f4e <ILI9341_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 8002f26:	887b      	ldrh	r3, [r7, #2]
 8002f28:	80fb      	strh	r3, [r7, #6]
 8002f2a:	e00a      	b.n	8002f42 <ILI9341_FillRectangle+0xb6>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002f2c:	f107 010c 	add.w	r1, r7, #12
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
 8002f34:	2202      	movs	r2, #2
 8002f36:	480c      	ldr	r0, [pc, #48]	; (8002f68 <ILI9341_FillRectangle+0xdc>)
 8002f38:	f004 ff68 	bl	8007e0c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	80fb      	strh	r3, [r7, #6]
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f1      	bne.n	8002f2c <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8002f48:	88bb      	ldrh	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	80bb      	strh	r3, [r7, #4]
 8002f4e:	88bb      	ldrh	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e8      	bne.n	8002f26 <ILI9341_FillRectangle+0x9a>
        }
    }

    ILI9341_Unselect();
 8002f54:	f7ff fc3c 	bl	80027d0 <ILI9341_Unselect>
 8002f58:	e000      	b.n	8002f5c <ILI9341_FillRectangle+0xd0>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8002f5a:	bf00      	nop
}
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd90      	pop	{r4, r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40020400 	.word	0x40020400
 8002f68:	20000308 	.word	0x20000308

08002f6c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	4603      	mov	r3, r0
 8002f74:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	23f0      	movs	r3, #240	; 0xf0
 8002f7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002f80:	2100      	movs	r1, #0
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7ff ff82 	bl	8002e8c <ILI9341_FillRectangle>
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8002f94:	2201      	movs	r2, #1
 8002f96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f9a:	4802      	ldr	r0, [pc, #8]	; (8002fa4 <ILI9341_TouchUnselect+0x14>)
 8002f9c:	f001 fa2e 	bl	80043fc <HAL_GPIO_WritePin>
}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40020000 	.word	0x40020000

08002fa8 <max30102_init>:
#define RES_PART_ID 0xff

extern I2C_HandleTypeDef hi2c1;

void max30102_init()
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af02      	add	r7, sp, #8
    uint8_t data = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	71fb      	strb	r3, [r7, #7]
    /*reset*/
    data = 0x40;
 8002fb2:	2340      	movs	r3, #64	; 0x40
 8002fb4:	71fb      	strb	r3, [r7, #7]

    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	9301      	str	r3, [sp, #4]
 8002fba:	1dfb      	adds	r3, r7, #7
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	2209      	movs	r2, #9
 8002fc2:	21ae      	movs	r1, #174	; 0xae
 8002fc4:	4840      	ldr	r0, [pc, #256]	; (80030c8 <max30102_init+0x120>)
 8002fc6:	f001 fe61 	bl	8004c8c <HAL_I2C_Mem_Write_IT>
    //osDelay(1);
    do
    {
        HAL_I2C_Mem_Read_IT(&hi2c1, MAX30102_ADDR_READ, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002fca:	2301      	movs	r3, #1
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	1dfb      	adds	r3, r7, #7
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	2209      	movs	r2, #9
 8002fd6:	21af      	movs	r1, #175	; 0xaf
 8002fd8:	483b      	ldr	r0, [pc, #236]	; (80030c8 <max30102_init+0x120>)
 8002fda:	f001 ff13 	bl	8004e04 <HAL_I2C_Mem_Read_IT>
    } while (data & 0x40);
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f0      	bne.n	8002fca <max30102_init+0x22>

    /*新数据中断*/
    data = 0x40;
 8002fe8:	2340      	movs	r3, #64	; 0x40
 8002fea:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_INTERRUPT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002fec:	2301      	movs	r3, #1
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	1dfb      	adds	r3, r7, #7
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	21ae      	movs	r1, #174	; 0xae
 8002ffa:	4833      	ldr	r0, [pc, #204]	; (80030c8 <max30102_init+0x120>)
 8002ffc:	f001 fe46 	bl	8004c8c <HAL_I2C_Mem_Write_IT>
    //    /* 快满中断*/
    //    data = 0x80;
    //    HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_INTERRUPT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    //    HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_FIFO_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    /*16384量程 50Hz 18位adc分辨率*/
    data = 0x63;
 8003000:	2363      	movs	r3, #99	; 0x63
 8003002:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_SPO2_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8003004:	2301      	movs	r3, #1
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	1dfb      	adds	r3, r7, #7
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	2301      	movs	r3, #1
 800300e:	220a      	movs	r2, #10
 8003010:	21ae      	movs	r1, #174	; 0xae
 8003012:	482d      	ldr	r0, [pc, #180]	; (80030c8 <max30102_init+0x120>)
 8003014:	f001 fe3a 	bl	8004c8c <HAL_I2C_Mem_Write_IT>
    /*灯的亮度*/
    data = 0x47;
 8003018:	2347      	movs	r3, #71	; 0x47
 800301a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_LED_PULSE_AMPLITUDE_1, I2C_MEMADD_SIZE_8BIT, &data, 1);
 800301c:	2301      	movs	r3, #1
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	1dfb      	adds	r3, r7, #7
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2301      	movs	r3, #1
 8003026:	220c      	movs	r2, #12
 8003028:	21ae      	movs	r1, #174	; 0xae
 800302a:	4827      	ldr	r0, [pc, #156]	; (80030c8 <max30102_init+0x120>)
 800302c:	f001 fe2e 	bl	8004c8c <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_LED_PULSE_AMPLITUDE_2, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8003030:	2301      	movs	r3, #1
 8003032:	9301      	str	r3, [sp, #4]
 8003034:	1dfb      	adds	r3, r7, #7
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2301      	movs	r3, #1
 800303a:	220d      	movs	r2, #13
 800303c:	21ae      	movs	r1, #174	; 0xae
 800303e:	4822      	ldr	r0, [pc, #136]	; (80030c8 <max30102_init+0x120>)
 8003040:	f001 fe24 	bl	8004c8c <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_PROXIMITY_MODE_LED_PULSE_AMPLITUDE, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8003044:	2301      	movs	r3, #1
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	1dfb      	adds	r3, r7, #7
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2301      	movs	r3, #1
 800304e:	2210      	movs	r2, #16
 8003050:	21ae      	movs	r1, #174	; 0xae
 8003052:	481d      	ldr	r0, [pc, #116]	; (80030c8 <max30102_init+0x120>)
 8003054:	f001 fe1a 	bl	8004c8c <HAL_I2C_Mem_Write_IT>
    /*FIFO clear*/
    data = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_FIFO_WRITE_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1);
 800305c:	2301      	movs	r3, #1
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	1dfb      	adds	r3, r7, #7
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	2301      	movs	r3, #1
 8003066:	2204      	movs	r2, #4
 8003068:	21ae      	movs	r1, #174	; 0xae
 800306a:	4817      	ldr	r0, [pc, #92]	; (80030c8 <max30102_init+0x120>)
 800306c:	f001 fe0e 	bl	8004c8c <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_OVERFLOW_COUNTER, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8003070:	2301      	movs	r3, #1
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	1dfb      	adds	r3, r7, #7
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2301      	movs	r3, #1
 800307a:	2205      	movs	r2, #5
 800307c:	21ae      	movs	r1, #174	; 0xae
 800307e:	4812      	ldr	r0, [pc, #72]	; (80030c8 <max30102_init+0x120>)
 8003080:	f001 fe04 	bl	8004c8c <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_FIFO_READ_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8003084:	2301      	movs	r3, #1
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	1dfb      	adds	r3, r7, #7
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2301      	movs	r3, #1
 800308e:	2206      	movs	r2, #6
 8003090:	21ae      	movs	r1, #174	; 0xae
 8003092:	480d      	ldr	r0, [pc, #52]	; (80030c8 <max30102_init+0x120>)
 8003094:	f001 fdfa 	bl	8004c8c <HAL_I2C_Mem_Write_IT>

    /*interrupt status clear*/
    max30102_getStatus();
 8003098:	f000 f8e0 	bl	800325c <max30102_getStatus>

    // /*转换温度*/
    // data = 1;
    // HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_DIE_TEMPERATURE_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    /*SPO2 Mode*/
    data = 0x03;
 800309c:	2303      	movs	r3, #3
 800309e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 80030a0:	2301      	movs	r3, #1
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	1dfb      	adds	r3, r7, #7
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	2301      	movs	r3, #1
 80030aa:	2209      	movs	r2, #9
 80030ac:	21ae      	movs	r1, #174	; 0xae
 80030ae:	4806      	ldr	r0, [pc, #24]	; (80030c8 <max30102_init+0x120>)
 80030b0:	f001 fdec 	bl	8004c8c <HAL_I2C_Mem_Write_IT>
    HAL_UART_Transmit(&huart2, (uint8_t *) "\x1B[34m[Action]: Max30102\r\n", 27, 50);
 80030b4:	2332      	movs	r3, #50	; 0x32
 80030b6:	221b      	movs	r2, #27
 80030b8:	4904      	ldr	r1, [pc, #16]	; (80030cc <max30102_init+0x124>)
 80030ba:	4805      	ldr	r0, [pc, #20]	; (80030d0 <max30102_init+0x128>)
 80030bc:	f005 fdac 	bl	8008c18 <HAL_UART_Transmit>
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	200002b4 	.word	0x200002b4
 80030cc:	08013644 	.word	0x08013644
 80030d0:	200003f4 	.word	0x200003f4

080030d4 <max30102_getUnreadSampleCount>:

uint8_t max30102_getUnreadSampleCount()
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af04      	add	r7, sp, #16
    uint8_t wr = 0, rd = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	71fb      	strb	r3, [r7, #7]
 80030de:	2300      	movs	r3, #0
 80030e0:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_FIFO_WRITE_POINTER, I2C_MEMADD_SIZE_8BIT, &wr, 1, 10);
 80030e2:	230a      	movs	r3, #10
 80030e4:	9302      	str	r3, [sp, #8]
 80030e6:	2301      	movs	r3, #1
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	1dfb      	adds	r3, r7, #7
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2301      	movs	r3, #1
 80030f0:	2204      	movs	r2, #4
 80030f2:	21af      	movs	r1, #175	; 0xaf
 80030f4:	4811      	ldr	r0, [pc, #68]	; (800313c <max30102_getUnreadSampleCount+0x68>)
 80030f6:	f001 fb97 	bl	8004828 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_FIFO_READ_POINTER, I2C_MEMADD_SIZE_8BIT, &rd, 1, 10);
 80030fa:	230a      	movs	r3, #10
 80030fc:	9302      	str	r3, [sp, #8]
 80030fe:	2301      	movs	r3, #1
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	1dbb      	adds	r3, r7, #6
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2301      	movs	r3, #1
 8003108:	2206      	movs	r2, #6
 800310a:	21af      	movs	r1, #175	; 0xaf
 800310c:	480b      	ldr	r0, [pc, #44]	; (800313c <max30102_getUnreadSampleCount+0x68>)
 800310e:	f001 fb8b 	bl	8004828 <HAL_I2C_Mem_Read>
    if ((wr - rd) < 0)
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	461a      	mov	r2, r3
 8003116:	79bb      	ldrb	r3, [r7, #6]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	da06      	bge.n	800312c <max30102_getUnreadSampleCount+0x58>
        return wr - rd + 32;
 800311e:	79fa      	ldrb	r2, [r7, #7]
 8003120:	79bb      	ldrb	r3, [r7, #6]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	3320      	adds	r3, #32
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e003      	b.n	8003134 <max30102_getUnreadSampleCount+0x60>
    else
        return wr - rd;
 800312c:	79fa      	ldrb	r2, [r7, #7]
 800312e:	79bb      	ldrb	r3, [r7, #6]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	b2db      	uxtb	r3, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	200002b4 	.word	0x200002b4

08003140 <max30102_getFIFO>:

void max30102_getFIFO(SAMPLE *data, uint8_t sampleCount)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08e      	sub	sp, #56	; 0x38
 8003144:	af04      	add	r7, sp, #16
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	70fb      	strb	r3, [r7, #3]
    uint8_t dataTemp[5 * 6];
    if (sampleCount > 5)
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	2b05      	cmp	r3, #5
 8003150:	d901      	bls.n	8003156 <max30102_getFIFO+0x16>
        sampleCount = 5;
 8003152:	2305      	movs	r3, #5
 8003154:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_FIFO_DATA_REGISTER,
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	b29b      	uxth	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	0052      	lsls	r2, r2, #1
 800315e:	4413      	add	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	b29b      	uxth	r3, r3
 8003164:	2219      	movs	r2, #25
 8003166:	9202      	str	r2, [sp, #8]
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	f107 0308 	add.w	r3, r7, #8
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	2301      	movs	r3, #1
 8003172:	2207      	movs	r2, #7
 8003174:	21af      	movs	r1, #175	; 0xaf
 8003176:	4838      	ldr	r0, [pc, #224]	; (8003258 <max30102_getFIFO+0x118>)
 8003178:	f001 fb56 	bl	8004828 <HAL_I2C_Mem_Read>
                     I2C_MEMADD_SIZE_8BIT, dataTemp,
                     6 * sampleCount, 25);
    uint8_t i;
    for (i = 0; i < sampleCount; i++)
 800317c:	2300      	movs	r3, #0
 800317e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003182:	e05f      	b.n	8003244 <max30102_getFIFO+0x104>
    {
        data[i].red = (((uint32_t)dataTemp[i * 6]) << 16 | ((uint32_t)dataTemp[i * 6 + 1]) << 8 | dataTemp[i * 6 + 2]) & 0x3ffff;
 8003184:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003188:	4613      	mov	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4413      	add	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	3328      	adds	r3, #40	; 0x28
 8003192:	443b      	add	r3, r7
 8003194:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003198:	0419      	lsls	r1, r3, #16
 800319a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	3301      	adds	r3, #1
 80031a8:	3328      	adds	r3, #40	; 0x28
 80031aa:	443b      	add	r3, r7
 80031ac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	4319      	orrs	r1, r3
 80031b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	3302      	adds	r3, #2
 80031c2:	3328      	adds	r3, #40	; 0x28
 80031c4:	443b      	add	r3, r7
 80031c6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80031ca:	ea41 0203 	orr.w	r2, r1, r3
 80031ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	440b      	add	r3, r1
 80031d8:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80031dc:	601a      	str	r2, [r3, #0]
        data[i].iRed = (((uint32_t)dataTemp[i * 6 + 3]) << 16 | ((uint32_t)dataTemp[i * 6 + 4]) << 8 | dataTemp[i * 6 + 5]) & 0x3ffff;
 80031de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	3303      	adds	r3, #3
 80031ec:	3328      	adds	r3, #40	; 0x28
 80031ee:	443b      	add	r3, r7
 80031f0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80031f4:	0419      	lsls	r1, r3, #16
 80031f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	3304      	adds	r3, #4
 8003204:	3328      	adds	r3, #40	; 0x28
 8003206:	443b      	add	r3, r7
 8003208:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	4319      	orrs	r1, r3
 8003210:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	3305      	adds	r3, #5
 800321e:	3328      	adds	r3, #40	; 0x28
 8003220:	443b      	add	r3, r7
 8003222:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003226:	ea41 0203 	orr.w	r2, r1, r3
 800322a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	440b      	add	r3, r1
 8003234:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8003238:	605a      	str	r2, [r3, #4]
    for (i = 0; i < sampleCount; i++)
 800323a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800323e:	3301      	adds	r3, #1
 8003240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003244:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	429a      	cmp	r2, r3
 800324c:	d39a      	bcc.n	8003184 <max30102_getFIFO+0x44>
    }
}
 800324e:	bf00      	nop
 8003250:	bf00      	nop
 8003252:	3728      	adds	r7, #40	; 0x28
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	200002b4 	.word	0x200002b4

0800325c <max30102_getStatus>:

uint8_t max30102_getStatus()
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af04      	add	r7, sp, #16
    uint8_t data = 0, dataTemp = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	71fb      	strb	r3, [r7, #7]
 8003266:	2300      	movs	r3, #0
 8003268:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_INTERRUPT_STATUS_1, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 800326a:	230a      	movs	r3, #10
 800326c:	9302      	str	r3, [sp, #8]
 800326e:	2301      	movs	r3, #1
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	1dbb      	adds	r3, r7, #6
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	2301      	movs	r3, #1
 8003278:	2200      	movs	r2, #0
 800327a:	21af      	movs	r1, #175	; 0xaf
 800327c:	480c      	ldr	r0, [pc, #48]	; (80032b0 <max30102_getStatus+0x54>)
 800327e:	f001 fad3 	bl	8004828 <HAL_I2C_Mem_Read>
    data = dataTemp;
 8003282:	79bb      	ldrb	r3, [r7, #6]
 8003284:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_INTERRUPT_STATUS_2, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 8003286:	230a      	movs	r3, #10
 8003288:	9302      	str	r3, [sp, #8]
 800328a:	2301      	movs	r3, #1
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	1dbb      	adds	r3, r7, #6
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	2301      	movs	r3, #1
 8003294:	2201      	movs	r2, #1
 8003296:	21af      	movs	r1, #175	; 0xaf
 8003298:	4805      	ldr	r0, [pc, #20]	; (80032b0 <max30102_getStatus+0x54>)
 800329a:	f001 fac5 	bl	8004828 <HAL_I2C_Mem_Read>
    return data | dataTemp;
 800329e:	79ba      	ldrb	r2, [r7, #6]
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	b2db      	uxtb	r3, r3
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200002b4 	.word	0x200002b4

080032b4 <filter>:
uint16_t iRedAC = 0;
uint32_t iRedDC = 0;

#define FILTER_LEVEL 8 /*滤波等级*/
void filter(SAMPLE *s)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t red = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	613b      	str	r3, [r7, #16]
    uint32_t ired = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < FILTER_LEVEL - 1; i++)
 80032c4:	2300      	movs	r3, #0
 80032c6:	75fb      	strb	r3, [r7, #23]
 80032c8:	e011      	b.n	80032ee <filter+0x3a>
    {
        red += sampleBuff[i].red;
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	4a13      	ldr	r2, [pc, #76]	; (800331c <filter+0x68>)
 80032ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4413      	add	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        ired += sampleBuff[i].iRed;
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
 80032da:	4a10      	ldr	r2, [pc, #64]	; (800331c <filter+0x68>)
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4413      	add	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < FILTER_LEVEL - 1; i++)
 80032e8:	7dfb      	ldrb	r3, [r7, #23]
 80032ea:	3301      	adds	r3, #1
 80032ec:	75fb      	strb	r3, [r7, #23]
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
 80032f0:	2b06      	cmp	r3, #6
 80032f2:	d9ea      	bls.n	80032ca <filter+0x16>
    }
    s->red = (red + s->red) / FILTER_LEVEL;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4413      	add	r3, r2
 80032fc:	08da      	lsrs	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]
    s->iRed = (ired + s->iRed) / FILTER_LEVEL;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4413      	add	r3, r2
 800330a:	08da      	lsrs	r2, r3, #3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	605a      	str	r2, [r3, #4]
}
 8003310:	bf00      	nop
 8003312:	371c      	adds	r7, #28
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	20000440 	.word	0x20000440

08003320 <buffInsert>:

void buffInsert(SAMPLE s)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	463b      	mov	r3, r7
 8003328:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t i;
    for (i = BUFF_SIZE - 1; i > 0; i--)
 800332c:	2331      	movs	r3, #49	; 0x31
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	e016      	b.n	8003360 <buffInsert+0x40>
    {
        sampleBuff[i].red = sampleBuff[i - 1].red;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	1e5a      	subs	r2, r3, #1
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	4911      	ldr	r1, [pc, #68]	; (8003380 <buffInsert+0x60>)
 800333a:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800333e:	4910      	ldr	r1, [pc, #64]	; (8003380 <buffInsert+0x60>)
 8003340:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        sampleBuff[i].iRed = sampleBuff[i - 1].iRed;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	3b01      	subs	r3, #1
 8003348:	7bf9      	ldrb	r1, [r7, #15]
 800334a:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <buffInsert+0x60>)
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	480b      	ldr	r0, [pc, #44]	; (8003380 <buffInsert+0x60>)
 8003354:	00cb      	lsls	r3, r1, #3
 8003356:	4403      	add	r3, r0
 8003358:	605a      	str	r2, [r3, #4]
    for (i = BUFF_SIZE - 1; i > 0; i--)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	3b01      	subs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e5      	bne.n	8003332 <buffInsert+0x12>
    }
    sampleBuff[0].red = s.red;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	4a05      	ldr	r2, [pc, #20]	; (8003380 <buffInsert+0x60>)
 800336a:	6013      	str	r3, [r2, #0]
    sampleBuff[0].iRed = s.iRed;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a04      	ldr	r2, [pc, #16]	; (8003380 <buffInsert+0x60>)
 8003370:	6053      	str	r3, [r2, #4]
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	20000440 	.word	0x20000440

08003384 <calAcDc>:

void calAcDc(uint16_t *rac, uint32_t *rdc, uint16_t *iac, uint32_t *idc)
{
 8003384:	b480      	push	{r7}
 8003386:	b08b      	sub	sp, #44	; 0x2c
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
    uint32_t rMax = sampleBuff[0].red;
 8003392:	4b35      	ldr	r3, [pc, #212]	; (8003468 <calAcDc+0xe4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rMin = sampleBuff[0].red;
 8003398:	4b33      	ldr	r3, [pc, #204]	; (8003468 <calAcDc+0xe4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	623b      	str	r3, [r7, #32]
    uint32_t iMax = sampleBuff[0].iRed;
 800339e:	4b32      	ldr	r3, [pc, #200]	; (8003468 <calAcDc+0xe4>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	61fb      	str	r3, [r7, #28]
    uint32_t iMin = sampleBuff[0].iRed;
 80033a4:	4b30      	ldr	r3, [pc, #192]	; (8003468 <calAcDc+0xe4>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	61bb      	str	r3, [r7, #24]

    uint8_t i;
    for (i = 0; i < BUFF_SIZE; i++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]
 80033ae:	e036      	b.n	800341e <calAcDc+0x9a>
    {
        if (sampleBuff[i].red > rMax)
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	4a2d      	ldr	r2, [pc, #180]	; (8003468 <calAcDc+0xe4>)
 80033b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d204      	bcs.n	80033c8 <calAcDc+0x44>
            rMax = sampleBuff[i].red;
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	4a29      	ldr	r2, [pc, #164]	; (8003468 <calAcDc+0xe4>)
 80033c2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
        if (sampleBuff[i].red < rMin)
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	4a27      	ldr	r2, [pc, #156]	; (8003468 <calAcDc+0xe4>)
 80033cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d904      	bls.n	80033e0 <calAcDc+0x5c>
            rMin = sampleBuff[i].red;
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
 80033d8:	4a23      	ldr	r2, [pc, #140]	; (8003468 <calAcDc+0xe4>)
 80033da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033de:	623b      	str	r3, [r7, #32]
        if (sampleBuff[i].iRed > iMax)
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	4a21      	ldr	r2, [pc, #132]	; (8003468 <calAcDc+0xe4>)
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d205      	bcs.n	80033fc <calAcDc+0x78>
            iMax = sampleBuff[i].iRed;
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <calAcDc+0xe4>)
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	61fb      	str	r3, [r7, #28]
        if (sampleBuff[i].iRed < iMin)
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
 80033fe:	4a1a      	ldr	r2, [pc, #104]	; (8003468 <calAcDc+0xe4>)
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4413      	add	r3, r2
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	429a      	cmp	r2, r3
 800340a:	d905      	bls.n	8003418 <calAcDc+0x94>
            iMin = sampleBuff[i].iRed;
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	4a16      	ldr	r2, [pc, #88]	; (8003468 <calAcDc+0xe4>)
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < BUFF_SIZE; i++)
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	3301      	adds	r3, #1
 800341c:	75fb      	strb	r3, [r7, #23]
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b31      	cmp	r3, #49	; 0x31
 8003422:	d9c5      	bls.n	80033b0 <calAcDc+0x2c>
    }
    *rac = rMax - rMin;
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	b29a      	uxth	r2, r3
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	b29b      	uxth	r3, r3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	801a      	strh	r2, [r3, #0]
    *rdc = (rMax + rMin) / 2;
 8003434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	4413      	add	r3, r2
 800343a:	085a      	lsrs	r2, r3, #1
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	601a      	str	r2, [r3, #0]
    *iac = iMax - iMin;
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	b29a      	uxth	r2, r3
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	b29b      	uxth	r3, r3
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	b29a      	uxth	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	801a      	strh	r2, [r3, #0]
    *idc = (iMax + iMin) / 2;
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	4413      	add	r3, r2
 8003456:	085a      	lsrs	r2, r3, #1
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	601a      	str	r2, [r3, #0]
}
 800345c:	bf00      	nop
 800345e:	372c      	adds	r7, #44	; 0x2c
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	20000440 	.word	0x20000440
 800346c:	00000000 	.word	0x00000000

08003470 <max30102_cal>:

int16_t eachSampleDiff = 0; //和上一个样本相差了多少
void max30102_cal()
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b090      	sub	sp, #64	; 0x40
 8003474:	af00      	add	r7, sp, #0
    uint8_t unreadSampleCount = max30102_getUnreadSampleCount();
 8003476:	f7ff fe2d 	bl	80030d4 <max30102_getUnreadSampleCount>
 800347a:	4603      	mov	r3, r0
 800347c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    SAMPLE sampleBuffTemp[5];
    max30102_getFIFO(sampleBuffTemp, unreadSampleCount);
 8003480:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003484:	f107 0308 	add.w	r3, r7, #8
 8003488:	4611      	mov	r1, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fe58 	bl	8003140 <max30102_getFIFO>
    static uint8_t eachBeatSampleCount = 0;    //这次心跳历经了多少个样本
    static uint8_t lastTenBeatSampleCount[10]; //过去十次心跳每一次的样本数
    static uint32_t last_iRed = 0;             //上一次红外的值，过滤后的
    uint8_t i, ii;
    for (i = 0; i < unreadSampleCount; i++)
 8003490:	2300      	movs	r3, #0
 8003492:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003496:	e128      	b.n	80036ea <max30102_cal+0x27a>
    {
        if (sampleBuffTemp[i].iRed < 40000) //无手指不计算，跳过
 8003498:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	3338      	adds	r3, #56	; 0x38
 80034a0:	f107 0208 	add.w	r2, r7, #8
 80034a4:	4413      	add	r3, r2
 80034a6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80034aa:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d809      	bhi.n	80034c6 <max30102_cal+0x56>
        {
            heartRate = 0;
 80034b2:	4b9d      	ldr	r3, [pc, #628]	; (8003728 <max30102_cal+0x2b8>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	701a      	strb	r2, [r3, #0]
            spo2 = 0;
 80034b8:	4b9c      	ldr	r3, [pc, #624]	; (800372c <max30102_cal+0x2bc>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
            eachSampleDiff = 0;
 80034be:	4b9c      	ldr	r3, [pc, #624]	; (8003730 <max30102_cal+0x2c0>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	801a      	strh	r2, [r3, #0]
            continue;
 80034c4:	e10c      	b.n	80036e0 <max30102_cal+0x270>
        }
        buffInsert(sampleBuffTemp[i]);
 80034c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	3338      	adds	r3, #56	; 0x38
 80034ce:	f107 0208 	add.w	r2, r7, #8
 80034d2:	4413      	add	r3, r2
 80034d4:	3b38      	subs	r3, #56	; 0x38
 80034d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80034da:	f7ff ff21 	bl	8003320 <buffInsert>
        calAcDc(&redAC, &redDC, &iRedAC, &iRedDC);
 80034de:	4b95      	ldr	r3, [pc, #596]	; (8003734 <max30102_cal+0x2c4>)
 80034e0:	4a95      	ldr	r2, [pc, #596]	; (8003738 <max30102_cal+0x2c8>)
 80034e2:	4996      	ldr	r1, [pc, #600]	; (800373c <max30102_cal+0x2cc>)
 80034e4:	4896      	ldr	r0, [pc, #600]	; (8003740 <max30102_cal+0x2d0>)
 80034e6:	f7ff ff4d 	bl	8003384 <calAcDc>
        filter(&sampleBuffTemp[i]);
 80034ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034ee:	f107 0208 	add.w	r2, r7, #8
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fedc 	bl	80032b4 <filter>
        //计算spo2
        float R = (((float)(redAC)) / ((float)(redDC))) / (((float)(iRedAC)) / ((float)(iRedDC)));
 80034fc:	4b90      	ldr	r3, [pc, #576]	; (8003740 <max30102_cal+0x2d0>)
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	ee07 3a90 	vmov	s15, r3
 8003504:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003508:	4b8c      	ldr	r3, [pc, #560]	; (800373c <max30102_cal+0x2cc>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	ee07 3a90 	vmov	s15, r3
 8003510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003514:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003518:	4b87      	ldr	r3, [pc, #540]	; (8003738 <max30102_cal+0x2c8>)
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	ee07 3a90 	vmov	s15, r3
 8003520:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8003524:	4b83      	ldr	r3, [pc, #524]	; (8003734 <max30102_cal+0x2c4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003530:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8003534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003538:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        if (R >= 0.36 && R < 0.66)
 800353c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800353e:	f7fd f80b 	bl	8000558 <__aeabi_f2d>
 8003542:	a371      	add	r3, pc, #452	; (adr r3, 8003708 <max30102_cal+0x298>)
 8003544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003548:	f7fd fae4 	bl	8000b14 <__aeabi_dcmpge>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01d      	beq.n	800358e <max30102_cal+0x11e>
 8003552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003554:	f7fd f800 	bl	8000558 <__aeabi_f2d>
 8003558:	a36d      	add	r3, pc, #436	; (adr r3, 8003710 <max30102_cal+0x2a0>)
 800355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355e:	f7fd fac5 	bl	8000aec <__aeabi_dcmplt>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d012      	beq.n	800358e <max30102_cal+0x11e>
            spo2 = (uint8_t)(107 - 20 * R);
 8003568:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800356c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003574:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003744 <max30102_cal+0x2d4>
 8003578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800357c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003580:	edc7 7a01 	vstr	s15, [r7, #4]
 8003584:	793b      	ldrb	r3, [r7, #4]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	4b68      	ldr	r3, [pc, #416]	; (800372c <max30102_cal+0x2bc>)
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	e02e      	b.n	80035ec <max30102_cal+0x17c>
        else if (R >= 0.66 && R < 1)
 800358e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003590:	f7fc ffe2 	bl	8000558 <__aeabi_f2d>
 8003594:	a35e      	add	r3, pc, #376	; (adr r3, 8003710 <max30102_cal+0x2a0>)
 8003596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359a:	f7fd fabb 	bl	8000b14 <__aeabi_dcmpge>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d023      	beq.n	80035ec <max30102_cal+0x17c>
 80035a4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80035a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b4:	d51a      	bpl.n	80035ec <max30102_cal+0x17c>
            spo2 = (uint8_t)(129.64 - 54 * R);
 80035b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80035ba:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003748 <max30102_cal+0x2d8>
 80035be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035c2:	ee17 0a90 	vmov	r0, s15
 80035c6:	f7fc ffc7 	bl	8000558 <__aeabi_f2d>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	a152      	add	r1, pc, #328	; (adr r1, 8003718 <max30102_cal+0x2a8>)
 80035d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035d4:	f7fc fe60 	bl	8000298 <__aeabi_dsub>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	f7fd faea 	bl	8000bb8 <__aeabi_d2uiz>
 80035e4:	4603      	mov	r3, r0
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	4b50      	ldr	r3, [pc, #320]	; (800372c <max30102_cal+0x2bc>)
 80035ea:	701a      	strb	r2, [r3, #0]
        //计算心率,30-250ppm  count:200-12
        eachSampleDiff = last_iRed - sampleBuffTemp[i].iRed;
 80035ec:	4b57      	ldr	r3, [pc, #348]	; (800374c <max30102_cal+0x2dc>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	3338      	adds	r3, #56	; 0x38
 80035fa:	f107 0108 	add.w	r1, r7, #8
 80035fe:	440b      	add	r3, r1
 8003600:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003604:	b29b      	uxth	r3, r3
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	b29b      	uxth	r3, r3
 800360a:	b21a      	sxth	r2, r3
 800360c:	4b48      	ldr	r3, [pc, #288]	; (8003730 <max30102_cal+0x2c0>)
 800360e:	801a      	strh	r2, [r3, #0]
        if (eachSampleDiff > 50 && eachBeatSampleCount > 12)
 8003610:	4b47      	ldr	r3, [pc, #284]	; (8003730 <max30102_cal+0x2c0>)
 8003612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003616:	2b32      	cmp	r3, #50	; 0x32
 8003618:	dd51      	ble.n	80036be <max30102_cal+0x24e>
 800361a:	4b4d      	ldr	r3, [pc, #308]	; (8003750 <max30102_cal+0x2e0>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d94d      	bls.n	80036be <max30102_cal+0x24e>
        {
            for (ii = 9; ii > 0; ii--)
 8003622:	2309      	movs	r3, #9
 8003624:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003628:	e00d      	b.n	8003646 <max30102_cal+0x1d6>
                lastTenBeatSampleCount[i] = lastTenBeatSampleCount[i - 1];
 800362a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800362e:	1e5a      	subs	r2, r3, #1
 8003630:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003634:	4947      	ldr	r1, [pc, #284]	; (8003754 <max30102_cal+0x2e4>)
 8003636:	5c89      	ldrb	r1, [r1, r2]
 8003638:	4a46      	ldr	r2, [pc, #280]	; (8003754 <max30102_cal+0x2e4>)
 800363a:	54d1      	strb	r1, [r2, r3]
            for (ii = 9; ii > 0; ii--)
 800363c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003640:	3b01      	subs	r3, #1
 8003642:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003646:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1ed      	bne.n	800362a <max30102_cal+0x1ba>
            lastTenBeatSampleCount[0] = eachBeatSampleCount;
 800364e:	4b40      	ldr	r3, [pc, #256]	; (8003750 <max30102_cal+0x2e0>)
 8003650:	781a      	ldrb	r2, [r3, #0]
 8003652:	4b40      	ldr	r3, [pc, #256]	; (8003754 <max30102_cal+0x2e4>)
 8003654:	701a      	strb	r2, [r3, #0]
            uint32_t totalTime = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	63bb      	str	r3, [r7, #56]	; 0x38
            for (ii = 0; ii < 10; ii++)
 800365a:	2300      	movs	r3, #0
 800365c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003660:	e00c      	b.n	800367c <max30102_cal+0x20c>
                totalTime += lastTenBeatSampleCount[i];
 8003662:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003666:	4a3b      	ldr	r2, [pc, #236]	; (8003754 <max30102_cal+0x2e4>)
 8003668:	5cd3      	ldrb	r3, [r2, r3]
 800366a:	461a      	mov	r2, r3
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	4413      	add	r3, r2
 8003670:	63bb      	str	r3, [r7, #56]	; 0x38
            for (ii = 0; ii < 10; ii++)
 8003672:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003676:	3301      	adds	r3, #1
 8003678:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800367c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003680:	2b09      	cmp	r3, #9
 8003682:	d9ee      	bls.n	8003662 <max30102_cal+0x1f2>
            heartRate = (uint8_t)(60.0 * 10 / 0.02 / ((float)totalTime));
 8003684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368e:	ee17 0a90 	vmov	r0, s15
 8003692:	f7fc ff61 	bl	8000558 <__aeabi_f2d>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	a121      	add	r1, pc, #132	; (adr r1, 8003720 <max30102_cal+0x2b0>)
 800369c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036a0:	f7fd f8dc 	bl	800085c <__aeabi_ddiv>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4610      	mov	r0, r2
 80036aa:	4619      	mov	r1, r3
 80036ac:	f7fd fa84 	bl	8000bb8 <__aeabi_d2uiz>
 80036b0:	4603      	mov	r3, r0
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <max30102_cal+0x2b8>)
 80036b6:	701a      	strb	r2, [r3, #0]
            eachBeatSampleCount = 0;
 80036b8:	4b25      	ldr	r3, [pc, #148]	; (8003750 <max30102_cal+0x2e0>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
        }
        last_iRed = sampleBuffTemp[i].iRed;
 80036be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	3338      	adds	r3, #56	; 0x38
 80036c6:	f107 0208 	add.w	r2, r7, #8
 80036ca:	4413      	add	r3, r2
 80036cc:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80036d0:	4a1e      	ldr	r2, [pc, #120]	; (800374c <max30102_cal+0x2dc>)
 80036d2:	6013      	str	r3, [r2, #0]
        eachBeatSampleCount++;
 80036d4:	4b1e      	ldr	r3, [pc, #120]	; (8003750 <max30102_cal+0x2e0>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	3301      	adds	r3, #1
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	4b1c      	ldr	r3, [pc, #112]	; (8003750 <max30102_cal+0x2e0>)
 80036de:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < unreadSampleCount; i++)
 80036e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036e4:	3301      	adds	r3, #1
 80036e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80036ea:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80036ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80036f2:	429a      	cmp	r2, r3
 80036f4:	f4ff aed0 	bcc.w	8003498 <max30102_cal+0x28>
    }
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3740      	adds	r7, #64	; 0x40
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	f3af 8000 	nop.w
 8003708:	70a3d70a 	.word	0x70a3d70a
 800370c:	3fd70a3d 	.word	0x3fd70a3d
 8003710:	51eb851f 	.word	0x51eb851f
 8003714:	3fe51eb8 	.word	0x3fe51eb8
 8003718:	e147ae14 	.word	0xe147ae14
 800371c:	4060347a 	.word	0x4060347a
 8003720:	00000000 	.word	0x00000000
 8003724:	40dd4c00 	.word	0x40dd4c00
 8003728:	200005d0 	.word	0x200005d0
 800372c:	200005d1 	.word	0x200005d1
 8003730:	200005e0 	.word	0x200005e0
 8003734:	200005dc 	.word	0x200005dc
 8003738:	200005d8 	.word	0x200005d8
 800373c:	200005d4 	.word	0x200005d4
 8003740:	200005d2 	.word	0x200005d2
 8003744:	42d60000 	.word	0x42d60000
 8003748:	42580000 	.word	0x42580000
 800374c:	200005e4 	.word	0x200005e4
 8003750:	200005e8 	.word	0x200005e8
 8003754:	200005ec 	.word	0x200005ec

08003758 <max30102_getHeartRate>:

uint8_t max30102_getHeartRate() { return heartRate; }
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
 800375c:	4b03      	ldr	r3, [pc, #12]	; (800376c <max30102_getHeartRate+0x14>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	200005d0 	.word	0x200005d0

08003770 <max30102_getSpO2>:
uint8_t max30102_getSpO2() { return spo2; }
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <max30102_getSpO2+0x14>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	200005d1 	.word	0x200005d1

08003788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800378c:	480d      	ldr	r0, [pc, #52]	; (80037c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800378e:	490e      	ldr	r1, [pc, #56]	; (80037c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003790:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003794:	e002      	b.n	800379c <LoopCopyDataInit>

08003796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800379a:	3304      	adds	r3, #4

0800379c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800379c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800379e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a0:	d3f9      	bcc.n	8003796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037a2:	4a0b      	ldr	r2, [pc, #44]	; (80037d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037a4:	4c0b      	ldr	r4, [pc, #44]	; (80037d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80037a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037a8:	e001      	b.n	80037ae <LoopFillZerobss>

080037aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037ac:	3204      	adds	r2, #4

080037ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b0:	d3fb      	bcc.n	80037aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037b2:	f7fe fd3f 	bl	8002234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037b6:	f00a fa2f 	bl	800dc18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ba:	f7fe f9ff 	bl	8001bbc <main>
  bx  lr    
 80037be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80037c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037c8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80037cc:	08015430 	.word	0x08015430
  ldr r2, =_sbss
 80037d0:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80037d4:	2000501c 	.word	0x2000501c

080037d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037d8:	e7fe      	b.n	80037d8 <ADC_IRQHandler>
	...

080037dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <HAL_Init+0x40>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a0d      	ldr	r2, [pc, #52]	; (800381c <HAL_Init+0x40>)
 80037e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_Init+0x40>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a0a      	ldr	r2, [pc, #40]	; (800381c <HAL_Init+0x40>)
 80037f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <HAL_Init+0x40>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a07      	ldr	r2, [pc, #28]	; (800381c <HAL_Init+0x40>)
 80037fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003804:	2003      	movs	r0, #3
 8003806:	f000 f921 	bl	8003a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800380a:	2005      	movs	r0, #5
 800380c:	f7fe fb6e 	bl	8001eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003810:	f7fe fb38 	bl	8001e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40023c00 	.word	0x40023c00

08003820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_IncTick+0x20>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_IncTick+0x24>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4413      	add	r3, r2
 8003830:	4a04      	ldr	r2, [pc, #16]	; (8003844 <HAL_IncTick+0x24>)
 8003832:	6013      	str	r3, [r2, #0]
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000030 	.word	0x20000030
 8003844:	200005f8 	.word	0x200005f8

08003848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return uwTick;
 800384c:	4b03      	ldr	r3, [pc, #12]	; (800385c <HAL_GetTick+0x14>)
 800384e:	681b      	ldr	r3, [r3, #0]
}
 8003850:	4618      	mov	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	200005f8 	.word	0x200005f8

08003860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003868:	f7ff ffee 	bl	8003848 <HAL_GetTick>
 800386c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d005      	beq.n	8003886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800387a:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <HAL_Delay+0x44>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003886:	bf00      	nop
 8003888:	f7ff ffde 	bl	8003848 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	429a      	cmp	r2, r3
 8003896:	d8f7      	bhi.n	8003888 <HAL_Delay+0x28>
  {
  }
}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000030 	.word	0x20000030

080038a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b8:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <__NVIC_SetPriorityGrouping+0x44>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038c4:	4013      	ands	r3, r2
 80038c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038da:	4a04      	ldr	r2, [pc, #16]	; (80038ec <__NVIC_SetPriorityGrouping+0x44>)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	60d3      	str	r3, [r2, #12]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038f4:	4b04      	ldr	r3, [pc, #16]	; (8003908 <__NVIC_GetPriorityGrouping+0x18>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	0a1b      	lsrs	r3, r3, #8
 80038fa:	f003 0307 	and.w	r3, r3, #7
}
 80038fe:	4618      	mov	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	2b00      	cmp	r3, #0
 800391c:	db0b      	blt.n	8003936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	f003 021f 	and.w	r2, r3, #31
 8003924:	4907      	ldr	r1, [pc, #28]	; (8003944 <__NVIC_EnableIRQ+0x38>)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	2001      	movs	r0, #1
 800392e:	fa00 f202 	lsl.w	r2, r0, r2
 8003932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	e000e100 	.word	0xe000e100

08003948 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	2b00      	cmp	r3, #0
 8003958:	db12      	blt.n	8003980 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	f003 021f 	and.w	r2, r3, #31
 8003960:	490a      	ldr	r1, [pc, #40]	; (800398c <__NVIC_DisableIRQ+0x44>)
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	2001      	movs	r0, #1
 800396a:	fa00 f202 	lsl.w	r2, r0, r2
 800396e:	3320      	adds	r3, #32
 8003970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003974:	f3bf 8f4f 	dsb	sy
}
 8003978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800397a:	f3bf 8f6f 	isb	sy
}
 800397e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	e000e100 	.word	0xe000e100

08003990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	6039      	str	r1, [r7, #0]
 800399a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800399c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	db0a      	blt.n	80039ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	490c      	ldr	r1, [pc, #48]	; (80039dc <__NVIC_SetPriority+0x4c>)
 80039aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ae:	0112      	lsls	r2, r2, #4
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	440b      	add	r3, r1
 80039b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039b8:	e00a      	b.n	80039d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	4908      	ldr	r1, [pc, #32]	; (80039e0 <__NVIC_SetPriority+0x50>)
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	3b04      	subs	r3, #4
 80039c8:	0112      	lsls	r2, r2, #4
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	440b      	add	r3, r1
 80039ce:	761a      	strb	r2, [r3, #24]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	e000e100 	.word	0xe000e100
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b089      	sub	sp, #36	; 0x24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f1c3 0307 	rsb	r3, r3, #7
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	bf28      	it	cs
 8003a02:	2304      	movcs	r3, #4
 8003a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2b06      	cmp	r3, #6
 8003a0c:	d902      	bls.n	8003a14 <NVIC_EncodePriority+0x30>
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	3b03      	subs	r3, #3
 8003a12:	e000      	b.n	8003a16 <NVIC_EncodePriority+0x32>
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a18:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43da      	mvns	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	401a      	ands	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	fa01 f303 	lsl.w	r3, r1, r3
 8003a36:	43d9      	mvns	r1, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a3c:	4313      	orrs	r3, r2
         );
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3724      	adds	r7, #36	; 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b07      	cmp	r3, #7
 8003a58:	d00f      	beq.n	8003a7a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b06      	cmp	r3, #6
 8003a5e:	d00c      	beq.n	8003a7a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d009      	beq.n	8003a7a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d006      	beq.n	8003a7a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d003      	beq.n	8003a7a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a72:	2190      	movs	r1, #144	; 0x90
 8003a74:	4804      	ldr	r0, [pc, #16]	; (8003a88 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003a76:	f7fe f954 	bl	8001d22 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff ff14 	bl	80038a8 <__NVIC_SetPriorityGrouping>
}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	08013660 	.word	0x08013660

08003a8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b0f      	cmp	r3, #15
 8003aa2:	d903      	bls.n	8003aac <HAL_NVIC_SetPriority+0x20>
 8003aa4:	21a8      	movs	r1, #168	; 0xa8
 8003aa6:	480e      	ldr	r0, [pc, #56]	; (8003ae0 <HAL_NVIC_SetPriority+0x54>)
 8003aa8:	f7fe f93b 	bl	8001d22 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b0f      	cmp	r3, #15
 8003ab0:	d903      	bls.n	8003aba <HAL_NVIC_SetPriority+0x2e>
 8003ab2:	21a9      	movs	r1, #169	; 0xa9
 8003ab4:	480a      	ldr	r0, [pc, #40]	; (8003ae0 <HAL_NVIC_SetPriority+0x54>)
 8003ab6:	f7fe f934 	bl	8001d22 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aba:	f7ff ff19 	bl	80038f0 <__NVIC_GetPriorityGrouping>
 8003abe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	6978      	ldr	r0, [r7, #20]
 8003ac6:	f7ff ff8d 	bl	80039e4 <NVIC_EncodePriority>
 8003aca:	4602      	mov	r2, r0
 8003acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff ff5c 	bl	8003990 <__NVIC_SetPriority>
}
 8003ad8:	bf00      	nop
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	08013660 	.word	0x08013660

08003ae4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	da03      	bge.n	8003afe <HAL_NVIC_EnableIRQ+0x1a>
 8003af6:	21bc      	movs	r1, #188	; 0xbc
 8003af8:	4805      	ldr	r0, [pc, #20]	; (8003b10 <HAL_NVIC_EnableIRQ+0x2c>)
 8003afa:	f7fe f912 	bl	8001d22 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ff02 	bl	800390c <__NVIC_EnableIRQ>
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	08013660 	.word	0x08013660

08003b14 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	da03      	bge.n	8003b2e <HAL_NVIC_DisableIRQ+0x1a>
 8003b26:	21cc      	movs	r1, #204	; 0xcc
 8003b28:	4805      	ldr	r0, [pc, #20]	; (8003b40 <HAL_NVIC_DisableIRQ+0x2c>)
 8003b2a:	f7fe f8fa 	bl	8001d22 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ff08 	bl	8003948 <__NVIC_DisableIRQ>
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	08013660 	.word	0x08013660

08003b44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b52:	f7ff fe79 	bl	8003848 <HAL_GetTick>
 8003b56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d008      	beq.n	8003b76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2280      	movs	r2, #128	; 0x80
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e052      	b.n	8003c1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0216 	bic.w	r2, r2, #22
 8003b84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <HAL_DMA_Abort+0x62>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0208 	bic.w	r2, r2, #8
 8003bb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0201 	bic.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bc6:	e013      	b.n	8003bf0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bc8:	f7ff fe3e 	bl	8003848 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b05      	cmp	r3, #5
 8003bd4:	d90c      	bls.n	8003bf0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2203      	movs	r2, #3
 8003be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e015      	b.n	8003c1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e4      	bne.n	8003bc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c02:	223f      	movs	r2, #63	; 0x3f
 8003c04:	409a      	lsls	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d004      	beq.n	8003c42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2280      	movs	r2, #128	; 0x80
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e00c      	b.n	8003c5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2205      	movs	r2, #5
 8003c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c76:	b2db      	uxtb	r3, r3
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a33      	ldr	r2, [pc, #204]	; (8003d6c <HAL_GPIO_Init+0xe8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d017      	beq.n	8003cd2 <HAL_GPIO_Init+0x4e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a32      	ldr	r2, [pc, #200]	; (8003d70 <HAL_GPIO_Init+0xec>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <HAL_GPIO_Init+0x4e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a31      	ldr	r2, [pc, #196]	; (8003d74 <HAL_GPIO_Init+0xf0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00f      	beq.n	8003cd2 <HAL_GPIO_Init+0x4e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a30      	ldr	r2, [pc, #192]	; (8003d78 <HAL_GPIO_Init+0xf4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_GPIO_Init+0x4e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a2f      	ldr	r2, [pc, #188]	; (8003d7c <HAL_GPIO_Init+0xf8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <HAL_GPIO_Init+0x4e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a2e      	ldr	r2, [pc, #184]	; (8003d80 <HAL_GPIO_Init+0xfc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x4e>
 8003cca:	21ac      	movs	r1, #172	; 0xac
 8003ccc:	482d      	ldr	r0, [pc, #180]	; (8003d84 <HAL_GPIO_Init+0x100>)
 8003cce:	f7fe f828 	bl	8001d22 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_GPIO_Init+0x64>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_GPIO_Init+0x6c>
 8003ce8:	21ad      	movs	r1, #173	; 0xad
 8003cea:	4826      	ldr	r0, [pc, #152]	; (8003d84 <HAL_GPIO_Init+0x100>)
 8003cec:	f7fe f819 	bl	8001d22 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d035      	beq.n	8003d64 <HAL_GPIO_Init+0xe0>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d031      	beq.n	8003d64 <HAL_GPIO_Init+0xe0>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b11      	cmp	r3, #17
 8003d06:	d02d      	beq.n	8003d64 <HAL_GPIO_Init+0xe0>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d029      	beq.n	8003d64 <HAL_GPIO_Init+0xe0>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b12      	cmp	r3, #18
 8003d16:	d025      	beq.n	8003d64 <HAL_GPIO_Init+0xe0>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003d20:	d020      	beq.n	8003d64 <HAL_GPIO_Init+0xe0>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003d2a:	d01b      	beq.n	8003d64 <HAL_GPIO_Init+0xe0>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003d34:	d016      	beq.n	8003d64 <HAL_GPIO_Init+0xe0>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003d3e:	d011      	beq.n	8003d64 <HAL_GPIO_Init+0xe0>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003d48:	d00c      	beq.n	8003d64 <HAL_GPIO_Init+0xe0>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003d52:	d007      	beq.n	8003d64 <HAL_GPIO_Init+0xe0>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d003      	beq.n	8003d64 <HAL_GPIO_Init+0xe0>
 8003d5c:	21ae      	movs	r1, #174	; 0xae
 8003d5e:	4809      	ldr	r0, [pc, #36]	; (8003d84 <HAL_GPIO_Init+0x100>)
 8003d60:	f7fd ffdf 	bl	8001d22 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d64:	2300      	movs	r3, #0
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	e206      	b.n	8004178 <HAL_GPIO_Init+0x4f4>
 8003d6a:	bf00      	nop
 8003d6c:	40020000 	.word	0x40020000
 8003d70:	40020400 	.word	0x40020400
 8003d74:	40020800 	.word	0x40020800
 8003d78:	40020c00 	.word	0x40020c00
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	40021c00 	.word	0x40021c00
 8003d84:	080136d4 	.word	0x080136d4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d88:	2201      	movs	r2, #1
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	f040 81e6 	bne.w	8004172 <HAL_GPIO_Init+0x4ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d005      	beq.n	8003dbe <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d144      	bne.n	8003e48 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00f      	beq.n	8003de6 <HAL_GPIO_Init+0x162>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d00b      	beq.n	8003de6 <HAL_GPIO_Init+0x162>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d007      	beq.n	8003de6 <HAL_GPIO_Init+0x162>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x162>
 8003dde:	21c0      	movs	r1, #192	; 0xc0
 8003de0:	4894      	ldr	r0, [pc, #592]	; (8004034 <HAL_GPIO_Init+0x3b0>)
 8003de2:	f7fd ff9e 	bl	8001d22 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	2203      	movs	r2, #3
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	f003 0201 	and.w	r2, r3, #1
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d027      	beq.n	8003ea4 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00b      	beq.n	8003e74 <HAL_GPIO_Init+0x1f0>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d007      	beq.n	8003e74 <HAL_GPIO_Init+0x1f0>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x1f0>
 8003e6c:	21d1      	movs	r1, #209	; 0xd1
 8003e6e:	4871      	ldr	r0, [pc, #452]	; (8004034 <HAL_GPIO_Init+0x3b0>)
 8003e70:	f7fd ff57 	bl	8001d22 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	2203      	movs	r2, #3
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	f040 8098 	bne.w	8003fe2 <HAL_GPIO_Init+0x35e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d06f      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	d06b      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d067      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d063      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d05f      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d05b      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d057      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d053      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d04f      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d04b      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d047      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d043      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d03f      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d03b      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d037      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d033      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d02f      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b05      	cmp	r3, #5
 8003f40:	d02b      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d027      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b05      	cmp	r3, #5
 8003f50:	d023      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b06      	cmp	r3, #6
 8003f58:	d01f      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b07      	cmp	r3, #7
 8003f60:	d01b      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b07      	cmp	r3, #7
 8003f68:	d017      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d013      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b09      	cmp	r3, #9
 8003f78:	d00f      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b09      	cmp	r3, #9
 8003f80:	d00b      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b0a      	cmp	r3, #10
 8003f88:	d007      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b0f      	cmp	r3, #15
 8003f90:	d003      	beq.n	8003f9a <HAL_GPIO_Init+0x316>
 8003f92:	21de      	movs	r1, #222	; 0xde
 8003f94:	4827      	ldr	r0, [pc, #156]	; (8004034 <HAL_GPIO_Init+0x3b0>)
 8003f96:	f7fd fec4 	bl	8001d22 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	08da      	lsrs	r2, r3, #3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3208      	adds	r2, #8
 8003fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	08da      	lsrs	r2, r3, #3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3208      	adds	r2, #8
 8003fdc:	69b9      	ldr	r1, [r7, #24]
 8003fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	2203      	movs	r2, #3
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 0203 	and.w	r2, r3, #3
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4313      	orrs	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 80a7 	beq.w	8004172 <HAL_GPIO_Init+0x4ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	4b03      	ldr	r3, [pc, #12]	; (8004038 <HAL_GPIO_Init+0x3b4>)
 800402a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402c:	4a02      	ldr	r2, [pc, #8]	; (8004038 <HAL_GPIO_Init+0x3b4>)
 800402e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004032:	e003      	b.n	800403c <HAL_GPIO_Init+0x3b8>
 8004034:	080136d4 	.word	0x080136d4
 8004038:	40023800 	.word	0x40023800
 800403c:	6453      	str	r3, [r2, #68]	; 0x44
 800403e:	4b53      	ldr	r3, [pc, #332]	; (800418c <HAL_GPIO_Init+0x508>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800404a:	4a51      	ldr	r2, [pc, #324]	; (8004190 <HAL_GPIO_Init+0x50c>)
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	3302      	adds	r3, #2
 8004052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	220f      	movs	r2, #15
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a48      	ldr	r2, [pc, #288]	; (8004194 <HAL_GPIO_Init+0x510>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d019      	beq.n	80040aa <HAL_GPIO_Init+0x426>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a47      	ldr	r2, [pc, #284]	; (8004198 <HAL_GPIO_Init+0x514>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <HAL_GPIO_Init+0x422>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a46      	ldr	r2, [pc, #280]	; (800419c <HAL_GPIO_Init+0x518>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00d      	beq.n	80040a2 <HAL_GPIO_Init+0x41e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a45      	ldr	r2, [pc, #276]	; (80041a0 <HAL_GPIO_Init+0x51c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d007      	beq.n	800409e <HAL_GPIO_Init+0x41a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a44      	ldr	r2, [pc, #272]	; (80041a4 <HAL_GPIO_Init+0x520>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d101      	bne.n	800409a <HAL_GPIO_Init+0x416>
 8004096:	2304      	movs	r3, #4
 8004098:	e008      	b.n	80040ac <HAL_GPIO_Init+0x428>
 800409a:	2307      	movs	r3, #7
 800409c:	e006      	b.n	80040ac <HAL_GPIO_Init+0x428>
 800409e:	2303      	movs	r3, #3
 80040a0:	e004      	b.n	80040ac <HAL_GPIO_Init+0x428>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e002      	b.n	80040ac <HAL_GPIO_Init+0x428>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <HAL_GPIO_Init+0x428>
 80040aa:	2300      	movs	r3, #0
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	f002 0203 	and.w	r2, r2, #3
 80040b2:	0092      	lsls	r2, r2, #2
 80040b4:	4093      	lsls	r3, r2
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040bc:	4934      	ldr	r1, [pc, #208]	; (8004190 <HAL_GPIO_Init+0x50c>)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	3302      	adds	r3, #2
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ca:	4b37      	ldr	r3, [pc, #220]	; (80041a8 <HAL_GPIO_Init+0x524>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4013      	ands	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_Init+0x46a>
        {
          temp |= iocurrent;
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ee:	4a2e      	ldr	r2, [pc, #184]	; (80041a8 <HAL_GPIO_Init+0x524>)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040f4:	4b2c      	ldr	r3, [pc, #176]	; (80041a8 <HAL_GPIO_Init+0x524>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4013      	ands	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_GPIO_Init+0x494>
        {
          temp |= iocurrent;
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004118:	4a23      	ldr	r2, [pc, #140]	; (80041a8 <HAL_GPIO_Init+0x524>)
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800411e:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <HAL_GPIO_Init+0x524>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	43db      	mvns	r3, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4013      	ands	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_GPIO_Init+0x4be>
        {
          temp |= iocurrent;
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004142:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <HAL_GPIO_Init+0x524>)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004148:	4b17      	ldr	r3, [pc, #92]	; (80041a8 <HAL_GPIO_Init+0x524>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_GPIO_Init+0x4e8>
        {
          temp |= iocurrent;
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800416c:	4a0e      	ldr	r2, [pc, #56]	; (80041a8 <HAL_GPIO_Init+0x524>)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3301      	adds	r3, #1
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2b0f      	cmp	r3, #15
 800417c:	f67f ae04 	bls.w	8003d88 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800
 8004190:	40013800 	.word	0x40013800
 8004194:	40020000 	.word	0x40020000
 8004198:	40020400 	.word	0x40020400
 800419c:	40020800 	.word	0x40020800
 80041a0:	40020c00 	.word	0x40020c00
 80041a4:	40021000 	.word	0x40021000
 80041a8:	40013c00 	.word	0x40013c00

080041ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80041be:	2300      	movs	r3, #0
 80041c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a71      	ldr	r2, [pc, #452]	; (800438c <HAL_GPIO_DeInit+0x1e0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d018      	beq.n	80041fc <HAL_GPIO_DeInit+0x50>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a70      	ldr	r2, [pc, #448]	; (8004390 <HAL_GPIO_DeInit+0x1e4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d014      	beq.n	80041fc <HAL_GPIO_DeInit+0x50>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a6f      	ldr	r2, [pc, #444]	; (8004394 <HAL_GPIO_DeInit+0x1e8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d010      	beq.n	80041fc <HAL_GPIO_DeInit+0x50>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a6e      	ldr	r2, [pc, #440]	; (8004398 <HAL_GPIO_DeInit+0x1ec>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00c      	beq.n	80041fc <HAL_GPIO_DeInit+0x50>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a6d      	ldr	r2, [pc, #436]	; (800439c <HAL_GPIO_DeInit+0x1f0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d008      	beq.n	80041fc <HAL_GPIO_DeInit+0x50>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a6c      	ldr	r2, [pc, #432]	; (80043a0 <HAL_GPIO_DeInit+0x1f4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <HAL_GPIO_DeInit+0x50>
 80041f2:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80041f6:	486b      	ldr	r0, [pc, #428]	; (80043a4 <HAL_GPIO_DeInit+0x1f8>)
 80041f8:	f7fd fd93 	bl	8001d22 <assert_failed>
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fc:	2300      	movs	r3, #0
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	e0bb      	b.n	800437a <HAL_GPIO_DeInit+0x1ce>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004202:	2201      	movs	r2, #1
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4013      	ands	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	429a      	cmp	r2, r3
 800421a:	f040 80ab 	bne.w	8004374 <HAL_GPIO_DeInit+0x1c8>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800421e:	4a62      	ldr	r2, [pc, #392]	; (80043a8 <HAL_GPIO_DeInit+0x1fc>)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	3302      	adds	r3, #2
 8004226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800422a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	220f      	movs	r2, #15
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	4013      	ands	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a52      	ldr	r2, [pc, #328]	; (800438c <HAL_GPIO_DeInit+0x1e0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d019      	beq.n	800427c <HAL_GPIO_DeInit+0xd0>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a51      	ldr	r2, [pc, #324]	; (8004390 <HAL_GPIO_DeInit+0x1e4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d013      	beq.n	8004278 <HAL_GPIO_DeInit+0xcc>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a50      	ldr	r2, [pc, #320]	; (8004394 <HAL_GPIO_DeInit+0x1e8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00d      	beq.n	8004274 <HAL_GPIO_DeInit+0xc8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a4f      	ldr	r2, [pc, #316]	; (8004398 <HAL_GPIO_DeInit+0x1ec>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d007      	beq.n	8004270 <HAL_GPIO_DeInit+0xc4>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a4e      	ldr	r2, [pc, #312]	; (800439c <HAL_GPIO_DeInit+0x1f0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d101      	bne.n	800426c <HAL_GPIO_DeInit+0xc0>
 8004268:	2304      	movs	r3, #4
 800426a:	e008      	b.n	800427e <HAL_GPIO_DeInit+0xd2>
 800426c:	2307      	movs	r3, #7
 800426e:	e006      	b.n	800427e <HAL_GPIO_DeInit+0xd2>
 8004270:	2303      	movs	r3, #3
 8004272:	e004      	b.n	800427e <HAL_GPIO_DeInit+0xd2>
 8004274:	2302      	movs	r3, #2
 8004276:	e002      	b.n	800427e <HAL_GPIO_DeInit+0xd2>
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <HAL_GPIO_DeInit+0xd2>
 800427c:	2300      	movs	r3, #0
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	f002 0203 	and.w	r2, r2, #3
 8004284:	0092      	lsls	r2, r2, #2
 8004286:	4093      	lsls	r3, r2
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	429a      	cmp	r2, r3
 800428c:	d132      	bne.n	80042f4 <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800428e:	4b47      	ldr	r3, [pc, #284]	; (80043ac <HAL_GPIO_DeInit+0x200>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	43db      	mvns	r3, r3
 8004296:	4945      	ldr	r1, [pc, #276]	; (80043ac <HAL_GPIO_DeInit+0x200>)
 8004298:	4013      	ands	r3, r2
 800429a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800429c:	4b43      	ldr	r3, [pc, #268]	; (80043ac <HAL_GPIO_DeInit+0x200>)
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	4941      	ldr	r1, [pc, #260]	; (80043ac <HAL_GPIO_DeInit+0x200>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80042aa:	4b40      	ldr	r3, [pc, #256]	; (80043ac <HAL_GPIO_DeInit+0x200>)
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	43db      	mvns	r3, r3
 80042b2:	493e      	ldr	r1, [pc, #248]	; (80043ac <HAL_GPIO_DeInit+0x200>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80042b8:	4b3c      	ldr	r3, [pc, #240]	; (80043ac <HAL_GPIO_DeInit+0x200>)
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	43db      	mvns	r3, r3
 80042c0:	493a      	ldr	r1, [pc, #232]	; (80043ac <HAL_GPIO_DeInit+0x200>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	220f      	movs	r2, #15
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80042d6:	4a34      	ldr	r2, [pc, #208]	; (80043a8 <HAL_GPIO_DeInit+0x1fc>)
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	089b      	lsrs	r3, r3, #2
 80042dc:	3302      	adds	r3, #2
 80042de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	43da      	mvns	r2, r3
 80042e6:	4830      	ldr	r0, [pc, #192]	; (80043a8 <HAL_GPIO_DeInit+0x1fc>)
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	089b      	lsrs	r3, r3, #2
 80042ec:	400a      	ands	r2, r1
 80042ee:	3302      	adds	r3, #2
 80042f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	2103      	movs	r1, #3
 80042fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004302:	43db      	mvns	r3, r3
 8004304:	401a      	ands	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	08da      	lsrs	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3208      	adds	r2, #8
 8004312:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	220f      	movs	r2, #15
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	08d2      	lsrs	r2, r2, #3
 800432a:	4019      	ands	r1, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3208      	adds	r2, #8
 8004330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	2103      	movs	r1, #3
 800433e:	fa01 f303 	lsl.w	r3, r1, r3
 8004342:	43db      	mvns	r3, r3
 8004344:	401a      	ands	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	2101      	movs	r1, #1
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	fa01 f303 	lsl.w	r3, r1, r3
 8004356:	43db      	mvns	r3, r3
 8004358:	401a      	ands	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	2103      	movs	r1, #3
 8004368:	fa01 f303 	lsl.w	r3, r1, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	401a      	ands	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3301      	adds	r3, #1
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b0f      	cmp	r3, #15
 800437e:	f67f af40 	bls.w	8004202 <HAL_GPIO_DeInit+0x56>
    }
  }
}
 8004382:	bf00      	nop
 8004384:	bf00      	nop
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40020000 	.word	0x40020000
 8004390:	40020400 	.word	0x40020400
 8004394:	40020800 	.word	0x40020800
 8004398:	40020c00 	.word	0x40020c00
 800439c:	40021000 	.word	0x40021000
 80043a0:	40021c00 	.word	0x40021c00
 80043a4:	080136d4 	.word	0x080136d4
 80043a8:	40013800 	.word	0x40013800
 80043ac:	40013c00 	.word	0x40013c00

080043b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80043bc:	887b      	ldrh	r3, [r7, #2]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d004      	beq.n	80043cc <HAL_GPIO_ReadPin+0x1c>
 80043c2:	887b      	ldrh	r3, [r7, #2]
 80043c4:	0c1b      	lsrs	r3, r3, #16
 80043c6:	041b      	lsls	r3, r3, #16
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d004      	beq.n	80043d6 <HAL_GPIO_ReadPin+0x26>
 80043cc:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80043d0:	4809      	ldr	r0, [pc, #36]	; (80043f8 <HAL_GPIO_ReadPin+0x48>)
 80043d2:	f7fd fca6 	bl	8001d22 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	887b      	ldrh	r3, [r7, #2]
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80043e2:	2301      	movs	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
 80043e6:	e001      	b.n	80043ec <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	080136d4 	.word	0x080136d4

080043fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
 8004408:	4613      	mov	r3, r2
 800440a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800440c:	887b      	ldrh	r3, [r7, #2]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d004      	beq.n	800441c <HAL_GPIO_WritePin+0x20>
 8004412:	887b      	ldrh	r3, [r7, #2]
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	041b      	lsls	r3, r3, #16
 8004418:	2b00      	cmp	r3, #0
 800441a:	d004      	beq.n	8004426 <HAL_GPIO_WritePin+0x2a>
 800441c:	f240 119d 	movw	r1, #413	; 0x19d
 8004420:	480e      	ldr	r0, [pc, #56]	; (800445c <HAL_GPIO_WritePin+0x60>)
 8004422:	f7fd fc7e 	bl	8001d22 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004426:	787b      	ldrb	r3, [r7, #1]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <HAL_GPIO_WritePin+0x40>
 800442c:	787b      	ldrb	r3, [r7, #1]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d004      	beq.n	800443c <HAL_GPIO_WritePin+0x40>
 8004432:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8004436:	4809      	ldr	r0, [pc, #36]	; (800445c <HAL_GPIO_WritePin+0x60>)
 8004438:	f7fd fc73 	bl	8001d22 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800443c:	787b      	ldrb	r3, [r7, #1]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004442:	887a      	ldrh	r2, [r7, #2]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004448:	e003      	b.n	8004452 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800444a:	887b      	ldrh	r3, [r7, #2]
 800444c:	041a      	lsls	r2, r3, #16
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	619a      	str	r2, [r3, #24]
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	080136d4 	.word	0x080136d4

08004460 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800446a:	4b08      	ldr	r3, [pc, #32]	; (800448c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	4013      	ands	r3, r2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d006      	beq.n	8004484 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004476:	4a05      	ldr	r2, [pc, #20]	; (800448c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004478:	88fb      	ldrh	r3, [r7, #6]
 800447a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fd f9d4 	bl	800182c <HAL_GPIO_EXTI_Callback>
  }
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40013c00 	.word	0x40013c00

08004490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e1bd      	b.n	800481e <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a93      	ldr	r2, [pc, #588]	; (80046f4 <HAL_I2C_Init+0x264>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00e      	beq.n	80044ca <HAL_I2C_Init+0x3a>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a91      	ldr	r2, [pc, #580]	; (80046f8 <HAL_I2C_Init+0x268>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d009      	beq.n	80044ca <HAL_I2C_Init+0x3a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a90      	ldr	r2, [pc, #576]	; (80046fc <HAL_I2C_Init+0x26c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_I2C_Init+0x3a>
 80044c0:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80044c4:	488e      	ldr	r0, [pc, #568]	; (8004700 <HAL_I2C_Init+0x270>)
 80044c6:	f7fd fc2c 	bl	8001d22 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d004      	beq.n	80044dc <HAL_I2C_Init+0x4c>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4a8b      	ldr	r2, [pc, #556]	; (8004704 <HAL_I2C_Init+0x274>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d904      	bls.n	80044e6 <HAL_I2C_Init+0x56>
 80044dc:	f240 11bf 	movw	r1, #447	; 0x1bf
 80044e0:	4887      	ldr	r0, [pc, #540]	; (8004700 <HAL_I2C_Init+0x270>)
 80044e2:	f7fd fc1e 	bl	8001d22 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <HAL_I2C_Init+0x72>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044f6:	d004      	beq.n	8004502 <HAL_I2C_Init+0x72>
 80044f8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80044fc:	4880      	ldr	r0, [pc, #512]	; (8004700 <HAL_I2C_Init+0x270>)
 80044fe:	f7fd fc10 	bl	8001d22 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800450a:	f023 0303 	bic.w	r3, r3, #3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <HAL_I2C_Init+0x8c>
 8004512:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004516:	487a      	ldr	r0, [pc, #488]	; (8004700 <HAL_I2C_Init+0x270>)
 8004518:	f7fd fc03 	bl	8001d22 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004524:	d009      	beq.n	800453a <HAL_I2C_Init+0xaa>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800452e:	d004      	beq.n	800453a <HAL_I2C_Init+0xaa>
 8004530:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004534:	4872      	ldr	r0, [pc, #456]	; (8004700 <HAL_I2C_Init+0x270>)
 8004536:	f7fd fbf4 	bl	8001d22 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <HAL_I2C_Init+0xc4>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d004      	beq.n	8004554 <HAL_I2C_Init+0xc4>
 800454a:	f240 11c3 	movw	r1, #451	; 0x1c3
 800454e:	486c      	ldr	r0, [pc, #432]	; (8004700 <HAL_I2C_Init+0x270>)
 8004550:	f7fd fbe7 	bl	8001d22 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800455c:	2b00      	cmp	r3, #0
 800455e:	d004      	beq.n	800456a <HAL_I2C_Init+0xda>
 8004560:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8004564:	4866      	ldr	r0, [pc, #408]	; (8004700 <HAL_I2C_Init+0x270>)
 8004566:	f7fd fbdc 	bl	8001d22 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d008      	beq.n	8004584 <HAL_I2C_Init+0xf4>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	2b40      	cmp	r3, #64	; 0x40
 8004578:	d004      	beq.n	8004584 <HAL_I2C_Init+0xf4>
 800457a:	f240 11c5 	movw	r1, #453	; 0x1c5
 800457e:	4860      	ldr	r0, [pc, #384]	; (8004700 <HAL_I2C_Init+0x270>)
 8004580:	f7fd fbcf 	bl	8001d22 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_I2C_Init+0x10e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	2b80      	cmp	r3, #128	; 0x80
 8004592:	d004      	beq.n	800459e <HAL_I2C_Init+0x10e>
 8004594:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8004598:	4859      	ldr	r0, [pc, #356]	; (8004700 <HAL_I2C_Init+0x270>)
 800459a:	f7fd fbc2 	bl	8001d22 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd faaa 	bl	8001b0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2224      	movs	r2, #36	; 0x24
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045f0:	f003 f9d2 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 80045f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4a43      	ldr	r2, [pc, #268]	; (8004708 <HAL_I2C_Init+0x278>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d807      	bhi.n	8004610 <HAL_I2C_Init+0x180>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4a42      	ldr	r2, [pc, #264]	; (800470c <HAL_I2C_Init+0x27c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	bf94      	ite	ls
 8004608:	2301      	movls	r3, #1
 800460a:	2300      	movhi	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	e006      	b.n	800461e <HAL_I2C_Init+0x18e>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4a3f      	ldr	r2, [pc, #252]	; (8004710 <HAL_I2C_Init+0x280>)
 8004614:	4293      	cmp	r3, r2
 8004616:	bf94      	ite	ls
 8004618:	2301      	movls	r3, #1
 800461a:	2300      	movhi	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e0fb      	b.n	800481e <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a3a      	ldr	r2, [pc, #232]	; (8004714 <HAL_I2C_Init+0x284>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	0c9b      	lsrs	r3, r3, #18
 8004630:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	4a2c      	ldr	r2, [pc, #176]	; (8004708 <HAL_I2C_Init+0x278>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d802      	bhi.n	8004660 <HAL_I2C_Init+0x1d0>
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	3301      	adds	r3, #1
 800465e:	e009      	b.n	8004674 <HAL_I2C_Init+0x1e4>
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004666:	fb02 f303 	mul.w	r3, r2, r3
 800466a:	4a2b      	ldr	r2, [pc, #172]	; (8004718 <HAL_I2C_Init+0x288>)
 800466c:	fba2 2303 	umull	r2, r3, r2, r3
 8004670:	099b      	lsrs	r3, r3, #6
 8004672:	3301      	adds	r3, #1
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	430b      	orrs	r3, r1
 800467a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004686:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	491e      	ldr	r1, [pc, #120]	; (8004708 <HAL_I2C_Init+0x278>)
 8004690:	428b      	cmp	r3, r1
 8004692:	d819      	bhi.n	80046c8 <HAL_I2C_Init+0x238>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1e59      	subs	r1, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	fbb1 f3f3 	udiv	r3, r1, r3
 80046a2:	1c59      	adds	r1, r3, #1
 80046a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046a8:	400b      	ands	r3, r1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_I2C_Init+0x234>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1e59      	subs	r1, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80046bc:	3301      	adds	r3, #1
 80046be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c2:	e065      	b.n	8004790 <HAL_I2C_Init+0x300>
 80046c4:	2304      	movs	r3, #4
 80046c6:	e063      	b.n	8004790 <HAL_I2C_Init+0x300>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d125      	bne.n	800471c <HAL_I2C_Init+0x28c>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1e58      	subs	r0, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6859      	ldr	r1, [r3, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	440b      	add	r3, r1
 80046de:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e2:	3301      	adds	r3, #1
 80046e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bf0c      	ite	eq
 80046ec:	2301      	moveq	r3, #1
 80046ee:	2300      	movne	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	e026      	b.n	8004742 <HAL_I2C_Init+0x2b2>
 80046f4:	40005400 	.word	0x40005400
 80046f8:	40005800 	.word	0x40005800
 80046fc:	40005c00 	.word	0x40005c00
 8004700:	08013748 	.word	0x08013748
 8004704:	00061a80 	.word	0x00061a80
 8004708:	000186a0 	.word	0x000186a0
 800470c:	001e847f 	.word	0x001e847f
 8004710:	003d08ff 	.word	0x003d08ff
 8004714:	431bde83 	.word	0x431bde83
 8004718:	10624dd3 	.word	0x10624dd3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	1e58      	subs	r0, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6859      	ldr	r1, [r3, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	0099      	lsls	r1, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004732:	3301      	adds	r3, #1
 8004734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004738:	2b00      	cmp	r3, #0
 800473a:	bf0c      	ite	eq
 800473c:	2301      	moveq	r3, #1
 800473e:	2300      	movne	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_I2C_Init+0x2ba>
 8004746:	2301      	movs	r3, #1
 8004748:	e022      	b.n	8004790 <HAL_I2C_Init+0x300>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10e      	bne.n	8004770 <HAL_I2C_Init+0x2e0>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1e58      	subs	r0, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6859      	ldr	r1, [r3, #4]
 800475a:	460b      	mov	r3, r1
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	440b      	add	r3, r1
 8004760:	fbb0 f3f3 	udiv	r3, r0, r3
 8004764:	3301      	adds	r3, #1
 8004766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800476e:	e00f      	b.n	8004790 <HAL_I2C_Init+0x300>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1e58      	subs	r0, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6859      	ldr	r1, [r3, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	0099      	lsls	r1, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	fbb0 f3f3 	udiv	r3, r0, r3
 8004786:	3301      	adds	r3, #1
 8004788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800478c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	6809      	ldr	r1, [r1, #0]
 8004794:	4313      	orrs	r3, r2
 8004796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69da      	ldr	r2, [r3, #28]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6911      	ldr	r1, [r2, #16]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68d2      	ldr	r2, [r2, #12]
 80047ca:	4311      	orrs	r1, r2
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	430b      	orrs	r3, r1
 80047d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop

08004828 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08c      	sub	sp, #48	; 0x30
 800482c:	af02      	add	r7, sp, #8
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	4608      	mov	r0, r1
 8004832:	4611      	mov	r1, r2
 8004834:	461a      	mov	r2, r3
 8004836:	4603      	mov	r3, r0
 8004838:	817b      	strh	r3, [r7, #10]
 800483a:	460b      	mov	r3, r1
 800483c:	813b      	strh	r3, [r7, #8]
 800483e:	4613      	mov	r3, r2
 8004840:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004842:	f7ff f801 	bl	8003848 <HAL_GetTick>
 8004846:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d007      	beq.n	800485e <HAL_I2C_Mem_Read+0x36>
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	2b10      	cmp	r3, #16
 8004852:	d004      	beq.n	800485e <HAL_I2C_Mem_Read+0x36>
 8004854:	f640 2134 	movw	r1, #2612	; 0xa34
 8004858:	4881      	ldr	r0, [pc, #516]	; (8004a60 <HAL_I2C_Mem_Read+0x238>)
 800485a:	f7fd fa62 	bl	8001d22 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b20      	cmp	r3, #32
 8004868:	f040 8209 	bne.w	8004c7e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	2319      	movs	r3, #25
 8004872:	2201      	movs	r2, #1
 8004874:	497b      	ldr	r1, [pc, #492]	; (8004a64 <HAL_I2C_Mem_Read+0x23c>)
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f002 f902 	bl	8006a80 <I2C_WaitOnFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
 8004884:	e1fc      	b.n	8004c80 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_I2C_Mem_Read+0x6c>
 8004890:	2302      	movs	r3, #2
 8004892:	e1f5      	b.n	8004c80 <HAL_I2C_Mem_Read+0x458>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d007      	beq.n	80048ba <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048c8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2222      	movs	r2, #34	; 0x22
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2240      	movs	r2, #64	; 0x40
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80048ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4a5b      	ldr	r2, [pc, #364]	; (8004a68 <HAL_I2C_Mem_Read+0x240>)
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048fc:	88f8      	ldrh	r0, [r7, #6]
 80048fe:	893a      	ldrh	r2, [r7, #8]
 8004900:	8979      	ldrh	r1, [r7, #10]
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	9301      	str	r3, [sp, #4]
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	4603      	mov	r3, r0
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f001 ff27 	bl	8006760 <I2C_RequestMemoryRead>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e1b1      	b.n	8004c80 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004920:	2b00      	cmp	r3, #0
 8004922:	d113      	bne.n	800494c <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004924:	2300      	movs	r3, #0
 8004926:	623b      	str	r3, [r7, #32]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	623b      	str	r3, [r7, #32]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	623b      	str	r3, [r7, #32]
 8004938:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e185      	b.n	8004c58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004950:	2b01      	cmp	r3, #1
 8004952:	d11b      	bne.n	800498c <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004962:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	e165      	b.n	8004c58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004990:	2b02      	cmp	r3, #2
 8004992:	d11b      	bne.n	80049cc <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a2:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049b2:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b4:	2300      	movs	r3, #0
 80049b6:	61bb      	str	r3, [r7, #24]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	61bb      	str	r3, [r7, #24]
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	e145      	b.n	8004c58 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80049e2:	e139      	b.n	8004c58 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	f200 80f2 	bhi.w	8004bd2 <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d123      	bne.n	8004a3e <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f002 f98a 	bl	8006d14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e13a      	b.n	8004c80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a3c:	e10c      	b.n	8004c58 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d14f      	bne.n	8004ae6 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	4907      	ldr	r1, [pc, #28]	; (8004a6c <HAL_I2C_Mem_Read+0x244>)
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f002 f815 	bl	8006a80 <I2C_WaitOnFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d009      	beq.n	8004a70 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e10f      	b.n	8004c80 <HAL_I2C_Mem_Read+0x458>
 8004a60:	08013748 	.word	0x08013748
 8004a64:	00100002 	.word	0x00100002
 8004a68:	ffff0000 	.word	0xffff0000
 8004a6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691a      	ldr	r2, [r3, #16]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ae4:	e0b8      	b.n	8004c58 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	2200      	movs	r2, #0
 8004aee:	4966      	ldr	r1, [pc, #408]	; (8004c88 <HAL_I2C_Mem_Read+0x460>)
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f001 ffc5 	bl	8006a80 <I2C_WaitOnFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0bf      	b.n	8004c80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b48:	2200      	movs	r2, #0
 8004b4a:	494f      	ldr	r1, [pc, #316]	; (8004c88 <HAL_I2C_Mem_Read+0x460>)
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f001 ff97 	bl	8006a80 <I2C_WaitOnFlagUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e091      	b.n	8004c80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bd0:	e042      	b.n	8004c58 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f002 f89c 	bl	8006d14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e04c      	b.n	8004c80 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d118      	bne.n	8004c58 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f47f aec1 	bne.w	80049e4 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e000      	b.n	8004c80 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004c7e:	2302      	movs	r3, #2
  }
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3728      	adds	r7, #40	; 0x28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	00010004 	.word	0x00010004

08004c8c <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	4608      	mov	r0, r1
 8004c96:	4611      	mov	r1, r2
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	817b      	strh	r3, [r7, #10]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	813b      	strh	r3, [r7, #8]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d007      	beq.n	8004cc0 <HAL_I2C_Mem_Write_IT+0x34>
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d004      	beq.n	8004cc0 <HAL_I2C_Mem_Write_IT+0x34>
 8004cb6:	f640 312a 	movw	r1, #2858	; 0xb2a
 8004cba:	484e      	ldr	r0, [pc, #312]	; (8004df4 <HAL_I2C_Mem_Write_IT+0x168>)
 8004cbc:	f7fd f831 	bl	8001d22 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	f040 808e 	bne.w	8004dea <HAL_I2C_Mem_Write_IT+0x15e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cce:	4b4a      	ldr	r3, [pc, #296]	; (8004df8 <HAL_I2C_Mem_Write_IT+0x16c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	08db      	lsrs	r3, r3, #3
 8004cd4:	4a49      	ldr	r2, [pc, #292]	; (8004dfc <HAL_I2C_Mem_Write_IT+0x170>)
 8004cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cda:	0a1a      	lsrs	r2, r3, #8
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009a      	lsls	r2, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d116      	bne.n	8004d22 <HAL_I2C_Mem_Write_IT+0x96>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f043 0220 	orr.w	r2, r3, #32
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e064      	b.n	8004dec <HAL_I2C_Mem_Write_IT+0x160>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d0db      	beq.n	8004ce8 <HAL_I2C_Mem_Write_IT+0x5c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_I2C_Mem_Write_IT+0xb2>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e056      	b.n	8004dec <HAL_I2C_Mem_Write_IT+0x160>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d007      	beq.n	8004d64 <HAL_I2C_Mem_Write_IT+0xd8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2221      	movs	r2, #33	; 0x21
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2240      	movs	r2, #64	; 0x40
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a3a      	ldr	r2, [r7, #32]
 8004d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <HAL_I2C_Mem_Write_IT+0x174>)
 8004da4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004da6:	897a      	ldrh	r2, [r7, #10]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004dac:	893a      	ldrh	r2, [r7, #8]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004db2:	88fa      	ldrh	r2, [r7, #6]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dcc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004de4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	e000      	b.n	8004dec <HAL_I2C_Mem_Write_IT+0x160>
  }
  else
  {
    return HAL_BUSY;
 8004dea:	2302      	movs	r3, #2
  }
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	08013748 	.word	0x08013748
 8004df8:	20000018 	.word	0x20000018
 8004dfc:	14f8b589 	.word	0x14f8b589
 8004e00:	ffff0000 	.word	0xffff0000

08004e04 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	4611      	mov	r1, r2
 8004e10:	461a      	mov	r2, r3
 8004e12:	4603      	mov	r3, r0
 8004e14:	817b      	strh	r3, [r7, #10]
 8004e16:	460b      	mov	r3, r1
 8004e18:	813b      	strh	r3, [r7, #8]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d007      	beq.n	8004e38 <HAL_I2C_Mem_Read_IT+0x34>
 8004e28:	88fb      	ldrh	r3, [r7, #6]
 8004e2a:	2b10      	cmp	r3, #16
 8004e2c:	d004      	beq.n	8004e38 <HAL_I2C_Mem_Read_IT+0x34>
 8004e2e:	f640 3182 	movw	r1, #2946	; 0xb82
 8004e32:	4854      	ldr	r0, [pc, #336]	; (8004f84 <HAL_I2C_Mem_Read_IT+0x180>)
 8004e34:	f7fc ff75 	bl	8001d22 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	f040 809a 	bne.w	8004f7a <HAL_I2C_Mem_Read_IT+0x176>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e46:	4b50      	ldr	r3, [pc, #320]	; (8004f88 <HAL_I2C_Mem_Read_IT+0x184>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	08db      	lsrs	r3, r3, #3
 8004e4c:	4a4f      	ldr	r2, [pc, #316]	; (8004f8c <HAL_I2C_Mem_Read_IT+0x188>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	0a1a      	lsrs	r2, r3, #8
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	009a      	lsls	r2, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d116      	bne.n	8004e9a <HAL_I2C_Mem_Read_IT+0x96>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f043 0220 	orr.w	r2, r3, #32
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e070      	b.n	8004f7c <HAL_I2C_Mem_Read_IT+0x178>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d0db      	beq.n	8004e60 <HAL_I2C_Mem_Read_IT+0x5c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_I2C_Mem_Read_IT+0xb2>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e062      	b.n	8004f7c <HAL_I2C_Mem_Read_IT+0x178>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d007      	beq.n	8004edc <HAL_I2C_Mem_Read_IT+0xd8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2222      	movs	r2, #34	; 0x22
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2240      	movs	r2, #64	; 0x40
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a3a      	ldr	r2, [r7, #32]
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <HAL_I2C_Mem_Read_IT+0x18c>)
 8004f1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004f1e:	897a      	ldrh	r2, [r7, #10]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004f24:	893a      	ldrh	r2, [r7, #8]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004f2a:	88fa      	ldrh	r2, [r7, #6]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f44:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f54:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <HAL_I2C_Mem_Read_IT+0x172>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004f74:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e000      	b.n	8004f7c <HAL_I2C_Mem_Read_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
  }
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	08013748 	.word	0x08013748
 8004f88:	20000018 	.word	0x20000018
 8004f8c:	14f8b589 	.word	0x14f8b589
 8004f90:	ffff0000 	.word	0xffff0000

08004f94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fbc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d003      	beq.n	8004fcc <HAL_I2C_EV_IRQHandler+0x38>
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	f040 80c1 	bne.w	800514e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10d      	bne.n	8005002 <HAL_I2C_EV_IRQHandler+0x6e>
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004fec:	d003      	beq.n	8004ff6 <HAL_I2C_EV_IRQHandler+0x62>
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ff4:	d101      	bne.n	8004ffa <HAL_I2C_EV_IRQHandler+0x66>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <HAL_I2C_EV_IRQHandler+0x68>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	f000 8132 	beq.w	8005266 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00c      	beq.n	8005026 <HAL_I2C_EV_IRQHandler+0x92>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	0a5b      	lsrs	r3, r3, #9
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b00      	cmp	r3, #0
 8005016:	d006      	beq.n	8005026 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f001 ff00 	bl	8006e1e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fd83 	bl	8005b2a <I2C_Master_SB>
 8005024:	e092      	b.n	800514c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	08db      	lsrs	r3, r3, #3
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <HAL_I2C_EV_IRQHandler+0xb2>
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	0a5b      	lsrs	r3, r3, #9
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fdf9 	bl	8005c36 <I2C_Master_ADD10>
 8005044:	e082      	b.n	800514c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d009      	beq.n	8005066 <HAL_I2C_EV_IRQHandler+0xd2>
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	0a5b      	lsrs	r3, r3, #9
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fe13 	bl	8005c8a <I2C_Master_ADDR>
 8005064:	e072      	b.n	800514c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	089b      	lsrs	r3, r3, #2
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d03b      	beq.n	80050ea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800507c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005080:	f000 80f3 	beq.w	800526a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	09db      	lsrs	r3, r3, #7
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00f      	beq.n	80050b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	0a9b      	lsrs	r3, r3, #10
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d009      	beq.n	80050b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	089b      	lsrs	r3, r3, #2
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d103      	bne.n	80050b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f9f3 	bl	8005494 <I2C_MasterTransmit_TXE>
 80050ae:	e04d      	b.n	800514c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	089b      	lsrs	r3, r3, #2
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 80d6 	beq.w	800526a <HAL_I2C_EV_IRQHandler+0x2d6>
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	0a5b      	lsrs	r3, r3, #9
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 80cf 	beq.w	800526a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80050cc:	7bbb      	ldrb	r3, [r7, #14]
 80050ce:	2b21      	cmp	r3, #33	; 0x21
 80050d0:	d103      	bne.n	80050da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa7a 	bl	80055cc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050d8:	e0c7      	b.n	800526a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	2b40      	cmp	r3, #64	; 0x40
 80050de:	f040 80c4 	bne.w	800526a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fae8 	bl	80056b8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050e8:	e0bf      	b.n	800526a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050f8:	f000 80b7 	beq.w	800526a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	099b      	lsrs	r3, r3, #6
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00f      	beq.n	8005128 <HAL_I2C_EV_IRQHandler+0x194>
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	0a9b      	lsrs	r3, r3, #10
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d009      	beq.n	8005128 <HAL_I2C_EV_IRQHandler+0x194>
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	089b      	lsrs	r3, r3, #2
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d103      	bne.n	8005128 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fb5d 	bl	80057e0 <I2C_MasterReceive_RXNE>
 8005126:	e011      	b.n	800514c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	089b      	lsrs	r3, r3, #2
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 809a 	beq.w	800526a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	0a5b      	lsrs	r3, r3, #9
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 8093 	beq.w	800526a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fc06 	bl	8005956 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800514a:	e08e      	b.n	800526a <HAL_I2C_EV_IRQHandler+0x2d6>
 800514c:	e08d      	b.n	800526a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	d004      	beq.n	8005160 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	61fb      	str	r3, [r7, #28]
 800515e:	e007      	b.n	8005170 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	085b      	lsrs	r3, r3, #1
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d012      	beq.n	80051a2 <HAL_I2C_EV_IRQHandler+0x20e>
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	0a5b      	lsrs	r3, r3, #9
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00c      	beq.n	80051a2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005198:	69b9      	ldr	r1, [r7, #24]
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 ffc4 	bl	8006128 <I2C_Slave_ADDR>
 80051a0:	e066      	b.n	8005270 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	091b      	lsrs	r3, r3, #4
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d009      	beq.n	80051c2 <HAL_I2C_EV_IRQHandler+0x22e>
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	0a5b      	lsrs	r3, r3, #9
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fffe 	bl	80061bc <I2C_Slave_STOPF>
 80051c0:	e056      	b.n	8005270 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051c2:	7bbb      	ldrb	r3, [r7, #14]
 80051c4:	2b21      	cmp	r3, #33	; 0x21
 80051c6:	d002      	beq.n	80051ce <HAL_I2C_EV_IRQHandler+0x23a>
 80051c8:	7bbb      	ldrb	r3, [r7, #14]
 80051ca:	2b29      	cmp	r3, #41	; 0x29
 80051cc:	d125      	bne.n	800521a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	09db      	lsrs	r3, r3, #7
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00f      	beq.n	80051fa <HAL_I2C_EV_IRQHandler+0x266>
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	0a9b      	lsrs	r3, r3, #10
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <HAL_I2C_EV_IRQHandler+0x266>
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 feda 	bl	8005fac <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051f8:	e039      	b.n	800526e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	089b      	lsrs	r3, r3, #2
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d033      	beq.n	800526e <HAL_I2C_EV_IRQHandler+0x2da>
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	0a5b      	lsrs	r3, r3, #9
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d02d      	beq.n	800526e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 ff07 	bl	8006026 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005218:	e029      	b.n	800526e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	099b      	lsrs	r3, r3, #6
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00f      	beq.n	8005246 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	0a9b      	lsrs	r3, r3, #10
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d009      	beq.n	8005246 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	089b      	lsrs	r3, r3, #2
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d103      	bne.n	8005246 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 ff12 	bl	8006068 <I2C_SlaveReceive_RXNE>
 8005244:	e014      	b.n	8005270 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	089b      	lsrs	r3, r3, #2
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00e      	beq.n	8005270 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	0a5b      	lsrs	r3, r3, #9
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 ff40 	bl	80060e4 <I2C_SlaveReceive_BTF>
 8005264:	e004      	b.n	8005270 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005266:	bf00      	nop
 8005268:	e002      	b.n	8005270 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800526a:	bf00      	nop
 800526c:	e000      	b.n	8005270 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800526e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005270:	3720      	adds	r7, #32
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b08a      	sub	sp, #40	; 0x28
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800528e:	2300      	movs	r3, #0
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005298:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	0a1b      	lsrs	r3, r3, #8
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00e      	beq.n	80052c4 <HAL_I2C_ER_IRQHandler+0x4e>
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	0a1b      	lsrs	r3, r3, #8
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d008      	beq.n	80052c4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052c2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	0a5b      	lsrs	r3, r3, #9
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00e      	beq.n	80052ee <HAL_I2C_ER_IRQHandler+0x78>
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	0a1b      	lsrs	r3, r3, #8
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d008      	beq.n	80052ee <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	f043 0302 	orr.w	r3, r3, #2
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80052ec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	0a9b      	lsrs	r3, r3, #10
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d03f      	beq.n	800537a <HAL_I2C_ER_IRQHandler+0x104>
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	0a1b      	lsrs	r3, r3, #8
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d039      	beq.n	800537a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005306:	7efb      	ldrb	r3, [r7, #27]
 8005308:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530e:	b29b      	uxth	r3, r3
 8005310:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005318:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005320:	7ebb      	ldrb	r3, [r7, #26]
 8005322:	2b20      	cmp	r3, #32
 8005324:	d112      	bne.n	800534c <HAL_I2C_ER_IRQHandler+0xd6>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10f      	bne.n	800534c <HAL_I2C_ER_IRQHandler+0xd6>
 800532c:	7cfb      	ldrb	r3, [r7, #19]
 800532e:	2b21      	cmp	r3, #33	; 0x21
 8005330:	d008      	beq.n	8005344 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005332:	7cfb      	ldrb	r3, [r7, #19]
 8005334:	2b29      	cmp	r3, #41	; 0x29
 8005336:	d005      	beq.n	8005344 <HAL_I2C_ER_IRQHandler+0xce>
 8005338:	7cfb      	ldrb	r3, [r7, #19]
 800533a:	2b28      	cmp	r3, #40	; 0x28
 800533c:	d106      	bne.n	800534c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b21      	cmp	r3, #33	; 0x21
 8005342:	d103      	bne.n	800534c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f001 f869 	bl	800641c <I2C_Slave_AF>
 800534a:	e016      	b.n	800537a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005354:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	f043 0304 	orr.w	r3, r3, #4
 800535c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800535e:	7efb      	ldrb	r3, [r7, #27]
 8005360:	2b10      	cmp	r3, #16
 8005362:	d002      	beq.n	800536a <HAL_I2C_ER_IRQHandler+0xf4>
 8005364:	7efb      	ldrb	r3, [r7, #27]
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d107      	bne.n	800537a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005378:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	0adb      	lsrs	r3, r3, #11
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00e      	beq.n	80053a4 <HAL_I2C_ER_IRQHandler+0x12e>
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	0a1b      	lsrs	r3, r3, #8
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d008      	beq.n	80053a4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	f043 0308 	orr.w	r3, r3, #8
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80053a2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d008      	beq.n	80053bc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f001 f8a0 	bl	80064fc <I2C_ITError>
  }
}
 80053bc:	bf00      	nop
 80053be:	3728      	adds	r7, #40	; 0x28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	70fb      	strb	r3, [r7, #3]
 8005420:	4613      	mov	r3, r2
 8005422:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d150      	bne.n	800555c <I2C_MasterTransmit_TXE+0xc8>
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	2b21      	cmp	r3, #33	; 0x21
 80054be:	d14d      	bne.n	800555c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d01d      	beq.n	8005502 <I2C_MasterTransmit_TXE+0x6e>
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d01a      	beq.n	8005502 <I2C_MasterTransmit_TXE+0x6e>
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054d2:	d016      	beq.n	8005502 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054e2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2211      	movs	r2, #17
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff ff62 	bl	80053c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005500:	e060      	b.n	80055c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005510:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005520:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2220      	movs	r2, #32
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b40      	cmp	r3, #64	; 0x40
 800553a:	d107      	bne.n	800554c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ff7d 	bl	8005444 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800554a:	e03b      	b.n	80055c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff ff35 	bl	80053c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800555a:	e033      	b.n	80055c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	2b21      	cmp	r3, #33	; 0x21
 8005560:	d005      	beq.n	800556e <I2C_MasterTransmit_TXE+0xda>
 8005562:	7bbb      	ldrb	r3, [r7, #14]
 8005564:	2b40      	cmp	r3, #64	; 0x40
 8005566:	d12d      	bne.n	80055c4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	2b22      	cmp	r3, #34	; 0x22
 800556c:	d12a      	bne.n	80055c4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005572:	b29b      	uxth	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d108      	bne.n	800558a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005586:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005588:	e01c      	b.n	80055c4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b40      	cmp	r3, #64	; 0x40
 8005594:	d103      	bne.n	800559e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f88e 	bl	80056b8 <I2C_MemoryTransmit_TXE_BTF>
}
 800559c:	e012      	b.n	80055c4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	781a      	ldrb	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055c2:	e7ff      	b.n	80055c4 <I2C_MasterTransmit_TXE+0x130>
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b21      	cmp	r3, #33	; 0x21
 80055e4:	d164      	bne.n	80056b0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d012      	beq.n	8005616 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	781a      	ldrb	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005614:	e04c      	b.n	80056b0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b08      	cmp	r3, #8
 800561a:	d01d      	beq.n	8005658 <I2C_MasterTransmit_BTF+0x8c>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b20      	cmp	r3, #32
 8005620:	d01a      	beq.n	8005658 <I2C_MasterTransmit_BTF+0x8c>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005628:	d016      	beq.n	8005658 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005638:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2211      	movs	r2, #17
 800563e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff feb7 	bl	80053c4 <HAL_I2C_MasterTxCpltCallback>
}
 8005656:	e02b      	b.n	80056b0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005666:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005676:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b40      	cmp	r3, #64	; 0x40
 8005690:	d107      	bne.n	80056a2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff fed2 	bl	8005444 <HAL_I2C_MemTxCpltCallback>
}
 80056a0:	e006      	b.n	80056b0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff fe8a 	bl	80053c4 <HAL_I2C_MasterTxCpltCallback>
}
 80056b0:	bf00      	nop
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d11d      	bne.n	800570c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d10b      	bne.n	80056f0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e8:	1c9a      	adds	r2, r3, #2
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80056ee:	e073      	b.n	80057d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	121b      	asrs	r3, r3, #8
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	651a      	str	r2, [r3, #80]	; 0x50
}
 800570a:	e065      	b.n	80057d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005710:	2b01      	cmp	r3, #1
 8005712:	d10b      	bne.n	800572c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005718:	b2da      	uxtb	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	651a      	str	r2, [r3, #80]	; 0x50
}
 800572a:	e055      	b.n	80057d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005730:	2b02      	cmp	r3, #2
 8005732:	d151      	bne.n	80057d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	2b22      	cmp	r3, #34	; 0x22
 8005738:	d10d      	bne.n	8005756 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005748:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005754:	e040      	b.n	80057d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d015      	beq.n	800578c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	2b21      	cmp	r3, #33	; 0x21
 8005764:	d112      	bne.n	800578c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	781a      	ldrb	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800578a:	e025      	b.n	80057d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d120      	bne.n	80057d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	2b21      	cmp	r3, #33	; 0x21
 800579a:	d11d      	bne.n	80057d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057aa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7ff fe36 	bl	8005444 <HAL_I2C_MemTxCpltCallback>
}
 80057d8:	bf00      	nop
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b22      	cmp	r3, #34	; 0x22
 80057f2:	f040 80ac 	bne.w	800594e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d921      	bls.n	8005848 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691a      	ldr	r2, [r3, #16]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b03      	cmp	r3, #3
 8005832:	f040 808c 	bne.w	800594e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005844:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005846:	e082      	b.n	800594e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	2b02      	cmp	r3, #2
 800584e:	d075      	beq.n	800593c <I2C_MasterReceive_RXNE+0x15c>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d002      	beq.n	800585c <I2C_MasterReceive_RXNE+0x7c>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d16f      	bne.n	800593c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f001 fa27 	bl	8006cb0 <I2C_WaitOnSTOPRequestThroughIT>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d142      	bne.n	80058ee <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005876:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005886:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b40      	cmp	r3, #64	; 0x40
 80058c0:	d10a      	bne.n	80058d8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff fdc1 	bl	8005458 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058d6:	e03a      	b.n	800594e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2212      	movs	r2, #18
 80058e4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff fd76 	bl	80053d8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058ec:	e02f      	b.n	800594e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058fc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff fd99 	bl	800546c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800593a:	e008      	b.n	800594e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800594a:	605a      	str	r2, [r3, #4]
}
 800594c:	e7ff      	b.n	800594e <I2C_MasterReceive_RXNE+0x16e>
 800594e:	bf00      	nop
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b04      	cmp	r3, #4
 800596c:	d11b      	bne.n	80059a6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800597c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80059a4:	e0bd      	b.n	8005b22 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d129      	bne.n	8005a04 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059be:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d00a      	beq.n	80059dc <I2C_MasterReceive_BTF+0x86>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d007      	beq.n	80059dc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005a02:	e08e      	b.n	8005b22 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d176      	bne.n	8005afc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d002      	beq.n	8005a1a <I2C_MasterReceive_BTF+0xc4>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b10      	cmp	r3, #16
 8005a18:	d108      	bne.n	8005a2c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e019      	b.n	8005a60 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d002      	beq.n	8005a38 <I2C_MasterReceive_BTF+0xe2>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d108      	bne.n	8005a4a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	e00a      	b.n	8005a60 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b10      	cmp	r3, #16
 8005a4e:	d007      	beq.n	8005a60 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a5e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005aba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b40      	cmp	r3, #64	; 0x40
 8005ace:	d10a      	bne.n	8005ae6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7ff fcba 	bl	8005458 <HAL_I2C_MemRxCpltCallback>
}
 8005ae4:	e01d      	b.n	8005b22 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2212      	movs	r2, #18
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff fc6f 	bl	80053d8 <HAL_I2C_MasterRxCpltCallback>
}
 8005afa:	e012      	b.n	8005b22 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b22:	bf00      	nop
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b40      	cmp	r3, #64	; 0x40
 8005b3c:	d117      	bne.n	8005b6e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b56:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005b58:	e067      	b.n	8005c2a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f043 0301 	orr.w	r3, r3, #1
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	611a      	str	r2, [r3, #16]
}
 8005b6c:	e05d      	b.n	8005c2a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b76:	d133      	bne.n	8005be0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b21      	cmp	r3, #33	; 0x21
 8005b82:	d109      	bne.n	8005b98 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b94:	611a      	str	r2, [r3, #16]
 8005b96:	e008      	b.n	8005baa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	f043 0301 	orr.w	r3, r3, #1
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d004      	beq.n	8005bbc <I2C_Master_SB+0x92>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d108      	bne.n	8005bce <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d032      	beq.n	8005c2a <I2C_Master_SB+0x100>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d02d      	beq.n	8005c2a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bdc:	605a      	str	r2, [r3, #4]
}
 8005bde:	e024      	b.n	8005c2a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10e      	bne.n	8005c06 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	11db      	asrs	r3, r3, #7
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	f003 0306 	and.w	r3, r3, #6
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f063 030f 	orn	r3, r3, #15
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	611a      	str	r2, [r3, #16]
}
 8005c04:	e011      	b.n	8005c2a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d10d      	bne.n	8005c2a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	11db      	asrs	r3, r3, #7
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	f003 0306 	and.w	r3, r3, #6
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	f063 030e 	orn	r3, r3, #14
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	611a      	str	r2, [r3, #16]
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d004      	beq.n	8005c5c <I2C_Master_ADD10+0x26>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d108      	bne.n	8005c6e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00c      	beq.n	8005c7e <I2C_Master_ADD10+0x48>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d007      	beq.n	8005c7e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c7c:	605a      	str	r2, [r3, #4]
  }
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b091      	sub	sp, #68	; 0x44
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b22      	cmp	r3, #34	; 0x22
 8005cb2:	f040 8169 	bne.w	8005f88 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10f      	bne.n	8005cde <I2C_Master_ADDR+0x54>
 8005cbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005cc2:	2b40      	cmp	r3, #64	; 0x40
 8005cc4:	d10b      	bne.n	8005cde <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	e160      	b.n	8005fa0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d11d      	bne.n	8005d22 <I2C_Master_ADDR+0x98>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005cee:	d118      	bne.n	8005d22 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d14:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	651a      	str	r2, [r3, #80]	; 0x50
 8005d20:	e13e      	b.n	8005fa0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d113      	bne.n	8005d54 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	e115      	b.n	8005f80 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	f040 808a 	bne.w	8005e74 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d66:	d137      	bne.n	8005dd8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d76:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d86:	d113      	bne.n	8005db0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d96:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d98:	2300      	movs	r3, #0
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	e0e7      	b.n	8005f80 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005db0:	2300      	movs	r3, #0
 8005db2:	623b      	str	r3, [r7, #32]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	623b      	str	r3, [r7, #32]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	623b      	str	r3, [r7, #32]
 8005dc4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	e0d3      	b.n	8005f80 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	2b08      	cmp	r3, #8
 8005ddc:	d02e      	beq.n	8005e3c <I2C_Master_ADDR+0x1b2>
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	d02b      	beq.n	8005e3c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de6:	2b12      	cmp	r3, #18
 8005de8:	d102      	bne.n	8005df0 <I2C_Master_ADDR+0x166>
 8005dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d125      	bne.n	8005e3c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d00e      	beq.n	8005e14 <I2C_Master_ADDR+0x18a>
 8005df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d00b      	beq.n	8005e14 <I2C_Master_ADDR+0x18a>
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	2b10      	cmp	r3, #16
 8005e00:	d008      	beq.n	8005e14 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	e007      	b.n	8005e24 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e22:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e24:	2300      	movs	r3, #0
 8005e26:	61fb      	str	r3, [r7, #28]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	61fb      	str	r3, [r7, #28]
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	e0a1      	b.n	8005f80 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e4a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	61bb      	str	r3, [r7, #24]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	61bb      	str	r3, [r7, #24]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	e085      	b.n	8005f80 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d14d      	bne.n	8005f1a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d016      	beq.n	8005eb2 <I2C_Master_ADDR+0x228>
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d013      	beq.n	8005eb2 <I2C_Master_ADDR+0x228>
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8c:	2b10      	cmp	r3, #16
 8005e8e:	d010      	beq.n	8005eb2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	e007      	b.n	8005ec2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ec0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ed0:	d117      	bne.n	8005f02 <I2C_Master_ADDR+0x278>
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ed8:	d00b      	beq.n	8005ef2 <I2C_Master_ADDR+0x268>
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d008      	beq.n	8005ef2 <I2C_Master_ADDR+0x268>
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d005      	beq.n	8005ef2 <I2C_Master_ADDR+0x268>
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	2b10      	cmp	r3, #16
 8005eea:	d002      	beq.n	8005ef2 <I2C_Master_ADDR+0x268>
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	2b20      	cmp	r3, #32
 8005ef0:	d107      	bne.n	8005f02 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f00:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	617b      	str	r3, [r7, #20]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	e032      	b.n	8005f80 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f28:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f38:	d117      	bne.n	8005f6a <I2C_Master_ADDR+0x2e0>
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f40:	d00b      	beq.n	8005f5a <I2C_Master_ADDR+0x2d0>
 8005f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d008      	beq.n	8005f5a <I2C_Master_ADDR+0x2d0>
 8005f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4a:	2b08      	cmp	r3, #8
 8005f4c:	d005      	beq.n	8005f5a <I2C_Master_ADDR+0x2d0>
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	2b10      	cmp	r3, #16
 8005f52:	d002      	beq.n	8005f5a <I2C_Master_ADDR+0x2d0>
 8005f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d107      	bne.n	8005f6a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f68:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	613b      	str	r3, [r7, #16]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	613b      	str	r3, [r7, #16]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	613b      	str	r3, [r7, #16]
 8005f7e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005f86:	e00b      	b.n	8005fa0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
}
 8005f9e:	e7ff      	b.n	8005fa0 <I2C_Master_ADDR+0x316>
 8005fa0:	bf00      	nop
 8005fa2:	3744      	adds	r7, #68	; 0x44
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d02b      	beq.n	800601e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	781a      	ldrb	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d114      	bne.n	800601e <I2C_SlaveTransmit_TXE+0x72>
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b29      	cmp	r3, #41	; 0x29
 8005ff8:	d111      	bne.n	800601e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006008:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2221      	movs	r2, #33	; 0x21
 800600e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2228      	movs	r2, #40	; 0x28
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7ff f9e7 	bl	80053ec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800601e:	bf00      	nop
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d011      	beq.n	800605c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	781a      	ldrb	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006076:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d02c      	beq.n	80060dc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d114      	bne.n	80060dc <I2C_SlaveReceive_RXNE+0x74>
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	2b2a      	cmp	r3, #42	; 0x2a
 80060b6:	d111      	bne.n	80060dc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2222      	movs	r2, #34	; 0x22
 80060cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2228      	movs	r2, #40	; 0x28
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff f992 	bl	8005400 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80060dc:	bf00      	nop
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d012      	beq.n	800611c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006112:	b29b      	uxth	r3, r3
 8006114:	3b01      	subs	r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006142:	2b28      	cmp	r3, #40	; 0x28
 8006144:	d127      	bne.n	8006196 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006154:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	089b      	lsrs	r3, r3, #2
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006162:	2301      	movs	r3, #1
 8006164:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	09db      	lsrs	r3, r3, #7
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d103      	bne.n	800617a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	81bb      	strh	r3, [r7, #12]
 8006178:	e002      	b.n	8006180 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006188:	89ba      	ldrh	r2, [r7, #12]
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	4619      	mov	r1, r3
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff f940 	bl	8005414 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006194:	e00e      	b.n	80061b4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006196:	2300      	movs	r3, #0
 8006198:	60bb      	str	r3, [r7, #8]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	60bb      	str	r3, [r7, #8]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80061dc:	2300      	movs	r3, #0
 80061de:	60bb      	str	r3, [r7, #8]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	60bb      	str	r3, [r7, #8]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0201 	orr.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006208:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006218:	d172      	bne.n	8006300 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	2b22      	cmp	r3, #34	; 0x22
 800621e:	d002      	beq.n	8006226 <I2C_Slave_STOPF+0x6a>
 8006220:	7bfb      	ldrb	r3, [r7, #15]
 8006222:	2b2a      	cmp	r3, #42	; 0x2a
 8006224:	d135      	bne.n	8006292 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	b29a      	uxth	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	f043 0204 	orr.w	r2, r3, #4
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006258:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	4618      	mov	r0, r3
 8006260:	f7fd fd02 	bl	8003c68 <HAL_DMA_GetState>
 8006264:	4603      	mov	r3, r0
 8006266:	2b01      	cmp	r3, #1
 8006268:	d049      	beq.n	80062fe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	4a69      	ldr	r2, [pc, #420]	; (8006414 <I2C_Slave_STOPF+0x258>)
 8006270:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	4618      	mov	r0, r3
 8006278:	f7fd fcd4 	bl	8003c24 <HAL_DMA_Abort_IT>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d03d      	beq.n	80062fe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800628c:	4610      	mov	r0, r2
 800628e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006290:	e035      	b.n	80062fe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	b29a      	uxth	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f043 0204 	orr.w	r2, r3, #4
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fd fccc 	bl	8003c68 <HAL_DMA_GetState>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d014      	beq.n	8006300 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062da:	4a4e      	ldr	r2, [pc, #312]	; (8006414 <I2C_Slave_STOPF+0x258>)
 80062dc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fd fc9e 	bl	8003c24 <HAL_DMA_Abort_IT>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d008      	beq.n	8006300 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062f8:	4610      	mov	r0, r2
 80062fa:	4798      	blx	r3
 80062fc:	e000      	b.n	8006300 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062fe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d03e      	beq.n	8006388 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b04      	cmp	r3, #4
 8006316:	d112      	bne.n	800633e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691a      	ldr	r2, [r3, #16]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006348:	2b40      	cmp	r3, #64	; 0x40
 800634a:	d112      	bne.n	8006372 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006376:	b29b      	uxth	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	f043 0204 	orr.w	r2, r3, #4
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f8b3 	bl	80064fc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006396:	e039      	b.n	800640c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	2b2a      	cmp	r3, #42	; 0x2a
 800639c:	d109      	bne.n	80063b2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2228      	movs	r2, #40	; 0x28
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff f827 	bl	8005400 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b28      	cmp	r3, #40	; 0x28
 80063bc:	d111      	bne.n	80063e2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a15      	ldr	r2, [pc, #84]	; (8006418 <I2C_Slave_STOPF+0x25c>)
 80063c2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7ff f828 	bl	8005430 <HAL_I2C_ListenCpltCallback>
}
 80063e0:	e014      	b.n	800640c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	2b22      	cmp	r3, #34	; 0x22
 80063e8:	d002      	beq.n	80063f0 <I2C_Slave_STOPF+0x234>
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	2b22      	cmp	r3, #34	; 0x22
 80063ee:	d10d      	bne.n	800640c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fe fffa 	bl	8005400 <HAL_I2C_SlaveRxCpltCallback>
}
 800640c:	bf00      	nop
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	08006931 	.word	0x08006931
 8006418:	ffff0000 	.word	0xffff0000

0800641c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b08      	cmp	r3, #8
 8006436:	d002      	beq.n	800643e <I2C_Slave_AF+0x22>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2b20      	cmp	r3, #32
 800643c:	d129      	bne.n	8006492 <I2C_Slave_AF+0x76>
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	2b28      	cmp	r3, #40	; 0x28
 8006442:	d126      	bne.n	8006492 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a2c      	ldr	r2, [pc, #176]	; (80064f8 <I2C_Slave_AF+0xdc>)
 8006448:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006458:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006462:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006472:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fe ffd0 	bl	8005430 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006490:	e02e      	b.n	80064f0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	2b21      	cmp	r3, #33	; 0x21
 8006496:	d126      	bne.n	80064e6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a17      	ldr	r2, [pc, #92]	; (80064f8 <I2C_Slave_AF+0xdc>)
 800649c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2221      	movs	r2, #33	; 0x21
 80064a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064cc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064dc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fe ff84 	bl	80053ec <HAL_I2C_SlaveTxCpltCallback>
}
 80064e4:	e004      	b.n	80064f0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064ee:	615a      	str	r2, [r3, #20]
}
 80064f0:	bf00      	nop
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	ffff0000 	.word	0xffff0000

080064fc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006512:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	2b10      	cmp	r3, #16
 8006518:	d002      	beq.n	8006520 <I2C_ITError+0x24>
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d10a      	bne.n	8006536 <I2C_ITError+0x3a>
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	2b22      	cmp	r3, #34	; 0x22
 8006524:	d107      	bne.n	8006536 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006534:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800653c:	2b28      	cmp	r3, #40	; 0x28
 800653e:	d107      	bne.n	8006550 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2228      	movs	r2, #40	; 0x28
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800654e:	e015      	b.n	800657c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800655a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800655e:	d00a      	beq.n	8006576 <I2C_ITError+0x7a>
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b60      	cmp	r3, #96	; 0x60
 8006564:	d007      	beq.n	8006576 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2220      	movs	r2, #32
 800656a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800658a:	d162      	bne.n	8006652 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800659a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d020      	beq.n	80065ec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ae:	4a6a      	ldr	r2, [pc, #424]	; (8006758 <I2C_ITError+0x25c>)
 80065b0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fd fb34 	bl	8003c24 <HAL_DMA_Abort_IT>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 8089 	beq.w	80066d6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0201 	bic.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065e6:	4610      	mov	r0, r2
 80065e8:	4798      	blx	r3
 80065ea:	e074      	b.n	80066d6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	4a59      	ldr	r2, [pc, #356]	; (8006758 <I2C_ITError+0x25c>)
 80065f2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fd fb13 	bl	8003c24 <HAL_DMA_Abort_IT>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d068      	beq.n	80066d6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660e:	2b40      	cmp	r3, #64	; 0x40
 8006610:	d10b      	bne.n	800662a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0201 	bic.w	r2, r2, #1
 8006638:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2220      	movs	r2, #32
 800663e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800664c:	4610      	mov	r0, r2
 800664e:	4798      	blx	r3
 8006650:	e041      	b.n	80066d6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b60      	cmp	r3, #96	; 0x60
 800665c:	d125      	bne.n	80066aa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d10b      	bne.n	8006692 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fe feec 	bl	8005480 <HAL_I2C_AbortCpltCallback>
 80066a8:	e015      	b.n	80066d6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b4:	2b40      	cmp	r3, #64	; 0x40
 80066b6:	d10b      	bne.n	80066d0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691a      	ldr	r2, [r3, #16]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7fe fecb 	bl	800546c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10e      	bne.n	8006704 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d109      	bne.n	8006704 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d104      	bne.n	8006704 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006700:	2b00      	cmp	r3, #0
 8006702:	d007      	beq.n	8006714 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006712:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800671a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b04      	cmp	r3, #4
 8006726:	d113      	bne.n	8006750 <I2C_ITError+0x254>
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	2b28      	cmp	r3, #40	; 0x28
 800672c:	d110      	bne.n	8006750 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <I2C_ITError+0x260>)
 8006732:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fe fe70 	bl	8005430 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	08006931 	.word	0x08006931
 800675c:	ffff0000 	.word	0xffff0000

08006760 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af02      	add	r7, sp, #8
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	4608      	mov	r0, r1
 800676a:	4611      	mov	r1, r2
 800676c:	461a      	mov	r2, r3
 800676e:	4603      	mov	r3, r0
 8006770:	817b      	strh	r3, [r7, #10]
 8006772:	460b      	mov	r3, r1
 8006774:	813b      	strh	r3, [r7, #8]
 8006776:	4613      	mov	r3, r2
 8006778:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006788:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006798:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f96a 	bl	8006a80 <I2C_WaitOnFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00d      	beq.n	80067ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c0:	d103      	bne.n	80067ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e0aa      	b.n	8006924 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067ce:	897b      	ldrh	r3, [r7, #10]
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	461a      	mov	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	6a3a      	ldr	r2, [r7, #32]
 80067e2:	4952      	ldr	r1, [pc, #328]	; (800692c <I2C_RequestMemoryRead+0x1cc>)
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 f9a2 	bl	8006b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e097      	b.n	8006924 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067f4:	2300      	movs	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800680a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680c:	6a39      	ldr	r1, [r7, #32]
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 fa0c 	bl	8006c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00d      	beq.n	8006836 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	2b04      	cmp	r3, #4
 8006820:	d107      	bne.n	8006832 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006830:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e076      	b.n	8006924 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006836:	88fb      	ldrh	r3, [r7, #6]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d105      	bne.n	8006848 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800683c:	893b      	ldrh	r3, [r7, #8]
 800683e:	b2da      	uxtb	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	611a      	str	r2, [r3, #16]
 8006846:	e021      	b.n	800688c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006848:	893b      	ldrh	r3, [r7, #8]
 800684a:	0a1b      	lsrs	r3, r3, #8
 800684c:	b29b      	uxth	r3, r3
 800684e:	b2da      	uxtb	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006858:	6a39      	ldr	r1, [r7, #32]
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 f9e6 	bl	8006c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00d      	beq.n	8006882 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	2b04      	cmp	r3, #4
 800686c:	d107      	bne.n	800687e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800687c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e050      	b.n	8006924 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006882:	893b      	ldrh	r3, [r7, #8]
 8006884:	b2da      	uxtb	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800688c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688e:	6a39      	ldr	r1, [r7, #32]
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f9cb 	bl	8006c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00d      	beq.n	80068b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d107      	bne.n	80068b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e035      	b.n	8006924 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 f8d3 	bl	8006a80 <I2C_WaitOnFlagUntilTimeout>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00d      	beq.n	80068fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ee:	d103      	bne.n	80068f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e013      	b.n	8006924 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068fc:	897b      	ldrh	r3, [r7, #10]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f043 0301 	orr.w	r3, r3, #1
 8006904:	b2da      	uxtb	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	6a3a      	ldr	r2, [r7, #32]
 8006910:	4906      	ldr	r1, [pc, #24]	; (800692c <I2C_RequestMemoryRead+0x1cc>)
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 f90b 	bl	8006b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e000      	b.n	8006924 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	00010002 	.word	0x00010002

08006930 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006948:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800694a:	4b4b      	ldr	r3, [pc, #300]	; (8006a78 <I2C_DMAAbort+0x148>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	08db      	lsrs	r3, r3, #3
 8006950:	4a4a      	ldr	r2, [pc, #296]	; (8006a7c <I2C_DMAAbort+0x14c>)
 8006952:	fba2 2303 	umull	r2, r3, r2, r3
 8006956:	0a1a      	lsrs	r2, r3, #8
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	00da      	lsls	r2, r3, #3
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	f043 0220 	orr.w	r2, r3, #32
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006976:	e00a      	b.n	800698e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3b01      	subs	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800698c:	d0ea      	beq.n	8006964 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699a:	2200      	movs	r2, #0
 800699c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	2200      	movs	r2, #0
 80069ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2200      	movs	r2, #0
 80069c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d0:	2200      	movs	r2, #0
 80069d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e0:	2200      	movs	r2, #0
 80069e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0201 	bic.w	r2, r2, #1
 80069f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b60      	cmp	r3, #96	; 0x60
 80069fe:	d10e      	bne.n	8006a1e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2200      	movs	r2, #0
 8006a14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a16:	6978      	ldr	r0, [r7, #20]
 8006a18:	f7fe fd32 	bl	8005480 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a1c:	e027      	b.n	8006a6e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a1e:	7cfb      	ldrb	r3, [r7, #19]
 8006a20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a24:	2b28      	cmp	r3, #40	; 0x28
 8006a26:	d117      	bne.n	8006a58 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0201 	orr.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2228      	movs	r2, #40	; 0x28
 8006a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a56:	e007      	b.n	8006a68 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006a68:	6978      	ldr	r0, [r7, #20]
 8006a6a:	f7fe fcff 	bl	800546c <HAL_I2C_ErrorCallback>
}
 8006a6e:	bf00      	nop
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20000018 	.word	0x20000018
 8006a7c:	14f8b589 	.word	0x14f8b589

08006a80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	603b      	str	r3, [r7, #0]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a90:	e025      	b.n	8006ade <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a98:	d021      	beq.n	8006ade <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a9a:	f7fc fed5 	bl	8003848 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d302      	bcc.n	8006ab0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d116      	bne.n	8006ade <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	f043 0220 	orr.w	r2, r3, #32
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e023      	b.n	8006b26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	0c1b      	lsrs	r3, r3, #16
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d10d      	bne.n	8006b04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	43da      	mvns	r2, r3
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4013      	ands	r3, r2
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bf0c      	ite	eq
 8006afa:	2301      	moveq	r3, #1
 8006afc:	2300      	movne	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	e00c      	b.n	8006b1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	43da      	mvns	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	bf0c      	ite	eq
 8006b16:	2301      	moveq	r3, #1
 8006b18:	2300      	movne	r3, #0
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	79fb      	ldrb	r3, [r7, #7]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d0b6      	beq.n	8006a92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	60f8      	str	r0, [r7, #12]
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	607a      	str	r2, [r7, #4]
 8006b3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b3c:	e051      	b.n	8006be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4c:	d123      	bne.n	8006b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	f043 0204 	orr.w	r2, r3, #4
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e046      	b.n	8006c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9c:	d021      	beq.n	8006be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b9e:	f7fc fe53 	bl	8003848 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d302      	bcc.n	8006bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d116      	bne.n	8006be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	f043 0220 	orr.w	r2, r3, #32
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e020      	b.n	8006c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	0c1b      	lsrs	r3, r3, #16
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d10c      	bne.n	8006c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	43da      	mvns	r2, r3
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	bf14      	ite	ne
 8006bfe:	2301      	movne	r3, #1
 8006c00:	2300      	moveq	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	e00b      	b.n	8006c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	43da      	mvns	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	4013      	ands	r3, r2
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	bf14      	ite	ne
 8006c18:	2301      	movne	r3, #1
 8006c1a:	2300      	moveq	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d18d      	bne.n	8006b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c38:	e02d      	b.n	8006c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 f8c0 	bl	8006dc0 <I2C_IsAcknowledgeFailed>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e02d      	b.n	8006ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c50:	d021      	beq.n	8006c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c52:	f7fc fdf9 	bl	8003848 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d302      	bcc.n	8006c68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d116      	bne.n	8006c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	f043 0220 	orr.w	r2, r3, #32
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e007      	b.n	8006ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca0:	2b80      	cmp	r3, #128	; 0x80
 8006ca2:	d1ca      	bne.n	8006c3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006cbc:	4b13      	ldr	r3, [pc, #76]	; (8006d0c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	08db      	lsrs	r3, r3, #3
 8006cc2:	4a13      	ldr	r2, [pc, #76]	; (8006d10 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc8:	0a1a      	lsrs	r2, r3, #8
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d107      	bne.n	8006cee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	f043 0220 	orr.w	r2, r3, #32
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e008      	b.n	8006d00 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cfc:	d0e9      	beq.n	8006cd2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	20000018 	.word	0x20000018
 8006d10:	14f8b589 	.word	0x14f8b589

08006d14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d20:	e042      	b.n	8006da8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	2b10      	cmp	r3, #16
 8006d2e:	d119      	bne.n	8006d64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f06f 0210 	mvn.w	r2, #16
 8006d38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2220      	movs	r2, #32
 8006d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e029      	b.n	8006db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d64:	f7fc fd70 	bl	8003848 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d302      	bcc.n	8006d7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d116      	bne.n	8006da8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	f043 0220 	orr.w	r2, r3, #32
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e007      	b.n	8006db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db2:	2b40      	cmp	r3, #64	; 0x40
 8006db4:	d1b5      	bne.n	8006d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd6:	d11b      	bne.n	8006e10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006de0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	f043 0204 	orr.w	r2, r3, #4
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e000      	b.n	8006e12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006e2e:	d103      	bne.n	8006e38 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e36:	e007      	b.n	8006e48 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006e40:	d102      	bne.n	8006e48 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2208      	movs	r2, #8
 8006e46:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8006e58:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8006e64:	f000 f808 	bl	8006e78 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8006e68:	4b02      	ldr	r3, [pc, #8]	; (8006e74 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006e6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e6e:	615a      	str	r2, [r3, #20]
  }
}
 8006e70:	bf00      	nop
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40013c00 	.word	0x40013c00

08006e78 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8006e7c:	bf00      	nop
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
	...

08006e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e314      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b0f      	cmp	r3, #15
 8006ea0:	d903      	bls.n	8006eaa <HAL_RCC_OscConfig+0x22>
 8006ea2:	21e6      	movs	r1, #230	; 0xe6
 8006ea4:	4897      	ldr	r0, [pc, #604]	; (8007104 <HAL_RCC_OscConfig+0x27c>)
 8006ea6:	f7fa ff3c 	bl	8001d22 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 8088 	beq.w	8006fc8 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00d      	beq.n	8006edc <HAL_RCC_OscConfig+0x54>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec8:	d008      	beq.n	8006edc <HAL_RCC_OscConfig+0x54>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ed2:	d003      	beq.n	8006edc <HAL_RCC_OscConfig+0x54>
 8006ed4:	21eb      	movs	r1, #235	; 0xeb
 8006ed6:	488b      	ldr	r0, [pc, #556]	; (8007104 <HAL_RCC_OscConfig+0x27c>)
 8006ed8:	f7fa ff23 	bl	8001d22 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006edc:	4b8a      	ldr	r3, [pc, #552]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f003 030c 	and.w	r3, r3, #12
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d00c      	beq.n	8006f02 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ee8:	4b87      	ldr	r3, [pc, #540]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d112      	bne.n	8006f1a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ef4:	4b84      	ldr	r3, [pc, #528]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f00:	d10b      	bne.n	8006f1a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f02:	4b81      	ldr	r3, [pc, #516]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d05b      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x13e>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d157      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e2d4      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f22:	d106      	bne.n	8006f32 <HAL_RCC_OscConfig+0xaa>
 8006f24:	4b78      	ldr	r3, [pc, #480]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a77      	ldr	r2, [pc, #476]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	e01d      	b.n	8006f6e <HAL_RCC_OscConfig+0xe6>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f3a:	d10c      	bne.n	8006f56 <HAL_RCC_OscConfig+0xce>
 8006f3c:	4b72      	ldr	r3, [pc, #456]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a71      	ldr	r2, [pc, #452]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	4b6f      	ldr	r3, [pc, #444]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a6e      	ldr	r2, [pc, #440]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	e00b      	b.n	8006f6e <HAL_RCC_OscConfig+0xe6>
 8006f56:	4b6c      	ldr	r3, [pc, #432]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a6b      	ldr	r2, [pc, #428]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	4b69      	ldr	r3, [pc, #420]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a68      	ldr	r2, [pc, #416]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d013      	beq.n	8006f9e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f76:	f7fc fc67 	bl	8003848 <HAL_GetTick>
 8006f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f7c:	e008      	b.n	8006f90 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f7e:	f7fc fc63 	bl	8003848 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b64      	cmp	r3, #100	; 0x64
 8006f8a:	d901      	bls.n	8006f90 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e299      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f90:	4b5d      	ldr	r3, [pc, #372]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d0f0      	beq.n	8006f7e <HAL_RCC_OscConfig+0xf6>
 8006f9c:	e014      	b.n	8006fc8 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f9e:	f7fc fc53 	bl	8003848 <HAL_GetTick>
 8006fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fa4:	e008      	b.n	8006fb8 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fa6:	f7fc fc4f 	bl	8003848 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	2b64      	cmp	r3, #100	; 0x64
 8006fb2:	d901      	bls.n	8006fb8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e285      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fb8:	4b53      	ldr	r3, [pc, #332]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1f0      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x11e>
 8006fc4:	e000      	b.n	8006fc8 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fc6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d079      	beq.n	80070c8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d008      	beq.n	8006fee <HAL_RCC_OscConfig+0x166>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d004      	beq.n	8006fee <HAL_RCC_OscConfig+0x166>
 8006fe4:	f240 111d 	movw	r1, #285	; 0x11d
 8006fe8:	4846      	ldr	r0, [pc, #280]	; (8007104 <HAL_RCC_OscConfig+0x27c>)
 8006fea:	f7fa fe9a 	bl	8001d22 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b1f      	cmp	r3, #31
 8006ff4:	d904      	bls.n	8007000 <HAL_RCC_OscConfig+0x178>
 8006ff6:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8006ffa:	4842      	ldr	r0, [pc, #264]	; (8007104 <HAL_RCC_OscConfig+0x27c>)
 8006ffc:	f7fa fe91 	bl	8001d22 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007000:	4b41      	ldr	r3, [pc, #260]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f003 030c 	and.w	r3, r3, #12
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00b      	beq.n	8007024 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800700c:	4b3e      	ldr	r3, [pc, #248]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007014:	2b08      	cmp	r3, #8
 8007016:	d11c      	bne.n	8007052 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007018:	4b3b      	ldr	r3, [pc, #236]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d116      	bne.n	8007052 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007024:	4b38      	ldr	r3, [pc, #224]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <HAL_RCC_OscConfig+0x1b4>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d001      	beq.n	800703c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e243      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800703c:	4b32      	ldr	r3, [pc, #200]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	00db      	lsls	r3, r3, #3
 800704a:	492f      	ldr	r1, [pc, #188]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 800704c:	4313      	orrs	r3, r2
 800704e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007050:	e03a      	b.n	80070c8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d020      	beq.n	800709c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800705a:	4b2c      	ldr	r3, [pc, #176]	; (800710c <HAL_RCC_OscConfig+0x284>)
 800705c:	2201      	movs	r2, #1
 800705e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007060:	f7fc fbf2 	bl	8003848 <HAL_GetTick>
 8007064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007066:	e008      	b.n	800707a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007068:	f7fc fbee 	bl	8003848 <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b02      	cmp	r3, #2
 8007074:	d901      	bls.n	800707a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e224      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800707a:	4b23      	ldr	r3, [pc, #140]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0f0      	beq.n	8007068 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007086:	4b20      	ldr	r3, [pc, #128]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	491c      	ldr	r1, [pc, #112]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8007096:	4313      	orrs	r3, r2
 8007098:	600b      	str	r3, [r1, #0]
 800709a:	e015      	b.n	80070c8 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800709c:	4b1b      	ldr	r3, [pc, #108]	; (800710c <HAL_RCC_OscConfig+0x284>)
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a2:	f7fc fbd1 	bl	8003848 <HAL_GetTick>
 80070a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070a8:	e008      	b.n	80070bc <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070aa:	f7fc fbcd 	bl	8003848 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d901      	bls.n	80070bc <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e203      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070bc:	4b12      	ldr	r3, [pc, #72]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1f0      	bne.n	80070aa <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0308 	and.w	r3, r3, #8
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d045      	beq.n	8007160 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d008      	beq.n	80070ee <HAL_RCC_OscConfig+0x266>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d004      	beq.n	80070ee <HAL_RCC_OscConfig+0x266>
 80070e4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80070e8:	4806      	ldr	r0, [pc, #24]	; (8007104 <HAL_RCC_OscConfig+0x27c>)
 80070ea:	f7fa fe1a 	bl	8001d22 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d01e      	beq.n	8007134 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070f6:	4b06      	ldr	r3, [pc, #24]	; (8007110 <HAL_RCC_OscConfig+0x288>)
 80070f8:	2201      	movs	r2, #1
 80070fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070fc:	f7fc fba4 	bl	8003848 <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007102:	e010      	b.n	8007126 <HAL_RCC_OscConfig+0x29e>
 8007104:	080137bc 	.word	0x080137bc
 8007108:	40023800 	.word	0x40023800
 800710c:	42470000 	.word	0x42470000
 8007110:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007114:	f7fc fb98 	bl	8003848 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d901      	bls.n	8007126 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e1ce      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007126:	4b5e      	ldr	r3, [pc, #376]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 8007128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0f0      	beq.n	8007114 <HAL_RCC_OscConfig+0x28c>
 8007132:	e015      	b.n	8007160 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007134:	4b5b      	ldr	r3, [pc, #364]	; (80072a4 <HAL_RCC_OscConfig+0x41c>)
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800713a:	f7fc fb85 	bl	8003848 <HAL_GetTick>
 800713e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007142:	f7fc fb81 	bl	8003848 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e1b7      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007154:	4b52      	ldr	r3, [pc, #328]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 8007156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f0      	bne.n	8007142 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 80b0 	beq.w	80072ce <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800716e:	2300      	movs	r3, #0
 8007170:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00c      	beq.n	8007194 <HAL_RCC_OscConfig+0x30c>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d008      	beq.n	8007194 <HAL_RCC_OscConfig+0x30c>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	2b05      	cmp	r3, #5
 8007188:	d004      	beq.n	8007194 <HAL_RCC_OscConfig+0x30c>
 800718a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800718e:	4846      	ldr	r0, [pc, #280]	; (80072a8 <HAL_RCC_OscConfig+0x420>)
 8007190:	f7fa fdc7 	bl	8001d22 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007194:	4b42      	ldr	r3, [pc, #264]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 8007196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10f      	bne.n	80071c0 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071a0:	2300      	movs	r3, #0
 80071a2:	60bb      	str	r3, [r7, #8]
 80071a4:	4b3e      	ldr	r3, [pc, #248]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 80071a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a8:	4a3d      	ldr	r2, [pc, #244]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 80071aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ae:	6413      	str	r3, [r2, #64]	; 0x40
 80071b0:	4b3b      	ldr	r3, [pc, #236]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 80071b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b8:	60bb      	str	r3, [r7, #8]
 80071ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071bc:	2301      	movs	r3, #1
 80071be:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c0:	4b3a      	ldr	r3, [pc, #232]	; (80072ac <HAL_RCC_OscConfig+0x424>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d118      	bne.n	80071fe <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071cc:	4b37      	ldr	r3, [pc, #220]	; (80072ac <HAL_RCC_OscConfig+0x424>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a36      	ldr	r2, [pc, #216]	; (80072ac <HAL_RCC_OscConfig+0x424>)
 80071d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071d8:	f7fc fb36 	bl	8003848 <HAL_GetTick>
 80071dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071e0:	f7fc fb32 	bl	8003848 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e168      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f2:	4b2e      	ldr	r3, [pc, #184]	; (80072ac <HAL_RCC_OscConfig+0x424>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0f0      	beq.n	80071e0 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d106      	bne.n	8007214 <HAL_RCC_OscConfig+0x38c>
 8007206:	4b26      	ldr	r3, [pc, #152]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 8007208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720a:	4a25      	ldr	r2, [pc, #148]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 800720c:	f043 0301 	orr.w	r3, r3, #1
 8007210:	6713      	str	r3, [r2, #112]	; 0x70
 8007212:	e01c      	b.n	800724e <HAL_RCC_OscConfig+0x3c6>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	2b05      	cmp	r3, #5
 800721a:	d10c      	bne.n	8007236 <HAL_RCC_OscConfig+0x3ae>
 800721c:	4b20      	ldr	r3, [pc, #128]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 800721e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007220:	4a1f      	ldr	r2, [pc, #124]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 8007222:	f043 0304 	orr.w	r3, r3, #4
 8007226:	6713      	str	r3, [r2, #112]	; 0x70
 8007228:	4b1d      	ldr	r3, [pc, #116]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 800722a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722c:	4a1c      	ldr	r2, [pc, #112]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 800722e:	f043 0301 	orr.w	r3, r3, #1
 8007232:	6713      	str	r3, [r2, #112]	; 0x70
 8007234:	e00b      	b.n	800724e <HAL_RCC_OscConfig+0x3c6>
 8007236:	4b1a      	ldr	r3, [pc, #104]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 8007238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723a:	4a19      	ldr	r2, [pc, #100]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 800723c:	f023 0301 	bic.w	r3, r3, #1
 8007240:	6713      	str	r3, [r2, #112]	; 0x70
 8007242:	4b17      	ldr	r3, [pc, #92]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 8007244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007246:	4a16      	ldr	r2, [pc, #88]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 8007248:	f023 0304 	bic.w	r3, r3, #4
 800724c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d015      	beq.n	8007282 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007256:	f7fc faf7 	bl	8003848 <HAL_GetTick>
 800725a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800725c:	e00a      	b.n	8007274 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800725e:	f7fc faf3 	bl	8003848 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	f241 3288 	movw	r2, #5000	; 0x1388
 800726c:	4293      	cmp	r3, r2
 800726e:	d901      	bls.n	8007274 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e127      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007274:	4b0a      	ldr	r3, [pc, #40]	; (80072a0 <HAL_RCC_OscConfig+0x418>)
 8007276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0ee      	beq.n	800725e <HAL_RCC_OscConfig+0x3d6>
 8007280:	e01c      	b.n	80072bc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007282:	f7fc fae1 	bl	8003848 <HAL_GetTick>
 8007286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007288:	e012      	b.n	80072b0 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800728a:	f7fc fadd 	bl	8003848 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	f241 3288 	movw	r2, #5000	; 0x1388
 8007298:	4293      	cmp	r3, r2
 800729a:	d909      	bls.n	80072b0 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e111      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
 80072a0:	40023800 	.word	0x40023800
 80072a4:	42470e80 	.word	0x42470e80
 80072a8:	080137bc 	.word	0x080137bc
 80072ac:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072b0:	4b86      	ldr	r3, [pc, #536]	; (80074cc <HAL_RCC_OscConfig+0x644>)
 80072b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e6      	bne.n	800728a <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d105      	bne.n	80072ce <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072c2:	4b82      	ldr	r3, [pc, #520]	; (80074cc <HAL_RCC_OscConfig+0x644>)
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	4a81      	ldr	r2, [pc, #516]	; (80074cc <HAL_RCC_OscConfig+0x644>)
 80072c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00c      	beq.n	80072f0 <HAL_RCC_OscConfig+0x468>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d008      	beq.n	80072f0 <HAL_RCC_OscConfig+0x468>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d004      	beq.n	80072f0 <HAL_RCC_OscConfig+0x468>
 80072e6:	f240 11cd 	movw	r1, #461	; 0x1cd
 80072ea:	4879      	ldr	r0, [pc, #484]	; (80074d0 <HAL_RCC_OscConfig+0x648>)
 80072ec:	f7fa fd19 	bl	8001d22 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 80e4 	beq.w	80074c2 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072fa:	4b74      	ldr	r3, [pc, #464]	; (80074cc <HAL_RCC_OscConfig+0x644>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 030c 	and.w	r3, r3, #12
 8007302:	2b08      	cmp	r3, #8
 8007304:	f000 80a5 	beq.w	8007452 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	2b02      	cmp	r3, #2
 800730e:	f040 8089 	bne.w	8007424 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d009      	beq.n	800732e <HAL_RCC_OscConfig+0x4a6>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007322:	d004      	beq.n	800732e <HAL_RCC_OscConfig+0x4a6>
 8007324:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8007328:	4869      	ldr	r0, [pc, #420]	; (80074d0 <HAL_RCC_OscConfig+0x648>)
 800732a:	f7fa fcfa 	bl	8001d22 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	2b3f      	cmp	r3, #63	; 0x3f
 8007334:	d904      	bls.n	8007340 <HAL_RCC_OscConfig+0x4b8>
 8007336:	f240 11d7 	movw	r1, #471	; 0x1d7
 800733a:	4865      	ldr	r0, [pc, #404]	; (80074d0 <HAL_RCC_OscConfig+0x648>)
 800733c:	f7fa fcf1 	bl	8001d22 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	2b31      	cmp	r3, #49	; 0x31
 8007346:	d904      	bls.n	8007352 <HAL_RCC_OscConfig+0x4ca>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007350:	d904      	bls.n	800735c <HAL_RCC_OscConfig+0x4d4>
 8007352:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8007356:	485e      	ldr	r0, [pc, #376]	; (80074d0 <HAL_RCC_OscConfig+0x648>)
 8007358:	f7fa fce3 	bl	8001d22 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007360:	2b02      	cmp	r3, #2
 8007362:	d010      	beq.n	8007386 <HAL_RCC_OscConfig+0x4fe>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007368:	2b04      	cmp	r3, #4
 800736a:	d00c      	beq.n	8007386 <HAL_RCC_OscConfig+0x4fe>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007370:	2b06      	cmp	r3, #6
 8007372:	d008      	beq.n	8007386 <HAL_RCC_OscConfig+0x4fe>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007378:	2b08      	cmp	r3, #8
 800737a:	d004      	beq.n	8007386 <HAL_RCC_OscConfig+0x4fe>
 800737c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007380:	4853      	ldr	r0, [pc, #332]	; (80074d0 <HAL_RCC_OscConfig+0x648>)
 8007382:	f7fa fcce 	bl	8001d22 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738a:	2b01      	cmp	r3, #1
 800738c:	d903      	bls.n	8007396 <HAL_RCC_OscConfig+0x50e>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007392:	2b0f      	cmp	r3, #15
 8007394:	d904      	bls.n	80073a0 <HAL_RCC_OscConfig+0x518>
 8007396:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800739a:	484d      	ldr	r0, [pc, #308]	; (80074d0 <HAL_RCC_OscConfig+0x648>)
 800739c:	f7fa fcc1 	bl	8001d22 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073a0:	4b4c      	ldr	r3, [pc, #304]	; (80074d4 <HAL_RCC_OscConfig+0x64c>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a6:	f7fc fa4f 	bl	8003848 <HAL_GetTick>
 80073aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ac:	e008      	b.n	80073c0 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073ae:	f7fc fa4b 	bl	8003848 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d901      	bls.n	80073c0 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e081      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073c0:	4b42      	ldr	r3, [pc, #264]	; (80074cc <HAL_RCC_OscConfig+0x644>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1f0      	bne.n	80073ae <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	69da      	ldr	r2, [r3, #28]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	019b      	lsls	r3, r3, #6
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	3b01      	subs	r3, #1
 80073e6:	041b      	lsls	r3, r3, #16
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ee:	061b      	lsls	r3, r3, #24
 80073f0:	4936      	ldr	r1, [pc, #216]	; (80074cc <HAL_RCC_OscConfig+0x644>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073f6:	4b37      	ldr	r3, [pc, #220]	; (80074d4 <HAL_RCC_OscConfig+0x64c>)
 80073f8:	2201      	movs	r2, #1
 80073fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073fc:	f7fc fa24 	bl	8003848 <HAL_GetTick>
 8007400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007402:	e008      	b.n	8007416 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007404:	f7fc fa20 	bl	8003848 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d901      	bls.n	8007416 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e056      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007416:	4b2d      	ldr	r3, [pc, #180]	; (80074cc <HAL_RCC_OscConfig+0x644>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0f0      	beq.n	8007404 <HAL_RCC_OscConfig+0x57c>
 8007422:	e04e      	b.n	80074c2 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007424:	4b2b      	ldr	r3, [pc, #172]	; (80074d4 <HAL_RCC_OscConfig+0x64c>)
 8007426:	2200      	movs	r2, #0
 8007428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800742a:	f7fc fa0d 	bl	8003848 <HAL_GetTick>
 800742e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007430:	e008      	b.n	8007444 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007432:	f7fc fa09 	bl	8003848 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d901      	bls.n	8007444 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e03f      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007444:	4b21      	ldr	r3, [pc, #132]	; (80074cc <HAL_RCC_OscConfig+0x644>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1f0      	bne.n	8007432 <HAL_RCC_OscConfig+0x5aa>
 8007450:	e037      	b.n	80074c2 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e032      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800745e:	4b1b      	ldr	r3, [pc, #108]	; (80074cc <HAL_RCC_OscConfig+0x644>)
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d028      	beq.n	80074be <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007476:	429a      	cmp	r2, r3
 8007478:	d121      	bne.n	80074be <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007484:	429a      	cmp	r2, r3
 8007486:	d11a      	bne.n	80074be <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800748e:	4013      	ands	r3, r2
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007494:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007496:	4293      	cmp	r3, r2
 8007498:	d111      	bne.n	80074be <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a4:	085b      	lsrs	r3, r3, #1
 80074a6:	3b01      	subs	r3, #1
 80074a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d107      	bne.n	80074be <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d001      	beq.n	80074c2 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40023800 	.word	0x40023800
 80074d0:	080137bc 	.word	0x080137bc
 80074d4:	42470060 	.word	0x42470060

080074d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e174      	b.n	80077d6 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d003      	beq.n	80074fc <HAL_RCC_ClockConfig+0x24>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b0f      	cmp	r3, #15
 80074fa:	d904      	bls.n	8007506 <HAL_RCC_ClockConfig+0x2e>
 80074fc:	f240 215a 	movw	r1, #602	; 0x25a
 8007500:	487b      	ldr	r0, [pc, #492]	; (80076f0 <HAL_RCC_ClockConfig+0x218>)
 8007502:	f7fa fc0e 	bl	8001d22 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d019      	beq.n	8007540 <HAL_RCC_ClockConfig+0x68>
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d016      	beq.n	8007540 <HAL_RCC_ClockConfig+0x68>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b02      	cmp	r3, #2
 8007516:	d013      	beq.n	8007540 <HAL_RCC_ClockConfig+0x68>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2b03      	cmp	r3, #3
 800751c:	d010      	beq.n	8007540 <HAL_RCC_ClockConfig+0x68>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b04      	cmp	r3, #4
 8007522:	d00d      	beq.n	8007540 <HAL_RCC_ClockConfig+0x68>
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	2b05      	cmp	r3, #5
 8007528:	d00a      	beq.n	8007540 <HAL_RCC_ClockConfig+0x68>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b06      	cmp	r3, #6
 800752e:	d007      	beq.n	8007540 <HAL_RCC_ClockConfig+0x68>
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2b07      	cmp	r3, #7
 8007534:	d004      	beq.n	8007540 <HAL_RCC_ClockConfig+0x68>
 8007536:	f240 215b 	movw	r1, #603	; 0x25b
 800753a:	486d      	ldr	r0, [pc, #436]	; (80076f0 <HAL_RCC_ClockConfig+0x218>)
 800753c:	f7fa fbf1 	bl	8001d22 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007540:	4b6c      	ldr	r3, [pc, #432]	; (80076f4 <HAL_RCC_ClockConfig+0x21c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d90c      	bls.n	8007568 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800754e:	4b69      	ldr	r3, [pc, #420]	; (80076f4 <HAL_RCC_ClockConfig+0x21c>)
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	b2d2      	uxtb	r2, r2
 8007554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007556:	4b67      	ldr	r3, [pc, #412]	; (80076f4 <HAL_RCC_ClockConfig+0x21c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d001      	beq.n	8007568 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e136      	b.n	80077d6 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d049      	beq.n	8007608 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d005      	beq.n	800758c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007580:	4b5d      	ldr	r3, [pc, #372]	; (80076f8 <HAL_RCC_ClockConfig+0x220>)
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	4a5c      	ldr	r2, [pc, #368]	; (80076f8 <HAL_RCC_ClockConfig+0x220>)
 8007586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800758a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007598:	4b57      	ldr	r3, [pc, #348]	; (80076f8 <HAL_RCC_ClockConfig+0x220>)
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	4a56      	ldr	r2, [pc, #344]	; (80076f8 <HAL_RCC_ClockConfig+0x220>)
 800759e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d024      	beq.n	80075f6 <HAL_RCC_ClockConfig+0x11e>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	2b80      	cmp	r3, #128	; 0x80
 80075b2:	d020      	beq.n	80075f6 <HAL_RCC_ClockConfig+0x11e>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	2b90      	cmp	r3, #144	; 0x90
 80075ba:	d01c      	beq.n	80075f6 <HAL_RCC_ClockConfig+0x11e>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	2ba0      	cmp	r3, #160	; 0xa0
 80075c2:	d018      	beq.n	80075f6 <HAL_RCC_ClockConfig+0x11e>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	2bb0      	cmp	r3, #176	; 0xb0
 80075ca:	d014      	beq.n	80075f6 <HAL_RCC_ClockConfig+0x11e>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	2bc0      	cmp	r3, #192	; 0xc0
 80075d2:	d010      	beq.n	80075f6 <HAL_RCC_ClockConfig+0x11e>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	2bd0      	cmp	r3, #208	; 0xd0
 80075da:	d00c      	beq.n	80075f6 <HAL_RCC_ClockConfig+0x11e>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	2be0      	cmp	r3, #224	; 0xe0
 80075e2:	d008      	beq.n	80075f6 <HAL_RCC_ClockConfig+0x11e>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	2bf0      	cmp	r3, #240	; 0xf0
 80075ea:	d004      	beq.n	80075f6 <HAL_RCC_ClockConfig+0x11e>
 80075ec:	f240 217e 	movw	r1, #638	; 0x27e
 80075f0:	483f      	ldr	r0, [pc, #252]	; (80076f0 <HAL_RCC_ClockConfig+0x218>)
 80075f2:	f7fa fb96 	bl	8001d22 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075f6:	4b40      	ldr	r3, [pc, #256]	; (80076f8 <HAL_RCC_ClockConfig+0x220>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	493d      	ldr	r1, [pc, #244]	; (80076f8 <HAL_RCC_ClockConfig+0x220>)
 8007604:	4313      	orrs	r3, r2
 8007606:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d059      	beq.n	80076c8 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d010      	beq.n	800763e <HAL_RCC_ClockConfig+0x166>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d00c      	beq.n	800763e <HAL_RCC_ClockConfig+0x166>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	2b02      	cmp	r3, #2
 800762a:	d008      	beq.n	800763e <HAL_RCC_ClockConfig+0x166>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	2b03      	cmp	r3, #3
 8007632:	d004      	beq.n	800763e <HAL_RCC_ClockConfig+0x166>
 8007634:	f240 2185 	movw	r1, #645	; 0x285
 8007638:	482d      	ldr	r0, [pc, #180]	; (80076f0 <HAL_RCC_ClockConfig+0x218>)
 800763a:	f7fa fb72 	bl	8001d22 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d107      	bne.n	8007656 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007646:	4b2c      	ldr	r3, [pc, #176]	; (80076f8 <HAL_RCC_ClockConfig+0x220>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d119      	bne.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e0bf      	b.n	80077d6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d003      	beq.n	8007666 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007662:	2b03      	cmp	r3, #3
 8007664:	d107      	bne.n	8007676 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007666:	4b24      	ldr	r3, [pc, #144]	; (80076f8 <HAL_RCC_ClockConfig+0x220>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d109      	bne.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e0af      	b.n	80077d6 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007676:	4b20      	ldr	r3, [pc, #128]	; (80076f8 <HAL_RCC_ClockConfig+0x220>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e0a7      	b.n	80077d6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007686:	4b1c      	ldr	r3, [pc, #112]	; (80076f8 <HAL_RCC_ClockConfig+0x220>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f023 0203 	bic.w	r2, r3, #3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	4919      	ldr	r1, [pc, #100]	; (80076f8 <HAL_RCC_ClockConfig+0x220>)
 8007694:	4313      	orrs	r3, r2
 8007696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007698:	f7fc f8d6 	bl	8003848 <HAL_GetTick>
 800769c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800769e:	e00a      	b.n	80076b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076a0:	f7fc f8d2 	bl	8003848 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d901      	bls.n	80076b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e08f      	b.n	80077d6 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076b6:	4b10      	ldr	r3, [pc, #64]	; (80076f8 <HAL_RCC_ClockConfig+0x220>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 020c 	and.w	r2, r3, #12
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d1eb      	bne.n	80076a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076c8:	4b0a      	ldr	r3, [pc, #40]	; (80076f4 <HAL_RCC_ClockConfig+0x21c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0307 	and.w	r3, r3, #7
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d212      	bcs.n	80076fc <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076d6:	4b07      	ldr	r3, [pc, #28]	; (80076f4 <HAL_RCC_ClockConfig+0x21c>)
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	b2d2      	uxtb	r2, r2
 80076dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076de:	4b05      	ldr	r3, [pc, #20]	; (80076f4 <HAL_RCC_ClockConfig+0x21c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0307 	and.w	r3, r3, #7
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d007      	beq.n	80076fc <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e072      	b.n	80077d6 <HAL_RCC_ClockConfig+0x2fe>
 80076f0:	080137bc 	.word	0x080137bc
 80076f4:	40023c00 	.word	0x40023c00
 80076f8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d025      	beq.n	8007754 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d018      	beq.n	8007742 <HAL_RCC_ClockConfig+0x26a>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007718:	d013      	beq.n	8007742 <HAL_RCC_ClockConfig+0x26a>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007722:	d00e      	beq.n	8007742 <HAL_RCC_ClockConfig+0x26a>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800772c:	d009      	beq.n	8007742 <HAL_RCC_ClockConfig+0x26a>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007736:	d004      	beq.n	8007742 <HAL_RCC_ClockConfig+0x26a>
 8007738:	f240 21c3 	movw	r1, #707	; 0x2c3
 800773c:	4828      	ldr	r0, [pc, #160]	; (80077e0 <HAL_RCC_ClockConfig+0x308>)
 800773e:	f7fa faf0 	bl	8001d22 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007742:	4b28      	ldr	r3, [pc, #160]	; (80077e4 <HAL_RCC_ClockConfig+0x30c>)
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	4925      	ldr	r1, [pc, #148]	; (80077e4 <HAL_RCC_ClockConfig+0x30c>)
 8007750:	4313      	orrs	r3, r2
 8007752:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0308 	and.w	r3, r3, #8
 800775c:	2b00      	cmp	r3, #0
 800775e:	d026      	beq.n	80077ae <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d018      	beq.n	800779a <HAL_RCC_ClockConfig+0x2c2>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007770:	d013      	beq.n	800779a <HAL_RCC_ClockConfig+0x2c2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800777a:	d00e      	beq.n	800779a <HAL_RCC_ClockConfig+0x2c2>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007784:	d009      	beq.n	800779a <HAL_RCC_ClockConfig+0x2c2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800778e:	d004      	beq.n	800779a <HAL_RCC_ClockConfig+0x2c2>
 8007790:	f240 21ca 	movw	r1, #714	; 0x2ca
 8007794:	4812      	ldr	r0, [pc, #72]	; (80077e0 <HAL_RCC_ClockConfig+0x308>)
 8007796:	f7fa fac4 	bl	8001d22 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800779a:	4b12      	ldr	r3, [pc, #72]	; (80077e4 <HAL_RCC_ClockConfig+0x30c>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	00db      	lsls	r3, r3, #3
 80077a8:	490e      	ldr	r1, [pc, #56]	; (80077e4 <HAL_RCC_ClockConfig+0x30c>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80077ae:	f000 f821 	bl	80077f4 <HAL_RCC_GetSysClockFreq>
 80077b2:	4602      	mov	r2, r0
 80077b4:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <HAL_RCC_ClockConfig+0x30c>)
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	091b      	lsrs	r3, r3, #4
 80077ba:	f003 030f 	and.w	r3, r3, #15
 80077be:	490a      	ldr	r1, [pc, #40]	; (80077e8 <HAL_RCC_ClockConfig+0x310>)
 80077c0:	5ccb      	ldrb	r3, [r1, r3]
 80077c2:	fa22 f303 	lsr.w	r3, r2, r3
 80077c6:	4a09      	ldr	r2, [pc, #36]	; (80077ec <HAL_RCC_ClockConfig+0x314>)
 80077c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80077ca:	4b09      	ldr	r3, [pc, #36]	; (80077f0 <HAL_RCC_ClockConfig+0x318>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fa fb8c 	bl	8001eec <HAL_InitTick>

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	080137bc 	.word	0x080137bc
 80077e4:	40023800 	.word	0x40023800
 80077e8:	08013a68 	.word	0x08013a68
 80077ec:	20000018 	.word	0x20000018
 80077f0:	2000002c 	.word	0x2000002c

080077f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077f8:	b090      	sub	sp, #64	; 0x40
 80077fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007800:	2300      	movs	r3, #0
 8007802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007804:	2300      	movs	r3, #0
 8007806:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800780c:	4b59      	ldr	r3, [pc, #356]	; (8007974 <HAL_RCC_GetSysClockFreq+0x180>)
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f003 030c 	and.w	r3, r3, #12
 8007814:	2b08      	cmp	r3, #8
 8007816:	d00d      	beq.n	8007834 <HAL_RCC_GetSysClockFreq+0x40>
 8007818:	2b08      	cmp	r3, #8
 800781a:	f200 80a1 	bhi.w	8007960 <HAL_RCC_GetSysClockFreq+0x16c>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <HAL_RCC_GetSysClockFreq+0x34>
 8007822:	2b04      	cmp	r3, #4
 8007824:	d003      	beq.n	800782e <HAL_RCC_GetSysClockFreq+0x3a>
 8007826:	e09b      	b.n	8007960 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007828:	4b53      	ldr	r3, [pc, #332]	; (8007978 <HAL_RCC_GetSysClockFreq+0x184>)
 800782a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800782c:	e09b      	b.n	8007966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800782e:	4b53      	ldr	r3, [pc, #332]	; (800797c <HAL_RCC_GetSysClockFreq+0x188>)
 8007830:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007832:	e098      	b.n	8007966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007834:	4b4f      	ldr	r3, [pc, #316]	; (8007974 <HAL_RCC_GetSysClockFreq+0x180>)
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800783c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800783e:	4b4d      	ldr	r3, [pc, #308]	; (8007974 <HAL_RCC_GetSysClockFreq+0x180>)
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d028      	beq.n	800789c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800784a:	4b4a      	ldr	r3, [pc, #296]	; (8007974 <HAL_RCC_GetSysClockFreq+0x180>)
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	099b      	lsrs	r3, r3, #6
 8007850:	2200      	movs	r2, #0
 8007852:	623b      	str	r3, [r7, #32]
 8007854:	627a      	str	r2, [r7, #36]	; 0x24
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800785c:	2100      	movs	r1, #0
 800785e:	4b47      	ldr	r3, [pc, #284]	; (800797c <HAL_RCC_GetSysClockFreq+0x188>)
 8007860:	fb03 f201 	mul.w	r2, r3, r1
 8007864:	2300      	movs	r3, #0
 8007866:	fb00 f303 	mul.w	r3, r0, r3
 800786a:	4413      	add	r3, r2
 800786c:	4a43      	ldr	r2, [pc, #268]	; (800797c <HAL_RCC_GetSysClockFreq+0x188>)
 800786e:	fba0 1202 	umull	r1, r2, r0, r2
 8007872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007874:	460a      	mov	r2, r1
 8007876:	62ba      	str	r2, [r7, #40]	; 0x28
 8007878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800787a:	4413      	add	r3, r2
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800787e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007880:	2200      	movs	r2, #0
 8007882:	61bb      	str	r3, [r7, #24]
 8007884:	61fa      	str	r2, [r7, #28]
 8007886:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800788a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800788e:	f7f9 fa03 	bl	8000c98 <__aeabi_uldivmod>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4613      	mov	r3, r2
 8007898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800789a:	e053      	b.n	8007944 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800789c:	4b35      	ldr	r3, [pc, #212]	; (8007974 <HAL_RCC_GetSysClockFreq+0x180>)
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	099b      	lsrs	r3, r3, #6
 80078a2:	2200      	movs	r2, #0
 80078a4:	613b      	str	r3, [r7, #16]
 80078a6:	617a      	str	r2, [r7, #20]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80078ae:	f04f 0b00 	mov.w	fp, #0
 80078b2:	4652      	mov	r2, sl
 80078b4:	465b      	mov	r3, fp
 80078b6:	f04f 0000 	mov.w	r0, #0
 80078ba:	f04f 0100 	mov.w	r1, #0
 80078be:	0159      	lsls	r1, r3, #5
 80078c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078c4:	0150      	lsls	r0, r2, #5
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	ebb2 080a 	subs.w	r8, r2, sl
 80078ce:	eb63 090b 	sbc.w	r9, r3, fp
 80078d2:	f04f 0200 	mov.w	r2, #0
 80078d6:	f04f 0300 	mov.w	r3, #0
 80078da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80078de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80078e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80078e6:	ebb2 0408 	subs.w	r4, r2, r8
 80078ea:	eb63 0509 	sbc.w	r5, r3, r9
 80078ee:	f04f 0200 	mov.w	r2, #0
 80078f2:	f04f 0300 	mov.w	r3, #0
 80078f6:	00eb      	lsls	r3, r5, #3
 80078f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078fc:	00e2      	lsls	r2, r4, #3
 80078fe:	4614      	mov	r4, r2
 8007900:	461d      	mov	r5, r3
 8007902:	eb14 030a 	adds.w	r3, r4, sl
 8007906:	603b      	str	r3, [r7, #0]
 8007908:	eb45 030b 	adc.w	r3, r5, fp
 800790c:	607b      	str	r3, [r7, #4]
 800790e:	f04f 0200 	mov.w	r2, #0
 8007912:	f04f 0300 	mov.w	r3, #0
 8007916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800791a:	4629      	mov	r1, r5
 800791c:	028b      	lsls	r3, r1, #10
 800791e:	4621      	mov	r1, r4
 8007920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007924:	4621      	mov	r1, r4
 8007926:	028a      	lsls	r2, r1, #10
 8007928:	4610      	mov	r0, r2
 800792a:	4619      	mov	r1, r3
 800792c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792e:	2200      	movs	r2, #0
 8007930:	60bb      	str	r3, [r7, #8]
 8007932:	60fa      	str	r2, [r7, #12]
 8007934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007938:	f7f9 f9ae 	bl	8000c98 <__aeabi_uldivmod>
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	4613      	mov	r3, r2
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007944:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <HAL_RCC_GetSysClockFreq+0x180>)
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	0c1b      	lsrs	r3, r3, #16
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	3301      	adds	r3, #1
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007954:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007958:	fbb2 f3f3 	udiv	r3, r2, r3
 800795c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800795e:	e002      	b.n	8007966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007960:	4b05      	ldr	r3, [pc, #20]	; (8007978 <HAL_RCC_GetSysClockFreq+0x184>)
 8007962:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007968:	4618      	mov	r0, r3
 800796a:	3740      	adds	r7, #64	; 0x40
 800796c:	46bd      	mov	sp, r7
 800796e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007972:	bf00      	nop
 8007974:	40023800 	.word	0x40023800
 8007978:	00f42400 	.word	0x00f42400
 800797c:	017d7840 	.word	0x017d7840

08007980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007984:	4b03      	ldr	r3, [pc, #12]	; (8007994 <HAL_RCC_GetHCLKFreq+0x14>)
 8007986:	681b      	ldr	r3, [r3, #0]
}
 8007988:	4618      	mov	r0, r3
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	20000018 	.word	0x20000018

08007998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800799c:	f7ff fff0 	bl	8007980 <HAL_RCC_GetHCLKFreq>
 80079a0:	4602      	mov	r2, r0
 80079a2:	4b05      	ldr	r3, [pc, #20]	; (80079b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	0a9b      	lsrs	r3, r3, #10
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	4903      	ldr	r1, [pc, #12]	; (80079bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80079ae:	5ccb      	ldrb	r3, [r1, r3]
 80079b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	40023800 	.word	0x40023800
 80079bc:	08013a78 	.word	0x08013a78

080079c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80079c4:	f7ff ffdc 	bl	8007980 <HAL_RCC_GetHCLKFreq>
 80079c8:	4602      	mov	r2, r0
 80079ca:	4b05      	ldr	r3, [pc, #20]	; (80079e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	0b5b      	lsrs	r3, r3, #13
 80079d0:	f003 0307 	and.w	r3, r3, #7
 80079d4:	4903      	ldr	r1, [pc, #12]	; (80079e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079d6:	5ccb      	ldrb	r3, [r1, r3]
 80079d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079dc:	4618      	mov	r0, r3
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	40023800 	.word	0x40023800
 80079e4:	08013a78 	.word	0x08013a78

080079e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	220f      	movs	r2, #15
 80079f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079f8:	4b12      	ldr	r3, [pc, #72]	; (8007a44 <HAL_RCC_GetClockConfig+0x5c>)
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f003 0203 	and.w	r2, r3, #3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007a04:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <HAL_RCC_GetClockConfig+0x5c>)
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007a10:	4b0c      	ldr	r3, [pc, #48]	; (8007a44 <HAL_RCC_GetClockConfig+0x5c>)
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007a1c:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <HAL_RCC_GetClockConfig+0x5c>)
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	08db      	lsrs	r3, r3, #3
 8007a22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a2a:	4b07      	ldr	r3, [pc, #28]	; (8007a48 <HAL_RCC_GetClockConfig+0x60>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0207 	and.w	r2, r3, #7
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	601a      	str	r2, [r3, #0]
}
 8007a36:	bf00      	nop
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	40023800 	.word	0x40023800
 8007a48:	40023c00 	.word	0x40023c00

08007a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e184      	b.n	8007d68 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a72      	ldr	r2, [pc, #456]	; (8007c2c <HAL_SPI_Init+0x1e0>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d013      	beq.n	8007a90 <HAL_SPI_Init+0x44>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a70      	ldr	r2, [pc, #448]	; (8007c30 <HAL_SPI_Init+0x1e4>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d00e      	beq.n	8007a90 <HAL_SPI_Init+0x44>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a6f      	ldr	r2, [pc, #444]	; (8007c34 <HAL_SPI_Init+0x1e8>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d009      	beq.n	8007a90 <HAL_SPI_Init+0x44>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a6d      	ldr	r2, [pc, #436]	; (8007c38 <HAL_SPI_Init+0x1ec>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d004      	beq.n	8007a90 <HAL_SPI_Init+0x44>
 8007a86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a8a:	486c      	ldr	r0, [pc, #432]	; (8007c3c <HAL_SPI_Init+0x1f0>)
 8007a8c:	f7fa f949 	bl	8001d22 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d009      	beq.n	8007aac <HAL_SPI_Init+0x60>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aa0:	d004      	beq.n	8007aac <HAL_SPI_Init+0x60>
 8007aa2:	f240 1141 	movw	r1, #321	; 0x141
 8007aa6:	4865      	ldr	r0, [pc, #404]	; (8007c3c <HAL_SPI_Init+0x1f0>)
 8007aa8:	f7fa f93b 	bl	8001d22 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00e      	beq.n	8007ad2 <HAL_SPI_Init+0x86>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007abc:	d009      	beq.n	8007ad2 <HAL_SPI_Init+0x86>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ac6:	d004      	beq.n	8007ad2 <HAL_SPI_Init+0x86>
 8007ac8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007acc:	485b      	ldr	r0, [pc, #364]	; (8007c3c <HAL_SPI_Init+0x1f0>)
 8007ace:	f7fa f928 	bl	8001d22 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ada:	d008      	beq.n	8007aee <HAL_SPI_Init+0xa2>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <HAL_SPI_Init+0xa2>
 8007ae4:	f240 1143 	movw	r1, #323	; 0x143
 8007ae8:	4854      	ldr	r0, [pc, #336]	; (8007c3c <HAL_SPI_Init+0x1f0>)
 8007aea:	f7fa f91a 	bl	8001d22 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af6:	d00d      	beq.n	8007b14 <HAL_SPI_Init+0xc8>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d009      	beq.n	8007b14 <HAL_SPI_Init+0xc8>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b08:	d004      	beq.n	8007b14 <HAL_SPI_Init+0xc8>
 8007b0a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007b0e:	484b      	ldr	r0, [pc, #300]	; (8007c3c <HAL_SPI_Init+0x1f0>)
 8007b10:	f7fa f907 	bl	8001d22 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d020      	beq.n	8007b5e <HAL_SPI_Init+0x112>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	2b08      	cmp	r3, #8
 8007b22:	d01c      	beq.n	8007b5e <HAL_SPI_Init+0x112>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	2b10      	cmp	r3, #16
 8007b2a:	d018      	beq.n	8007b5e <HAL_SPI_Init+0x112>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	2b18      	cmp	r3, #24
 8007b32:	d014      	beq.n	8007b5e <HAL_SPI_Init+0x112>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	2b20      	cmp	r3, #32
 8007b3a:	d010      	beq.n	8007b5e <HAL_SPI_Init+0x112>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	2b28      	cmp	r3, #40	; 0x28
 8007b42:	d00c      	beq.n	8007b5e <HAL_SPI_Init+0x112>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	2b30      	cmp	r3, #48	; 0x30
 8007b4a:	d008      	beq.n	8007b5e <HAL_SPI_Init+0x112>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	2b38      	cmp	r3, #56	; 0x38
 8007b52:	d004      	beq.n	8007b5e <HAL_SPI_Init+0x112>
 8007b54:	f240 1145 	movw	r1, #325	; 0x145
 8007b58:	4838      	ldr	r0, [pc, #224]	; (8007c3c <HAL_SPI_Init+0x1f0>)
 8007b5a:	f7fa f8e2 	bl	8001d22 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d008      	beq.n	8007b78 <HAL_SPI_Init+0x12c>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	2b80      	cmp	r3, #128	; 0x80
 8007b6c:	d004      	beq.n	8007b78 <HAL_SPI_Init+0x12c>
 8007b6e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007b72:	4832      	ldr	r0, [pc, #200]	; (8007c3c <HAL_SPI_Init+0x1f0>)
 8007b74:	f7fa f8d5 	bl	8001d22 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d008      	beq.n	8007b92 <HAL_SPI_Init+0x146>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	2b10      	cmp	r3, #16
 8007b86:	d004      	beq.n	8007b92 <HAL_SPI_Init+0x146>
 8007b88:	f240 1147 	movw	r1, #327	; 0x147
 8007b8c:	482b      	ldr	r0, [pc, #172]	; (8007c3c <HAL_SPI_Init+0x1f0>)
 8007b8e:	f7fa f8c8 	bl	8001d22 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d152      	bne.n	8007c40 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d008      	beq.n	8007bb4 <HAL_SPI_Init+0x168>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d004      	beq.n	8007bb4 <HAL_SPI_Init+0x168>
 8007baa:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8007bae:	4823      	ldr	r0, [pc, #140]	; (8007c3c <HAL_SPI_Init+0x1f0>)
 8007bb0:	f7fa f8b7 	bl	8001d22 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d008      	beq.n	8007bce <HAL_SPI_Init+0x182>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d004      	beq.n	8007bce <HAL_SPI_Init+0x182>
 8007bc4:	f240 114b 	movw	r1, #331	; 0x14b
 8007bc8:	481c      	ldr	r0, [pc, #112]	; (8007c3c <HAL_SPI_Init+0x1f0>)
 8007bca:	f7fa f8aa 	bl	8001d22 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bd6:	d125      	bne.n	8007c24 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d05a      	beq.n	8007c96 <HAL_SPI_Init+0x24a>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	d056      	beq.n	8007c96 <HAL_SPI_Init+0x24a>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	69db      	ldr	r3, [r3, #28]
 8007bec:	2b10      	cmp	r3, #16
 8007bee:	d052      	beq.n	8007c96 <HAL_SPI_Init+0x24a>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	2b18      	cmp	r3, #24
 8007bf6:	d04e      	beq.n	8007c96 <HAL_SPI_Init+0x24a>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	2b20      	cmp	r3, #32
 8007bfe:	d04a      	beq.n	8007c96 <HAL_SPI_Init+0x24a>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	2b28      	cmp	r3, #40	; 0x28
 8007c06:	d046      	beq.n	8007c96 <HAL_SPI_Init+0x24a>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	2b30      	cmp	r3, #48	; 0x30
 8007c0e:	d042      	beq.n	8007c96 <HAL_SPI_Init+0x24a>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	2b38      	cmp	r3, #56	; 0x38
 8007c16:	d03e      	beq.n	8007c96 <HAL_SPI_Init+0x24a>
 8007c18:	f240 114f 	movw	r1, #335	; 0x14f
 8007c1c:	4807      	ldr	r0, [pc, #28]	; (8007c3c <HAL_SPI_Init+0x1f0>)
 8007c1e:	f7fa f880 	bl	8001d22 <assert_failed>
 8007c22:	e038      	b.n	8007c96 <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	61da      	str	r2, [r3, #28]
 8007c2a:	e034      	b.n	8007c96 <HAL_SPI_Init+0x24a>
 8007c2c:	40013000 	.word	0x40013000
 8007c30:	40003800 	.word	0x40003800
 8007c34:	40003c00 	.word	0x40003c00
 8007c38:	40013400 	.word	0x40013400
 8007c3c:	08013830 	.word	0x08013830
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d020      	beq.n	8007c8a <HAL_SPI_Init+0x23e>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d01c      	beq.n	8007c8a <HAL_SPI_Init+0x23e>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	2b10      	cmp	r3, #16
 8007c56:	d018      	beq.n	8007c8a <HAL_SPI_Init+0x23e>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	2b18      	cmp	r3, #24
 8007c5e:	d014      	beq.n	8007c8a <HAL_SPI_Init+0x23e>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	69db      	ldr	r3, [r3, #28]
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	d010      	beq.n	8007c8a <HAL_SPI_Init+0x23e>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	2b28      	cmp	r3, #40	; 0x28
 8007c6e:	d00c      	beq.n	8007c8a <HAL_SPI_Init+0x23e>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	69db      	ldr	r3, [r3, #28]
 8007c74:	2b30      	cmp	r3, #48	; 0x30
 8007c76:	d008      	beq.n	8007c8a <HAL_SPI_Init+0x23e>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	2b38      	cmp	r3, #56	; 0x38
 8007c7e:	d004      	beq.n	8007c8a <HAL_SPI_Init+0x23e>
 8007c80:	f240 1159 	movw	r1, #345	; 0x159
 8007c84:	483a      	ldr	r0, [pc, #232]	; (8007d70 <HAL_SPI_Init+0x324>)
 8007c86:	f7fa f84c 	bl	8001d22 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d106      	bne.n	8007cb6 <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7fa f877 	bl	8001da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2202      	movs	r2, #2
 8007cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ccc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d06:	431a      	orrs	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d10:	431a      	orrs	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d1a:	ea42 0103 	orr.w	r1, r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	0c1b      	lsrs	r3, r3, #16
 8007d34:	f003 0104 	and.w	r1, r3, #4
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	f003 0210 	and.w	r2, r3, #16
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	69da      	ldr	r2, [r3, #28]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	08013830 	.word	0x08013830

08007d74 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e033      	b.n	8007dee <HAL_SPI_DeInit+0x7a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a1b      	ldr	r2, [pc, #108]	; (8007df8 <HAL_SPI_DeInit+0x84>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d013      	beq.n	8007db8 <HAL_SPI_DeInit+0x44>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a19      	ldr	r2, [pc, #100]	; (8007dfc <HAL_SPI_DeInit+0x88>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00e      	beq.n	8007db8 <HAL_SPI_DeInit+0x44>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a18      	ldr	r2, [pc, #96]	; (8007e00 <HAL_SPI_DeInit+0x8c>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d009      	beq.n	8007db8 <HAL_SPI_DeInit+0x44>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a16      	ldr	r2, [pc, #88]	; (8007e04 <HAL_SPI_DeInit+0x90>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d004      	beq.n	8007db8 <HAL_SPI_DeInit+0x44>
 8007dae:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8007db2:	4815      	ldr	r0, [pc, #84]	; (8007e08 <HAL_SPI_DeInit+0x94>)
 8007db4:	f7f9 ffb5 	bl	8001d22 <assert_failed>

  hspi->State = HAL_SPI_STATE_BUSY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dce:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7fa f837 	bl	8001e44 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	40013000 	.word	0x40013000
 8007dfc:	40003800 	.word	0x40003800
 8007e00:	40003c00 	.word	0x40003c00
 8007e04:	40013400 	.word	0x40013400
 8007e08:	08013830 	.word	0x08013830

08007e0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d009      	beq.n	8007e3c <HAL_SPI_Transmit+0x30>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e30:	d004      	beq.n	8007e3c <HAL_SPI_Transmit+0x30>
 8007e32:	f44f 7142 	mov.w	r1, #776	; 0x308
 8007e36:	4880      	ldr	r0, [pc, #512]	; (8008038 <HAL_SPI_Transmit+0x22c>)
 8007e38:	f7f9 ff73 	bl	8001d22 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d101      	bne.n	8007e4a <HAL_SPI_Transmit+0x3e>
 8007e46:	2302      	movs	r3, #2
 8007e48:	e128      	b.n	800809c <HAL_SPI_Transmit+0x290>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e52:	f7fb fcf9 	bl	8003848 <HAL_GetTick>
 8007e56:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007e58:	88fb      	ldrh	r3, [r7, #6]
 8007e5a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d002      	beq.n	8007e6e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8007e68:	2302      	movs	r3, #2
 8007e6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007e6c:	e10d      	b.n	800808a <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <HAL_SPI_Transmit+0x6e>
 8007e74:	88fb      	ldrh	r3, [r7, #6]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d102      	bne.n	8007e80 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007e7e:	e104      	b.n	800808a <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2203      	movs	r2, #3
 8007e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	88fa      	ldrh	r2, [r7, #6]
 8007e98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	88fa      	ldrh	r2, [r7, #6]
 8007e9e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec6:	d10f      	bne.n	8007ee8 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ed6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ee6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef2:	2b40      	cmp	r3, #64	; 0x40
 8007ef4:	d007      	beq.n	8007f06 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f0e:	d14b      	bne.n	8007fa8 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d002      	beq.n	8007f1e <HAL_SPI_Transmit+0x112>
 8007f18:	8afb      	ldrh	r3, [r7, #22]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d13e      	bne.n	8007f9c <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f22:	881a      	ldrh	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2e:	1c9a      	adds	r2, r3, #2
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007f42:	e02b      	b.n	8007f9c <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d112      	bne.n	8007f78 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f56:	881a      	ldrh	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f62:	1c9a      	adds	r2, r3, #2
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	86da      	strh	r2, [r3, #54]	; 0x36
 8007f76:	e011      	b.n	8007f9c <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f78:	f7fb fc66 	bl	8003848 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d803      	bhi.n	8007f90 <HAL_SPI_Transmit+0x184>
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8e:	d102      	bne.n	8007f96 <HAL_SPI_Transmit+0x18a>
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d102      	bne.n	8007f9c <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f9a:	e076      	b.n	800808a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1ce      	bne.n	8007f44 <HAL_SPI_Transmit+0x138>
 8007fa6:	e04e      	b.n	8008046 <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <HAL_SPI_Transmit+0x1aa>
 8007fb0:	8afb      	ldrh	r3, [r7, #22]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d142      	bne.n	800803c <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	330c      	adds	r3, #12
 8007fc0:	7812      	ldrb	r2, [r2, #0]
 8007fc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc8:	1c5a      	adds	r2, r3, #1
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007fdc:	e02e      	b.n	800803c <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d113      	bne.n	8008014 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	330c      	adds	r3, #12
 8007ff6:	7812      	ldrb	r2, [r2, #0]
 8007ff8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008008:	b29b      	uxth	r3, r3
 800800a:	3b01      	subs	r3, #1
 800800c:	b29a      	uxth	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	86da      	strh	r2, [r3, #54]	; 0x36
 8008012:	e013      	b.n	800803c <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008014:	f7fb fc18 	bl	8003848 <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	429a      	cmp	r2, r3
 8008022:	d803      	bhi.n	800802c <HAL_SPI_Transmit+0x220>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802a:	d102      	bne.n	8008032 <HAL_SPI_Transmit+0x226>
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d104      	bne.n	800803c <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008036:	e028      	b.n	800808a <HAL_SPI_Transmit+0x27e>
 8008038:	08013830 	.word	0x08013830
    while (hspi->TxXferCount > 0U)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008040:	b29b      	uxth	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1cb      	bne.n	8007fde <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f000 f9d0 	bl	80083f0 <SPI_EndRxTxTransaction>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d002      	beq.n	800805c <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2220      	movs	r2, #32
 800805a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10a      	bne.n	800807a <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008064:	2300      	movs	r3, #0
 8008066:	613b      	str	r3, [r7, #16]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	613b      	str	r3, [r7, #16]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	613b      	str	r3, [r7, #16]
 8008078:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	77fb      	strb	r3, [r7, #31]
 8008086:	e000      	b.n	800808a <HAL_SPI_Transmit+0x27e>
  }

error:
 8008088:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800809a:	7ffb      	ldrb	r3, [r7, #31]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3720      	adds	r7, #32
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	099b      	lsrs	r3, r3, #6
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10f      	bne.n	80080e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00a      	beq.n	80080e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	099b      	lsrs	r3, r3, #6
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d004      	beq.n	80080e8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
    return;
 80080e6:	e0d7      	b.n	8008298 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	085b      	lsrs	r3, r3, #1
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <HAL_SPI_IRQHandler+0x66>
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	09db      	lsrs	r3, r3, #7
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d004      	beq.n	800810a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	4798      	blx	r3
    return;
 8008108:	e0c6      	b.n	8008298 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	095b      	lsrs	r3, r3, #5
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10c      	bne.n	8008130 <HAL_SPI_IRQHandler+0x8c>
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	099b      	lsrs	r3, r3, #6
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	0a1b      	lsrs	r3, r3, #8
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 80b4 	beq.w	8008298 <HAL_SPI_IRQHandler+0x1f4>
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	095b      	lsrs	r3, r3, #5
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 80ad 	beq.w	8008298 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	099b      	lsrs	r3, r3, #6
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d023      	beq.n	8008192 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b03      	cmp	r3, #3
 8008154:	d011      	beq.n	800817a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800815a:	f043 0204 	orr.w	r2, r3, #4
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008162:	2300      	movs	r3, #0
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	617b      	str	r3, [r7, #20]
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	e00b      	b.n	8008192 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800817a:	2300      	movs	r3, #0
 800817c:	613b      	str	r3, [r7, #16]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	613b      	str	r3, [r7, #16]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	613b      	str	r3, [r7, #16]
 800818e:	693b      	ldr	r3, [r7, #16]
        return;
 8008190:	e082      	b.n	8008298 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	095b      	lsrs	r3, r3, #5
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	d014      	beq.n	80081c8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a2:	f043 0201 	orr.w	r2, r3, #1
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80081aa:	2300      	movs	r3, #0
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	0a1b      	lsrs	r3, r3, #8
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00c      	beq.n	80081ee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d8:	f043 0208 	orr.w	r2, r3, #8
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80081e0:	2300      	movs	r3, #0
 80081e2:	60bb      	str	r3, [r7, #8]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	60bb      	str	r3, [r7, #8]
 80081ec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d04f      	beq.n	8008296 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008204:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	f003 0302 	and.w	r3, r3, #2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d104      	bne.n	8008222 <HAL_SPI_IRQHandler+0x17e>
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d034      	beq.n	800828c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0203 	bic.w	r2, r2, #3
 8008230:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d011      	beq.n	800825e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800823e:	4a18      	ldr	r2, [pc, #96]	; (80082a0 <HAL_SPI_IRQHandler+0x1fc>)
 8008240:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008246:	4618      	mov	r0, r3
 8008248:	f7fb fcec 	bl	8003c24 <HAL_DMA_Abort_IT>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d005      	beq.n	800825e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008256:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008262:	2b00      	cmp	r3, #0
 8008264:	d016      	beq.n	8008294 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800826a:	4a0d      	ldr	r2, [pc, #52]	; (80082a0 <HAL_SPI_IRQHandler+0x1fc>)
 800826c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008272:	4618      	mov	r0, r3
 8008274:	f7fb fcd6 	bl	8003c24 <HAL_DMA_Abort_IT>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00a      	beq.n	8008294 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008282:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800828a:	e003      	b.n	8008294 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f809 	bl	80082a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008292:	e000      	b.n	8008296 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008294:	bf00      	nop
    return;
 8008296:	bf00      	nop
  }
}
 8008298:	3720      	adds	r7, #32
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	080082b9 	.word	0x080082b9

080082a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f7ff ffe6 	bl	80082a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082d8:	bf00      	nop
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b088      	sub	sp, #32
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	4613      	mov	r3, r2
 80082ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082f0:	f7fb faaa 	bl	8003848 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	1a9b      	subs	r3, r3, r2
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	4413      	add	r3, r2
 80082fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008300:	f7fb faa2 	bl	8003848 <HAL_GetTick>
 8008304:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008306:	4b39      	ldr	r3, [pc, #228]	; (80083ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	015b      	lsls	r3, r3, #5
 800830c:	0d1b      	lsrs	r3, r3, #20
 800830e:	69fa      	ldr	r2, [r7, #28]
 8008310:	fb02 f303 	mul.w	r3, r2, r3
 8008314:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008316:	e054      	b.n	80083c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831e:	d050      	beq.n	80083c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008320:	f7fb fa92 	bl	8003848 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	69fa      	ldr	r2, [r7, #28]
 800832c:	429a      	cmp	r2, r3
 800832e:	d902      	bls.n	8008336 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d13d      	bne.n	80083b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008344:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800834e:	d111      	bne.n	8008374 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008358:	d004      	beq.n	8008364 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008362:	d107      	bne.n	8008374 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008372:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800837c:	d10f      	bne.n	800839e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800839c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e017      	b.n	80083e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	3b01      	subs	r3, #1
 80083c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	4013      	ands	r3, r2
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	bf0c      	ite	eq
 80083d2:	2301      	moveq	r3, #1
 80083d4:	2300      	movne	r3, #0
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	461a      	mov	r2, r3
 80083da:	79fb      	ldrb	r3, [r7, #7]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d19b      	bne.n	8008318 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3720      	adds	r7, #32
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20000018 	.word	0x20000018

080083f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af02      	add	r7, sp, #8
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80083fc:	4b1b      	ldr	r3, [pc, #108]	; (800846c <SPI_EndRxTxTransaction+0x7c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a1b      	ldr	r2, [pc, #108]	; (8008470 <SPI_EndRxTxTransaction+0x80>)
 8008402:	fba2 2303 	umull	r2, r3, r2, r3
 8008406:	0d5b      	lsrs	r3, r3, #21
 8008408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800840c:	fb02 f303 	mul.w	r3, r2, r3
 8008410:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800841a:	d112      	bne.n	8008442 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	2200      	movs	r2, #0
 8008424:	2180      	movs	r1, #128	; 0x80
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f7ff ff5a 	bl	80082e0 <SPI_WaitFlagStateUntilTimeout>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d016      	beq.n	8008460 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008436:	f043 0220 	orr.w	r2, r3, #32
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e00f      	b.n	8008462 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00a      	beq.n	800845e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	3b01      	subs	r3, #1
 800844c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008458:	2b80      	cmp	r3, #128	; 0x80
 800845a:	d0f2      	beq.n	8008442 <SPI_EndRxTxTransaction+0x52>
 800845c:	e000      	b.n	8008460 <SPI_EndRxTxTransaction+0x70>
        break;
 800845e:	bf00      	nop
  }

  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20000018 	.word	0x20000018
 8008470:	165e9f81 	.word	0x165e9f81

08008474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e0a7      	b.n	80085d6 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a55      	ldr	r2, [pc, #340]	; (80085e0 <HAL_TIM_Base_Init+0x16c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d027      	beq.n	80084e0 <HAL_TIM_Base_Init+0x6c>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008498:	d022      	beq.n	80084e0 <HAL_TIM_Base_Init+0x6c>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a51      	ldr	r2, [pc, #324]	; (80085e4 <HAL_TIM_Base_Init+0x170>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d01d      	beq.n	80084e0 <HAL_TIM_Base_Init+0x6c>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a4f      	ldr	r2, [pc, #316]	; (80085e8 <HAL_TIM_Base_Init+0x174>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d018      	beq.n	80084e0 <HAL_TIM_Base_Init+0x6c>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a4e      	ldr	r2, [pc, #312]	; (80085ec <HAL_TIM_Base_Init+0x178>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d013      	beq.n	80084e0 <HAL_TIM_Base_Init+0x6c>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a4c      	ldr	r2, [pc, #304]	; (80085f0 <HAL_TIM_Base_Init+0x17c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00e      	beq.n	80084e0 <HAL_TIM_Base_Init+0x6c>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a4b      	ldr	r2, [pc, #300]	; (80085f4 <HAL_TIM_Base_Init+0x180>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d009      	beq.n	80084e0 <HAL_TIM_Base_Init+0x6c>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a49      	ldr	r2, [pc, #292]	; (80085f8 <HAL_TIM_Base_Init+0x184>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d004      	beq.n	80084e0 <HAL_TIM_Base_Init+0x6c>
 80084d6:	f240 1113 	movw	r1, #275	; 0x113
 80084da:	4848      	ldr	r0, [pc, #288]	; (80085fc <HAL_TIM_Base_Init+0x188>)
 80084dc:	f7f9 fc21 	bl	8001d22 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d014      	beq.n	8008512 <HAL_TIM_Base_Init+0x9e>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	2b10      	cmp	r3, #16
 80084ee:	d010      	beq.n	8008512 <HAL_TIM_Base_Init+0x9e>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	2b20      	cmp	r3, #32
 80084f6:	d00c      	beq.n	8008512 <HAL_TIM_Base_Init+0x9e>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	2b40      	cmp	r3, #64	; 0x40
 80084fe:	d008      	beq.n	8008512 <HAL_TIM_Base_Init+0x9e>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	2b60      	cmp	r3, #96	; 0x60
 8008506:	d004      	beq.n	8008512 <HAL_TIM_Base_Init+0x9e>
 8008508:	f44f 718a 	mov.w	r1, #276	; 0x114
 800850c:	483b      	ldr	r0, [pc, #236]	; (80085fc <HAL_TIM_Base_Init+0x188>)
 800850e:	f7f9 fc08 	bl	8001d22 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00e      	beq.n	8008538 <HAL_TIM_Base_Init+0xc4>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008522:	d009      	beq.n	8008538 <HAL_TIM_Base_Init+0xc4>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800852c:	d004      	beq.n	8008538 <HAL_TIM_Base_Init+0xc4>
 800852e:	f240 1115 	movw	r1, #277	; 0x115
 8008532:	4832      	ldr	r0, [pc, #200]	; (80085fc <HAL_TIM_Base_Init+0x188>)
 8008534:	f7f9 fbf5 	bl	8001d22 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d008      	beq.n	8008552 <HAL_TIM_Base_Init+0xde>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	2b80      	cmp	r3, #128	; 0x80
 8008546:	d004      	beq.n	8008552 <HAL_TIM_Base_Init+0xde>
 8008548:	f44f 718b 	mov.w	r1, #278	; 0x116
 800854c:	482b      	ldr	r0, [pc, #172]	; (80085fc <HAL_TIM_Base_Init+0x188>)
 800854e:	f7f9 fbe8 	bl	8001d22 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b00      	cmp	r3, #0
 800855c:	d106      	bne.n	800856c <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7f9 fe9a 	bl	80022a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3304      	adds	r3, #4
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f000 fa00 	bl	8008984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	40010000 	.word	0x40010000
 80085e4:	40000400 	.word	0x40000400
 80085e8:	40000800 	.word	0x40000800
 80085ec:	40000c00 	.word	0x40000c00
 80085f0:	40014000 	.word	0x40014000
 80085f4:	40014400 	.word	0x40014400
 80085f8:	40014800 	.word	0x40014800
 80085fc:	080138a4 	.word	0x080138a4

08008600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a3d      	ldr	r2, [pc, #244]	; (8008704 <HAL_TIM_Base_Start_IT+0x104>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d027      	beq.n	8008662 <HAL_TIM_Base_Start_IT+0x62>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800861a:	d022      	beq.n	8008662 <HAL_TIM_Base_Start_IT+0x62>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a39      	ldr	r2, [pc, #228]	; (8008708 <HAL_TIM_Base_Start_IT+0x108>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d01d      	beq.n	8008662 <HAL_TIM_Base_Start_IT+0x62>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a38      	ldr	r2, [pc, #224]	; (800870c <HAL_TIM_Base_Start_IT+0x10c>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d018      	beq.n	8008662 <HAL_TIM_Base_Start_IT+0x62>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a36      	ldr	r2, [pc, #216]	; (8008710 <HAL_TIM_Base_Start_IT+0x110>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d013      	beq.n	8008662 <HAL_TIM_Base_Start_IT+0x62>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a35      	ldr	r2, [pc, #212]	; (8008714 <HAL_TIM_Base_Start_IT+0x114>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00e      	beq.n	8008662 <HAL_TIM_Base_Start_IT+0x62>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a33      	ldr	r2, [pc, #204]	; (8008718 <HAL_TIM_Base_Start_IT+0x118>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d009      	beq.n	8008662 <HAL_TIM_Base_Start_IT+0x62>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a32      	ldr	r2, [pc, #200]	; (800871c <HAL_TIM_Base_Start_IT+0x11c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d004      	beq.n	8008662 <HAL_TIM_Base_Start_IT+0x62>
 8008658:	f240 11cf 	movw	r1, #463	; 0x1cf
 800865c:	4830      	ldr	r0, [pc, #192]	; (8008720 <HAL_TIM_Base_Start_IT+0x120>)
 800865e:	f7f9 fb60 	bl	8001d22 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b01      	cmp	r3, #1
 800866c:	d001      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e044      	b.n	80086fc <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2202      	movs	r2, #2
 8008676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68da      	ldr	r2, [r3, #12]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f042 0201 	orr.w	r2, r2, #1
 8008688:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a1d      	ldr	r2, [pc, #116]	; (8008704 <HAL_TIM_Base_Start_IT+0x104>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d018      	beq.n	80086c6 <HAL_TIM_Base_Start_IT+0xc6>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869c:	d013      	beq.n	80086c6 <HAL_TIM_Base_Start_IT+0xc6>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a19      	ldr	r2, [pc, #100]	; (8008708 <HAL_TIM_Base_Start_IT+0x108>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d00e      	beq.n	80086c6 <HAL_TIM_Base_Start_IT+0xc6>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a17      	ldr	r2, [pc, #92]	; (800870c <HAL_TIM_Base_Start_IT+0x10c>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d009      	beq.n	80086c6 <HAL_TIM_Base_Start_IT+0xc6>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a16      	ldr	r2, [pc, #88]	; (8008710 <HAL_TIM_Base_Start_IT+0x110>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d004      	beq.n	80086c6 <HAL_TIM_Base_Start_IT+0xc6>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a14      	ldr	r2, [pc, #80]	; (8008714 <HAL_TIM_Base_Start_IT+0x114>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d111      	bne.n	80086ea <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	f003 0307 	and.w	r3, r3, #7
 80086d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b06      	cmp	r3, #6
 80086d6:	d010      	beq.n	80086fa <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f042 0201 	orr.w	r2, r2, #1
 80086e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e8:	e007      	b.n	80086fa <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f042 0201 	orr.w	r2, r2, #1
 80086f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	40010000 	.word	0x40010000
 8008708:	40000400 	.word	0x40000400
 800870c:	40000800 	.word	0x40000800
 8008710:	40000c00 	.word	0x40000c00
 8008714:	40014000 	.word	0x40014000
 8008718:	40014400 	.word	0x40014400
 800871c:	40014800 	.word	0x40014800
 8008720:	080138a4 	.word	0x080138a4

08008724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b02      	cmp	r3, #2
 8008738:	d122      	bne.n	8008780 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b02      	cmp	r3, #2
 8008746:	d11b      	bne.n	8008780 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f06f 0202 	mvn.w	r2, #2
 8008750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f8ee 	bl	8008948 <HAL_TIM_IC_CaptureCallback>
 800876c:	e005      	b.n	800877a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f8e0 	bl	8008934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f8f1 	bl	800895c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b04      	cmp	r3, #4
 800878c:	d122      	bne.n	80087d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b04      	cmp	r3, #4
 800879a:	d11b      	bne.n	80087d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f06f 0204 	mvn.w	r2, #4
 80087a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2202      	movs	r2, #2
 80087aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f8c4 	bl	8008948 <HAL_TIM_IC_CaptureCallback>
 80087c0:	e005      	b.n	80087ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f8b6 	bl	8008934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f8c7 	bl	800895c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d122      	bne.n	8008828 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	f003 0308 	and.w	r3, r3, #8
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	d11b      	bne.n	8008828 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f06f 0208 	mvn.w	r2, #8
 80087f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2204      	movs	r2, #4
 80087fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	f003 0303 	and.w	r3, r3, #3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f89a 	bl	8008948 <HAL_TIM_IC_CaptureCallback>
 8008814:	e005      	b.n	8008822 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f88c 	bl	8008934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f89d 	bl	800895c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	f003 0310 	and.w	r3, r3, #16
 8008832:	2b10      	cmp	r3, #16
 8008834:	d122      	bne.n	800887c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	f003 0310 	and.w	r3, r3, #16
 8008840:	2b10      	cmp	r3, #16
 8008842:	d11b      	bne.n	800887c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f06f 0210 	mvn.w	r2, #16
 800884c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2208      	movs	r2, #8
 8008852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f870 	bl	8008948 <HAL_TIM_IC_CaptureCallback>
 8008868:	e005      	b.n	8008876 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f862 	bl	8008934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f873 	bl	800895c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b01      	cmp	r3, #1
 8008888:	d10e      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	2b01      	cmp	r3, #1
 8008896:	d107      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f06f 0201 	mvn.w	r2, #1
 80088a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7f9 fa26 	bl	8001cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b2:	2b80      	cmp	r3, #128	; 0x80
 80088b4:	d10e      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c0:	2b80      	cmp	r3, #128	; 0x80
 80088c2:	d107      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f8e2 	bl	8008a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088de:	2b40      	cmp	r3, #64	; 0x40
 80088e0:	d10e      	bne.n	8008900 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ec:	2b40      	cmp	r3, #64	; 0x40
 80088ee:	d107      	bne.n	8008900 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f838 	bl	8008970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f003 0320 	and.w	r3, r3, #32
 800890a:	2b20      	cmp	r3, #32
 800890c:	d10e      	bne.n	800892c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f003 0320 	and.w	r3, r3, #32
 8008918:	2b20      	cmp	r3, #32
 800891a:	d107      	bne.n	800892c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f06f 0220 	mvn.w	r2, #32
 8008924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f8ac 	bl	8008a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a34      	ldr	r2, [pc, #208]	; (8008a68 <TIM_Base_SetConfig+0xe4>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d00f      	beq.n	80089bc <TIM_Base_SetConfig+0x38>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a2:	d00b      	beq.n	80089bc <TIM_Base_SetConfig+0x38>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a31      	ldr	r2, [pc, #196]	; (8008a6c <TIM_Base_SetConfig+0xe8>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d007      	beq.n	80089bc <TIM_Base_SetConfig+0x38>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a30      	ldr	r2, [pc, #192]	; (8008a70 <TIM_Base_SetConfig+0xec>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d003      	beq.n	80089bc <TIM_Base_SetConfig+0x38>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a2f      	ldr	r2, [pc, #188]	; (8008a74 <TIM_Base_SetConfig+0xf0>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d108      	bne.n	80089ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a25      	ldr	r2, [pc, #148]	; (8008a68 <TIM_Base_SetConfig+0xe4>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d01b      	beq.n	8008a0e <TIM_Base_SetConfig+0x8a>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089dc:	d017      	beq.n	8008a0e <TIM_Base_SetConfig+0x8a>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a22      	ldr	r2, [pc, #136]	; (8008a6c <TIM_Base_SetConfig+0xe8>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d013      	beq.n	8008a0e <TIM_Base_SetConfig+0x8a>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a21      	ldr	r2, [pc, #132]	; (8008a70 <TIM_Base_SetConfig+0xec>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d00f      	beq.n	8008a0e <TIM_Base_SetConfig+0x8a>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a20      	ldr	r2, [pc, #128]	; (8008a74 <TIM_Base_SetConfig+0xf0>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d00b      	beq.n	8008a0e <TIM_Base_SetConfig+0x8a>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a1f      	ldr	r2, [pc, #124]	; (8008a78 <TIM_Base_SetConfig+0xf4>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d007      	beq.n	8008a0e <TIM_Base_SetConfig+0x8a>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a1e      	ldr	r2, [pc, #120]	; (8008a7c <TIM_Base_SetConfig+0xf8>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d003      	beq.n	8008a0e <TIM_Base_SetConfig+0x8a>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a1d      	ldr	r2, [pc, #116]	; (8008a80 <TIM_Base_SetConfig+0xfc>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d108      	bne.n	8008a20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a08      	ldr	r2, [pc, #32]	; (8008a68 <TIM_Base_SetConfig+0xe4>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d103      	bne.n	8008a54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	691a      	ldr	r2, [r3, #16]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	615a      	str	r2, [r3, #20]
}
 8008a5a:	bf00      	nop
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	40010000 	.word	0x40010000
 8008a6c:	40000400 	.word	0x40000400
 8008a70:	40000800 	.word	0x40000800
 8008a74:	40000c00 	.word	0x40000c00
 8008a78:	40014000 	.word	0x40014000
 8008a7c:	40014400 	.word	0x40014400
 8008a80:	40014800 	.word	0x40014800

08008a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e0a0      	b.n	8008c00 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d02c      	beq.n	8008b20 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a4f      	ldr	r2, [pc, #316]	; (8008c08 <HAL_UART_Init+0x15c>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d00e      	beq.n	8008aee <HAL_UART_Init+0x42>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a4d      	ldr	r2, [pc, #308]	; (8008c0c <HAL_UART_Init+0x160>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d009      	beq.n	8008aee <HAL_UART_Init+0x42>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a4c      	ldr	r2, [pc, #304]	; (8008c10 <HAL_UART_Init+0x164>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d004      	beq.n	8008aee <HAL_UART_Init+0x42>
 8008ae4:	f240 1173 	movw	r1, #371	; 0x173
 8008ae8:	484a      	ldr	r0, [pc, #296]	; (8008c14 <HAL_UART_Init+0x168>)
 8008aea:	f7f9 f91a 	bl	8001d22 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d028      	beq.n	8008b48 <HAL_UART_Init+0x9c>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008afe:	d023      	beq.n	8008b48 <HAL_UART_Init+0x9c>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b08:	d01e      	beq.n	8008b48 <HAL_UART_Init+0x9c>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b12:	d019      	beq.n	8008b48 <HAL_UART_Init+0x9c>
 8008b14:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8008b18:	483e      	ldr	r0, [pc, #248]	; (8008c14 <HAL_UART_Init+0x168>)
 8008b1a:	f7f9 f902 	bl	8001d22 <assert_failed>
 8008b1e:	e013      	b.n	8008b48 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a38      	ldr	r2, [pc, #224]	; (8008c08 <HAL_UART_Init+0x15c>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d00e      	beq.n	8008b48 <HAL_UART_Init+0x9c>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a37      	ldr	r2, [pc, #220]	; (8008c0c <HAL_UART_Init+0x160>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d009      	beq.n	8008b48 <HAL_UART_Init+0x9c>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a35      	ldr	r2, [pc, #212]	; (8008c10 <HAL_UART_Init+0x164>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d004      	beq.n	8008b48 <HAL_UART_Init+0x9c>
 8008b3e:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8008b42:	4834      	ldr	r0, [pc, #208]	; (8008c14 <HAL_UART_Init+0x168>)
 8008b44:	f7f9 f8ed 	bl	8001d22 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d009      	beq.n	8008b64 <HAL_UART_Init+0xb8>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b58:	d004      	beq.n	8008b64 <HAL_UART_Init+0xb8>
 8008b5a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8008b5e:	482d      	ldr	r0, [pc, #180]	; (8008c14 <HAL_UART_Init+0x168>)
 8008b60:	f7f9 f8df 	bl	8001d22 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d009      	beq.n	8008b80 <HAL_UART_Init+0xd4>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b74:	d004      	beq.n	8008b80 <HAL_UART_Init+0xd4>
 8008b76:	f240 117b 	movw	r1, #379	; 0x17b
 8008b7a:	4826      	ldr	r0, [pc, #152]	; (8008c14 <HAL_UART_Init+0x168>)
 8008b7c:	f7f9 f8d1 	bl	8001d22 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d106      	bne.n	8008b9a <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7f9 fbd5 	bl	8002344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2224      	movs	r2, #36	; 0x24
 8008b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bb0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fde6 	bl	8009784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	691a      	ldr	r2, [r3, #16]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	695a      	ldr	r2, [r3, #20]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bd6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68da      	ldr	r2, [r3, #12]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008be6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	40011000 	.word	0x40011000
 8008c0c:	40004400 	.word	0x40004400
 8008c10:	40011400 	.word	0x40011400
 8008c14:	08013918 	.word	0x08013918

08008c18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08a      	sub	sp, #40	; 0x28
 8008c1c:	af02      	add	r7, sp, #8
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	603b      	str	r3, [r7, #0]
 8008c24:	4613      	mov	r3, r2
 8008c26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b20      	cmp	r3, #32
 8008c36:	d17c      	bne.n	8008d32 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <HAL_UART_Transmit+0x2c>
 8008c3e:	88fb      	ldrh	r3, [r7, #6]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e075      	b.n	8008d34 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d101      	bne.n	8008c56 <HAL_UART_Transmit+0x3e>
 8008c52:	2302      	movs	r3, #2
 8008c54:	e06e      	b.n	8008d34 <HAL_UART_Transmit+0x11c>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2221      	movs	r2, #33	; 0x21
 8008c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c6c:	f7fa fdec 	bl	8003848 <HAL_GetTick>
 8008c70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	88fa      	ldrh	r2, [r7, #6]
 8008c76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	88fa      	ldrh	r2, [r7, #6]
 8008c7c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c86:	d108      	bne.n	8008c9a <HAL_UART_Transmit+0x82>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d104      	bne.n	8008c9a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008c90:	2300      	movs	r3, #0
 8008c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	61bb      	str	r3, [r7, #24]
 8008c98:	e003      	b.n	8008ca2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008caa:	e02a      	b.n	8008d02 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2180      	movs	r1, #128	; 0x80
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f000 fb1e 	bl	80092f8 <UART_WaitOnFlagUntilTimeout>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e036      	b.n	8008d34 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10b      	bne.n	8008ce4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	881b      	ldrh	r3, [r3, #0]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cda:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	3302      	adds	r3, #2
 8008ce0:	61bb      	str	r3, [r7, #24]
 8008ce2:	e007      	b.n	8008cf4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	781a      	ldrb	r2, [r3, #0]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1cf      	bne.n	8008cac <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	2200      	movs	r2, #0
 8008d14:	2140      	movs	r1, #64	; 0x40
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 faee 	bl	80092f8 <UART_WaitOnFlagUntilTimeout>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e006      	b.n	8008d34 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	e000      	b.n	8008d34 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d32:	2302      	movs	r3, #2
  }
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3720      	adds	r7, #32
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	4613      	mov	r3, r2
 8008d48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b20      	cmp	r3, #32
 8008d54:	d11d      	bne.n	8008d92 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <HAL_UART_Receive_IT+0x26>
 8008d5c:	88fb      	ldrh	r3, [r7, #6]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e016      	b.n	8008d94 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d101      	bne.n	8008d74 <HAL_UART_Receive_IT+0x38>
 8008d70:	2302      	movs	r3, #2
 8008d72:	e00f      	b.n	8008d94 <HAL_UART_Receive_IT+0x58>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d82:	88fb      	ldrh	r3, [r7, #6]
 8008d84:	461a      	mov	r2, r3
 8008d86:	68b9      	ldr	r1, [r7, #8]
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f000 fb23 	bl	80093d4 <UART_Start_Receive_IT>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	e000      	b.n	8008d94 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008d92:	2302      	movs	r3, #2
  }
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b0ba      	sub	sp, #232	; 0xe8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dd2:	f003 030f 	and.w	r3, r3, #15
 8008dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10f      	bne.n	8008e02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008de6:	f003 0320 	and.w	r3, r3, #32
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d009      	beq.n	8008e02 <HAL_UART_IRQHandler+0x66>
 8008dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fc07 	bl	800960e <UART_Receive_IT>
      return;
 8008e00:	e256      	b.n	80092b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f000 80de 	beq.w	8008fc8 <HAL_UART_IRQHandler+0x22c>
 8008e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d106      	bne.n	8008e26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 80d1 	beq.w	8008fc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00b      	beq.n	8008e4a <HAL_UART_IRQHandler+0xae>
 8008e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d005      	beq.n	8008e4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e42:	f043 0201 	orr.w	r2, r3, #1
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e4e:	f003 0304 	and.w	r3, r3, #4
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00b      	beq.n	8008e6e <HAL_UART_IRQHandler+0xd2>
 8008e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d005      	beq.n	8008e6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e66:	f043 0202 	orr.w	r2, r3, #2
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e72:	f003 0302 	and.w	r3, r3, #2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00b      	beq.n	8008e92 <HAL_UART_IRQHandler+0xf6>
 8008e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d005      	beq.n	8008e92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8a:	f043 0204 	orr.w	r2, r3, #4
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e96:	f003 0308 	and.w	r3, r3, #8
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d011      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x126>
 8008e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ea2:	f003 0320 	and.w	r3, r3, #32
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d105      	bne.n	8008eb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d005      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eba:	f043 0208 	orr.w	r2, r3, #8
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 81ed 	beq.w	80092a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed0:	f003 0320 	and.w	r3, r3, #32
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d008      	beq.n	8008eea <HAL_UART_IRQHandler+0x14e>
 8008ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008edc:	f003 0320 	and.w	r3, r3, #32
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d002      	beq.n	8008eea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fb92 	bl	800960e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef4:	2b40      	cmp	r3, #64	; 0x40
 8008ef6:	bf0c      	ite	eq
 8008ef8:	2301      	moveq	r3, #1
 8008efa:	2300      	movne	r3, #0
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	f003 0308 	and.w	r3, r3, #8
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d103      	bne.n	8008f16 <HAL_UART_IRQHandler+0x17a>
 8008f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d04f      	beq.n	8008fb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fa9a 	bl	8009450 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f26:	2b40      	cmp	r3, #64	; 0x40
 8008f28:	d141      	bne.n	8008fae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3314      	adds	r3, #20
 8008f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3314      	adds	r3, #20
 8008f52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f66:	e841 2300 	strex	r3, r2, [r1]
 8008f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1d9      	bne.n	8008f2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d013      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f82:	4a7d      	ldr	r2, [pc, #500]	; (8009178 <HAL_UART_IRQHandler+0x3dc>)
 8008f84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fa fe4a 	bl	8003c24 <HAL_DMA_Abort_IT>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d016      	beq.n	8008fc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa4:	e00e      	b.n	8008fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f990 	bl	80092cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fac:	e00a      	b.n	8008fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f98c 	bl	80092cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb4:	e006      	b.n	8008fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f988 	bl	80092cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008fc2:	e170      	b.n	80092a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc4:	bf00      	nop
    return;
 8008fc6:	e16e      	b.n	80092a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	f040 814a 	bne.w	8009266 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd6:	f003 0310 	and.w	r3, r3, #16
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 8143 	beq.w	8009266 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fe4:	f003 0310 	and.w	r3, r3, #16
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 813c 	beq.w	8009266 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fee:	2300      	movs	r3, #0
 8008ff0:	60bb      	str	r3, [r7, #8]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	60bb      	str	r3, [r7, #8]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	60bb      	str	r3, [r7, #8]
 8009002:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900e:	2b40      	cmp	r3, #64	; 0x40
 8009010:	f040 80b4 	bne.w	800917c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009020:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8140 	beq.w	80092aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800902e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009032:	429a      	cmp	r2, r3
 8009034:	f080 8139 	bcs.w	80092aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800903e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800904a:	f000 8088 	beq.w	800915e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	330c      	adds	r3, #12
 8009054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009058:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800905c:	e853 3f00 	ldrex	r3, [r3]
 8009060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009064:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800906c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	330c      	adds	r3, #12
 8009076:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800907a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800907e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009082:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009086:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1d9      	bne.n	800904e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3314      	adds	r3, #20
 80090a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090a4:	e853 3f00 	ldrex	r3, [r3]
 80090a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090ac:	f023 0301 	bic.w	r3, r3, #1
 80090b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3314      	adds	r3, #20
 80090ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80090be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80090c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80090c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090ca:	e841 2300 	strex	r3, r2, [r1]
 80090ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80090d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1e1      	bne.n	800909a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3314      	adds	r3, #20
 80090dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090e0:	e853 3f00 	ldrex	r3, [r3]
 80090e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3314      	adds	r3, #20
 80090f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80090fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80090fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009100:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009102:	e841 2300 	strex	r3, r2, [r1]
 8009106:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1e3      	bne.n	80090d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2220      	movs	r2, #32
 8009112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	330c      	adds	r3, #12
 8009122:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009126:	e853 3f00 	ldrex	r3, [r3]
 800912a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800912c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800912e:	f023 0310 	bic.w	r3, r3, #16
 8009132:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	330c      	adds	r3, #12
 800913c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009140:	65ba      	str	r2, [r7, #88]	; 0x58
 8009142:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009144:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009146:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009148:	e841 2300 	strex	r3, r2, [r1]
 800914c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800914e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1e3      	bne.n	800911c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009158:	4618      	mov	r0, r3
 800915a:	f7fa fcf3 	bl	8003b44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009166:	b29b      	uxth	r3, r3
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	b29b      	uxth	r3, r3
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f8b6 	bl	80092e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009174:	e099      	b.n	80092aa <HAL_UART_IRQHandler+0x50e>
 8009176:	bf00      	nop
 8009178:	08009517 	.word	0x08009517
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009184:	b29b      	uxth	r3, r3
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009190:	b29b      	uxth	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 808b 	beq.w	80092ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009198:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 8086 	beq.w	80092ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	330c      	adds	r3, #12
 80091a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	330c      	adds	r3, #12
 80091c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80091c6:	647a      	str	r2, [r7, #68]	; 0x44
 80091c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e3      	bne.n	80091a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3314      	adds	r3, #20
 80091e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	e853 3f00 	ldrex	r3, [r3]
 80091e8:	623b      	str	r3, [r7, #32]
   return(result);
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	f023 0301 	bic.w	r3, r3, #1
 80091f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3314      	adds	r3, #20
 80091fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80091fe:	633a      	str	r2, [r7, #48]	; 0x30
 8009200:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009206:	e841 2300 	strex	r3, r2, [r1]
 800920a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1e3      	bne.n	80091da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2220      	movs	r2, #32
 8009216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	330c      	adds	r3, #12
 8009226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	e853 3f00 	ldrex	r3, [r3]
 800922e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f023 0310 	bic.w	r3, r3, #16
 8009236:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	330c      	adds	r3, #12
 8009240:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009244:	61fa      	str	r2, [r7, #28]
 8009246:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009248:	69b9      	ldr	r1, [r7, #24]
 800924a:	69fa      	ldr	r2, [r7, #28]
 800924c:	e841 2300 	strex	r3, r2, [r1]
 8009250:	617b      	str	r3, [r7, #20]
   return(result);
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1e3      	bne.n	8009220 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800925c:	4619      	mov	r1, r3
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f83e 	bl	80092e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009264:	e023      	b.n	80092ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800926a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800926e:	2b00      	cmp	r3, #0
 8009270:	d009      	beq.n	8009286 <HAL_UART_IRQHandler+0x4ea>
 8009272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f95d 	bl	800953e <UART_Transmit_IT>
    return;
 8009284:	e014      	b.n	80092b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800928a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00e      	beq.n	80092b0 <HAL_UART_IRQHandler+0x514>
 8009292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800929a:	2b00      	cmp	r3, #0
 800929c:	d008      	beq.n	80092b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f99d 	bl	80095de <UART_EndTransmit_IT>
    return;
 80092a4:	e004      	b.n	80092b0 <HAL_UART_IRQHandler+0x514>
    return;
 80092a6:	bf00      	nop
 80092a8:	e002      	b.n	80092b0 <HAL_UART_IRQHandler+0x514>
      return;
 80092aa:	bf00      	nop
 80092ac:	e000      	b.n	80092b0 <HAL_UART_IRQHandler+0x514>
      return;
 80092ae:	bf00      	nop
  }
}
 80092b0:	37e8      	adds	r7, #232	; 0xe8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop

080092b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80092d4:	bf00      	nop
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b090      	sub	sp, #64	; 0x40
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	603b      	str	r3, [r7, #0]
 8009304:	4613      	mov	r3, r2
 8009306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009308:	e050      	b.n	80093ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800930a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800930c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009310:	d04c      	beq.n	80093ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009314:	2b00      	cmp	r3, #0
 8009316:	d007      	beq.n	8009328 <UART_WaitOnFlagUntilTimeout+0x30>
 8009318:	f7fa fa96 	bl	8003848 <HAL_GetTick>
 800931c:	4602      	mov	r2, r0
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009324:	429a      	cmp	r2, r3
 8009326:	d241      	bcs.n	80093ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	330c      	adds	r3, #12
 800932e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	e853 3f00 	ldrex	r3, [r3]
 8009336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800933e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	330c      	adds	r3, #12
 8009346:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009348:	637a      	str	r2, [r7, #52]	; 0x34
 800934a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800934e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009350:	e841 2300 	strex	r3, r2, [r1]
 8009354:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e5      	bne.n	8009328 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3314      	adds	r3, #20
 8009362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	e853 3f00 	ldrex	r3, [r3]
 800936a:	613b      	str	r3, [r7, #16]
   return(result);
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	f023 0301 	bic.w	r3, r3, #1
 8009372:	63bb      	str	r3, [r7, #56]	; 0x38
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3314      	adds	r3, #20
 800937a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800937c:	623a      	str	r2, [r7, #32]
 800937e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009380:	69f9      	ldr	r1, [r7, #28]
 8009382:	6a3a      	ldr	r2, [r7, #32]
 8009384:	e841 2300 	strex	r3, r2, [r1]
 8009388:	61bb      	str	r3, [r7, #24]
   return(result);
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1e5      	bne.n	800935c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2220      	movs	r2, #32
 8009394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2220      	movs	r2, #32
 800939c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e00f      	b.n	80093cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	4013      	ands	r3, r2
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	bf0c      	ite	eq
 80093bc:	2301      	moveq	r3, #1
 80093be:	2300      	movne	r3, #0
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	461a      	mov	r2, r3
 80093c4:	79fb      	ldrb	r3, [r7, #7]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d09f      	beq.n	800930a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3740      	adds	r7, #64	; 0x40
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	4613      	mov	r3, r2
 80093e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	88fa      	ldrh	r2, [r7, #6]
 80093ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	88fa      	ldrh	r2, [r7, #6]
 80093f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2222      	movs	r2, #34	; 0x22
 80093fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d007      	beq.n	8009422 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009420:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	695a      	ldr	r2, [r3, #20]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f042 0201 	orr.w	r2, r2, #1
 8009430:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68da      	ldr	r2, [r3, #12]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f042 0220 	orr.w	r2, r2, #32
 8009440:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009450:	b480      	push	{r7}
 8009452:	b095      	sub	sp, #84	; 0x54
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	330c      	adds	r3, #12
 800945e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800946e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	330c      	adds	r3, #12
 8009476:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009478:	643a      	str	r2, [r7, #64]	; 0x40
 800947a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800947e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e5      	bne.n	8009458 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3314      	adds	r3, #20
 8009492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	e853 3f00 	ldrex	r3, [r3]
 800949a:	61fb      	str	r3, [r7, #28]
   return(result);
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	f023 0301 	bic.w	r3, r3, #1
 80094a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3314      	adds	r3, #20
 80094aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094b4:	e841 2300 	strex	r3, r2, [r1]
 80094b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1e5      	bne.n	800948c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d119      	bne.n	80094fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	330c      	adds	r3, #12
 80094ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	e853 3f00 	ldrex	r3, [r3]
 80094d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	f023 0310 	bic.w	r3, r3, #16
 80094de:	647b      	str	r3, [r7, #68]	; 0x44
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	330c      	adds	r3, #12
 80094e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094e8:	61ba      	str	r2, [r7, #24]
 80094ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	6979      	ldr	r1, [r7, #20]
 80094ee:	69ba      	ldr	r2, [r7, #24]
 80094f0:	e841 2300 	strex	r3, r2, [r1]
 80094f4:	613b      	str	r3, [r7, #16]
   return(result);
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e5      	bne.n	80094c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2220      	movs	r2, #32
 8009500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	631a      	str	r2, [r3, #48]	; 0x30
}
 800950a:	bf00      	nop
 800950c:	3754      	adds	r7, #84	; 0x54
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr

08009516 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b084      	sub	sp, #16
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009522:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f7ff fecb 	bl	80092cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009536:	bf00      	nop
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800953e:	b480      	push	{r7}
 8009540:	b085      	sub	sp, #20
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b21      	cmp	r3, #33	; 0x21
 8009550:	d13e      	bne.n	80095d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800955a:	d114      	bne.n	8009586 <UART_Transmit_IT+0x48>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d110      	bne.n	8009586 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a1b      	ldr	r3, [r3, #32]
 8009568:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009578:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	1c9a      	adds	r2, r3, #2
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	621a      	str	r2, [r3, #32]
 8009584:	e008      	b.n	8009598 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	1c59      	adds	r1, r3, #1
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	6211      	str	r1, [r2, #32]
 8009590:	781a      	ldrb	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800959c:	b29b      	uxth	r3, r3
 800959e:	3b01      	subs	r3, #1
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	4619      	mov	r1, r3
 80095a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10f      	bne.n	80095cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68da      	ldr	r2, [r3, #12]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	e000      	b.n	80095d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80095d0:	2302      	movs	r3, #2
  }
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3714      	adds	r7, #20
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b082      	sub	sp, #8
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68da      	ldr	r2, [r3, #12]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2220      	movs	r2, #32
 80095fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7ff fe5a 	bl	80092b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b08c      	sub	sp, #48	; 0x30
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b22      	cmp	r3, #34	; 0x22
 8009620:	f040 80ab 	bne.w	800977a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800962c:	d117      	bne.n	800965e <UART_Receive_IT+0x50>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d113      	bne.n	800965e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009636:	2300      	movs	r3, #0
 8009638:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	b29b      	uxth	r3, r3
 8009648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800964c:	b29a      	uxth	r2, r3
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009656:	1c9a      	adds	r2, r3, #2
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	629a      	str	r2, [r3, #40]	; 0x28
 800965c:	e026      	b.n	80096ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009662:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009664:	2300      	movs	r3, #0
 8009666:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009670:	d007      	beq.n	8009682 <UART_Receive_IT+0x74>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10a      	bne.n	8009690 <UART_Receive_IT+0x82>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d106      	bne.n	8009690 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	b2da      	uxtb	r2, r3
 800968a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968c:	701a      	strb	r2, [r3, #0]
 800968e:	e008      	b.n	80096a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	b2db      	uxtb	r3, r3
 8009698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800969c:	b2da      	uxtb	r2, r3
 800969e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a6:	1c5a      	adds	r2, r3, #1
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	3b01      	subs	r3, #1
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	4619      	mov	r1, r3
 80096ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d15a      	bne.n	8009776 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68da      	ldr	r2, [r3, #12]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f022 0220 	bic.w	r2, r2, #32
 80096ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	695a      	ldr	r2, [r3, #20]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f022 0201 	bic.w	r2, r2, #1
 80096ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2220      	movs	r2, #32
 80096f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d135      	bne.n	800976c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	330c      	adds	r3, #12
 800970c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	e853 3f00 	ldrex	r3, [r3]
 8009714:	613b      	str	r3, [r7, #16]
   return(result);
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f023 0310 	bic.w	r3, r3, #16
 800971c:	627b      	str	r3, [r7, #36]	; 0x24
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	330c      	adds	r3, #12
 8009724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009726:	623a      	str	r2, [r7, #32]
 8009728:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972a:	69f9      	ldr	r1, [r7, #28]
 800972c:	6a3a      	ldr	r2, [r7, #32]
 800972e:	e841 2300 	strex	r3, r2, [r1]
 8009732:	61bb      	str	r3, [r7, #24]
   return(result);
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1e5      	bne.n	8009706 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0310 	and.w	r3, r3, #16
 8009744:	2b10      	cmp	r3, #16
 8009746:	d10a      	bne.n	800975e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009748:	2300      	movs	r3, #0
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	60fb      	str	r3, [r7, #12]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	60fb      	str	r3, [r7, #12]
 800975c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7ff fdbb 	bl	80092e0 <HAL_UARTEx_RxEventCallback>
 800976a:	e002      	b.n	8009772 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7f8 f895 	bl	800189c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	e002      	b.n	800977c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	e000      	b.n	800977c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800977a:	2302      	movs	r3, #2
  }
}
 800977c:	4618      	mov	r0, r3
 800977e:	3730      	adds	r7, #48	; 0x30
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009788:	b0c0      	sub	sp, #256	; 0x100
 800978a:	af00      	add	r7, sp, #0
 800978c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	4bcf      	ldr	r3, [pc, #828]	; (8009ad4 <UART_SetConfig+0x350>)
 8009798:	429a      	cmp	r2, r3
 800979a:	d904      	bls.n	80097a6 <UART_SetConfig+0x22>
 800979c:	f640 6161 	movw	r1, #3681	; 0xe61
 80097a0:	48cd      	ldr	r0, [pc, #820]	; (8009ad8 <UART_SetConfig+0x354>)
 80097a2:	f7f8 fabe 	bl	8001d22 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80097a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00a      	beq.n	80097c6 <UART_SetConfig+0x42>
 80097b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097ba:	d004      	beq.n	80097c6 <UART_SetConfig+0x42>
 80097bc:	f640 6162 	movw	r1, #3682	; 0xe62
 80097c0:	48c5      	ldr	r0, [pc, #788]	; (8009ad8 <UART_SetConfig+0x354>)
 80097c2:	f7f8 faae 	bl	8001d22 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80097c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d010      	beq.n	80097f2 <UART_SetConfig+0x6e>
 80097d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097da:	d00a      	beq.n	80097f2 <UART_SetConfig+0x6e>
 80097dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80097e6:	d004      	beq.n	80097f2 <UART_SetConfig+0x6e>
 80097e8:	f640 6163 	movw	r1, #3683	; 0xe63
 80097ec:	48ba      	ldr	r0, [pc, #744]	; (8009ad8 <UART_SetConfig+0x354>)
 80097ee:	f7f8 fa98 	bl	8001d22 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80097f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097f6:	695a      	ldr	r2, [r3, #20]
 80097f8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80097fc:	4013      	ands	r3, r2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d104      	bne.n	800980c <UART_SetConfig+0x88>
 8009802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d104      	bne.n	8009816 <UART_SetConfig+0x92>
 800980c:	f640 6164 	movw	r1, #3684	; 0xe64
 8009810:	48b1      	ldr	r0, [pc, #708]	; (8009ad8 <UART_SetConfig+0x354>)
 8009812:	f7f8 fa86 	bl	8001d22 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009826:	68d9      	ldr	r1, [r3, #12]
 8009828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	ea40 0301 	orr.w	r3, r0, r1
 8009832:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009838:	689a      	ldr	r2, [r3, #8]
 800983a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	431a      	orrs	r2, r3
 8009842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	431a      	orrs	r2, r3
 800984a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800984e:	69db      	ldr	r3, [r3, #28]
 8009850:	4313      	orrs	r3, r2
 8009852:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009862:	f021 010c 	bic.w	r1, r1, #12
 8009866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009870:	430b      	orrs	r3, r1
 8009872:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009884:	6999      	ldr	r1, [r3, #24]
 8009886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	ea40 0301 	orr.w	r3, r0, r1
 8009890:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	4b90      	ldr	r3, [pc, #576]	; (8009adc <UART_SetConfig+0x358>)
 800989a:	429a      	cmp	r2, r3
 800989c:	d005      	beq.n	80098aa <UART_SetConfig+0x126>
 800989e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	4b8e      	ldr	r3, [pc, #568]	; (8009ae0 <UART_SetConfig+0x35c>)
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d104      	bne.n	80098b4 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80098aa:	f7fe f889 	bl	80079c0 <HAL_RCC_GetPCLK2Freq>
 80098ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80098b2:	e003      	b.n	80098bc <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098b4:	f7fe f870 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 80098b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098c6:	f040 810f 	bne.w	8009ae8 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098ce:	2200      	movs	r2, #0
 80098d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80098d4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80098d8:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80098dc:	4622      	mov	r2, r4
 80098de:	462b      	mov	r3, r5
 80098e0:	1891      	adds	r1, r2, r2
 80098e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80098e4:	415b      	adcs	r3, r3
 80098e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80098ec:	4621      	mov	r1, r4
 80098ee:	eb12 0801 	adds.w	r8, r2, r1
 80098f2:	4629      	mov	r1, r5
 80098f4:	eb43 0901 	adc.w	r9, r3, r1
 80098f8:	f04f 0200 	mov.w	r2, #0
 80098fc:	f04f 0300 	mov.w	r3, #0
 8009900:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009904:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009908:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800990c:	4690      	mov	r8, r2
 800990e:	4699      	mov	r9, r3
 8009910:	4623      	mov	r3, r4
 8009912:	eb18 0303 	adds.w	r3, r8, r3
 8009916:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800991a:	462b      	mov	r3, r5
 800991c:	eb49 0303 	adc.w	r3, r9, r3
 8009920:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009930:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009934:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009938:	460b      	mov	r3, r1
 800993a:	18db      	adds	r3, r3, r3
 800993c:	653b      	str	r3, [r7, #80]	; 0x50
 800993e:	4613      	mov	r3, r2
 8009940:	eb42 0303 	adc.w	r3, r2, r3
 8009944:	657b      	str	r3, [r7, #84]	; 0x54
 8009946:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800994a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800994e:	f7f7 f9a3 	bl	8000c98 <__aeabi_uldivmod>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	4b63      	ldr	r3, [pc, #396]	; (8009ae4 <UART_SetConfig+0x360>)
 8009958:	fba3 2302 	umull	r2, r3, r3, r2
 800995c:	095b      	lsrs	r3, r3, #5
 800995e:	011c      	lsls	r4, r3, #4
 8009960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009964:	2200      	movs	r2, #0
 8009966:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800996a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800996e:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009972:	4642      	mov	r2, r8
 8009974:	464b      	mov	r3, r9
 8009976:	1891      	adds	r1, r2, r2
 8009978:	64b9      	str	r1, [r7, #72]	; 0x48
 800997a:	415b      	adcs	r3, r3
 800997c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800997e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009982:	4641      	mov	r1, r8
 8009984:	eb12 0a01 	adds.w	sl, r2, r1
 8009988:	4649      	mov	r1, r9
 800998a:	eb43 0b01 	adc.w	fp, r3, r1
 800998e:	f04f 0200 	mov.w	r2, #0
 8009992:	f04f 0300 	mov.w	r3, #0
 8009996:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800999a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800999e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099a2:	4692      	mov	sl, r2
 80099a4:	469b      	mov	fp, r3
 80099a6:	4643      	mov	r3, r8
 80099a8:	eb1a 0303 	adds.w	r3, sl, r3
 80099ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099b0:	464b      	mov	r3, r9
 80099b2:	eb4b 0303 	adc.w	r3, fp, r3
 80099b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80099ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099c6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80099ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80099ce:	460b      	mov	r3, r1
 80099d0:	18db      	adds	r3, r3, r3
 80099d2:	643b      	str	r3, [r7, #64]	; 0x40
 80099d4:	4613      	mov	r3, r2
 80099d6:	eb42 0303 	adc.w	r3, r2, r3
 80099da:	647b      	str	r3, [r7, #68]	; 0x44
 80099dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80099e0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80099e4:	f7f7 f958 	bl	8000c98 <__aeabi_uldivmod>
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	4611      	mov	r1, r2
 80099ee:	4b3d      	ldr	r3, [pc, #244]	; (8009ae4 <UART_SetConfig+0x360>)
 80099f0:	fba3 2301 	umull	r2, r3, r3, r1
 80099f4:	095b      	lsrs	r3, r3, #5
 80099f6:	2264      	movs	r2, #100	; 0x64
 80099f8:	fb02 f303 	mul.w	r3, r2, r3
 80099fc:	1acb      	subs	r3, r1, r3
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009a04:	4b37      	ldr	r3, [pc, #220]	; (8009ae4 <UART_SetConfig+0x360>)
 8009a06:	fba3 2302 	umull	r2, r3, r3, r2
 8009a0a:	095b      	lsrs	r3, r3, #5
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a12:	441c      	add	r4, r3
 8009a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a1e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009a22:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009a26:	4642      	mov	r2, r8
 8009a28:	464b      	mov	r3, r9
 8009a2a:	1891      	adds	r1, r2, r2
 8009a2c:	63b9      	str	r1, [r7, #56]	; 0x38
 8009a2e:	415b      	adcs	r3, r3
 8009a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a32:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a36:	4641      	mov	r1, r8
 8009a38:	1851      	adds	r1, r2, r1
 8009a3a:	6339      	str	r1, [r7, #48]	; 0x30
 8009a3c:	4649      	mov	r1, r9
 8009a3e:	414b      	adcs	r3, r1
 8009a40:	637b      	str	r3, [r7, #52]	; 0x34
 8009a42:	f04f 0200 	mov.w	r2, #0
 8009a46:	f04f 0300 	mov.w	r3, #0
 8009a4a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009a4e:	4659      	mov	r1, fp
 8009a50:	00cb      	lsls	r3, r1, #3
 8009a52:	4651      	mov	r1, sl
 8009a54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a58:	4651      	mov	r1, sl
 8009a5a:	00ca      	lsls	r2, r1, #3
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4603      	mov	r3, r0
 8009a62:	4642      	mov	r2, r8
 8009a64:	189b      	adds	r3, r3, r2
 8009a66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a6a:	464b      	mov	r3, r9
 8009a6c:	460a      	mov	r2, r1
 8009a6e:	eb42 0303 	adc.w	r3, r2, r3
 8009a72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009a82:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009a86:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	18db      	adds	r3, r3, r3
 8009a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a90:	4613      	mov	r3, r2
 8009a92:	eb42 0303 	adc.w	r3, r2, r3
 8009a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a9c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009aa0:	f7f7 f8fa 	bl	8000c98 <__aeabi_uldivmod>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4b0e      	ldr	r3, [pc, #56]	; (8009ae4 <UART_SetConfig+0x360>)
 8009aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8009aae:	095b      	lsrs	r3, r3, #5
 8009ab0:	2164      	movs	r1, #100	; 0x64
 8009ab2:	fb01 f303 	mul.w	r3, r1, r3
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	00db      	lsls	r3, r3, #3
 8009aba:	3332      	adds	r3, #50	; 0x32
 8009abc:	4a09      	ldr	r2, [pc, #36]	; (8009ae4 <UART_SetConfig+0x360>)
 8009abe:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac2:	095b      	lsrs	r3, r3, #5
 8009ac4:	f003 0207 	and.w	r2, r3, #7
 8009ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4422      	add	r2, r4
 8009ad0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009ad2:	e108      	b.n	8009ce6 <UART_SetConfig+0x562>
 8009ad4:	00a037a0 	.word	0x00a037a0
 8009ad8:	08013918 	.word	0x08013918
 8009adc:	40011000 	.word	0x40011000
 8009ae0:	40011400 	.word	0x40011400
 8009ae4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009aec:	2200      	movs	r2, #0
 8009aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009af2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009af6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009afa:	4642      	mov	r2, r8
 8009afc:	464b      	mov	r3, r9
 8009afe:	1891      	adds	r1, r2, r2
 8009b00:	6239      	str	r1, [r7, #32]
 8009b02:	415b      	adcs	r3, r3
 8009b04:	627b      	str	r3, [r7, #36]	; 0x24
 8009b06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b0a:	4641      	mov	r1, r8
 8009b0c:	1854      	adds	r4, r2, r1
 8009b0e:	4649      	mov	r1, r9
 8009b10:	eb43 0501 	adc.w	r5, r3, r1
 8009b14:	f04f 0200 	mov.w	r2, #0
 8009b18:	f04f 0300 	mov.w	r3, #0
 8009b1c:	00eb      	lsls	r3, r5, #3
 8009b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b22:	00e2      	lsls	r2, r4, #3
 8009b24:	4614      	mov	r4, r2
 8009b26:	461d      	mov	r5, r3
 8009b28:	4643      	mov	r3, r8
 8009b2a:	18e3      	adds	r3, r4, r3
 8009b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b30:	464b      	mov	r3, r9
 8009b32:	eb45 0303 	adc.w	r3, r5, r3
 8009b36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b4a:	f04f 0200 	mov.w	r2, #0
 8009b4e:	f04f 0300 	mov.w	r3, #0
 8009b52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009b56:	4629      	mov	r1, r5
 8009b58:	008b      	lsls	r3, r1, #2
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b60:	4621      	mov	r1, r4
 8009b62:	008a      	lsls	r2, r1, #2
 8009b64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009b68:	f7f7 f896 	bl	8000c98 <__aeabi_uldivmod>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	460b      	mov	r3, r1
 8009b70:	4b60      	ldr	r3, [pc, #384]	; (8009cf4 <UART_SetConfig+0x570>)
 8009b72:	fba3 2302 	umull	r2, r3, r3, r2
 8009b76:	095b      	lsrs	r3, r3, #5
 8009b78:	011c      	lsls	r4, r3, #4
 8009b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009b8c:	4642      	mov	r2, r8
 8009b8e:	464b      	mov	r3, r9
 8009b90:	1891      	adds	r1, r2, r2
 8009b92:	61b9      	str	r1, [r7, #24]
 8009b94:	415b      	adcs	r3, r3
 8009b96:	61fb      	str	r3, [r7, #28]
 8009b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b9c:	4641      	mov	r1, r8
 8009b9e:	1851      	adds	r1, r2, r1
 8009ba0:	6139      	str	r1, [r7, #16]
 8009ba2:	4649      	mov	r1, r9
 8009ba4:	414b      	adcs	r3, r1
 8009ba6:	617b      	str	r3, [r7, #20]
 8009ba8:	f04f 0200 	mov.w	r2, #0
 8009bac:	f04f 0300 	mov.w	r3, #0
 8009bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009bb4:	4659      	mov	r1, fp
 8009bb6:	00cb      	lsls	r3, r1, #3
 8009bb8:	4651      	mov	r1, sl
 8009bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bbe:	4651      	mov	r1, sl
 8009bc0:	00ca      	lsls	r2, r1, #3
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	4642      	mov	r2, r8
 8009bca:	189b      	adds	r3, r3, r2
 8009bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009bd0:	464b      	mov	r3, r9
 8009bd2:	460a      	mov	r2, r1
 8009bd4:	eb42 0303 	adc.w	r3, r2, r3
 8009bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009be6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009be8:	f04f 0200 	mov.w	r2, #0
 8009bec:	f04f 0300 	mov.w	r3, #0
 8009bf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	008b      	lsls	r3, r1, #2
 8009bf8:	4641      	mov	r1, r8
 8009bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bfe:	4641      	mov	r1, r8
 8009c00:	008a      	lsls	r2, r1, #2
 8009c02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009c06:	f7f7 f847 	bl	8000c98 <__aeabi_uldivmod>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4b39      	ldr	r3, [pc, #228]	; (8009cf4 <UART_SetConfig+0x570>)
 8009c10:	fba3 1302 	umull	r1, r3, r3, r2
 8009c14:	095b      	lsrs	r3, r3, #5
 8009c16:	2164      	movs	r1, #100	; 0x64
 8009c18:	fb01 f303 	mul.w	r3, r1, r3
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	011b      	lsls	r3, r3, #4
 8009c20:	3332      	adds	r3, #50	; 0x32
 8009c22:	4a34      	ldr	r2, [pc, #208]	; (8009cf4 <UART_SetConfig+0x570>)
 8009c24:	fba2 2303 	umull	r2, r3, r2, r3
 8009c28:	095b      	lsrs	r3, r3, #5
 8009c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c2e:	441c      	add	r4, r3
 8009c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c34:	2200      	movs	r2, #0
 8009c36:	673b      	str	r3, [r7, #112]	; 0x70
 8009c38:	677a      	str	r2, [r7, #116]	; 0x74
 8009c3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009c3e:	4642      	mov	r2, r8
 8009c40:	464b      	mov	r3, r9
 8009c42:	1891      	adds	r1, r2, r2
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	415b      	adcs	r3, r3
 8009c48:	60fb      	str	r3, [r7, #12]
 8009c4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c4e:	4641      	mov	r1, r8
 8009c50:	1851      	adds	r1, r2, r1
 8009c52:	6039      	str	r1, [r7, #0]
 8009c54:	4649      	mov	r1, r9
 8009c56:	414b      	adcs	r3, r1
 8009c58:	607b      	str	r3, [r7, #4]
 8009c5a:	f04f 0200 	mov.w	r2, #0
 8009c5e:	f04f 0300 	mov.w	r3, #0
 8009c62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009c66:	4659      	mov	r1, fp
 8009c68:	00cb      	lsls	r3, r1, #3
 8009c6a:	4651      	mov	r1, sl
 8009c6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c70:	4651      	mov	r1, sl
 8009c72:	00ca      	lsls	r2, r1, #3
 8009c74:	4610      	mov	r0, r2
 8009c76:	4619      	mov	r1, r3
 8009c78:	4603      	mov	r3, r0
 8009c7a:	4642      	mov	r2, r8
 8009c7c:	189b      	adds	r3, r3, r2
 8009c7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c80:	464b      	mov	r3, r9
 8009c82:	460a      	mov	r2, r1
 8009c84:	eb42 0303 	adc.w	r3, r2, r3
 8009c88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	663b      	str	r3, [r7, #96]	; 0x60
 8009c94:	667a      	str	r2, [r7, #100]	; 0x64
 8009c96:	f04f 0200 	mov.w	r2, #0
 8009c9a:	f04f 0300 	mov.w	r3, #0
 8009c9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009ca2:	4649      	mov	r1, r9
 8009ca4:	008b      	lsls	r3, r1, #2
 8009ca6:	4641      	mov	r1, r8
 8009ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cac:	4641      	mov	r1, r8
 8009cae:	008a      	lsls	r2, r1, #2
 8009cb0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009cb4:	f7f6 fff0 	bl	8000c98 <__aeabi_uldivmod>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	460b      	mov	r3, r1
 8009cbc:	4b0d      	ldr	r3, [pc, #52]	; (8009cf4 <UART_SetConfig+0x570>)
 8009cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8009cc2:	095b      	lsrs	r3, r3, #5
 8009cc4:	2164      	movs	r1, #100	; 0x64
 8009cc6:	fb01 f303 	mul.w	r3, r1, r3
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	011b      	lsls	r3, r3, #4
 8009cce:	3332      	adds	r3, #50	; 0x32
 8009cd0:	4a08      	ldr	r2, [pc, #32]	; (8009cf4 <UART_SetConfig+0x570>)
 8009cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd6:	095b      	lsrs	r3, r3, #5
 8009cd8:	f003 020f 	and.w	r2, r3, #15
 8009cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4422      	add	r2, r4
 8009ce4:	609a      	str	r2, [r3, #8]
}
 8009ce6:	bf00      	nop
 8009ce8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009cec:	46bd      	mov	sp, r7
 8009cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cf2:	bf00      	nop
 8009cf4:	51eb851f 	.word	0x51eb851f

08009cf8 <__NVIC_SetPriority>:
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	6039      	str	r1, [r7, #0]
 8009d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	db0a      	blt.n	8009d22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	490c      	ldr	r1, [pc, #48]	; (8009d44 <__NVIC_SetPriority+0x4c>)
 8009d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d16:	0112      	lsls	r2, r2, #4
 8009d18:	b2d2      	uxtb	r2, r2
 8009d1a:	440b      	add	r3, r1
 8009d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009d20:	e00a      	b.n	8009d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	b2da      	uxtb	r2, r3
 8009d26:	4908      	ldr	r1, [pc, #32]	; (8009d48 <__NVIC_SetPriority+0x50>)
 8009d28:	79fb      	ldrb	r3, [r7, #7]
 8009d2a:	f003 030f 	and.w	r3, r3, #15
 8009d2e:	3b04      	subs	r3, #4
 8009d30:	0112      	lsls	r2, r2, #4
 8009d32:	b2d2      	uxtb	r2, r2
 8009d34:	440b      	add	r3, r1
 8009d36:	761a      	strb	r2, [r3, #24]
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	e000e100 	.word	0xe000e100
 8009d48:	e000ed00 	.word	0xe000ed00

08009d4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009d50:	4b05      	ldr	r3, [pc, #20]	; (8009d68 <SysTick_Handler+0x1c>)
 8009d52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009d54:	f003 f854 	bl	800ce00 <xTaskGetSchedulerState>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d001      	beq.n	8009d62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009d5e:	f001 f863 	bl	800ae28 <xPortSysTickHandler>
  }
}
 8009d62:	bf00      	nop
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	e000e010 	.word	0xe000e010

08009d6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009d70:	2100      	movs	r1, #0
 8009d72:	f06f 0004 	mvn.w	r0, #4
 8009d76:	f7ff ffbf 	bl	8009cf8 <__NVIC_SetPriority>
#endif
}
 8009d7a:	bf00      	nop
 8009d7c:	bd80      	pop	{r7, pc}
	...

08009d80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d86:	f3ef 8305 	mrs	r3, IPSR
 8009d8a:	603b      	str	r3, [r7, #0]
  return(result);
 8009d8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009d92:	f06f 0305 	mvn.w	r3, #5
 8009d96:	607b      	str	r3, [r7, #4]
 8009d98:	e00c      	b.n	8009db4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d9a:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <osKernelInitialize+0x44>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d105      	bne.n	8009dae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009da2:	4b08      	ldr	r3, [pc, #32]	; (8009dc4 <osKernelInitialize+0x44>)
 8009da4:	2201      	movs	r2, #1
 8009da6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009da8:	2300      	movs	r3, #0
 8009daa:	607b      	str	r3, [r7, #4]
 8009dac:	e002      	b.n	8009db4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009dae:	f04f 33ff 	mov.w	r3, #4294967295
 8009db2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009db4:	687b      	ldr	r3, [r7, #4]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	200005fc 	.word	0x200005fc

08009dc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dce:	f3ef 8305 	mrs	r3, IPSR
 8009dd2:	603b      	str	r3, [r7, #0]
  return(result);
 8009dd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009dda:	f06f 0305 	mvn.w	r3, #5
 8009dde:	607b      	str	r3, [r7, #4]
 8009de0:	e010      	b.n	8009e04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009de2:	4b0b      	ldr	r3, [pc, #44]	; (8009e10 <osKernelStart+0x48>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d109      	bne.n	8009dfe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009dea:	f7ff ffbf 	bl	8009d6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009dee:	4b08      	ldr	r3, [pc, #32]	; (8009e10 <osKernelStart+0x48>)
 8009df0:	2202      	movs	r2, #2
 8009df2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009df4:	f002 fba8 	bl	800c548 <vTaskStartScheduler>
      stat = osOK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	607b      	str	r3, [r7, #4]
 8009dfc:	e002      	b.n	8009e04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8009e02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e04:	687b      	ldr	r3, [r7, #4]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	200005fc 	.word	0x200005fc

08009e14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b08e      	sub	sp, #56	; 0x38
 8009e18:	af04      	add	r7, sp, #16
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e20:	2300      	movs	r3, #0
 8009e22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e24:	f3ef 8305 	mrs	r3, IPSR
 8009e28:	617b      	str	r3, [r7, #20]
  return(result);
 8009e2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d17e      	bne.n	8009f2e <osThreadNew+0x11a>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d07b      	beq.n	8009f2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009e36:	2380      	movs	r3, #128	; 0x80
 8009e38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009e3a:	2318      	movs	r3, #24
 8009e3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009e42:	f04f 33ff 	mov.w	r3, #4294967295
 8009e46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d045      	beq.n	8009eda <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d002      	beq.n	8009e5c <osThreadNew+0x48>
        name = attr->name;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d008      	beq.n	8009e82 <osThreadNew+0x6e>
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	2b38      	cmp	r3, #56	; 0x38
 8009e74:	d805      	bhi.n	8009e82 <osThreadNew+0x6e>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <osThreadNew+0x72>
        return (NULL);
 8009e82:	2300      	movs	r3, #0
 8009e84:	e054      	b.n	8009f30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	089b      	lsrs	r3, r3, #2
 8009e94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00e      	beq.n	8009ebc <osThreadNew+0xa8>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	2bbb      	cmp	r3, #187	; 0xbb
 8009ea4:	d90a      	bls.n	8009ebc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d006      	beq.n	8009ebc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	695b      	ldr	r3, [r3, #20]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <osThreadNew+0xa8>
        mem = 1;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	61bb      	str	r3, [r7, #24]
 8009eba:	e010      	b.n	8009ede <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10c      	bne.n	8009ede <osThreadNew+0xca>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d108      	bne.n	8009ede <osThreadNew+0xca>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d104      	bne.n	8009ede <osThreadNew+0xca>
          mem = 0;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	61bb      	str	r3, [r7, #24]
 8009ed8:	e001      	b.n	8009ede <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009eda:	2300      	movs	r3, #0
 8009edc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d110      	bne.n	8009f06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009eec:	9202      	str	r2, [sp, #8]
 8009eee:	9301      	str	r3, [sp, #4]
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	6a3a      	ldr	r2, [r7, #32]
 8009ef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f002 f832 	bl	800bf64 <xTaskCreateStatic>
 8009f00:	4603      	mov	r3, r0
 8009f02:	613b      	str	r3, [r7, #16]
 8009f04:	e013      	b.n	8009f2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d110      	bne.n	8009f2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	f107 0310 	add.w	r3, r7, #16
 8009f14:	9301      	str	r3, [sp, #4]
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f002 f87d 	bl	800c01e <xTaskCreate>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d001      	beq.n	8009f2e <osThreadNew+0x11a>
            hTask = NULL;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009f2e:	693b      	ldr	r3, [r7, #16]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3728      	adds	r7, #40	; 0x28
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f44:	f3ef 8305 	mrs	r3, IPSR
 8009f48:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d003      	beq.n	8009f58 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8009f50:	f06f 0305 	mvn.w	r3, #5
 8009f54:	617b      	str	r3, [r7, #20]
 8009f56:	e00b      	b.n	8009f70 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d103      	bne.n	8009f66 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8009f5e:	f06f 0303 	mvn.w	r3, #3
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	e004      	b.n	8009f70 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8009f6a:	6938      	ldr	r0, [r7, #16]
 8009f6c:	f002 f9e6 	bl	800c33c <vTaskSuspend>
  }

  return (stat);
 8009f70:	697b      	ldr	r3, [r7, #20]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3718      	adds	r7, #24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b086      	sub	sp, #24
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f86:	f3ef 8305 	mrs	r3, IPSR
 8009f8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <osThreadResume+0x20>
    stat = osErrorISR;
 8009f92:	f06f 0305 	mvn.w	r3, #5
 8009f96:	617b      	str	r3, [r7, #20]
 8009f98:	e00b      	b.n	8009fb2 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d103      	bne.n	8009fa8 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8009fa0:	f06f 0303 	mvn.w	r3, #3
 8009fa4:	617b      	str	r3, [r7, #20]
 8009fa6:	e004      	b.n	8009fb2 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8009fac:	6938      	ldr	r0, [r7, #16]
 8009fae:	f002 fa6d 	bl	800c48c <vTaskResume>
  }

  return (stat);
 8009fb2:	697b      	ldr	r3, [r7, #20]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fc4:	f3ef 8305 	mrs	r3, IPSR
 8009fc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009fca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d003      	beq.n	8009fd8 <osDelay+0x1c>
    stat = osErrorISR;
 8009fd0:	f06f 0305 	mvn.w	r3, #5
 8009fd4:	60fb      	str	r3, [r7, #12]
 8009fd6:	e007      	b.n	8009fe8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d002      	beq.n	8009fe8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f002 f976 	bl	800c2d4 <vTaskDelay>
    }
  }

  return (stat);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b084      	sub	sp, #16
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f003 fcef 	bl	800d9de <pvTimerGetTimerID>
 800a000:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d005      	beq.n	800a014 <TimerCallback+0x22>
    callb->func (callb->arg);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	6852      	ldr	r2, [r2, #4]
 800a010:	4610      	mov	r0, r2
 800a012:	4798      	blx	r3
  }
}
 800a014:	bf00      	nop
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b08c      	sub	sp, #48	; 0x30
 800a020:	af02      	add	r7, sp, #8
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	607a      	str	r2, [r7, #4]
 800a026:	603b      	str	r3, [r7, #0]
 800a028:	460b      	mov	r3, r1
 800a02a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a02c:	2300      	movs	r3, #0
 800a02e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a030:	f3ef 8305 	mrs	r3, IPSR
 800a034:	613b      	str	r3, [r7, #16]
  return(result);
 800a036:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d163      	bne.n	800a104 <osTimerNew+0xe8>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d060      	beq.n	800a104 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a042:	2008      	movs	r0, #8
 800a044:	f000 fa92 	bl	800a56c <pvPortMalloc>
 800a048:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d059      	beq.n	800a104 <osTimerNew+0xe8>
      callb->func = func;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a05c:	7afb      	ldrb	r3, [r7, #11]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d102      	bne.n	800a068 <osTimerNew+0x4c>
        reload = pdFALSE;
 800a062:	2300      	movs	r3, #0
 800a064:	61fb      	str	r3, [r7, #28]
 800a066:	e001      	b.n	800a06c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800a068:	2301      	movs	r3, #1
 800a06a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800a06c:	f04f 33ff 	mov.w	r3, #4294967295
 800a070:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800a072:	2300      	movs	r3, #0
 800a074:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d01c      	beq.n	800a0b6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <osTimerNew+0x6e>
          name = attr->name;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d006      	beq.n	800a0a0 <osTimerNew+0x84>
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	2b2b      	cmp	r3, #43	; 0x2b
 800a098:	d902      	bls.n	800a0a0 <osTimerNew+0x84>
          mem = 1;
 800a09a:	2301      	movs	r3, #1
 800a09c:	61bb      	str	r3, [r7, #24]
 800a09e:	e00c      	b.n	800a0ba <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d108      	bne.n	800a0ba <osTimerNew+0x9e>
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d104      	bne.n	800a0ba <osTimerNew+0x9e>
            mem = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	61bb      	str	r3, [r7, #24]
 800a0b4:	e001      	b.n	800a0ba <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d10c      	bne.n	800a0da <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	9301      	str	r3, [sp, #4]
 800a0c6:	4b12      	ldr	r3, [pc, #72]	; (800a110 <osTimerNew+0xf4>)
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	69fa      	ldr	r2, [r7, #28]
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0d2:	f003 f8dc 	bl	800d28e <xTimerCreateStatic>
 800a0d6:	6238      	str	r0, [r7, #32]
 800a0d8:	e00b      	b.n	800a0f2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d108      	bne.n	800a0f2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a0e0:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <osTimerNew+0xf4>)
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	69fa      	ldr	r2, [r7, #28]
 800a0e8:	2101      	movs	r1, #1
 800a0ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0ec:	f003 f8ae 	bl	800d24c <xTimerCreate>
 800a0f0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d105      	bne.n	800a104 <osTimerNew+0xe8>
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d002      	beq.n	800a104 <osTimerNew+0xe8>
        vPortFree (callb);
 800a0fe:	6978      	ldr	r0, [r7, #20]
 800a100:	f000 fb00 	bl	800a704 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a104:	6a3b      	ldr	r3, [r7, #32]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3728      	adds	r7, #40	; 0x28
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	08009ff3 	.word	0x08009ff3

0800a114 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a114:	b580      	push	{r7, lr}
 800a116:	b088      	sub	sp, #32
 800a118:	af02      	add	r7, sp, #8
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a122:	f3ef 8305 	mrs	r3, IPSR
 800a126:	60fb      	str	r3, [r7, #12]
  return(result);
 800a128:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d003      	beq.n	800a136 <osTimerStart+0x22>
    stat = osErrorISR;
 800a12e:	f06f 0305 	mvn.w	r3, #5
 800a132:	617b      	str	r3, [r7, #20]
 800a134:	e017      	b.n	800a166 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d103      	bne.n	800a144 <osTimerStart+0x30>
    stat = osErrorParameter;
 800a13c:	f06f 0303 	mvn.w	r3, #3
 800a140:	617b      	str	r3, [r7, #20]
 800a142:	e010      	b.n	800a166 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a144:	2300      	movs	r3, #0
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	2300      	movs	r3, #0
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	2104      	movs	r1, #4
 800a14e:	6938      	ldr	r0, [r7, #16]
 800a150:	f003 f916 	bl	800d380 <xTimerGenericCommand>
 800a154:	4603      	mov	r3, r0
 800a156:	2b01      	cmp	r3, #1
 800a158:	d102      	bne.n	800a160 <osTimerStart+0x4c>
      stat = osOK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	617b      	str	r3, [r7, #20]
 800a15e:	e002      	b.n	800a166 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800a160:	f06f 0302 	mvn.w	r3, #2
 800a164:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a166:	697b      	ldr	r3, [r7, #20]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af02      	add	r7, sp, #8
 800a176:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a17c:	f3ef 8305 	mrs	r3, IPSR
 800a180:	60fb      	str	r3, [r7, #12]
  return(result);
 800a182:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a184:	2b00      	cmp	r3, #0
 800a186:	d003      	beq.n	800a190 <osTimerStop+0x20>
    stat = osErrorISR;
 800a188:	f06f 0305 	mvn.w	r3, #5
 800a18c:	617b      	str	r3, [r7, #20]
 800a18e:	e021      	b.n	800a1d4 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d103      	bne.n	800a19e <osTimerStop+0x2e>
    stat = osErrorParameter;
 800a196:	f06f 0303 	mvn.w	r3, #3
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	e01a      	b.n	800a1d4 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800a19e:	6938      	ldr	r0, [r7, #16]
 800a1a0:	f003 fbf4 	bl	800d98c <xTimerIsTimerActive>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d103      	bne.n	800a1b2 <osTimerStop+0x42>
      stat = osErrorResource;
 800a1aa:	f06f 0302 	mvn.w	r3, #2
 800a1ae:	617b      	str	r3, [r7, #20]
 800a1b0:	e010      	b.n	800a1d4 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	2103      	movs	r1, #3
 800a1bc:	6938      	ldr	r0, [r7, #16]
 800a1be:	f003 f8df 	bl	800d380 <xTimerGenericCommand>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d102      	bne.n	800a1ce <osTimerStop+0x5e>
        stat = osOK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	617b      	str	r3, [r7, #20]
 800a1cc:	e002      	b.n	800a1d4 <osTimerStop+0x64>
      } else {
        stat = osError;
 800a1ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a1d4:	697b      	ldr	r3, [r7, #20]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b08a      	sub	sp, #40	; 0x28
 800a1e2:	af02      	add	r7, sp, #8
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	60b9      	str	r1, [r7, #8]
 800a1e8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1ee:	f3ef 8305 	mrs	r3, IPSR
 800a1f2:	613b      	str	r3, [r7, #16]
  return(result);
 800a1f4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d175      	bne.n	800a2e6 <osSemaphoreNew+0x108>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d072      	beq.n	800a2e6 <osSemaphoreNew+0x108>
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	429a      	cmp	r2, r3
 800a206:	d86e      	bhi.n	800a2e6 <osSemaphoreNew+0x108>
    mem = -1;
 800a208:	f04f 33ff 	mov.w	r3, #4294967295
 800a20c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d015      	beq.n	800a240 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d006      	beq.n	800a22a <osSemaphoreNew+0x4c>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	2b4f      	cmp	r3, #79	; 0x4f
 800a222:	d902      	bls.n	800a22a <osSemaphoreNew+0x4c>
        mem = 1;
 800a224:	2301      	movs	r3, #1
 800a226:	61bb      	str	r3, [r7, #24]
 800a228:	e00c      	b.n	800a244 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d108      	bne.n	800a244 <osSemaphoreNew+0x66>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d104      	bne.n	800a244 <osSemaphoreNew+0x66>
          mem = 0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	61bb      	str	r3, [r7, #24]
 800a23e:	e001      	b.n	800a244 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24a:	d04c      	beq.n	800a2e6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d128      	bne.n	800a2a4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d10a      	bne.n	800a26e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	2203      	movs	r2, #3
 800a25e:	9200      	str	r2, [sp, #0]
 800a260:	2200      	movs	r2, #0
 800a262:	2100      	movs	r1, #0
 800a264:	2001      	movs	r0, #1
 800a266:	f000 fed7 	bl	800b018 <xQueueGenericCreateStatic>
 800a26a:	61f8      	str	r0, [r7, #28]
 800a26c:	e005      	b.n	800a27a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a26e:	2203      	movs	r2, #3
 800a270:	2100      	movs	r1, #0
 800a272:	2001      	movs	r0, #1
 800a274:	f000 ff48 	bl	800b108 <xQueueGenericCreate>
 800a278:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d022      	beq.n	800a2c6 <osSemaphoreNew+0xe8>
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d01f      	beq.n	800a2c6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a286:	2300      	movs	r3, #0
 800a288:	2200      	movs	r2, #0
 800a28a:	2100      	movs	r1, #0
 800a28c:	69f8      	ldr	r0, [r7, #28]
 800a28e:	f001 f803 	bl	800b298 <xQueueGenericSend>
 800a292:	4603      	mov	r3, r0
 800a294:	2b01      	cmp	r3, #1
 800a296:	d016      	beq.n	800a2c6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a298:	69f8      	ldr	r0, [r7, #28]
 800a29a:	f001 fc8f 	bl	800bbbc <vQueueDelete>
            hSemaphore = NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	61fb      	str	r3, [r7, #28]
 800a2a2:	e010      	b.n	800a2c6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d108      	bne.n	800a2bc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	68b9      	ldr	r1, [r7, #8]
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f000 ff85 	bl	800b1c2 <xQueueCreateCountingSemaphoreStatic>
 800a2b8:	61f8      	str	r0, [r7, #28]
 800a2ba:	e004      	b.n	800a2c6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a2bc:	68b9      	ldr	r1, [r7, #8]
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f000 ffb6 	bl	800b230 <xQueueCreateCountingSemaphore>
 800a2c4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00c      	beq.n	800a2e6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d003      	beq.n	800a2da <osSemaphoreNew+0xfc>
          name = attr->name;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	617b      	str	r3, [r7, #20]
 800a2d8:	e001      	b.n	800a2de <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a2de:	6979      	ldr	r1, [r7, #20]
 800a2e0:	69f8      	ldr	r0, [r7, #28]
 800a2e2:	f001 fdb7 	bl	800be54 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a2e6:	69fb      	ldr	r3, [r7, #28]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3720      	adds	r7, #32
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d103      	bne.n	800a310 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a308:	f06f 0303 	mvn.w	r3, #3
 800a30c:	617b      	str	r3, [r7, #20]
 800a30e:	e039      	b.n	800a384 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a310:	f3ef 8305 	mrs	r3, IPSR
 800a314:	60fb      	str	r3, [r7, #12]
  return(result);
 800a316:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d022      	beq.n	800a362 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d003      	beq.n	800a32a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a322:	f06f 0303 	mvn.w	r3, #3
 800a326:	617b      	str	r3, [r7, #20]
 800a328:	e02c      	b.n	800a384 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a32a:	2300      	movs	r3, #0
 800a32c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a32e:	f107 0308 	add.w	r3, r7, #8
 800a332:	461a      	mov	r2, r3
 800a334:	2100      	movs	r1, #0
 800a336:	6938      	ldr	r0, [r7, #16]
 800a338:	f001 fbc0 	bl	800babc <xQueueReceiveFromISR>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d003      	beq.n	800a34a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a342:	f06f 0302 	mvn.w	r3, #2
 800a346:	617b      	str	r3, [r7, #20]
 800a348:	e01c      	b.n	800a384 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d019      	beq.n	800a384 <osSemaphoreAcquire+0x94>
 800a350:	4b0f      	ldr	r3, [pc, #60]	; (800a390 <osSemaphoreAcquire+0xa0>)
 800a352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a356:	601a      	str	r2, [r3, #0]
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	e010      	b.n	800a384 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	6938      	ldr	r0, [r7, #16]
 800a366:	f001 fa9d 	bl	800b8a4 <xQueueSemaphoreTake>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d009      	beq.n	800a384 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d003      	beq.n	800a37e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a376:	f06f 0301 	mvn.w	r3, #1
 800a37a:	617b      	str	r3, [r7, #20]
 800a37c:	e002      	b.n	800a384 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a37e:	f06f 0302 	mvn.w	r3, #2
 800a382:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a384:	697b      	ldr	r3, [r7, #20]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3718      	adds	r7, #24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	e000ed04 	.word	0xe000ed04

0800a394 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d103      	bne.n	800a3b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a3aa:	f06f 0303 	mvn.w	r3, #3
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	e02c      	b.n	800a40c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3b2:	f3ef 8305 	mrs	r3, IPSR
 800a3b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d01a      	beq.n	800a3f4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a3c2:	f107 0308 	add.w	r3, r7, #8
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	6938      	ldr	r0, [r7, #16]
 800a3ca:	f001 f8fe 	bl	800b5ca <xQueueGiveFromISR>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d003      	beq.n	800a3dc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a3d4:	f06f 0302 	mvn.w	r3, #2
 800a3d8:	617b      	str	r3, [r7, #20]
 800a3da:	e017      	b.n	800a40c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d014      	beq.n	800a40c <osSemaphoreRelease+0x78>
 800a3e2:	4b0d      	ldr	r3, [pc, #52]	; (800a418 <osSemaphoreRelease+0x84>)
 800a3e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e8:	601a      	str	r2, [r3, #0]
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	e00b      	b.n	800a40c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	6938      	ldr	r0, [r7, #16]
 800a3fc:	f000 ff4c 	bl	800b298 <xQueueGenericSend>
 800a400:	4603      	mov	r3, r0
 800a402:	2b01      	cmp	r3, #1
 800a404:	d002      	beq.n	800a40c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a406:	f06f 0302 	mvn.w	r3, #2
 800a40a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a40c:	697b      	ldr	r3, [r7, #20]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	e000ed04 	.word	0xe000ed04

0800a41c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b08a      	sub	sp, #40	; 0x28
 800a420:	af02      	add	r7, sp, #8
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a428:	2300      	movs	r3, #0
 800a42a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a42c:	f3ef 8305 	mrs	r3, IPSR
 800a430:	613b      	str	r3, [r7, #16]
  return(result);
 800a432:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a434:	2b00      	cmp	r3, #0
 800a436:	d15f      	bne.n	800a4f8 <osMessageQueueNew+0xdc>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d05c      	beq.n	800a4f8 <osMessageQueueNew+0xdc>
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d059      	beq.n	800a4f8 <osMessageQueueNew+0xdc>
    mem = -1;
 800a444:	f04f 33ff 	mov.w	r3, #4294967295
 800a448:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d029      	beq.n	800a4a4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d012      	beq.n	800a47e <osMessageQueueNew+0x62>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	2b4f      	cmp	r3, #79	; 0x4f
 800a45e:	d90e      	bls.n	800a47e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00a      	beq.n	800a47e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	695a      	ldr	r2, [r3, #20]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	68b9      	ldr	r1, [r7, #8]
 800a470:	fb01 f303 	mul.w	r3, r1, r3
 800a474:	429a      	cmp	r2, r3
 800a476:	d302      	bcc.n	800a47e <osMessageQueueNew+0x62>
        mem = 1;
 800a478:	2301      	movs	r3, #1
 800a47a:	61bb      	str	r3, [r7, #24]
 800a47c:	e014      	b.n	800a4a8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d110      	bne.n	800a4a8 <osMessageQueueNew+0x8c>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10c      	bne.n	800a4a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a492:	2b00      	cmp	r3, #0
 800a494:	d108      	bne.n	800a4a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d104      	bne.n	800a4a8 <osMessageQueueNew+0x8c>
          mem = 0;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	61bb      	str	r3, [r7, #24]
 800a4a2:	e001      	b.n	800a4a8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d10b      	bne.n	800a4c6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	691a      	ldr	r2, [r3, #16]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	9100      	str	r1, [sp, #0]
 800a4ba:	68b9      	ldr	r1, [r7, #8]
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 fdab 	bl	800b018 <xQueueGenericCreateStatic>
 800a4c2:	61f8      	str	r0, [r7, #28]
 800a4c4:	e008      	b.n	800a4d8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d105      	bne.n	800a4d8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	68b9      	ldr	r1, [r7, #8]
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f000 fe19 	bl	800b108 <xQueueGenericCreate>
 800a4d6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00c      	beq.n	800a4f8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d003      	beq.n	800a4ec <osMessageQueueNew+0xd0>
        name = attr->name;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	617b      	str	r3, [r7, #20]
 800a4ea:	e001      	b.n	800a4f0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a4f0:	6979      	ldr	r1, [r7, #20]
 800a4f2:	69f8      	ldr	r0, [r7, #28]
 800a4f4:	f001 fcae 	bl	800be54 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a4f8:	69fb      	ldr	r3, [r7, #28]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3720      	adds	r7, #32
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
	...

0800a504 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4a07      	ldr	r2, [pc, #28]	; (800a530 <vApplicationGetIdleTaskMemory+0x2c>)
 800a514:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	4a06      	ldr	r2, [pc, #24]	; (800a534 <vApplicationGetIdleTaskMemory+0x30>)
 800a51a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2280      	movs	r2, #128	; 0x80
 800a520:	601a      	str	r2, [r3, #0]
}
 800a522:	bf00      	nop
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	20000600 	.word	0x20000600
 800a534:	200006bc 	.word	0x200006bc

0800a538 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4a07      	ldr	r2, [pc, #28]	; (800a564 <vApplicationGetTimerTaskMemory+0x2c>)
 800a548:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	4a06      	ldr	r2, [pc, #24]	; (800a568 <vApplicationGetTimerTaskMemory+0x30>)
 800a54e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a556:	601a      	str	r2, [r3, #0]
}
 800a558:	bf00      	nop
 800a55a:	3714      	adds	r7, #20
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	200008bc 	.word	0x200008bc
 800a568:	20000978 	.word	0x20000978

0800a56c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b08a      	sub	sp, #40	; 0x28
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a574:	2300      	movs	r3, #0
 800a576:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a578:	f002 f856 	bl	800c628 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a57c:	4b5b      	ldr	r3, [pc, #364]	; (800a6ec <pvPortMalloc+0x180>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d101      	bne.n	800a588 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a584:	f000 f920 	bl	800a7c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a588:	4b59      	ldr	r3, [pc, #356]	; (800a6f0 <pvPortMalloc+0x184>)
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4013      	ands	r3, r2
 800a590:	2b00      	cmp	r3, #0
 800a592:	f040 8093 	bne.w	800a6bc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d01d      	beq.n	800a5d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a59c:	2208      	movs	r2, #8
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f003 0307 	and.w	r3, r3, #7
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d014      	beq.n	800a5d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f023 0307 	bic.w	r3, r3, #7
 800a5b4:	3308      	adds	r3, #8
 800a5b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f003 0307 	and.w	r3, r3, #7
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00a      	beq.n	800a5d8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a5d4:	bf00      	nop
 800a5d6:	e7fe      	b.n	800a5d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d06e      	beq.n	800a6bc <pvPortMalloc+0x150>
 800a5de:	4b45      	ldr	r3, [pc, #276]	; (800a6f4 <pvPortMalloc+0x188>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d869      	bhi.n	800a6bc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5e8:	4b43      	ldr	r3, [pc, #268]	; (800a6f8 <pvPortMalloc+0x18c>)
 800a5ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5ec:	4b42      	ldr	r3, [pc, #264]	; (800a6f8 <pvPortMalloc+0x18c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5f2:	e004      	b.n	800a5fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	429a      	cmp	r2, r3
 800a606:	d903      	bls.n	800a610 <pvPortMalloc+0xa4>
 800a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d1f1      	bne.n	800a5f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a610:	4b36      	ldr	r3, [pc, #216]	; (800a6ec <pvPortMalloc+0x180>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a616:	429a      	cmp	r2, r3
 800a618:	d050      	beq.n	800a6bc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a61a:	6a3b      	ldr	r3, [r7, #32]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2208      	movs	r2, #8
 800a620:	4413      	add	r3, r2
 800a622:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	685a      	ldr	r2, [r3, #4]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	1ad2      	subs	r2, r2, r3
 800a634:	2308      	movs	r3, #8
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	429a      	cmp	r2, r3
 800a63a:	d91f      	bls.n	800a67c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a63c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4413      	add	r3, r2
 800a642:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	f003 0307 	and.w	r3, r3, #7
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00a      	beq.n	800a664 <pvPortMalloc+0xf8>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	613b      	str	r3, [r7, #16]
}
 800a660:	bf00      	nop
 800a662:	e7fe      	b.n	800a662 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	1ad2      	subs	r2, r2, r3
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a676:	69b8      	ldr	r0, [r7, #24]
 800a678:	f000 f908 	bl	800a88c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a67c:	4b1d      	ldr	r3, [pc, #116]	; (800a6f4 <pvPortMalloc+0x188>)
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	4a1b      	ldr	r2, [pc, #108]	; (800a6f4 <pvPortMalloc+0x188>)
 800a688:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a68a:	4b1a      	ldr	r3, [pc, #104]	; (800a6f4 <pvPortMalloc+0x188>)
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	4b1b      	ldr	r3, [pc, #108]	; (800a6fc <pvPortMalloc+0x190>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	429a      	cmp	r2, r3
 800a694:	d203      	bcs.n	800a69e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a696:	4b17      	ldr	r3, [pc, #92]	; (800a6f4 <pvPortMalloc+0x188>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a18      	ldr	r2, [pc, #96]	; (800a6fc <pvPortMalloc+0x190>)
 800a69c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	685a      	ldr	r2, [r3, #4]
 800a6a2:	4b13      	ldr	r3, [pc, #76]	; (800a6f0 <pvPortMalloc+0x184>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	431a      	orrs	r2, r3
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6b2:	4b13      	ldr	r3, [pc, #76]	; (800a700 <pvPortMalloc+0x194>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	4a11      	ldr	r2, [pc, #68]	; (800a700 <pvPortMalloc+0x194>)
 800a6ba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6bc:	f001 ffc2 	bl	800c644 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	f003 0307 	and.w	r3, r3, #7
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00a      	beq.n	800a6e0 <pvPortMalloc+0x174>
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	60fb      	str	r3, [r7, #12]
}
 800a6dc:	bf00      	nop
 800a6de:	e7fe      	b.n	800a6de <pvPortMalloc+0x172>
	return pvReturn;
 800a6e0:	69fb      	ldr	r3, [r7, #28]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3728      	adds	r7, #40	; 0x28
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	20004980 	.word	0x20004980
 800a6f0:	20004994 	.word	0x20004994
 800a6f4:	20004984 	.word	0x20004984
 800a6f8:	20004978 	.word	0x20004978
 800a6fc:	20004988 	.word	0x20004988
 800a700:	2000498c 	.word	0x2000498c

0800a704 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d04d      	beq.n	800a7b2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a716:	2308      	movs	r3, #8
 800a718:	425b      	negs	r3, r3
 800a71a:	697a      	ldr	r2, [r7, #20]
 800a71c:	4413      	add	r3, r2
 800a71e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	4b24      	ldr	r3, [pc, #144]	; (800a7bc <vPortFree+0xb8>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4013      	ands	r3, r2
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10a      	bne.n	800a748 <vPortFree+0x44>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	60fb      	str	r3, [r7, #12]
}
 800a744:	bf00      	nop
 800a746:	e7fe      	b.n	800a746 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00a      	beq.n	800a766 <vPortFree+0x62>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	60bb      	str	r3, [r7, #8]
}
 800a762:	bf00      	nop
 800a764:	e7fe      	b.n	800a764 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	685a      	ldr	r2, [r3, #4]
 800a76a:	4b14      	ldr	r3, [pc, #80]	; (800a7bc <vPortFree+0xb8>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4013      	ands	r3, r2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d01e      	beq.n	800a7b2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d11a      	bne.n	800a7b2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	685a      	ldr	r2, [r3, #4]
 800a780:	4b0e      	ldr	r3, [pc, #56]	; (800a7bc <vPortFree+0xb8>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	43db      	mvns	r3, r3
 800a786:	401a      	ands	r2, r3
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a78c:	f001 ff4c 	bl	800c628 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	685a      	ldr	r2, [r3, #4]
 800a794:	4b0a      	ldr	r3, [pc, #40]	; (800a7c0 <vPortFree+0xbc>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4413      	add	r3, r2
 800a79a:	4a09      	ldr	r2, [pc, #36]	; (800a7c0 <vPortFree+0xbc>)
 800a79c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a79e:	6938      	ldr	r0, [r7, #16]
 800a7a0:	f000 f874 	bl	800a88c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7a4:	4b07      	ldr	r3, [pc, #28]	; (800a7c4 <vPortFree+0xc0>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	4a06      	ldr	r2, [pc, #24]	; (800a7c4 <vPortFree+0xc0>)
 800a7ac:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7ae:	f001 ff49 	bl	800c644 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7b2:	bf00      	nop
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20004994 	.word	0x20004994
 800a7c0:	20004984 	.word	0x20004984
 800a7c4:	20004990 	.word	0x20004990

0800a7c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7ce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a7d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7d4:	4b27      	ldr	r3, [pc, #156]	; (800a874 <prvHeapInit+0xac>)
 800a7d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f003 0307 	and.w	r3, r3, #7
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00c      	beq.n	800a7fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	3307      	adds	r3, #7
 800a7e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f023 0307 	bic.w	r3, r3, #7
 800a7ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	4a1f      	ldr	r2, [pc, #124]	; (800a874 <prvHeapInit+0xac>)
 800a7f8:	4413      	add	r3, r2
 800a7fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a800:	4a1d      	ldr	r2, [pc, #116]	; (800a878 <prvHeapInit+0xb0>)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a806:	4b1c      	ldr	r3, [pc, #112]	; (800a878 <prvHeapInit+0xb0>)
 800a808:	2200      	movs	r2, #0
 800a80a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	4413      	add	r3, r2
 800a812:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a814:	2208      	movs	r2, #8
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	1a9b      	subs	r3, r3, r2
 800a81a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f023 0307 	bic.w	r3, r3, #7
 800a822:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	4a15      	ldr	r2, [pc, #84]	; (800a87c <prvHeapInit+0xb4>)
 800a828:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a82a:	4b14      	ldr	r3, [pc, #80]	; (800a87c <prvHeapInit+0xb4>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2200      	movs	r2, #0
 800a830:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a832:	4b12      	ldr	r3, [pc, #72]	; (800a87c <prvHeapInit+0xb4>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2200      	movs	r2, #0
 800a838:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	1ad2      	subs	r2, r2, r3
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a848:	4b0c      	ldr	r3, [pc, #48]	; (800a87c <prvHeapInit+0xb4>)
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	4a0a      	ldr	r2, [pc, #40]	; (800a880 <prvHeapInit+0xb8>)
 800a856:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	4a09      	ldr	r2, [pc, #36]	; (800a884 <prvHeapInit+0xbc>)
 800a85e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a860:	4b09      	ldr	r3, [pc, #36]	; (800a888 <prvHeapInit+0xc0>)
 800a862:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a866:	601a      	str	r2, [r3, #0]
}
 800a868:	bf00      	nop
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	20000d78 	.word	0x20000d78
 800a878:	20004978 	.word	0x20004978
 800a87c:	20004980 	.word	0x20004980
 800a880:	20004988 	.word	0x20004988
 800a884:	20004984 	.word	0x20004984
 800a888:	20004994 	.word	0x20004994

0800a88c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a894:	4b28      	ldr	r3, [pc, #160]	; (800a938 <prvInsertBlockIntoFreeList+0xac>)
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	e002      	b.n	800a8a0 <prvInsertBlockIntoFreeList+0x14>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d8f7      	bhi.n	800a89a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d108      	bne.n	800a8ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	685a      	ldr	r2, [r3, #4]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	441a      	add	r2, r3
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	441a      	add	r2, r3
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d118      	bne.n	800a914 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	4b15      	ldr	r3, [pc, #84]	; (800a93c <prvInsertBlockIntoFreeList+0xb0>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d00d      	beq.n	800a90a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	685a      	ldr	r2, [r3, #4]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	441a      	add	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	e008      	b.n	800a91c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a90a:	4b0c      	ldr	r3, [pc, #48]	; (800a93c <prvInsertBlockIntoFreeList+0xb0>)
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	601a      	str	r2, [r3, #0]
 800a912:	e003      	b.n	800a91c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	429a      	cmp	r2, r3
 800a922:	d002      	beq.n	800a92a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a92a:	bf00      	nop
 800a92c:	3714      	adds	r7, #20
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	20004978 	.word	0x20004978
 800a93c:	20004980 	.word	0x20004980

0800a940 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f103 0208 	add.w	r2, r3, #8
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f04f 32ff 	mov.w	r2, #4294967295
 800a958:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f103 0208 	add.w	r2, r3, #8
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f103 0208 	add.w	r2, r3, #8
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a98e:	bf00      	nop
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a99a:	b480      	push	{r7}
 800a99c:	b085      	sub	sp, #20
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	689a      	ldr	r2, [r3, #8]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	1c5a      	adds	r2, r3, #1
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	601a      	str	r2, [r3, #0]
}
 800a9d6:	bf00      	nop
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b085      	sub	sp, #20
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f8:	d103      	bne.n	800aa02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	60fb      	str	r3, [r7, #12]
 800aa00:	e00c      	b.n	800aa1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	3308      	adds	r3, #8
 800aa06:	60fb      	str	r3, [r7, #12]
 800aa08:	e002      	b.n	800aa10 <vListInsert+0x2e>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	60fb      	str	r3, [r7, #12]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68ba      	ldr	r2, [r7, #8]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d2f6      	bcs.n	800aa0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	685a      	ldr	r2, [r3, #4]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	683a      	ldr	r2, [r7, #0]
 800aa2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	1c5a      	adds	r2, r3, #1
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	601a      	str	r2, [r3, #0]
}
 800aa48:	bf00      	nop
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	6892      	ldr	r2, [r2, #8]
 800aa6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	6852      	ldr	r2, [r2, #4]
 800aa74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d103      	bne.n	800aa88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	689a      	ldr	r2, [r3, #8]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	1e5a      	subs	r2, r3, #1
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	3b04      	subs	r3, #4
 800aab8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	3b04      	subs	r3, #4
 800aac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	f023 0201 	bic.w	r2, r3, #1
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	3b04      	subs	r3, #4
 800aad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aad8:	4a0c      	ldr	r2, [pc, #48]	; (800ab0c <pxPortInitialiseStack+0x64>)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	3b14      	subs	r3, #20
 800aae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3b04      	subs	r3, #4
 800aaee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f06f 0202 	mvn.w	r2, #2
 800aaf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	3b20      	subs	r3, #32
 800aafc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aafe:	68fb      	ldr	r3, [r7, #12]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	0800ab11 	.word	0x0800ab11

0800ab10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab1a:	4b12      	ldr	r3, [pc, #72]	; (800ab64 <prvTaskExitError+0x54>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab22:	d00a      	beq.n	800ab3a <prvTaskExitError+0x2a>
	__asm volatile
 800ab24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	60fb      	str	r3, [r7, #12]
}
 800ab36:	bf00      	nop
 800ab38:	e7fe      	b.n	800ab38 <prvTaskExitError+0x28>
	__asm volatile
 800ab3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3e:	f383 8811 	msr	BASEPRI, r3
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	60bb      	str	r3, [r7, #8]
}
 800ab4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab4e:	bf00      	nop
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d0fc      	beq.n	800ab50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab56:	bf00      	nop
 800ab58:	bf00      	nop
 800ab5a:	3714      	adds	r7, #20
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr
 800ab64:	20000034 	.word	0x20000034
	...

0800ab70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab70:	4b07      	ldr	r3, [pc, #28]	; (800ab90 <pxCurrentTCBConst2>)
 800ab72:	6819      	ldr	r1, [r3, #0]
 800ab74:	6808      	ldr	r0, [r1, #0]
 800ab76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7a:	f380 8809 	msr	PSP, r0
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f04f 0000 	mov.w	r0, #0
 800ab86:	f380 8811 	msr	BASEPRI, r0
 800ab8a:	4770      	bx	lr
 800ab8c:	f3af 8000 	nop.w

0800ab90 <pxCurrentTCBConst2>:
 800ab90:	200049e0 	.word	0x200049e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab94:	bf00      	nop
 800ab96:	bf00      	nop

0800ab98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab98:	4808      	ldr	r0, [pc, #32]	; (800abbc <prvPortStartFirstTask+0x24>)
 800ab9a:	6800      	ldr	r0, [r0, #0]
 800ab9c:	6800      	ldr	r0, [r0, #0]
 800ab9e:	f380 8808 	msr	MSP, r0
 800aba2:	f04f 0000 	mov.w	r0, #0
 800aba6:	f380 8814 	msr	CONTROL, r0
 800abaa:	b662      	cpsie	i
 800abac:	b661      	cpsie	f
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	df00      	svc	0
 800abb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abba:	bf00      	nop
 800abbc:	e000ed08 	.word	0xe000ed08

0800abc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800abc6:	4b46      	ldr	r3, [pc, #280]	; (800ace0 <xPortStartScheduler+0x120>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a46      	ldr	r2, [pc, #280]	; (800ace4 <xPortStartScheduler+0x124>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d10a      	bne.n	800abe6 <xPortStartScheduler+0x26>
	__asm volatile
 800abd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	613b      	str	r3, [r7, #16]
}
 800abe2:	bf00      	nop
 800abe4:	e7fe      	b.n	800abe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800abe6:	4b3e      	ldr	r3, [pc, #248]	; (800ace0 <xPortStartScheduler+0x120>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a3f      	ldr	r2, [pc, #252]	; (800ace8 <xPortStartScheduler+0x128>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d10a      	bne.n	800ac06 <xPortStartScheduler+0x46>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	60fb      	str	r3, [r7, #12]
}
 800ac02:	bf00      	nop
 800ac04:	e7fe      	b.n	800ac04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac06:	4b39      	ldr	r3, [pc, #228]	; (800acec <xPortStartScheduler+0x12c>)
 800ac08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	22ff      	movs	r2, #255	; 0xff
 800ac16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac20:	78fb      	ldrb	r3, [r7, #3]
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac28:	b2da      	uxtb	r2, r3
 800ac2a:	4b31      	ldr	r3, [pc, #196]	; (800acf0 <xPortStartScheduler+0x130>)
 800ac2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac2e:	4b31      	ldr	r3, [pc, #196]	; (800acf4 <xPortStartScheduler+0x134>)
 800ac30:	2207      	movs	r2, #7
 800ac32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac34:	e009      	b.n	800ac4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ac36:	4b2f      	ldr	r3, [pc, #188]	; (800acf4 <xPortStartScheduler+0x134>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	4a2d      	ldr	r2, [pc, #180]	; (800acf4 <xPortStartScheduler+0x134>)
 800ac3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac40:	78fb      	ldrb	r3, [r7, #3]
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	005b      	lsls	r3, r3, #1
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac4a:	78fb      	ldrb	r3, [r7, #3]
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac52:	2b80      	cmp	r3, #128	; 0x80
 800ac54:	d0ef      	beq.n	800ac36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac56:	4b27      	ldr	r3, [pc, #156]	; (800acf4 <xPortStartScheduler+0x134>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f1c3 0307 	rsb	r3, r3, #7
 800ac5e:	2b04      	cmp	r3, #4
 800ac60:	d00a      	beq.n	800ac78 <xPortStartScheduler+0xb8>
	__asm volatile
 800ac62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac66:	f383 8811 	msr	BASEPRI, r3
 800ac6a:	f3bf 8f6f 	isb	sy
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	60bb      	str	r3, [r7, #8]
}
 800ac74:	bf00      	nop
 800ac76:	e7fe      	b.n	800ac76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac78:	4b1e      	ldr	r3, [pc, #120]	; (800acf4 <xPortStartScheduler+0x134>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	021b      	lsls	r3, r3, #8
 800ac7e:	4a1d      	ldr	r2, [pc, #116]	; (800acf4 <xPortStartScheduler+0x134>)
 800ac80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac82:	4b1c      	ldr	r3, [pc, #112]	; (800acf4 <xPortStartScheduler+0x134>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac8a:	4a1a      	ldr	r2, [pc, #104]	; (800acf4 <xPortStartScheduler+0x134>)
 800ac8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	b2da      	uxtb	r2, r3
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac96:	4b18      	ldr	r3, [pc, #96]	; (800acf8 <xPortStartScheduler+0x138>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a17      	ldr	r2, [pc, #92]	; (800acf8 <xPortStartScheduler+0x138>)
 800ac9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aca2:	4b15      	ldr	r3, [pc, #84]	; (800acf8 <xPortStartScheduler+0x138>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a14      	ldr	r2, [pc, #80]	; (800acf8 <xPortStartScheduler+0x138>)
 800aca8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800acac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800acae:	f000 f8dd 	bl	800ae6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800acb2:	4b12      	ldr	r3, [pc, #72]	; (800acfc <xPortStartScheduler+0x13c>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800acb8:	f000 f8fc 	bl	800aeb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800acbc:	4b10      	ldr	r3, [pc, #64]	; (800ad00 <xPortStartScheduler+0x140>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a0f      	ldr	r2, [pc, #60]	; (800ad00 <xPortStartScheduler+0x140>)
 800acc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800acc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800acc8:	f7ff ff66 	bl	800ab98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800accc:	f001 fe22 	bl	800c914 <vTaskSwitchContext>
	prvTaskExitError();
 800acd0:	f7ff ff1e 	bl	800ab10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3718      	adds	r7, #24
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	e000ed00 	.word	0xe000ed00
 800ace4:	410fc271 	.word	0x410fc271
 800ace8:	410fc270 	.word	0x410fc270
 800acec:	e000e400 	.word	0xe000e400
 800acf0:	20004998 	.word	0x20004998
 800acf4:	2000499c 	.word	0x2000499c
 800acf8:	e000ed20 	.word	0xe000ed20
 800acfc:	20000034 	.word	0x20000034
 800ad00:	e000ef34 	.word	0xe000ef34

0800ad04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
	__asm volatile
 800ad0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0e:	f383 8811 	msr	BASEPRI, r3
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	607b      	str	r3, [r7, #4]
}
 800ad1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad1e:	4b0f      	ldr	r3, [pc, #60]	; (800ad5c <vPortEnterCritical+0x58>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3301      	adds	r3, #1
 800ad24:	4a0d      	ldr	r2, [pc, #52]	; (800ad5c <vPortEnterCritical+0x58>)
 800ad26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad28:	4b0c      	ldr	r3, [pc, #48]	; (800ad5c <vPortEnterCritical+0x58>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d10f      	bne.n	800ad50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad30:	4b0b      	ldr	r3, [pc, #44]	; (800ad60 <vPortEnterCritical+0x5c>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00a      	beq.n	800ad50 <vPortEnterCritical+0x4c>
	__asm volatile
 800ad3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	603b      	str	r3, [r7, #0]
}
 800ad4c:	bf00      	nop
 800ad4e:	e7fe      	b.n	800ad4e <vPortEnterCritical+0x4a>
	}
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	20000034 	.word	0x20000034
 800ad60:	e000ed04 	.word	0xe000ed04

0800ad64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad6a:	4b12      	ldr	r3, [pc, #72]	; (800adb4 <vPortExitCritical+0x50>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10a      	bne.n	800ad88 <vPortExitCritical+0x24>
	__asm volatile
 800ad72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	607b      	str	r3, [r7, #4]
}
 800ad84:	bf00      	nop
 800ad86:	e7fe      	b.n	800ad86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ad88:	4b0a      	ldr	r3, [pc, #40]	; (800adb4 <vPortExitCritical+0x50>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	4a09      	ldr	r2, [pc, #36]	; (800adb4 <vPortExitCritical+0x50>)
 800ad90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad92:	4b08      	ldr	r3, [pc, #32]	; (800adb4 <vPortExitCritical+0x50>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d105      	bne.n	800ada6 <vPortExitCritical+0x42>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ada4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ada6:	bf00      	nop
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	20000034 	.word	0x20000034
	...

0800adc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800adc0:	f3ef 8009 	mrs	r0, PSP
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	4b15      	ldr	r3, [pc, #84]	; (800ae20 <pxCurrentTCBConst>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	f01e 0f10 	tst.w	lr, #16
 800add0:	bf08      	it	eq
 800add2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800add6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adda:	6010      	str	r0, [r2, #0]
 800addc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ade0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ade4:	f380 8811 	msr	BASEPRI, r0
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f001 fd90 	bl	800c914 <vTaskSwitchContext>
 800adf4:	f04f 0000 	mov.w	r0, #0
 800adf8:	f380 8811 	msr	BASEPRI, r0
 800adfc:	bc09      	pop	{r0, r3}
 800adfe:	6819      	ldr	r1, [r3, #0]
 800ae00:	6808      	ldr	r0, [r1, #0]
 800ae02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae06:	f01e 0f10 	tst.w	lr, #16
 800ae0a:	bf08      	it	eq
 800ae0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae10:	f380 8809 	msr	PSP, r0
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	f3af 8000 	nop.w

0800ae20 <pxCurrentTCBConst>:
 800ae20:	200049e0 	.word	0x200049e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop

0800ae28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	607b      	str	r3, [r7, #4]
}
 800ae40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae42:	f001 fcad 	bl	800c7a0 <xTaskIncrementTick>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d003      	beq.n	800ae54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae4c:	4b06      	ldr	r3, [pc, #24]	; (800ae68 <xPortSysTickHandler+0x40>)
 800ae4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	2300      	movs	r3, #0
 800ae56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	f383 8811 	msr	BASEPRI, r3
}
 800ae5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae60:	bf00      	nop
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	e000ed04 	.word	0xe000ed04

0800ae6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae70:	4b0b      	ldr	r3, [pc, #44]	; (800aea0 <vPortSetupTimerInterrupt+0x34>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae76:	4b0b      	ldr	r3, [pc, #44]	; (800aea4 <vPortSetupTimerInterrupt+0x38>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae7c:	4b0a      	ldr	r3, [pc, #40]	; (800aea8 <vPortSetupTimerInterrupt+0x3c>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a0a      	ldr	r2, [pc, #40]	; (800aeac <vPortSetupTimerInterrupt+0x40>)
 800ae82:	fba2 2303 	umull	r2, r3, r2, r3
 800ae86:	099b      	lsrs	r3, r3, #6
 800ae88:	4a09      	ldr	r2, [pc, #36]	; (800aeb0 <vPortSetupTimerInterrupt+0x44>)
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae8e:	4b04      	ldr	r3, [pc, #16]	; (800aea0 <vPortSetupTimerInterrupt+0x34>)
 800ae90:	2207      	movs	r2, #7
 800ae92:	601a      	str	r2, [r3, #0]
}
 800ae94:	bf00      	nop
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	e000e010 	.word	0xe000e010
 800aea4:	e000e018 	.word	0xe000e018
 800aea8:	20000018 	.word	0x20000018
 800aeac:	10624dd3 	.word	0x10624dd3
 800aeb0:	e000e014 	.word	0xe000e014

0800aeb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aeb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aec4 <vPortEnableVFP+0x10>
 800aeb8:	6801      	ldr	r1, [r0, #0]
 800aeba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aebe:	6001      	str	r1, [r0, #0]
 800aec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aec2:	bf00      	nop
 800aec4:	e000ed88 	.word	0xe000ed88

0800aec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aece:	f3ef 8305 	mrs	r3, IPSR
 800aed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b0f      	cmp	r3, #15
 800aed8:	d914      	bls.n	800af04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aeda:	4a17      	ldr	r2, [pc, #92]	; (800af38 <vPortValidateInterruptPriority+0x70>)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4413      	add	r3, r2
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aee4:	4b15      	ldr	r3, [pc, #84]	; (800af3c <vPortValidateInterruptPriority+0x74>)
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	7afa      	ldrb	r2, [r7, #11]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d20a      	bcs.n	800af04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	607b      	str	r3, [r7, #4]
}
 800af00:	bf00      	nop
 800af02:	e7fe      	b.n	800af02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af04:	4b0e      	ldr	r3, [pc, #56]	; (800af40 <vPortValidateInterruptPriority+0x78>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af0c:	4b0d      	ldr	r3, [pc, #52]	; (800af44 <vPortValidateInterruptPriority+0x7c>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	429a      	cmp	r2, r3
 800af12:	d90a      	bls.n	800af2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800af14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af18:	f383 8811 	msr	BASEPRI, r3
 800af1c:	f3bf 8f6f 	isb	sy
 800af20:	f3bf 8f4f 	dsb	sy
 800af24:	603b      	str	r3, [r7, #0]
}
 800af26:	bf00      	nop
 800af28:	e7fe      	b.n	800af28 <vPortValidateInterruptPriority+0x60>
	}
 800af2a:	bf00      	nop
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	e000e3f0 	.word	0xe000e3f0
 800af3c:	20004998 	.word	0x20004998
 800af40:	e000ed0c 	.word	0xe000ed0c
 800af44:	2000499c 	.word	0x2000499c

0800af48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10a      	bne.n	800af72 <xQueueGenericReset+0x2a>
	__asm volatile
 800af5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	60bb      	str	r3, [r7, #8]
}
 800af6e:	bf00      	nop
 800af70:	e7fe      	b.n	800af70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800af72:	f7ff fec7 	bl	800ad04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af7e:	68f9      	ldr	r1, [r7, #12]
 800af80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af82:	fb01 f303 	mul.w	r3, r1, r3
 800af86:	441a      	add	r2, r3
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2200      	movs	r2, #0
 800af90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afa2:	3b01      	subs	r3, #1
 800afa4:	68f9      	ldr	r1, [r7, #12]
 800afa6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800afa8:	fb01 f303 	mul.w	r3, r1, r3
 800afac:	441a      	add	r2, r3
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	22ff      	movs	r2, #255	; 0xff
 800afb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	22ff      	movs	r2, #255	; 0xff
 800afbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d114      	bne.n	800aff2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d01a      	beq.n	800b006 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	3310      	adds	r3, #16
 800afd4:	4618      	mov	r0, r3
 800afd6:	f001 fd51 	bl	800ca7c <xTaskRemoveFromEventList>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d012      	beq.n	800b006 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800afe0:	4b0c      	ldr	r3, [pc, #48]	; (800b014 <xQueueGenericReset+0xcc>)
 800afe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afe6:	601a      	str	r2, [r3, #0]
 800afe8:	f3bf 8f4f 	dsb	sy
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	e009      	b.n	800b006 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	3310      	adds	r3, #16
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff fca2 	bl	800a940 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	3324      	adds	r3, #36	; 0x24
 800b000:	4618      	mov	r0, r3
 800b002:	f7ff fc9d 	bl	800a940 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b006:	f7ff fead 	bl	800ad64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b00a:	2301      	movs	r3, #1
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	e000ed04 	.word	0xe000ed04

0800b018 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b08e      	sub	sp, #56	; 0x38
 800b01c:	af02      	add	r7, sp, #8
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
 800b024:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10a      	bne.n	800b042 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b03e:	bf00      	nop
 800b040:	e7fe      	b.n	800b040 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10a      	bne.n	800b05e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04c:	f383 8811 	msr	BASEPRI, r3
 800b050:	f3bf 8f6f 	isb	sy
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b05a:	bf00      	nop
 800b05c:	e7fe      	b.n	800b05c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <xQueueGenericCreateStatic+0x52>
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <xQueueGenericCreateStatic+0x56>
 800b06a:	2301      	movs	r3, #1
 800b06c:	e000      	b.n	800b070 <xQueueGenericCreateStatic+0x58>
 800b06e:	2300      	movs	r3, #0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10a      	bne.n	800b08a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	623b      	str	r3, [r7, #32]
}
 800b086:	bf00      	nop
 800b088:	e7fe      	b.n	800b088 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d102      	bne.n	800b096 <xQueueGenericCreateStatic+0x7e>
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <xQueueGenericCreateStatic+0x82>
 800b096:	2301      	movs	r3, #1
 800b098:	e000      	b.n	800b09c <xQueueGenericCreateStatic+0x84>
 800b09a:	2300      	movs	r3, #0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d10a      	bne.n	800b0b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	61fb      	str	r3, [r7, #28]
}
 800b0b2:	bf00      	nop
 800b0b4:	e7fe      	b.n	800b0b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b0b6:	2350      	movs	r3, #80	; 0x50
 800b0b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	2b50      	cmp	r3, #80	; 0x50
 800b0be:	d00a      	beq.n	800b0d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c4:	f383 8811 	msr	BASEPRI, r3
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	61bb      	str	r3, [r7, #24]
}
 800b0d2:	bf00      	nop
 800b0d4:	e7fe      	b.n	800b0d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b0d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00d      	beq.n	800b0fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b0ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	68b9      	ldr	r1, [r7, #8]
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f000 f83f 	bl	800b17c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b100:	4618      	mov	r0, r3
 800b102:	3730      	adds	r7, #48	; 0x30
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08a      	sub	sp, #40	; 0x28
 800b10c:	af02      	add	r7, sp, #8
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	4613      	mov	r3, r2
 800b114:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10a      	bne.n	800b132 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	613b      	str	r3, [r7, #16]
}
 800b12e:	bf00      	nop
 800b130:	e7fe      	b.n	800b130 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	fb02 f303 	mul.w	r3, r2, r3
 800b13a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	3350      	adds	r3, #80	; 0x50
 800b140:	4618      	mov	r0, r3
 800b142:	f7ff fa13 	bl	800a56c <pvPortMalloc>
 800b146:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d011      	beq.n	800b172 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	3350      	adds	r3, #80	; 0x50
 800b156:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b160:	79fa      	ldrb	r2, [r7, #7]
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	4613      	mov	r3, r2
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	68b9      	ldr	r1, [r7, #8]
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f000 f805 	bl	800b17c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b172:	69bb      	ldr	r3, [r7, #24]
	}
 800b174:	4618      	mov	r0, r3
 800b176:	3720      	adds	r7, #32
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d103      	bne.n	800b198 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	69ba      	ldr	r2, [r7, #24]
 800b194:	601a      	str	r2, [r3, #0]
 800b196:	e002      	b.n	800b19e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b1aa:	2101      	movs	r1, #1
 800b1ac:	69b8      	ldr	r0, [r7, #24]
 800b1ae:	f7ff fecb 	bl	800af48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	78fa      	ldrb	r2, [r7, #3]
 800b1b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b1ba:	bf00      	nop
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b08a      	sub	sp, #40	; 0x28
 800b1c6:	af02      	add	r7, sp, #8
 800b1c8:	60f8      	str	r0, [r7, #12]
 800b1ca:	60b9      	str	r1, [r7, #8]
 800b1cc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10a      	bne.n	800b1ea <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d8:	f383 8811 	msr	BASEPRI, r3
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	61bb      	str	r3, [r7, #24]
}
 800b1e6:	bf00      	nop
 800b1e8:	e7fe      	b.n	800b1e8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d90a      	bls.n	800b208 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	617b      	str	r3, [r7, #20]
}
 800b204:	bf00      	nop
 800b206:	e7fe      	b.n	800b206 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b208:	2302      	movs	r3, #2
 800b20a:	9300      	str	r3, [sp, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	2100      	movs	r1, #0
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f7ff ff00 	bl	800b018 <xQueueGenericCreateStatic>
 800b218:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b226:	69fb      	ldr	r3, [r7, #28]
	}
 800b228:	4618      	mov	r0, r3
 800b22a:	3720      	adds	r7, #32
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10a      	bne.n	800b256 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	613b      	str	r3, [r7, #16]
}
 800b252:	bf00      	nop
 800b254:	e7fe      	b.n	800b254 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d90a      	bls.n	800b274 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	60fb      	str	r3, [r7, #12]
}
 800b270:	bf00      	nop
 800b272:	e7fe      	b.n	800b272 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b274:	2202      	movs	r2, #2
 800b276:	2100      	movs	r1, #0
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f7ff ff45 	bl	800b108 <xQueueGenericCreate>
 800b27e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d002      	beq.n	800b28c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	683a      	ldr	r2, [r7, #0]
 800b28a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b28c:	697b      	ldr	r3, [r7, #20]
	}
 800b28e:	4618      	mov	r0, r3
 800b290:	3718      	adds	r7, #24
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
	...

0800b298 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08e      	sub	sp, #56	; 0x38
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
 800b2a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10a      	bne.n	800b2ca <xQueueGenericSend+0x32>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b2c6:	bf00      	nop
 800b2c8:	e7fe      	b.n	800b2c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d103      	bne.n	800b2d8 <xQueueGenericSend+0x40>
 800b2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d101      	bne.n	800b2dc <xQueueGenericSend+0x44>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e000      	b.n	800b2de <xQueueGenericSend+0x46>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d10a      	bne.n	800b2f8 <xQueueGenericSend+0x60>
	__asm volatile
 800b2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e6:	f383 8811 	msr	BASEPRI, r3
 800b2ea:	f3bf 8f6f 	isb	sy
 800b2ee:	f3bf 8f4f 	dsb	sy
 800b2f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b2f4:	bf00      	nop
 800b2f6:	e7fe      	b.n	800b2f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d103      	bne.n	800b306 <xQueueGenericSend+0x6e>
 800b2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b302:	2b01      	cmp	r3, #1
 800b304:	d101      	bne.n	800b30a <xQueueGenericSend+0x72>
 800b306:	2301      	movs	r3, #1
 800b308:	e000      	b.n	800b30c <xQueueGenericSend+0x74>
 800b30a:	2300      	movs	r3, #0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10a      	bne.n	800b326 <xQueueGenericSend+0x8e>
	__asm volatile
 800b310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	623b      	str	r3, [r7, #32]
}
 800b322:	bf00      	nop
 800b324:	e7fe      	b.n	800b324 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b326:	f001 fd6b 	bl	800ce00 <xTaskGetSchedulerState>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d102      	bne.n	800b336 <xQueueGenericSend+0x9e>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d101      	bne.n	800b33a <xQueueGenericSend+0xa2>
 800b336:	2301      	movs	r3, #1
 800b338:	e000      	b.n	800b33c <xQueueGenericSend+0xa4>
 800b33a:	2300      	movs	r3, #0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10a      	bne.n	800b356 <xQueueGenericSend+0xbe>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	61fb      	str	r3, [r7, #28]
}
 800b352:	bf00      	nop
 800b354:	e7fe      	b.n	800b354 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b356:	f7ff fcd5 	bl	800ad04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b362:	429a      	cmp	r2, r3
 800b364:	d302      	bcc.n	800b36c <xQueueGenericSend+0xd4>
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d129      	bne.n	800b3c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	68b9      	ldr	r1, [r7, #8]
 800b370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b372:	f000 fc5e 	bl	800bc32 <prvCopyDataToQueue>
 800b376:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d010      	beq.n	800b3a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b382:	3324      	adds	r3, #36	; 0x24
 800b384:	4618      	mov	r0, r3
 800b386:	f001 fb79 	bl	800ca7c <xTaskRemoveFromEventList>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d013      	beq.n	800b3b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b390:	4b3f      	ldr	r3, [pc, #252]	; (800b490 <xQueueGenericSend+0x1f8>)
 800b392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	e00a      	b.n	800b3b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d007      	beq.n	800b3b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b3a8:	4b39      	ldr	r3, [pc, #228]	; (800b490 <xQueueGenericSend+0x1f8>)
 800b3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ae:	601a      	str	r2, [r3, #0]
 800b3b0:	f3bf 8f4f 	dsb	sy
 800b3b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b3b8:	f7ff fcd4 	bl	800ad64 <vPortExitCritical>
				return pdPASS;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e063      	b.n	800b488 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d103      	bne.n	800b3ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3c6:	f7ff fccd 	bl	800ad64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	e05c      	b.n	800b488 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d106      	bne.n	800b3e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3d4:	f107 0314 	add.w	r3, r7, #20
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f001 fbb3 	bl	800cb44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3e2:	f7ff fcbf 	bl	800ad64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3e6:	f001 f91f 	bl	800c628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3ea:	f7ff fc8b 	bl	800ad04 <vPortEnterCritical>
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3f4:	b25b      	sxtb	r3, r3
 800b3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3fa:	d103      	bne.n	800b404 <xQueueGenericSend+0x16c>
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b40a:	b25b      	sxtb	r3, r3
 800b40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b410:	d103      	bne.n	800b41a <xQueueGenericSend+0x182>
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b41a:	f7ff fca3 	bl	800ad64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b41e:	1d3a      	adds	r2, r7, #4
 800b420:	f107 0314 	add.w	r3, r7, #20
 800b424:	4611      	mov	r1, r2
 800b426:	4618      	mov	r0, r3
 800b428:	f001 fba2 	bl	800cb70 <xTaskCheckForTimeOut>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d124      	bne.n	800b47c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b432:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b434:	f000 fcf5 	bl	800be22 <prvIsQueueFull>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d018      	beq.n	800b470 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b440:	3310      	adds	r3, #16
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	4611      	mov	r1, r2
 800b446:	4618      	mov	r0, r3
 800b448:	f001 fac8 	bl	800c9dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b44c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b44e:	f000 fc80 	bl	800bd52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b452:	f001 f8f7 	bl	800c644 <xTaskResumeAll>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f47f af7c 	bne.w	800b356 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b45e:	4b0c      	ldr	r3, [pc, #48]	; (800b490 <xQueueGenericSend+0x1f8>)
 800b460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b464:	601a      	str	r2, [r3, #0]
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	e772      	b.n	800b356 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b472:	f000 fc6e 	bl	800bd52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b476:	f001 f8e5 	bl	800c644 <xTaskResumeAll>
 800b47a:	e76c      	b.n	800b356 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b47c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b47e:	f000 fc68 	bl	800bd52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b482:	f001 f8df 	bl	800c644 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b486:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3738      	adds	r7, #56	; 0x38
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	e000ed04 	.word	0xe000ed04

0800b494 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b090      	sub	sp, #64	; 0x40
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
 800b4a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10a      	bne.n	800b4c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b4be:	bf00      	nop
 800b4c0:	e7fe      	b.n	800b4c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d103      	bne.n	800b4d0 <xQueueGenericSendFromISR+0x3c>
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d101      	bne.n	800b4d4 <xQueueGenericSendFromISR+0x40>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e000      	b.n	800b4d6 <xQueueGenericSendFromISR+0x42>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10a      	bne.n	800b4f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4de:	f383 8811 	msr	BASEPRI, r3
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4ec:	bf00      	nop
 800b4ee:	e7fe      	b.n	800b4ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d103      	bne.n	800b4fe <xQueueGenericSendFromISR+0x6a>
 800b4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d101      	bne.n	800b502 <xQueueGenericSendFromISR+0x6e>
 800b4fe:	2301      	movs	r3, #1
 800b500:	e000      	b.n	800b504 <xQueueGenericSendFromISR+0x70>
 800b502:	2300      	movs	r3, #0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10a      	bne.n	800b51e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	623b      	str	r3, [r7, #32]
}
 800b51a:	bf00      	nop
 800b51c:	e7fe      	b.n	800b51c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b51e:	f7ff fcd3 	bl	800aec8 <vPortValidateInterruptPriority>
	__asm volatile
 800b522:	f3ef 8211 	mrs	r2, BASEPRI
 800b526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52a:	f383 8811 	msr	BASEPRI, r3
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	f3bf 8f4f 	dsb	sy
 800b536:	61fa      	str	r2, [r7, #28]
 800b538:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b53a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b53c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b546:	429a      	cmp	r2, r3
 800b548:	d302      	bcc.n	800b550 <xQueueGenericSendFromISR+0xbc>
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	d12f      	bne.n	800b5b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b552:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b55e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b560:	683a      	ldr	r2, [r7, #0]
 800b562:	68b9      	ldr	r1, [r7, #8]
 800b564:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b566:	f000 fb64 	bl	800bc32 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b56a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b572:	d112      	bne.n	800b59a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d016      	beq.n	800b5aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57e:	3324      	adds	r3, #36	; 0x24
 800b580:	4618      	mov	r0, r3
 800b582:	f001 fa7b 	bl	800ca7c <xTaskRemoveFromEventList>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00e      	beq.n	800b5aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00b      	beq.n	800b5aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2201      	movs	r2, #1
 800b596:	601a      	str	r2, [r3, #0]
 800b598:	e007      	b.n	800b5aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b59a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b59e:	3301      	adds	r3, #1
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	b25a      	sxtb	r2, r3
 800b5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b5ae:	e001      	b.n	800b5b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	f383 8811 	msr	BASEPRI, r3
}
 800b5be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3740      	adds	r7, #64	; 0x40
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b08e      	sub	sp, #56	; 0x38
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d10a      	bne.n	800b5f4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	623b      	str	r3, [r7, #32]
}
 800b5f0:	bf00      	nop
 800b5f2:	e7fe      	b.n	800b5f2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00a      	beq.n	800b612 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b600:	f383 8811 	msr	BASEPRI, r3
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	61fb      	str	r3, [r7, #28]
}
 800b60e:	bf00      	nop
 800b610:	e7fe      	b.n	800b610 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d103      	bne.n	800b622 <xQueueGiveFromISR+0x58>
 800b61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d101      	bne.n	800b626 <xQueueGiveFromISR+0x5c>
 800b622:	2301      	movs	r3, #1
 800b624:	e000      	b.n	800b628 <xQueueGiveFromISR+0x5e>
 800b626:	2300      	movs	r3, #0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10a      	bne.n	800b642 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	61bb      	str	r3, [r7, #24]
}
 800b63e:	bf00      	nop
 800b640:	e7fe      	b.n	800b640 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b642:	f7ff fc41 	bl	800aec8 <vPortValidateInterruptPriority>
	__asm volatile
 800b646:	f3ef 8211 	mrs	r2, BASEPRI
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	617a      	str	r2, [r7, #20]
 800b65c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b65e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b660:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b666:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b66c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b66e:	429a      	cmp	r2, r3
 800b670:	d22b      	bcs.n	800b6ca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67e:	1c5a      	adds	r2, r3, #1
 800b680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b682:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b684:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68c:	d112      	bne.n	800b6b4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b692:	2b00      	cmp	r3, #0
 800b694:	d016      	beq.n	800b6c4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b698:	3324      	adds	r3, #36	; 0x24
 800b69a:	4618      	mov	r0, r3
 800b69c:	f001 f9ee 	bl	800ca7c <xTaskRemoveFromEventList>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00e      	beq.n	800b6c4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00b      	beq.n	800b6c4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	601a      	str	r2, [r3, #0]
 800b6b2:	e007      	b.n	800b6c4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b6b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	b25a      	sxtb	r2, r3
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b6c8:	e001      	b.n	800b6ce <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f383 8811 	msr	BASEPRI, r3
}
 800b6d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3738      	adds	r7, #56	; 0x38
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b08c      	sub	sp, #48	; 0x30
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10a      	bne.n	800b714 <xQueueReceive+0x30>
	__asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	623b      	str	r3, [r7, #32]
}
 800b710:	bf00      	nop
 800b712:	e7fe      	b.n	800b712 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d103      	bne.n	800b722 <xQueueReceive+0x3e>
 800b71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d101      	bne.n	800b726 <xQueueReceive+0x42>
 800b722:	2301      	movs	r3, #1
 800b724:	e000      	b.n	800b728 <xQueueReceive+0x44>
 800b726:	2300      	movs	r3, #0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10a      	bne.n	800b742 <xQueueReceive+0x5e>
	__asm volatile
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	61fb      	str	r3, [r7, #28]
}
 800b73e:	bf00      	nop
 800b740:	e7fe      	b.n	800b740 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b742:	f001 fb5d 	bl	800ce00 <xTaskGetSchedulerState>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d102      	bne.n	800b752 <xQueueReceive+0x6e>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d101      	bne.n	800b756 <xQueueReceive+0x72>
 800b752:	2301      	movs	r3, #1
 800b754:	e000      	b.n	800b758 <xQueueReceive+0x74>
 800b756:	2300      	movs	r3, #0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10a      	bne.n	800b772 <xQueueReceive+0x8e>
	__asm volatile
 800b75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b760:	f383 8811 	msr	BASEPRI, r3
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	61bb      	str	r3, [r7, #24]
}
 800b76e:	bf00      	nop
 800b770:	e7fe      	b.n	800b770 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b772:	f7ff fac7 	bl	800ad04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d01f      	beq.n	800b7c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b782:	68b9      	ldr	r1, [r7, #8]
 800b784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b786:	f000 fabe 	bl	800bd06 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78c:	1e5a      	subs	r2, r3, #1
 800b78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b790:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00f      	beq.n	800b7ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79c:	3310      	adds	r3, #16
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f001 f96c 	bl	800ca7c <xTaskRemoveFromEventList>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d007      	beq.n	800b7ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b7aa:	4b3d      	ldr	r3, [pc, #244]	; (800b8a0 <xQueueReceive+0x1bc>)
 800b7ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7b0:	601a      	str	r2, [r3, #0]
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b7ba:	f7ff fad3 	bl	800ad64 <vPortExitCritical>
				return pdPASS;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e069      	b.n	800b896 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d103      	bne.n	800b7d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b7c8:	f7ff facc 	bl	800ad64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	e062      	b.n	800b896 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d106      	bne.n	800b7e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7d6:	f107 0310 	add.w	r3, r7, #16
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f001 f9b2 	bl	800cb44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7e4:	f7ff fabe 	bl	800ad64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7e8:	f000 ff1e 	bl	800c628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7ec:	f7ff fa8a 	bl	800ad04 <vPortEnterCritical>
 800b7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7f6:	b25b      	sxtb	r3, r3
 800b7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7fc:	d103      	bne.n	800b806 <xQueueReceive+0x122>
 800b7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b80c:	b25b      	sxtb	r3, r3
 800b80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b812:	d103      	bne.n	800b81c <xQueueReceive+0x138>
 800b814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b816:	2200      	movs	r2, #0
 800b818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b81c:	f7ff faa2 	bl	800ad64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b820:	1d3a      	adds	r2, r7, #4
 800b822:	f107 0310 	add.w	r3, r7, #16
 800b826:	4611      	mov	r1, r2
 800b828:	4618      	mov	r0, r3
 800b82a:	f001 f9a1 	bl	800cb70 <xTaskCheckForTimeOut>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d123      	bne.n	800b87c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b836:	f000 fade 	bl	800bdf6 <prvIsQueueEmpty>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d017      	beq.n	800b870 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b842:	3324      	adds	r3, #36	; 0x24
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	4611      	mov	r1, r2
 800b848:	4618      	mov	r0, r3
 800b84a:	f001 f8c7 	bl	800c9dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b84e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b850:	f000 fa7f 	bl	800bd52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b854:	f000 fef6 	bl	800c644 <xTaskResumeAll>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d189      	bne.n	800b772 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b85e:	4b10      	ldr	r3, [pc, #64]	; (800b8a0 <xQueueReceive+0x1bc>)
 800b860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b864:	601a      	str	r2, [r3, #0]
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	f3bf 8f6f 	isb	sy
 800b86e:	e780      	b.n	800b772 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b872:	f000 fa6e 	bl	800bd52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b876:	f000 fee5 	bl	800c644 <xTaskResumeAll>
 800b87a:	e77a      	b.n	800b772 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b87c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b87e:	f000 fa68 	bl	800bd52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b882:	f000 fedf 	bl	800c644 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b888:	f000 fab5 	bl	800bdf6 <prvIsQueueEmpty>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	f43f af6f 	beq.w	800b772 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b894:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b896:	4618      	mov	r0, r3
 800b898:	3730      	adds	r7, #48	; 0x30
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	e000ed04 	.word	0xe000ed04

0800b8a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b08e      	sub	sp, #56	; 0x38
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10a      	bne.n	800b8d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	623b      	str	r3, [r7, #32]
}
 800b8d2:	bf00      	nop
 800b8d4:	e7fe      	b.n	800b8d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00a      	beq.n	800b8f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e2:	f383 8811 	msr	BASEPRI, r3
 800b8e6:	f3bf 8f6f 	isb	sy
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	61fb      	str	r3, [r7, #28]
}
 800b8f0:	bf00      	nop
 800b8f2:	e7fe      	b.n	800b8f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b8f4:	f001 fa84 	bl	800ce00 <xTaskGetSchedulerState>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d102      	bne.n	800b904 <xQueueSemaphoreTake+0x60>
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d101      	bne.n	800b908 <xQueueSemaphoreTake+0x64>
 800b904:	2301      	movs	r3, #1
 800b906:	e000      	b.n	800b90a <xQueueSemaphoreTake+0x66>
 800b908:	2300      	movs	r3, #0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10a      	bne.n	800b924 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	61bb      	str	r3, [r7, #24]
}
 800b920:	bf00      	nop
 800b922:	e7fe      	b.n	800b922 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b924:	f7ff f9ee 	bl	800ad04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b92c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b930:	2b00      	cmp	r3, #0
 800b932:	d024      	beq.n	800b97e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b936:	1e5a      	subs	r2, r3, #1
 800b938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d104      	bne.n	800b94e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b944:	f001 fbd2 	bl	800d0ec <pvTaskIncrementMutexHeldCount>
 800b948:	4602      	mov	r2, r0
 800b94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b950:	691b      	ldr	r3, [r3, #16]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00f      	beq.n	800b976 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b958:	3310      	adds	r3, #16
 800b95a:	4618      	mov	r0, r3
 800b95c:	f001 f88e 	bl	800ca7c <xTaskRemoveFromEventList>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d007      	beq.n	800b976 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b966:	4b54      	ldr	r3, [pc, #336]	; (800bab8 <xQueueSemaphoreTake+0x214>)
 800b968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b96c:	601a      	str	r2, [r3, #0]
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b976:	f7ff f9f5 	bl	800ad64 <vPortExitCritical>
				return pdPASS;
 800b97a:	2301      	movs	r3, #1
 800b97c:	e097      	b.n	800baae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d111      	bne.n	800b9a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00a      	beq.n	800b9a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	617b      	str	r3, [r7, #20]
}
 800b99c:	bf00      	nop
 800b99e:	e7fe      	b.n	800b99e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b9a0:	f7ff f9e0 	bl	800ad64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	e082      	b.n	800baae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d106      	bne.n	800b9bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9ae:	f107 030c 	add.w	r3, r7, #12
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f001 f8c6 	bl	800cb44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9bc:	f7ff f9d2 	bl	800ad64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9c0:	f000 fe32 	bl	800c628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9c4:	f7ff f99e 	bl	800ad04 <vPortEnterCritical>
 800b9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9ce:	b25b      	sxtb	r3, r3
 800b9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d4:	d103      	bne.n	800b9de <xQueueSemaphoreTake+0x13a>
 800b9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9e4:	b25b      	sxtb	r3, r3
 800b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ea:	d103      	bne.n	800b9f4 <xQueueSemaphoreTake+0x150>
 800b9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9f4:	f7ff f9b6 	bl	800ad64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9f8:	463a      	mov	r2, r7
 800b9fa:	f107 030c 	add.w	r3, r7, #12
 800b9fe:	4611      	mov	r1, r2
 800ba00:	4618      	mov	r0, r3
 800ba02:	f001 f8b5 	bl	800cb70 <xTaskCheckForTimeOut>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d132      	bne.n	800ba72 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba0e:	f000 f9f2 	bl	800bdf6 <prvIsQueueEmpty>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d026      	beq.n	800ba66 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d109      	bne.n	800ba34 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ba20:	f7ff f970 	bl	800ad04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f001 fa07 	bl	800ce3c <xTaskPriorityInherit>
 800ba2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ba30:	f7ff f998 	bl	800ad64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba36:	3324      	adds	r3, #36	; 0x24
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	4611      	mov	r1, r2
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f000 ffcd 	bl	800c9dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba44:	f000 f985 	bl	800bd52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba48:	f000 fdfc 	bl	800c644 <xTaskResumeAll>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f47f af68 	bne.w	800b924 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ba54:	4b18      	ldr	r3, [pc, #96]	; (800bab8 <xQueueSemaphoreTake+0x214>)
 800ba56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba5a:	601a      	str	r2, [r3, #0]
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	e75e      	b.n	800b924 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ba66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba68:	f000 f973 	bl	800bd52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba6c:	f000 fdea 	bl	800c644 <xTaskResumeAll>
 800ba70:	e758      	b.n	800b924 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ba72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba74:	f000 f96d 	bl	800bd52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba78:	f000 fde4 	bl	800c644 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba7e:	f000 f9ba 	bl	800bdf6 <prvIsQueueEmpty>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f43f af4d 	beq.w	800b924 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ba8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00d      	beq.n	800baac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ba90:	f7ff f938 	bl	800ad04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ba94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba96:	f000 f8b4 	bl	800bc02 <prvGetDisinheritPriorityAfterTimeout>
 800ba9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ba9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800baa2:	4618      	mov	r0, r3
 800baa4:	f001 faa0 	bl	800cfe8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800baa8:	f7ff f95c 	bl	800ad64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800baac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3738      	adds	r7, #56	; 0x38
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	e000ed04 	.word	0xe000ed04

0800babc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b08e      	sub	sp, #56	; 0x38
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10a      	bne.n	800bae8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	623b      	str	r3, [r7, #32]
}
 800bae4:	bf00      	nop
 800bae6:	e7fe      	b.n	800bae6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d103      	bne.n	800baf6 <xQueueReceiveFromISR+0x3a>
 800baee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d101      	bne.n	800bafa <xQueueReceiveFromISR+0x3e>
 800baf6:	2301      	movs	r3, #1
 800baf8:	e000      	b.n	800bafc <xQueueReceiveFromISR+0x40>
 800bafa:	2300      	movs	r3, #0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10a      	bne.n	800bb16 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	61fb      	str	r3, [r7, #28]
}
 800bb12:	bf00      	nop
 800bb14:	e7fe      	b.n	800bb14 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb16:	f7ff f9d7 	bl	800aec8 <vPortValidateInterruptPriority>
	__asm volatile
 800bb1a:	f3ef 8211 	mrs	r2, BASEPRI
 800bb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb22:	f383 8811 	msr	BASEPRI, r3
 800bb26:	f3bf 8f6f 	isb	sy
 800bb2a:	f3bf 8f4f 	dsb	sy
 800bb2e:	61ba      	str	r2, [r7, #24]
 800bb30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bb32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d02f      	beq.n	800bba2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb4c:	68b9      	ldr	r1, [r7, #8]
 800bb4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb50:	f000 f8d9 	bl	800bd06 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb56:	1e5a      	subs	r2, r3, #1
 800bb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bb5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bb60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb64:	d112      	bne.n	800bb8c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d016      	beq.n	800bb9c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb70:	3310      	adds	r3, #16
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 ff82 	bl	800ca7c <xTaskRemoveFromEventList>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00e      	beq.n	800bb9c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00b      	beq.n	800bb9c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	e007      	b.n	800bb9c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bb8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb90:	3301      	adds	r3, #1
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	b25a      	sxtb	r2, r3
 800bb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	637b      	str	r3, [r7, #52]	; 0x34
 800bba0:	e001      	b.n	800bba6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bba2:	2300      	movs	r3, #0
 800bba4:	637b      	str	r3, [r7, #52]	; 0x34
 800bba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	f383 8811 	msr	BASEPRI, r3
}
 800bbb0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bbb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3738      	adds	r7, #56	; 0x38
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d10a      	bne.n	800bbe4 <vQueueDelete+0x28>
	__asm volatile
 800bbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	60bb      	str	r3, [r7, #8]
}
 800bbe0:	bf00      	nop
 800bbe2:	e7fe      	b.n	800bbe2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f000 f95f 	bl	800bea8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d102      	bne.n	800bbfa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f7fe fd85 	bl	800a704 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bbfa:	bf00      	nop
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bc02:	b480      	push	{r7}
 800bc04:	b085      	sub	sp, #20
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d006      	beq.n	800bc20 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800bc1c:	60fb      	str	r3, [r7, #12]
 800bc1e:	e001      	b.n	800bc24 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bc20:	2300      	movs	r3, #0
 800bc22:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bc24:	68fb      	ldr	r3, [r7, #12]
	}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3714      	adds	r7, #20
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr

0800bc32 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b086      	sub	sp, #24
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	60f8      	str	r0, [r7, #12]
 800bc3a:	60b9      	str	r1, [r7, #8]
 800bc3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc46:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d10d      	bne.n	800bc6c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d14d      	bne.n	800bcf4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f001 f955 	bl	800cf0c <xTaskPriorityDisinherit>
 800bc62:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	609a      	str	r2, [r3, #8]
 800bc6a:	e043      	b.n	800bcf4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d119      	bne.n	800bca6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6858      	ldr	r0, [r3, #4]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	68b9      	ldr	r1, [r7, #8]
 800bc7e:	f001 fff2 	bl	800dc66 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	685a      	ldr	r2, [r3, #4]
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc8a:	441a      	add	r2, r3
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	685a      	ldr	r2, [r3, #4]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d32b      	bcc.n	800bcf4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	605a      	str	r2, [r3, #4]
 800bca4:	e026      	b.n	800bcf4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	68d8      	ldr	r0, [r3, #12]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcae:	461a      	mov	r2, r3
 800bcb0:	68b9      	ldr	r1, [r7, #8]
 800bcb2:	f001 ffd8 	bl	800dc66 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	68da      	ldr	r2, [r3, #12]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcbe:	425b      	negs	r3, r3
 800bcc0:	441a      	add	r2, r3
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	68da      	ldr	r2, [r3, #12]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d207      	bcs.n	800bce2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	689a      	ldr	r2, [r3, #8]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcda:	425b      	negs	r3, r3
 800bcdc:	441a      	add	r2, r3
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b02      	cmp	r3, #2
 800bce6:	d105      	bne.n	800bcf4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d002      	beq.n	800bcf4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	1c5a      	adds	r2, r3, #1
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bcfc:	697b      	ldr	r3, [r7, #20]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3718      	adds	r7, #24
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b082      	sub	sp, #8
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
 800bd0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d018      	beq.n	800bd4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	68da      	ldr	r2, [r3, #12]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd20:	441a      	add	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68da      	ldr	r2, [r3, #12]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d303      	bcc.n	800bd3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	68d9      	ldr	r1, [r3, #12]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd42:	461a      	mov	r2, r3
 800bd44:	6838      	ldr	r0, [r7, #0]
 800bd46:	f001 ff8e 	bl	800dc66 <memcpy>
	}
}
 800bd4a:	bf00      	nop
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b084      	sub	sp, #16
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bd5a:	f7fe ffd3 	bl	800ad04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd64:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd66:	e011      	b.n	800bd8c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d012      	beq.n	800bd96 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	3324      	adds	r3, #36	; 0x24
 800bd74:	4618      	mov	r0, r3
 800bd76:	f000 fe81 	bl	800ca7c <xTaskRemoveFromEventList>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d001      	beq.n	800bd84 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bd80:	f000 ff58 	bl	800cc34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	dce9      	bgt.n	800bd68 <prvUnlockQueue+0x16>
 800bd94:	e000      	b.n	800bd98 <prvUnlockQueue+0x46>
					break;
 800bd96:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	22ff      	movs	r2, #255	; 0xff
 800bd9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bda0:	f7fe ffe0 	bl	800ad64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bda4:	f7fe ffae 	bl	800ad04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdb0:	e011      	b.n	800bdd6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d012      	beq.n	800bde0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	3310      	adds	r3, #16
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f000 fe5c 	bl	800ca7c <xTaskRemoveFromEventList>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d001      	beq.n	800bdce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bdca:	f000 ff33 	bl	800cc34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bdce:	7bbb      	ldrb	r3, [r7, #14]
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	dce9      	bgt.n	800bdb2 <prvUnlockQueue+0x60>
 800bdde:	e000      	b.n	800bde2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bde0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	22ff      	movs	r2, #255	; 0xff
 800bde6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bdea:	f7fe ffbb 	bl	800ad64 <vPortExitCritical>
}
 800bdee:	bf00      	nop
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b084      	sub	sp, #16
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bdfe:	f7fe ff81 	bl	800ad04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be06:	2b00      	cmp	r3, #0
 800be08:	d102      	bne.n	800be10 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800be0a:	2301      	movs	r3, #1
 800be0c:	60fb      	str	r3, [r7, #12]
 800be0e:	e001      	b.n	800be14 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800be10:	2300      	movs	r3, #0
 800be12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be14:	f7fe ffa6 	bl	800ad64 <vPortExitCritical>

	return xReturn;
 800be18:	68fb      	ldr	r3, [r7, #12]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b084      	sub	sp, #16
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be2a:	f7fe ff6b 	bl	800ad04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be36:	429a      	cmp	r2, r3
 800be38:	d102      	bne.n	800be40 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be3a:	2301      	movs	r3, #1
 800be3c:	60fb      	str	r3, [r7, #12]
 800be3e:	e001      	b.n	800be44 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be40:	2300      	movs	r3, #0
 800be42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be44:	f7fe ff8e 	bl	800ad64 <vPortExitCritical>

	return xReturn;
 800be48:	68fb      	ldr	r3, [r7, #12]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
	...

0800be54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be5e:	2300      	movs	r3, #0
 800be60:	60fb      	str	r3, [r7, #12]
 800be62:	e014      	b.n	800be8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800be64:	4a0f      	ldr	r2, [pc, #60]	; (800bea4 <vQueueAddToRegistry+0x50>)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10b      	bne.n	800be88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800be70:	490c      	ldr	r1, [pc, #48]	; (800bea4 <vQueueAddToRegistry+0x50>)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	683a      	ldr	r2, [r7, #0]
 800be76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800be7a:	4a0a      	ldr	r2, [pc, #40]	; (800bea4 <vQueueAddToRegistry+0x50>)
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	00db      	lsls	r3, r3, #3
 800be80:	4413      	add	r3, r2
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800be86:	e006      	b.n	800be96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	3301      	adds	r3, #1
 800be8c:	60fb      	str	r3, [r7, #12]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2b07      	cmp	r3, #7
 800be92:	d9e7      	bls.n	800be64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800be94:	bf00      	nop
 800be96:	bf00      	nop
 800be98:	3714      	adds	r7, #20
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	200049a0 	.word	0x200049a0

0800bea8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800beb0:	2300      	movs	r3, #0
 800beb2:	60fb      	str	r3, [r7, #12]
 800beb4:	e016      	b.n	800bee4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800beb6:	4a10      	ldr	r2, [pc, #64]	; (800bef8 <vQueueUnregisterQueue+0x50>)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	00db      	lsls	r3, r3, #3
 800bebc:	4413      	add	r3, r2
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d10b      	bne.n	800bede <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bec6:	4a0c      	ldr	r2, [pc, #48]	; (800bef8 <vQueueUnregisterQueue+0x50>)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2100      	movs	r1, #0
 800becc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bed0:	4a09      	ldr	r2, [pc, #36]	; (800bef8 <vQueueUnregisterQueue+0x50>)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	00db      	lsls	r3, r3, #3
 800bed6:	4413      	add	r3, r2
 800bed8:	2200      	movs	r2, #0
 800beda:	605a      	str	r2, [r3, #4]
				break;
 800bedc:	e006      	b.n	800beec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3301      	adds	r3, #1
 800bee2:	60fb      	str	r3, [r7, #12]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2b07      	cmp	r3, #7
 800bee8:	d9e5      	bls.n	800beb6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800beea:	bf00      	nop
 800beec:	bf00      	nop
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr
 800bef8:	200049a0 	.word	0x200049a0

0800befc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800befc:	b580      	push	{r7, lr}
 800befe:	b086      	sub	sp, #24
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bf0c:	f7fe fefa 	bl	800ad04 <vPortEnterCritical>
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf16:	b25b      	sxtb	r3, r3
 800bf18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf1c:	d103      	bne.n	800bf26 <vQueueWaitForMessageRestricted+0x2a>
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf2c:	b25b      	sxtb	r3, r3
 800bf2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf32:	d103      	bne.n	800bf3c <vQueueWaitForMessageRestricted+0x40>
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf3c:	f7fe ff12 	bl	800ad64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d106      	bne.n	800bf56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	3324      	adds	r3, #36	; 0x24
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	68b9      	ldr	r1, [r7, #8]
 800bf50:	4618      	mov	r0, r3
 800bf52:	f000 fd67 	bl	800ca24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bf56:	6978      	ldr	r0, [r7, #20]
 800bf58:	f7ff fefb 	bl	800bd52 <prvUnlockQueue>
	}
 800bf5c:	bf00      	nop
 800bf5e:	3718      	adds	r7, #24
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b08e      	sub	sp, #56	; 0x38
 800bf68:	af04      	add	r7, sp, #16
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
 800bf70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bf72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10a      	bne.n	800bf8e <xTaskCreateStatic+0x2a>
	__asm volatile
 800bf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	623b      	str	r3, [r7, #32]
}
 800bf8a:	bf00      	nop
 800bf8c:	e7fe      	b.n	800bf8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10a      	bne.n	800bfaa <xTaskCreateStatic+0x46>
	__asm volatile
 800bf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf98:	f383 8811 	msr	BASEPRI, r3
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	61fb      	str	r3, [r7, #28]
}
 800bfa6:	bf00      	nop
 800bfa8:	e7fe      	b.n	800bfa8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bfaa:	23bc      	movs	r3, #188	; 0xbc
 800bfac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	2bbc      	cmp	r3, #188	; 0xbc
 800bfb2:	d00a      	beq.n	800bfca <xTaskCreateStatic+0x66>
	__asm volatile
 800bfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb8:	f383 8811 	msr	BASEPRI, r3
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	61bb      	str	r3, [r7, #24]
}
 800bfc6:	bf00      	nop
 800bfc8:	e7fe      	b.n	800bfc8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bfca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d01e      	beq.n	800c010 <xTaskCreateStatic+0xac>
 800bfd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d01b      	beq.n	800c010 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfe0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe4:	2202      	movs	r2, #2
 800bfe6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bfea:	2300      	movs	r3, #0
 800bfec:	9303      	str	r3, [sp, #12]
 800bfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff0:	9302      	str	r3, [sp, #8]
 800bff2:	f107 0314 	add.w	r3, r7, #20
 800bff6:	9301      	str	r3, [sp, #4]
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	68b9      	ldr	r1, [r7, #8]
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f000 f850 	bl	800c0a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c00a:	f000 f8f3 	bl	800c1f4 <prvAddNewTaskToReadyList>
 800c00e:	e001      	b.n	800c014 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c010:	2300      	movs	r3, #0
 800c012:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c014:	697b      	ldr	r3, [r7, #20]
	}
 800c016:	4618      	mov	r0, r3
 800c018:	3728      	adds	r7, #40	; 0x28
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b08c      	sub	sp, #48	; 0x30
 800c022:	af04      	add	r7, sp, #16
 800c024:	60f8      	str	r0, [r7, #12]
 800c026:	60b9      	str	r1, [r7, #8]
 800c028:	603b      	str	r3, [r7, #0]
 800c02a:	4613      	mov	r3, r2
 800c02c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c02e:	88fb      	ldrh	r3, [r7, #6]
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4618      	mov	r0, r3
 800c034:	f7fe fa9a 	bl	800a56c <pvPortMalloc>
 800c038:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d00e      	beq.n	800c05e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c040:	20bc      	movs	r0, #188	; 0xbc
 800c042:	f7fe fa93 	bl	800a56c <pvPortMalloc>
 800c046:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d003      	beq.n	800c056 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	697a      	ldr	r2, [r7, #20]
 800c052:	631a      	str	r2, [r3, #48]	; 0x30
 800c054:	e005      	b.n	800c062 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c056:	6978      	ldr	r0, [r7, #20]
 800c058:	f7fe fb54 	bl	800a704 <vPortFree>
 800c05c:	e001      	b.n	800c062 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c05e:	2300      	movs	r3, #0
 800c060:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d017      	beq.n	800c098 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c070:	88fa      	ldrh	r2, [r7, #6]
 800c072:	2300      	movs	r3, #0
 800c074:	9303      	str	r3, [sp, #12]
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	9302      	str	r3, [sp, #8]
 800c07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07c:	9301      	str	r3, [sp, #4]
 800c07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	68b9      	ldr	r1, [r7, #8]
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f000 f80e 	bl	800c0a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c08c:	69f8      	ldr	r0, [r7, #28]
 800c08e:	f000 f8b1 	bl	800c1f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c092:	2301      	movs	r3, #1
 800c094:	61bb      	str	r3, [r7, #24]
 800c096:	e002      	b.n	800c09e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c098:	f04f 33ff 	mov.w	r3, #4294967295
 800c09c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c09e:	69bb      	ldr	r3, [r7, #24]
	}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3720      	adds	r7, #32
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b088      	sub	sp, #32
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
 800c0b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	461a      	mov	r2, r3
 800c0c0:	21a5      	movs	r1, #165	; 0xa5
 800c0c2:	f001 fdde 	bl	800dc82 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	f023 0307 	bic.w	r3, r3, #7
 800c0de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	f003 0307 	and.w	r3, r3, #7
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00a      	beq.n	800c100 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	617b      	str	r3, [r7, #20]
}
 800c0fc:	bf00      	nop
 800c0fe:	e7fe      	b.n	800c0fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d01f      	beq.n	800c146 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c106:	2300      	movs	r3, #0
 800c108:	61fb      	str	r3, [r7, #28]
 800c10a:	e012      	b.n	800c132 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	4413      	add	r3, r2
 800c112:	7819      	ldrb	r1, [r3, #0]
 800c114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	4413      	add	r3, r2
 800c11a:	3334      	adds	r3, #52	; 0x34
 800c11c:	460a      	mov	r2, r1
 800c11e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	69fb      	ldr	r3, [r7, #28]
 800c124:	4413      	add	r3, r2
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d006      	beq.n	800c13a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	3301      	adds	r3, #1
 800c130:	61fb      	str	r3, [r7, #28]
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	2b0f      	cmp	r3, #15
 800c136:	d9e9      	bls.n	800c10c <prvInitialiseNewTask+0x64>
 800c138:	e000      	b.n	800c13c <prvInitialiseNewTask+0x94>
			{
				break;
 800c13a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13e:	2200      	movs	r2, #0
 800c140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c144:	e003      	b.n	800c14e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	2200      	movs	r2, #0
 800c14a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c150:	2b37      	cmp	r3, #55	; 0x37
 800c152:	d901      	bls.n	800c158 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c154:	2337      	movs	r3, #55	; 0x37
 800c156:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c15c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c162:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c166:	2200      	movs	r2, #0
 800c168:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	3304      	adds	r3, #4
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fe fc06 	bl	800a980 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c176:	3318      	adds	r3, #24
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fe fc01 	bl	800a980 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c182:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c186:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c192:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c196:	2200      	movs	r2, #0
 800c198:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a6:	3354      	adds	r3, #84	; 0x54
 800c1a8:	2260      	movs	r2, #96	; 0x60
 800c1aa:	2100      	movs	r1, #0
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f001 fd68 	bl	800dc82 <memset>
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b4:	4a0c      	ldr	r2, [pc, #48]	; (800c1e8 <prvInitialiseNewTask+0x140>)
 800c1b6:	659a      	str	r2, [r3, #88]	; 0x58
 800c1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ba:	4a0c      	ldr	r2, [pc, #48]	; (800c1ec <prvInitialiseNewTask+0x144>)
 800c1bc:	65da      	str	r2, [r3, #92]	; 0x5c
 800c1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c0:	4a0b      	ldr	r2, [pc, #44]	; (800c1f0 <prvInitialiseNewTask+0x148>)
 800c1c2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	68f9      	ldr	r1, [r7, #12]
 800c1c8:	69b8      	ldr	r0, [r7, #24]
 800c1ca:	f7fe fc6d 	bl	800aaa8 <pxPortInitialiseStack>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d002      	beq.n	800c1e0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1e0:	bf00      	nop
 800c1e2:	3720      	adds	r7, #32
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	08014f68 	.word	0x08014f68
 800c1ec:	08014f88 	.word	0x08014f88
 800c1f0:	08014f48 	.word	0x08014f48

0800c1f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c1fc:	f7fe fd82 	bl	800ad04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c200:	4b2d      	ldr	r3, [pc, #180]	; (800c2b8 <prvAddNewTaskToReadyList+0xc4>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	3301      	adds	r3, #1
 800c206:	4a2c      	ldr	r2, [pc, #176]	; (800c2b8 <prvAddNewTaskToReadyList+0xc4>)
 800c208:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c20a:	4b2c      	ldr	r3, [pc, #176]	; (800c2bc <prvAddNewTaskToReadyList+0xc8>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d109      	bne.n	800c226 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c212:	4a2a      	ldr	r2, [pc, #168]	; (800c2bc <prvAddNewTaskToReadyList+0xc8>)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c218:	4b27      	ldr	r3, [pc, #156]	; (800c2b8 <prvAddNewTaskToReadyList+0xc4>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d110      	bne.n	800c242 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c220:	f000 fd2c 	bl	800cc7c <prvInitialiseTaskLists>
 800c224:	e00d      	b.n	800c242 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c226:	4b26      	ldr	r3, [pc, #152]	; (800c2c0 <prvAddNewTaskToReadyList+0xcc>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d109      	bne.n	800c242 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c22e:	4b23      	ldr	r3, [pc, #140]	; (800c2bc <prvAddNewTaskToReadyList+0xc8>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c238:	429a      	cmp	r2, r3
 800c23a:	d802      	bhi.n	800c242 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c23c:	4a1f      	ldr	r2, [pc, #124]	; (800c2bc <prvAddNewTaskToReadyList+0xc8>)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c242:	4b20      	ldr	r3, [pc, #128]	; (800c2c4 <prvAddNewTaskToReadyList+0xd0>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	3301      	adds	r3, #1
 800c248:	4a1e      	ldr	r2, [pc, #120]	; (800c2c4 <prvAddNewTaskToReadyList+0xd0>)
 800c24a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c24c:	4b1d      	ldr	r3, [pc, #116]	; (800c2c4 <prvAddNewTaskToReadyList+0xd0>)
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c258:	4b1b      	ldr	r3, [pc, #108]	; (800c2c8 <prvAddNewTaskToReadyList+0xd4>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d903      	bls.n	800c268 <prvAddNewTaskToReadyList+0x74>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c264:	4a18      	ldr	r2, [pc, #96]	; (800c2c8 <prvAddNewTaskToReadyList+0xd4>)
 800c266:	6013      	str	r3, [r2, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c26c:	4613      	mov	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	4413      	add	r3, r2
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4a15      	ldr	r2, [pc, #84]	; (800c2cc <prvAddNewTaskToReadyList+0xd8>)
 800c276:	441a      	add	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	3304      	adds	r3, #4
 800c27c:	4619      	mov	r1, r3
 800c27e:	4610      	mov	r0, r2
 800c280:	f7fe fb8b 	bl	800a99a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c284:	f7fe fd6e 	bl	800ad64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c288:	4b0d      	ldr	r3, [pc, #52]	; (800c2c0 <prvAddNewTaskToReadyList+0xcc>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d00e      	beq.n	800c2ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c290:	4b0a      	ldr	r3, [pc, #40]	; (800c2bc <prvAddNewTaskToReadyList+0xc8>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d207      	bcs.n	800c2ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c29e:	4b0c      	ldr	r3, [pc, #48]	; (800c2d0 <prvAddNewTaskToReadyList+0xdc>)
 800c2a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a4:	601a      	str	r2, [r3, #0]
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2ae:	bf00      	nop
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	20004eb4 	.word	0x20004eb4
 800c2bc:	200049e0 	.word	0x200049e0
 800c2c0:	20004ec0 	.word	0x20004ec0
 800c2c4:	20004ed0 	.word	0x20004ed0
 800c2c8:	20004ebc 	.word	0x20004ebc
 800c2cc:	200049e4 	.word	0x200049e4
 800c2d0:	e000ed04 	.word	0xe000ed04

0800c2d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d017      	beq.n	800c316 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c2e6:	4b13      	ldr	r3, [pc, #76]	; (800c334 <vTaskDelay+0x60>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00a      	beq.n	800c304 <vTaskDelay+0x30>
	__asm volatile
 800c2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f2:	f383 8811 	msr	BASEPRI, r3
 800c2f6:	f3bf 8f6f 	isb	sy
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	60bb      	str	r3, [r7, #8]
}
 800c300:	bf00      	nop
 800c302:	e7fe      	b.n	800c302 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c304:	f000 f990 	bl	800c628 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c308:	2100      	movs	r1, #0
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 ff02 	bl	800d114 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c310:	f000 f998 	bl	800c644 <xTaskResumeAll>
 800c314:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d107      	bne.n	800c32c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c31c:	4b06      	ldr	r3, [pc, #24]	; (800c338 <vTaskDelay+0x64>)
 800c31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c322:	601a      	str	r2, [r3, #0]
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c32c:	bf00      	nop
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	20004edc 	.word	0x20004edc
 800c338:	e000ed04 	.word	0xe000ed04

0800c33c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c344:	f7fe fcde 	bl	800ad04 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d102      	bne.n	800c354 <vTaskSuspend+0x18>
 800c34e:	4b30      	ldr	r3, [pc, #192]	; (800c410 <vTaskSuspend+0xd4>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	e000      	b.n	800c356 <vTaskSuspend+0x1a>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3304      	adds	r3, #4
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fe fb79 	bl	800aa54 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c366:	2b00      	cmp	r3, #0
 800c368:	d004      	beq.n	800c374 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	3318      	adds	r3, #24
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fe fb70 	bl	800aa54 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	3304      	adds	r3, #4
 800c378:	4619      	mov	r1, r3
 800c37a:	4826      	ldr	r0, [pc, #152]	; (800c414 <vTaskSuspend+0xd8>)
 800c37c:	f7fe fb0d 	bl	800a99a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800c386:	b2db      	uxtb	r3, r3
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d103      	bne.n	800c394 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c394:	f7fe fce6 	bl	800ad64 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c398:	4b1f      	ldr	r3, [pc, #124]	; (800c418 <vTaskSuspend+0xdc>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d005      	beq.n	800c3ac <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c3a0:	f7fe fcb0 	bl	800ad04 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c3a4:	f000 fd0c 	bl	800cdc0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c3a8:	f7fe fcdc 	bl	800ad64 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c3ac:	4b18      	ldr	r3, [pc, #96]	; (800c410 <vTaskSuspend+0xd4>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d127      	bne.n	800c406 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800c3b6:	4b18      	ldr	r3, [pc, #96]	; (800c418 <vTaskSuspend+0xdc>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d017      	beq.n	800c3ee <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c3be:	4b17      	ldr	r3, [pc, #92]	; (800c41c <vTaskSuspend+0xe0>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00a      	beq.n	800c3dc <vTaskSuspend+0xa0>
	__asm volatile
 800c3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ca:	f383 8811 	msr	BASEPRI, r3
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	60bb      	str	r3, [r7, #8]
}
 800c3d8:	bf00      	nop
 800c3da:	e7fe      	b.n	800c3da <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800c3dc:	4b10      	ldr	r3, [pc, #64]	; (800c420 <vTaskSuspend+0xe4>)
 800c3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3e2:	601a      	str	r2, [r3, #0]
 800c3e4:	f3bf 8f4f 	dsb	sy
 800c3e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c3ec:	e00b      	b.n	800c406 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c3ee:	4b09      	ldr	r3, [pc, #36]	; (800c414 <vTaskSuspend+0xd8>)
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	4b0c      	ldr	r3, [pc, #48]	; (800c424 <vTaskSuspend+0xe8>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d103      	bne.n	800c402 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800c3fa:	4b05      	ldr	r3, [pc, #20]	; (800c410 <vTaskSuspend+0xd4>)
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	601a      	str	r2, [r3, #0]
	}
 800c400:	e001      	b.n	800c406 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800c402:	f000 fa87 	bl	800c914 <vTaskSwitchContext>
	}
 800c406:	bf00      	nop
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	200049e0 	.word	0x200049e0
 800c414:	20004ea0 	.word	0x20004ea0
 800c418:	20004ec0 	.word	0x20004ec0
 800c41c:	20004edc 	.word	0x20004edc
 800c420:	e000ed04 	.word	0xe000ed04
 800c424:	20004eb4 	.word	0x20004eb4

0800c428 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c428:	b480      	push	{r7}
 800c42a:	b087      	sub	sp, #28
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c430:	2300      	movs	r3, #0
 800c432:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10a      	bne.n	800c454 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	60fb      	str	r3, [r7, #12]
}
 800c450:	bf00      	nop
 800c452:	e7fe      	b.n	800c452 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	695b      	ldr	r3, [r3, #20]
 800c458:	4a0a      	ldr	r2, [pc, #40]	; (800c484 <prvTaskIsTaskSuspended+0x5c>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d10a      	bne.n	800c474 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c462:	4a09      	ldr	r2, [pc, #36]	; (800c488 <prvTaskIsTaskSuspended+0x60>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d005      	beq.n	800c474 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d101      	bne.n	800c474 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800c470:	2301      	movs	r3, #1
 800c472:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c474:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c476:	4618      	mov	r0, r3
 800c478:	371c      	adds	r7, #28
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	20004ea0 	.word	0x20004ea0
 800c488:	20004e74 	.word	0x20004e74

0800c48c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d10a      	bne.n	800c4b4 <vTaskResume+0x28>
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	60bb      	str	r3, [r7, #8]
}
 800c4b0:	bf00      	nop
 800c4b2:	e7fe      	b.n	800c4b2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800c4b4:	4b20      	ldr	r3, [pc, #128]	; (800c538 <vTaskResume+0xac>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d038      	beq.n	800c530 <vTaskResume+0xa4>
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d035      	beq.n	800c530 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800c4c4:	f7fe fc1e 	bl	800ad04 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f7ff ffad 	bl	800c428 <prvTaskIsTaskSuspended>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d02b      	beq.n	800c52c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f7fe fabb 	bl	800aa54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e2:	4b16      	ldr	r3, [pc, #88]	; (800c53c <vTaskResume+0xb0>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d903      	bls.n	800c4f2 <vTaskResume+0x66>
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ee:	4a13      	ldr	r2, [pc, #76]	; (800c53c <vTaskResume+0xb0>)
 800c4f0:	6013      	str	r3, [r2, #0]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	4413      	add	r3, r2
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	4a10      	ldr	r2, [pc, #64]	; (800c540 <vTaskResume+0xb4>)
 800c500:	441a      	add	r2, r3
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	3304      	adds	r3, #4
 800c506:	4619      	mov	r1, r3
 800c508:	4610      	mov	r0, r2
 800c50a:	f7fe fa46 	bl	800a99a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c512:	4b09      	ldr	r3, [pc, #36]	; (800c538 <vTaskResume+0xac>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c518:	429a      	cmp	r2, r3
 800c51a:	d307      	bcc.n	800c52c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800c51c:	4b09      	ldr	r3, [pc, #36]	; (800c544 <vTaskResume+0xb8>)
 800c51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c522:	601a      	str	r2, [r3, #0]
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800c52c:	f7fe fc1a 	bl	800ad64 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c530:	bf00      	nop
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	200049e0 	.word	0x200049e0
 800c53c:	20004ebc 	.word	0x20004ebc
 800c540:	200049e4 	.word	0x200049e4
 800c544:	e000ed04 	.word	0xe000ed04

0800c548 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b08a      	sub	sp, #40	; 0x28
 800c54c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c54e:	2300      	movs	r3, #0
 800c550:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c552:	2300      	movs	r3, #0
 800c554:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c556:	463a      	mov	r2, r7
 800c558:	1d39      	adds	r1, r7, #4
 800c55a:	f107 0308 	add.w	r3, r7, #8
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fd ffd0 	bl	800a504 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	68ba      	ldr	r2, [r7, #8]
 800c56a:	9202      	str	r2, [sp, #8]
 800c56c:	9301      	str	r3, [sp, #4]
 800c56e:	2300      	movs	r3, #0
 800c570:	9300      	str	r3, [sp, #0]
 800c572:	2300      	movs	r3, #0
 800c574:	460a      	mov	r2, r1
 800c576:	4924      	ldr	r1, [pc, #144]	; (800c608 <vTaskStartScheduler+0xc0>)
 800c578:	4824      	ldr	r0, [pc, #144]	; (800c60c <vTaskStartScheduler+0xc4>)
 800c57a:	f7ff fcf3 	bl	800bf64 <xTaskCreateStatic>
 800c57e:	4603      	mov	r3, r0
 800c580:	4a23      	ldr	r2, [pc, #140]	; (800c610 <vTaskStartScheduler+0xc8>)
 800c582:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c584:	4b22      	ldr	r3, [pc, #136]	; (800c610 <vTaskStartScheduler+0xc8>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d002      	beq.n	800c592 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c58c:	2301      	movs	r3, #1
 800c58e:	617b      	str	r3, [r7, #20]
 800c590:	e001      	b.n	800c596 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c592:	2300      	movs	r3, #0
 800c594:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d102      	bne.n	800c5a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c59c:	f000 fe0e 	bl	800d1bc <xTimerCreateTimerTask>
 800c5a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d11b      	bne.n	800c5e0 <vTaskStartScheduler+0x98>
	__asm volatile
 800c5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ac:	f383 8811 	msr	BASEPRI, r3
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	613b      	str	r3, [r7, #16]
}
 800c5ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c5bc:	4b15      	ldr	r3, [pc, #84]	; (800c614 <vTaskStartScheduler+0xcc>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	3354      	adds	r3, #84	; 0x54
 800c5c2:	4a15      	ldr	r2, [pc, #84]	; (800c618 <vTaskStartScheduler+0xd0>)
 800c5c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c5c6:	4b15      	ldr	r3, [pc, #84]	; (800c61c <vTaskStartScheduler+0xd4>)
 800c5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c5cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c5ce:	4b14      	ldr	r3, [pc, #80]	; (800c620 <vTaskStartScheduler+0xd8>)
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c5d4:	4b13      	ldr	r3, [pc, #76]	; (800c624 <vTaskStartScheduler+0xdc>)
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c5da:	f7fe faf1 	bl	800abc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c5de:	e00e      	b.n	800c5fe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5e6:	d10a      	bne.n	800c5fe <vTaskStartScheduler+0xb6>
	__asm volatile
 800c5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ec:	f383 8811 	msr	BASEPRI, r3
 800c5f0:	f3bf 8f6f 	isb	sy
 800c5f4:	f3bf 8f4f 	dsb	sy
 800c5f8:	60fb      	str	r3, [r7, #12]
}
 800c5fa:	bf00      	nop
 800c5fc:	e7fe      	b.n	800c5fc <vTaskStartScheduler+0xb4>
}
 800c5fe:	bf00      	nop
 800c600:	3718      	adds	r7, #24
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	0801398c 	.word	0x0801398c
 800c60c:	0800cc4d 	.word	0x0800cc4d
 800c610:	20004ed8 	.word	0x20004ed8
 800c614:	200049e0 	.word	0x200049e0
 800c618:	20000038 	.word	0x20000038
 800c61c:	20004ed4 	.word	0x20004ed4
 800c620:	20004ec0 	.word	0x20004ec0
 800c624:	20004eb8 	.word	0x20004eb8

0800c628 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c628:	b480      	push	{r7}
 800c62a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c62c:	4b04      	ldr	r3, [pc, #16]	; (800c640 <vTaskSuspendAll+0x18>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	3301      	adds	r3, #1
 800c632:	4a03      	ldr	r2, [pc, #12]	; (800c640 <vTaskSuspendAll+0x18>)
 800c634:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c636:	bf00      	nop
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr
 800c640:	20004edc 	.word	0x20004edc

0800c644 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c64a:	2300      	movs	r3, #0
 800c64c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c64e:	2300      	movs	r3, #0
 800c650:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c652:	4b42      	ldr	r3, [pc, #264]	; (800c75c <xTaskResumeAll+0x118>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d10a      	bne.n	800c670 <xTaskResumeAll+0x2c>
	__asm volatile
 800c65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65e:	f383 8811 	msr	BASEPRI, r3
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	f3bf 8f4f 	dsb	sy
 800c66a:	603b      	str	r3, [r7, #0]
}
 800c66c:	bf00      	nop
 800c66e:	e7fe      	b.n	800c66e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c670:	f7fe fb48 	bl	800ad04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c674:	4b39      	ldr	r3, [pc, #228]	; (800c75c <xTaskResumeAll+0x118>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	3b01      	subs	r3, #1
 800c67a:	4a38      	ldr	r2, [pc, #224]	; (800c75c <xTaskResumeAll+0x118>)
 800c67c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c67e:	4b37      	ldr	r3, [pc, #220]	; (800c75c <xTaskResumeAll+0x118>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d162      	bne.n	800c74c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c686:	4b36      	ldr	r3, [pc, #216]	; (800c760 <xTaskResumeAll+0x11c>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d05e      	beq.n	800c74c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c68e:	e02f      	b.n	800c6f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c690:	4b34      	ldr	r3, [pc, #208]	; (800c764 <xTaskResumeAll+0x120>)
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	3318      	adds	r3, #24
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7fe f9d9 	bl	800aa54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	3304      	adds	r3, #4
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fe f9d4 	bl	800aa54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b0:	4b2d      	ldr	r3, [pc, #180]	; (800c768 <xTaskResumeAll+0x124>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d903      	bls.n	800c6c0 <xTaskResumeAll+0x7c>
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6bc:	4a2a      	ldr	r2, [pc, #168]	; (800c768 <xTaskResumeAll+0x124>)
 800c6be:	6013      	str	r3, [r2, #0]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c4:	4613      	mov	r3, r2
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	4413      	add	r3, r2
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4a27      	ldr	r2, [pc, #156]	; (800c76c <xTaskResumeAll+0x128>)
 800c6ce:	441a      	add	r2, r3
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	3304      	adds	r3, #4
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	4610      	mov	r0, r2
 800c6d8:	f7fe f95f 	bl	800a99a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e0:	4b23      	ldr	r3, [pc, #140]	; (800c770 <xTaskResumeAll+0x12c>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d302      	bcc.n	800c6f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c6ea:	4b22      	ldr	r3, [pc, #136]	; (800c774 <xTaskResumeAll+0x130>)
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c6f0:	4b1c      	ldr	r3, [pc, #112]	; (800c764 <xTaskResumeAll+0x120>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1cb      	bne.n	800c690 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d001      	beq.n	800c702 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c6fe:	f000 fb5f 	bl	800cdc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c702:	4b1d      	ldr	r3, [pc, #116]	; (800c778 <xTaskResumeAll+0x134>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d010      	beq.n	800c730 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c70e:	f000 f847 	bl	800c7a0 <xTaskIncrementTick>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d002      	beq.n	800c71e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c718:	4b16      	ldr	r3, [pc, #88]	; (800c774 <xTaskResumeAll+0x130>)
 800c71a:	2201      	movs	r2, #1
 800c71c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	3b01      	subs	r3, #1
 800c722:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1f1      	bne.n	800c70e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c72a:	4b13      	ldr	r3, [pc, #76]	; (800c778 <xTaskResumeAll+0x134>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c730:	4b10      	ldr	r3, [pc, #64]	; (800c774 <xTaskResumeAll+0x130>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d009      	beq.n	800c74c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c738:	2301      	movs	r3, #1
 800c73a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c73c:	4b0f      	ldr	r3, [pc, #60]	; (800c77c <xTaskResumeAll+0x138>)
 800c73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	f3bf 8f4f 	dsb	sy
 800c748:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c74c:	f7fe fb0a 	bl	800ad64 <vPortExitCritical>

	return xAlreadyYielded;
 800c750:	68bb      	ldr	r3, [r7, #8]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	20004edc 	.word	0x20004edc
 800c760:	20004eb4 	.word	0x20004eb4
 800c764:	20004e74 	.word	0x20004e74
 800c768:	20004ebc 	.word	0x20004ebc
 800c76c:	200049e4 	.word	0x200049e4
 800c770:	200049e0 	.word	0x200049e0
 800c774:	20004ec8 	.word	0x20004ec8
 800c778:	20004ec4 	.word	0x20004ec4
 800c77c:	e000ed04 	.word	0xe000ed04

0800c780 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c786:	4b05      	ldr	r3, [pc, #20]	; (800c79c <xTaskGetTickCount+0x1c>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c78c:	687b      	ldr	r3, [r7, #4]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	370c      	adds	r7, #12
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop
 800c79c:	20004eb8 	.word	0x20004eb8

0800c7a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b086      	sub	sp, #24
 800c7a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7aa:	4b4f      	ldr	r3, [pc, #316]	; (800c8e8 <xTaskIncrementTick+0x148>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f040 808f 	bne.w	800c8d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c7b4:	4b4d      	ldr	r3, [pc, #308]	; (800c8ec <xTaskIncrementTick+0x14c>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c7bc:	4a4b      	ldr	r2, [pc, #300]	; (800c8ec <xTaskIncrementTick+0x14c>)
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d120      	bne.n	800c80a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c7c8:	4b49      	ldr	r3, [pc, #292]	; (800c8f0 <xTaskIncrementTick+0x150>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00a      	beq.n	800c7e8 <xTaskIncrementTick+0x48>
	__asm volatile
 800c7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	603b      	str	r3, [r7, #0]
}
 800c7e4:	bf00      	nop
 800c7e6:	e7fe      	b.n	800c7e6 <xTaskIncrementTick+0x46>
 800c7e8:	4b41      	ldr	r3, [pc, #260]	; (800c8f0 <xTaskIncrementTick+0x150>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	60fb      	str	r3, [r7, #12]
 800c7ee:	4b41      	ldr	r3, [pc, #260]	; (800c8f4 <xTaskIncrementTick+0x154>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a3f      	ldr	r2, [pc, #252]	; (800c8f0 <xTaskIncrementTick+0x150>)
 800c7f4:	6013      	str	r3, [r2, #0]
 800c7f6:	4a3f      	ldr	r2, [pc, #252]	; (800c8f4 <xTaskIncrementTick+0x154>)
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	6013      	str	r3, [r2, #0]
 800c7fc:	4b3e      	ldr	r3, [pc, #248]	; (800c8f8 <xTaskIncrementTick+0x158>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	3301      	adds	r3, #1
 800c802:	4a3d      	ldr	r2, [pc, #244]	; (800c8f8 <xTaskIncrementTick+0x158>)
 800c804:	6013      	str	r3, [r2, #0]
 800c806:	f000 fadb 	bl	800cdc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c80a:	4b3c      	ldr	r3, [pc, #240]	; (800c8fc <xTaskIncrementTick+0x15c>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	693a      	ldr	r2, [r7, #16]
 800c810:	429a      	cmp	r2, r3
 800c812:	d349      	bcc.n	800c8a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c814:	4b36      	ldr	r3, [pc, #216]	; (800c8f0 <xTaskIncrementTick+0x150>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d104      	bne.n	800c828 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c81e:	4b37      	ldr	r3, [pc, #220]	; (800c8fc <xTaskIncrementTick+0x15c>)
 800c820:	f04f 32ff 	mov.w	r2, #4294967295
 800c824:	601a      	str	r2, [r3, #0]
					break;
 800c826:	e03f      	b.n	800c8a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c828:	4b31      	ldr	r3, [pc, #196]	; (800c8f0 <xTaskIncrementTick+0x150>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c838:	693a      	ldr	r2, [r7, #16]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d203      	bcs.n	800c848 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c840:	4a2e      	ldr	r2, [pc, #184]	; (800c8fc <xTaskIncrementTick+0x15c>)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c846:	e02f      	b.n	800c8a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	3304      	adds	r3, #4
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7fe f901 	bl	800aa54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c856:	2b00      	cmp	r3, #0
 800c858:	d004      	beq.n	800c864 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	3318      	adds	r3, #24
 800c85e:	4618      	mov	r0, r3
 800c860:	f7fe f8f8 	bl	800aa54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c868:	4b25      	ldr	r3, [pc, #148]	; (800c900 <xTaskIncrementTick+0x160>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d903      	bls.n	800c878 <xTaskIncrementTick+0xd8>
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c874:	4a22      	ldr	r2, [pc, #136]	; (800c900 <xTaskIncrementTick+0x160>)
 800c876:	6013      	str	r3, [r2, #0]
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c87c:	4613      	mov	r3, r2
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	4413      	add	r3, r2
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	4a1f      	ldr	r2, [pc, #124]	; (800c904 <xTaskIncrementTick+0x164>)
 800c886:	441a      	add	r2, r3
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	3304      	adds	r3, #4
 800c88c:	4619      	mov	r1, r3
 800c88e:	4610      	mov	r0, r2
 800c890:	f7fe f883 	bl	800a99a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c898:	4b1b      	ldr	r3, [pc, #108]	; (800c908 <xTaskIncrementTick+0x168>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d3b8      	bcc.n	800c814 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8a6:	e7b5      	b.n	800c814 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c8a8:	4b17      	ldr	r3, [pc, #92]	; (800c908 <xTaskIncrementTick+0x168>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ae:	4915      	ldr	r1, [pc, #84]	; (800c904 <xTaskIncrementTick+0x164>)
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	4413      	add	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	440b      	add	r3, r1
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d901      	bls.n	800c8c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c8c4:	4b11      	ldr	r3, [pc, #68]	; (800c90c <xTaskIncrementTick+0x16c>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d007      	beq.n	800c8dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	617b      	str	r3, [r7, #20]
 800c8d0:	e004      	b.n	800c8dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c8d2:	4b0f      	ldr	r3, [pc, #60]	; (800c910 <xTaskIncrementTick+0x170>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	4a0d      	ldr	r2, [pc, #52]	; (800c910 <xTaskIncrementTick+0x170>)
 800c8da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c8dc:	697b      	ldr	r3, [r7, #20]
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3718      	adds	r7, #24
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	20004edc 	.word	0x20004edc
 800c8ec:	20004eb8 	.word	0x20004eb8
 800c8f0:	20004e6c 	.word	0x20004e6c
 800c8f4:	20004e70 	.word	0x20004e70
 800c8f8:	20004ecc 	.word	0x20004ecc
 800c8fc:	20004ed4 	.word	0x20004ed4
 800c900:	20004ebc 	.word	0x20004ebc
 800c904:	200049e4 	.word	0x200049e4
 800c908:	200049e0 	.word	0x200049e0
 800c90c:	20004ec8 	.word	0x20004ec8
 800c910:	20004ec4 	.word	0x20004ec4

0800c914 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c91a:	4b2a      	ldr	r3, [pc, #168]	; (800c9c4 <vTaskSwitchContext+0xb0>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d003      	beq.n	800c92a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c922:	4b29      	ldr	r3, [pc, #164]	; (800c9c8 <vTaskSwitchContext+0xb4>)
 800c924:	2201      	movs	r2, #1
 800c926:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c928:	e046      	b.n	800c9b8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c92a:	4b27      	ldr	r3, [pc, #156]	; (800c9c8 <vTaskSwitchContext+0xb4>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c930:	4b26      	ldr	r3, [pc, #152]	; (800c9cc <vTaskSwitchContext+0xb8>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	60fb      	str	r3, [r7, #12]
 800c936:	e010      	b.n	800c95a <vTaskSwitchContext+0x46>
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d10a      	bne.n	800c954 <vTaskSwitchContext+0x40>
	__asm volatile
 800c93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c942:	f383 8811 	msr	BASEPRI, r3
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	607b      	str	r3, [r7, #4]
}
 800c950:	bf00      	nop
 800c952:	e7fe      	b.n	800c952 <vTaskSwitchContext+0x3e>
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	3b01      	subs	r3, #1
 800c958:	60fb      	str	r3, [r7, #12]
 800c95a:	491d      	ldr	r1, [pc, #116]	; (800c9d0 <vTaskSwitchContext+0xbc>)
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	4613      	mov	r3, r2
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	4413      	add	r3, r2
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	440b      	add	r3, r1
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d0e4      	beq.n	800c938 <vTaskSwitchContext+0x24>
 800c96e:	68fa      	ldr	r2, [r7, #12]
 800c970:	4613      	mov	r3, r2
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	4413      	add	r3, r2
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	4a15      	ldr	r2, [pc, #84]	; (800c9d0 <vTaskSwitchContext+0xbc>)
 800c97a:	4413      	add	r3, r2
 800c97c:	60bb      	str	r3, [r7, #8]
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	605a      	str	r2, [r3, #4]
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	685a      	ldr	r2, [r3, #4]
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	3308      	adds	r3, #8
 800c990:	429a      	cmp	r2, r3
 800c992:	d104      	bne.n	800c99e <vTaskSwitchContext+0x8a>
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	685a      	ldr	r2, [r3, #4]
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	605a      	str	r2, [r3, #4]
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	4a0b      	ldr	r2, [pc, #44]	; (800c9d4 <vTaskSwitchContext+0xc0>)
 800c9a6:	6013      	str	r3, [r2, #0]
 800c9a8:	4a08      	ldr	r2, [pc, #32]	; (800c9cc <vTaskSwitchContext+0xb8>)
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c9ae:	4b09      	ldr	r3, [pc, #36]	; (800c9d4 <vTaskSwitchContext+0xc0>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	3354      	adds	r3, #84	; 0x54
 800c9b4:	4a08      	ldr	r2, [pc, #32]	; (800c9d8 <vTaskSwitchContext+0xc4>)
 800c9b6:	6013      	str	r3, [r2, #0]
}
 800c9b8:	bf00      	nop
 800c9ba:	3714      	adds	r7, #20
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr
 800c9c4:	20004edc 	.word	0x20004edc
 800c9c8:	20004ec8 	.word	0x20004ec8
 800c9cc:	20004ebc 	.word	0x20004ebc
 800c9d0:	200049e4 	.word	0x200049e4
 800c9d4:	200049e0 	.word	0x200049e0
 800c9d8:	20000038 	.word	0x20000038

0800c9dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d10a      	bne.n	800ca02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f0:	f383 8811 	msr	BASEPRI, r3
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	60fb      	str	r3, [r7, #12]
}
 800c9fe:	bf00      	nop
 800ca00:	e7fe      	b.n	800ca00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca02:	4b07      	ldr	r3, [pc, #28]	; (800ca20 <vTaskPlaceOnEventList+0x44>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	3318      	adds	r3, #24
 800ca08:	4619      	mov	r1, r3
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7fd ffe9 	bl	800a9e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca10:	2101      	movs	r1, #1
 800ca12:	6838      	ldr	r0, [r7, #0]
 800ca14:	f000 fb7e 	bl	800d114 <prvAddCurrentTaskToDelayedList>
}
 800ca18:	bf00      	nop
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	200049e0 	.word	0x200049e0

0800ca24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b086      	sub	sp, #24
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10a      	bne.n	800ca4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ca36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	617b      	str	r3, [r7, #20]
}
 800ca48:	bf00      	nop
 800ca4a:	e7fe      	b.n	800ca4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca4c:	4b0a      	ldr	r3, [pc, #40]	; (800ca78 <vTaskPlaceOnEventListRestricted+0x54>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	3318      	adds	r3, #24
 800ca52:	4619      	mov	r1, r3
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f7fd ffa0 	bl	800a99a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d002      	beq.n	800ca66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ca60:	f04f 33ff 	mov.w	r3, #4294967295
 800ca64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ca66:	6879      	ldr	r1, [r7, #4]
 800ca68:	68b8      	ldr	r0, [r7, #8]
 800ca6a:	f000 fb53 	bl	800d114 <prvAddCurrentTaskToDelayedList>
	}
 800ca6e:	bf00      	nop
 800ca70:	3718      	adds	r7, #24
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	200049e0 	.word	0x200049e0

0800ca7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b086      	sub	sp, #24
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	68db      	ldr	r3, [r3, #12]
 800ca8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d10a      	bne.n	800caa8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ca92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca96:	f383 8811 	msr	BASEPRI, r3
 800ca9a:	f3bf 8f6f 	isb	sy
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	60fb      	str	r3, [r7, #12]
}
 800caa4:	bf00      	nop
 800caa6:	e7fe      	b.n	800caa6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	3318      	adds	r3, #24
 800caac:	4618      	mov	r0, r3
 800caae:	f7fd ffd1 	bl	800aa54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cab2:	4b1e      	ldr	r3, [pc, #120]	; (800cb2c <xTaskRemoveFromEventList+0xb0>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d11d      	bne.n	800caf6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	3304      	adds	r3, #4
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fd ffc8 	bl	800aa54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac8:	4b19      	ldr	r3, [pc, #100]	; (800cb30 <xTaskRemoveFromEventList+0xb4>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d903      	bls.n	800cad8 <xTaskRemoveFromEventList+0x5c>
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad4:	4a16      	ldr	r2, [pc, #88]	; (800cb30 <xTaskRemoveFromEventList+0xb4>)
 800cad6:	6013      	str	r3, [r2, #0]
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cadc:	4613      	mov	r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	4413      	add	r3, r2
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	4a13      	ldr	r2, [pc, #76]	; (800cb34 <xTaskRemoveFromEventList+0xb8>)
 800cae6:	441a      	add	r2, r3
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	3304      	adds	r3, #4
 800caec:	4619      	mov	r1, r3
 800caee:	4610      	mov	r0, r2
 800caf0:	f7fd ff53 	bl	800a99a <vListInsertEnd>
 800caf4:	e005      	b.n	800cb02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	3318      	adds	r3, #24
 800cafa:	4619      	mov	r1, r3
 800cafc:	480e      	ldr	r0, [pc, #56]	; (800cb38 <xTaskRemoveFromEventList+0xbc>)
 800cafe:	f7fd ff4c 	bl	800a99a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb06:	4b0d      	ldr	r3, [pc, #52]	; (800cb3c <xTaskRemoveFromEventList+0xc0>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d905      	bls.n	800cb1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cb10:	2301      	movs	r3, #1
 800cb12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cb14:	4b0a      	ldr	r3, [pc, #40]	; (800cb40 <xTaskRemoveFromEventList+0xc4>)
 800cb16:	2201      	movs	r2, #1
 800cb18:	601a      	str	r2, [r3, #0]
 800cb1a:	e001      	b.n	800cb20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cb20:	697b      	ldr	r3, [r7, #20]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3718      	adds	r7, #24
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	20004edc 	.word	0x20004edc
 800cb30:	20004ebc 	.word	0x20004ebc
 800cb34:	200049e4 	.word	0x200049e4
 800cb38:	20004e74 	.word	0x20004e74
 800cb3c:	200049e0 	.word	0x200049e0
 800cb40:	20004ec8 	.word	0x20004ec8

0800cb44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cb4c:	4b06      	ldr	r3, [pc, #24]	; (800cb68 <vTaskInternalSetTimeOutState+0x24>)
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cb54:	4b05      	ldr	r3, [pc, #20]	; (800cb6c <vTaskInternalSetTimeOutState+0x28>)
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	605a      	str	r2, [r3, #4]
}
 800cb5c:	bf00      	nop
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr
 800cb68:	20004ecc 	.word	0x20004ecc
 800cb6c:	20004eb8 	.word	0x20004eb8

0800cb70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b088      	sub	sp, #32
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10a      	bne.n	800cb96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb84:	f383 8811 	msr	BASEPRI, r3
 800cb88:	f3bf 8f6f 	isb	sy
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	613b      	str	r3, [r7, #16]
}
 800cb92:	bf00      	nop
 800cb94:	e7fe      	b.n	800cb94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10a      	bne.n	800cbb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	60fb      	str	r3, [r7, #12]
}
 800cbae:	bf00      	nop
 800cbb0:	e7fe      	b.n	800cbb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cbb2:	f7fe f8a7 	bl	800ad04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cbb6:	4b1d      	ldr	r3, [pc, #116]	; (800cc2c <xTaskCheckForTimeOut+0xbc>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	69ba      	ldr	r2, [r7, #24]
 800cbc2:	1ad3      	subs	r3, r2, r3
 800cbc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbce:	d102      	bne.n	800cbd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	61fb      	str	r3, [r7, #28]
 800cbd4:	e023      	b.n	800cc1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	4b15      	ldr	r3, [pc, #84]	; (800cc30 <xTaskCheckForTimeOut+0xc0>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d007      	beq.n	800cbf2 <xTaskCheckForTimeOut+0x82>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	69ba      	ldr	r2, [r7, #24]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d302      	bcc.n	800cbf2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cbec:	2301      	movs	r3, #1
 800cbee:	61fb      	str	r3, [r7, #28]
 800cbf0:	e015      	b.n	800cc1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	697a      	ldr	r2, [r7, #20]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d20b      	bcs.n	800cc14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	1ad2      	subs	r2, r2, r3
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7ff ff9b 	bl	800cb44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	61fb      	str	r3, [r7, #28]
 800cc12:	e004      	b.n	800cc1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	2200      	movs	r2, #0
 800cc18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cc1e:	f7fe f8a1 	bl	800ad64 <vPortExitCritical>

	return xReturn;
 800cc22:	69fb      	ldr	r3, [r7, #28]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3720      	adds	r7, #32
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	20004eb8 	.word	0x20004eb8
 800cc30:	20004ecc 	.word	0x20004ecc

0800cc34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cc34:	b480      	push	{r7}
 800cc36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc38:	4b03      	ldr	r3, [pc, #12]	; (800cc48 <vTaskMissedYield+0x14>)
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	601a      	str	r2, [r3, #0]
}
 800cc3e:	bf00      	nop
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr
 800cc48:	20004ec8 	.word	0x20004ec8

0800cc4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cc54:	f000 f852 	bl	800ccfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cc58:	4b06      	ldr	r3, [pc, #24]	; (800cc74 <prvIdleTask+0x28>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d9f9      	bls.n	800cc54 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cc60:	4b05      	ldr	r3, [pc, #20]	; (800cc78 <prvIdleTask+0x2c>)
 800cc62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc66:	601a      	str	r2, [r3, #0]
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cc70:	e7f0      	b.n	800cc54 <prvIdleTask+0x8>
 800cc72:	bf00      	nop
 800cc74:	200049e4 	.word	0x200049e4
 800cc78:	e000ed04 	.word	0xe000ed04

0800cc7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc82:	2300      	movs	r3, #0
 800cc84:	607b      	str	r3, [r7, #4]
 800cc86:	e00c      	b.n	800cca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	4413      	add	r3, r2
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	4a12      	ldr	r2, [pc, #72]	; (800ccdc <prvInitialiseTaskLists+0x60>)
 800cc94:	4413      	add	r3, r2
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fd fe52 	bl	800a940 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	607b      	str	r3, [r7, #4]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2b37      	cmp	r3, #55	; 0x37
 800cca6:	d9ef      	bls.n	800cc88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cca8:	480d      	ldr	r0, [pc, #52]	; (800cce0 <prvInitialiseTaskLists+0x64>)
 800ccaa:	f7fd fe49 	bl	800a940 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ccae:	480d      	ldr	r0, [pc, #52]	; (800cce4 <prvInitialiseTaskLists+0x68>)
 800ccb0:	f7fd fe46 	bl	800a940 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ccb4:	480c      	ldr	r0, [pc, #48]	; (800cce8 <prvInitialiseTaskLists+0x6c>)
 800ccb6:	f7fd fe43 	bl	800a940 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ccba:	480c      	ldr	r0, [pc, #48]	; (800ccec <prvInitialiseTaskLists+0x70>)
 800ccbc:	f7fd fe40 	bl	800a940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ccc0:	480b      	ldr	r0, [pc, #44]	; (800ccf0 <prvInitialiseTaskLists+0x74>)
 800ccc2:	f7fd fe3d 	bl	800a940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ccc6:	4b0b      	ldr	r3, [pc, #44]	; (800ccf4 <prvInitialiseTaskLists+0x78>)
 800ccc8:	4a05      	ldr	r2, [pc, #20]	; (800cce0 <prvInitialiseTaskLists+0x64>)
 800ccca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cccc:	4b0a      	ldr	r3, [pc, #40]	; (800ccf8 <prvInitialiseTaskLists+0x7c>)
 800ccce:	4a05      	ldr	r2, [pc, #20]	; (800cce4 <prvInitialiseTaskLists+0x68>)
 800ccd0:	601a      	str	r2, [r3, #0]
}
 800ccd2:	bf00      	nop
 800ccd4:	3708      	adds	r7, #8
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	200049e4 	.word	0x200049e4
 800cce0:	20004e44 	.word	0x20004e44
 800cce4:	20004e58 	.word	0x20004e58
 800cce8:	20004e74 	.word	0x20004e74
 800ccec:	20004e88 	.word	0x20004e88
 800ccf0:	20004ea0 	.word	0x20004ea0
 800ccf4:	20004e6c 	.word	0x20004e6c
 800ccf8:	20004e70 	.word	0x20004e70

0800ccfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd02:	e019      	b.n	800cd38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cd04:	f7fd fffe 	bl	800ad04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd08:	4b10      	ldr	r3, [pc, #64]	; (800cd4c <prvCheckTasksWaitingTermination+0x50>)
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	3304      	adds	r3, #4
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7fd fe9d 	bl	800aa54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cd1a:	4b0d      	ldr	r3, [pc, #52]	; (800cd50 <prvCheckTasksWaitingTermination+0x54>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	4a0b      	ldr	r2, [pc, #44]	; (800cd50 <prvCheckTasksWaitingTermination+0x54>)
 800cd22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cd24:	4b0b      	ldr	r3, [pc, #44]	; (800cd54 <prvCheckTasksWaitingTermination+0x58>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	4a0a      	ldr	r2, [pc, #40]	; (800cd54 <prvCheckTasksWaitingTermination+0x58>)
 800cd2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd2e:	f7fe f819 	bl	800ad64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 f810 	bl	800cd58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd38:	4b06      	ldr	r3, [pc, #24]	; (800cd54 <prvCheckTasksWaitingTermination+0x58>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1e1      	bne.n	800cd04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cd40:	bf00      	nop
 800cd42:	bf00      	nop
 800cd44:	3708      	adds	r7, #8
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	20004e88 	.word	0x20004e88
 800cd50:	20004eb4 	.word	0x20004eb4
 800cd54:	20004e9c 	.word	0x20004e9c

0800cd58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	3354      	adds	r3, #84	; 0x54
 800cd64:	4618      	mov	r0, r3
 800cd66:	f001 feb1 	bl	800eacc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d108      	bne.n	800cd86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7fd fcc3 	bl	800a704 <vPortFree>
				vPortFree( pxTCB );
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7fd fcc0 	bl	800a704 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cd84:	e018      	b.n	800cdb8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d103      	bne.n	800cd98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f7fd fcb7 	bl	800a704 <vPortFree>
	}
 800cd96:	e00f      	b.n	800cdb8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d00a      	beq.n	800cdb8 <prvDeleteTCB+0x60>
	__asm volatile
 800cda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda6:	f383 8811 	msr	BASEPRI, r3
 800cdaa:	f3bf 8f6f 	isb	sy
 800cdae:	f3bf 8f4f 	dsb	sy
 800cdb2:	60fb      	str	r3, [r7, #12]
}
 800cdb4:	bf00      	nop
 800cdb6:	e7fe      	b.n	800cdb6 <prvDeleteTCB+0x5e>
	}
 800cdb8:	bf00      	nop
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdc6:	4b0c      	ldr	r3, [pc, #48]	; (800cdf8 <prvResetNextTaskUnblockTime+0x38>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d104      	bne.n	800cdda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cdd0:	4b0a      	ldr	r3, [pc, #40]	; (800cdfc <prvResetNextTaskUnblockTime+0x3c>)
 800cdd2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cdd8:	e008      	b.n	800cdec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdda:	4b07      	ldr	r3, [pc, #28]	; (800cdf8 <prvResetNextTaskUnblockTime+0x38>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	4a04      	ldr	r2, [pc, #16]	; (800cdfc <prvResetNextTaskUnblockTime+0x3c>)
 800cdea:	6013      	str	r3, [r2, #0]
}
 800cdec:	bf00      	nop
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr
 800cdf8:	20004e6c 	.word	0x20004e6c
 800cdfc:	20004ed4 	.word	0x20004ed4

0800ce00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ce06:	4b0b      	ldr	r3, [pc, #44]	; (800ce34 <xTaskGetSchedulerState+0x34>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d102      	bne.n	800ce14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	607b      	str	r3, [r7, #4]
 800ce12:	e008      	b.n	800ce26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce14:	4b08      	ldr	r3, [pc, #32]	; (800ce38 <xTaskGetSchedulerState+0x38>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d102      	bne.n	800ce22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce1c:	2302      	movs	r3, #2
 800ce1e:	607b      	str	r3, [r7, #4]
 800ce20:	e001      	b.n	800ce26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ce22:	2300      	movs	r3, #0
 800ce24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce26:	687b      	ldr	r3, [r7, #4]
	}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr
 800ce34:	20004ec0 	.word	0x20004ec0
 800ce38:	20004edc 	.word	0x20004edc

0800ce3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d051      	beq.n	800cef6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce56:	4b2a      	ldr	r3, [pc, #168]	; (800cf00 <xTaskPriorityInherit+0xc4>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d241      	bcs.n	800cee4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	699b      	ldr	r3, [r3, #24]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	db06      	blt.n	800ce76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce68:	4b25      	ldr	r3, [pc, #148]	; (800cf00 <xTaskPriorityInherit+0xc4>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	6959      	ldr	r1, [r3, #20]
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce7e:	4613      	mov	r3, r2
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	4413      	add	r3, r2
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	4a1f      	ldr	r2, [pc, #124]	; (800cf04 <xTaskPriorityInherit+0xc8>)
 800ce88:	4413      	add	r3, r2
 800ce8a:	4299      	cmp	r1, r3
 800ce8c:	d122      	bne.n	800ced4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	3304      	adds	r3, #4
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fd fdde 	bl	800aa54 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce98:	4b19      	ldr	r3, [pc, #100]	; (800cf00 <xTaskPriorityInherit+0xc4>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea6:	4b18      	ldr	r3, [pc, #96]	; (800cf08 <xTaskPriorityInherit+0xcc>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d903      	bls.n	800ceb6 <xTaskPriorityInherit+0x7a>
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb2:	4a15      	ldr	r2, [pc, #84]	; (800cf08 <xTaskPriorityInherit+0xcc>)
 800ceb4:	6013      	str	r3, [r2, #0]
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceba:	4613      	mov	r3, r2
 800cebc:	009b      	lsls	r3, r3, #2
 800cebe:	4413      	add	r3, r2
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	4a10      	ldr	r2, [pc, #64]	; (800cf04 <xTaskPriorityInherit+0xc8>)
 800cec4:	441a      	add	r2, r3
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	3304      	adds	r3, #4
 800ceca:	4619      	mov	r1, r3
 800cecc:	4610      	mov	r0, r2
 800cece:	f7fd fd64 	bl	800a99a <vListInsertEnd>
 800ced2:	e004      	b.n	800cede <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ced4:	4b0a      	ldr	r3, [pc, #40]	; (800cf00 <xTaskPriorityInherit+0xc4>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cede:	2301      	movs	r3, #1
 800cee0:	60fb      	str	r3, [r7, #12]
 800cee2:	e008      	b.n	800cef6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cee8:	4b05      	ldr	r3, [pc, #20]	; (800cf00 <xTaskPriorityInherit+0xc4>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d201      	bcs.n	800cef6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cef2:	2301      	movs	r3, #1
 800cef4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cef6:	68fb      	ldr	r3, [r7, #12]
	}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3710      	adds	r7, #16
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	200049e0 	.word	0x200049e0
 800cf04:	200049e4 	.word	0x200049e4
 800cf08:	20004ebc 	.word	0x20004ebc

0800cf0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d056      	beq.n	800cfd0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf22:	4b2e      	ldr	r3, [pc, #184]	; (800cfdc <xTaskPriorityDisinherit+0xd0>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	693a      	ldr	r2, [r7, #16]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d00a      	beq.n	800cf42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cf2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf30:	f383 8811 	msr	BASEPRI, r3
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	60fb      	str	r3, [r7, #12]
}
 800cf3e:	bf00      	nop
 800cf40:	e7fe      	b.n	800cf40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10a      	bne.n	800cf60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4e:	f383 8811 	msr	BASEPRI, r3
 800cf52:	f3bf 8f6f 	isb	sy
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	60bb      	str	r3, [r7, #8]
}
 800cf5c:	bf00      	nop
 800cf5e:	e7fe      	b.n	800cf5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf64:	1e5a      	subs	r2, r3, #1
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d02c      	beq.n	800cfd0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d128      	bne.n	800cfd0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	3304      	adds	r3, #4
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fd fd66 	bl	800aa54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa0:	4b0f      	ldr	r3, [pc, #60]	; (800cfe0 <xTaskPriorityDisinherit+0xd4>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d903      	bls.n	800cfb0 <xTaskPriorityDisinherit+0xa4>
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfac:	4a0c      	ldr	r2, [pc, #48]	; (800cfe0 <xTaskPriorityDisinherit+0xd4>)
 800cfae:	6013      	str	r3, [r2, #0]
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	4413      	add	r3, r2
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	4a09      	ldr	r2, [pc, #36]	; (800cfe4 <xTaskPriorityDisinherit+0xd8>)
 800cfbe:	441a      	add	r2, r3
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	3304      	adds	r3, #4
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	f7fd fce7 	bl	800a99a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfd0:	697b      	ldr	r3, [r7, #20]
	}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3718      	adds	r7, #24
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	200049e0 	.word	0x200049e0
 800cfe0:	20004ebc 	.word	0x20004ebc
 800cfe4:	200049e4 	.word	0x200049e4

0800cfe8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b088      	sub	sp, #32
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cff6:	2301      	movs	r3, #1
 800cff8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d06a      	beq.n	800d0d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d000:	69bb      	ldr	r3, [r7, #24]
 800d002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d004:	2b00      	cmp	r3, #0
 800d006:	d10a      	bne.n	800d01e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d00c:	f383 8811 	msr	BASEPRI, r3
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	60fb      	str	r3, [r7, #12]
}
 800d01a:	bf00      	nop
 800d01c:	e7fe      	b.n	800d01c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d022:	683a      	ldr	r2, [r7, #0]
 800d024:	429a      	cmp	r2, r3
 800d026:	d902      	bls.n	800d02e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	61fb      	str	r3, [r7, #28]
 800d02c:	e002      	b.n	800d034 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d032:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d038:	69fa      	ldr	r2, [r7, #28]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d04b      	beq.n	800d0d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d042:	697a      	ldr	r2, [r7, #20]
 800d044:	429a      	cmp	r2, r3
 800d046:	d146      	bne.n	800d0d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d048:	4b25      	ldr	r3, [pc, #148]	; (800d0e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	69ba      	ldr	r2, [r7, #24]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d10a      	bne.n	800d068 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	60bb      	str	r3, [r7, #8]
}
 800d064:	bf00      	nop
 800d066:	e7fe      	b.n	800d066 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d06c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	69fa      	ldr	r2, [r7, #28]
 800d072:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	db04      	blt.n	800d086 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	6959      	ldr	r1, [r3, #20]
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	4613      	mov	r3, r2
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	4413      	add	r3, r2
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	4a13      	ldr	r2, [pc, #76]	; (800d0e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d096:	4413      	add	r3, r2
 800d098:	4299      	cmp	r1, r3
 800d09a:	d11c      	bne.n	800d0d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	3304      	adds	r3, #4
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7fd fcd7 	bl	800aa54 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0aa:	4b0f      	ldr	r3, [pc, #60]	; (800d0e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d903      	bls.n	800d0ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b6:	4a0c      	ldr	r2, [pc, #48]	; (800d0e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d0b8:	6013      	str	r3, [r2, #0]
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0be:	4613      	mov	r3, r2
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	4413      	add	r3, r2
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	4a07      	ldr	r2, [pc, #28]	; (800d0e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d0c8:	441a      	add	r2, r3
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	f7fd fc62 	bl	800a99a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0d6:	bf00      	nop
 800d0d8:	3720      	adds	r7, #32
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	200049e0 	.word	0x200049e0
 800d0e4:	200049e4 	.word	0x200049e4
 800d0e8:	20004ebc 	.word	0x20004ebc

0800d0ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d0ec:	b480      	push	{r7}
 800d0ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d0f0:	4b07      	ldr	r3, [pc, #28]	; (800d110 <pvTaskIncrementMutexHeldCount+0x24>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d004      	beq.n	800d102 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d0f8:	4b05      	ldr	r3, [pc, #20]	; (800d110 <pvTaskIncrementMutexHeldCount+0x24>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d0fe:	3201      	adds	r2, #1
 800d100:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d102:	4b03      	ldr	r3, [pc, #12]	; (800d110 <pvTaskIncrementMutexHeldCount+0x24>)
 800d104:	681b      	ldr	r3, [r3, #0]
	}
 800d106:	4618      	mov	r0, r3
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr
 800d110:	200049e0 	.word	0x200049e0

0800d114 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d11e:	4b21      	ldr	r3, [pc, #132]	; (800d1a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d124:	4b20      	ldr	r3, [pc, #128]	; (800d1a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	3304      	adds	r3, #4
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7fd fc92 	bl	800aa54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d136:	d10a      	bne.n	800d14e <prvAddCurrentTaskToDelayedList+0x3a>
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d007      	beq.n	800d14e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d13e:	4b1a      	ldr	r3, [pc, #104]	; (800d1a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	3304      	adds	r3, #4
 800d144:	4619      	mov	r1, r3
 800d146:	4819      	ldr	r0, [pc, #100]	; (800d1ac <prvAddCurrentTaskToDelayedList+0x98>)
 800d148:	f7fd fc27 	bl	800a99a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d14c:	e026      	b.n	800d19c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d14e:	68fa      	ldr	r2, [r7, #12]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4413      	add	r3, r2
 800d154:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d156:	4b14      	ldr	r3, [pc, #80]	; (800d1a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d15e:	68ba      	ldr	r2, [r7, #8]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	429a      	cmp	r2, r3
 800d164:	d209      	bcs.n	800d17a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d166:	4b12      	ldr	r3, [pc, #72]	; (800d1b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	4b0f      	ldr	r3, [pc, #60]	; (800d1a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	3304      	adds	r3, #4
 800d170:	4619      	mov	r1, r3
 800d172:	4610      	mov	r0, r2
 800d174:	f7fd fc35 	bl	800a9e2 <vListInsert>
}
 800d178:	e010      	b.n	800d19c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d17a:	4b0e      	ldr	r3, [pc, #56]	; (800d1b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	4b0a      	ldr	r3, [pc, #40]	; (800d1a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	3304      	adds	r3, #4
 800d184:	4619      	mov	r1, r3
 800d186:	4610      	mov	r0, r2
 800d188:	f7fd fc2b 	bl	800a9e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d18c:	4b0a      	ldr	r3, [pc, #40]	; (800d1b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	68ba      	ldr	r2, [r7, #8]
 800d192:	429a      	cmp	r2, r3
 800d194:	d202      	bcs.n	800d19c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d196:	4a08      	ldr	r2, [pc, #32]	; (800d1b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	6013      	str	r3, [r2, #0]
}
 800d19c:	bf00      	nop
 800d19e:	3710      	adds	r7, #16
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	20004eb8 	.word	0x20004eb8
 800d1a8:	200049e0 	.word	0x200049e0
 800d1ac:	20004ea0 	.word	0x20004ea0
 800d1b0:	20004e70 	.word	0x20004e70
 800d1b4:	20004e6c 	.word	0x20004e6c
 800d1b8:	20004ed4 	.word	0x20004ed4

0800d1bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b08a      	sub	sp, #40	; 0x28
 800d1c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d1c6:	f000 fba1 	bl	800d90c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d1ca:	4b1c      	ldr	r3, [pc, #112]	; (800d23c <xTimerCreateTimerTask+0x80>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d021      	beq.n	800d216 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d1da:	1d3a      	adds	r2, r7, #4
 800d1dc:	f107 0108 	add.w	r1, r7, #8
 800d1e0:	f107 030c 	add.w	r3, r7, #12
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7fd f9a7 	bl	800a538 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d1ea:	6879      	ldr	r1, [r7, #4]
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	68fa      	ldr	r2, [r7, #12]
 800d1f0:	9202      	str	r2, [sp, #8]
 800d1f2:	9301      	str	r3, [sp, #4]
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	9300      	str	r3, [sp, #0]
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	460a      	mov	r2, r1
 800d1fc:	4910      	ldr	r1, [pc, #64]	; (800d240 <xTimerCreateTimerTask+0x84>)
 800d1fe:	4811      	ldr	r0, [pc, #68]	; (800d244 <xTimerCreateTimerTask+0x88>)
 800d200:	f7fe feb0 	bl	800bf64 <xTaskCreateStatic>
 800d204:	4603      	mov	r3, r0
 800d206:	4a10      	ldr	r2, [pc, #64]	; (800d248 <xTimerCreateTimerTask+0x8c>)
 800d208:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d20a:	4b0f      	ldr	r3, [pc, #60]	; (800d248 <xTimerCreateTimerTask+0x8c>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d001      	beq.n	800d216 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d212:	2301      	movs	r3, #1
 800d214:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d10a      	bne.n	800d232 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	613b      	str	r3, [r7, #16]
}
 800d22e:	bf00      	nop
 800d230:	e7fe      	b.n	800d230 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d232:	697b      	ldr	r3, [r7, #20]
}
 800d234:	4618      	mov	r0, r3
 800d236:	3718      	adds	r7, #24
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	20004f10 	.word	0x20004f10
 800d240:	08013994 	.word	0x08013994
 800d244:	0800d4b5 	.word	0x0800d4b5
 800d248:	20004f14 	.word	0x20004f14

0800d24c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b088      	sub	sp, #32
 800d250:	af02      	add	r7, sp, #8
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
 800d258:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d25a:	202c      	movs	r0, #44	; 0x2c
 800d25c:	f7fd f986 	bl	800a56c <pvPortMalloc>
 800d260:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d00d      	beq.n	800d284 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	2200      	movs	r2, #0
 800d26c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	9301      	str	r3, [sp, #4]
 800d274:	6a3b      	ldr	r3, [r7, #32]
 800d276:	9300      	str	r3, [sp, #0]
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	68b9      	ldr	r1, [r7, #8]
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f000 f843 	bl	800d30a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d284:	697b      	ldr	r3, [r7, #20]
	}
 800d286:	4618      	mov	r0, r3
 800d288:	3718      	adds	r7, #24
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d28e:	b580      	push	{r7, lr}
 800d290:	b08a      	sub	sp, #40	; 0x28
 800d292:	af02      	add	r7, sp, #8
 800d294:	60f8      	str	r0, [r7, #12]
 800d296:	60b9      	str	r1, [r7, #8]
 800d298:	607a      	str	r2, [r7, #4]
 800d29a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d29c:	232c      	movs	r3, #44	; 0x2c
 800d29e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	2b2c      	cmp	r3, #44	; 0x2c
 800d2a4:	d00a      	beq.n	800d2bc <xTimerCreateStatic+0x2e>
	__asm volatile
 800d2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2aa:	f383 8811 	msr	BASEPRI, r3
 800d2ae:	f3bf 8f6f 	isb	sy
 800d2b2:	f3bf 8f4f 	dsb	sy
 800d2b6:	61bb      	str	r3, [r7, #24]
}
 800d2b8:	bf00      	nop
 800d2ba:	e7fe      	b.n	800d2ba <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d2bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d10a      	bne.n	800d2da <xTimerCreateStatic+0x4c>
	__asm volatile
 800d2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c8:	f383 8811 	msr	BASEPRI, r3
 800d2cc:	f3bf 8f6f 	isb	sy
 800d2d0:	f3bf 8f4f 	dsb	sy
 800d2d4:	617b      	str	r3, [r7, #20]
}
 800d2d6:	bf00      	nop
 800d2d8:	e7fe      	b.n	800d2d8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2dc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d2de:	69fb      	ldr	r3, [r7, #28]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d00d      	beq.n	800d300 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d2e4:	69fb      	ldr	r3, [r7, #28]
 800d2e6:	2202      	movs	r2, #2
 800d2e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	9301      	str	r3, [sp, #4]
 800d2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	68b9      	ldr	r1, [r7, #8]
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f000 f805 	bl	800d30a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d300:	69fb      	ldr	r3, [r7, #28]
	}
 800d302:	4618      	mov	r0, r3
 800d304:	3720      	adds	r7, #32
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d30a:	b580      	push	{r7, lr}
 800d30c:	b086      	sub	sp, #24
 800d30e:	af00      	add	r7, sp, #0
 800d310:	60f8      	str	r0, [r7, #12]
 800d312:	60b9      	str	r1, [r7, #8]
 800d314:	607a      	str	r2, [r7, #4]
 800d316:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d10a      	bne.n	800d334 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d322:	f383 8811 	msr	BASEPRI, r3
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	617b      	str	r3, [r7, #20]
}
 800d330:	bf00      	nop
 800d332:	e7fe      	b.n	800d332 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d336:	2b00      	cmp	r3, #0
 800d338:	d01e      	beq.n	800d378 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d33a:	f000 fae7 	bl	800d90c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d340:	68fa      	ldr	r2, [r7, #12]
 800d342:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d346:	68ba      	ldr	r2, [r7, #8]
 800d348:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34c:	683a      	ldr	r2, [r7, #0]
 800d34e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d352:	6a3a      	ldr	r2, [r7, #32]
 800d354:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d358:	3304      	adds	r3, #4
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fd fb10 	bl	800a980 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d008      	beq.n	800d378 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d36c:	f043 0304 	orr.w	r3, r3, #4
 800d370:	b2da      	uxtb	r2, r3
 800d372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d374:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d378:	bf00      	nop
 800d37a:	3718      	adds	r7, #24
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b08a      	sub	sp, #40	; 0x28
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]
 800d38c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d38e:	2300      	movs	r3, #0
 800d390:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d10a      	bne.n	800d3ae <xTimerGenericCommand+0x2e>
	__asm volatile
 800d398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39c:	f383 8811 	msr	BASEPRI, r3
 800d3a0:	f3bf 8f6f 	isb	sy
 800d3a4:	f3bf 8f4f 	dsb	sy
 800d3a8:	623b      	str	r3, [r7, #32]
}
 800d3aa:	bf00      	nop
 800d3ac:	e7fe      	b.n	800d3ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d3ae:	4b1a      	ldr	r3, [pc, #104]	; (800d418 <xTimerGenericCommand+0x98>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d02a      	beq.n	800d40c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	2b05      	cmp	r3, #5
 800d3c6:	dc18      	bgt.n	800d3fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d3c8:	f7ff fd1a 	bl	800ce00 <xTaskGetSchedulerState>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	d109      	bne.n	800d3e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d3d2:	4b11      	ldr	r3, [pc, #68]	; (800d418 <xTimerGenericCommand+0x98>)
 800d3d4:	6818      	ldr	r0, [r3, #0]
 800d3d6:	f107 0110 	add.w	r1, r7, #16
 800d3da:	2300      	movs	r3, #0
 800d3dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3de:	f7fd ff5b 	bl	800b298 <xQueueGenericSend>
 800d3e2:	6278      	str	r0, [r7, #36]	; 0x24
 800d3e4:	e012      	b.n	800d40c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d3e6:	4b0c      	ldr	r3, [pc, #48]	; (800d418 <xTimerGenericCommand+0x98>)
 800d3e8:	6818      	ldr	r0, [r3, #0]
 800d3ea:	f107 0110 	add.w	r1, r7, #16
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	f7fd ff51 	bl	800b298 <xQueueGenericSend>
 800d3f6:	6278      	str	r0, [r7, #36]	; 0x24
 800d3f8:	e008      	b.n	800d40c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d3fa:	4b07      	ldr	r3, [pc, #28]	; (800d418 <xTimerGenericCommand+0x98>)
 800d3fc:	6818      	ldr	r0, [r3, #0]
 800d3fe:	f107 0110 	add.w	r1, r7, #16
 800d402:	2300      	movs	r3, #0
 800d404:	683a      	ldr	r2, [r7, #0]
 800d406:	f7fe f845 	bl	800b494 <xQueueGenericSendFromISR>
 800d40a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3728      	adds	r7, #40	; 0x28
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	20004f10 	.word	0x20004f10

0800d41c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b088      	sub	sp, #32
 800d420:	af02      	add	r7, sp, #8
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d426:	4b22      	ldr	r3, [pc, #136]	; (800d4b0 <prvProcessExpiredTimer+0x94>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	3304      	adds	r3, #4
 800d434:	4618      	mov	r0, r3
 800d436:	f7fd fb0d 	bl	800aa54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d440:	f003 0304 	and.w	r3, r3, #4
 800d444:	2b00      	cmp	r3, #0
 800d446:	d022      	beq.n	800d48e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	699a      	ldr	r2, [r3, #24]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	18d1      	adds	r1, r2, r3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	683a      	ldr	r2, [r7, #0]
 800d454:	6978      	ldr	r0, [r7, #20]
 800d456:	f000 f8d1 	bl	800d5fc <prvInsertTimerInActiveList>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d01f      	beq.n	800d4a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d460:	2300      	movs	r3, #0
 800d462:	9300      	str	r3, [sp, #0]
 800d464:	2300      	movs	r3, #0
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	2100      	movs	r1, #0
 800d46a:	6978      	ldr	r0, [r7, #20]
 800d46c:	f7ff ff88 	bl	800d380 <xTimerGenericCommand>
 800d470:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d113      	bne.n	800d4a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47c:	f383 8811 	msr	BASEPRI, r3
 800d480:	f3bf 8f6f 	isb	sy
 800d484:	f3bf 8f4f 	dsb	sy
 800d488:	60fb      	str	r3, [r7, #12]
}
 800d48a:	bf00      	nop
 800d48c:	e7fe      	b.n	800d48c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d494:	f023 0301 	bic.w	r3, r3, #1
 800d498:	b2da      	uxtb	r2, r3
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	6a1b      	ldr	r3, [r3, #32]
 800d4a4:	6978      	ldr	r0, [r7, #20]
 800d4a6:	4798      	blx	r3
}
 800d4a8:	bf00      	nop
 800d4aa:	3718      	adds	r7, #24
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	20004f08 	.word	0x20004f08

0800d4b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d4bc:	f107 0308 	add.w	r3, r7, #8
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f000 f857 	bl	800d574 <prvGetNextExpireTime>
 800d4c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f000 f803 	bl	800d4d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d4d2:	f000 f8d5 	bl	800d680 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d4d6:	e7f1      	b.n	800d4bc <prvTimerTask+0x8>

0800d4d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d4e2:	f7ff f8a1 	bl	800c628 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d4e6:	f107 0308 	add.w	r3, r7, #8
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f000 f866 	bl	800d5bc <prvSampleTimeNow>
 800d4f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d130      	bne.n	800d55a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d10a      	bne.n	800d514 <prvProcessTimerOrBlockTask+0x3c>
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	429a      	cmp	r2, r3
 800d504:	d806      	bhi.n	800d514 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d506:	f7ff f89d 	bl	800c644 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d50a:	68f9      	ldr	r1, [r7, #12]
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f7ff ff85 	bl	800d41c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d512:	e024      	b.n	800d55e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d008      	beq.n	800d52c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d51a:	4b13      	ldr	r3, [pc, #76]	; (800d568 <prvProcessTimerOrBlockTask+0x90>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d101      	bne.n	800d528 <prvProcessTimerOrBlockTask+0x50>
 800d524:	2301      	movs	r3, #1
 800d526:	e000      	b.n	800d52a <prvProcessTimerOrBlockTask+0x52>
 800d528:	2300      	movs	r3, #0
 800d52a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d52c:	4b0f      	ldr	r3, [pc, #60]	; (800d56c <prvProcessTimerOrBlockTask+0x94>)
 800d52e:	6818      	ldr	r0, [r3, #0]
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	1ad3      	subs	r3, r2, r3
 800d536:	683a      	ldr	r2, [r7, #0]
 800d538:	4619      	mov	r1, r3
 800d53a:	f7fe fcdf 	bl	800befc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d53e:	f7ff f881 	bl	800c644 <xTaskResumeAll>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d10a      	bne.n	800d55e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d548:	4b09      	ldr	r3, [pc, #36]	; (800d570 <prvProcessTimerOrBlockTask+0x98>)
 800d54a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d54e:	601a      	str	r2, [r3, #0]
 800d550:	f3bf 8f4f 	dsb	sy
 800d554:	f3bf 8f6f 	isb	sy
}
 800d558:	e001      	b.n	800d55e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d55a:	f7ff f873 	bl	800c644 <xTaskResumeAll>
}
 800d55e:	bf00      	nop
 800d560:	3710      	adds	r7, #16
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	20004f0c 	.word	0x20004f0c
 800d56c:	20004f10 	.word	0x20004f10
 800d570:	e000ed04 	.word	0xe000ed04

0800d574 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d574:	b480      	push	{r7}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d57c:	4b0e      	ldr	r3, [pc, #56]	; (800d5b8 <prvGetNextExpireTime+0x44>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d101      	bne.n	800d58a <prvGetNextExpireTime+0x16>
 800d586:	2201      	movs	r2, #1
 800d588:	e000      	b.n	800d58c <prvGetNextExpireTime+0x18>
 800d58a:	2200      	movs	r2, #0
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d105      	bne.n	800d5a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d598:	4b07      	ldr	r3, [pc, #28]	; (800d5b8 <prvGetNextExpireTime+0x44>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	60fb      	str	r3, [r7, #12]
 800d5a2:	e001      	b.n	800d5a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3714      	adds	r7, #20
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	20004f08 	.word	0x20004f08

0800d5bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d5c4:	f7ff f8dc 	bl	800c780 <xTaskGetTickCount>
 800d5c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d5ca:	4b0b      	ldr	r3, [pc, #44]	; (800d5f8 <prvSampleTimeNow+0x3c>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	68fa      	ldr	r2, [r7, #12]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d205      	bcs.n	800d5e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d5d4:	f000 f936 	bl	800d844 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	601a      	str	r2, [r3, #0]
 800d5de:	e002      	b.n	800d5e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d5e6:	4a04      	ldr	r2, [pc, #16]	; (800d5f8 <prvSampleTimeNow+0x3c>)
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	20004f18 	.word	0x20004f18

0800d5fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b086      	sub	sp, #24
 800d600:	af00      	add	r7, sp, #0
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	607a      	str	r2, [r7, #4]
 800d608:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d60a:	2300      	movs	r3, #0
 800d60c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	68ba      	ldr	r2, [r7, #8]
 800d612:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	68fa      	ldr	r2, [r7, #12]
 800d618:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d61a:	68ba      	ldr	r2, [r7, #8]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d812      	bhi.n	800d648 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	1ad2      	subs	r2, r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	699b      	ldr	r3, [r3, #24]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d302      	bcc.n	800d636 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d630:	2301      	movs	r3, #1
 800d632:	617b      	str	r3, [r7, #20]
 800d634:	e01b      	b.n	800d66e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d636:	4b10      	ldr	r3, [pc, #64]	; (800d678 <prvInsertTimerInActiveList+0x7c>)
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	3304      	adds	r3, #4
 800d63e:	4619      	mov	r1, r3
 800d640:	4610      	mov	r0, r2
 800d642:	f7fd f9ce 	bl	800a9e2 <vListInsert>
 800d646:	e012      	b.n	800d66e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d206      	bcs.n	800d65e <prvInsertTimerInActiveList+0x62>
 800d650:	68ba      	ldr	r2, [r7, #8]
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	429a      	cmp	r2, r3
 800d656:	d302      	bcc.n	800d65e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d658:	2301      	movs	r3, #1
 800d65a:	617b      	str	r3, [r7, #20]
 800d65c:	e007      	b.n	800d66e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d65e:	4b07      	ldr	r3, [pc, #28]	; (800d67c <prvInsertTimerInActiveList+0x80>)
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	3304      	adds	r3, #4
 800d666:	4619      	mov	r1, r3
 800d668:	4610      	mov	r0, r2
 800d66a:	f7fd f9ba 	bl	800a9e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d66e:	697b      	ldr	r3, [r7, #20]
}
 800d670:	4618      	mov	r0, r3
 800d672:	3718      	adds	r7, #24
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}
 800d678:	20004f0c 	.word	0x20004f0c
 800d67c:	20004f08 	.word	0x20004f08

0800d680 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b08e      	sub	sp, #56	; 0x38
 800d684:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d686:	e0ca      	b.n	800d81e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	da18      	bge.n	800d6c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d68e:	1d3b      	adds	r3, r7, #4
 800d690:	3304      	adds	r3, #4
 800d692:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d696:	2b00      	cmp	r3, #0
 800d698:	d10a      	bne.n	800d6b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69e:	f383 8811 	msr	BASEPRI, r3
 800d6a2:	f3bf 8f6f 	isb	sy
 800d6a6:	f3bf 8f4f 	dsb	sy
 800d6aa:	61fb      	str	r3, [r7, #28]
}
 800d6ac:	bf00      	nop
 800d6ae:	e7fe      	b.n	800d6ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6b6:	6850      	ldr	r0, [r2, #4]
 800d6b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6ba:	6892      	ldr	r2, [r2, #8]
 800d6bc:	4611      	mov	r1, r2
 800d6be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	f2c0 80aa 	blt.w	800d81c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ce:	695b      	ldr	r3, [r3, #20]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d004      	beq.n	800d6de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d6:	3304      	adds	r3, #4
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fd f9bb 	bl	800aa54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d6de:	463b      	mov	r3, r7
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7ff ff6b 	bl	800d5bc <prvSampleTimeNow>
 800d6e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b09      	cmp	r3, #9
 800d6ec:	f200 8097 	bhi.w	800d81e <prvProcessReceivedCommands+0x19e>
 800d6f0:	a201      	add	r2, pc, #4	; (adr r2, 800d6f8 <prvProcessReceivedCommands+0x78>)
 800d6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f6:	bf00      	nop
 800d6f8:	0800d721 	.word	0x0800d721
 800d6fc:	0800d721 	.word	0x0800d721
 800d700:	0800d721 	.word	0x0800d721
 800d704:	0800d795 	.word	0x0800d795
 800d708:	0800d7a9 	.word	0x0800d7a9
 800d70c:	0800d7f3 	.word	0x0800d7f3
 800d710:	0800d721 	.word	0x0800d721
 800d714:	0800d721 	.word	0x0800d721
 800d718:	0800d795 	.word	0x0800d795
 800d71c:	0800d7a9 	.word	0x0800d7a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d726:	f043 0301 	orr.w	r3, r3, #1
 800d72a:	b2da      	uxtb	r2, r3
 800d72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d736:	699b      	ldr	r3, [r3, #24]
 800d738:	18d1      	adds	r1, r2, r3
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d73e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d740:	f7ff ff5c 	bl	800d5fc <prvInsertTimerInActiveList>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	d069      	beq.n	800d81e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74c:	6a1b      	ldr	r3, [r3, #32]
 800d74e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d750:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d758:	f003 0304 	and.w	r3, r3, #4
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d05e      	beq.n	800d81e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d760:	68ba      	ldr	r2, [r7, #8]
 800d762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d764:	699b      	ldr	r3, [r3, #24]
 800d766:	441a      	add	r2, r3
 800d768:	2300      	movs	r3, #0
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	2300      	movs	r3, #0
 800d76e:	2100      	movs	r1, #0
 800d770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d772:	f7ff fe05 	bl	800d380 <xTimerGenericCommand>
 800d776:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d778:	6a3b      	ldr	r3, [r7, #32]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d14f      	bne.n	800d81e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d782:	f383 8811 	msr	BASEPRI, r3
 800d786:	f3bf 8f6f 	isb	sy
 800d78a:	f3bf 8f4f 	dsb	sy
 800d78e:	61bb      	str	r3, [r7, #24]
}
 800d790:	bf00      	nop
 800d792:	e7fe      	b.n	800d792 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d79a:	f023 0301 	bic.w	r3, r3, #1
 800d79e:	b2da      	uxtb	r2, r3
 800d7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d7a6:	e03a      	b.n	800d81e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7ae:	f043 0301 	orr.w	r3, r3, #1
 800d7b2:	b2da      	uxtb	r2, r3
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d7ba:	68ba      	ldr	r2, [r7, #8]
 800d7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c2:	699b      	ldr	r3, [r3, #24]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d10a      	bne.n	800d7de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7cc:	f383 8811 	msr	BASEPRI, r3
 800d7d0:	f3bf 8f6f 	isb	sy
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	617b      	str	r3, [r7, #20]
}
 800d7da:	bf00      	nop
 800d7dc:	e7fe      	b.n	800d7dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e0:	699a      	ldr	r2, [r3, #24]
 800d7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e4:	18d1      	adds	r1, r2, r3
 800d7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7ec:	f7ff ff06 	bl	800d5fc <prvInsertTimerInActiveList>
					break;
 800d7f0:	e015      	b.n	800d81e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7f8:	f003 0302 	and.w	r3, r3, #2
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d103      	bne.n	800d808 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d802:	f7fc ff7f 	bl	800a704 <vPortFree>
 800d806:	e00a      	b.n	800d81e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d80e:	f023 0301 	bic.w	r3, r3, #1
 800d812:	b2da      	uxtb	r2, r3
 800d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d81a:	e000      	b.n	800d81e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d81c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d81e:	4b08      	ldr	r3, [pc, #32]	; (800d840 <prvProcessReceivedCommands+0x1c0>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	1d39      	adds	r1, r7, #4
 800d824:	2200      	movs	r2, #0
 800d826:	4618      	mov	r0, r3
 800d828:	f7fd ff5c 	bl	800b6e4 <xQueueReceive>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	f47f af2a 	bne.w	800d688 <prvProcessReceivedCommands+0x8>
	}
}
 800d834:	bf00      	nop
 800d836:	bf00      	nop
 800d838:	3730      	adds	r7, #48	; 0x30
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	20004f10 	.word	0x20004f10

0800d844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b088      	sub	sp, #32
 800d848:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d84a:	e048      	b.n	800d8de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d84c:	4b2d      	ldr	r3, [pc, #180]	; (800d904 <prvSwitchTimerLists+0xc0>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d856:	4b2b      	ldr	r3, [pc, #172]	; (800d904 <prvSwitchTimerLists+0xc0>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	68db      	ldr	r3, [r3, #12]
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	3304      	adds	r3, #4
 800d864:	4618      	mov	r0, r3
 800d866:	f7fd f8f5 	bl	800aa54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	6a1b      	ldr	r3, [r3, #32]
 800d86e:	68f8      	ldr	r0, [r7, #12]
 800d870:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d878:	f003 0304 	and.w	r3, r3, #4
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d02e      	beq.n	800d8de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	699b      	ldr	r3, [r3, #24]
 800d884:	693a      	ldr	r2, [r7, #16]
 800d886:	4413      	add	r3, r2
 800d888:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d88a:	68ba      	ldr	r2, [r7, #8]
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d90e      	bls.n	800d8b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	68ba      	ldr	r2, [r7, #8]
 800d896:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	68fa      	ldr	r2, [r7, #12]
 800d89c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d89e:	4b19      	ldr	r3, [pc, #100]	; (800d904 <prvSwitchTimerLists+0xc0>)
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	4610      	mov	r0, r2
 800d8aa:	f7fd f89a 	bl	800a9e2 <vListInsert>
 800d8ae:	e016      	b.n	800d8de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	9300      	str	r3, [sp, #0]
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	693a      	ldr	r2, [r7, #16]
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	68f8      	ldr	r0, [r7, #12]
 800d8bc:	f7ff fd60 	bl	800d380 <xTimerGenericCommand>
 800d8c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10a      	bne.n	800d8de <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	603b      	str	r3, [r7, #0]
}
 800d8da:	bf00      	nop
 800d8dc:	e7fe      	b.n	800d8dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d8de:	4b09      	ldr	r3, [pc, #36]	; (800d904 <prvSwitchTimerLists+0xc0>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d1b1      	bne.n	800d84c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d8e8:	4b06      	ldr	r3, [pc, #24]	; (800d904 <prvSwitchTimerLists+0xc0>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d8ee:	4b06      	ldr	r3, [pc, #24]	; (800d908 <prvSwitchTimerLists+0xc4>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	4a04      	ldr	r2, [pc, #16]	; (800d904 <prvSwitchTimerLists+0xc0>)
 800d8f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d8f6:	4a04      	ldr	r2, [pc, #16]	; (800d908 <prvSwitchTimerLists+0xc4>)
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	6013      	str	r3, [r2, #0]
}
 800d8fc:	bf00      	nop
 800d8fe:	3718      	adds	r7, #24
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	20004f08 	.word	0x20004f08
 800d908:	20004f0c 	.word	0x20004f0c

0800d90c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d912:	f7fd f9f7 	bl	800ad04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d916:	4b15      	ldr	r3, [pc, #84]	; (800d96c <prvCheckForValidListAndQueue+0x60>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d120      	bne.n	800d960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d91e:	4814      	ldr	r0, [pc, #80]	; (800d970 <prvCheckForValidListAndQueue+0x64>)
 800d920:	f7fd f80e 	bl	800a940 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d924:	4813      	ldr	r0, [pc, #76]	; (800d974 <prvCheckForValidListAndQueue+0x68>)
 800d926:	f7fd f80b 	bl	800a940 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d92a:	4b13      	ldr	r3, [pc, #76]	; (800d978 <prvCheckForValidListAndQueue+0x6c>)
 800d92c:	4a10      	ldr	r2, [pc, #64]	; (800d970 <prvCheckForValidListAndQueue+0x64>)
 800d92e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d930:	4b12      	ldr	r3, [pc, #72]	; (800d97c <prvCheckForValidListAndQueue+0x70>)
 800d932:	4a10      	ldr	r2, [pc, #64]	; (800d974 <prvCheckForValidListAndQueue+0x68>)
 800d934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d936:	2300      	movs	r3, #0
 800d938:	9300      	str	r3, [sp, #0]
 800d93a:	4b11      	ldr	r3, [pc, #68]	; (800d980 <prvCheckForValidListAndQueue+0x74>)
 800d93c:	4a11      	ldr	r2, [pc, #68]	; (800d984 <prvCheckForValidListAndQueue+0x78>)
 800d93e:	2110      	movs	r1, #16
 800d940:	200a      	movs	r0, #10
 800d942:	f7fd fb69 	bl	800b018 <xQueueGenericCreateStatic>
 800d946:	4603      	mov	r3, r0
 800d948:	4a08      	ldr	r2, [pc, #32]	; (800d96c <prvCheckForValidListAndQueue+0x60>)
 800d94a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d94c:	4b07      	ldr	r3, [pc, #28]	; (800d96c <prvCheckForValidListAndQueue+0x60>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d005      	beq.n	800d960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d954:	4b05      	ldr	r3, [pc, #20]	; (800d96c <prvCheckForValidListAndQueue+0x60>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	490b      	ldr	r1, [pc, #44]	; (800d988 <prvCheckForValidListAndQueue+0x7c>)
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7fe fa7a 	bl	800be54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d960:	f7fd fa00 	bl	800ad64 <vPortExitCritical>
}
 800d964:	bf00      	nop
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	20004f10 	.word	0x20004f10
 800d970:	20004ee0 	.word	0x20004ee0
 800d974:	20004ef4 	.word	0x20004ef4
 800d978:	20004f08 	.word	0x20004f08
 800d97c:	20004f0c 	.word	0x20004f0c
 800d980:	20004fbc 	.word	0x20004fbc
 800d984:	20004f1c 	.word	0x20004f1c
 800d988:	0801399c 	.word	0x0801399c

0800d98c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b086      	sub	sp, #24
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d10a      	bne.n	800d9b4 <xTimerIsTimerActive+0x28>
	__asm volatile
 800d99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a2:	f383 8811 	msr	BASEPRI, r3
 800d9a6:	f3bf 8f6f 	isb	sy
 800d9aa:	f3bf 8f4f 	dsb	sy
 800d9ae:	60fb      	str	r3, [r7, #12]
}
 800d9b0:	bf00      	nop
 800d9b2:	e7fe      	b.n	800d9b2 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800d9b4:	f7fd f9a6 	bl	800ad04 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9be:	f003 0301 	and.w	r3, r3, #1
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d102      	bne.n	800d9cc <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	617b      	str	r3, [r7, #20]
 800d9ca:	e001      	b.n	800d9d0 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800d9d0:	f7fd f9c8 	bl	800ad64 <vPortExitCritical>

	return xReturn;
 800d9d4:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3718      	adds	r7, #24
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b086      	sub	sp, #24
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d10a      	bne.n	800da06 <pvTimerGetTimerID+0x28>
	__asm volatile
 800d9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f4:	f383 8811 	msr	BASEPRI, r3
 800d9f8:	f3bf 8f6f 	isb	sy
 800d9fc:	f3bf 8f4f 	dsb	sy
 800da00:	60fb      	str	r3, [r7, #12]
}
 800da02:	bf00      	nop
 800da04:	e7fe      	b.n	800da04 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800da06:	f7fd f97d 	bl	800ad04 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	69db      	ldr	r3, [r3, #28]
 800da0e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800da10:	f7fd f9a8 	bl	800ad64 <vPortExitCritical>

	return pvReturn;
 800da14:	693b      	ldr	r3, [r7, #16]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3718      	adds	r7, #24
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
	...

0800da20 <__errno>:
 800da20:	4b01      	ldr	r3, [pc, #4]	; (800da28 <__errno+0x8>)
 800da22:	6818      	ldr	r0, [r3, #0]
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	20000038 	.word	0x20000038

0800da2c <std>:
 800da2c:	2300      	movs	r3, #0
 800da2e:	b510      	push	{r4, lr}
 800da30:	4604      	mov	r4, r0
 800da32:	e9c0 3300 	strd	r3, r3, [r0]
 800da36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da3a:	6083      	str	r3, [r0, #8]
 800da3c:	8181      	strh	r1, [r0, #12]
 800da3e:	6643      	str	r3, [r0, #100]	; 0x64
 800da40:	81c2      	strh	r2, [r0, #14]
 800da42:	6183      	str	r3, [r0, #24]
 800da44:	4619      	mov	r1, r3
 800da46:	2208      	movs	r2, #8
 800da48:	305c      	adds	r0, #92	; 0x5c
 800da4a:	f000 f91a 	bl	800dc82 <memset>
 800da4e:	4b05      	ldr	r3, [pc, #20]	; (800da64 <std+0x38>)
 800da50:	6263      	str	r3, [r4, #36]	; 0x24
 800da52:	4b05      	ldr	r3, [pc, #20]	; (800da68 <std+0x3c>)
 800da54:	62a3      	str	r3, [r4, #40]	; 0x28
 800da56:	4b05      	ldr	r3, [pc, #20]	; (800da6c <std+0x40>)
 800da58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800da5a:	4b05      	ldr	r3, [pc, #20]	; (800da70 <std+0x44>)
 800da5c:	6224      	str	r4, [r4, #32]
 800da5e:	6323      	str	r3, [r4, #48]	; 0x30
 800da60:	bd10      	pop	{r4, pc}
 800da62:	bf00      	nop
 800da64:	0800ebf1 	.word	0x0800ebf1
 800da68:	0800ec13 	.word	0x0800ec13
 800da6c:	0800ec4b 	.word	0x0800ec4b
 800da70:	0800ec6f 	.word	0x0800ec6f

0800da74 <_cleanup_r>:
 800da74:	4901      	ldr	r1, [pc, #4]	; (800da7c <_cleanup_r+0x8>)
 800da76:	f000 b8af 	b.w	800dbd8 <_fwalk_reent>
 800da7a:	bf00      	nop
 800da7c:	08010819 	.word	0x08010819

0800da80 <__sfmoreglue>:
 800da80:	b570      	push	{r4, r5, r6, lr}
 800da82:	2268      	movs	r2, #104	; 0x68
 800da84:	1e4d      	subs	r5, r1, #1
 800da86:	4355      	muls	r5, r2
 800da88:	460e      	mov	r6, r1
 800da8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800da8e:	f000 f921 	bl	800dcd4 <_malloc_r>
 800da92:	4604      	mov	r4, r0
 800da94:	b140      	cbz	r0, 800daa8 <__sfmoreglue+0x28>
 800da96:	2100      	movs	r1, #0
 800da98:	e9c0 1600 	strd	r1, r6, [r0]
 800da9c:	300c      	adds	r0, #12
 800da9e:	60a0      	str	r0, [r4, #8]
 800daa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800daa4:	f000 f8ed 	bl	800dc82 <memset>
 800daa8:	4620      	mov	r0, r4
 800daaa:	bd70      	pop	{r4, r5, r6, pc}

0800daac <__sfp_lock_acquire>:
 800daac:	4801      	ldr	r0, [pc, #4]	; (800dab4 <__sfp_lock_acquire+0x8>)
 800daae:	f000 b8d8 	b.w	800dc62 <__retarget_lock_acquire_recursive>
 800dab2:	bf00      	nop
 800dab4:	2000500d 	.word	0x2000500d

0800dab8 <__sfp_lock_release>:
 800dab8:	4801      	ldr	r0, [pc, #4]	; (800dac0 <__sfp_lock_release+0x8>)
 800daba:	f000 b8d3 	b.w	800dc64 <__retarget_lock_release_recursive>
 800dabe:	bf00      	nop
 800dac0:	2000500d 	.word	0x2000500d

0800dac4 <__sinit_lock_acquire>:
 800dac4:	4801      	ldr	r0, [pc, #4]	; (800dacc <__sinit_lock_acquire+0x8>)
 800dac6:	f000 b8cc 	b.w	800dc62 <__retarget_lock_acquire_recursive>
 800daca:	bf00      	nop
 800dacc:	2000500e 	.word	0x2000500e

0800dad0 <__sinit_lock_release>:
 800dad0:	4801      	ldr	r0, [pc, #4]	; (800dad8 <__sinit_lock_release+0x8>)
 800dad2:	f000 b8c7 	b.w	800dc64 <__retarget_lock_release_recursive>
 800dad6:	bf00      	nop
 800dad8:	2000500e 	.word	0x2000500e

0800dadc <__sinit>:
 800dadc:	b510      	push	{r4, lr}
 800dade:	4604      	mov	r4, r0
 800dae0:	f7ff fff0 	bl	800dac4 <__sinit_lock_acquire>
 800dae4:	69a3      	ldr	r3, [r4, #24]
 800dae6:	b11b      	cbz	r3, 800daf0 <__sinit+0x14>
 800dae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daec:	f7ff bff0 	b.w	800dad0 <__sinit_lock_release>
 800daf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800daf4:	6523      	str	r3, [r4, #80]	; 0x50
 800daf6:	4b13      	ldr	r3, [pc, #76]	; (800db44 <__sinit+0x68>)
 800daf8:	4a13      	ldr	r2, [pc, #76]	; (800db48 <__sinit+0x6c>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	62a2      	str	r2, [r4, #40]	; 0x28
 800dafe:	42a3      	cmp	r3, r4
 800db00:	bf04      	itt	eq
 800db02:	2301      	moveq	r3, #1
 800db04:	61a3      	streq	r3, [r4, #24]
 800db06:	4620      	mov	r0, r4
 800db08:	f000 f820 	bl	800db4c <__sfp>
 800db0c:	6060      	str	r0, [r4, #4]
 800db0e:	4620      	mov	r0, r4
 800db10:	f000 f81c 	bl	800db4c <__sfp>
 800db14:	60a0      	str	r0, [r4, #8]
 800db16:	4620      	mov	r0, r4
 800db18:	f000 f818 	bl	800db4c <__sfp>
 800db1c:	2200      	movs	r2, #0
 800db1e:	60e0      	str	r0, [r4, #12]
 800db20:	2104      	movs	r1, #4
 800db22:	6860      	ldr	r0, [r4, #4]
 800db24:	f7ff ff82 	bl	800da2c <std>
 800db28:	68a0      	ldr	r0, [r4, #8]
 800db2a:	2201      	movs	r2, #1
 800db2c:	2109      	movs	r1, #9
 800db2e:	f7ff ff7d 	bl	800da2c <std>
 800db32:	68e0      	ldr	r0, [r4, #12]
 800db34:	2202      	movs	r2, #2
 800db36:	2112      	movs	r1, #18
 800db38:	f7ff ff78 	bl	800da2c <std>
 800db3c:	2301      	movs	r3, #1
 800db3e:	61a3      	str	r3, [r4, #24]
 800db40:	e7d2      	b.n	800dae8 <__sinit+0xc>
 800db42:	bf00      	nop
 800db44:	08014fa8 	.word	0x08014fa8
 800db48:	0800da75 	.word	0x0800da75

0800db4c <__sfp>:
 800db4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4e:	4607      	mov	r7, r0
 800db50:	f7ff ffac 	bl	800daac <__sfp_lock_acquire>
 800db54:	4b1e      	ldr	r3, [pc, #120]	; (800dbd0 <__sfp+0x84>)
 800db56:	681e      	ldr	r6, [r3, #0]
 800db58:	69b3      	ldr	r3, [r6, #24]
 800db5a:	b913      	cbnz	r3, 800db62 <__sfp+0x16>
 800db5c:	4630      	mov	r0, r6
 800db5e:	f7ff ffbd 	bl	800dadc <__sinit>
 800db62:	3648      	adds	r6, #72	; 0x48
 800db64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800db68:	3b01      	subs	r3, #1
 800db6a:	d503      	bpl.n	800db74 <__sfp+0x28>
 800db6c:	6833      	ldr	r3, [r6, #0]
 800db6e:	b30b      	cbz	r3, 800dbb4 <__sfp+0x68>
 800db70:	6836      	ldr	r6, [r6, #0]
 800db72:	e7f7      	b.n	800db64 <__sfp+0x18>
 800db74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800db78:	b9d5      	cbnz	r5, 800dbb0 <__sfp+0x64>
 800db7a:	4b16      	ldr	r3, [pc, #88]	; (800dbd4 <__sfp+0x88>)
 800db7c:	60e3      	str	r3, [r4, #12]
 800db7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800db82:	6665      	str	r5, [r4, #100]	; 0x64
 800db84:	f000 f86c 	bl	800dc60 <__retarget_lock_init_recursive>
 800db88:	f7ff ff96 	bl	800dab8 <__sfp_lock_release>
 800db8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800db90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800db94:	6025      	str	r5, [r4, #0]
 800db96:	61a5      	str	r5, [r4, #24]
 800db98:	2208      	movs	r2, #8
 800db9a:	4629      	mov	r1, r5
 800db9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dba0:	f000 f86f 	bl	800dc82 <memset>
 800dba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dbac:	4620      	mov	r0, r4
 800dbae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbb0:	3468      	adds	r4, #104	; 0x68
 800dbb2:	e7d9      	b.n	800db68 <__sfp+0x1c>
 800dbb4:	2104      	movs	r1, #4
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	f7ff ff62 	bl	800da80 <__sfmoreglue>
 800dbbc:	4604      	mov	r4, r0
 800dbbe:	6030      	str	r0, [r6, #0]
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	d1d5      	bne.n	800db70 <__sfp+0x24>
 800dbc4:	f7ff ff78 	bl	800dab8 <__sfp_lock_release>
 800dbc8:	230c      	movs	r3, #12
 800dbca:	603b      	str	r3, [r7, #0]
 800dbcc:	e7ee      	b.n	800dbac <__sfp+0x60>
 800dbce:	bf00      	nop
 800dbd0:	08014fa8 	.word	0x08014fa8
 800dbd4:	ffff0001 	.word	0xffff0001

0800dbd8 <_fwalk_reent>:
 800dbd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbdc:	4606      	mov	r6, r0
 800dbde:	4688      	mov	r8, r1
 800dbe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dbe4:	2700      	movs	r7, #0
 800dbe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dbea:	f1b9 0901 	subs.w	r9, r9, #1
 800dbee:	d505      	bpl.n	800dbfc <_fwalk_reent+0x24>
 800dbf0:	6824      	ldr	r4, [r4, #0]
 800dbf2:	2c00      	cmp	r4, #0
 800dbf4:	d1f7      	bne.n	800dbe6 <_fwalk_reent+0xe>
 800dbf6:	4638      	mov	r0, r7
 800dbf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbfc:	89ab      	ldrh	r3, [r5, #12]
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d907      	bls.n	800dc12 <_fwalk_reent+0x3a>
 800dc02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc06:	3301      	adds	r3, #1
 800dc08:	d003      	beq.n	800dc12 <_fwalk_reent+0x3a>
 800dc0a:	4629      	mov	r1, r5
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	47c0      	blx	r8
 800dc10:	4307      	orrs	r7, r0
 800dc12:	3568      	adds	r5, #104	; 0x68
 800dc14:	e7e9      	b.n	800dbea <_fwalk_reent+0x12>
	...

0800dc18 <__libc_init_array>:
 800dc18:	b570      	push	{r4, r5, r6, lr}
 800dc1a:	4d0d      	ldr	r5, [pc, #52]	; (800dc50 <__libc_init_array+0x38>)
 800dc1c:	4c0d      	ldr	r4, [pc, #52]	; (800dc54 <__libc_init_array+0x3c>)
 800dc1e:	1b64      	subs	r4, r4, r5
 800dc20:	10a4      	asrs	r4, r4, #2
 800dc22:	2600      	movs	r6, #0
 800dc24:	42a6      	cmp	r6, r4
 800dc26:	d109      	bne.n	800dc3c <__libc_init_array+0x24>
 800dc28:	4d0b      	ldr	r5, [pc, #44]	; (800dc58 <__libc_init_array+0x40>)
 800dc2a:	4c0c      	ldr	r4, [pc, #48]	; (800dc5c <__libc_init_array+0x44>)
 800dc2c:	f005 fb22 	bl	8013274 <_init>
 800dc30:	1b64      	subs	r4, r4, r5
 800dc32:	10a4      	asrs	r4, r4, #2
 800dc34:	2600      	movs	r6, #0
 800dc36:	42a6      	cmp	r6, r4
 800dc38:	d105      	bne.n	800dc46 <__libc_init_array+0x2e>
 800dc3a:	bd70      	pop	{r4, r5, r6, pc}
 800dc3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc40:	4798      	blx	r3
 800dc42:	3601      	adds	r6, #1
 800dc44:	e7ee      	b.n	800dc24 <__libc_init_array+0xc>
 800dc46:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc4a:	4798      	blx	r3
 800dc4c:	3601      	adds	r6, #1
 800dc4e:	e7f2      	b.n	800dc36 <__libc_init_array+0x1e>
 800dc50:	08015428 	.word	0x08015428
 800dc54:	08015428 	.word	0x08015428
 800dc58:	08015428 	.word	0x08015428
 800dc5c:	0801542c 	.word	0x0801542c

0800dc60 <__retarget_lock_init_recursive>:
 800dc60:	4770      	bx	lr

0800dc62 <__retarget_lock_acquire_recursive>:
 800dc62:	4770      	bx	lr

0800dc64 <__retarget_lock_release_recursive>:
 800dc64:	4770      	bx	lr

0800dc66 <memcpy>:
 800dc66:	440a      	add	r2, r1
 800dc68:	4291      	cmp	r1, r2
 800dc6a:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc6e:	d100      	bne.n	800dc72 <memcpy+0xc>
 800dc70:	4770      	bx	lr
 800dc72:	b510      	push	{r4, lr}
 800dc74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc7c:	4291      	cmp	r1, r2
 800dc7e:	d1f9      	bne.n	800dc74 <memcpy+0xe>
 800dc80:	bd10      	pop	{r4, pc}

0800dc82 <memset>:
 800dc82:	4402      	add	r2, r0
 800dc84:	4603      	mov	r3, r0
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d100      	bne.n	800dc8c <memset+0xa>
 800dc8a:	4770      	bx	lr
 800dc8c:	f803 1b01 	strb.w	r1, [r3], #1
 800dc90:	e7f9      	b.n	800dc86 <memset+0x4>
	...

0800dc94 <sbrk_aligned>:
 800dc94:	b570      	push	{r4, r5, r6, lr}
 800dc96:	4e0e      	ldr	r6, [pc, #56]	; (800dcd0 <sbrk_aligned+0x3c>)
 800dc98:	460c      	mov	r4, r1
 800dc9a:	6831      	ldr	r1, [r6, #0]
 800dc9c:	4605      	mov	r5, r0
 800dc9e:	b911      	cbnz	r1, 800dca6 <sbrk_aligned+0x12>
 800dca0:	f000 ff70 	bl	800eb84 <_sbrk_r>
 800dca4:	6030      	str	r0, [r6, #0]
 800dca6:	4621      	mov	r1, r4
 800dca8:	4628      	mov	r0, r5
 800dcaa:	f000 ff6b 	bl	800eb84 <_sbrk_r>
 800dcae:	1c43      	adds	r3, r0, #1
 800dcb0:	d00a      	beq.n	800dcc8 <sbrk_aligned+0x34>
 800dcb2:	1cc4      	adds	r4, r0, #3
 800dcb4:	f024 0403 	bic.w	r4, r4, #3
 800dcb8:	42a0      	cmp	r0, r4
 800dcba:	d007      	beq.n	800dccc <sbrk_aligned+0x38>
 800dcbc:	1a21      	subs	r1, r4, r0
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	f000 ff60 	bl	800eb84 <_sbrk_r>
 800dcc4:	3001      	adds	r0, #1
 800dcc6:	d101      	bne.n	800dccc <sbrk_aligned+0x38>
 800dcc8:	f04f 34ff 	mov.w	r4, #4294967295
 800dccc:	4620      	mov	r0, r4
 800dcce:	bd70      	pop	{r4, r5, r6, pc}
 800dcd0:	20005014 	.word	0x20005014

0800dcd4 <_malloc_r>:
 800dcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd8:	1ccd      	adds	r5, r1, #3
 800dcda:	f025 0503 	bic.w	r5, r5, #3
 800dcde:	3508      	adds	r5, #8
 800dce0:	2d0c      	cmp	r5, #12
 800dce2:	bf38      	it	cc
 800dce4:	250c      	movcc	r5, #12
 800dce6:	2d00      	cmp	r5, #0
 800dce8:	4607      	mov	r7, r0
 800dcea:	db01      	blt.n	800dcf0 <_malloc_r+0x1c>
 800dcec:	42a9      	cmp	r1, r5
 800dcee:	d905      	bls.n	800dcfc <_malloc_r+0x28>
 800dcf0:	230c      	movs	r3, #12
 800dcf2:	603b      	str	r3, [r7, #0]
 800dcf4:	2600      	movs	r6, #0
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcfc:	4e2e      	ldr	r6, [pc, #184]	; (800ddb8 <_malloc_r+0xe4>)
 800dcfe:	f003 f967 	bl	8010fd0 <__malloc_lock>
 800dd02:	6833      	ldr	r3, [r6, #0]
 800dd04:	461c      	mov	r4, r3
 800dd06:	bb34      	cbnz	r4, 800dd56 <_malloc_r+0x82>
 800dd08:	4629      	mov	r1, r5
 800dd0a:	4638      	mov	r0, r7
 800dd0c:	f7ff ffc2 	bl	800dc94 <sbrk_aligned>
 800dd10:	1c43      	adds	r3, r0, #1
 800dd12:	4604      	mov	r4, r0
 800dd14:	d14d      	bne.n	800ddb2 <_malloc_r+0xde>
 800dd16:	6834      	ldr	r4, [r6, #0]
 800dd18:	4626      	mov	r6, r4
 800dd1a:	2e00      	cmp	r6, #0
 800dd1c:	d140      	bne.n	800dda0 <_malloc_r+0xcc>
 800dd1e:	6823      	ldr	r3, [r4, #0]
 800dd20:	4631      	mov	r1, r6
 800dd22:	4638      	mov	r0, r7
 800dd24:	eb04 0803 	add.w	r8, r4, r3
 800dd28:	f000 ff2c 	bl	800eb84 <_sbrk_r>
 800dd2c:	4580      	cmp	r8, r0
 800dd2e:	d13a      	bne.n	800dda6 <_malloc_r+0xd2>
 800dd30:	6821      	ldr	r1, [r4, #0]
 800dd32:	3503      	adds	r5, #3
 800dd34:	1a6d      	subs	r5, r5, r1
 800dd36:	f025 0503 	bic.w	r5, r5, #3
 800dd3a:	3508      	adds	r5, #8
 800dd3c:	2d0c      	cmp	r5, #12
 800dd3e:	bf38      	it	cc
 800dd40:	250c      	movcc	r5, #12
 800dd42:	4629      	mov	r1, r5
 800dd44:	4638      	mov	r0, r7
 800dd46:	f7ff ffa5 	bl	800dc94 <sbrk_aligned>
 800dd4a:	3001      	adds	r0, #1
 800dd4c:	d02b      	beq.n	800dda6 <_malloc_r+0xd2>
 800dd4e:	6823      	ldr	r3, [r4, #0]
 800dd50:	442b      	add	r3, r5
 800dd52:	6023      	str	r3, [r4, #0]
 800dd54:	e00e      	b.n	800dd74 <_malloc_r+0xa0>
 800dd56:	6822      	ldr	r2, [r4, #0]
 800dd58:	1b52      	subs	r2, r2, r5
 800dd5a:	d41e      	bmi.n	800dd9a <_malloc_r+0xc6>
 800dd5c:	2a0b      	cmp	r2, #11
 800dd5e:	d916      	bls.n	800dd8e <_malloc_r+0xba>
 800dd60:	1961      	adds	r1, r4, r5
 800dd62:	42a3      	cmp	r3, r4
 800dd64:	6025      	str	r5, [r4, #0]
 800dd66:	bf18      	it	ne
 800dd68:	6059      	strne	r1, [r3, #4]
 800dd6a:	6863      	ldr	r3, [r4, #4]
 800dd6c:	bf08      	it	eq
 800dd6e:	6031      	streq	r1, [r6, #0]
 800dd70:	5162      	str	r2, [r4, r5]
 800dd72:	604b      	str	r3, [r1, #4]
 800dd74:	4638      	mov	r0, r7
 800dd76:	f104 060b 	add.w	r6, r4, #11
 800dd7a:	f003 f92f 	bl	8010fdc <__malloc_unlock>
 800dd7e:	f026 0607 	bic.w	r6, r6, #7
 800dd82:	1d23      	adds	r3, r4, #4
 800dd84:	1af2      	subs	r2, r6, r3
 800dd86:	d0b6      	beq.n	800dcf6 <_malloc_r+0x22>
 800dd88:	1b9b      	subs	r3, r3, r6
 800dd8a:	50a3      	str	r3, [r4, r2]
 800dd8c:	e7b3      	b.n	800dcf6 <_malloc_r+0x22>
 800dd8e:	6862      	ldr	r2, [r4, #4]
 800dd90:	42a3      	cmp	r3, r4
 800dd92:	bf0c      	ite	eq
 800dd94:	6032      	streq	r2, [r6, #0]
 800dd96:	605a      	strne	r2, [r3, #4]
 800dd98:	e7ec      	b.n	800dd74 <_malloc_r+0xa0>
 800dd9a:	4623      	mov	r3, r4
 800dd9c:	6864      	ldr	r4, [r4, #4]
 800dd9e:	e7b2      	b.n	800dd06 <_malloc_r+0x32>
 800dda0:	4634      	mov	r4, r6
 800dda2:	6876      	ldr	r6, [r6, #4]
 800dda4:	e7b9      	b.n	800dd1a <_malloc_r+0x46>
 800dda6:	230c      	movs	r3, #12
 800dda8:	603b      	str	r3, [r7, #0]
 800ddaa:	4638      	mov	r0, r7
 800ddac:	f003 f916 	bl	8010fdc <__malloc_unlock>
 800ddb0:	e7a1      	b.n	800dcf6 <_malloc_r+0x22>
 800ddb2:	6025      	str	r5, [r4, #0]
 800ddb4:	e7de      	b.n	800dd74 <_malloc_r+0xa0>
 800ddb6:	bf00      	nop
 800ddb8:	20005010 	.word	0x20005010

0800ddbc <__cvt>:
 800ddbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc0:	ec55 4b10 	vmov	r4, r5, d0
 800ddc4:	2d00      	cmp	r5, #0
 800ddc6:	460e      	mov	r6, r1
 800ddc8:	4619      	mov	r1, r3
 800ddca:	462b      	mov	r3, r5
 800ddcc:	bfbb      	ittet	lt
 800ddce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ddd2:	461d      	movlt	r5, r3
 800ddd4:	2300      	movge	r3, #0
 800ddd6:	232d      	movlt	r3, #45	; 0x2d
 800ddd8:	700b      	strb	r3, [r1, #0]
 800ddda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dddc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dde0:	4691      	mov	r9, r2
 800dde2:	f023 0820 	bic.w	r8, r3, #32
 800dde6:	bfbc      	itt	lt
 800dde8:	4622      	movlt	r2, r4
 800ddea:	4614      	movlt	r4, r2
 800ddec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ddf0:	d005      	beq.n	800ddfe <__cvt+0x42>
 800ddf2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ddf6:	d100      	bne.n	800ddfa <__cvt+0x3e>
 800ddf8:	3601      	adds	r6, #1
 800ddfa:	2102      	movs	r1, #2
 800ddfc:	e000      	b.n	800de00 <__cvt+0x44>
 800ddfe:	2103      	movs	r1, #3
 800de00:	ab03      	add	r3, sp, #12
 800de02:	9301      	str	r3, [sp, #4]
 800de04:	ab02      	add	r3, sp, #8
 800de06:	9300      	str	r3, [sp, #0]
 800de08:	ec45 4b10 	vmov	d0, r4, r5
 800de0c:	4653      	mov	r3, sl
 800de0e:	4632      	mov	r2, r6
 800de10:	f001 fe8e 	bl	800fb30 <_dtoa_r>
 800de14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800de18:	4607      	mov	r7, r0
 800de1a:	d102      	bne.n	800de22 <__cvt+0x66>
 800de1c:	f019 0f01 	tst.w	r9, #1
 800de20:	d022      	beq.n	800de68 <__cvt+0xac>
 800de22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800de26:	eb07 0906 	add.w	r9, r7, r6
 800de2a:	d110      	bne.n	800de4e <__cvt+0x92>
 800de2c:	783b      	ldrb	r3, [r7, #0]
 800de2e:	2b30      	cmp	r3, #48	; 0x30
 800de30:	d10a      	bne.n	800de48 <__cvt+0x8c>
 800de32:	2200      	movs	r2, #0
 800de34:	2300      	movs	r3, #0
 800de36:	4620      	mov	r0, r4
 800de38:	4629      	mov	r1, r5
 800de3a:	f7f2 fe4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800de3e:	b918      	cbnz	r0, 800de48 <__cvt+0x8c>
 800de40:	f1c6 0601 	rsb	r6, r6, #1
 800de44:	f8ca 6000 	str.w	r6, [sl]
 800de48:	f8da 3000 	ldr.w	r3, [sl]
 800de4c:	4499      	add	r9, r3
 800de4e:	2200      	movs	r2, #0
 800de50:	2300      	movs	r3, #0
 800de52:	4620      	mov	r0, r4
 800de54:	4629      	mov	r1, r5
 800de56:	f7f2 fe3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800de5a:	b108      	cbz	r0, 800de60 <__cvt+0xa4>
 800de5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800de60:	2230      	movs	r2, #48	; 0x30
 800de62:	9b03      	ldr	r3, [sp, #12]
 800de64:	454b      	cmp	r3, r9
 800de66:	d307      	bcc.n	800de78 <__cvt+0xbc>
 800de68:	9b03      	ldr	r3, [sp, #12]
 800de6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de6c:	1bdb      	subs	r3, r3, r7
 800de6e:	4638      	mov	r0, r7
 800de70:	6013      	str	r3, [r2, #0]
 800de72:	b004      	add	sp, #16
 800de74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de78:	1c59      	adds	r1, r3, #1
 800de7a:	9103      	str	r1, [sp, #12]
 800de7c:	701a      	strb	r2, [r3, #0]
 800de7e:	e7f0      	b.n	800de62 <__cvt+0xa6>

0800de80 <__exponent>:
 800de80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de82:	4603      	mov	r3, r0
 800de84:	2900      	cmp	r1, #0
 800de86:	bfb8      	it	lt
 800de88:	4249      	neglt	r1, r1
 800de8a:	f803 2b02 	strb.w	r2, [r3], #2
 800de8e:	bfb4      	ite	lt
 800de90:	222d      	movlt	r2, #45	; 0x2d
 800de92:	222b      	movge	r2, #43	; 0x2b
 800de94:	2909      	cmp	r1, #9
 800de96:	7042      	strb	r2, [r0, #1]
 800de98:	dd2a      	ble.n	800def0 <__exponent+0x70>
 800de9a:	f10d 0407 	add.w	r4, sp, #7
 800de9e:	46a4      	mov	ip, r4
 800dea0:	270a      	movs	r7, #10
 800dea2:	46a6      	mov	lr, r4
 800dea4:	460a      	mov	r2, r1
 800dea6:	fb91 f6f7 	sdiv	r6, r1, r7
 800deaa:	fb07 1516 	mls	r5, r7, r6, r1
 800deae:	3530      	adds	r5, #48	; 0x30
 800deb0:	2a63      	cmp	r2, #99	; 0x63
 800deb2:	f104 34ff 	add.w	r4, r4, #4294967295
 800deb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800deba:	4631      	mov	r1, r6
 800debc:	dcf1      	bgt.n	800dea2 <__exponent+0x22>
 800debe:	3130      	adds	r1, #48	; 0x30
 800dec0:	f1ae 0502 	sub.w	r5, lr, #2
 800dec4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dec8:	1c44      	adds	r4, r0, #1
 800deca:	4629      	mov	r1, r5
 800decc:	4561      	cmp	r1, ip
 800dece:	d30a      	bcc.n	800dee6 <__exponent+0x66>
 800ded0:	f10d 0209 	add.w	r2, sp, #9
 800ded4:	eba2 020e 	sub.w	r2, r2, lr
 800ded8:	4565      	cmp	r5, ip
 800deda:	bf88      	it	hi
 800dedc:	2200      	movhi	r2, #0
 800dede:	4413      	add	r3, r2
 800dee0:	1a18      	subs	r0, r3, r0
 800dee2:	b003      	add	sp, #12
 800dee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dee6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800deea:	f804 2f01 	strb.w	r2, [r4, #1]!
 800deee:	e7ed      	b.n	800decc <__exponent+0x4c>
 800def0:	2330      	movs	r3, #48	; 0x30
 800def2:	3130      	adds	r1, #48	; 0x30
 800def4:	7083      	strb	r3, [r0, #2]
 800def6:	70c1      	strb	r1, [r0, #3]
 800def8:	1d03      	adds	r3, r0, #4
 800defa:	e7f1      	b.n	800dee0 <__exponent+0x60>

0800defc <_printf_float>:
 800defc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df00:	ed2d 8b02 	vpush	{d8}
 800df04:	b08d      	sub	sp, #52	; 0x34
 800df06:	460c      	mov	r4, r1
 800df08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800df0c:	4616      	mov	r6, r2
 800df0e:	461f      	mov	r7, r3
 800df10:	4605      	mov	r5, r0
 800df12:	f003 f82d 	bl	8010f70 <_localeconv_r>
 800df16:	f8d0 a000 	ldr.w	sl, [r0]
 800df1a:	4650      	mov	r0, sl
 800df1c:	f7f2 f960 	bl	80001e0 <strlen>
 800df20:	2300      	movs	r3, #0
 800df22:	930a      	str	r3, [sp, #40]	; 0x28
 800df24:	6823      	ldr	r3, [r4, #0]
 800df26:	9305      	str	r3, [sp, #20]
 800df28:	f8d8 3000 	ldr.w	r3, [r8]
 800df2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800df30:	3307      	adds	r3, #7
 800df32:	f023 0307 	bic.w	r3, r3, #7
 800df36:	f103 0208 	add.w	r2, r3, #8
 800df3a:	f8c8 2000 	str.w	r2, [r8]
 800df3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800df46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800df4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800df4e:	9307      	str	r3, [sp, #28]
 800df50:	f8cd 8018 	str.w	r8, [sp, #24]
 800df54:	ee08 0a10 	vmov	s16, r0
 800df58:	4b9f      	ldr	r3, [pc, #636]	; (800e1d8 <_printf_float+0x2dc>)
 800df5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df5e:	f04f 32ff 	mov.w	r2, #4294967295
 800df62:	f7f2 fdeb 	bl	8000b3c <__aeabi_dcmpun>
 800df66:	bb88      	cbnz	r0, 800dfcc <_printf_float+0xd0>
 800df68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df6c:	4b9a      	ldr	r3, [pc, #616]	; (800e1d8 <_printf_float+0x2dc>)
 800df6e:	f04f 32ff 	mov.w	r2, #4294967295
 800df72:	f7f2 fdc5 	bl	8000b00 <__aeabi_dcmple>
 800df76:	bb48      	cbnz	r0, 800dfcc <_printf_float+0xd0>
 800df78:	2200      	movs	r2, #0
 800df7a:	2300      	movs	r3, #0
 800df7c:	4640      	mov	r0, r8
 800df7e:	4649      	mov	r1, r9
 800df80:	f7f2 fdb4 	bl	8000aec <__aeabi_dcmplt>
 800df84:	b110      	cbz	r0, 800df8c <_printf_float+0x90>
 800df86:	232d      	movs	r3, #45	; 0x2d
 800df88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df8c:	4b93      	ldr	r3, [pc, #588]	; (800e1dc <_printf_float+0x2e0>)
 800df8e:	4894      	ldr	r0, [pc, #592]	; (800e1e0 <_printf_float+0x2e4>)
 800df90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800df94:	bf94      	ite	ls
 800df96:	4698      	movls	r8, r3
 800df98:	4680      	movhi	r8, r0
 800df9a:	2303      	movs	r3, #3
 800df9c:	6123      	str	r3, [r4, #16]
 800df9e:	9b05      	ldr	r3, [sp, #20]
 800dfa0:	f023 0204 	bic.w	r2, r3, #4
 800dfa4:	6022      	str	r2, [r4, #0]
 800dfa6:	f04f 0900 	mov.w	r9, #0
 800dfaa:	9700      	str	r7, [sp, #0]
 800dfac:	4633      	mov	r3, r6
 800dfae:	aa0b      	add	r2, sp, #44	; 0x2c
 800dfb0:	4621      	mov	r1, r4
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	f000 f9d8 	bl	800e368 <_printf_common>
 800dfb8:	3001      	adds	r0, #1
 800dfba:	f040 8090 	bne.w	800e0de <_printf_float+0x1e2>
 800dfbe:	f04f 30ff 	mov.w	r0, #4294967295
 800dfc2:	b00d      	add	sp, #52	; 0x34
 800dfc4:	ecbd 8b02 	vpop	{d8}
 800dfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfcc:	4642      	mov	r2, r8
 800dfce:	464b      	mov	r3, r9
 800dfd0:	4640      	mov	r0, r8
 800dfd2:	4649      	mov	r1, r9
 800dfd4:	f7f2 fdb2 	bl	8000b3c <__aeabi_dcmpun>
 800dfd8:	b140      	cbz	r0, 800dfec <_printf_float+0xf0>
 800dfda:	464b      	mov	r3, r9
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	bfbc      	itt	lt
 800dfe0:	232d      	movlt	r3, #45	; 0x2d
 800dfe2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dfe6:	487f      	ldr	r0, [pc, #508]	; (800e1e4 <_printf_float+0x2e8>)
 800dfe8:	4b7f      	ldr	r3, [pc, #508]	; (800e1e8 <_printf_float+0x2ec>)
 800dfea:	e7d1      	b.n	800df90 <_printf_float+0x94>
 800dfec:	6863      	ldr	r3, [r4, #4]
 800dfee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dff2:	9206      	str	r2, [sp, #24]
 800dff4:	1c5a      	adds	r2, r3, #1
 800dff6:	d13f      	bne.n	800e078 <_printf_float+0x17c>
 800dff8:	2306      	movs	r3, #6
 800dffa:	6063      	str	r3, [r4, #4]
 800dffc:	9b05      	ldr	r3, [sp, #20]
 800dffe:	6861      	ldr	r1, [r4, #4]
 800e000:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e004:	2300      	movs	r3, #0
 800e006:	9303      	str	r3, [sp, #12]
 800e008:	ab0a      	add	r3, sp, #40	; 0x28
 800e00a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e00e:	ab09      	add	r3, sp, #36	; 0x24
 800e010:	ec49 8b10 	vmov	d0, r8, r9
 800e014:	9300      	str	r3, [sp, #0]
 800e016:	6022      	str	r2, [r4, #0]
 800e018:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e01c:	4628      	mov	r0, r5
 800e01e:	f7ff fecd 	bl	800ddbc <__cvt>
 800e022:	9b06      	ldr	r3, [sp, #24]
 800e024:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e026:	2b47      	cmp	r3, #71	; 0x47
 800e028:	4680      	mov	r8, r0
 800e02a:	d108      	bne.n	800e03e <_printf_float+0x142>
 800e02c:	1cc8      	adds	r0, r1, #3
 800e02e:	db02      	blt.n	800e036 <_printf_float+0x13a>
 800e030:	6863      	ldr	r3, [r4, #4]
 800e032:	4299      	cmp	r1, r3
 800e034:	dd41      	ble.n	800e0ba <_printf_float+0x1be>
 800e036:	f1ab 0b02 	sub.w	fp, fp, #2
 800e03a:	fa5f fb8b 	uxtb.w	fp, fp
 800e03e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e042:	d820      	bhi.n	800e086 <_printf_float+0x18a>
 800e044:	3901      	subs	r1, #1
 800e046:	465a      	mov	r2, fp
 800e048:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e04c:	9109      	str	r1, [sp, #36]	; 0x24
 800e04e:	f7ff ff17 	bl	800de80 <__exponent>
 800e052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e054:	1813      	adds	r3, r2, r0
 800e056:	2a01      	cmp	r2, #1
 800e058:	4681      	mov	r9, r0
 800e05a:	6123      	str	r3, [r4, #16]
 800e05c:	dc02      	bgt.n	800e064 <_printf_float+0x168>
 800e05e:	6822      	ldr	r2, [r4, #0]
 800e060:	07d2      	lsls	r2, r2, #31
 800e062:	d501      	bpl.n	800e068 <_printf_float+0x16c>
 800e064:	3301      	adds	r3, #1
 800e066:	6123      	str	r3, [r4, #16]
 800e068:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d09c      	beq.n	800dfaa <_printf_float+0xae>
 800e070:	232d      	movs	r3, #45	; 0x2d
 800e072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e076:	e798      	b.n	800dfaa <_printf_float+0xae>
 800e078:	9a06      	ldr	r2, [sp, #24]
 800e07a:	2a47      	cmp	r2, #71	; 0x47
 800e07c:	d1be      	bne.n	800dffc <_printf_float+0x100>
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d1bc      	bne.n	800dffc <_printf_float+0x100>
 800e082:	2301      	movs	r3, #1
 800e084:	e7b9      	b.n	800dffa <_printf_float+0xfe>
 800e086:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e08a:	d118      	bne.n	800e0be <_printf_float+0x1c2>
 800e08c:	2900      	cmp	r1, #0
 800e08e:	6863      	ldr	r3, [r4, #4]
 800e090:	dd0b      	ble.n	800e0aa <_printf_float+0x1ae>
 800e092:	6121      	str	r1, [r4, #16]
 800e094:	b913      	cbnz	r3, 800e09c <_printf_float+0x1a0>
 800e096:	6822      	ldr	r2, [r4, #0]
 800e098:	07d0      	lsls	r0, r2, #31
 800e09a:	d502      	bpl.n	800e0a2 <_printf_float+0x1a6>
 800e09c:	3301      	adds	r3, #1
 800e09e:	440b      	add	r3, r1
 800e0a0:	6123      	str	r3, [r4, #16]
 800e0a2:	65a1      	str	r1, [r4, #88]	; 0x58
 800e0a4:	f04f 0900 	mov.w	r9, #0
 800e0a8:	e7de      	b.n	800e068 <_printf_float+0x16c>
 800e0aa:	b913      	cbnz	r3, 800e0b2 <_printf_float+0x1b6>
 800e0ac:	6822      	ldr	r2, [r4, #0]
 800e0ae:	07d2      	lsls	r2, r2, #31
 800e0b0:	d501      	bpl.n	800e0b6 <_printf_float+0x1ba>
 800e0b2:	3302      	adds	r3, #2
 800e0b4:	e7f4      	b.n	800e0a0 <_printf_float+0x1a4>
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e7f2      	b.n	800e0a0 <_printf_float+0x1a4>
 800e0ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0c0:	4299      	cmp	r1, r3
 800e0c2:	db05      	blt.n	800e0d0 <_printf_float+0x1d4>
 800e0c4:	6823      	ldr	r3, [r4, #0]
 800e0c6:	6121      	str	r1, [r4, #16]
 800e0c8:	07d8      	lsls	r0, r3, #31
 800e0ca:	d5ea      	bpl.n	800e0a2 <_printf_float+0x1a6>
 800e0cc:	1c4b      	adds	r3, r1, #1
 800e0ce:	e7e7      	b.n	800e0a0 <_printf_float+0x1a4>
 800e0d0:	2900      	cmp	r1, #0
 800e0d2:	bfd4      	ite	le
 800e0d4:	f1c1 0202 	rsble	r2, r1, #2
 800e0d8:	2201      	movgt	r2, #1
 800e0da:	4413      	add	r3, r2
 800e0dc:	e7e0      	b.n	800e0a0 <_printf_float+0x1a4>
 800e0de:	6823      	ldr	r3, [r4, #0]
 800e0e0:	055a      	lsls	r2, r3, #21
 800e0e2:	d407      	bmi.n	800e0f4 <_printf_float+0x1f8>
 800e0e4:	6923      	ldr	r3, [r4, #16]
 800e0e6:	4642      	mov	r2, r8
 800e0e8:	4631      	mov	r1, r6
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	47b8      	blx	r7
 800e0ee:	3001      	adds	r0, #1
 800e0f0:	d12c      	bne.n	800e14c <_printf_float+0x250>
 800e0f2:	e764      	b.n	800dfbe <_printf_float+0xc2>
 800e0f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e0f8:	f240 80e0 	bls.w	800e2bc <_printf_float+0x3c0>
 800e0fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e100:	2200      	movs	r2, #0
 800e102:	2300      	movs	r3, #0
 800e104:	f7f2 fce8 	bl	8000ad8 <__aeabi_dcmpeq>
 800e108:	2800      	cmp	r0, #0
 800e10a:	d034      	beq.n	800e176 <_printf_float+0x27a>
 800e10c:	4a37      	ldr	r2, [pc, #220]	; (800e1ec <_printf_float+0x2f0>)
 800e10e:	2301      	movs	r3, #1
 800e110:	4631      	mov	r1, r6
 800e112:	4628      	mov	r0, r5
 800e114:	47b8      	blx	r7
 800e116:	3001      	adds	r0, #1
 800e118:	f43f af51 	beq.w	800dfbe <_printf_float+0xc2>
 800e11c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e120:	429a      	cmp	r2, r3
 800e122:	db02      	blt.n	800e12a <_printf_float+0x22e>
 800e124:	6823      	ldr	r3, [r4, #0]
 800e126:	07d8      	lsls	r0, r3, #31
 800e128:	d510      	bpl.n	800e14c <_printf_float+0x250>
 800e12a:	ee18 3a10 	vmov	r3, s16
 800e12e:	4652      	mov	r2, sl
 800e130:	4631      	mov	r1, r6
 800e132:	4628      	mov	r0, r5
 800e134:	47b8      	blx	r7
 800e136:	3001      	adds	r0, #1
 800e138:	f43f af41 	beq.w	800dfbe <_printf_float+0xc2>
 800e13c:	f04f 0800 	mov.w	r8, #0
 800e140:	f104 091a 	add.w	r9, r4, #26
 800e144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e146:	3b01      	subs	r3, #1
 800e148:	4543      	cmp	r3, r8
 800e14a:	dc09      	bgt.n	800e160 <_printf_float+0x264>
 800e14c:	6823      	ldr	r3, [r4, #0]
 800e14e:	079b      	lsls	r3, r3, #30
 800e150:	f100 8105 	bmi.w	800e35e <_printf_float+0x462>
 800e154:	68e0      	ldr	r0, [r4, #12]
 800e156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e158:	4298      	cmp	r0, r3
 800e15a:	bfb8      	it	lt
 800e15c:	4618      	movlt	r0, r3
 800e15e:	e730      	b.n	800dfc2 <_printf_float+0xc6>
 800e160:	2301      	movs	r3, #1
 800e162:	464a      	mov	r2, r9
 800e164:	4631      	mov	r1, r6
 800e166:	4628      	mov	r0, r5
 800e168:	47b8      	blx	r7
 800e16a:	3001      	adds	r0, #1
 800e16c:	f43f af27 	beq.w	800dfbe <_printf_float+0xc2>
 800e170:	f108 0801 	add.w	r8, r8, #1
 800e174:	e7e6      	b.n	800e144 <_printf_float+0x248>
 800e176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e178:	2b00      	cmp	r3, #0
 800e17a:	dc39      	bgt.n	800e1f0 <_printf_float+0x2f4>
 800e17c:	4a1b      	ldr	r2, [pc, #108]	; (800e1ec <_printf_float+0x2f0>)
 800e17e:	2301      	movs	r3, #1
 800e180:	4631      	mov	r1, r6
 800e182:	4628      	mov	r0, r5
 800e184:	47b8      	blx	r7
 800e186:	3001      	adds	r0, #1
 800e188:	f43f af19 	beq.w	800dfbe <_printf_float+0xc2>
 800e18c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e190:	4313      	orrs	r3, r2
 800e192:	d102      	bne.n	800e19a <_printf_float+0x29e>
 800e194:	6823      	ldr	r3, [r4, #0]
 800e196:	07d9      	lsls	r1, r3, #31
 800e198:	d5d8      	bpl.n	800e14c <_printf_float+0x250>
 800e19a:	ee18 3a10 	vmov	r3, s16
 800e19e:	4652      	mov	r2, sl
 800e1a0:	4631      	mov	r1, r6
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	47b8      	blx	r7
 800e1a6:	3001      	adds	r0, #1
 800e1a8:	f43f af09 	beq.w	800dfbe <_printf_float+0xc2>
 800e1ac:	f04f 0900 	mov.w	r9, #0
 800e1b0:	f104 0a1a 	add.w	sl, r4, #26
 800e1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1b6:	425b      	negs	r3, r3
 800e1b8:	454b      	cmp	r3, r9
 800e1ba:	dc01      	bgt.n	800e1c0 <_printf_float+0x2c4>
 800e1bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1be:	e792      	b.n	800e0e6 <_printf_float+0x1ea>
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	4652      	mov	r2, sl
 800e1c4:	4631      	mov	r1, r6
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	47b8      	blx	r7
 800e1ca:	3001      	adds	r0, #1
 800e1cc:	f43f aef7 	beq.w	800dfbe <_printf_float+0xc2>
 800e1d0:	f109 0901 	add.w	r9, r9, #1
 800e1d4:	e7ee      	b.n	800e1b4 <_printf_float+0x2b8>
 800e1d6:	bf00      	nop
 800e1d8:	7fefffff 	.word	0x7fefffff
 800e1dc:	08014fac 	.word	0x08014fac
 800e1e0:	08014fb0 	.word	0x08014fb0
 800e1e4:	08014fb8 	.word	0x08014fb8
 800e1e8:	08014fb4 	.word	0x08014fb4
 800e1ec:	08014fbc 	.word	0x08014fbc
 800e1f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	bfa8      	it	ge
 800e1f8:	461a      	movge	r2, r3
 800e1fa:	2a00      	cmp	r2, #0
 800e1fc:	4691      	mov	r9, r2
 800e1fe:	dc37      	bgt.n	800e270 <_printf_float+0x374>
 800e200:	f04f 0b00 	mov.w	fp, #0
 800e204:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e208:	f104 021a 	add.w	r2, r4, #26
 800e20c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e20e:	9305      	str	r3, [sp, #20]
 800e210:	eba3 0309 	sub.w	r3, r3, r9
 800e214:	455b      	cmp	r3, fp
 800e216:	dc33      	bgt.n	800e280 <_printf_float+0x384>
 800e218:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e21c:	429a      	cmp	r2, r3
 800e21e:	db3b      	blt.n	800e298 <_printf_float+0x39c>
 800e220:	6823      	ldr	r3, [r4, #0]
 800e222:	07da      	lsls	r2, r3, #31
 800e224:	d438      	bmi.n	800e298 <_printf_float+0x39c>
 800e226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e228:	9a05      	ldr	r2, [sp, #20]
 800e22a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e22c:	1a9a      	subs	r2, r3, r2
 800e22e:	eba3 0901 	sub.w	r9, r3, r1
 800e232:	4591      	cmp	r9, r2
 800e234:	bfa8      	it	ge
 800e236:	4691      	movge	r9, r2
 800e238:	f1b9 0f00 	cmp.w	r9, #0
 800e23c:	dc35      	bgt.n	800e2aa <_printf_float+0x3ae>
 800e23e:	f04f 0800 	mov.w	r8, #0
 800e242:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e246:	f104 0a1a 	add.w	sl, r4, #26
 800e24a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e24e:	1a9b      	subs	r3, r3, r2
 800e250:	eba3 0309 	sub.w	r3, r3, r9
 800e254:	4543      	cmp	r3, r8
 800e256:	f77f af79 	ble.w	800e14c <_printf_float+0x250>
 800e25a:	2301      	movs	r3, #1
 800e25c:	4652      	mov	r2, sl
 800e25e:	4631      	mov	r1, r6
 800e260:	4628      	mov	r0, r5
 800e262:	47b8      	blx	r7
 800e264:	3001      	adds	r0, #1
 800e266:	f43f aeaa 	beq.w	800dfbe <_printf_float+0xc2>
 800e26a:	f108 0801 	add.w	r8, r8, #1
 800e26e:	e7ec      	b.n	800e24a <_printf_float+0x34e>
 800e270:	4613      	mov	r3, r2
 800e272:	4631      	mov	r1, r6
 800e274:	4642      	mov	r2, r8
 800e276:	4628      	mov	r0, r5
 800e278:	47b8      	blx	r7
 800e27a:	3001      	adds	r0, #1
 800e27c:	d1c0      	bne.n	800e200 <_printf_float+0x304>
 800e27e:	e69e      	b.n	800dfbe <_printf_float+0xc2>
 800e280:	2301      	movs	r3, #1
 800e282:	4631      	mov	r1, r6
 800e284:	4628      	mov	r0, r5
 800e286:	9205      	str	r2, [sp, #20]
 800e288:	47b8      	blx	r7
 800e28a:	3001      	adds	r0, #1
 800e28c:	f43f ae97 	beq.w	800dfbe <_printf_float+0xc2>
 800e290:	9a05      	ldr	r2, [sp, #20]
 800e292:	f10b 0b01 	add.w	fp, fp, #1
 800e296:	e7b9      	b.n	800e20c <_printf_float+0x310>
 800e298:	ee18 3a10 	vmov	r3, s16
 800e29c:	4652      	mov	r2, sl
 800e29e:	4631      	mov	r1, r6
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	47b8      	blx	r7
 800e2a4:	3001      	adds	r0, #1
 800e2a6:	d1be      	bne.n	800e226 <_printf_float+0x32a>
 800e2a8:	e689      	b.n	800dfbe <_printf_float+0xc2>
 800e2aa:	9a05      	ldr	r2, [sp, #20]
 800e2ac:	464b      	mov	r3, r9
 800e2ae:	4442      	add	r2, r8
 800e2b0:	4631      	mov	r1, r6
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	47b8      	blx	r7
 800e2b6:	3001      	adds	r0, #1
 800e2b8:	d1c1      	bne.n	800e23e <_printf_float+0x342>
 800e2ba:	e680      	b.n	800dfbe <_printf_float+0xc2>
 800e2bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2be:	2a01      	cmp	r2, #1
 800e2c0:	dc01      	bgt.n	800e2c6 <_printf_float+0x3ca>
 800e2c2:	07db      	lsls	r3, r3, #31
 800e2c4:	d538      	bpl.n	800e338 <_printf_float+0x43c>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	4642      	mov	r2, r8
 800e2ca:	4631      	mov	r1, r6
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	47b8      	blx	r7
 800e2d0:	3001      	adds	r0, #1
 800e2d2:	f43f ae74 	beq.w	800dfbe <_printf_float+0xc2>
 800e2d6:	ee18 3a10 	vmov	r3, s16
 800e2da:	4652      	mov	r2, sl
 800e2dc:	4631      	mov	r1, r6
 800e2de:	4628      	mov	r0, r5
 800e2e0:	47b8      	blx	r7
 800e2e2:	3001      	adds	r0, #1
 800e2e4:	f43f ae6b 	beq.w	800dfbe <_printf_float+0xc2>
 800e2e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	f7f2 fbf2 	bl	8000ad8 <__aeabi_dcmpeq>
 800e2f4:	b9d8      	cbnz	r0, 800e32e <_printf_float+0x432>
 800e2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2f8:	f108 0201 	add.w	r2, r8, #1
 800e2fc:	3b01      	subs	r3, #1
 800e2fe:	4631      	mov	r1, r6
 800e300:	4628      	mov	r0, r5
 800e302:	47b8      	blx	r7
 800e304:	3001      	adds	r0, #1
 800e306:	d10e      	bne.n	800e326 <_printf_float+0x42a>
 800e308:	e659      	b.n	800dfbe <_printf_float+0xc2>
 800e30a:	2301      	movs	r3, #1
 800e30c:	4652      	mov	r2, sl
 800e30e:	4631      	mov	r1, r6
 800e310:	4628      	mov	r0, r5
 800e312:	47b8      	blx	r7
 800e314:	3001      	adds	r0, #1
 800e316:	f43f ae52 	beq.w	800dfbe <_printf_float+0xc2>
 800e31a:	f108 0801 	add.w	r8, r8, #1
 800e31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e320:	3b01      	subs	r3, #1
 800e322:	4543      	cmp	r3, r8
 800e324:	dcf1      	bgt.n	800e30a <_printf_float+0x40e>
 800e326:	464b      	mov	r3, r9
 800e328:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e32c:	e6dc      	b.n	800e0e8 <_printf_float+0x1ec>
 800e32e:	f04f 0800 	mov.w	r8, #0
 800e332:	f104 0a1a 	add.w	sl, r4, #26
 800e336:	e7f2      	b.n	800e31e <_printf_float+0x422>
 800e338:	2301      	movs	r3, #1
 800e33a:	4642      	mov	r2, r8
 800e33c:	e7df      	b.n	800e2fe <_printf_float+0x402>
 800e33e:	2301      	movs	r3, #1
 800e340:	464a      	mov	r2, r9
 800e342:	4631      	mov	r1, r6
 800e344:	4628      	mov	r0, r5
 800e346:	47b8      	blx	r7
 800e348:	3001      	adds	r0, #1
 800e34a:	f43f ae38 	beq.w	800dfbe <_printf_float+0xc2>
 800e34e:	f108 0801 	add.w	r8, r8, #1
 800e352:	68e3      	ldr	r3, [r4, #12]
 800e354:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e356:	1a5b      	subs	r3, r3, r1
 800e358:	4543      	cmp	r3, r8
 800e35a:	dcf0      	bgt.n	800e33e <_printf_float+0x442>
 800e35c:	e6fa      	b.n	800e154 <_printf_float+0x258>
 800e35e:	f04f 0800 	mov.w	r8, #0
 800e362:	f104 0919 	add.w	r9, r4, #25
 800e366:	e7f4      	b.n	800e352 <_printf_float+0x456>

0800e368 <_printf_common>:
 800e368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e36c:	4616      	mov	r6, r2
 800e36e:	4699      	mov	r9, r3
 800e370:	688a      	ldr	r2, [r1, #8]
 800e372:	690b      	ldr	r3, [r1, #16]
 800e374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e378:	4293      	cmp	r3, r2
 800e37a:	bfb8      	it	lt
 800e37c:	4613      	movlt	r3, r2
 800e37e:	6033      	str	r3, [r6, #0]
 800e380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e384:	4607      	mov	r7, r0
 800e386:	460c      	mov	r4, r1
 800e388:	b10a      	cbz	r2, 800e38e <_printf_common+0x26>
 800e38a:	3301      	adds	r3, #1
 800e38c:	6033      	str	r3, [r6, #0]
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	0699      	lsls	r1, r3, #26
 800e392:	bf42      	ittt	mi
 800e394:	6833      	ldrmi	r3, [r6, #0]
 800e396:	3302      	addmi	r3, #2
 800e398:	6033      	strmi	r3, [r6, #0]
 800e39a:	6825      	ldr	r5, [r4, #0]
 800e39c:	f015 0506 	ands.w	r5, r5, #6
 800e3a0:	d106      	bne.n	800e3b0 <_printf_common+0x48>
 800e3a2:	f104 0a19 	add.w	sl, r4, #25
 800e3a6:	68e3      	ldr	r3, [r4, #12]
 800e3a8:	6832      	ldr	r2, [r6, #0]
 800e3aa:	1a9b      	subs	r3, r3, r2
 800e3ac:	42ab      	cmp	r3, r5
 800e3ae:	dc26      	bgt.n	800e3fe <_printf_common+0x96>
 800e3b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e3b4:	1e13      	subs	r3, r2, #0
 800e3b6:	6822      	ldr	r2, [r4, #0]
 800e3b8:	bf18      	it	ne
 800e3ba:	2301      	movne	r3, #1
 800e3bc:	0692      	lsls	r2, r2, #26
 800e3be:	d42b      	bmi.n	800e418 <_printf_common+0xb0>
 800e3c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e3c4:	4649      	mov	r1, r9
 800e3c6:	4638      	mov	r0, r7
 800e3c8:	47c0      	blx	r8
 800e3ca:	3001      	adds	r0, #1
 800e3cc:	d01e      	beq.n	800e40c <_printf_common+0xa4>
 800e3ce:	6823      	ldr	r3, [r4, #0]
 800e3d0:	68e5      	ldr	r5, [r4, #12]
 800e3d2:	6832      	ldr	r2, [r6, #0]
 800e3d4:	f003 0306 	and.w	r3, r3, #6
 800e3d8:	2b04      	cmp	r3, #4
 800e3da:	bf08      	it	eq
 800e3dc:	1aad      	subeq	r5, r5, r2
 800e3de:	68a3      	ldr	r3, [r4, #8]
 800e3e0:	6922      	ldr	r2, [r4, #16]
 800e3e2:	bf0c      	ite	eq
 800e3e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e3e8:	2500      	movne	r5, #0
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	bfc4      	itt	gt
 800e3ee:	1a9b      	subgt	r3, r3, r2
 800e3f0:	18ed      	addgt	r5, r5, r3
 800e3f2:	2600      	movs	r6, #0
 800e3f4:	341a      	adds	r4, #26
 800e3f6:	42b5      	cmp	r5, r6
 800e3f8:	d11a      	bne.n	800e430 <_printf_common+0xc8>
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	e008      	b.n	800e410 <_printf_common+0xa8>
 800e3fe:	2301      	movs	r3, #1
 800e400:	4652      	mov	r2, sl
 800e402:	4649      	mov	r1, r9
 800e404:	4638      	mov	r0, r7
 800e406:	47c0      	blx	r8
 800e408:	3001      	adds	r0, #1
 800e40a:	d103      	bne.n	800e414 <_printf_common+0xac>
 800e40c:	f04f 30ff 	mov.w	r0, #4294967295
 800e410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e414:	3501      	adds	r5, #1
 800e416:	e7c6      	b.n	800e3a6 <_printf_common+0x3e>
 800e418:	18e1      	adds	r1, r4, r3
 800e41a:	1c5a      	adds	r2, r3, #1
 800e41c:	2030      	movs	r0, #48	; 0x30
 800e41e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e422:	4422      	add	r2, r4
 800e424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e42c:	3302      	adds	r3, #2
 800e42e:	e7c7      	b.n	800e3c0 <_printf_common+0x58>
 800e430:	2301      	movs	r3, #1
 800e432:	4622      	mov	r2, r4
 800e434:	4649      	mov	r1, r9
 800e436:	4638      	mov	r0, r7
 800e438:	47c0      	blx	r8
 800e43a:	3001      	adds	r0, #1
 800e43c:	d0e6      	beq.n	800e40c <_printf_common+0xa4>
 800e43e:	3601      	adds	r6, #1
 800e440:	e7d9      	b.n	800e3f6 <_printf_common+0x8e>
	...

0800e444 <_printf_i>:
 800e444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e448:	7e0f      	ldrb	r7, [r1, #24]
 800e44a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e44c:	2f78      	cmp	r7, #120	; 0x78
 800e44e:	4691      	mov	r9, r2
 800e450:	4680      	mov	r8, r0
 800e452:	460c      	mov	r4, r1
 800e454:	469a      	mov	sl, r3
 800e456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e45a:	d807      	bhi.n	800e46c <_printf_i+0x28>
 800e45c:	2f62      	cmp	r7, #98	; 0x62
 800e45e:	d80a      	bhi.n	800e476 <_printf_i+0x32>
 800e460:	2f00      	cmp	r7, #0
 800e462:	f000 80d8 	beq.w	800e616 <_printf_i+0x1d2>
 800e466:	2f58      	cmp	r7, #88	; 0x58
 800e468:	f000 80a3 	beq.w	800e5b2 <_printf_i+0x16e>
 800e46c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e474:	e03a      	b.n	800e4ec <_printf_i+0xa8>
 800e476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e47a:	2b15      	cmp	r3, #21
 800e47c:	d8f6      	bhi.n	800e46c <_printf_i+0x28>
 800e47e:	a101      	add	r1, pc, #4	; (adr r1, 800e484 <_printf_i+0x40>)
 800e480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e484:	0800e4dd 	.word	0x0800e4dd
 800e488:	0800e4f1 	.word	0x0800e4f1
 800e48c:	0800e46d 	.word	0x0800e46d
 800e490:	0800e46d 	.word	0x0800e46d
 800e494:	0800e46d 	.word	0x0800e46d
 800e498:	0800e46d 	.word	0x0800e46d
 800e49c:	0800e4f1 	.word	0x0800e4f1
 800e4a0:	0800e46d 	.word	0x0800e46d
 800e4a4:	0800e46d 	.word	0x0800e46d
 800e4a8:	0800e46d 	.word	0x0800e46d
 800e4ac:	0800e46d 	.word	0x0800e46d
 800e4b0:	0800e5fd 	.word	0x0800e5fd
 800e4b4:	0800e521 	.word	0x0800e521
 800e4b8:	0800e5df 	.word	0x0800e5df
 800e4bc:	0800e46d 	.word	0x0800e46d
 800e4c0:	0800e46d 	.word	0x0800e46d
 800e4c4:	0800e61f 	.word	0x0800e61f
 800e4c8:	0800e46d 	.word	0x0800e46d
 800e4cc:	0800e521 	.word	0x0800e521
 800e4d0:	0800e46d 	.word	0x0800e46d
 800e4d4:	0800e46d 	.word	0x0800e46d
 800e4d8:	0800e5e7 	.word	0x0800e5e7
 800e4dc:	682b      	ldr	r3, [r5, #0]
 800e4de:	1d1a      	adds	r2, r3, #4
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	602a      	str	r2, [r5, #0]
 800e4e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	e0a3      	b.n	800e638 <_printf_i+0x1f4>
 800e4f0:	6820      	ldr	r0, [r4, #0]
 800e4f2:	6829      	ldr	r1, [r5, #0]
 800e4f4:	0606      	lsls	r6, r0, #24
 800e4f6:	f101 0304 	add.w	r3, r1, #4
 800e4fa:	d50a      	bpl.n	800e512 <_printf_i+0xce>
 800e4fc:	680e      	ldr	r6, [r1, #0]
 800e4fe:	602b      	str	r3, [r5, #0]
 800e500:	2e00      	cmp	r6, #0
 800e502:	da03      	bge.n	800e50c <_printf_i+0xc8>
 800e504:	232d      	movs	r3, #45	; 0x2d
 800e506:	4276      	negs	r6, r6
 800e508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e50c:	485e      	ldr	r0, [pc, #376]	; (800e688 <_printf_i+0x244>)
 800e50e:	230a      	movs	r3, #10
 800e510:	e019      	b.n	800e546 <_printf_i+0x102>
 800e512:	680e      	ldr	r6, [r1, #0]
 800e514:	602b      	str	r3, [r5, #0]
 800e516:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e51a:	bf18      	it	ne
 800e51c:	b236      	sxthne	r6, r6
 800e51e:	e7ef      	b.n	800e500 <_printf_i+0xbc>
 800e520:	682b      	ldr	r3, [r5, #0]
 800e522:	6820      	ldr	r0, [r4, #0]
 800e524:	1d19      	adds	r1, r3, #4
 800e526:	6029      	str	r1, [r5, #0]
 800e528:	0601      	lsls	r1, r0, #24
 800e52a:	d501      	bpl.n	800e530 <_printf_i+0xec>
 800e52c:	681e      	ldr	r6, [r3, #0]
 800e52e:	e002      	b.n	800e536 <_printf_i+0xf2>
 800e530:	0646      	lsls	r6, r0, #25
 800e532:	d5fb      	bpl.n	800e52c <_printf_i+0xe8>
 800e534:	881e      	ldrh	r6, [r3, #0]
 800e536:	4854      	ldr	r0, [pc, #336]	; (800e688 <_printf_i+0x244>)
 800e538:	2f6f      	cmp	r7, #111	; 0x6f
 800e53a:	bf0c      	ite	eq
 800e53c:	2308      	moveq	r3, #8
 800e53e:	230a      	movne	r3, #10
 800e540:	2100      	movs	r1, #0
 800e542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e546:	6865      	ldr	r5, [r4, #4]
 800e548:	60a5      	str	r5, [r4, #8]
 800e54a:	2d00      	cmp	r5, #0
 800e54c:	bfa2      	ittt	ge
 800e54e:	6821      	ldrge	r1, [r4, #0]
 800e550:	f021 0104 	bicge.w	r1, r1, #4
 800e554:	6021      	strge	r1, [r4, #0]
 800e556:	b90e      	cbnz	r6, 800e55c <_printf_i+0x118>
 800e558:	2d00      	cmp	r5, #0
 800e55a:	d04d      	beq.n	800e5f8 <_printf_i+0x1b4>
 800e55c:	4615      	mov	r5, r2
 800e55e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e562:	fb03 6711 	mls	r7, r3, r1, r6
 800e566:	5dc7      	ldrb	r7, [r0, r7]
 800e568:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e56c:	4637      	mov	r7, r6
 800e56e:	42bb      	cmp	r3, r7
 800e570:	460e      	mov	r6, r1
 800e572:	d9f4      	bls.n	800e55e <_printf_i+0x11a>
 800e574:	2b08      	cmp	r3, #8
 800e576:	d10b      	bne.n	800e590 <_printf_i+0x14c>
 800e578:	6823      	ldr	r3, [r4, #0]
 800e57a:	07de      	lsls	r6, r3, #31
 800e57c:	d508      	bpl.n	800e590 <_printf_i+0x14c>
 800e57e:	6923      	ldr	r3, [r4, #16]
 800e580:	6861      	ldr	r1, [r4, #4]
 800e582:	4299      	cmp	r1, r3
 800e584:	bfde      	ittt	le
 800e586:	2330      	movle	r3, #48	; 0x30
 800e588:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e58c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e590:	1b52      	subs	r2, r2, r5
 800e592:	6122      	str	r2, [r4, #16]
 800e594:	f8cd a000 	str.w	sl, [sp]
 800e598:	464b      	mov	r3, r9
 800e59a:	aa03      	add	r2, sp, #12
 800e59c:	4621      	mov	r1, r4
 800e59e:	4640      	mov	r0, r8
 800e5a0:	f7ff fee2 	bl	800e368 <_printf_common>
 800e5a4:	3001      	adds	r0, #1
 800e5a6:	d14c      	bne.n	800e642 <_printf_i+0x1fe>
 800e5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ac:	b004      	add	sp, #16
 800e5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5b2:	4835      	ldr	r0, [pc, #212]	; (800e688 <_printf_i+0x244>)
 800e5b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e5b8:	6829      	ldr	r1, [r5, #0]
 800e5ba:	6823      	ldr	r3, [r4, #0]
 800e5bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800e5c0:	6029      	str	r1, [r5, #0]
 800e5c2:	061d      	lsls	r5, r3, #24
 800e5c4:	d514      	bpl.n	800e5f0 <_printf_i+0x1ac>
 800e5c6:	07df      	lsls	r7, r3, #31
 800e5c8:	bf44      	itt	mi
 800e5ca:	f043 0320 	orrmi.w	r3, r3, #32
 800e5ce:	6023      	strmi	r3, [r4, #0]
 800e5d0:	b91e      	cbnz	r6, 800e5da <_printf_i+0x196>
 800e5d2:	6823      	ldr	r3, [r4, #0]
 800e5d4:	f023 0320 	bic.w	r3, r3, #32
 800e5d8:	6023      	str	r3, [r4, #0]
 800e5da:	2310      	movs	r3, #16
 800e5dc:	e7b0      	b.n	800e540 <_printf_i+0xfc>
 800e5de:	6823      	ldr	r3, [r4, #0]
 800e5e0:	f043 0320 	orr.w	r3, r3, #32
 800e5e4:	6023      	str	r3, [r4, #0]
 800e5e6:	2378      	movs	r3, #120	; 0x78
 800e5e8:	4828      	ldr	r0, [pc, #160]	; (800e68c <_printf_i+0x248>)
 800e5ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e5ee:	e7e3      	b.n	800e5b8 <_printf_i+0x174>
 800e5f0:	0659      	lsls	r1, r3, #25
 800e5f2:	bf48      	it	mi
 800e5f4:	b2b6      	uxthmi	r6, r6
 800e5f6:	e7e6      	b.n	800e5c6 <_printf_i+0x182>
 800e5f8:	4615      	mov	r5, r2
 800e5fa:	e7bb      	b.n	800e574 <_printf_i+0x130>
 800e5fc:	682b      	ldr	r3, [r5, #0]
 800e5fe:	6826      	ldr	r6, [r4, #0]
 800e600:	6961      	ldr	r1, [r4, #20]
 800e602:	1d18      	adds	r0, r3, #4
 800e604:	6028      	str	r0, [r5, #0]
 800e606:	0635      	lsls	r5, r6, #24
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	d501      	bpl.n	800e610 <_printf_i+0x1cc>
 800e60c:	6019      	str	r1, [r3, #0]
 800e60e:	e002      	b.n	800e616 <_printf_i+0x1d2>
 800e610:	0670      	lsls	r0, r6, #25
 800e612:	d5fb      	bpl.n	800e60c <_printf_i+0x1c8>
 800e614:	8019      	strh	r1, [r3, #0]
 800e616:	2300      	movs	r3, #0
 800e618:	6123      	str	r3, [r4, #16]
 800e61a:	4615      	mov	r5, r2
 800e61c:	e7ba      	b.n	800e594 <_printf_i+0x150>
 800e61e:	682b      	ldr	r3, [r5, #0]
 800e620:	1d1a      	adds	r2, r3, #4
 800e622:	602a      	str	r2, [r5, #0]
 800e624:	681d      	ldr	r5, [r3, #0]
 800e626:	6862      	ldr	r2, [r4, #4]
 800e628:	2100      	movs	r1, #0
 800e62a:	4628      	mov	r0, r5
 800e62c:	f7f1 fde0 	bl	80001f0 <memchr>
 800e630:	b108      	cbz	r0, 800e636 <_printf_i+0x1f2>
 800e632:	1b40      	subs	r0, r0, r5
 800e634:	6060      	str	r0, [r4, #4]
 800e636:	6863      	ldr	r3, [r4, #4]
 800e638:	6123      	str	r3, [r4, #16]
 800e63a:	2300      	movs	r3, #0
 800e63c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e640:	e7a8      	b.n	800e594 <_printf_i+0x150>
 800e642:	6923      	ldr	r3, [r4, #16]
 800e644:	462a      	mov	r2, r5
 800e646:	4649      	mov	r1, r9
 800e648:	4640      	mov	r0, r8
 800e64a:	47d0      	blx	sl
 800e64c:	3001      	adds	r0, #1
 800e64e:	d0ab      	beq.n	800e5a8 <_printf_i+0x164>
 800e650:	6823      	ldr	r3, [r4, #0]
 800e652:	079b      	lsls	r3, r3, #30
 800e654:	d413      	bmi.n	800e67e <_printf_i+0x23a>
 800e656:	68e0      	ldr	r0, [r4, #12]
 800e658:	9b03      	ldr	r3, [sp, #12]
 800e65a:	4298      	cmp	r0, r3
 800e65c:	bfb8      	it	lt
 800e65e:	4618      	movlt	r0, r3
 800e660:	e7a4      	b.n	800e5ac <_printf_i+0x168>
 800e662:	2301      	movs	r3, #1
 800e664:	4632      	mov	r2, r6
 800e666:	4649      	mov	r1, r9
 800e668:	4640      	mov	r0, r8
 800e66a:	47d0      	blx	sl
 800e66c:	3001      	adds	r0, #1
 800e66e:	d09b      	beq.n	800e5a8 <_printf_i+0x164>
 800e670:	3501      	adds	r5, #1
 800e672:	68e3      	ldr	r3, [r4, #12]
 800e674:	9903      	ldr	r1, [sp, #12]
 800e676:	1a5b      	subs	r3, r3, r1
 800e678:	42ab      	cmp	r3, r5
 800e67a:	dcf2      	bgt.n	800e662 <_printf_i+0x21e>
 800e67c:	e7eb      	b.n	800e656 <_printf_i+0x212>
 800e67e:	2500      	movs	r5, #0
 800e680:	f104 0619 	add.w	r6, r4, #25
 800e684:	e7f5      	b.n	800e672 <_printf_i+0x22e>
 800e686:	bf00      	nop
 800e688:	08014fbe 	.word	0x08014fbe
 800e68c:	08014fcf 	.word	0x08014fcf

0800e690 <_scanf_float>:
 800e690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e694:	b087      	sub	sp, #28
 800e696:	4617      	mov	r7, r2
 800e698:	9303      	str	r3, [sp, #12]
 800e69a:	688b      	ldr	r3, [r1, #8]
 800e69c:	1e5a      	subs	r2, r3, #1
 800e69e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e6a2:	bf83      	ittte	hi
 800e6a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e6a8:	195b      	addhi	r3, r3, r5
 800e6aa:	9302      	strhi	r3, [sp, #8]
 800e6ac:	2300      	movls	r3, #0
 800e6ae:	bf86      	itte	hi
 800e6b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e6b4:	608b      	strhi	r3, [r1, #8]
 800e6b6:	9302      	strls	r3, [sp, #8]
 800e6b8:	680b      	ldr	r3, [r1, #0]
 800e6ba:	468b      	mov	fp, r1
 800e6bc:	2500      	movs	r5, #0
 800e6be:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e6c2:	f84b 3b1c 	str.w	r3, [fp], #28
 800e6c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e6ca:	4680      	mov	r8, r0
 800e6cc:	460c      	mov	r4, r1
 800e6ce:	465e      	mov	r6, fp
 800e6d0:	46aa      	mov	sl, r5
 800e6d2:	46a9      	mov	r9, r5
 800e6d4:	9501      	str	r5, [sp, #4]
 800e6d6:	68a2      	ldr	r2, [r4, #8]
 800e6d8:	b152      	cbz	r2, 800e6f0 <_scanf_float+0x60>
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	2b4e      	cmp	r3, #78	; 0x4e
 800e6e0:	d864      	bhi.n	800e7ac <_scanf_float+0x11c>
 800e6e2:	2b40      	cmp	r3, #64	; 0x40
 800e6e4:	d83c      	bhi.n	800e760 <_scanf_float+0xd0>
 800e6e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e6ea:	b2c8      	uxtb	r0, r1
 800e6ec:	280e      	cmp	r0, #14
 800e6ee:	d93a      	bls.n	800e766 <_scanf_float+0xd6>
 800e6f0:	f1b9 0f00 	cmp.w	r9, #0
 800e6f4:	d003      	beq.n	800e6fe <_scanf_float+0x6e>
 800e6f6:	6823      	ldr	r3, [r4, #0]
 800e6f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e6fc:	6023      	str	r3, [r4, #0]
 800e6fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e702:	f1ba 0f01 	cmp.w	sl, #1
 800e706:	f200 8113 	bhi.w	800e930 <_scanf_float+0x2a0>
 800e70a:	455e      	cmp	r6, fp
 800e70c:	f200 8105 	bhi.w	800e91a <_scanf_float+0x28a>
 800e710:	2501      	movs	r5, #1
 800e712:	4628      	mov	r0, r5
 800e714:	b007      	add	sp, #28
 800e716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e71a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e71e:	2a0d      	cmp	r2, #13
 800e720:	d8e6      	bhi.n	800e6f0 <_scanf_float+0x60>
 800e722:	a101      	add	r1, pc, #4	; (adr r1, 800e728 <_scanf_float+0x98>)
 800e724:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e728:	0800e867 	.word	0x0800e867
 800e72c:	0800e6f1 	.word	0x0800e6f1
 800e730:	0800e6f1 	.word	0x0800e6f1
 800e734:	0800e6f1 	.word	0x0800e6f1
 800e738:	0800e8c7 	.word	0x0800e8c7
 800e73c:	0800e89f 	.word	0x0800e89f
 800e740:	0800e6f1 	.word	0x0800e6f1
 800e744:	0800e6f1 	.word	0x0800e6f1
 800e748:	0800e875 	.word	0x0800e875
 800e74c:	0800e6f1 	.word	0x0800e6f1
 800e750:	0800e6f1 	.word	0x0800e6f1
 800e754:	0800e6f1 	.word	0x0800e6f1
 800e758:	0800e6f1 	.word	0x0800e6f1
 800e75c:	0800e82d 	.word	0x0800e82d
 800e760:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e764:	e7db      	b.n	800e71e <_scanf_float+0x8e>
 800e766:	290e      	cmp	r1, #14
 800e768:	d8c2      	bhi.n	800e6f0 <_scanf_float+0x60>
 800e76a:	a001      	add	r0, pc, #4	; (adr r0, 800e770 <_scanf_float+0xe0>)
 800e76c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e770:	0800e81f 	.word	0x0800e81f
 800e774:	0800e6f1 	.word	0x0800e6f1
 800e778:	0800e81f 	.word	0x0800e81f
 800e77c:	0800e8b3 	.word	0x0800e8b3
 800e780:	0800e6f1 	.word	0x0800e6f1
 800e784:	0800e7cd 	.word	0x0800e7cd
 800e788:	0800e809 	.word	0x0800e809
 800e78c:	0800e809 	.word	0x0800e809
 800e790:	0800e809 	.word	0x0800e809
 800e794:	0800e809 	.word	0x0800e809
 800e798:	0800e809 	.word	0x0800e809
 800e79c:	0800e809 	.word	0x0800e809
 800e7a0:	0800e809 	.word	0x0800e809
 800e7a4:	0800e809 	.word	0x0800e809
 800e7a8:	0800e809 	.word	0x0800e809
 800e7ac:	2b6e      	cmp	r3, #110	; 0x6e
 800e7ae:	d809      	bhi.n	800e7c4 <_scanf_float+0x134>
 800e7b0:	2b60      	cmp	r3, #96	; 0x60
 800e7b2:	d8b2      	bhi.n	800e71a <_scanf_float+0x8a>
 800e7b4:	2b54      	cmp	r3, #84	; 0x54
 800e7b6:	d077      	beq.n	800e8a8 <_scanf_float+0x218>
 800e7b8:	2b59      	cmp	r3, #89	; 0x59
 800e7ba:	d199      	bne.n	800e6f0 <_scanf_float+0x60>
 800e7bc:	2d07      	cmp	r5, #7
 800e7be:	d197      	bne.n	800e6f0 <_scanf_float+0x60>
 800e7c0:	2508      	movs	r5, #8
 800e7c2:	e029      	b.n	800e818 <_scanf_float+0x188>
 800e7c4:	2b74      	cmp	r3, #116	; 0x74
 800e7c6:	d06f      	beq.n	800e8a8 <_scanf_float+0x218>
 800e7c8:	2b79      	cmp	r3, #121	; 0x79
 800e7ca:	e7f6      	b.n	800e7ba <_scanf_float+0x12a>
 800e7cc:	6821      	ldr	r1, [r4, #0]
 800e7ce:	05c8      	lsls	r0, r1, #23
 800e7d0:	d51a      	bpl.n	800e808 <_scanf_float+0x178>
 800e7d2:	9b02      	ldr	r3, [sp, #8]
 800e7d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e7d8:	6021      	str	r1, [r4, #0]
 800e7da:	f109 0901 	add.w	r9, r9, #1
 800e7de:	b11b      	cbz	r3, 800e7e8 <_scanf_float+0x158>
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	3201      	adds	r2, #1
 800e7e4:	9302      	str	r3, [sp, #8]
 800e7e6:	60a2      	str	r2, [r4, #8]
 800e7e8:	68a3      	ldr	r3, [r4, #8]
 800e7ea:	3b01      	subs	r3, #1
 800e7ec:	60a3      	str	r3, [r4, #8]
 800e7ee:	6923      	ldr	r3, [r4, #16]
 800e7f0:	3301      	adds	r3, #1
 800e7f2:	6123      	str	r3, [r4, #16]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	607b      	str	r3, [r7, #4]
 800e7fc:	f340 8084 	ble.w	800e908 <_scanf_float+0x278>
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	3301      	adds	r3, #1
 800e804:	603b      	str	r3, [r7, #0]
 800e806:	e766      	b.n	800e6d6 <_scanf_float+0x46>
 800e808:	eb1a 0f05 	cmn.w	sl, r5
 800e80c:	f47f af70 	bne.w	800e6f0 <_scanf_float+0x60>
 800e810:	6822      	ldr	r2, [r4, #0]
 800e812:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e816:	6022      	str	r2, [r4, #0]
 800e818:	f806 3b01 	strb.w	r3, [r6], #1
 800e81c:	e7e4      	b.n	800e7e8 <_scanf_float+0x158>
 800e81e:	6822      	ldr	r2, [r4, #0]
 800e820:	0610      	lsls	r0, r2, #24
 800e822:	f57f af65 	bpl.w	800e6f0 <_scanf_float+0x60>
 800e826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e82a:	e7f4      	b.n	800e816 <_scanf_float+0x186>
 800e82c:	f1ba 0f00 	cmp.w	sl, #0
 800e830:	d10e      	bne.n	800e850 <_scanf_float+0x1c0>
 800e832:	f1b9 0f00 	cmp.w	r9, #0
 800e836:	d10e      	bne.n	800e856 <_scanf_float+0x1c6>
 800e838:	6822      	ldr	r2, [r4, #0]
 800e83a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e83e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e842:	d108      	bne.n	800e856 <_scanf_float+0x1c6>
 800e844:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e848:	6022      	str	r2, [r4, #0]
 800e84a:	f04f 0a01 	mov.w	sl, #1
 800e84e:	e7e3      	b.n	800e818 <_scanf_float+0x188>
 800e850:	f1ba 0f02 	cmp.w	sl, #2
 800e854:	d055      	beq.n	800e902 <_scanf_float+0x272>
 800e856:	2d01      	cmp	r5, #1
 800e858:	d002      	beq.n	800e860 <_scanf_float+0x1d0>
 800e85a:	2d04      	cmp	r5, #4
 800e85c:	f47f af48 	bne.w	800e6f0 <_scanf_float+0x60>
 800e860:	3501      	adds	r5, #1
 800e862:	b2ed      	uxtb	r5, r5
 800e864:	e7d8      	b.n	800e818 <_scanf_float+0x188>
 800e866:	f1ba 0f01 	cmp.w	sl, #1
 800e86a:	f47f af41 	bne.w	800e6f0 <_scanf_float+0x60>
 800e86e:	f04f 0a02 	mov.w	sl, #2
 800e872:	e7d1      	b.n	800e818 <_scanf_float+0x188>
 800e874:	b97d      	cbnz	r5, 800e896 <_scanf_float+0x206>
 800e876:	f1b9 0f00 	cmp.w	r9, #0
 800e87a:	f47f af3c 	bne.w	800e6f6 <_scanf_float+0x66>
 800e87e:	6822      	ldr	r2, [r4, #0]
 800e880:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e884:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e888:	f47f af39 	bne.w	800e6fe <_scanf_float+0x6e>
 800e88c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e890:	6022      	str	r2, [r4, #0]
 800e892:	2501      	movs	r5, #1
 800e894:	e7c0      	b.n	800e818 <_scanf_float+0x188>
 800e896:	2d03      	cmp	r5, #3
 800e898:	d0e2      	beq.n	800e860 <_scanf_float+0x1d0>
 800e89a:	2d05      	cmp	r5, #5
 800e89c:	e7de      	b.n	800e85c <_scanf_float+0x1cc>
 800e89e:	2d02      	cmp	r5, #2
 800e8a0:	f47f af26 	bne.w	800e6f0 <_scanf_float+0x60>
 800e8a4:	2503      	movs	r5, #3
 800e8a6:	e7b7      	b.n	800e818 <_scanf_float+0x188>
 800e8a8:	2d06      	cmp	r5, #6
 800e8aa:	f47f af21 	bne.w	800e6f0 <_scanf_float+0x60>
 800e8ae:	2507      	movs	r5, #7
 800e8b0:	e7b2      	b.n	800e818 <_scanf_float+0x188>
 800e8b2:	6822      	ldr	r2, [r4, #0]
 800e8b4:	0591      	lsls	r1, r2, #22
 800e8b6:	f57f af1b 	bpl.w	800e6f0 <_scanf_float+0x60>
 800e8ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e8be:	6022      	str	r2, [r4, #0]
 800e8c0:	f8cd 9004 	str.w	r9, [sp, #4]
 800e8c4:	e7a8      	b.n	800e818 <_scanf_float+0x188>
 800e8c6:	6822      	ldr	r2, [r4, #0]
 800e8c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e8cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e8d0:	d006      	beq.n	800e8e0 <_scanf_float+0x250>
 800e8d2:	0550      	lsls	r0, r2, #21
 800e8d4:	f57f af0c 	bpl.w	800e6f0 <_scanf_float+0x60>
 800e8d8:	f1b9 0f00 	cmp.w	r9, #0
 800e8dc:	f43f af0f 	beq.w	800e6fe <_scanf_float+0x6e>
 800e8e0:	0591      	lsls	r1, r2, #22
 800e8e2:	bf58      	it	pl
 800e8e4:	9901      	ldrpl	r1, [sp, #4]
 800e8e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e8ea:	bf58      	it	pl
 800e8ec:	eba9 0101 	subpl.w	r1, r9, r1
 800e8f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e8f4:	bf58      	it	pl
 800e8f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e8fa:	6022      	str	r2, [r4, #0]
 800e8fc:	f04f 0900 	mov.w	r9, #0
 800e900:	e78a      	b.n	800e818 <_scanf_float+0x188>
 800e902:	f04f 0a03 	mov.w	sl, #3
 800e906:	e787      	b.n	800e818 <_scanf_float+0x188>
 800e908:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e90c:	4639      	mov	r1, r7
 800e90e:	4640      	mov	r0, r8
 800e910:	4798      	blx	r3
 800e912:	2800      	cmp	r0, #0
 800e914:	f43f aedf 	beq.w	800e6d6 <_scanf_float+0x46>
 800e918:	e6ea      	b.n	800e6f0 <_scanf_float+0x60>
 800e91a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e91e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e922:	463a      	mov	r2, r7
 800e924:	4640      	mov	r0, r8
 800e926:	4798      	blx	r3
 800e928:	6923      	ldr	r3, [r4, #16]
 800e92a:	3b01      	subs	r3, #1
 800e92c:	6123      	str	r3, [r4, #16]
 800e92e:	e6ec      	b.n	800e70a <_scanf_float+0x7a>
 800e930:	1e6b      	subs	r3, r5, #1
 800e932:	2b06      	cmp	r3, #6
 800e934:	d825      	bhi.n	800e982 <_scanf_float+0x2f2>
 800e936:	2d02      	cmp	r5, #2
 800e938:	d836      	bhi.n	800e9a8 <_scanf_float+0x318>
 800e93a:	455e      	cmp	r6, fp
 800e93c:	f67f aee8 	bls.w	800e710 <_scanf_float+0x80>
 800e940:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e944:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e948:	463a      	mov	r2, r7
 800e94a:	4640      	mov	r0, r8
 800e94c:	4798      	blx	r3
 800e94e:	6923      	ldr	r3, [r4, #16]
 800e950:	3b01      	subs	r3, #1
 800e952:	6123      	str	r3, [r4, #16]
 800e954:	e7f1      	b.n	800e93a <_scanf_float+0x2aa>
 800e956:	9802      	ldr	r0, [sp, #8]
 800e958:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e95c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e960:	9002      	str	r0, [sp, #8]
 800e962:	463a      	mov	r2, r7
 800e964:	4640      	mov	r0, r8
 800e966:	4798      	blx	r3
 800e968:	6923      	ldr	r3, [r4, #16]
 800e96a:	3b01      	subs	r3, #1
 800e96c:	6123      	str	r3, [r4, #16]
 800e96e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e972:	fa5f fa8a 	uxtb.w	sl, sl
 800e976:	f1ba 0f02 	cmp.w	sl, #2
 800e97a:	d1ec      	bne.n	800e956 <_scanf_float+0x2c6>
 800e97c:	3d03      	subs	r5, #3
 800e97e:	b2ed      	uxtb	r5, r5
 800e980:	1b76      	subs	r6, r6, r5
 800e982:	6823      	ldr	r3, [r4, #0]
 800e984:	05da      	lsls	r2, r3, #23
 800e986:	d52f      	bpl.n	800e9e8 <_scanf_float+0x358>
 800e988:	055b      	lsls	r3, r3, #21
 800e98a:	d510      	bpl.n	800e9ae <_scanf_float+0x31e>
 800e98c:	455e      	cmp	r6, fp
 800e98e:	f67f aebf 	bls.w	800e710 <_scanf_float+0x80>
 800e992:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e996:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e99a:	463a      	mov	r2, r7
 800e99c:	4640      	mov	r0, r8
 800e99e:	4798      	blx	r3
 800e9a0:	6923      	ldr	r3, [r4, #16]
 800e9a2:	3b01      	subs	r3, #1
 800e9a4:	6123      	str	r3, [r4, #16]
 800e9a6:	e7f1      	b.n	800e98c <_scanf_float+0x2fc>
 800e9a8:	46aa      	mov	sl, r5
 800e9aa:	9602      	str	r6, [sp, #8]
 800e9ac:	e7df      	b.n	800e96e <_scanf_float+0x2de>
 800e9ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e9b2:	6923      	ldr	r3, [r4, #16]
 800e9b4:	2965      	cmp	r1, #101	; 0x65
 800e9b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800e9ba:	f106 35ff 	add.w	r5, r6, #4294967295
 800e9be:	6123      	str	r3, [r4, #16]
 800e9c0:	d00c      	beq.n	800e9dc <_scanf_float+0x34c>
 800e9c2:	2945      	cmp	r1, #69	; 0x45
 800e9c4:	d00a      	beq.n	800e9dc <_scanf_float+0x34c>
 800e9c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e9ca:	463a      	mov	r2, r7
 800e9cc:	4640      	mov	r0, r8
 800e9ce:	4798      	blx	r3
 800e9d0:	6923      	ldr	r3, [r4, #16]
 800e9d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e9d6:	3b01      	subs	r3, #1
 800e9d8:	1eb5      	subs	r5, r6, #2
 800e9da:	6123      	str	r3, [r4, #16]
 800e9dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e9e0:	463a      	mov	r2, r7
 800e9e2:	4640      	mov	r0, r8
 800e9e4:	4798      	blx	r3
 800e9e6:	462e      	mov	r6, r5
 800e9e8:	6825      	ldr	r5, [r4, #0]
 800e9ea:	f015 0510 	ands.w	r5, r5, #16
 800e9ee:	d159      	bne.n	800eaa4 <_scanf_float+0x414>
 800e9f0:	7035      	strb	r5, [r6, #0]
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e9f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9fc:	d11b      	bne.n	800ea36 <_scanf_float+0x3a6>
 800e9fe:	9b01      	ldr	r3, [sp, #4]
 800ea00:	454b      	cmp	r3, r9
 800ea02:	eba3 0209 	sub.w	r2, r3, r9
 800ea06:	d123      	bne.n	800ea50 <_scanf_float+0x3c0>
 800ea08:	2200      	movs	r2, #0
 800ea0a:	4659      	mov	r1, fp
 800ea0c:	4640      	mov	r0, r8
 800ea0e:	f000 ff55 	bl	800f8bc <_strtod_r>
 800ea12:	6822      	ldr	r2, [r4, #0]
 800ea14:	9b03      	ldr	r3, [sp, #12]
 800ea16:	f012 0f02 	tst.w	r2, #2
 800ea1a:	ec57 6b10 	vmov	r6, r7, d0
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	d021      	beq.n	800ea66 <_scanf_float+0x3d6>
 800ea22:	9903      	ldr	r1, [sp, #12]
 800ea24:	1d1a      	adds	r2, r3, #4
 800ea26:	600a      	str	r2, [r1, #0]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	e9c3 6700 	strd	r6, r7, [r3]
 800ea2e:	68e3      	ldr	r3, [r4, #12]
 800ea30:	3301      	adds	r3, #1
 800ea32:	60e3      	str	r3, [r4, #12]
 800ea34:	e66d      	b.n	800e712 <_scanf_float+0x82>
 800ea36:	9b04      	ldr	r3, [sp, #16]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d0e5      	beq.n	800ea08 <_scanf_float+0x378>
 800ea3c:	9905      	ldr	r1, [sp, #20]
 800ea3e:	230a      	movs	r3, #10
 800ea40:	462a      	mov	r2, r5
 800ea42:	3101      	adds	r1, #1
 800ea44:	4640      	mov	r0, r8
 800ea46:	f000 ffc1 	bl	800f9cc <_strtol_r>
 800ea4a:	9b04      	ldr	r3, [sp, #16]
 800ea4c:	9e05      	ldr	r6, [sp, #20]
 800ea4e:	1ac2      	subs	r2, r0, r3
 800ea50:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ea54:	429e      	cmp	r6, r3
 800ea56:	bf28      	it	cs
 800ea58:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ea5c:	4912      	ldr	r1, [pc, #72]	; (800eaa8 <_scanf_float+0x418>)
 800ea5e:	4630      	mov	r0, r6
 800ea60:	f000 f8a6 	bl	800ebb0 <siprintf>
 800ea64:	e7d0      	b.n	800ea08 <_scanf_float+0x378>
 800ea66:	9903      	ldr	r1, [sp, #12]
 800ea68:	f012 0f04 	tst.w	r2, #4
 800ea6c:	f103 0204 	add.w	r2, r3, #4
 800ea70:	600a      	str	r2, [r1, #0]
 800ea72:	d1d9      	bne.n	800ea28 <_scanf_float+0x398>
 800ea74:	f8d3 8000 	ldr.w	r8, [r3]
 800ea78:	ee10 2a10 	vmov	r2, s0
 800ea7c:	ee10 0a10 	vmov	r0, s0
 800ea80:	463b      	mov	r3, r7
 800ea82:	4639      	mov	r1, r7
 800ea84:	f7f2 f85a 	bl	8000b3c <__aeabi_dcmpun>
 800ea88:	b128      	cbz	r0, 800ea96 <_scanf_float+0x406>
 800ea8a:	4808      	ldr	r0, [pc, #32]	; (800eaac <_scanf_float+0x41c>)
 800ea8c:	f000 f88a 	bl	800eba4 <nanf>
 800ea90:	ed88 0a00 	vstr	s0, [r8]
 800ea94:	e7cb      	b.n	800ea2e <_scanf_float+0x39e>
 800ea96:	4630      	mov	r0, r6
 800ea98:	4639      	mov	r1, r7
 800ea9a:	f7f2 f8ad 	bl	8000bf8 <__aeabi_d2f>
 800ea9e:	f8c8 0000 	str.w	r0, [r8]
 800eaa2:	e7c4      	b.n	800ea2e <_scanf_float+0x39e>
 800eaa4:	2500      	movs	r5, #0
 800eaa6:	e634      	b.n	800e712 <_scanf_float+0x82>
 800eaa8:	08014fe0 	.word	0x08014fe0
 800eaac:	080153e8 	.word	0x080153e8

0800eab0 <cleanup_glue>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	460c      	mov	r4, r1
 800eab4:	6809      	ldr	r1, [r1, #0]
 800eab6:	4605      	mov	r5, r0
 800eab8:	b109      	cbz	r1, 800eabe <cleanup_glue+0xe>
 800eaba:	f7ff fff9 	bl	800eab0 <cleanup_glue>
 800eabe:	4621      	mov	r1, r4
 800eac0:	4628      	mov	r0, r5
 800eac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eac6:	f002 bf67 	b.w	8011998 <_free_r>
	...

0800eacc <_reclaim_reent>:
 800eacc:	4b2c      	ldr	r3, [pc, #176]	; (800eb80 <_reclaim_reent+0xb4>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	4283      	cmp	r3, r0
 800ead2:	b570      	push	{r4, r5, r6, lr}
 800ead4:	4604      	mov	r4, r0
 800ead6:	d051      	beq.n	800eb7c <_reclaim_reent+0xb0>
 800ead8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eada:	b143      	cbz	r3, 800eaee <_reclaim_reent+0x22>
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d14a      	bne.n	800eb78 <_reclaim_reent+0xac>
 800eae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eae4:	6819      	ldr	r1, [r3, #0]
 800eae6:	b111      	cbz	r1, 800eaee <_reclaim_reent+0x22>
 800eae8:	4620      	mov	r0, r4
 800eaea:	f002 ff55 	bl	8011998 <_free_r>
 800eaee:	6961      	ldr	r1, [r4, #20]
 800eaf0:	b111      	cbz	r1, 800eaf8 <_reclaim_reent+0x2c>
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	f002 ff50 	bl	8011998 <_free_r>
 800eaf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eafa:	b111      	cbz	r1, 800eb02 <_reclaim_reent+0x36>
 800eafc:	4620      	mov	r0, r4
 800eafe:	f002 ff4b 	bl	8011998 <_free_r>
 800eb02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eb04:	b111      	cbz	r1, 800eb0c <_reclaim_reent+0x40>
 800eb06:	4620      	mov	r0, r4
 800eb08:	f002 ff46 	bl	8011998 <_free_r>
 800eb0c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eb0e:	b111      	cbz	r1, 800eb16 <_reclaim_reent+0x4a>
 800eb10:	4620      	mov	r0, r4
 800eb12:	f002 ff41 	bl	8011998 <_free_r>
 800eb16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eb18:	b111      	cbz	r1, 800eb20 <_reclaim_reent+0x54>
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	f002 ff3c 	bl	8011998 <_free_r>
 800eb20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800eb22:	b111      	cbz	r1, 800eb2a <_reclaim_reent+0x5e>
 800eb24:	4620      	mov	r0, r4
 800eb26:	f002 ff37 	bl	8011998 <_free_r>
 800eb2a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eb2c:	b111      	cbz	r1, 800eb34 <_reclaim_reent+0x68>
 800eb2e:	4620      	mov	r0, r4
 800eb30:	f002 ff32 	bl	8011998 <_free_r>
 800eb34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb36:	b111      	cbz	r1, 800eb3e <_reclaim_reent+0x72>
 800eb38:	4620      	mov	r0, r4
 800eb3a:	f002 ff2d 	bl	8011998 <_free_r>
 800eb3e:	69a3      	ldr	r3, [r4, #24]
 800eb40:	b1e3      	cbz	r3, 800eb7c <_reclaim_reent+0xb0>
 800eb42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eb44:	4620      	mov	r0, r4
 800eb46:	4798      	blx	r3
 800eb48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800eb4a:	b1b9      	cbz	r1, 800eb7c <_reclaim_reent+0xb0>
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb52:	f7ff bfad 	b.w	800eab0 <cleanup_glue>
 800eb56:	5949      	ldr	r1, [r1, r5]
 800eb58:	b941      	cbnz	r1, 800eb6c <_reclaim_reent+0xa0>
 800eb5a:	3504      	adds	r5, #4
 800eb5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb5e:	2d80      	cmp	r5, #128	; 0x80
 800eb60:	68d9      	ldr	r1, [r3, #12]
 800eb62:	d1f8      	bne.n	800eb56 <_reclaim_reent+0x8a>
 800eb64:	4620      	mov	r0, r4
 800eb66:	f002 ff17 	bl	8011998 <_free_r>
 800eb6a:	e7ba      	b.n	800eae2 <_reclaim_reent+0x16>
 800eb6c:	680e      	ldr	r6, [r1, #0]
 800eb6e:	4620      	mov	r0, r4
 800eb70:	f002 ff12 	bl	8011998 <_free_r>
 800eb74:	4631      	mov	r1, r6
 800eb76:	e7ef      	b.n	800eb58 <_reclaim_reent+0x8c>
 800eb78:	2500      	movs	r5, #0
 800eb7a:	e7ef      	b.n	800eb5c <_reclaim_reent+0x90>
 800eb7c:	bd70      	pop	{r4, r5, r6, pc}
 800eb7e:	bf00      	nop
 800eb80:	20000038 	.word	0x20000038

0800eb84 <_sbrk_r>:
 800eb84:	b538      	push	{r3, r4, r5, lr}
 800eb86:	4d06      	ldr	r5, [pc, #24]	; (800eba0 <_sbrk_r+0x1c>)
 800eb88:	2300      	movs	r3, #0
 800eb8a:	4604      	mov	r4, r0
 800eb8c:	4608      	mov	r0, r1
 800eb8e:	602b      	str	r3, [r5, #0]
 800eb90:	f7f3 fb1a 	bl	80021c8 <_sbrk>
 800eb94:	1c43      	adds	r3, r0, #1
 800eb96:	d102      	bne.n	800eb9e <_sbrk_r+0x1a>
 800eb98:	682b      	ldr	r3, [r5, #0]
 800eb9a:	b103      	cbz	r3, 800eb9e <_sbrk_r+0x1a>
 800eb9c:	6023      	str	r3, [r4, #0]
 800eb9e:	bd38      	pop	{r3, r4, r5, pc}
 800eba0:	20005018 	.word	0x20005018

0800eba4 <nanf>:
 800eba4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ebac <nanf+0x8>
 800eba8:	4770      	bx	lr
 800ebaa:	bf00      	nop
 800ebac:	7fc00000 	.word	0x7fc00000

0800ebb0 <siprintf>:
 800ebb0:	b40e      	push	{r1, r2, r3}
 800ebb2:	b500      	push	{lr}
 800ebb4:	b09c      	sub	sp, #112	; 0x70
 800ebb6:	ab1d      	add	r3, sp, #116	; 0x74
 800ebb8:	9002      	str	r0, [sp, #8]
 800ebba:	9006      	str	r0, [sp, #24]
 800ebbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ebc0:	4809      	ldr	r0, [pc, #36]	; (800ebe8 <siprintf+0x38>)
 800ebc2:	9107      	str	r1, [sp, #28]
 800ebc4:	9104      	str	r1, [sp, #16]
 800ebc6:	4909      	ldr	r1, [pc, #36]	; (800ebec <siprintf+0x3c>)
 800ebc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebcc:	9105      	str	r1, [sp, #20]
 800ebce:	6800      	ldr	r0, [r0, #0]
 800ebd0:	9301      	str	r3, [sp, #4]
 800ebd2:	a902      	add	r1, sp, #8
 800ebd4:	f002 ff88 	bl	8011ae8 <_svfiprintf_r>
 800ebd8:	9b02      	ldr	r3, [sp, #8]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	701a      	strb	r2, [r3, #0]
 800ebde:	b01c      	add	sp, #112	; 0x70
 800ebe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebe4:	b003      	add	sp, #12
 800ebe6:	4770      	bx	lr
 800ebe8:	20000038 	.word	0x20000038
 800ebec:	ffff0208 	.word	0xffff0208

0800ebf0 <__sread>:
 800ebf0:	b510      	push	{r4, lr}
 800ebf2:	460c      	mov	r4, r1
 800ebf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebf8:	f003 f876 	bl	8011ce8 <_read_r>
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	bfab      	itete	ge
 800ec00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec02:	89a3      	ldrhlt	r3, [r4, #12]
 800ec04:	181b      	addge	r3, r3, r0
 800ec06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec0a:	bfac      	ite	ge
 800ec0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec0e:	81a3      	strhlt	r3, [r4, #12]
 800ec10:	bd10      	pop	{r4, pc}

0800ec12 <__swrite>:
 800ec12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec16:	461f      	mov	r7, r3
 800ec18:	898b      	ldrh	r3, [r1, #12]
 800ec1a:	05db      	lsls	r3, r3, #23
 800ec1c:	4605      	mov	r5, r0
 800ec1e:	460c      	mov	r4, r1
 800ec20:	4616      	mov	r6, r2
 800ec22:	d505      	bpl.n	800ec30 <__swrite+0x1e>
 800ec24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec28:	2302      	movs	r3, #2
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	f002 f9a4 	bl	8010f78 <_lseek_r>
 800ec30:	89a3      	ldrh	r3, [r4, #12]
 800ec32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec3a:	81a3      	strh	r3, [r4, #12]
 800ec3c:	4632      	mov	r2, r6
 800ec3e:	463b      	mov	r3, r7
 800ec40:	4628      	mov	r0, r5
 800ec42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec46:	f000 bec3 	b.w	800f9d0 <_write_r>

0800ec4a <__sseek>:
 800ec4a:	b510      	push	{r4, lr}
 800ec4c:	460c      	mov	r4, r1
 800ec4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec52:	f002 f991 	bl	8010f78 <_lseek_r>
 800ec56:	1c43      	adds	r3, r0, #1
 800ec58:	89a3      	ldrh	r3, [r4, #12]
 800ec5a:	bf15      	itete	ne
 800ec5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec66:	81a3      	strheq	r3, [r4, #12]
 800ec68:	bf18      	it	ne
 800ec6a:	81a3      	strhne	r3, [r4, #12]
 800ec6c:	bd10      	pop	{r4, pc}

0800ec6e <__sclose>:
 800ec6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec72:	f000 bebf 	b.w	800f9f4 <_close_r>

0800ec76 <sulp>:
 800ec76:	b570      	push	{r4, r5, r6, lr}
 800ec78:	4604      	mov	r4, r0
 800ec7a:	460d      	mov	r5, r1
 800ec7c:	ec45 4b10 	vmov	d0, r4, r5
 800ec80:	4616      	mov	r6, r2
 800ec82:	f002 fd23 	bl	80116cc <__ulp>
 800ec86:	ec51 0b10 	vmov	r0, r1, d0
 800ec8a:	b17e      	cbz	r6, 800ecac <sulp+0x36>
 800ec8c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ec90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	dd09      	ble.n	800ecac <sulp+0x36>
 800ec98:	051b      	lsls	r3, r3, #20
 800ec9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ec9e:	2400      	movs	r4, #0
 800eca0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800eca4:	4622      	mov	r2, r4
 800eca6:	462b      	mov	r3, r5
 800eca8:	f7f1 fcae 	bl	8000608 <__aeabi_dmul>
 800ecac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ecb0 <_strtod_l>:
 800ecb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb4:	ed2d 8b02 	vpush	{d8}
 800ecb8:	b09d      	sub	sp, #116	; 0x74
 800ecba:	461f      	mov	r7, r3
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	9318      	str	r3, [sp, #96]	; 0x60
 800ecc0:	4ba2      	ldr	r3, [pc, #648]	; (800ef4c <_strtod_l+0x29c>)
 800ecc2:	9213      	str	r2, [sp, #76]	; 0x4c
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	9305      	str	r3, [sp, #20]
 800ecc8:	4604      	mov	r4, r0
 800ecca:	4618      	mov	r0, r3
 800eccc:	4688      	mov	r8, r1
 800ecce:	f7f1 fa87 	bl	80001e0 <strlen>
 800ecd2:	f04f 0a00 	mov.w	sl, #0
 800ecd6:	4605      	mov	r5, r0
 800ecd8:	f04f 0b00 	mov.w	fp, #0
 800ecdc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ece0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ece2:	781a      	ldrb	r2, [r3, #0]
 800ece4:	2a2b      	cmp	r2, #43	; 0x2b
 800ece6:	d04e      	beq.n	800ed86 <_strtod_l+0xd6>
 800ece8:	d83b      	bhi.n	800ed62 <_strtod_l+0xb2>
 800ecea:	2a0d      	cmp	r2, #13
 800ecec:	d834      	bhi.n	800ed58 <_strtod_l+0xa8>
 800ecee:	2a08      	cmp	r2, #8
 800ecf0:	d834      	bhi.n	800ed5c <_strtod_l+0xac>
 800ecf2:	2a00      	cmp	r2, #0
 800ecf4:	d03e      	beq.n	800ed74 <_strtod_l+0xc4>
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	930a      	str	r3, [sp, #40]	; 0x28
 800ecfa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ecfc:	7833      	ldrb	r3, [r6, #0]
 800ecfe:	2b30      	cmp	r3, #48	; 0x30
 800ed00:	f040 80b0 	bne.w	800ee64 <_strtod_l+0x1b4>
 800ed04:	7873      	ldrb	r3, [r6, #1]
 800ed06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ed0a:	2b58      	cmp	r3, #88	; 0x58
 800ed0c:	d168      	bne.n	800ede0 <_strtod_l+0x130>
 800ed0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed10:	9301      	str	r3, [sp, #4]
 800ed12:	ab18      	add	r3, sp, #96	; 0x60
 800ed14:	9702      	str	r7, [sp, #8]
 800ed16:	9300      	str	r3, [sp, #0]
 800ed18:	4a8d      	ldr	r2, [pc, #564]	; (800ef50 <_strtod_l+0x2a0>)
 800ed1a:	ab19      	add	r3, sp, #100	; 0x64
 800ed1c:	a917      	add	r1, sp, #92	; 0x5c
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f001 fe1e 	bl	8010960 <__gethex>
 800ed24:	f010 0707 	ands.w	r7, r0, #7
 800ed28:	4605      	mov	r5, r0
 800ed2a:	d005      	beq.n	800ed38 <_strtod_l+0x88>
 800ed2c:	2f06      	cmp	r7, #6
 800ed2e:	d12c      	bne.n	800ed8a <_strtod_l+0xda>
 800ed30:	3601      	adds	r6, #1
 800ed32:	2300      	movs	r3, #0
 800ed34:	9617      	str	r6, [sp, #92]	; 0x5c
 800ed36:	930a      	str	r3, [sp, #40]	; 0x28
 800ed38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	f040 8590 	bne.w	800f860 <_strtod_l+0xbb0>
 800ed40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed42:	b1eb      	cbz	r3, 800ed80 <_strtod_l+0xd0>
 800ed44:	4652      	mov	r2, sl
 800ed46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ed4a:	ec43 2b10 	vmov	d0, r2, r3
 800ed4e:	b01d      	add	sp, #116	; 0x74
 800ed50:	ecbd 8b02 	vpop	{d8}
 800ed54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed58:	2a20      	cmp	r2, #32
 800ed5a:	d1cc      	bne.n	800ecf6 <_strtod_l+0x46>
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ed60:	e7be      	b.n	800ece0 <_strtod_l+0x30>
 800ed62:	2a2d      	cmp	r2, #45	; 0x2d
 800ed64:	d1c7      	bne.n	800ecf6 <_strtod_l+0x46>
 800ed66:	2201      	movs	r2, #1
 800ed68:	920a      	str	r2, [sp, #40]	; 0x28
 800ed6a:	1c5a      	adds	r2, r3, #1
 800ed6c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ed6e:	785b      	ldrb	r3, [r3, #1]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d1c2      	bne.n	800ecfa <_strtod_l+0x4a>
 800ed74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ed76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	f040 856e 	bne.w	800f85c <_strtod_l+0xbac>
 800ed80:	4652      	mov	r2, sl
 800ed82:	465b      	mov	r3, fp
 800ed84:	e7e1      	b.n	800ed4a <_strtod_l+0x9a>
 800ed86:	2200      	movs	r2, #0
 800ed88:	e7ee      	b.n	800ed68 <_strtod_l+0xb8>
 800ed8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ed8c:	b13a      	cbz	r2, 800ed9e <_strtod_l+0xee>
 800ed8e:	2135      	movs	r1, #53	; 0x35
 800ed90:	a81a      	add	r0, sp, #104	; 0x68
 800ed92:	f002 fda6 	bl	80118e2 <__copybits>
 800ed96:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ed98:	4620      	mov	r0, r4
 800ed9a:	f002 f965 	bl	8011068 <_Bfree>
 800ed9e:	3f01      	subs	r7, #1
 800eda0:	2f04      	cmp	r7, #4
 800eda2:	d806      	bhi.n	800edb2 <_strtod_l+0x102>
 800eda4:	e8df f007 	tbb	[pc, r7]
 800eda8:	1714030a 	.word	0x1714030a
 800edac:	0a          	.byte	0x0a
 800edad:	00          	.byte	0x00
 800edae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800edb2:	0728      	lsls	r0, r5, #28
 800edb4:	d5c0      	bpl.n	800ed38 <_strtod_l+0x88>
 800edb6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800edba:	e7bd      	b.n	800ed38 <_strtod_l+0x88>
 800edbc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800edc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800edc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800edc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800edca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800edce:	e7f0      	b.n	800edb2 <_strtod_l+0x102>
 800edd0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ef54 <_strtod_l+0x2a4>
 800edd4:	e7ed      	b.n	800edb2 <_strtod_l+0x102>
 800edd6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800edda:	f04f 3aff 	mov.w	sl, #4294967295
 800edde:	e7e8      	b.n	800edb2 <_strtod_l+0x102>
 800ede0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ede2:	1c5a      	adds	r2, r3, #1
 800ede4:	9217      	str	r2, [sp, #92]	; 0x5c
 800ede6:	785b      	ldrb	r3, [r3, #1]
 800ede8:	2b30      	cmp	r3, #48	; 0x30
 800edea:	d0f9      	beq.n	800ede0 <_strtod_l+0x130>
 800edec:	2b00      	cmp	r3, #0
 800edee:	d0a3      	beq.n	800ed38 <_strtod_l+0x88>
 800edf0:	2301      	movs	r3, #1
 800edf2:	f04f 0900 	mov.w	r9, #0
 800edf6:	9304      	str	r3, [sp, #16]
 800edf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800edfa:	9308      	str	r3, [sp, #32]
 800edfc:	f8cd 901c 	str.w	r9, [sp, #28]
 800ee00:	464f      	mov	r7, r9
 800ee02:	220a      	movs	r2, #10
 800ee04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ee06:	7806      	ldrb	r6, [r0, #0]
 800ee08:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ee0c:	b2d9      	uxtb	r1, r3
 800ee0e:	2909      	cmp	r1, #9
 800ee10:	d92a      	bls.n	800ee68 <_strtod_l+0x1b8>
 800ee12:	9905      	ldr	r1, [sp, #20]
 800ee14:	462a      	mov	r2, r5
 800ee16:	f002 ff83 	bl	8011d20 <strncmp>
 800ee1a:	b398      	cbz	r0, 800ee84 <_strtod_l+0x1d4>
 800ee1c:	2000      	movs	r0, #0
 800ee1e:	4632      	mov	r2, r6
 800ee20:	463d      	mov	r5, r7
 800ee22:	9005      	str	r0, [sp, #20]
 800ee24:	4603      	mov	r3, r0
 800ee26:	2a65      	cmp	r2, #101	; 0x65
 800ee28:	d001      	beq.n	800ee2e <_strtod_l+0x17e>
 800ee2a:	2a45      	cmp	r2, #69	; 0x45
 800ee2c:	d118      	bne.n	800ee60 <_strtod_l+0x1b0>
 800ee2e:	b91d      	cbnz	r5, 800ee38 <_strtod_l+0x188>
 800ee30:	9a04      	ldr	r2, [sp, #16]
 800ee32:	4302      	orrs	r2, r0
 800ee34:	d09e      	beq.n	800ed74 <_strtod_l+0xc4>
 800ee36:	2500      	movs	r5, #0
 800ee38:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ee3c:	f108 0201 	add.w	r2, r8, #1
 800ee40:	9217      	str	r2, [sp, #92]	; 0x5c
 800ee42:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ee46:	2a2b      	cmp	r2, #43	; 0x2b
 800ee48:	d075      	beq.n	800ef36 <_strtod_l+0x286>
 800ee4a:	2a2d      	cmp	r2, #45	; 0x2d
 800ee4c:	d07b      	beq.n	800ef46 <_strtod_l+0x296>
 800ee4e:	f04f 0c00 	mov.w	ip, #0
 800ee52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ee56:	2909      	cmp	r1, #9
 800ee58:	f240 8082 	bls.w	800ef60 <_strtod_l+0x2b0>
 800ee5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ee60:	2600      	movs	r6, #0
 800ee62:	e09d      	b.n	800efa0 <_strtod_l+0x2f0>
 800ee64:	2300      	movs	r3, #0
 800ee66:	e7c4      	b.n	800edf2 <_strtod_l+0x142>
 800ee68:	2f08      	cmp	r7, #8
 800ee6a:	bfd8      	it	le
 800ee6c:	9907      	ldrle	r1, [sp, #28]
 800ee6e:	f100 0001 	add.w	r0, r0, #1
 800ee72:	bfda      	itte	le
 800ee74:	fb02 3301 	mlale	r3, r2, r1, r3
 800ee78:	9307      	strle	r3, [sp, #28]
 800ee7a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ee7e:	3701      	adds	r7, #1
 800ee80:	9017      	str	r0, [sp, #92]	; 0x5c
 800ee82:	e7bf      	b.n	800ee04 <_strtod_l+0x154>
 800ee84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee86:	195a      	adds	r2, r3, r5
 800ee88:	9217      	str	r2, [sp, #92]	; 0x5c
 800ee8a:	5d5a      	ldrb	r2, [r3, r5]
 800ee8c:	2f00      	cmp	r7, #0
 800ee8e:	d037      	beq.n	800ef00 <_strtod_l+0x250>
 800ee90:	9005      	str	r0, [sp, #20]
 800ee92:	463d      	mov	r5, r7
 800ee94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ee98:	2b09      	cmp	r3, #9
 800ee9a:	d912      	bls.n	800eec2 <_strtod_l+0x212>
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	e7c2      	b.n	800ee26 <_strtod_l+0x176>
 800eea0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eea2:	1c5a      	adds	r2, r3, #1
 800eea4:	9217      	str	r2, [sp, #92]	; 0x5c
 800eea6:	785a      	ldrb	r2, [r3, #1]
 800eea8:	3001      	adds	r0, #1
 800eeaa:	2a30      	cmp	r2, #48	; 0x30
 800eeac:	d0f8      	beq.n	800eea0 <_strtod_l+0x1f0>
 800eeae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800eeb2:	2b08      	cmp	r3, #8
 800eeb4:	f200 84d9 	bhi.w	800f86a <_strtod_l+0xbba>
 800eeb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eeba:	9005      	str	r0, [sp, #20]
 800eebc:	2000      	movs	r0, #0
 800eebe:	9308      	str	r3, [sp, #32]
 800eec0:	4605      	mov	r5, r0
 800eec2:	3a30      	subs	r2, #48	; 0x30
 800eec4:	f100 0301 	add.w	r3, r0, #1
 800eec8:	d014      	beq.n	800eef4 <_strtod_l+0x244>
 800eeca:	9905      	ldr	r1, [sp, #20]
 800eecc:	4419      	add	r1, r3
 800eece:	9105      	str	r1, [sp, #20]
 800eed0:	462b      	mov	r3, r5
 800eed2:	eb00 0e05 	add.w	lr, r0, r5
 800eed6:	210a      	movs	r1, #10
 800eed8:	4573      	cmp	r3, lr
 800eeda:	d113      	bne.n	800ef04 <_strtod_l+0x254>
 800eedc:	182b      	adds	r3, r5, r0
 800eede:	2b08      	cmp	r3, #8
 800eee0:	f105 0501 	add.w	r5, r5, #1
 800eee4:	4405      	add	r5, r0
 800eee6:	dc1c      	bgt.n	800ef22 <_strtod_l+0x272>
 800eee8:	9907      	ldr	r1, [sp, #28]
 800eeea:	230a      	movs	r3, #10
 800eeec:	fb03 2301 	mla	r3, r3, r1, r2
 800eef0:	9307      	str	r3, [sp, #28]
 800eef2:	2300      	movs	r3, #0
 800eef4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eef6:	1c51      	adds	r1, r2, #1
 800eef8:	9117      	str	r1, [sp, #92]	; 0x5c
 800eefa:	7852      	ldrb	r2, [r2, #1]
 800eefc:	4618      	mov	r0, r3
 800eefe:	e7c9      	b.n	800ee94 <_strtod_l+0x1e4>
 800ef00:	4638      	mov	r0, r7
 800ef02:	e7d2      	b.n	800eeaa <_strtod_l+0x1fa>
 800ef04:	2b08      	cmp	r3, #8
 800ef06:	dc04      	bgt.n	800ef12 <_strtod_l+0x262>
 800ef08:	9e07      	ldr	r6, [sp, #28]
 800ef0a:	434e      	muls	r6, r1
 800ef0c:	9607      	str	r6, [sp, #28]
 800ef0e:	3301      	adds	r3, #1
 800ef10:	e7e2      	b.n	800eed8 <_strtod_l+0x228>
 800ef12:	f103 0c01 	add.w	ip, r3, #1
 800ef16:	f1bc 0f10 	cmp.w	ip, #16
 800ef1a:	bfd8      	it	le
 800ef1c:	fb01 f909 	mulle.w	r9, r1, r9
 800ef20:	e7f5      	b.n	800ef0e <_strtod_l+0x25e>
 800ef22:	2d10      	cmp	r5, #16
 800ef24:	bfdc      	itt	le
 800ef26:	230a      	movle	r3, #10
 800ef28:	fb03 2909 	mlale	r9, r3, r9, r2
 800ef2c:	e7e1      	b.n	800eef2 <_strtod_l+0x242>
 800ef2e:	2300      	movs	r3, #0
 800ef30:	9305      	str	r3, [sp, #20]
 800ef32:	2301      	movs	r3, #1
 800ef34:	e77c      	b.n	800ee30 <_strtod_l+0x180>
 800ef36:	f04f 0c00 	mov.w	ip, #0
 800ef3a:	f108 0202 	add.w	r2, r8, #2
 800ef3e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ef40:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ef44:	e785      	b.n	800ee52 <_strtod_l+0x1a2>
 800ef46:	f04f 0c01 	mov.w	ip, #1
 800ef4a:	e7f6      	b.n	800ef3a <_strtod_l+0x28a>
 800ef4c:	08015230 	.word	0x08015230
 800ef50:	08014fe8 	.word	0x08014fe8
 800ef54:	7ff00000 	.word	0x7ff00000
 800ef58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ef5a:	1c51      	adds	r1, r2, #1
 800ef5c:	9117      	str	r1, [sp, #92]	; 0x5c
 800ef5e:	7852      	ldrb	r2, [r2, #1]
 800ef60:	2a30      	cmp	r2, #48	; 0x30
 800ef62:	d0f9      	beq.n	800ef58 <_strtod_l+0x2a8>
 800ef64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ef68:	2908      	cmp	r1, #8
 800ef6a:	f63f af79 	bhi.w	800ee60 <_strtod_l+0x1b0>
 800ef6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ef72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ef74:	9206      	str	r2, [sp, #24]
 800ef76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ef78:	1c51      	adds	r1, r2, #1
 800ef7a:	9117      	str	r1, [sp, #92]	; 0x5c
 800ef7c:	7852      	ldrb	r2, [r2, #1]
 800ef7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ef82:	2e09      	cmp	r6, #9
 800ef84:	d937      	bls.n	800eff6 <_strtod_l+0x346>
 800ef86:	9e06      	ldr	r6, [sp, #24]
 800ef88:	1b89      	subs	r1, r1, r6
 800ef8a:	2908      	cmp	r1, #8
 800ef8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ef90:	dc02      	bgt.n	800ef98 <_strtod_l+0x2e8>
 800ef92:	4576      	cmp	r6, lr
 800ef94:	bfa8      	it	ge
 800ef96:	4676      	movge	r6, lr
 800ef98:	f1bc 0f00 	cmp.w	ip, #0
 800ef9c:	d000      	beq.n	800efa0 <_strtod_l+0x2f0>
 800ef9e:	4276      	negs	r6, r6
 800efa0:	2d00      	cmp	r5, #0
 800efa2:	d14d      	bne.n	800f040 <_strtod_l+0x390>
 800efa4:	9904      	ldr	r1, [sp, #16]
 800efa6:	4301      	orrs	r1, r0
 800efa8:	f47f aec6 	bne.w	800ed38 <_strtod_l+0x88>
 800efac:	2b00      	cmp	r3, #0
 800efae:	f47f aee1 	bne.w	800ed74 <_strtod_l+0xc4>
 800efb2:	2a69      	cmp	r2, #105	; 0x69
 800efb4:	d027      	beq.n	800f006 <_strtod_l+0x356>
 800efb6:	dc24      	bgt.n	800f002 <_strtod_l+0x352>
 800efb8:	2a49      	cmp	r2, #73	; 0x49
 800efba:	d024      	beq.n	800f006 <_strtod_l+0x356>
 800efbc:	2a4e      	cmp	r2, #78	; 0x4e
 800efbe:	f47f aed9 	bne.w	800ed74 <_strtod_l+0xc4>
 800efc2:	499f      	ldr	r1, [pc, #636]	; (800f240 <_strtod_l+0x590>)
 800efc4:	a817      	add	r0, sp, #92	; 0x5c
 800efc6:	f001 ff23 	bl	8010e10 <__match>
 800efca:	2800      	cmp	r0, #0
 800efcc:	f43f aed2 	beq.w	800ed74 <_strtod_l+0xc4>
 800efd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	2b28      	cmp	r3, #40	; 0x28
 800efd6:	d12d      	bne.n	800f034 <_strtod_l+0x384>
 800efd8:	499a      	ldr	r1, [pc, #616]	; (800f244 <_strtod_l+0x594>)
 800efda:	aa1a      	add	r2, sp, #104	; 0x68
 800efdc:	a817      	add	r0, sp, #92	; 0x5c
 800efde:	f001 ff2b 	bl	8010e38 <__hexnan>
 800efe2:	2805      	cmp	r0, #5
 800efe4:	d126      	bne.n	800f034 <_strtod_l+0x384>
 800efe6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800efe8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800efec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800eff0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800eff4:	e6a0      	b.n	800ed38 <_strtod_l+0x88>
 800eff6:	210a      	movs	r1, #10
 800eff8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800effc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f000:	e7b9      	b.n	800ef76 <_strtod_l+0x2c6>
 800f002:	2a6e      	cmp	r2, #110	; 0x6e
 800f004:	e7db      	b.n	800efbe <_strtod_l+0x30e>
 800f006:	4990      	ldr	r1, [pc, #576]	; (800f248 <_strtod_l+0x598>)
 800f008:	a817      	add	r0, sp, #92	; 0x5c
 800f00a:	f001 ff01 	bl	8010e10 <__match>
 800f00e:	2800      	cmp	r0, #0
 800f010:	f43f aeb0 	beq.w	800ed74 <_strtod_l+0xc4>
 800f014:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f016:	498d      	ldr	r1, [pc, #564]	; (800f24c <_strtod_l+0x59c>)
 800f018:	3b01      	subs	r3, #1
 800f01a:	a817      	add	r0, sp, #92	; 0x5c
 800f01c:	9317      	str	r3, [sp, #92]	; 0x5c
 800f01e:	f001 fef7 	bl	8010e10 <__match>
 800f022:	b910      	cbnz	r0, 800f02a <_strtod_l+0x37a>
 800f024:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f026:	3301      	adds	r3, #1
 800f028:	9317      	str	r3, [sp, #92]	; 0x5c
 800f02a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f25c <_strtod_l+0x5ac>
 800f02e:	f04f 0a00 	mov.w	sl, #0
 800f032:	e681      	b.n	800ed38 <_strtod_l+0x88>
 800f034:	4886      	ldr	r0, [pc, #536]	; (800f250 <_strtod_l+0x5a0>)
 800f036:	f002 fe6b 	bl	8011d10 <nan>
 800f03a:	ec5b ab10 	vmov	sl, fp, d0
 800f03e:	e67b      	b.n	800ed38 <_strtod_l+0x88>
 800f040:	9b05      	ldr	r3, [sp, #20]
 800f042:	9807      	ldr	r0, [sp, #28]
 800f044:	1af3      	subs	r3, r6, r3
 800f046:	2f00      	cmp	r7, #0
 800f048:	bf08      	it	eq
 800f04a:	462f      	moveq	r7, r5
 800f04c:	2d10      	cmp	r5, #16
 800f04e:	9306      	str	r3, [sp, #24]
 800f050:	46a8      	mov	r8, r5
 800f052:	bfa8      	it	ge
 800f054:	f04f 0810 	movge.w	r8, #16
 800f058:	f7f1 fa5c 	bl	8000514 <__aeabi_ui2d>
 800f05c:	2d09      	cmp	r5, #9
 800f05e:	4682      	mov	sl, r0
 800f060:	468b      	mov	fp, r1
 800f062:	dd13      	ble.n	800f08c <_strtod_l+0x3dc>
 800f064:	4b7b      	ldr	r3, [pc, #492]	; (800f254 <_strtod_l+0x5a4>)
 800f066:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f06a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f06e:	f7f1 facb 	bl	8000608 <__aeabi_dmul>
 800f072:	4682      	mov	sl, r0
 800f074:	4648      	mov	r0, r9
 800f076:	468b      	mov	fp, r1
 800f078:	f7f1 fa4c 	bl	8000514 <__aeabi_ui2d>
 800f07c:	4602      	mov	r2, r0
 800f07e:	460b      	mov	r3, r1
 800f080:	4650      	mov	r0, sl
 800f082:	4659      	mov	r1, fp
 800f084:	f7f1 f90a 	bl	800029c <__adddf3>
 800f088:	4682      	mov	sl, r0
 800f08a:	468b      	mov	fp, r1
 800f08c:	2d0f      	cmp	r5, #15
 800f08e:	dc38      	bgt.n	800f102 <_strtod_l+0x452>
 800f090:	9b06      	ldr	r3, [sp, #24]
 800f092:	2b00      	cmp	r3, #0
 800f094:	f43f ae50 	beq.w	800ed38 <_strtod_l+0x88>
 800f098:	dd24      	ble.n	800f0e4 <_strtod_l+0x434>
 800f09a:	2b16      	cmp	r3, #22
 800f09c:	dc0b      	bgt.n	800f0b6 <_strtod_l+0x406>
 800f09e:	496d      	ldr	r1, [pc, #436]	; (800f254 <_strtod_l+0x5a4>)
 800f0a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f0a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0a8:	4652      	mov	r2, sl
 800f0aa:	465b      	mov	r3, fp
 800f0ac:	f7f1 faac 	bl	8000608 <__aeabi_dmul>
 800f0b0:	4682      	mov	sl, r0
 800f0b2:	468b      	mov	fp, r1
 800f0b4:	e640      	b.n	800ed38 <_strtod_l+0x88>
 800f0b6:	9a06      	ldr	r2, [sp, #24]
 800f0b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	db20      	blt.n	800f102 <_strtod_l+0x452>
 800f0c0:	4c64      	ldr	r4, [pc, #400]	; (800f254 <_strtod_l+0x5a4>)
 800f0c2:	f1c5 050f 	rsb	r5, r5, #15
 800f0c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f0ca:	4652      	mov	r2, sl
 800f0cc:	465b      	mov	r3, fp
 800f0ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0d2:	f7f1 fa99 	bl	8000608 <__aeabi_dmul>
 800f0d6:	9b06      	ldr	r3, [sp, #24]
 800f0d8:	1b5d      	subs	r5, r3, r5
 800f0da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f0de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f0e2:	e7e3      	b.n	800f0ac <_strtod_l+0x3fc>
 800f0e4:	9b06      	ldr	r3, [sp, #24]
 800f0e6:	3316      	adds	r3, #22
 800f0e8:	db0b      	blt.n	800f102 <_strtod_l+0x452>
 800f0ea:	9b05      	ldr	r3, [sp, #20]
 800f0ec:	1b9e      	subs	r6, r3, r6
 800f0ee:	4b59      	ldr	r3, [pc, #356]	; (800f254 <_strtod_l+0x5a4>)
 800f0f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f0f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f0f8:	4650      	mov	r0, sl
 800f0fa:	4659      	mov	r1, fp
 800f0fc:	f7f1 fbae 	bl	800085c <__aeabi_ddiv>
 800f100:	e7d6      	b.n	800f0b0 <_strtod_l+0x400>
 800f102:	9b06      	ldr	r3, [sp, #24]
 800f104:	eba5 0808 	sub.w	r8, r5, r8
 800f108:	4498      	add	r8, r3
 800f10a:	f1b8 0f00 	cmp.w	r8, #0
 800f10e:	dd74      	ble.n	800f1fa <_strtod_l+0x54a>
 800f110:	f018 030f 	ands.w	r3, r8, #15
 800f114:	d00a      	beq.n	800f12c <_strtod_l+0x47c>
 800f116:	494f      	ldr	r1, [pc, #316]	; (800f254 <_strtod_l+0x5a4>)
 800f118:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f11c:	4652      	mov	r2, sl
 800f11e:	465b      	mov	r3, fp
 800f120:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f124:	f7f1 fa70 	bl	8000608 <__aeabi_dmul>
 800f128:	4682      	mov	sl, r0
 800f12a:	468b      	mov	fp, r1
 800f12c:	f038 080f 	bics.w	r8, r8, #15
 800f130:	d04f      	beq.n	800f1d2 <_strtod_l+0x522>
 800f132:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f136:	dd22      	ble.n	800f17e <_strtod_l+0x4ce>
 800f138:	2500      	movs	r5, #0
 800f13a:	462e      	mov	r6, r5
 800f13c:	9507      	str	r5, [sp, #28]
 800f13e:	9505      	str	r5, [sp, #20]
 800f140:	2322      	movs	r3, #34	; 0x22
 800f142:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f25c <_strtod_l+0x5ac>
 800f146:	6023      	str	r3, [r4, #0]
 800f148:	f04f 0a00 	mov.w	sl, #0
 800f14c:	9b07      	ldr	r3, [sp, #28]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	f43f adf2 	beq.w	800ed38 <_strtod_l+0x88>
 800f154:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f156:	4620      	mov	r0, r4
 800f158:	f001 ff86 	bl	8011068 <_Bfree>
 800f15c:	9905      	ldr	r1, [sp, #20]
 800f15e:	4620      	mov	r0, r4
 800f160:	f001 ff82 	bl	8011068 <_Bfree>
 800f164:	4631      	mov	r1, r6
 800f166:	4620      	mov	r0, r4
 800f168:	f001 ff7e 	bl	8011068 <_Bfree>
 800f16c:	9907      	ldr	r1, [sp, #28]
 800f16e:	4620      	mov	r0, r4
 800f170:	f001 ff7a 	bl	8011068 <_Bfree>
 800f174:	4629      	mov	r1, r5
 800f176:	4620      	mov	r0, r4
 800f178:	f001 ff76 	bl	8011068 <_Bfree>
 800f17c:	e5dc      	b.n	800ed38 <_strtod_l+0x88>
 800f17e:	4b36      	ldr	r3, [pc, #216]	; (800f258 <_strtod_l+0x5a8>)
 800f180:	9304      	str	r3, [sp, #16]
 800f182:	2300      	movs	r3, #0
 800f184:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f188:	4650      	mov	r0, sl
 800f18a:	4659      	mov	r1, fp
 800f18c:	4699      	mov	r9, r3
 800f18e:	f1b8 0f01 	cmp.w	r8, #1
 800f192:	dc21      	bgt.n	800f1d8 <_strtod_l+0x528>
 800f194:	b10b      	cbz	r3, 800f19a <_strtod_l+0x4ea>
 800f196:	4682      	mov	sl, r0
 800f198:	468b      	mov	fp, r1
 800f19a:	4b2f      	ldr	r3, [pc, #188]	; (800f258 <_strtod_l+0x5a8>)
 800f19c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f1a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f1a4:	4652      	mov	r2, sl
 800f1a6:	465b      	mov	r3, fp
 800f1a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f1ac:	f7f1 fa2c 	bl	8000608 <__aeabi_dmul>
 800f1b0:	4b2a      	ldr	r3, [pc, #168]	; (800f25c <_strtod_l+0x5ac>)
 800f1b2:	460a      	mov	r2, r1
 800f1b4:	400b      	ands	r3, r1
 800f1b6:	492a      	ldr	r1, [pc, #168]	; (800f260 <_strtod_l+0x5b0>)
 800f1b8:	428b      	cmp	r3, r1
 800f1ba:	4682      	mov	sl, r0
 800f1bc:	d8bc      	bhi.n	800f138 <_strtod_l+0x488>
 800f1be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f1c2:	428b      	cmp	r3, r1
 800f1c4:	bf86      	itte	hi
 800f1c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f264 <_strtod_l+0x5b4>
 800f1ca:	f04f 3aff 	movhi.w	sl, #4294967295
 800f1ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	9304      	str	r3, [sp, #16]
 800f1d6:	e084      	b.n	800f2e2 <_strtod_l+0x632>
 800f1d8:	f018 0f01 	tst.w	r8, #1
 800f1dc:	d005      	beq.n	800f1ea <_strtod_l+0x53a>
 800f1de:	9b04      	ldr	r3, [sp, #16]
 800f1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e4:	f7f1 fa10 	bl	8000608 <__aeabi_dmul>
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	9a04      	ldr	r2, [sp, #16]
 800f1ec:	3208      	adds	r2, #8
 800f1ee:	f109 0901 	add.w	r9, r9, #1
 800f1f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f1f6:	9204      	str	r2, [sp, #16]
 800f1f8:	e7c9      	b.n	800f18e <_strtod_l+0x4de>
 800f1fa:	d0ea      	beq.n	800f1d2 <_strtod_l+0x522>
 800f1fc:	f1c8 0800 	rsb	r8, r8, #0
 800f200:	f018 020f 	ands.w	r2, r8, #15
 800f204:	d00a      	beq.n	800f21c <_strtod_l+0x56c>
 800f206:	4b13      	ldr	r3, [pc, #76]	; (800f254 <_strtod_l+0x5a4>)
 800f208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f20c:	4650      	mov	r0, sl
 800f20e:	4659      	mov	r1, fp
 800f210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f214:	f7f1 fb22 	bl	800085c <__aeabi_ddiv>
 800f218:	4682      	mov	sl, r0
 800f21a:	468b      	mov	fp, r1
 800f21c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f220:	d0d7      	beq.n	800f1d2 <_strtod_l+0x522>
 800f222:	f1b8 0f1f 	cmp.w	r8, #31
 800f226:	dd1f      	ble.n	800f268 <_strtod_l+0x5b8>
 800f228:	2500      	movs	r5, #0
 800f22a:	462e      	mov	r6, r5
 800f22c:	9507      	str	r5, [sp, #28]
 800f22e:	9505      	str	r5, [sp, #20]
 800f230:	2322      	movs	r3, #34	; 0x22
 800f232:	f04f 0a00 	mov.w	sl, #0
 800f236:	f04f 0b00 	mov.w	fp, #0
 800f23a:	6023      	str	r3, [r4, #0]
 800f23c:	e786      	b.n	800f14c <_strtod_l+0x49c>
 800f23e:	bf00      	nop
 800f240:	08014fb9 	.word	0x08014fb9
 800f244:	08014ffc 	.word	0x08014ffc
 800f248:	08014fb1 	.word	0x08014fb1
 800f24c:	0801513c 	.word	0x0801513c
 800f250:	080153e8 	.word	0x080153e8
 800f254:	080152c8 	.word	0x080152c8
 800f258:	080152a0 	.word	0x080152a0
 800f25c:	7ff00000 	.word	0x7ff00000
 800f260:	7ca00000 	.word	0x7ca00000
 800f264:	7fefffff 	.word	0x7fefffff
 800f268:	f018 0310 	ands.w	r3, r8, #16
 800f26c:	bf18      	it	ne
 800f26e:	236a      	movne	r3, #106	; 0x6a
 800f270:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f620 <_strtod_l+0x970>
 800f274:	9304      	str	r3, [sp, #16]
 800f276:	4650      	mov	r0, sl
 800f278:	4659      	mov	r1, fp
 800f27a:	2300      	movs	r3, #0
 800f27c:	f018 0f01 	tst.w	r8, #1
 800f280:	d004      	beq.n	800f28c <_strtod_l+0x5dc>
 800f282:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f286:	f7f1 f9bf 	bl	8000608 <__aeabi_dmul>
 800f28a:	2301      	movs	r3, #1
 800f28c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f290:	f109 0908 	add.w	r9, r9, #8
 800f294:	d1f2      	bne.n	800f27c <_strtod_l+0x5cc>
 800f296:	b10b      	cbz	r3, 800f29c <_strtod_l+0x5ec>
 800f298:	4682      	mov	sl, r0
 800f29a:	468b      	mov	fp, r1
 800f29c:	9b04      	ldr	r3, [sp, #16]
 800f29e:	b1c3      	cbz	r3, 800f2d2 <_strtod_l+0x622>
 800f2a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f2a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	4659      	mov	r1, fp
 800f2ac:	dd11      	ble.n	800f2d2 <_strtod_l+0x622>
 800f2ae:	2b1f      	cmp	r3, #31
 800f2b0:	f340 8124 	ble.w	800f4fc <_strtod_l+0x84c>
 800f2b4:	2b34      	cmp	r3, #52	; 0x34
 800f2b6:	bfde      	ittt	le
 800f2b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f2bc:	f04f 33ff 	movle.w	r3, #4294967295
 800f2c0:	fa03 f202 	lslle.w	r2, r3, r2
 800f2c4:	f04f 0a00 	mov.w	sl, #0
 800f2c8:	bfcc      	ite	gt
 800f2ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f2ce:	ea02 0b01 	andle.w	fp, r2, r1
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	4650      	mov	r0, sl
 800f2d8:	4659      	mov	r1, fp
 800f2da:	f7f1 fbfd 	bl	8000ad8 <__aeabi_dcmpeq>
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	d1a2      	bne.n	800f228 <_strtod_l+0x578>
 800f2e2:	9b07      	ldr	r3, [sp, #28]
 800f2e4:	9300      	str	r3, [sp, #0]
 800f2e6:	9908      	ldr	r1, [sp, #32]
 800f2e8:	462b      	mov	r3, r5
 800f2ea:	463a      	mov	r2, r7
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	f001 ff23 	bl	8011138 <__s2b>
 800f2f2:	9007      	str	r0, [sp, #28]
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	f43f af1f 	beq.w	800f138 <_strtod_l+0x488>
 800f2fa:	9b05      	ldr	r3, [sp, #20]
 800f2fc:	1b9e      	subs	r6, r3, r6
 800f2fe:	9b06      	ldr	r3, [sp, #24]
 800f300:	2b00      	cmp	r3, #0
 800f302:	bfb4      	ite	lt
 800f304:	4633      	movlt	r3, r6
 800f306:	2300      	movge	r3, #0
 800f308:	930c      	str	r3, [sp, #48]	; 0x30
 800f30a:	9b06      	ldr	r3, [sp, #24]
 800f30c:	2500      	movs	r5, #0
 800f30e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f312:	9312      	str	r3, [sp, #72]	; 0x48
 800f314:	462e      	mov	r6, r5
 800f316:	9b07      	ldr	r3, [sp, #28]
 800f318:	4620      	mov	r0, r4
 800f31a:	6859      	ldr	r1, [r3, #4]
 800f31c:	f001 fe64 	bl	8010fe8 <_Balloc>
 800f320:	9005      	str	r0, [sp, #20]
 800f322:	2800      	cmp	r0, #0
 800f324:	f43f af0c 	beq.w	800f140 <_strtod_l+0x490>
 800f328:	9b07      	ldr	r3, [sp, #28]
 800f32a:	691a      	ldr	r2, [r3, #16]
 800f32c:	3202      	adds	r2, #2
 800f32e:	f103 010c 	add.w	r1, r3, #12
 800f332:	0092      	lsls	r2, r2, #2
 800f334:	300c      	adds	r0, #12
 800f336:	f7fe fc96 	bl	800dc66 <memcpy>
 800f33a:	ec4b ab10 	vmov	d0, sl, fp
 800f33e:	aa1a      	add	r2, sp, #104	; 0x68
 800f340:	a919      	add	r1, sp, #100	; 0x64
 800f342:	4620      	mov	r0, r4
 800f344:	f002 fa3e 	bl	80117c4 <__d2b>
 800f348:	ec4b ab18 	vmov	d8, sl, fp
 800f34c:	9018      	str	r0, [sp, #96]	; 0x60
 800f34e:	2800      	cmp	r0, #0
 800f350:	f43f aef6 	beq.w	800f140 <_strtod_l+0x490>
 800f354:	2101      	movs	r1, #1
 800f356:	4620      	mov	r0, r4
 800f358:	f001 ff88 	bl	801126c <__i2b>
 800f35c:	4606      	mov	r6, r0
 800f35e:	2800      	cmp	r0, #0
 800f360:	f43f aeee 	beq.w	800f140 <_strtod_l+0x490>
 800f364:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f366:	9904      	ldr	r1, [sp, #16]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	bfab      	itete	ge
 800f36c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f36e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f370:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f372:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f376:	bfac      	ite	ge
 800f378:	eb03 0902 	addge.w	r9, r3, r2
 800f37c:	1ad7      	sublt	r7, r2, r3
 800f37e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f380:	eba3 0801 	sub.w	r8, r3, r1
 800f384:	4490      	add	r8, r2
 800f386:	4ba1      	ldr	r3, [pc, #644]	; (800f60c <_strtod_l+0x95c>)
 800f388:	f108 38ff 	add.w	r8, r8, #4294967295
 800f38c:	4598      	cmp	r8, r3
 800f38e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f392:	f280 80c7 	bge.w	800f524 <_strtod_l+0x874>
 800f396:	eba3 0308 	sub.w	r3, r3, r8
 800f39a:	2b1f      	cmp	r3, #31
 800f39c:	eba2 0203 	sub.w	r2, r2, r3
 800f3a0:	f04f 0101 	mov.w	r1, #1
 800f3a4:	f300 80b1 	bgt.w	800f50a <_strtod_l+0x85a>
 800f3a8:	fa01 f303 	lsl.w	r3, r1, r3
 800f3ac:	930d      	str	r3, [sp, #52]	; 0x34
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	9308      	str	r3, [sp, #32]
 800f3b2:	eb09 0802 	add.w	r8, r9, r2
 800f3b6:	9b04      	ldr	r3, [sp, #16]
 800f3b8:	45c1      	cmp	r9, r8
 800f3ba:	4417      	add	r7, r2
 800f3bc:	441f      	add	r7, r3
 800f3be:	464b      	mov	r3, r9
 800f3c0:	bfa8      	it	ge
 800f3c2:	4643      	movge	r3, r8
 800f3c4:	42bb      	cmp	r3, r7
 800f3c6:	bfa8      	it	ge
 800f3c8:	463b      	movge	r3, r7
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	bfc2      	ittt	gt
 800f3ce:	eba8 0803 	subgt.w	r8, r8, r3
 800f3d2:	1aff      	subgt	r7, r7, r3
 800f3d4:	eba9 0903 	subgt.w	r9, r9, r3
 800f3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	dd17      	ble.n	800f40e <_strtod_l+0x75e>
 800f3de:	4631      	mov	r1, r6
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	f002 f802 	bl	80113ec <__pow5mult>
 800f3e8:	4606      	mov	r6, r0
 800f3ea:	2800      	cmp	r0, #0
 800f3ec:	f43f aea8 	beq.w	800f140 <_strtod_l+0x490>
 800f3f0:	4601      	mov	r1, r0
 800f3f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	f001 ff4f 	bl	8011298 <__multiply>
 800f3fa:	900b      	str	r0, [sp, #44]	; 0x2c
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	f43f ae9f 	beq.w	800f140 <_strtod_l+0x490>
 800f402:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f404:	4620      	mov	r0, r4
 800f406:	f001 fe2f 	bl	8011068 <_Bfree>
 800f40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f40c:	9318      	str	r3, [sp, #96]	; 0x60
 800f40e:	f1b8 0f00 	cmp.w	r8, #0
 800f412:	f300 808c 	bgt.w	800f52e <_strtod_l+0x87e>
 800f416:	9b06      	ldr	r3, [sp, #24]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	dd08      	ble.n	800f42e <_strtod_l+0x77e>
 800f41c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f41e:	9905      	ldr	r1, [sp, #20]
 800f420:	4620      	mov	r0, r4
 800f422:	f001 ffe3 	bl	80113ec <__pow5mult>
 800f426:	9005      	str	r0, [sp, #20]
 800f428:	2800      	cmp	r0, #0
 800f42a:	f43f ae89 	beq.w	800f140 <_strtod_l+0x490>
 800f42e:	2f00      	cmp	r7, #0
 800f430:	dd08      	ble.n	800f444 <_strtod_l+0x794>
 800f432:	9905      	ldr	r1, [sp, #20]
 800f434:	463a      	mov	r2, r7
 800f436:	4620      	mov	r0, r4
 800f438:	f002 f832 	bl	80114a0 <__lshift>
 800f43c:	9005      	str	r0, [sp, #20]
 800f43e:	2800      	cmp	r0, #0
 800f440:	f43f ae7e 	beq.w	800f140 <_strtod_l+0x490>
 800f444:	f1b9 0f00 	cmp.w	r9, #0
 800f448:	dd08      	ble.n	800f45c <_strtod_l+0x7ac>
 800f44a:	4631      	mov	r1, r6
 800f44c:	464a      	mov	r2, r9
 800f44e:	4620      	mov	r0, r4
 800f450:	f002 f826 	bl	80114a0 <__lshift>
 800f454:	4606      	mov	r6, r0
 800f456:	2800      	cmp	r0, #0
 800f458:	f43f ae72 	beq.w	800f140 <_strtod_l+0x490>
 800f45c:	9a05      	ldr	r2, [sp, #20]
 800f45e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f460:	4620      	mov	r0, r4
 800f462:	f002 f8a9 	bl	80115b8 <__mdiff>
 800f466:	4605      	mov	r5, r0
 800f468:	2800      	cmp	r0, #0
 800f46a:	f43f ae69 	beq.w	800f140 <_strtod_l+0x490>
 800f46e:	68c3      	ldr	r3, [r0, #12]
 800f470:	930b      	str	r3, [sp, #44]	; 0x2c
 800f472:	2300      	movs	r3, #0
 800f474:	60c3      	str	r3, [r0, #12]
 800f476:	4631      	mov	r1, r6
 800f478:	f002 f882 	bl	8011580 <__mcmp>
 800f47c:	2800      	cmp	r0, #0
 800f47e:	da60      	bge.n	800f542 <_strtod_l+0x892>
 800f480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f482:	ea53 030a 	orrs.w	r3, r3, sl
 800f486:	f040 8082 	bne.w	800f58e <_strtod_l+0x8de>
 800f48a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d17d      	bne.n	800f58e <_strtod_l+0x8de>
 800f492:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f496:	0d1b      	lsrs	r3, r3, #20
 800f498:	051b      	lsls	r3, r3, #20
 800f49a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f49e:	d976      	bls.n	800f58e <_strtod_l+0x8de>
 800f4a0:	696b      	ldr	r3, [r5, #20]
 800f4a2:	b913      	cbnz	r3, 800f4aa <_strtod_l+0x7fa>
 800f4a4:	692b      	ldr	r3, [r5, #16]
 800f4a6:	2b01      	cmp	r3, #1
 800f4a8:	dd71      	ble.n	800f58e <_strtod_l+0x8de>
 800f4aa:	4629      	mov	r1, r5
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	f001 fff6 	bl	80114a0 <__lshift>
 800f4b4:	4631      	mov	r1, r6
 800f4b6:	4605      	mov	r5, r0
 800f4b8:	f002 f862 	bl	8011580 <__mcmp>
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	dd66      	ble.n	800f58e <_strtod_l+0x8de>
 800f4c0:	9904      	ldr	r1, [sp, #16]
 800f4c2:	4a53      	ldr	r2, [pc, #332]	; (800f610 <_strtod_l+0x960>)
 800f4c4:	465b      	mov	r3, fp
 800f4c6:	2900      	cmp	r1, #0
 800f4c8:	f000 8081 	beq.w	800f5ce <_strtod_l+0x91e>
 800f4cc:	ea02 010b 	and.w	r1, r2, fp
 800f4d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f4d4:	dc7b      	bgt.n	800f5ce <_strtod_l+0x91e>
 800f4d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f4da:	f77f aea9 	ble.w	800f230 <_strtod_l+0x580>
 800f4de:	4b4d      	ldr	r3, [pc, #308]	; (800f614 <_strtod_l+0x964>)
 800f4e0:	4650      	mov	r0, sl
 800f4e2:	4659      	mov	r1, fp
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	f7f1 f88f 	bl	8000608 <__aeabi_dmul>
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	4303      	orrs	r3, r0
 800f4ee:	bf08      	it	eq
 800f4f0:	2322      	moveq	r3, #34	; 0x22
 800f4f2:	4682      	mov	sl, r0
 800f4f4:	468b      	mov	fp, r1
 800f4f6:	bf08      	it	eq
 800f4f8:	6023      	streq	r3, [r4, #0]
 800f4fa:	e62b      	b.n	800f154 <_strtod_l+0x4a4>
 800f4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800f500:	fa02 f303 	lsl.w	r3, r2, r3
 800f504:	ea03 0a0a 	and.w	sl, r3, sl
 800f508:	e6e3      	b.n	800f2d2 <_strtod_l+0x622>
 800f50a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f50e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f512:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f516:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f51a:	fa01 f308 	lsl.w	r3, r1, r8
 800f51e:	9308      	str	r3, [sp, #32]
 800f520:	910d      	str	r1, [sp, #52]	; 0x34
 800f522:	e746      	b.n	800f3b2 <_strtod_l+0x702>
 800f524:	2300      	movs	r3, #0
 800f526:	9308      	str	r3, [sp, #32]
 800f528:	2301      	movs	r3, #1
 800f52a:	930d      	str	r3, [sp, #52]	; 0x34
 800f52c:	e741      	b.n	800f3b2 <_strtod_l+0x702>
 800f52e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f530:	4642      	mov	r2, r8
 800f532:	4620      	mov	r0, r4
 800f534:	f001 ffb4 	bl	80114a0 <__lshift>
 800f538:	9018      	str	r0, [sp, #96]	; 0x60
 800f53a:	2800      	cmp	r0, #0
 800f53c:	f47f af6b 	bne.w	800f416 <_strtod_l+0x766>
 800f540:	e5fe      	b.n	800f140 <_strtod_l+0x490>
 800f542:	465f      	mov	r7, fp
 800f544:	d16e      	bne.n	800f624 <_strtod_l+0x974>
 800f546:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f548:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f54c:	b342      	cbz	r2, 800f5a0 <_strtod_l+0x8f0>
 800f54e:	4a32      	ldr	r2, [pc, #200]	; (800f618 <_strtod_l+0x968>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d128      	bne.n	800f5a6 <_strtod_l+0x8f6>
 800f554:	9b04      	ldr	r3, [sp, #16]
 800f556:	4651      	mov	r1, sl
 800f558:	b1eb      	cbz	r3, 800f596 <_strtod_l+0x8e6>
 800f55a:	4b2d      	ldr	r3, [pc, #180]	; (800f610 <_strtod_l+0x960>)
 800f55c:	403b      	ands	r3, r7
 800f55e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f562:	f04f 32ff 	mov.w	r2, #4294967295
 800f566:	d819      	bhi.n	800f59c <_strtod_l+0x8ec>
 800f568:	0d1b      	lsrs	r3, r3, #20
 800f56a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f56e:	fa02 f303 	lsl.w	r3, r2, r3
 800f572:	4299      	cmp	r1, r3
 800f574:	d117      	bne.n	800f5a6 <_strtod_l+0x8f6>
 800f576:	4b29      	ldr	r3, [pc, #164]	; (800f61c <_strtod_l+0x96c>)
 800f578:	429f      	cmp	r7, r3
 800f57a:	d102      	bne.n	800f582 <_strtod_l+0x8d2>
 800f57c:	3101      	adds	r1, #1
 800f57e:	f43f addf 	beq.w	800f140 <_strtod_l+0x490>
 800f582:	4b23      	ldr	r3, [pc, #140]	; (800f610 <_strtod_l+0x960>)
 800f584:	403b      	ands	r3, r7
 800f586:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f58a:	f04f 0a00 	mov.w	sl, #0
 800f58e:	9b04      	ldr	r3, [sp, #16]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d1a4      	bne.n	800f4de <_strtod_l+0x82e>
 800f594:	e5de      	b.n	800f154 <_strtod_l+0x4a4>
 800f596:	f04f 33ff 	mov.w	r3, #4294967295
 800f59a:	e7ea      	b.n	800f572 <_strtod_l+0x8c2>
 800f59c:	4613      	mov	r3, r2
 800f59e:	e7e8      	b.n	800f572 <_strtod_l+0x8c2>
 800f5a0:	ea53 030a 	orrs.w	r3, r3, sl
 800f5a4:	d08c      	beq.n	800f4c0 <_strtod_l+0x810>
 800f5a6:	9b08      	ldr	r3, [sp, #32]
 800f5a8:	b1db      	cbz	r3, 800f5e2 <_strtod_l+0x932>
 800f5aa:	423b      	tst	r3, r7
 800f5ac:	d0ef      	beq.n	800f58e <_strtod_l+0x8de>
 800f5ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5b0:	9a04      	ldr	r2, [sp, #16]
 800f5b2:	4650      	mov	r0, sl
 800f5b4:	4659      	mov	r1, fp
 800f5b6:	b1c3      	cbz	r3, 800f5ea <_strtod_l+0x93a>
 800f5b8:	f7ff fb5d 	bl	800ec76 <sulp>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	460b      	mov	r3, r1
 800f5c0:	ec51 0b18 	vmov	r0, r1, d8
 800f5c4:	f7f0 fe6a 	bl	800029c <__adddf3>
 800f5c8:	4682      	mov	sl, r0
 800f5ca:	468b      	mov	fp, r1
 800f5cc:	e7df      	b.n	800f58e <_strtod_l+0x8de>
 800f5ce:	4013      	ands	r3, r2
 800f5d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f5d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f5d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f5dc:	f04f 3aff 	mov.w	sl, #4294967295
 800f5e0:	e7d5      	b.n	800f58e <_strtod_l+0x8de>
 800f5e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5e4:	ea13 0f0a 	tst.w	r3, sl
 800f5e8:	e7e0      	b.n	800f5ac <_strtod_l+0x8fc>
 800f5ea:	f7ff fb44 	bl	800ec76 <sulp>
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	ec51 0b18 	vmov	r0, r1, d8
 800f5f6:	f7f0 fe4f 	bl	8000298 <__aeabi_dsub>
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	4682      	mov	sl, r0
 800f600:	468b      	mov	fp, r1
 800f602:	f7f1 fa69 	bl	8000ad8 <__aeabi_dcmpeq>
 800f606:	2800      	cmp	r0, #0
 800f608:	d0c1      	beq.n	800f58e <_strtod_l+0x8de>
 800f60a:	e611      	b.n	800f230 <_strtod_l+0x580>
 800f60c:	fffffc02 	.word	0xfffffc02
 800f610:	7ff00000 	.word	0x7ff00000
 800f614:	39500000 	.word	0x39500000
 800f618:	000fffff 	.word	0x000fffff
 800f61c:	7fefffff 	.word	0x7fefffff
 800f620:	08015010 	.word	0x08015010
 800f624:	4631      	mov	r1, r6
 800f626:	4628      	mov	r0, r5
 800f628:	f002 f928 	bl	801187c <__ratio>
 800f62c:	ec59 8b10 	vmov	r8, r9, d0
 800f630:	ee10 0a10 	vmov	r0, s0
 800f634:	2200      	movs	r2, #0
 800f636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f63a:	4649      	mov	r1, r9
 800f63c:	f7f1 fa60 	bl	8000b00 <__aeabi_dcmple>
 800f640:	2800      	cmp	r0, #0
 800f642:	d07a      	beq.n	800f73a <_strtod_l+0xa8a>
 800f644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f646:	2b00      	cmp	r3, #0
 800f648:	d04a      	beq.n	800f6e0 <_strtod_l+0xa30>
 800f64a:	4b95      	ldr	r3, [pc, #596]	; (800f8a0 <_strtod_l+0xbf0>)
 800f64c:	2200      	movs	r2, #0
 800f64e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f652:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f8a0 <_strtod_l+0xbf0>
 800f656:	f04f 0800 	mov.w	r8, #0
 800f65a:	4b92      	ldr	r3, [pc, #584]	; (800f8a4 <_strtod_l+0xbf4>)
 800f65c:	403b      	ands	r3, r7
 800f65e:	930d      	str	r3, [sp, #52]	; 0x34
 800f660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f662:	4b91      	ldr	r3, [pc, #580]	; (800f8a8 <_strtod_l+0xbf8>)
 800f664:	429a      	cmp	r2, r3
 800f666:	f040 80b0 	bne.w	800f7ca <_strtod_l+0xb1a>
 800f66a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f66e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f672:	ec4b ab10 	vmov	d0, sl, fp
 800f676:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f67a:	f002 f827 	bl	80116cc <__ulp>
 800f67e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f682:	ec53 2b10 	vmov	r2, r3, d0
 800f686:	f7f0 ffbf 	bl	8000608 <__aeabi_dmul>
 800f68a:	4652      	mov	r2, sl
 800f68c:	465b      	mov	r3, fp
 800f68e:	f7f0 fe05 	bl	800029c <__adddf3>
 800f692:	460b      	mov	r3, r1
 800f694:	4983      	ldr	r1, [pc, #524]	; (800f8a4 <_strtod_l+0xbf4>)
 800f696:	4a85      	ldr	r2, [pc, #532]	; (800f8ac <_strtod_l+0xbfc>)
 800f698:	4019      	ands	r1, r3
 800f69a:	4291      	cmp	r1, r2
 800f69c:	4682      	mov	sl, r0
 800f69e:	d960      	bls.n	800f762 <_strtod_l+0xab2>
 800f6a0:	ee18 3a90 	vmov	r3, s17
 800f6a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d104      	bne.n	800f6b6 <_strtod_l+0xa06>
 800f6ac:	ee18 3a10 	vmov	r3, s16
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	f43f ad45 	beq.w	800f140 <_strtod_l+0x490>
 800f6b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f8b8 <_strtod_l+0xc08>
 800f6ba:	f04f 3aff 	mov.w	sl, #4294967295
 800f6be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	f001 fcd1 	bl	8011068 <_Bfree>
 800f6c6:	9905      	ldr	r1, [sp, #20]
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	f001 fccd 	bl	8011068 <_Bfree>
 800f6ce:	4631      	mov	r1, r6
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	f001 fcc9 	bl	8011068 <_Bfree>
 800f6d6:	4629      	mov	r1, r5
 800f6d8:	4620      	mov	r0, r4
 800f6da:	f001 fcc5 	bl	8011068 <_Bfree>
 800f6de:	e61a      	b.n	800f316 <_strtod_l+0x666>
 800f6e0:	f1ba 0f00 	cmp.w	sl, #0
 800f6e4:	d11b      	bne.n	800f71e <_strtod_l+0xa6e>
 800f6e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f6ea:	b9f3      	cbnz	r3, 800f72a <_strtod_l+0xa7a>
 800f6ec:	4b6c      	ldr	r3, [pc, #432]	; (800f8a0 <_strtod_l+0xbf0>)
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	4640      	mov	r0, r8
 800f6f2:	4649      	mov	r1, r9
 800f6f4:	f7f1 f9fa 	bl	8000aec <__aeabi_dcmplt>
 800f6f8:	b9d0      	cbnz	r0, 800f730 <_strtod_l+0xa80>
 800f6fa:	4640      	mov	r0, r8
 800f6fc:	4649      	mov	r1, r9
 800f6fe:	4b6c      	ldr	r3, [pc, #432]	; (800f8b0 <_strtod_l+0xc00>)
 800f700:	2200      	movs	r2, #0
 800f702:	f7f0 ff81 	bl	8000608 <__aeabi_dmul>
 800f706:	4680      	mov	r8, r0
 800f708:	4689      	mov	r9, r1
 800f70a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f70e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f712:	9315      	str	r3, [sp, #84]	; 0x54
 800f714:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f718:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f71c:	e79d      	b.n	800f65a <_strtod_l+0x9aa>
 800f71e:	f1ba 0f01 	cmp.w	sl, #1
 800f722:	d102      	bne.n	800f72a <_strtod_l+0xa7a>
 800f724:	2f00      	cmp	r7, #0
 800f726:	f43f ad83 	beq.w	800f230 <_strtod_l+0x580>
 800f72a:	4b62      	ldr	r3, [pc, #392]	; (800f8b4 <_strtod_l+0xc04>)
 800f72c:	2200      	movs	r2, #0
 800f72e:	e78e      	b.n	800f64e <_strtod_l+0x99e>
 800f730:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f8b0 <_strtod_l+0xc00>
 800f734:	f04f 0800 	mov.w	r8, #0
 800f738:	e7e7      	b.n	800f70a <_strtod_l+0xa5a>
 800f73a:	4b5d      	ldr	r3, [pc, #372]	; (800f8b0 <_strtod_l+0xc00>)
 800f73c:	4640      	mov	r0, r8
 800f73e:	4649      	mov	r1, r9
 800f740:	2200      	movs	r2, #0
 800f742:	f7f0 ff61 	bl	8000608 <__aeabi_dmul>
 800f746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f748:	4680      	mov	r8, r0
 800f74a:	4689      	mov	r9, r1
 800f74c:	b933      	cbnz	r3, 800f75c <_strtod_l+0xaac>
 800f74e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f752:	900e      	str	r0, [sp, #56]	; 0x38
 800f754:	930f      	str	r3, [sp, #60]	; 0x3c
 800f756:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f75a:	e7dd      	b.n	800f718 <_strtod_l+0xa68>
 800f75c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f760:	e7f9      	b.n	800f756 <_strtod_l+0xaa6>
 800f762:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f766:	9b04      	ldr	r3, [sp, #16]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d1a8      	bne.n	800f6be <_strtod_l+0xa0e>
 800f76c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f770:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f772:	0d1b      	lsrs	r3, r3, #20
 800f774:	051b      	lsls	r3, r3, #20
 800f776:	429a      	cmp	r2, r3
 800f778:	d1a1      	bne.n	800f6be <_strtod_l+0xa0e>
 800f77a:	4640      	mov	r0, r8
 800f77c:	4649      	mov	r1, r9
 800f77e:	f7f1 faa3 	bl	8000cc8 <__aeabi_d2lz>
 800f782:	f7f0 ff13 	bl	80005ac <__aeabi_l2d>
 800f786:	4602      	mov	r2, r0
 800f788:	460b      	mov	r3, r1
 800f78a:	4640      	mov	r0, r8
 800f78c:	4649      	mov	r1, r9
 800f78e:	f7f0 fd83 	bl	8000298 <__aeabi_dsub>
 800f792:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f794:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f798:	ea43 030a 	orr.w	r3, r3, sl
 800f79c:	4313      	orrs	r3, r2
 800f79e:	4680      	mov	r8, r0
 800f7a0:	4689      	mov	r9, r1
 800f7a2:	d055      	beq.n	800f850 <_strtod_l+0xba0>
 800f7a4:	a336      	add	r3, pc, #216	; (adr r3, 800f880 <_strtod_l+0xbd0>)
 800f7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7aa:	f7f1 f99f 	bl	8000aec <__aeabi_dcmplt>
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	f47f acd0 	bne.w	800f154 <_strtod_l+0x4a4>
 800f7b4:	a334      	add	r3, pc, #208	; (adr r3, 800f888 <_strtod_l+0xbd8>)
 800f7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ba:	4640      	mov	r0, r8
 800f7bc:	4649      	mov	r1, r9
 800f7be:	f7f1 f9b3 	bl	8000b28 <__aeabi_dcmpgt>
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	f43f af7b 	beq.w	800f6be <_strtod_l+0xa0e>
 800f7c8:	e4c4      	b.n	800f154 <_strtod_l+0x4a4>
 800f7ca:	9b04      	ldr	r3, [sp, #16]
 800f7cc:	b333      	cbz	r3, 800f81c <_strtod_l+0xb6c>
 800f7ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f7d4:	d822      	bhi.n	800f81c <_strtod_l+0xb6c>
 800f7d6:	a32e      	add	r3, pc, #184	; (adr r3, 800f890 <_strtod_l+0xbe0>)
 800f7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7dc:	4640      	mov	r0, r8
 800f7de:	4649      	mov	r1, r9
 800f7e0:	f7f1 f98e 	bl	8000b00 <__aeabi_dcmple>
 800f7e4:	b1a0      	cbz	r0, 800f810 <_strtod_l+0xb60>
 800f7e6:	4649      	mov	r1, r9
 800f7e8:	4640      	mov	r0, r8
 800f7ea:	f7f1 f9e5 	bl	8000bb8 <__aeabi_d2uiz>
 800f7ee:	2801      	cmp	r0, #1
 800f7f0:	bf38      	it	cc
 800f7f2:	2001      	movcc	r0, #1
 800f7f4:	f7f0 fe8e 	bl	8000514 <__aeabi_ui2d>
 800f7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7fa:	4680      	mov	r8, r0
 800f7fc:	4689      	mov	r9, r1
 800f7fe:	bb23      	cbnz	r3, 800f84a <_strtod_l+0xb9a>
 800f800:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f804:	9010      	str	r0, [sp, #64]	; 0x40
 800f806:	9311      	str	r3, [sp, #68]	; 0x44
 800f808:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f80c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f814:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f818:	1a9b      	subs	r3, r3, r2
 800f81a:	9309      	str	r3, [sp, #36]	; 0x24
 800f81c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f820:	eeb0 0a48 	vmov.f32	s0, s16
 800f824:	eef0 0a68 	vmov.f32	s1, s17
 800f828:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f82c:	f001 ff4e 	bl	80116cc <__ulp>
 800f830:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f834:	ec53 2b10 	vmov	r2, r3, d0
 800f838:	f7f0 fee6 	bl	8000608 <__aeabi_dmul>
 800f83c:	ec53 2b18 	vmov	r2, r3, d8
 800f840:	f7f0 fd2c 	bl	800029c <__adddf3>
 800f844:	4682      	mov	sl, r0
 800f846:	468b      	mov	fp, r1
 800f848:	e78d      	b.n	800f766 <_strtod_l+0xab6>
 800f84a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f84e:	e7db      	b.n	800f808 <_strtod_l+0xb58>
 800f850:	a311      	add	r3, pc, #68	; (adr r3, 800f898 <_strtod_l+0xbe8>)
 800f852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f856:	f7f1 f949 	bl	8000aec <__aeabi_dcmplt>
 800f85a:	e7b2      	b.n	800f7c2 <_strtod_l+0xb12>
 800f85c:	2300      	movs	r3, #0
 800f85e:	930a      	str	r3, [sp, #40]	; 0x28
 800f860:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f862:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f864:	6013      	str	r3, [r2, #0]
 800f866:	f7ff ba6b 	b.w	800ed40 <_strtod_l+0x90>
 800f86a:	2a65      	cmp	r2, #101	; 0x65
 800f86c:	f43f ab5f 	beq.w	800ef2e <_strtod_l+0x27e>
 800f870:	2a45      	cmp	r2, #69	; 0x45
 800f872:	f43f ab5c 	beq.w	800ef2e <_strtod_l+0x27e>
 800f876:	2301      	movs	r3, #1
 800f878:	f7ff bb94 	b.w	800efa4 <_strtod_l+0x2f4>
 800f87c:	f3af 8000 	nop.w
 800f880:	94a03595 	.word	0x94a03595
 800f884:	3fdfffff 	.word	0x3fdfffff
 800f888:	35afe535 	.word	0x35afe535
 800f88c:	3fe00000 	.word	0x3fe00000
 800f890:	ffc00000 	.word	0xffc00000
 800f894:	41dfffff 	.word	0x41dfffff
 800f898:	94a03595 	.word	0x94a03595
 800f89c:	3fcfffff 	.word	0x3fcfffff
 800f8a0:	3ff00000 	.word	0x3ff00000
 800f8a4:	7ff00000 	.word	0x7ff00000
 800f8a8:	7fe00000 	.word	0x7fe00000
 800f8ac:	7c9fffff 	.word	0x7c9fffff
 800f8b0:	3fe00000 	.word	0x3fe00000
 800f8b4:	bff00000 	.word	0xbff00000
 800f8b8:	7fefffff 	.word	0x7fefffff

0800f8bc <_strtod_r>:
 800f8bc:	4b01      	ldr	r3, [pc, #4]	; (800f8c4 <_strtod_r+0x8>)
 800f8be:	f7ff b9f7 	b.w	800ecb0 <_strtod_l>
 800f8c2:	bf00      	nop
 800f8c4:	200000a0 	.word	0x200000a0

0800f8c8 <_strtol_l.constprop.0>:
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8ce:	d001      	beq.n	800f8d4 <_strtol_l.constprop.0+0xc>
 800f8d0:	2b24      	cmp	r3, #36	; 0x24
 800f8d2:	d906      	bls.n	800f8e2 <_strtol_l.constprop.0+0x1a>
 800f8d4:	f7fe f8a4 	bl	800da20 <__errno>
 800f8d8:	2316      	movs	r3, #22
 800f8da:	6003      	str	r3, [r0, #0]
 800f8dc:	2000      	movs	r0, #0
 800f8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f9c8 <_strtol_l.constprop.0+0x100>
 800f8e6:	460d      	mov	r5, r1
 800f8e8:	462e      	mov	r6, r5
 800f8ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f8f2:	f017 0708 	ands.w	r7, r7, #8
 800f8f6:	d1f7      	bne.n	800f8e8 <_strtol_l.constprop.0+0x20>
 800f8f8:	2c2d      	cmp	r4, #45	; 0x2d
 800f8fa:	d132      	bne.n	800f962 <_strtol_l.constprop.0+0x9a>
 800f8fc:	782c      	ldrb	r4, [r5, #0]
 800f8fe:	2701      	movs	r7, #1
 800f900:	1cb5      	adds	r5, r6, #2
 800f902:	2b00      	cmp	r3, #0
 800f904:	d05b      	beq.n	800f9be <_strtol_l.constprop.0+0xf6>
 800f906:	2b10      	cmp	r3, #16
 800f908:	d109      	bne.n	800f91e <_strtol_l.constprop.0+0x56>
 800f90a:	2c30      	cmp	r4, #48	; 0x30
 800f90c:	d107      	bne.n	800f91e <_strtol_l.constprop.0+0x56>
 800f90e:	782c      	ldrb	r4, [r5, #0]
 800f910:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f914:	2c58      	cmp	r4, #88	; 0x58
 800f916:	d14d      	bne.n	800f9b4 <_strtol_l.constprop.0+0xec>
 800f918:	786c      	ldrb	r4, [r5, #1]
 800f91a:	2310      	movs	r3, #16
 800f91c:	3502      	adds	r5, #2
 800f91e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f922:	f108 38ff 	add.w	r8, r8, #4294967295
 800f926:	f04f 0c00 	mov.w	ip, #0
 800f92a:	fbb8 f9f3 	udiv	r9, r8, r3
 800f92e:	4666      	mov	r6, ip
 800f930:	fb03 8a19 	mls	sl, r3, r9, r8
 800f934:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f938:	f1be 0f09 	cmp.w	lr, #9
 800f93c:	d816      	bhi.n	800f96c <_strtol_l.constprop.0+0xa4>
 800f93e:	4674      	mov	r4, lr
 800f940:	42a3      	cmp	r3, r4
 800f942:	dd24      	ble.n	800f98e <_strtol_l.constprop.0+0xc6>
 800f944:	f1bc 0f00 	cmp.w	ip, #0
 800f948:	db1e      	blt.n	800f988 <_strtol_l.constprop.0+0xc0>
 800f94a:	45b1      	cmp	r9, r6
 800f94c:	d31c      	bcc.n	800f988 <_strtol_l.constprop.0+0xc0>
 800f94e:	d101      	bne.n	800f954 <_strtol_l.constprop.0+0x8c>
 800f950:	45a2      	cmp	sl, r4
 800f952:	db19      	blt.n	800f988 <_strtol_l.constprop.0+0xc0>
 800f954:	fb06 4603 	mla	r6, r6, r3, r4
 800f958:	f04f 0c01 	mov.w	ip, #1
 800f95c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f960:	e7e8      	b.n	800f934 <_strtol_l.constprop.0+0x6c>
 800f962:	2c2b      	cmp	r4, #43	; 0x2b
 800f964:	bf04      	itt	eq
 800f966:	782c      	ldrbeq	r4, [r5, #0]
 800f968:	1cb5      	addeq	r5, r6, #2
 800f96a:	e7ca      	b.n	800f902 <_strtol_l.constprop.0+0x3a>
 800f96c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f970:	f1be 0f19 	cmp.w	lr, #25
 800f974:	d801      	bhi.n	800f97a <_strtol_l.constprop.0+0xb2>
 800f976:	3c37      	subs	r4, #55	; 0x37
 800f978:	e7e2      	b.n	800f940 <_strtol_l.constprop.0+0x78>
 800f97a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f97e:	f1be 0f19 	cmp.w	lr, #25
 800f982:	d804      	bhi.n	800f98e <_strtol_l.constprop.0+0xc6>
 800f984:	3c57      	subs	r4, #87	; 0x57
 800f986:	e7db      	b.n	800f940 <_strtol_l.constprop.0+0x78>
 800f988:	f04f 3cff 	mov.w	ip, #4294967295
 800f98c:	e7e6      	b.n	800f95c <_strtol_l.constprop.0+0x94>
 800f98e:	f1bc 0f00 	cmp.w	ip, #0
 800f992:	da05      	bge.n	800f9a0 <_strtol_l.constprop.0+0xd8>
 800f994:	2322      	movs	r3, #34	; 0x22
 800f996:	6003      	str	r3, [r0, #0]
 800f998:	4646      	mov	r6, r8
 800f99a:	b942      	cbnz	r2, 800f9ae <_strtol_l.constprop.0+0xe6>
 800f99c:	4630      	mov	r0, r6
 800f99e:	e79e      	b.n	800f8de <_strtol_l.constprop.0+0x16>
 800f9a0:	b107      	cbz	r7, 800f9a4 <_strtol_l.constprop.0+0xdc>
 800f9a2:	4276      	negs	r6, r6
 800f9a4:	2a00      	cmp	r2, #0
 800f9a6:	d0f9      	beq.n	800f99c <_strtol_l.constprop.0+0xd4>
 800f9a8:	f1bc 0f00 	cmp.w	ip, #0
 800f9ac:	d000      	beq.n	800f9b0 <_strtol_l.constprop.0+0xe8>
 800f9ae:	1e69      	subs	r1, r5, #1
 800f9b0:	6011      	str	r1, [r2, #0]
 800f9b2:	e7f3      	b.n	800f99c <_strtol_l.constprop.0+0xd4>
 800f9b4:	2430      	movs	r4, #48	; 0x30
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d1b1      	bne.n	800f91e <_strtol_l.constprop.0+0x56>
 800f9ba:	2308      	movs	r3, #8
 800f9bc:	e7af      	b.n	800f91e <_strtol_l.constprop.0+0x56>
 800f9be:	2c30      	cmp	r4, #48	; 0x30
 800f9c0:	d0a5      	beq.n	800f90e <_strtol_l.constprop.0+0x46>
 800f9c2:	230a      	movs	r3, #10
 800f9c4:	e7ab      	b.n	800f91e <_strtol_l.constprop.0+0x56>
 800f9c6:	bf00      	nop
 800f9c8:	08015039 	.word	0x08015039

0800f9cc <_strtol_r>:
 800f9cc:	f7ff bf7c 	b.w	800f8c8 <_strtol_l.constprop.0>

0800f9d0 <_write_r>:
 800f9d0:	b538      	push	{r3, r4, r5, lr}
 800f9d2:	4d07      	ldr	r5, [pc, #28]	; (800f9f0 <_write_r+0x20>)
 800f9d4:	4604      	mov	r4, r0
 800f9d6:	4608      	mov	r0, r1
 800f9d8:	4611      	mov	r1, r2
 800f9da:	2200      	movs	r2, #0
 800f9dc:	602a      	str	r2, [r5, #0]
 800f9de:	461a      	mov	r2, r3
 800f9e0:	f7f2 fba1 	bl	8002126 <_write>
 800f9e4:	1c43      	adds	r3, r0, #1
 800f9e6:	d102      	bne.n	800f9ee <_write_r+0x1e>
 800f9e8:	682b      	ldr	r3, [r5, #0]
 800f9ea:	b103      	cbz	r3, 800f9ee <_write_r+0x1e>
 800f9ec:	6023      	str	r3, [r4, #0]
 800f9ee:	bd38      	pop	{r3, r4, r5, pc}
 800f9f0:	20005018 	.word	0x20005018

0800f9f4 <_close_r>:
 800f9f4:	b538      	push	{r3, r4, r5, lr}
 800f9f6:	4d06      	ldr	r5, [pc, #24]	; (800fa10 <_close_r+0x1c>)
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	4604      	mov	r4, r0
 800f9fc:	4608      	mov	r0, r1
 800f9fe:	602b      	str	r3, [r5, #0]
 800fa00:	f7f2 fbad 	bl	800215e <_close>
 800fa04:	1c43      	adds	r3, r0, #1
 800fa06:	d102      	bne.n	800fa0e <_close_r+0x1a>
 800fa08:	682b      	ldr	r3, [r5, #0]
 800fa0a:	b103      	cbz	r3, 800fa0e <_close_r+0x1a>
 800fa0c:	6023      	str	r3, [r4, #0]
 800fa0e:	bd38      	pop	{r3, r4, r5, pc}
 800fa10:	20005018 	.word	0x20005018

0800fa14 <quorem>:
 800fa14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa18:	6903      	ldr	r3, [r0, #16]
 800fa1a:	690c      	ldr	r4, [r1, #16]
 800fa1c:	42a3      	cmp	r3, r4
 800fa1e:	4607      	mov	r7, r0
 800fa20:	f2c0 8081 	blt.w	800fb26 <quorem+0x112>
 800fa24:	3c01      	subs	r4, #1
 800fa26:	f101 0814 	add.w	r8, r1, #20
 800fa2a:	f100 0514 	add.w	r5, r0, #20
 800fa2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa32:	9301      	str	r3, [sp, #4]
 800fa34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fa44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa48:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa4c:	d331      	bcc.n	800fab2 <quorem+0x9e>
 800fa4e:	f04f 0e00 	mov.w	lr, #0
 800fa52:	4640      	mov	r0, r8
 800fa54:	46ac      	mov	ip, r5
 800fa56:	46f2      	mov	sl, lr
 800fa58:	f850 2b04 	ldr.w	r2, [r0], #4
 800fa5c:	b293      	uxth	r3, r2
 800fa5e:	fb06 e303 	mla	r3, r6, r3, lr
 800fa62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fa66:	b29b      	uxth	r3, r3
 800fa68:	ebaa 0303 	sub.w	r3, sl, r3
 800fa6c:	f8dc a000 	ldr.w	sl, [ip]
 800fa70:	0c12      	lsrs	r2, r2, #16
 800fa72:	fa13 f38a 	uxtah	r3, r3, sl
 800fa76:	fb06 e202 	mla	r2, r6, r2, lr
 800fa7a:	9300      	str	r3, [sp, #0]
 800fa7c:	9b00      	ldr	r3, [sp, #0]
 800fa7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fa82:	b292      	uxth	r2, r2
 800fa84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fa88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa8c:	f8bd 3000 	ldrh.w	r3, [sp]
 800fa90:	4581      	cmp	r9, r0
 800fa92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa96:	f84c 3b04 	str.w	r3, [ip], #4
 800fa9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fa9e:	d2db      	bcs.n	800fa58 <quorem+0x44>
 800faa0:	f855 300b 	ldr.w	r3, [r5, fp]
 800faa4:	b92b      	cbnz	r3, 800fab2 <quorem+0x9e>
 800faa6:	9b01      	ldr	r3, [sp, #4]
 800faa8:	3b04      	subs	r3, #4
 800faaa:	429d      	cmp	r5, r3
 800faac:	461a      	mov	r2, r3
 800faae:	d32e      	bcc.n	800fb0e <quorem+0xfa>
 800fab0:	613c      	str	r4, [r7, #16]
 800fab2:	4638      	mov	r0, r7
 800fab4:	f001 fd64 	bl	8011580 <__mcmp>
 800fab8:	2800      	cmp	r0, #0
 800faba:	db24      	blt.n	800fb06 <quorem+0xf2>
 800fabc:	3601      	adds	r6, #1
 800fabe:	4628      	mov	r0, r5
 800fac0:	f04f 0c00 	mov.w	ip, #0
 800fac4:	f858 2b04 	ldr.w	r2, [r8], #4
 800fac8:	f8d0 e000 	ldr.w	lr, [r0]
 800facc:	b293      	uxth	r3, r2
 800face:	ebac 0303 	sub.w	r3, ip, r3
 800fad2:	0c12      	lsrs	r2, r2, #16
 800fad4:	fa13 f38e 	uxtah	r3, r3, lr
 800fad8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fadc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fae6:	45c1      	cmp	r9, r8
 800fae8:	f840 3b04 	str.w	r3, [r0], #4
 800faec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800faf0:	d2e8      	bcs.n	800fac4 <quorem+0xb0>
 800faf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800faf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fafa:	b922      	cbnz	r2, 800fb06 <quorem+0xf2>
 800fafc:	3b04      	subs	r3, #4
 800fafe:	429d      	cmp	r5, r3
 800fb00:	461a      	mov	r2, r3
 800fb02:	d30a      	bcc.n	800fb1a <quorem+0x106>
 800fb04:	613c      	str	r4, [r7, #16]
 800fb06:	4630      	mov	r0, r6
 800fb08:	b003      	add	sp, #12
 800fb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb0e:	6812      	ldr	r2, [r2, #0]
 800fb10:	3b04      	subs	r3, #4
 800fb12:	2a00      	cmp	r2, #0
 800fb14:	d1cc      	bne.n	800fab0 <quorem+0x9c>
 800fb16:	3c01      	subs	r4, #1
 800fb18:	e7c7      	b.n	800faaa <quorem+0x96>
 800fb1a:	6812      	ldr	r2, [r2, #0]
 800fb1c:	3b04      	subs	r3, #4
 800fb1e:	2a00      	cmp	r2, #0
 800fb20:	d1f0      	bne.n	800fb04 <quorem+0xf0>
 800fb22:	3c01      	subs	r4, #1
 800fb24:	e7eb      	b.n	800fafe <quorem+0xea>
 800fb26:	2000      	movs	r0, #0
 800fb28:	e7ee      	b.n	800fb08 <quorem+0xf4>
 800fb2a:	0000      	movs	r0, r0
 800fb2c:	0000      	movs	r0, r0
	...

0800fb30 <_dtoa_r>:
 800fb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb34:	ed2d 8b04 	vpush	{d8-d9}
 800fb38:	ec57 6b10 	vmov	r6, r7, d0
 800fb3c:	b093      	sub	sp, #76	; 0x4c
 800fb3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fb40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fb44:	9106      	str	r1, [sp, #24]
 800fb46:	ee10 aa10 	vmov	sl, s0
 800fb4a:	4604      	mov	r4, r0
 800fb4c:	9209      	str	r2, [sp, #36]	; 0x24
 800fb4e:	930c      	str	r3, [sp, #48]	; 0x30
 800fb50:	46bb      	mov	fp, r7
 800fb52:	b975      	cbnz	r5, 800fb72 <_dtoa_r+0x42>
 800fb54:	2010      	movs	r0, #16
 800fb56:	f001 fa21 	bl	8010f9c <malloc>
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	6260      	str	r0, [r4, #36]	; 0x24
 800fb5e:	b920      	cbnz	r0, 800fb6a <_dtoa_r+0x3a>
 800fb60:	4ba7      	ldr	r3, [pc, #668]	; (800fe00 <_dtoa_r+0x2d0>)
 800fb62:	21ea      	movs	r1, #234	; 0xea
 800fb64:	48a7      	ldr	r0, [pc, #668]	; (800fe04 <_dtoa_r+0x2d4>)
 800fb66:	f002 f8fd 	bl	8011d64 <__assert_func>
 800fb6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fb6e:	6005      	str	r5, [r0, #0]
 800fb70:	60c5      	str	r5, [r0, #12]
 800fb72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb74:	6819      	ldr	r1, [r3, #0]
 800fb76:	b151      	cbz	r1, 800fb8e <_dtoa_r+0x5e>
 800fb78:	685a      	ldr	r2, [r3, #4]
 800fb7a:	604a      	str	r2, [r1, #4]
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	4093      	lsls	r3, r2
 800fb80:	608b      	str	r3, [r1, #8]
 800fb82:	4620      	mov	r0, r4
 800fb84:	f001 fa70 	bl	8011068 <_Bfree>
 800fb88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	601a      	str	r2, [r3, #0]
 800fb8e:	1e3b      	subs	r3, r7, #0
 800fb90:	bfaa      	itet	ge
 800fb92:	2300      	movge	r3, #0
 800fb94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fb98:	f8c8 3000 	strge.w	r3, [r8]
 800fb9c:	4b9a      	ldr	r3, [pc, #616]	; (800fe08 <_dtoa_r+0x2d8>)
 800fb9e:	bfbc      	itt	lt
 800fba0:	2201      	movlt	r2, #1
 800fba2:	f8c8 2000 	strlt.w	r2, [r8]
 800fba6:	ea33 030b 	bics.w	r3, r3, fp
 800fbaa:	d11b      	bne.n	800fbe4 <_dtoa_r+0xb4>
 800fbac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fbae:	f242 730f 	movw	r3, #9999	; 0x270f
 800fbb2:	6013      	str	r3, [r2, #0]
 800fbb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fbb8:	4333      	orrs	r3, r6
 800fbba:	f000 8592 	beq.w	80106e2 <_dtoa_r+0xbb2>
 800fbbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbc0:	b963      	cbnz	r3, 800fbdc <_dtoa_r+0xac>
 800fbc2:	4b92      	ldr	r3, [pc, #584]	; (800fe0c <_dtoa_r+0x2dc>)
 800fbc4:	e022      	b.n	800fc0c <_dtoa_r+0xdc>
 800fbc6:	4b92      	ldr	r3, [pc, #584]	; (800fe10 <_dtoa_r+0x2e0>)
 800fbc8:	9301      	str	r3, [sp, #4]
 800fbca:	3308      	adds	r3, #8
 800fbcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fbce:	6013      	str	r3, [r2, #0]
 800fbd0:	9801      	ldr	r0, [sp, #4]
 800fbd2:	b013      	add	sp, #76	; 0x4c
 800fbd4:	ecbd 8b04 	vpop	{d8-d9}
 800fbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbdc:	4b8b      	ldr	r3, [pc, #556]	; (800fe0c <_dtoa_r+0x2dc>)
 800fbde:	9301      	str	r3, [sp, #4]
 800fbe0:	3303      	adds	r3, #3
 800fbe2:	e7f3      	b.n	800fbcc <_dtoa_r+0x9c>
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	4650      	mov	r0, sl
 800fbea:	4659      	mov	r1, fp
 800fbec:	f7f0 ff74 	bl	8000ad8 <__aeabi_dcmpeq>
 800fbf0:	ec4b ab19 	vmov	d9, sl, fp
 800fbf4:	4680      	mov	r8, r0
 800fbf6:	b158      	cbz	r0, 800fc10 <_dtoa_r+0xe0>
 800fbf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	6013      	str	r3, [r2, #0]
 800fbfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	f000 856b 	beq.w	80106dc <_dtoa_r+0xbac>
 800fc06:	4883      	ldr	r0, [pc, #524]	; (800fe14 <_dtoa_r+0x2e4>)
 800fc08:	6018      	str	r0, [r3, #0]
 800fc0a:	1e43      	subs	r3, r0, #1
 800fc0c:	9301      	str	r3, [sp, #4]
 800fc0e:	e7df      	b.n	800fbd0 <_dtoa_r+0xa0>
 800fc10:	ec4b ab10 	vmov	d0, sl, fp
 800fc14:	aa10      	add	r2, sp, #64	; 0x40
 800fc16:	a911      	add	r1, sp, #68	; 0x44
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f001 fdd3 	bl	80117c4 <__d2b>
 800fc1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fc22:	ee08 0a10 	vmov	s16, r0
 800fc26:	2d00      	cmp	r5, #0
 800fc28:	f000 8084 	beq.w	800fd34 <_dtoa_r+0x204>
 800fc2c:	ee19 3a90 	vmov	r3, s19
 800fc30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fc38:	4656      	mov	r6, sl
 800fc3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fc3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fc42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fc46:	4b74      	ldr	r3, [pc, #464]	; (800fe18 <_dtoa_r+0x2e8>)
 800fc48:	2200      	movs	r2, #0
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	4639      	mov	r1, r7
 800fc4e:	f7f0 fb23 	bl	8000298 <__aeabi_dsub>
 800fc52:	a365      	add	r3, pc, #404	; (adr r3, 800fde8 <_dtoa_r+0x2b8>)
 800fc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc58:	f7f0 fcd6 	bl	8000608 <__aeabi_dmul>
 800fc5c:	a364      	add	r3, pc, #400	; (adr r3, 800fdf0 <_dtoa_r+0x2c0>)
 800fc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc62:	f7f0 fb1b 	bl	800029c <__adddf3>
 800fc66:	4606      	mov	r6, r0
 800fc68:	4628      	mov	r0, r5
 800fc6a:	460f      	mov	r7, r1
 800fc6c:	f7f0 fc62 	bl	8000534 <__aeabi_i2d>
 800fc70:	a361      	add	r3, pc, #388	; (adr r3, 800fdf8 <_dtoa_r+0x2c8>)
 800fc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc76:	f7f0 fcc7 	bl	8000608 <__aeabi_dmul>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	4630      	mov	r0, r6
 800fc80:	4639      	mov	r1, r7
 800fc82:	f7f0 fb0b 	bl	800029c <__adddf3>
 800fc86:	4606      	mov	r6, r0
 800fc88:	460f      	mov	r7, r1
 800fc8a:	f7f0 ff6d 	bl	8000b68 <__aeabi_d2iz>
 800fc8e:	2200      	movs	r2, #0
 800fc90:	9000      	str	r0, [sp, #0]
 800fc92:	2300      	movs	r3, #0
 800fc94:	4630      	mov	r0, r6
 800fc96:	4639      	mov	r1, r7
 800fc98:	f7f0 ff28 	bl	8000aec <__aeabi_dcmplt>
 800fc9c:	b150      	cbz	r0, 800fcb4 <_dtoa_r+0x184>
 800fc9e:	9800      	ldr	r0, [sp, #0]
 800fca0:	f7f0 fc48 	bl	8000534 <__aeabi_i2d>
 800fca4:	4632      	mov	r2, r6
 800fca6:	463b      	mov	r3, r7
 800fca8:	f7f0 ff16 	bl	8000ad8 <__aeabi_dcmpeq>
 800fcac:	b910      	cbnz	r0, 800fcb4 <_dtoa_r+0x184>
 800fcae:	9b00      	ldr	r3, [sp, #0]
 800fcb0:	3b01      	subs	r3, #1
 800fcb2:	9300      	str	r3, [sp, #0]
 800fcb4:	9b00      	ldr	r3, [sp, #0]
 800fcb6:	2b16      	cmp	r3, #22
 800fcb8:	d85a      	bhi.n	800fd70 <_dtoa_r+0x240>
 800fcba:	9a00      	ldr	r2, [sp, #0]
 800fcbc:	4b57      	ldr	r3, [pc, #348]	; (800fe1c <_dtoa_r+0x2ec>)
 800fcbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc6:	ec51 0b19 	vmov	r0, r1, d9
 800fcca:	f7f0 ff0f 	bl	8000aec <__aeabi_dcmplt>
 800fcce:	2800      	cmp	r0, #0
 800fcd0:	d050      	beq.n	800fd74 <_dtoa_r+0x244>
 800fcd2:	9b00      	ldr	r3, [sp, #0]
 800fcd4:	3b01      	subs	r3, #1
 800fcd6:	9300      	str	r3, [sp, #0]
 800fcd8:	2300      	movs	r3, #0
 800fcda:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fcde:	1b5d      	subs	r5, r3, r5
 800fce0:	1e6b      	subs	r3, r5, #1
 800fce2:	9305      	str	r3, [sp, #20]
 800fce4:	bf45      	ittet	mi
 800fce6:	f1c5 0301 	rsbmi	r3, r5, #1
 800fcea:	9304      	strmi	r3, [sp, #16]
 800fcec:	2300      	movpl	r3, #0
 800fcee:	2300      	movmi	r3, #0
 800fcf0:	bf4c      	ite	mi
 800fcf2:	9305      	strmi	r3, [sp, #20]
 800fcf4:	9304      	strpl	r3, [sp, #16]
 800fcf6:	9b00      	ldr	r3, [sp, #0]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	db3d      	blt.n	800fd78 <_dtoa_r+0x248>
 800fcfc:	9b05      	ldr	r3, [sp, #20]
 800fcfe:	9a00      	ldr	r2, [sp, #0]
 800fd00:	920a      	str	r2, [sp, #40]	; 0x28
 800fd02:	4413      	add	r3, r2
 800fd04:	9305      	str	r3, [sp, #20]
 800fd06:	2300      	movs	r3, #0
 800fd08:	9307      	str	r3, [sp, #28]
 800fd0a:	9b06      	ldr	r3, [sp, #24]
 800fd0c:	2b09      	cmp	r3, #9
 800fd0e:	f200 8089 	bhi.w	800fe24 <_dtoa_r+0x2f4>
 800fd12:	2b05      	cmp	r3, #5
 800fd14:	bfc4      	itt	gt
 800fd16:	3b04      	subgt	r3, #4
 800fd18:	9306      	strgt	r3, [sp, #24]
 800fd1a:	9b06      	ldr	r3, [sp, #24]
 800fd1c:	f1a3 0302 	sub.w	r3, r3, #2
 800fd20:	bfcc      	ite	gt
 800fd22:	2500      	movgt	r5, #0
 800fd24:	2501      	movle	r5, #1
 800fd26:	2b03      	cmp	r3, #3
 800fd28:	f200 8087 	bhi.w	800fe3a <_dtoa_r+0x30a>
 800fd2c:	e8df f003 	tbb	[pc, r3]
 800fd30:	59383a2d 	.word	0x59383a2d
 800fd34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fd38:	441d      	add	r5, r3
 800fd3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fd3e:	2b20      	cmp	r3, #32
 800fd40:	bfc1      	itttt	gt
 800fd42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fd46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fd4a:	fa0b f303 	lslgt.w	r3, fp, r3
 800fd4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fd52:	bfda      	itte	le
 800fd54:	f1c3 0320 	rsble	r3, r3, #32
 800fd58:	fa06 f003 	lslle.w	r0, r6, r3
 800fd5c:	4318      	orrgt	r0, r3
 800fd5e:	f7f0 fbd9 	bl	8000514 <__aeabi_ui2d>
 800fd62:	2301      	movs	r3, #1
 800fd64:	4606      	mov	r6, r0
 800fd66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fd6a:	3d01      	subs	r5, #1
 800fd6c:	930e      	str	r3, [sp, #56]	; 0x38
 800fd6e:	e76a      	b.n	800fc46 <_dtoa_r+0x116>
 800fd70:	2301      	movs	r3, #1
 800fd72:	e7b2      	b.n	800fcda <_dtoa_r+0x1aa>
 800fd74:	900b      	str	r0, [sp, #44]	; 0x2c
 800fd76:	e7b1      	b.n	800fcdc <_dtoa_r+0x1ac>
 800fd78:	9b04      	ldr	r3, [sp, #16]
 800fd7a:	9a00      	ldr	r2, [sp, #0]
 800fd7c:	1a9b      	subs	r3, r3, r2
 800fd7e:	9304      	str	r3, [sp, #16]
 800fd80:	4253      	negs	r3, r2
 800fd82:	9307      	str	r3, [sp, #28]
 800fd84:	2300      	movs	r3, #0
 800fd86:	930a      	str	r3, [sp, #40]	; 0x28
 800fd88:	e7bf      	b.n	800fd0a <_dtoa_r+0x1da>
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	9308      	str	r3, [sp, #32]
 800fd8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	dc55      	bgt.n	800fe40 <_dtoa_r+0x310>
 800fd94:	2301      	movs	r3, #1
 800fd96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	9209      	str	r2, [sp, #36]	; 0x24
 800fd9e:	e00c      	b.n	800fdba <_dtoa_r+0x28a>
 800fda0:	2301      	movs	r3, #1
 800fda2:	e7f3      	b.n	800fd8c <_dtoa_r+0x25c>
 800fda4:	2300      	movs	r3, #0
 800fda6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fda8:	9308      	str	r3, [sp, #32]
 800fdaa:	9b00      	ldr	r3, [sp, #0]
 800fdac:	4413      	add	r3, r2
 800fdae:	9302      	str	r3, [sp, #8]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	2b01      	cmp	r3, #1
 800fdb4:	9303      	str	r3, [sp, #12]
 800fdb6:	bfb8      	it	lt
 800fdb8:	2301      	movlt	r3, #1
 800fdba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	6042      	str	r2, [r0, #4]
 800fdc0:	2204      	movs	r2, #4
 800fdc2:	f102 0614 	add.w	r6, r2, #20
 800fdc6:	429e      	cmp	r6, r3
 800fdc8:	6841      	ldr	r1, [r0, #4]
 800fdca:	d93d      	bls.n	800fe48 <_dtoa_r+0x318>
 800fdcc:	4620      	mov	r0, r4
 800fdce:	f001 f90b 	bl	8010fe8 <_Balloc>
 800fdd2:	9001      	str	r0, [sp, #4]
 800fdd4:	2800      	cmp	r0, #0
 800fdd6:	d13b      	bne.n	800fe50 <_dtoa_r+0x320>
 800fdd8:	4b11      	ldr	r3, [pc, #68]	; (800fe20 <_dtoa_r+0x2f0>)
 800fdda:	4602      	mov	r2, r0
 800fddc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fde0:	e6c0      	b.n	800fb64 <_dtoa_r+0x34>
 800fde2:	2301      	movs	r3, #1
 800fde4:	e7df      	b.n	800fda6 <_dtoa_r+0x276>
 800fde6:	bf00      	nop
 800fde8:	636f4361 	.word	0x636f4361
 800fdec:	3fd287a7 	.word	0x3fd287a7
 800fdf0:	8b60c8b3 	.word	0x8b60c8b3
 800fdf4:	3fc68a28 	.word	0x3fc68a28
 800fdf8:	509f79fb 	.word	0x509f79fb
 800fdfc:	3fd34413 	.word	0x3fd34413
 800fe00:	08015146 	.word	0x08015146
 800fe04:	0801515d 	.word	0x0801515d
 800fe08:	7ff00000 	.word	0x7ff00000
 800fe0c:	08015142 	.word	0x08015142
 800fe10:	08015139 	.word	0x08015139
 800fe14:	08014fbd 	.word	0x08014fbd
 800fe18:	3ff80000 	.word	0x3ff80000
 800fe1c:	080152c8 	.word	0x080152c8
 800fe20:	080151b8 	.word	0x080151b8
 800fe24:	2501      	movs	r5, #1
 800fe26:	2300      	movs	r3, #0
 800fe28:	9306      	str	r3, [sp, #24]
 800fe2a:	9508      	str	r5, [sp, #32]
 800fe2c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fe34:	2200      	movs	r2, #0
 800fe36:	2312      	movs	r3, #18
 800fe38:	e7b0      	b.n	800fd9c <_dtoa_r+0x26c>
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	9308      	str	r3, [sp, #32]
 800fe3e:	e7f5      	b.n	800fe2c <_dtoa_r+0x2fc>
 800fe40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fe46:	e7b8      	b.n	800fdba <_dtoa_r+0x28a>
 800fe48:	3101      	adds	r1, #1
 800fe4a:	6041      	str	r1, [r0, #4]
 800fe4c:	0052      	lsls	r2, r2, #1
 800fe4e:	e7b8      	b.n	800fdc2 <_dtoa_r+0x292>
 800fe50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe52:	9a01      	ldr	r2, [sp, #4]
 800fe54:	601a      	str	r2, [r3, #0]
 800fe56:	9b03      	ldr	r3, [sp, #12]
 800fe58:	2b0e      	cmp	r3, #14
 800fe5a:	f200 809d 	bhi.w	800ff98 <_dtoa_r+0x468>
 800fe5e:	2d00      	cmp	r5, #0
 800fe60:	f000 809a 	beq.w	800ff98 <_dtoa_r+0x468>
 800fe64:	9b00      	ldr	r3, [sp, #0]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	dd32      	ble.n	800fed0 <_dtoa_r+0x3a0>
 800fe6a:	4ab7      	ldr	r2, [pc, #732]	; (8010148 <_dtoa_r+0x618>)
 800fe6c:	f003 030f 	and.w	r3, r3, #15
 800fe70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fe74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fe78:	9b00      	ldr	r3, [sp, #0]
 800fe7a:	05d8      	lsls	r0, r3, #23
 800fe7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fe80:	d516      	bpl.n	800feb0 <_dtoa_r+0x380>
 800fe82:	4bb2      	ldr	r3, [pc, #712]	; (801014c <_dtoa_r+0x61c>)
 800fe84:	ec51 0b19 	vmov	r0, r1, d9
 800fe88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fe8c:	f7f0 fce6 	bl	800085c <__aeabi_ddiv>
 800fe90:	f007 070f 	and.w	r7, r7, #15
 800fe94:	4682      	mov	sl, r0
 800fe96:	468b      	mov	fp, r1
 800fe98:	2503      	movs	r5, #3
 800fe9a:	4eac      	ldr	r6, [pc, #688]	; (801014c <_dtoa_r+0x61c>)
 800fe9c:	b957      	cbnz	r7, 800feb4 <_dtoa_r+0x384>
 800fe9e:	4642      	mov	r2, r8
 800fea0:	464b      	mov	r3, r9
 800fea2:	4650      	mov	r0, sl
 800fea4:	4659      	mov	r1, fp
 800fea6:	f7f0 fcd9 	bl	800085c <__aeabi_ddiv>
 800feaa:	4682      	mov	sl, r0
 800feac:	468b      	mov	fp, r1
 800feae:	e028      	b.n	800ff02 <_dtoa_r+0x3d2>
 800feb0:	2502      	movs	r5, #2
 800feb2:	e7f2      	b.n	800fe9a <_dtoa_r+0x36a>
 800feb4:	07f9      	lsls	r1, r7, #31
 800feb6:	d508      	bpl.n	800feca <_dtoa_r+0x39a>
 800feb8:	4640      	mov	r0, r8
 800feba:	4649      	mov	r1, r9
 800febc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fec0:	f7f0 fba2 	bl	8000608 <__aeabi_dmul>
 800fec4:	3501      	adds	r5, #1
 800fec6:	4680      	mov	r8, r0
 800fec8:	4689      	mov	r9, r1
 800feca:	107f      	asrs	r7, r7, #1
 800fecc:	3608      	adds	r6, #8
 800fece:	e7e5      	b.n	800fe9c <_dtoa_r+0x36c>
 800fed0:	f000 809b 	beq.w	801000a <_dtoa_r+0x4da>
 800fed4:	9b00      	ldr	r3, [sp, #0]
 800fed6:	4f9d      	ldr	r7, [pc, #628]	; (801014c <_dtoa_r+0x61c>)
 800fed8:	425e      	negs	r6, r3
 800feda:	4b9b      	ldr	r3, [pc, #620]	; (8010148 <_dtoa_r+0x618>)
 800fedc:	f006 020f 	and.w	r2, r6, #15
 800fee0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee8:	ec51 0b19 	vmov	r0, r1, d9
 800feec:	f7f0 fb8c 	bl	8000608 <__aeabi_dmul>
 800fef0:	1136      	asrs	r6, r6, #4
 800fef2:	4682      	mov	sl, r0
 800fef4:	468b      	mov	fp, r1
 800fef6:	2300      	movs	r3, #0
 800fef8:	2502      	movs	r5, #2
 800fefa:	2e00      	cmp	r6, #0
 800fefc:	d17a      	bne.n	800fff4 <_dtoa_r+0x4c4>
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d1d3      	bne.n	800feaa <_dtoa_r+0x37a>
 800ff02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	f000 8082 	beq.w	801000e <_dtoa_r+0x4de>
 800ff0a:	4b91      	ldr	r3, [pc, #580]	; (8010150 <_dtoa_r+0x620>)
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	4650      	mov	r0, sl
 800ff10:	4659      	mov	r1, fp
 800ff12:	f7f0 fdeb 	bl	8000aec <__aeabi_dcmplt>
 800ff16:	2800      	cmp	r0, #0
 800ff18:	d079      	beq.n	801000e <_dtoa_r+0x4de>
 800ff1a:	9b03      	ldr	r3, [sp, #12]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d076      	beq.n	801000e <_dtoa_r+0x4de>
 800ff20:	9b02      	ldr	r3, [sp, #8]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	dd36      	ble.n	800ff94 <_dtoa_r+0x464>
 800ff26:	9b00      	ldr	r3, [sp, #0]
 800ff28:	4650      	mov	r0, sl
 800ff2a:	4659      	mov	r1, fp
 800ff2c:	1e5f      	subs	r7, r3, #1
 800ff2e:	2200      	movs	r2, #0
 800ff30:	4b88      	ldr	r3, [pc, #544]	; (8010154 <_dtoa_r+0x624>)
 800ff32:	f7f0 fb69 	bl	8000608 <__aeabi_dmul>
 800ff36:	9e02      	ldr	r6, [sp, #8]
 800ff38:	4682      	mov	sl, r0
 800ff3a:	468b      	mov	fp, r1
 800ff3c:	3501      	adds	r5, #1
 800ff3e:	4628      	mov	r0, r5
 800ff40:	f7f0 faf8 	bl	8000534 <__aeabi_i2d>
 800ff44:	4652      	mov	r2, sl
 800ff46:	465b      	mov	r3, fp
 800ff48:	f7f0 fb5e 	bl	8000608 <__aeabi_dmul>
 800ff4c:	4b82      	ldr	r3, [pc, #520]	; (8010158 <_dtoa_r+0x628>)
 800ff4e:	2200      	movs	r2, #0
 800ff50:	f7f0 f9a4 	bl	800029c <__adddf3>
 800ff54:	46d0      	mov	r8, sl
 800ff56:	46d9      	mov	r9, fp
 800ff58:	4682      	mov	sl, r0
 800ff5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ff5e:	2e00      	cmp	r6, #0
 800ff60:	d158      	bne.n	8010014 <_dtoa_r+0x4e4>
 800ff62:	4b7e      	ldr	r3, [pc, #504]	; (801015c <_dtoa_r+0x62c>)
 800ff64:	2200      	movs	r2, #0
 800ff66:	4640      	mov	r0, r8
 800ff68:	4649      	mov	r1, r9
 800ff6a:	f7f0 f995 	bl	8000298 <__aeabi_dsub>
 800ff6e:	4652      	mov	r2, sl
 800ff70:	465b      	mov	r3, fp
 800ff72:	4680      	mov	r8, r0
 800ff74:	4689      	mov	r9, r1
 800ff76:	f7f0 fdd7 	bl	8000b28 <__aeabi_dcmpgt>
 800ff7a:	2800      	cmp	r0, #0
 800ff7c:	f040 8295 	bne.w	80104aa <_dtoa_r+0x97a>
 800ff80:	4652      	mov	r2, sl
 800ff82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ff86:	4640      	mov	r0, r8
 800ff88:	4649      	mov	r1, r9
 800ff8a:	f7f0 fdaf 	bl	8000aec <__aeabi_dcmplt>
 800ff8e:	2800      	cmp	r0, #0
 800ff90:	f040 8289 	bne.w	80104a6 <_dtoa_r+0x976>
 800ff94:	ec5b ab19 	vmov	sl, fp, d9
 800ff98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	f2c0 8148 	blt.w	8010230 <_dtoa_r+0x700>
 800ffa0:	9a00      	ldr	r2, [sp, #0]
 800ffa2:	2a0e      	cmp	r2, #14
 800ffa4:	f300 8144 	bgt.w	8010230 <_dtoa_r+0x700>
 800ffa8:	4b67      	ldr	r3, [pc, #412]	; (8010148 <_dtoa_r+0x618>)
 800ffaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ffb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	f280 80d5 	bge.w	8010164 <_dtoa_r+0x634>
 800ffba:	9b03      	ldr	r3, [sp, #12]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	f300 80d1 	bgt.w	8010164 <_dtoa_r+0x634>
 800ffc2:	f040 826f 	bne.w	80104a4 <_dtoa_r+0x974>
 800ffc6:	4b65      	ldr	r3, [pc, #404]	; (801015c <_dtoa_r+0x62c>)
 800ffc8:	2200      	movs	r2, #0
 800ffca:	4640      	mov	r0, r8
 800ffcc:	4649      	mov	r1, r9
 800ffce:	f7f0 fb1b 	bl	8000608 <__aeabi_dmul>
 800ffd2:	4652      	mov	r2, sl
 800ffd4:	465b      	mov	r3, fp
 800ffd6:	f7f0 fd9d 	bl	8000b14 <__aeabi_dcmpge>
 800ffda:	9e03      	ldr	r6, [sp, #12]
 800ffdc:	4637      	mov	r7, r6
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	f040 8245 	bne.w	801046e <_dtoa_r+0x93e>
 800ffe4:	9d01      	ldr	r5, [sp, #4]
 800ffe6:	2331      	movs	r3, #49	; 0x31
 800ffe8:	f805 3b01 	strb.w	r3, [r5], #1
 800ffec:	9b00      	ldr	r3, [sp, #0]
 800ffee:	3301      	adds	r3, #1
 800fff0:	9300      	str	r3, [sp, #0]
 800fff2:	e240      	b.n	8010476 <_dtoa_r+0x946>
 800fff4:	07f2      	lsls	r2, r6, #31
 800fff6:	d505      	bpl.n	8010004 <_dtoa_r+0x4d4>
 800fff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fffc:	f7f0 fb04 	bl	8000608 <__aeabi_dmul>
 8010000:	3501      	adds	r5, #1
 8010002:	2301      	movs	r3, #1
 8010004:	1076      	asrs	r6, r6, #1
 8010006:	3708      	adds	r7, #8
 8010008:	e777      	b.n	800fefa <_dtoa_r+0x3ca>
 801000a:	2502      	movs	r5, #2
 801000c:	e779      	b.n	800ff02 <_dtoa_r+0x3d2>
 801000e:	9f00      	ldr	r7, [sp, #0]
 8010010:	9e03      	ldr	r6, [sp, #12]
 8010012:	e794      	b.n	800ff3e <_dtoa_r+0x40e>
 8010014:	9901      	ldr	r1, [sp, #4]
 8010016:	4b4c      	ldr	r3, [pc, #304]	; (8010148 <_dtoa_r+0x618>)
 8010018:	4431      	add	r1, r6
 801001a:	910d      	str	r1, [sp, #52]	; 0x34
 801001c:	9908      	ldr	r1, [sp, #32]
 801001e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010022:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010026:	2900      	cmp	r1, #0
 8010028:	d043      	beq.n	80100b2 <_dtoa_r+0x582>
 801002a:	494d      	ldr	r1, [pc, #308]	; (8010160 <_dtoa_r+0x630>)
 801002c:	2000      	movs	r0, #0
 801002e:	f7f0 fc15 	bl	800085c <__aeabi_ddiv>
 8010032:	4652      	mov	r2, sl
 8010034:	465b      	mov	r3, fp
 8010036:	f7f0 f92f 	bl	8000298 <__aeabi_dsub>
 801003a:	9d01      	ldr	r5, [sp, #4]
 801003c:	4682      	mov	sl, r0
 801003e:	468b      	mov	fp, r1
 8010040:	4649      	mov	r1, r9
 8010042:	4640      	mov	r0, r8
 8010044:	f7f0 fd90 	bl	8000b68 <__aeabi_d2iz>
 8010048:	4606      	mov	r6, r0
 801004a:	f7f0 fa73 	bl	8000534 <__aeabi_i2d>
 801004e:	4602      	mov	r2, r0
 8010050:	460b      	mov	r3, r1
 8010052:	4640      	mov	r0, r8
 8010054:	4649      	mov	r1, r9
 8010056:	f7f0 f91f 	bl	8000298 <__aeabi_dsub>
 801005a:	3630      	adds	r6, #48	; 0x30
 801005c:	f805 6b01 	strb.w	r6, [r5], #1
 8010060:	4652      	mov	r2, sl
 8010062:	465b      	mov	r3, fp
 8010064:	4680      	mov	r8, r0
 8010066:	4689      	mov	r9, r1
 8010068:	f7f0 fd40 	bl	8000aec <__aeabi_dcmplt>
 801006c:	2800      	cmp	r0, #0
 801006e:	d163      	bne.n	8010138 <_dtoa_r+0x608>
 8010070:	4642      	mov	r2, r8
 8010072:	464b      	mov	r3, r9
 8010074:	4936      	ldr	r1, [pc, #216]	; (8010150 <_dtoa_r+0x620>)
 8010076:	2000      	movs	r0, #0
 8010078:	f7f0 f90e 	bl	8000298 <__aeabi_dsub>
 801007c:	4652      	mov	r2, sl
 801007e:	465b      	mov	r3, fp
 8010080:	f7f0 fd34 	bl	8000aec <__aeabi_dcmplt>
 8010084:	2800      	cmp	r0, #0
 8010086:	f040 80b5 	bne.w	80101f4 <_dtoa_r+0x6c4>
 801008a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801008c:	429d      	cmp	r5, r3
 801008e:	d081      	beq.n	800ff94 <_dtoa_r+0x464>
 8010090:	4b30      	ldr	r3, [pc, #192]	; (8010154 <_dtoa_r+0x624>)
 8010092:	2200      	movs	r2, #0
 8010094:	4650      	mov	r0, sl
 8010096:	4659      	mov	r1, fp
 8010098:	f7f0 fab6 	bl	8000608 <__aeabi_dmul>
 801009c:	4b2d      	ldr	r3, [pc, #180]	; (8010154 <_dtoa_r+0x624>)
 801009e:	4682      	mov	sl, r0
 80100a0:	468b      	mov	fp, r1
 80100a2:	4640      	mov	r0, r8
 80100a4:	4649      	mov	r1, r9
 80100a6:	2200      	movs	r2, #0
 80100a8:	f7f0 faae 	bl	8000608 <__aeabi_dmul>
 80100ac:	4680      	mov	r8, r0
 80100ae:	4689      	mov	r9, r1
 80100b0:	e7c6      	b.n	8010040 <_dtoa_r+0x510>
 80100b2:	4650      	mov	r0, sl
 80100b4:	4659      	mov	r1, fp
 80100b6:	f7f0 faa7 	bl	8000608 <__aeabi_dmul>
 80100ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100bc:	9d01      	ldr	r5, [sp, #4]
 80100be:	930f      	str	r3, [sp, #60]	; 0x3c
 80100c0:	4682      	mov	sl, r0
 80100c2:	468b      	mov	fp, r1
 80100c4:	4649      	mov	r1, r9
 80100c6:	4640      	mov	r0, r8
 80100c8:	f7f0 fd4e 	bl	8000b68 <__aeabi_d2iz>
 80100cc:	4606      	mov	r6, r0
 80100ce:	f7f0 fa31 	bl	8000534 <__aeabi_i2d>
 80100d2:	3630      	adds	r6, #48	; 0x30
 80100d4:	4602      	mov	r2, r0
 80100d6:	460b      	mov	r3, r1
 80100d8:	4640      	mov	r0, r8
 80100da:	4649      	mov	r1, r9
 80100dc:	f7f0 f8dc 	bl	8000298 <__aeabi_dsub>
 80100e0:	f805 6b01 	strb.w	r6, [r5], #1
 80100e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100e6:	429d      	cmp	r5, r3
 80100e8:	4680      	mov	r8, r0
 80100ea:	4689      	mov	r9, r1
 80100ec:	f04f 0200 	mov.w	r2, #0
 80100f0:	d124      	bne.n	801013c <_dtoa_r+0x60c>
 80100f2:	4b1b      	ldr	r3, [pc, #108]	; (8010160 <_dtoa_r+0x630>)
 80100f4:	4650      	mov	r0, sl
 80100f6:	4659      	mov	r1, fp
 80100f8:	f7f0 f8d0 	bl	800029c <__adddf3>
 80100fc:	4602      	mov	r2, r0
 80100fe:	460b      	mov	r3, r1
 8010100:	4640      	mov	r0, r8
 8010102:	4649      	mov	r1, r9
 8010104:	f7f0 fd10 	bl	8000b28 <__aeabi_dcmpgt>
 8010108:	2800      	cmp	r0, #0
 801010a:	d173      	bne.n	80101f4 <_dtoa_r+0x6c4>
 801010c:	4652      	mov	r2, sl
 801010e:	465b      	mov	r3, fp
 8010110:	4913      	ldr	r1, [pc, #76]	; (8010160 <_dtoa_r+0x630>)
 8010112:	2000      	movs	r0, #0
 8010114:	f7f0 f8c0 	bl	8000298 <__aeabi_dsub>
 8010118:	4602      	mov	r2, r0
 801011a:	460b      	mov	r3, r1
 801011c:	4640      	mov	r0, r8
 801011e:	4649      	mov	r1, r9
 8010120:	f7f0 fce4 	bl	8000aec <__aeabi_dcmplt>
 8010124:	2800      	cmp	r0, #0
 8010126:	f43f af35 	beq.w	800ff94 <_dtoa_r+0x464>
 801012a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801012c:	1e6b      	subs	r3, r5, #1
 801012e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010130:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010134:	2b30      	cmp	r3, #48	; 0x30
 8010136:	d0f8      	beq.n	801012a <_dtoa_r+0x5fa>
 8010138:	9700      	str	r7, [sp, #0]
 801013a:	e049      	b.n	80101d0 <_dtoa_r+0x6a0>
 801013c:	4b05      	ldr	r3, [pc, #20]	; (8010154 <_dtoa_r+0x624>)
 801013e:	f7f0 fa63 	bl	8000608 <__aeabi_dmul>
 8010142:	4680      	mov	r8, r0
 8010144:	4689      	mov	r9, r1
 8010146:	e7bd      	b.n	80100c4 <_dtoa_r+0x594>
 8010148:	080152c8 	.word	0x080152c8
 801014c:	080152a0 	.word	0x080152a0
 8010150:	3ff00000 	.word	0x3ff00000
 8010154:	40240000 	.word	0x40240000
 8010158:	401c0000 	.word	0x401c0000
 801015c:	40140000 	.word	0x40140000
 8010160:	3fe00000 	.word	0x3fe00000
 8010164:	9d01      	ldr	r5, [sp, #4]
 8010166:	4656      	mov	r6, sl
 8010168:	465f      	mov	r7, fp
 801016a:	4642      	mov	r2, r8
 801016c:	464b      	mov	r3, r9
 801016e:	4630      	mov	r0, r6
 8010170:	4639      	mov	r1, r7
 8010172:	f7f0 fb73 	bl	800085c <__aeabi_ddiv>
 8010176:	f7f0 fcf7 	bl	8000b68 <__aeabi_d2iz>
 801017a:	4682      	mov	sl, r0
 801017c:	f7f0 f9da 	bl	8000534 <__aeabi_i2d>
 8010180:	4642      	mov	r2, r8
 8010182:	464b      	mov	r3, r9
 8010184:	f7f0 fa40 	bl	8000608 <__aeabi_dmul>
 8010188:	4602      	mov	r2, r0
 801018a:	460b      	mov	r3, r1
 801018c:	4630      	mov	r0, r6
 801018e:	4639      	mov	r1, r7
 8010190:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010194:	f7f0 f880 	bl	8000298 <__aeabi_dsub>
 8010198:	f805 6b01 	strb.w	r6, [r5], #1
 801019c:	9e01      	ldr	r6, [sp, #4]
 801019e:	9f03      	ldr	r7, [sp, #12]
 80101a0:	1bae      	subs	r6, r5, r6
 80101a2:	42b7      	cmp	r7, r6
 80101a4:	4602      	mov	r2, r0
 80101a6:	460b      	mov	r3, r1
 80101a8:	d135      	bne.n	8010216 <_dtoa_r+0x6e6>
 80101aa:	f7f0 f877 	bl	800029c <__adddf3>
 80101ae:	4642      	mov	r2, r8
 80101b0:	464b      	mov	r3, r9
 80101b2:	4606      	mov	r6, r0
 80101b4:	460f      	mov	r7, r1
 80101b6:	f7f0 fcb7 	bl	8000b28 <__aeabi_dcmpgt>
 80101ba:	b9d0      	cbnz	r0, 80101f2 <_dtoa_r+0x6c2>
 80101bc:	4642      	mov	r2, r8
 80101be:	464b      	mov	r3, r9
 80101c0:	4630      	mov	r0, r6
 80101c2:	4639      	mov	r1, r7
 80101c4:	f7f0 fc88 	bl	8000ad8 <__aeabi_dcmpeq>
 80101c8:	b110      	cbz	r0, 80101d0 <_dtoa_r+0x6a0>
 80101ca:	f01a 0f01 	tst.w	sl, #1
 80101ce:	d110      	bne.n	80101f2 <_dtoa_r+0x6c2>
 80101d0:	4620      	mov	r0, r4
 80101d2:	ee18 1a10 	vmov	r1, s16
 80101d6:	f000 ff47 	bl	8011068 <_Bfree>
 80101da:	2300      	movs	r3, #0
 80101dc:	9800      	ldr	r0, [sp, #0]
 80101de:	702b      	strb	r3, [r5, #0]
 80101e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101e2:	3001      	adds	r0, #1
 80101e4:	6018      	str	r0, [r3, #0]
 80101e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	f43f acf1 	beq.w	800fbd0 <_dtoa_r+0xa0>
 80101ee:	601d      	str	r5, [r3, #0]
 80101f0:	e4ee      	b.n	800fbd0 <_dtoa_r+0xa0>
 80101f2:	9f00      	ldr	r7, [sp, #0]
 80101f4:	462b      	mov	r3, r5
 80101f6:	461d      	mov	r5, r3
 80101f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80101fc:	2a39      	cmp	r2, #57	; 0x39
 80101fe:	d106      	bne.n	801020e <_dtoa_r+0x6de>
 8010200:	9a01      	ldr	r2, [sp, #4]
 8010202:	429a      	cmp	r2, r3
 8010204:	d1f7      	bne.n	80101f6 <_dtoa_r+0x6c6>
 8010206:	9901      	ldr	r1, [sp, #4]
 8010208:	2230      	movs	r2, #48	; 0x30
 801020a:	3701      	adds	r7, #1
 801020c:	700a      	strb	r2, [r1, #0]
 801020e:	781a      	ldrb	r2, [r3, #0]
 8010210:	3201      	adds	r2, #1
 8010212:	701a      	strb	r2, [r3, #0]
 8010214:	e790      	b.n	8010138 <_dtoa_r+0x608>
 8010216:	4ba6      	ldr	r3, [pc, #664]	; (80104b0 <_dtoa_r+0x980>)
 8010218:	2200      	movs	r2, #0
 801021a:	f7f0 f9f5 	bl	8000608 <__aeabi_dmul>
 801021e:	2200      	movs	r2, #0
 8010220:	2300      	movs	r3, #0
 8010222:	4606      	mov	r6, r0
 8010224:	460f      	mov	r7, r1
 8010226:	f7f0 fc57 	bl	8000ad8 <__aeabi_dcmpeq>
 801022a:	2800      	cmp	r0, #0
 801022c:	d09d      	beq.n	801016a <_dtoa_r+0x63a>
 801022e:	e7cf      	b.n	80101d0 <_dtoa_r+0x6a0>
 8010230:	9a08      	ldr	r2, [sp, #32]
 8010232:	2a00      	cmp	r2, #0
 8010234:	f000 80d7 	beq.w	80103e6 <_dtoa_r+0x8b6>
 8010238:	9a06      	ldr	r2, [sp, #24]
 801023a:	2a01      	cmp	r2, #1
 801023c:	f300 80ba 	bgt.w	80103b4 <_dtoa_r+0x884>
 8010240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010242:	2a00      	cmp	r2, #0
 8010244:	f000 80b2 	beq.w	80103ac <_dtoa_r+0x87c>
 8010248:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801024c:	9e07      	ldr	r6, [sp, #28]
 801024e:	9d04      	ldr	r5, [sp, #16]
 8010250:	9a04      	ldr	r2, [sp, #16]
 8010252:	441a      	add	r2, r3
 8010254:	9204      	str	r2, [sp, #16]
 8010256:	9a05      	ldr	r2, [sp, #20]
 8010258:	2101      	movs	r1, #1
 801025a:	441a      	add	r2, r3
 801025c:	4620      	mov	r0, r4
 801025e:	9205      	str	r2, [sp, #20]
 8010260:	f001 f804 	bl	801126c <__i2b>
 8010264:	4607      	mov	r7, r0
 8010266:	2d00      	cmp	r5, #0
 8010268:	dd0c      	ble.n	8010284 <_dtoa_r+0x754>
 801026a:	9b05      	ldr	r3, [sp, #20]
 801026c:	2b00      	cmp	r3, #0
 801026e:	dd09      	ble.n	8010284 <_dtoa_r+0x754>
 8010270:	42ab      	cmp	r3, r5
 8010272:	9a04      	ldr	r2, [sp, #16]
 8010274:	bfa8      	it	ge
 8010276:	462b      	movge	r3, r5
 8010278:	1ad2      	subs	r2, r2, r3
 801027a:	9204      	str	r2, [sp, #16]
 801027c:	9a05      	ldr	r2, [sp, #20]
 801027e:	1aed      	subs	r5, r5, r3
 8010280:	1ad3      	subs	r3, r2, r3
 8010282:	9305      	str	r3, [sp, #20]
 8010284:	9b07      	ldr	r3, [sp, #28]
 8010286:	b31b      	cbz	r3, 80102d0 <_dtoa_r+0x7a0>
 8010288:	9b08      	ldr	r3, [sp, #32]
 801028a:	2b00      	cmp	r3, #0
 801028c:	f000 80af 	beq.w	80103ee <_dtoa_r+0x8be>
 8010290:	2e00      	cmp	r6, #0
 8010292:	dd13      	ble.n	80102bc <_dtoa_r+0x78c>
 8010294:	4639      	mov	r1, r7
 8010296:	4632      	mov	r2, r6
 8010298:	4620      	mov	r0, r4
 801029a:	f001 f8a7 	bl	80113ec <__pow5mult>
 801029e:	ee18 2a10 	vmov	r2, s16
 80102a2:	4601      	mov	r1, r0
 80102a4:	4607      	mov	r7, r0
 80102a6:	4620      	mov	r0, r4
 80102a8:	f000 fff6 	bl	8011298 <__multiply>
 80102ac:	ee18 1a10 	vmov	r1, s16
 80102b0:	4680      	mov	r8, r0
 80102b2:	4620      	mov	r0, r4
 80102b4:	f000 fed8 	bl	8011068 <_Bfree>
 80102b8:	ee08 8a10 	vmov	s16, r8
 80102bc:	9b07      	ldr	r3, [sp, #28]
 80102be:	1b9a      	subs	r2, r3, r6
 80102c0:	d006      	beq.n	80102d0 <_dtoa_r+0x7a0>
 80102c2:	ee18 1a10 	vmov	r1, s16
 80102c6:	4620      	mov	r0, r4
 80102c8:	f001 f890 	bl	80113ec <__pow5mult>
 80102cc:	ee08 0a10 	vmov	s16, r0
 80102d0:	2101      	movs	r1, #1
 80102d2:	4620      	mov	r0, r4
 80102d4:	f000 ffca 	bl	801126c <__i2b>
 80102d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102da:	2b00      	cmp	r3, #0
 80102dc:	4606      	mov	r6, r0
 80102de:	f340 8088 	ble.w	80103f2 <_dtoa_r+0x8c2>
 80102e2:	461a      	mov	r2, r3
 80102e4:	4601      	mov	r1, r0
 80102e6:	4620      	mov	r0, r4
 80102e8:	f001 f880 	bl	80113ec <__pow5mult>
 80102ec:	9b06      	ldr	r3, [sp, #24]
 80102ee:	2b01      	cmp	r3, #1
 80102f0:	4606      	mov	r6, r0
 80102f2:	f340 8081 	ble.w	80103f8 <_dtoa_r+0x8c8>
 80102f6:	f04f 0800 	mov.w	r8, #0
 80102fa:	6933      	ldr	r3, [r6, #16]
 80102fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010300:	6918      	ldr	r0, [r3, #16]
 8010302:	f000 ff63 	bl	80111cc <__hi0bits>
 8010306:	f1c0 0020 	rsb	r0, r0, #32
 801030a:	9b05      	ldr	r3, [sp, #20]
 801030c:	4418      	add	r0, r3
 801030e:	f010 001f 	ands.w	r0, r0, #31
 8010312:	f000 8092 	beq.w	801043a <_dtoa_r+0x90a>
 8010316:	f1c0 0320 	rsb	r3, r0, #32
 801031a:	2b04      	cmp	r3, #4
 801031c:	f340 808a 	ble.w	8010434 <_dtoa_r+0x904>
 8010320:	f1c0 001c 	rsb	r0, r0, #28
 8010324:	9b04      	ldr	r3, [sp, #16]
 8010326:	4403      	add	r3, r0
 8010328:	9304      	str	r3, [sp, #16]
 801032a:	9b05      	ldr	r3, [sp, #20]
 801032c:	4403      	add	r3, r0
 801032e:	4405      	add	r5, r0
 8010330:	9305      	str	r3, [sp, #20]
 8010332:	9b04      	ldr	r3, [sp, #16]
 8010334:	2b00      	cmp	r3, #0
 8010336:	dd07      	ble.n	8010348 <_dtoa_r+0x818>
 8010338:	ee18 1a10 	vmov	r1, s16
 801033c:	461a      	mov	r2, r3
 801033e:	4620      	mov	r0, r4
 8010340:	f001 f8ae 	bl	80114a0 <__lshift>
 8010344:	ee08 0a10 	vmov	s16, r0
 8010348:	9b05      	ldr	r3, [sp, #20]
 801034a:	2b00      	cmp	r3, #0
 801034c:	dd05      	ble.n	801035a <_dtoa_r+0x82a>
 801034e:	4631      	mov	r1, r6
 8010350:	461a      	mov	r2, r3
 8010352:	4620      	mov	r0, r4
 8010354:	f001 f8a4 	bl	80114a0 <__lshift>
 8010358:	4606      	mov	r6, r0
 801035a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801035c:	2b00      	cmp	r3, #0
 801035e:	d06e      	beq.n	801043e <_dtoa_r+0x90e>
 8010360:	ee18 0a10 	vmov	r0, s16
 8010364:	4631      	mov	r1, r6
 8010366:	f001 f90b 	bl	8011580 <__mcmp>
 801036a:	2800      	cmp	r0, #0
 801036c:	da67      	bge.n	801043e <_dtoa_r+0x90e>
 801036e:	9b00      	ldr	r3, [sp, #0]
 8010370:	3b01      	subs	r3, #1
 8010372:	ee18 1a10 	vmov	r1, s16
 8010376:	9300      	str	r3, [sp, #0]
 8010378:	220a      	movs	r2, #10
 801037a:	2300      	movs	r3, #0
 801037c:	4620      	mov	r0, r4
 801037e:	f000 fe95 	bl	80110ac <__multadd>
 8010382:	9b08      	ldr	r3, [sp, #32]
 8010384:	ee08 0a10 	vmov	s16, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	f000 81b1 	beq.w	80106f0 <_dtoa_r+0xbc0>
 801038e:	2300      	movs	r3, #0
 8010390:	4639      	mov	r1, r7
 8010392:	220a      	movs	r2, #10
 8010394:	4620      	mov	r0, r4
 8010396:	f000 fe89 	bl	80110ac <__multadd>
 801039a:	9b02      	ldr	r3, [sp, #8]
 801039c:	2b00      	cmp	r3, #0
 801039e:	4607      	mov	r7, r0
 80103a0:	f300 808e 	bgt.w	80104c0 <_dtoa_r+0x990>
 80103a4:	9b06      	ldr	r3, [sp, #24]
 80103a6:	2b02      	cmp	r3, #2
 80103a8:	dc51      	bgt.n	801044e <_dtoa_r+0x91e>
 80103aa:	e089      	b.n	80104c0 <_dtoa_r+0x990>
 80103ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80103ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80103b2:	e74b      	b.n	801024c <_dtoa_r+0x71c>
 80103b4:	9b03      	ldr	r3, [sp, #12]
 80103b6:	1e5e      	subs	r6, r3, #1
 80103b8:	9b07      	ldr	r3, [sp, #28]
 80103ba:	42b3      	cmp	r3, r6
 80103bc:	bfbf      	itttt	lt
 80103be:	9b07      	ldrlt	r3, [sp, #28]
 80103c0:	9607      	strlt	r6, [sp, #28]
 80103c2:	1af2      	sublt	r2, r6, r3
 80103c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80103c6:	bfb6      	itet	lt
 80103c8:	189b      	addlt	r3, r3, r2
 80103ca:	1b9e      	subge	r6, r3, r6
 80103cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80103ce:	9b03      	ldr	r3, [sp, #12]
 80103d0:	bfb8      	it	lt
 80103d2:	2600      	movlt	r6, #0
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	bfb7      	itett	lt
 80103d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80103dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80103e0:	1a9d      	sublt	r5, r3, r2
 80103e2:	2300      	movlt	r3, #0
 80103e4:	e734      	b.n	8010250 <_dtoa_r+0x720>
 80103e6:	9e07      	ldr	r6, [sp, #28]
 80103e8:	9d04      	ldr	r5, [sp, #16]
 80103ea:	9f08      	ldr	r7, [sp, #32]
 80103ec:	e73b      	b.n	8010266 <_dtoa_r+0x736>
 80103ee:	9a07      	ldr	r2, [sp, #28]
 80103f0:	e767      	b.n	80102c2 <_dtoa_r+0x792>
 80103f2:	9b06      	ldr	r3, [sp, #24]
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	dc18      	bgt.n	801042a <_dtoa_r+0x8fa>
 80103f8:	f1ba 0f00 	cmp.w	sl, #0
 80103fc:	d115      	bne.n	801042a <_dtoa_r+0x8fa>
 80103fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010402:	b993      	cbnz	r3, 801042a <_dtoa_r+0x8fa>
 8010404:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010408:	0d1b      	lsrs	r3, r3, #20
 801040a:	051b      	lsls	r3, r3, #20
 801040c:	b183      	cbz	r3, 8010430 <_dtoa_r+0x900>
 801040e:	9b04      	ldr	r3, [sp, #16]
 8010410:	3301      	adds	r3, #1
 8010412:	9304      	str	r3, [sp, #16]
 8010414:	9b05      	ldr	r3, [sp, #20]
 8010416:	3301      	adds	r3, #1
 8010418:	9305      	str	r3, [sp, #20]
 801041a:	f04f 0801 	mov.w	r8, #1
 801041e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010420:	2b00      	cmp	r3, #0
 8010422:	f47f af6a 	bne.w	80102fa <_dtoa_r+0x7ca>
 8010426:	2001      	movs	r0, #1
 8010428:	e76f      	b.n	801030a <_dtoa_r+0x7da>
 801042a:	f04f 0800 	mov.w	r8, #0
 801042e:	e7f6      	b.n	801041e <_dtoa_r+0x8ee>
 8010430:	4698      	mov	r8, r3
 8010432:	e7f4      	b.n	801041e <_dtoa_r+0x8ee>
 8010434:	f43f af7d 	beq.w	8010332 <_dtoa_r+0x802>
 8010438:	4618      	mov	r0, r3
 801043a:	301c      	adds	r0, #28
 801043c:	e772      	b.n	8010324 <_dtoa_r+0x7f4>
 801043e:	9b03      	ldr	r3, [sp, #12]
 8010440:	2b00      	cmp	r3, #0
 8010442:	dc37      	bgt.n	80104b4 <_dtoa_r+0x984>
 8010444:	9b06      	ldr	r3, [sp, #24]
 8010446:	2b02      	cmp	r3, #2
 8010448:	dd34      	ble.n	80104b4 <_dtoa_r+0x984>
 801044a:	9b03      	ldr	r3, [sp, #12]
 801044c:	9302      	str	r3, [sp, #8]
 801044e:	9b02      	ldr	r3, [sp, #8]
 8010450:	b96b      	cbnz	r3, 801046e <_dtoa_r+0x93e>
 8010452:	4631      	mov	r1, r6
 8010454:	2205      	movs	r2, #5
 8010456:	4620      	mov	r0, r4
 8010458:	f000 fe28 	bl	80110ac <__multadd>
 801045c:	4601      	mov	r1, r0
 801045e:	4606      	mov	r6, r0
 8010460:	ee18 0a10 	vmov	r0, s16
 8010464:	f001 f88c 	bl	8011580 <__mcmp>
 8010468:	2800      	cmp	r0, #0
 801046a:	f73f adbb 	bgt.w	800ffe4 <_dtoa_r+0x4b4>
 801046e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010470:	9d01      	ldr	r5, [sp, #4]
 8010472:	43db      	mvns	r3, r3
 8010474:	9300      	str	r3, [sp, #0]
 8010476:	f04f 0800 	mov.w	r8, #0
 801047a:	4631      	mov	r1, r6
 801047c:	4620      	mov	r0, r4
 801047e:	f000 fdf3 	bl	8011068 <_Bfree>
 8010482:	2f00      	cmp	r7, #0
 8010484:	f43f aea4 	beq.w	80101d0 <_dtoa_r+0x6a0>
 8010488:	f1b8 0f00 	cmp.w	r8, #0
 801048c:	d005      	beq.n	801049a <_dtoa_r+0x96a>
 801048e:	45b8      	cmp	r8, r7
 8010490:	d003      	beq.n	801049a <_dtoa_r+0x96a>
 8010492:	4641      	mov	r1, r8
 8010494:	4620      	mov	r0, r4
 8010496:	f000 fde7 	bl	8011068 <_Bfree>
 801049a:	4639      	mov	r1, r7
 801049c:	4620      	mov	r0, r4
 801049e:	f000 fde3 	bl	8011068 <_Bfree>
 80104a2:	e695      	b.n	80101d0 <_dtoa_r+0x6a0>
 80104a4:	2600      	movs	r6, #0
 80104a6:	4637      	mov	r7, r6
 80104a8:	e7e1      	b.n	801046e <_dtoa_r+0x93e>
 80104aa:	9700      	str	r7, [sp, #0]
 80104ac:	4637      	mov	r7, r6
 80104ae:	e599      	b.n	800ffe4 <_dtoa_r+0x4b4>
 80104b0:	40240000 	.word	0x40240000
 80104b4:	9b08      	ldr	r3, [sp, #32]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	f000 80ca 	beq.w	8010650 <_dtoa_r+0xb20>
 80104bc:	9b03      	ldr	r3, [sp, #12]
 80104be:	9302      	str	r3, [sp, #8]
 80104c0:	2d00      	cmp	r5, #0
 80104c2:	dd05      	ble.n	80104d0 <_dtoa_r+0x9a0>
 80104c4:	4639      	mov	r1, r7
 80104c6:	462a      	mov	r2, r5
 80104c8:	4620      	mov	r0, r4
 80104ca:	f000 ffe9 	bl	80114a0 <__lshift>
 80104ce:	4607      	mov	r7, r0
 80104d0:	f1b8 0f00 	cmp.w	r8, #0
 80104d4:	d05b      	beq.n	801058e <_dtoa_r+0xa5e>
 80104d6:	6879      	ldr	r1, [r7, #4]
 80104d8:	4620      	mov	r0, r4
 80104da:	f000 fd85 	bl	8010fe8 <_Balloc>
 80104de:	4605      	mov	r5, r0
 80104e0:	b928      	cbnz	r0, 80104ee <_dtoa_r+0x9be>
 80104e2:	4b87      	ldr	r3, [pc, #540]	; (8010700 <_dtoa_r+0xbd0>)
 80104e4:	4602      	mov	r2, r0
 80104e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80104ea:	f7ff bb3b 	b.w	800fb64 <_dtoa_r+0x34>
 80104ee:	693a      	ldr	r2, [r7, #16]
 80104f0:	3202      	adds	r2, #2
 80104f2:	0092      	lsls	r2, r2, #2
 80104f4:	f107 010c 	add.w	r1, r7, #12
 80104f8:	300c      	adds	r0, #12
 80104fa:	f7fd fbb4 	bl	800dc66 <memcpy>
 80104fe:	2201      	movs	r2, #1
 8010500:	4629      	mov	r1, r5
 8010502:	4620      	mov	r0, r4
 8010504:	f000 ffcc 	bl	80114a0 <__lshift>
 8010508:	9b01      	ldr	r3, [sp, #4]
 801050a:	f103 0901 	add.w	r9, r3, #1
 801050e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010512:	4413      	add	r3, r2
 8010514:	9305      	str	r3, [sp, #20]
 8010516:	f00a 0301 	and.w	r3, sl, #1
 801051a:	46b8      	mov	r8, r7
 801051c:	9304      	str	r3, [sp, #16]
 801051e:	4607      	mov	r7, r0
 8010520:	4631      	mov	r1, r6
 8010522:	ee18 0a10 	vmov	r0, s16
 8010526:	f7ff fa75 	bl	800fa14 <quorem>
 801052a:	4641      	mov	r1, r8
 801052c:	9002      	str	r0, [sp, #8]
 801052e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010532:	ee18 0a10 	vmov	r0, s16
 8010536:	f001 f823 	bl	8011580 <__mcmp>
 801053a:	463a      	mov	r2, r7
 801053c:	9003      	str	r0, [sp, #12]
 801053e:	4631      	mov	r1, r6
 8010540:	4620      	mov	r0, r4
 8010542:	f001 f839 	bl	80115b8 <__mdiff>
 8010546:	68c2      	ldr	r2, [r0, #12]
 8010548:	f109 3bff 	add.w	fp, r9, #4294967295
 801054c:	4605      	mov	r5, r0
 801054e:	bb02      	cbnz	r2, 8010592 <_dtoa_r+0xa62>
 8010550:	4601      	mov	r1, r0
 8010552:	ee18 0a10 	vmov	r0, s16
 8010556:	f001 f813 	bl	8011580 <__mcmp>
 801055a:	4602      	mov	r2, r0
 801055c:	4629      	mov	r1, r5
 801055e:	4620      	mov	r0, r4
 8010560:	9207      	str	r2, [sp, #28]
 8010562:	f000 fd81 	bl	8011068 <_Bfree>
 8010566:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801056a:	ea43 0102 	orr.w	r1, r3, r2
 801056e:	9b04      	ldr	r3, [sp, #16]
 8010570:	430b      	orrs	r3, r1
 8010572:	464d      	mov	r5, r9
 8010574:	d10f      	bne.n	8010596 <_dtoa_r+0xa66>
 8010576:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801057a:	d02a      	beq.n	80105d2 <_dtoa_r+0xaa2>
 801057c:	9b03      	ldr	r3, [sp, #12]
 801057e:	2b00      	cmp	r3, #0
 8010580:	dd02      	ble.n	8010588 <_dtoa_r+0xa58>
 8010582:	9b02      	ldr	r3, [sp, #8]
 8010584:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010588:	f88b a000 	strb.w	sl, [fp]
 801058c:	e775      	b.n	801047a <_dtoa_r+0x94a>
 801058e:	4638      	mov	r0, r7
 8010590:	e7ba      	b.n	8010508 <_dtoa_r+0x9d8>
 8010592:	2201      	movs	r2, #1
 8010594:	e7e2      	b.n	801055c <_dtoa_r+0xa2c>
 8010596:	9b03      	ldr	r3, [sp, #12]
 8010598:	2b00      	cmp	r3, #0
 801059a:	db04      	blt.n	80105a6 <_dtoa_r+0xa76>
 801059c:	9906      	ldr	r1, [sp, #24]
 801059e:	430b      	orrs	r3, r1
 80105a0:	9904      	ldr	r1, [sp, #16]
 80105a2:	430b      	orrs	r3, r1
 80105a4:	d122      	bne.n	80105ec <_dtoa_r+0xabc>
 80105a6:	2a00      	cmp	r2, #0
 80105a8:	ddee      	ble.n	8010588 <_dtoa_r+0xa58>
 80105aa:	ee18 1a10 	vmov	r1, s16
 80105ae:	2201      	movs	r2, #1
 80105b0:	4620      	mov	r0, r4
 80105b2:	f000 ff75 	bl	80114a0 <__lshift>
 80105b6:	4631      	mov	r1, r6
 80105b8:	ee08 0a10 	vmov	s16, r0
 80105bc:	f000 ffe0 	bl	8011580 <__mcmp>
 80105c0:	2800      	cmp	r0, #0
 80105c2:	dc03      	bgt.n	80105cc <_dtoa_r+0xa9c>
 80105c4:	d1e0      	bne.n	8010588 <_dtoa_r+0xa58>
 80105c6:	f01a 0f01 	tst.w	sl, #1
 80105ca:	d0dd      	beq.n	8010588 <_dtoa_r+0xa58>
 80105cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80105d0:	d1d7      	bne.n	8010582 <_dtoa_r+0xa52>
 80105d2:	2339      	movs	r3, #57	; 0x39
 80105d4:	f88b 3000 	strb.w	r3, [fp]
 80105d8:	462b      	mov	r3, r5
 80105da:	461d      	mov	r5, r3
 80105dc:	3b01      	subs	r3, #1
 80105de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80105e2:	2a39      	cmp	r2, #57	; 0x39
 80105e4:	d071      	beq.n	80106ca <_dtoa_r+0xb9a>
 80105e6:	3201      	adds	r2, #1
 80105e8:	701a      	strb	r2, [r3, #0]
 80105ea:	e746      	b.n	801047a <_dtoa_r+0x94a>
 80105ec:	2a00      	cmp	r2, #0
 80105ee:	dd07      	ble.n	8010600 <_dtoa_r+0xad0>
 80105f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80105f4:	d0ed      	beq.n	80105d2 <_dtoa_r+0xaa2>
 80105f6:	f10a 0301 	add.w	r3, sl, #1
 80105fa:	f88b 3000 	strb.w	r3, [fp]
 80105fe:	e73c      	b.n	801047a <_dtoa_r+0x94a>
 8010600:	9b05      	ldr	r3, [sp, #20]
 8010602:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010606:	4599      	cmp	r9, r3
 8010608:	d047      	beq.n	801069a <_dtoa_r+0xb6a>
 801060a:	ee18 1a10 	vmov	r1, s16
 801060e:	2300      	movs	r3, #0
 8010610:	220a      	movs	r2, #10
 8010612:	4620      	mov	r0, r4
 8010614:	f000 fd4a 	bl	80110ac <__multadd>
 8010618:	45b8      	cmp	r8, r7
 801061a:	ee08 0a10 	vmov	s16, r0
 801061e:	f04f 0300 	mov.w	r3, #0
 8010622:	f04f 020a 	mov.w	r2, #10
 8010626:	4641      	mov	r1, r8
 8010628:	4620      	mov	r0, r4
 801062a:	d106      	bne.n	801063a <_dtoa_r+0xb0a>
 801062c:	f000 fd3e 	bl	80110ac <__multadd>
 8010630:	4680      	mov	r8, r0
 8010632:	4607      	mov	r7, r0
 8010634:	f109 0901 	add.w	r9, r9, #1
 8010638:	e772      	b.n	8010520 <_dtoa_r+0x9f0>
 801063a:	f000 fd37 	bl	80110ac <__multadd>
 801063e:	4639      	mov	r1, r7
 8010640:	4680      	mov	r8, r0
 8010642:	2300      	movs	r3, #0
 8010644:	220a      	movs	r2, #10
 8010646:	4620      	mov	r0, r4
 8010648:	f000 fd30 	bl	80110ac <__multadd>
 801064c:	4607      	mov	r7, r0
 801064e:	e7f1      	b.n	8010634 <_dtoa_r+0xb04>
 8010650:	9b03      	ldr	r3, [sp, #12]
 8010652:	9302      	str	r3, [sp, #8]
 8010654:	9d01      	ldr	r5, [sp, #4]
 8010656:	ee18 0a10 	vmov	r0, s16
 801065a:	4631      	mov	r1, r6
 801065c:	f7ff f9da 	bl	800fa14 <quorem>
 8010660:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010664:	9b01      	ldr	r3, [sp, #4]
 8010666:	f805 ab01 	strb.w	sl, [r5], #1
 801066a:	1aea      	subs	r2, r5, r3
 801066c:	9b02      	ldr	r3, [sp, #8]
 801066e:	4293      	cmp	r3, r2
 8010670:	dd09      	ble.n	8010686 <_dtoa_r+0xb56>
 8010672:	ee18 1a10 	vmov	r1, s16
 8010676:	2300      	movs	r3, #0
 8010678:	220a      	movs	r2, #10
 801067a:	4620      	mov	r0, r4
 801067c:	f000 fd16 	bl	80110ac <__multadd>
 8010680:	ee08 0a10 	vmov	s16, r0
 8010684:	e7e7      	b.n	8010656 <_dtoa_r+0xb26>
 8010686:	9b02      	ldr	r3, [sp, #8]
 8010688:	2b00      	cmp	r3, #0
 801068a:	bfc8      	it	gt
 801068c:	461d      	movgt	r5, r3
 801068e:	9b01      	ldr	r3, [sp, #4]
 8010690:	bfd8      	it	le
 8010692:	2501      	movle	r5, #1
 8010694:	441d      	add	r5, r3
 8010696:	f04f 0800 	mov.w	r8, #0
 801069a:	ee18 1a10 	vmov	r1, s16
 801069e:	2201      	movs	r2, #1
 80106a0:	4620      	mov	r0, r4
 80106a2:	f000 fefd 	bl	80114a0 <__lshift>
 80106a6:	4631      	mov	r1, r6
 80106a8:	ee08 0a10 	vmov	s16, r0
 80106ac:	f000 ff68 	bl	8011580 <__mcmp>
 80106b0:	2800      	cmp	r0, #0
 80106b2:	dc91      	bgt.n	80105d8 <_dtoa_r+0xaa8>
 80106b4:	d102      	bne.n	80106bc <_dtoa_r+0xb8c>
 80106b6:	f01a 0f01 	tst.w	sl, #1
 80106ba:	d18d      	bne.n	80105d8 <_dtoa_r+0xaa8>
 80106bc:	462b      	mov	r3, r5
 80106be:	461d      	mov	r5, r3
 80106c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80106c4:	2a30      	cmp	r2, #48	; 0x30
 80106c6:	d0fa      	beq.n	80106be <_dtoa_r+0xb8e>
 80106c8:	e6d7      	b.n	801047a <_dtoa_r+0x94a>
 80106ca:	9a01      	ldr	r2, [sp, #4]
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d184      	bne.n	80105da <_dtoa_r+0xaaa>
 80106d0:	9b00      	ldr	r3, [sp, #0]
 80106d2:	3301      	adds	r3, #1
 80106d4:	9300      	str	r3, [sp, #0]
 80106d6:	2331      	movs	r3, #49	; 0x31
 80106d8:	7013      	strb	r3, [r2, #0]
 80106da:	e6ce      	b.n	801047a <_dtoa_r+0x94a>
 80106dc:	4b09      	ldr	r3, [pc, #36]	; (8010704 <_dtoa_r+0xbd4>)
 80106de:	f7ff ba95 	b.w	800fc0c <_dtoa_r+0xdc>
 80106e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	f47f aa6e 	bne.w	800fbc6 <_dtoa_r+0x96>
 80106ea:	4b07      	ldr	r3, [pc, #28]	; (8010708 <_dtoa_r+0xbd8>)
 80106ec:	f7ff ba8e 	b.w	800fc0c <_dtoa_r+0xdc>
 80106f0:	9b02      	ldr	r3, [sp, #8]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	dcae      	bgt.n	8010654 <_dtoa_r+0xb24>
 80106f6:	9b06      	ldr	r3, [sp, #24]
 80106f8:	2b02      	cmp	r3, #2
 80106fa:	f73f aea8 	bgt.w	801044e <_dtoa_r+0x91e>
 80106fe:	e7a9      	b.n	8010654 <_dtoa_r+0xb24>
 8010700:	080151b8 	.word	0x080151b8
 8010704:	08014fbc 	.word	0x08014fbc
 8010708:	08015139 	.word	0x08015139

0801070c <__sflush_r>:
 801070c:	898a      	ldrh	r2, [r1, #12]
 801070e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010712:	4605      	mov	r5, r0
 8010714:	0710      	lsls	r0, r2, #28
 8010716:	460c      	mov	r4, r1
 8010718:	d458      	bmi.n	80107cc <__sflush_r+0xc0>
 801071a:	684b      	ldr	r3, [r1, #4]
 801071c:	2b00      	cmp	r3, #0
 801071e:	dc05      	bgt.n	801072c <__sflush_r+0x20>
 8010720:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010722:	2b00      	cmp	r3, #0
 8010724:	dc02      	bgt.n	801072c <__sflush_r+0x20>
 8010726:	2000      	movs	r0, #0
 8010728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801072c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801072e:	2e00      	cmp	r6, #0
 8010730:	d0f9      	beq.n	8010726 <__sflush_r+0x1a>
 8010732:	2300      	movs	r3, #0
 8010734:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010738:	682f      	ldr	r7, [r5, #0]
 801073a:	602b      	str	r3, [r5, #0]
 801073c:	d032      	beq.n	80107a4 <__sflush_r+0x98>
 801073e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010740:	89a3      	ldrh	r3, [r4, #12]
 8010742:	075a      	lsls	r2, r3, #29
 8010744:	d505      	bpl.n	8010752 <__sflush_r+0x46>
 8010746:	6863      	ldr	r3, [r4, #4]
 8010748:	1ac0      	subs	r0, r0, r3
 801074a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801074c:	b10b      	cbz	r3, 8010752 <__sflush_r+0x46>
 801074e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010750:	1ac0      	subs	r0, r0, r3
 8010752:	2300      	movs	r3, #0
 8010754:	4602      	mov	r2, r0
 8010756:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010758:	6a21      	ldr	r1, [r4, #32]
 801075a:	4628      	mov	r0, r5
 801075c:	47b0      	blx	r6
 801075e:	1c43      	adds	r3, r0, #1
 8010760:	89a3      	ldrh	r3, [r4, #12]
 8010762:	d106      	bne.n	8010772 <__sflush_r+0x66>
 8010764:	6829      	ldr	r1, [r5, #0]
 8010766:	291d      	cmp	r1, #29
 8010768:	d82c      	bhi.n	80107c4 <__sflush_r+0xb8>
 801076a:	4a2a      	ldr	r2, [pc, #168]	; (8010814 <__sflush_r+0x108>)
 801076c:	40ca      	lsrs	r2, r1
 801076e:	07d6      	lsls	r6, r2, #31
 8010770:	d528      	bpl.n	80107c4 <__sflush_r+0xb8>
 8010772:	2200      	movs	r2, #0
 8010774:	6062      	str	r2, [r4, #4]
 8010776:	04d9      	lsls	r1, r3, #19
 8010778:	6922      	ldr	r2, [r4, #16]
 801077a:	6022      	str	r2, [r4, #0]
 801077c:	d504      	bpl.n	8010788 <__sflush_r+0x7c>
 801077e:	1c42      	adds	r2, r0, #1
 8010780:	d101      	bne.n	8010786 <__sflush_r+0x7a>
 8010782:	682b      	ldr	r3, [r5, #0]
 8010784:	b903      	cbnz	r3, 8010788 <__sflush_r+0x7c>
 8010786:	6560      	str	r0, [r4, #84]	; 0x54
 8010788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801078a:	602f      	str	r7, [r5, #0]
 801078c:	2900      	cmp	r1, #0
 801078e:	d0ca      	beq.n	8010726 <__sflush_r+0x1a>
 8010790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010794:	4299      	cmp	r1, r3
 8010796:	d002      	beq.n	801079e <__sflush_r+0x92>
 8010798:	4628      	mov	r0, r5
 801079a:	f001 f8fd 	bl	8011998 <_free_r>
 801079e:	2000      	movs	r0, #0
 80107a0:	6360      	str	r0, [r4, #52]	; 0x34
 80107a2:	e7c1      	b.n	8010728 <__sflush_r+0x1c>
 80107a4:	6a21      	ldr	r1, [r4, #32]
 80107a6:	2301      	movs	r3, #1
 80107a8:	4628      	mov	r0, r5
 80107aa:	47b0      	blx	r6
 80107ac:	1c41      	adds	r1, r0, #1
 80107ae:	d1c7      	bne.n	8010740 <__sflush_r+0x34>
 80107b0:	682b      	ldr	r3, [r5, #0]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d0c4      	beq.n	8010740 <__sflush_r+0x34>
 80107b6:	2b1d      	cmp	r3, #29
 80107b8:	d001      	beq.n	80107be <__sflush_r+0xb2>
 80107ba:	2b16      	cmp	r3, #22
 80107bc:	d101      	bne.n	80107c2 <__sflush_r+0xb6>
 80107be:	602f      	str	r7, [r5, #0]
 80107c0:	e7b1      	b.n	8010726 <__sflush_r+0x1a>
 80107c2:	89a3      	ldrh	r3, [r4, #12]
 80107c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107c8:	81a3      	strh	r3, [r4, #12]
 80107ca:	e7ad      	b.n	8010728 <__sflush_r+0x1c>
 80107cc:	690f      	ldr	r7, [r1, #16]
 80107ce:	2f00      	cmp	r7, #0
 80107d0:	d0a9      	beq.n	8010726 <__sflush_r+0x1a>
 80107d2:	0793      	lsls	r3, r2, #30
 80107d4:	680e      	ldr	r6, [r1, #0]
 80107d6:	bf08      	it	eq
 80107d8:	694b      	ldreq	r3, [r1, #20]
 80107da:	600f      	str	r7, [r1, #0]
 80107dc:	bf18      	it	ne
 80107de:	2300      	movne	r3, #0
 80107e0:	eba6 0807 	sub.w	r8, r6, r7
 80107e4:	608b      	str	r3, [r1, #8]
 80107e6:	f1b8 0f00 	cmp.w	r8, #0
 80107ea:	dd9c      	ble.n	8010726 <__sflush_r+0x1a>
 80107ec:	6a21      	ldr	r1, [r4, #32]
 80107ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80107f0:	4643      	mov	r3, r8
 80107f2:	463a      	mov	r2, r7
 80107f4:	4628      	mov	r0, r5
 80107f6:	47b0      	blx	r6
 80107f8:	2800      	cmp	r0, #0
 80107fa:	dc06      	bgt.n	801080a <__sflush_r+0xfe>
 80107fc:	89a3      	ldrh	r3, [r4, #12]
 80107fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010802:	81a3      	strh	r3, [r4, #12]
 8010804:	f04f 30ff 	mov.w	r0, #4294967295
 8010808:	e78e      	b.n	8010728 <__sflush_r+0x1c>
 801080a:	4407      	add	r7, r0
 801080c:	eba8 0800 	sub.w	r8, r8, r0
 8010810:	e7e9      	b.n	80107e6 <__sflush_r+0xda>
 8010812:	bf00      	nop
 8010814:	20400001 	.word	0x20400001

08010818 <_fflush_r>:
 8010818:	b538      	push	{r3, r4, r5, lr}
 801081a:	690b      	ldr	r3, [r1, #16]
 801081c:	4605      	mov	r5, r0
 801081e:	460c      	mov	r4, r1
 8010820:	b913      	cbnz	r3, 8010828 <_fflush_r+0x10>
 8010822:	2500      	movs	r5, #0
 8010824:	4628      	mov	r0, r5
 8010826:	bd38      	pop	{r3, r4, r5, pc}
 8010828:	b118      	cbz	r0, 8010832 <_fflush_r+0x1a>
 801082a:	6983      	ldr	r3, [r0, #24]
 801082c:	b90b      	cbnz	r3, 8010832 <_fflush_r+0x1a>
 801082e:	f7fd f955 	bl	800dadc <__sinit>
 8010832:	4b14      	ldr	r3, [pc, #80]	; (8010884 <_fflush_r+0x6c>)
 8010834:	429c      	cmp	r4, r3
 8010836:	d11b      	bne.n	8010870 <_fflush_r+0x58>
 8010838:	686c      	ldr	r4, [r5, #4]
 801083a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d0ef      	beq.n	8010822 <_fflush_r+0xa>
 8010842:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010844:	07d0      	lsls	r0, r2, #31
 8010846:	d404      	bmi.n	8010852 <_fflush_r+0x3a>
 8010848:	0599      	lsls	r1, r3, #22
 801084a:	d402      	bmi.n	8010852 <_fflush_r+0x3a>
 801084c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801084e:	f7fd fa08 	bl	800dc62 <__retarget_lock_acquire_recursive>
 8010852:	4628      	mov	r0, r5
 8010854:	4621      	mov	r1, r4
 8010856:	f7ff ff59 	bl	801070c <__sflush_r>
 801085a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801085c:	07da      	lsls	r2, r3, #31
 801085e:	4605      	mov	r5, r0
 8010860:	d4e0      	bmi.n	8010824 <_fflush_r+0xc>
 8010862:	89a3      	ldrh	r3, [r4, #12]
 8010864:	059b      	lsls	r3, r3, #22
 8010866:	d4dd      	bmi.n	8010824 <_fflush_r+0xc>
 8010868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801086a:	f7fd f9fb 	bl	800dc64 <__retarget_lock_release_recursive>
 801086e:	e7d9      	b.n	8010824 <_fflush_r+0xc>
 8010870:	4b05      	ldr	r3, [pc, #20]	; (8010888 <_fflush_r+0x70>)
 8010872:	429c      	cmp	r4, r3
 8010874:	d101      	bne.n	801087a <_fflush_r+0x62>
 8010876:	68ac      	ldr	r4, [r5, #8]
 8010878:	e7df      	b.n	801083a <_fflush_r+0x22>
 801087a:	4b04      	ldr	r3, [pc, #16]	; (801088c <_fflush_r+0x74>)
 801087c:	429c      	cmp	r4, r3
 801087e:	bf08      	it	eq
 8010880:	68ec      	ldreq	r4, [r5, #12]
 8010882:	e7da      	b.n	801083a <_fflush_r+0x22>
 8010884:	08014f68 	.word	0x08014f68
 8010888:	08014f88 	.word	0x08014f88
 801088c:	08014f48 	.word	0x08014f48

08010890 <rshift>:
 8010890:	6903      	ldr	r3, [r0, #16]
 8010892:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010896:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801089a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801089e:	f100 0414 	add.w	r4, r0, #20
 80108a2:	dd45      	ble.n	8010930 <rshift+0xa0>
 80108a4:	f011 011f 	ands.w	r1, r1, #31
 80108a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80108ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80108b0:	d10c      	bne.n	80108cc <rshift+0x3c>
 80108b2:	f100 0710 	add.w	r7, r0, #16
 80108b6:	4629      	mov	r1, r5
 80108b8:	42b1      	cmp	r1, r6
 80108ba:	d334      	bcc.n	8010926 <rshift+0x96>
 80108bc:	1a9b      	subs	r3, r3, r2
 80108be:	009b      	lsls	r3, r3, #2
 80108c0:	1eea      	subs	r2, r5, #3
 80108c2:	4296      	cmp	r6, r2
 80108c4:	bf38      	it	cc
 80108c6:	2300      	movcc	r3, #0
 80108c8:	4423      	add	r3, r4
 80108ca:	e015      	b.n	80108f8 <rshift+0x68>
 80108cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80108d0:	f1c1 0820 	rsb	r8, r1, #32
 80108d4:	40cf      	lsrs	r7, r1
 80108d6:	f105 0e04 	add.w	lr, r5, #4
 80108da:	46a1      	mov	r9, r4
 80108dc:	4576      	cmp	r6, lr
 80108de:	46f4      	mov	ip, lr
 80108e0:	d815      	bhi.n	801090e <rshift+0x7e>
 80108e2:	1a9a      	subs	r2, r3, r2
 80108e4:	0092      	lsls	r2, r2, #2
 80108e6:	3a04      	subs	r2, #4
 80108e8:	3501      	adds	r5, #1
 80108ea:	42ae      	cmp	r6, r5
 80108ec:	bf38      	it	cc
 80108ee:	2200      	movcc	r2, #0
 80108f0:	18a3      	adds	r3, r4, r2
 80108f2:	50a7      	str	r7, [r4, r2]
 80108f4:	b107      	cbz	r7, 80108f8 <rshift+0x68>
 80108f6:	3304      	adds	r3, #4
 80108f8:	1b1a      	subs	r2, r3, r4
 80108fa:	42a3      	cmp	r3, r4
 80108fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010900:	bf08      	it	eq
 8010902:	2300      	moveq	r3, #0
 8010904:	6102      	str	r2, [r0, #16]
 8010906:	bf08      	it	eq
 8010908:	6143      	streq	r3, [r0, #20]
 801090a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801090e:	f8dc c000 	ldr.w	ip, [ip]
 8010912:	fa0c fc08 	lsl.w	ip, ip, r8
 8010916:	ea4c 0707 	orr.w	r7, ip, r7
 801091a:	f849 7b04 	str.w	r7, [r9], #4
 801091e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010922:	40cf      	lsrs	r7, r1
 8010924:	e7da      	b.n	80108dc <rshift+0x4c>
 8010926:	f851 cb04 	ldr.w	ip, [r1], #4
 801092a:	f847 cf04 	str.w	ip, [r7, #4]!
 801092e:	e7c3      	b.n	80108b8 <rshift+0x28>
 8010930:	4623      	mov	r3, r4
 8010932:	e7e1      	b.n	80108f8 <rshift+0x68>

08010934 <__hexdig_fun>:
 8010934:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010938:	2b09      	cmp	r3, #9
 801093a:	d802      	bhi.n	8010942 <__hexdig_fun+0xe>
 801093c:	3820      	subs	r0, #32
 801093e:	b2c0      	uxtb	r0, r0
 8010940:	4770      	bx	lr
 8010942:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010946:	2b05      	cmp	r3, #5
 8010948:	d801      	bhi.n	801094e <__hexdig_fun+0x1a>
 801094a:	3847      	subs	r0, #71	; 0x47
 801094c:	e7f7      	b.n	801093e <__hexdig_fun+0xa>
 801094e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010952:	2b05      	cmp	r3, #5
 8010954:	d801      	bhi.n	801095a <__hexdig_fun+0x26>
 8010956:	3827      	subs	r0, #39	; 0x27
 8010958:	e7f1      	b.n	801093e <__hexdig_fun+0xa>
 801095a:	2000      	movs	r0, #0
 801095c:	4770      	bx	lr
	...

08010960 <__gethex>:
 8010960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010964:	ed2d 8b02 	vpush	{d8}
 8010968:	b089      	sub	sp, #36	; 0x24
 801096a:	ee08 0a10 	vmov	s16, r0
 801096e:	9304      	str	r3, [sp, #16]
 8010970:	4bb4      	ldr	r3, [pc, #720]	; (8010c44 <__gethex+0x2e4>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	9301      	str	r3, [sp, #4]
 8010976:	4618      	mov	r0, r3
 8010978:	468b      	mov	fp, r1
 801097a:	4690      	mov	r8, r2
 801097c:	f7ef fc30 	bl	80001e0 <strlen>
 8010980:	9b01      	ldr	r3, [sp, #4]
 8010982:	f8db 2000 	ldr.w	r2, [fp]
 8010986:	4403      	add	r3, r0
 8010988:	4682      	mov	sl, r0
 801098a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801098e:	9305      	str	r3, [sp, #20]
 8010990:	1c93      	adds	r3, r2, #2
 8010992:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010996:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801099a:	32fe      	adds	r2, #254	; 0xfe
 801099c:	18d1      	adds	r1, r2, r3
 801099e:	461f      	mov	r7, r3
 80109a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80109a4:	9100      	str	r1, [sp, #0]
 80109a6:	2830      	cmp	r0, #48	; 0x30
 80109a8:	d0f8      	beq.n	801099c <__gethex+0x3c>
 80109aa:	f7ff ffc3 	bl	8010934 <__hexdig_fun>
 80109ae:	4604      	mov	r4, r0
 80109b0:	2800      	cmp	r0, #0
 80109b2:	d13a      	bne.n	8010a2a <__gethex+0xca>
 80109b4:	9901      	ldr	r1, [sp, #4]
 80109b6:	4652      	mov	r2, sl
 80109b8:	4638      	mov	r0, r7
 80109ba:	f001 f9b1 	bl	8011d20 <strncmp>
 80109be:	4605      	mov	r5, r0
 80109c0:	2800      	cmp	r0, #0
 80109c2:	d168      	bne.n	8010a96 <__gethex+0x136>
 80109c4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80109c8:	eb07 060a 	add.w	r6, r7, sl
 80109cc:	f7ff ffb2 	bl	8010934 <__hexdig_fun>
 80109d0:	2800      	cmp	r0, #0
 80109d2:	d062      	beq.n	8010a9a <__gethex+0x13a>
 80109d4:	4633      	mov	r3, r6
 80109d6:	7818      	ldrb	r0, [r3, #0]
 80109d8:	2830      	cmp	r0, #48	; 0x30
 80109da:	461f      	mov	r7, r3
 80109dc:	f103 0301 	add.w	r3, r3, #1
 80109e0:	d0f9      	beq.n	80109d6 <__gethex+0x76>
 80109e2:	f7ff ffa7 	bl	8010934 <__hexdig_fun>
 80109e6:	2301      	movs	r3, #1
 80109e8:	fab0 f480 	clz	r4, r0
 80109ec:	0964      	lsrs	r4, r4, #5
 80109ee:	4635      	mov	r5, r6
 80109f0:	9300      	str	r3, [sp, #0]
 80109f2:	463a      	mov	r2, r7
 80109f4:	4616      	mov	r6, r2
 80109f6:	3201      	adds	r2, #1
 80109f8:	7830      	ldrb	r0, [r6, #0]
 80109fa:	f7ff ff9b 	bl	8010934 <__hexdig_fun>
 80109fe:	2800      	cmp	r0, #0
 8010a00:	d1f8      	bne.n	80109f4 <__gethex+0x94>
 8010a02:	9901      	ldr	r1, [sp, #4]
 8010a04:	4652      	mov	r2, sl
 8010a06:	4630      	mov	r0, r6
 8010a08:	f001 f98a 	bl	8011d20 <strncmp>
 8010a0c:	b980      	cbnz	r0, 8010a30 <__gethex+0xd0>
 8010a0e:	b94d      	cbnz	r5, 8010a24 <__gethex+0xc4>
 8010a10:	eb06 050a 	add.w	r5, r6, sl
 8010a14:	462a      	mov	r2, r5
 8010a16:	4616      	mov	r6, r2
 8010a18:	3201      	adds	r2, #1
 8010a1a:	7830      	ldrb	r0, [r6, #0]
 8010a1c:	f7ff ff8a 	bl	8010934 <__hexdig_fun>
 8010a20:	2800      	cmp	r0, #0
 8010a22:	d1f8      	bne.n	8010a16 <__gethex+0xb6>
 8010a24:	1bad      	subs	r5, r5, r6
 8010a26:	00ad      	lsls	r5, r5, #2
 8010a28:	e004      	b.n	8010a34 <__gethex+0xd4>
 8010a2a:	2400      	movs	r4, #0
 8010a2c:	4625      	mov	r5, r4
 8010a2e:	e7e0      	b.n	80109f2 <__gethex+0x92>
 8010a30:	2d00      	cmp	r5, #0
 8010a32:	d1f7      	bne.n	8010a24 <__gethex+0xc4>
 8010a34:	7833      	ldrb	r3, [r6, #0]
 8010a36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010a3a:	2b50      	cmp	r3, #80	; 0x50
 8010a3c:	d13b      	bne.n	8010ab6 <__gethex+0x156>
 8010a3e:	7873      	ldrb	r3, [r6, #1]
 8010a40:	2b2b      	cmp	r3, #43	; 0x2b
 8010a42:	d02c      	beq.n	8010a9e <__gethex+0x13e>
 8010a44:	2b2d      	cmp	r3, #45	; 0x2d
 8010a46:	d02e      	beq.n	8010aa6 <__gethex+0x146>
 8010a48:	1c71      	adds	r1, r6, #1
 8010a4a:	f04f 0900 	mov.w	r9, #0
 8010a4e:	7808      	ldrb	r0, [r1, #0]
 8010a50:	f7ff ff70 	bl	8010934 <__hexdig_fun>
 8010a54:	1e43      	subs	r3, r0, #1
 8010a56:	b2db      	uxtb	r3, r3
 8010a58:	2b18      	cmp	r3, #24
 8010a5a:	d82c      	bhi.n	8010ab6 <__gethex+0x156>
 8010a5c:	f1a0 0210 	sub.w	r2, r0, #16
 8010a60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010a64:	f7ff ff66 	bl	8010934 <__hexdig_fun>
 8010a68:	1e43      	subs	r3, r0, #1
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	2b18      	cmp	r3, #24
 8010a6e:	d91d      	bls.n	8010aac <__gethex+0x14c>
 8010a70:	f1b9 0f00 	cmp.w	r9, #0
 8010a74:	d000      	beq.n	8010a78 <__gethex+0x118>
 8010a76:	4252      	negs	r2, r2
 8010a78:	4415      	add	r5, r2
 8010a7a:	f8cb 1000 	str.w	r1, [fp]
 8010a7e:	b1e4      	cbz	r4, 8010aba <__gethex+0x15a>
 8010a80:	9b00      	ldr	r3, [sp, #0]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	bf14      	ite	ne
 8010a86:	2700      	movne	r7, #0
 8010a88:	2706      	moveq	r7, #6
 8010a8a:	4638      	mov	r0, r7
 8010a8c:	b009      	add	sp, #36	; 0x24
 8010a8e:	ecbd 8b02 	vpop	{d8}
 8010a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a96:	463e      	mov	r6, r7
 8010a98:	4625      	mov	r5, r4
 8010a9a:	2401      	movs	r4, #1
 8010a9c:	e7ca      	b.n	8010a34 <__gethex+0xd4>
 8010a9e:	f04f 0900 	mov.w	r9, #0
 8010aa2:	1cb1      	adds	r1, r6, #2
 8010aa4:	e7d3      	b.n	8010a4e <__gethex+0xee>
 8010aa6:	f04f 0901 	mov.w	r9, #1
 8010aaa:	e7fa      	b.n	8010aa2 <__gethex+0x142>
 8010aac:	230a      	movs	r3, #10
 8010aae:	fb03 0202 	mla	r2, r3, r2, r0
 8010ab2:	3a10      	subs	r2, #16
 8010ab4:	e7d4      	b.n	8010a60 <__gethex+0x100>
 8010ab6:	4631      	mov	r1, r6
 8010ab8:	e7df      	b.n	8010a7a <__gethex+0x11a>
 8010aba:	1bf3      	subs	r3, r6, r7
 8010abc:	3b01      	subs	r3, #1
 8010abe:	4621      	mov	r1, r4
 8010ac0:	2b07      	cmp	r3, #7
 8010ac2:	dc0b      	bgt.n	8010adc <__gethex+0x17c>
 8010ac4:	ee18 0a10 	vmov	r0, s16
 8010ac8:	f000 fa8e 	bl	8010fe8 <_Balloc>
 8010acc:	4604      	mov	r4, r0
 8010ace:	b940      	cbnz	r0, 8010ae2 <__gethex+0x182>
 8010ad0:	4b5d      	ldr	r3, [pc, #372]	; (8010c48 <__gethex+0x2e8>)
 8010ad2:	4602      	mov	r2, r0
 8010ad4:	21de      	movs	r1, #222	; 0xde
 8010ad6:	485d      	ldr	r0, [pc, #372]	; (8010c4c <__gethex+0x2ec>)
 8010ad8:	f001 f944 	bl	8011d64 <__assert_func>
 8010adc:	3101      	adds	r1, #1
 8010ade:	105b      	asrs	r3, r3, #1
 8010ae0:	e7ee      	b.n	8010ac0 <__gethex+0x160>
 8010ae2:	f100 0914 	add.w	r9, r0, #20
 8010ae6:	f04f 0b00 	mov.w	fp, #0
 8010aea:	f1ca 0301 	rsb	r3, sl, #1
 8010aee:	f8cd 9008 	str.w	r9, [sp, #8]
 8010af2:	f8cd b000 	str.w	fp, [sp]
 8010af6:	9306      	str	r3, [sp, #24]
 8010af8:	42b7      	cmp	r7, r6
 8010afa:	d340      	bcc.n	8010b7e <__gethex+0x21e>
 8010afc:	9802      	ldr	r0, [sp, #8]
 8010afe:	9b00      	ldr	r3, [sp, #0]
 8010b00:	f840 3b04 	str.w	r3, [r0], #4
 8010b04:	eba0 0009 	sub.w	r0, r0, r9
 8010b08:	1080      	asrs	r0, r0, #2
 8010b0a:	0146      	lsls	r6, r0, #5
 8010b0c:	6120      	str	r0, [r4, #16]
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f000 fb5c 	bl	80111cc <__hi0bits>
 8010b14:	1a30      	subs	r0, r6, r0
 8010b16:	f8d8 6000 	ldr.w	r6, [r8]
 8010b1a:	42b0      	cmp	r0, r6
 8010b1c:	dd63      	ble.n	8010be6 <__gethex+0x286>
 8010b1e:	1b87      	subs	r7, r0, r6
 8010b20:	4639      	mov	r1, r7
 8010b22:	4620      	mov	r0, r4
 8010b24:	f000 ff00 	bl	8011928 <__any_on>
 8010b28:	4682      	mov	sl, r0
 8010b2a:	b1a8      	cbz	r0, 8010b58 <__gethex+0x1f8>
 8010b2c:	1e7b      	subs	r3, r7, #1
 8010b2e:	1159      	asrs	r1, r3, #5
 8010b30:	f003 021f 	and.w	r2, r3, #31
 8010b34:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010b38:	f04f 0a01 	mov.w	sl, #1
 8010b3c:	fa0a f202 	lsl.w	r2, sl, r2
 8010b40:	420a      	tst	r2, r1
 8010b42:	d009      	beq.n	8010b58 <__gethex+0x1f8>
 8010b44:	4553      	cmp	r3, sl
 8010b46:	dd05      	ble.n	8010b54 <__gethex+0x1f4>
 8010b48:	1eb9      	subs	r1, r7, #2
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f000 feec 	bl	8011928 <__any_on>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	d145      	bne.n	8010be0 <__gethex+0x280>
 8010b54:	f04f 0a02 	mov.w	sl, #2
 8010b58:	4639      	mov	r1, r7
 8010b5a:	4620      	mov	r0, r4
 8010b5c:	f7ff fe98 	bl	8010890 <rshift>
 8010b60:	443d      	add	r5, r7
 8010b62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b66:	42ab      	cmp	r3, r5
 8010b68:	da4c      	bge.n	8010c04 <__gethex+0x2a4>
 8010b6a:	ee18 0a10 	vmov	r0, s16
 8010b6e:	4621      	mov	r1, r4
 8010b70:	f000 fa7a 	bl	8011068 <_Bfree>
 8010b74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010b76:	2300      	movs	r3, #0
 8010b78:	6013      	str	r3, [r2, #0]
 8010b7a:	27a3      	movs	r7, #163	; 0xa3
 8010b7c:	e785      	b.n	8010a8a <__gethex+0x12a>
 8010b7e:	1e73      	subs	r3, r6, #1
 8010b80:	9a05      	ldr	r2, [sp, #20]
 8010b82:	9303      	str	r3, [sp, #12]
 8010b84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010b88:	4293      	cmp	r3, r2
 8010b8a:	d019      	beq.n	8010bc0 <__gethex+0x260>
 8010b8c:	f1bb 0f20 	cmp.w	fp, #32
 8010b90:	d107      	bne.n	8010ba2 <__gethex+0x242>
 8010b92:	9b02      	ldr	r3, [sp, #8]
 8010b94:	9a00      	ldr	r2, [sp, #0]
 8010b96:	f843 2b04 	str.w	r2, [r3], #4
 8010b9a:	9302      	str	r3, [sp, #8]
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	9300      	str	r3, [sp, #0]
 8010ba0:	469b      	mov	fp, r3
 8010ba2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010ba6:	f7ff fec5 	bl	8010934 <__hexdig_fun>
 8010baa:	9b00      	ldr	r3, [sp, #0]
 8010bac:	f000 000f 	and.w	r0, r0, #15
 8010bb0:	fa00 f00b 	lsl.w	r0, r0, fp
 8010bb4:	4303      	orrs	r3, r0
 8010bb6:	9300      	str	r3, [sp, #0]
 8010bb8:	f10b 0b04 	add.w	fp, fp, #4
 8010bbc:	9b03      	ldr	r3, [sp, #12]
 8010bbe:	e00d      	b.n	8010bdc <__gethex+0x27c>
 8010bc0:	9b03      	ldr	r3, [sp, #12]
 8010bc2:	9a06      	ldr	r2, [sp, #24]
 8010bc4:	4413      	add	r3, r2
 8010bc6:	42bb      	cmp	r3, r7
 8010bc8:	d3e0      	bcc.n	8010b8c <__gethex+0x22c>
 8010bca:	4618      	mov	r0, r3
 8010bcc:	9901      	ldr	r1, [sp, #4]
 8010bce:	9307      	str	r3, [sp, #28]
 8010bd0:	4652      	mov	r2, sl
 8010bd2:	f001 f8a5 	bl	8011d20 <strncmp>
 8010bd6:	9b07      	ldr	r3, [sp, #28]
 8010bd8:	2800      	cmp	r0, #0
 8010bda:	d1d7      	bne.n	8010b8c <__gethex+0x22c>
 8010bdc:	461e      	mov	r6, r3
 8010bde:	e78b      	b.n	8010af8 <__gethex+0x198>
 8010be0:	f04f 0a03 	mov.w	sl, #3
 8010be4:	e7b8      	b.n	8010b58 <__gethex+0x1f8>
 8010be6:	da0a      	bge.n	8010bfe <__gethex+0x29e>
 8010be8:	1a37      	subs	r7, r6, r0
 8010bea:	4621      	mov	r1, r4
 8010bec:	ee18 0a10 	vmov	r0, s16
 8010bf0:	463a      	mov	r2, r7
 8010bf2:	f000 fc55 	bl	80114a0 <__lshift>
 8010bf6:	1bed      	subs	r5, r5, r7
 8010bf8:	4604      	mov	r4, r0
 8010bfa:	f100 0914 	add.w	r9, r0, #20
 8010bfe:	f04f 0a00 	mov.w	sl, #0
 8010c02:	e7ae      	b.n	8010b62 <__gethex+0x202>
 8010c04:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010c08:	42a8      	cmp	r0, r5
 8010c0a:	dd72      	ble.n	8010cf2 <__gethex+0x392>
 8010c0c:	1b45      	subs	r5, r0, r5
 8010c0e:	42ae      	cmp	r6, r5
 8010c10:	dc36      	bgt.n	8010c80 <__gethex+0x320>
 8010c12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010c16:	2b02      	cmp	r3, #2
 8010c18:	d02a      	beq.n	8010c70 <__gethex+0x310>
 8010c1a:	2b03      	cmp	r3, #3
 8010c1c:	d02c      	beq.n	8010c78 <__gethex+0x318>
 8010c1e:	2b01      	cmp	r3, #1
 8010c20:	d11c      	bne.n	8010c5c <__gethex+0x2fc>
 8010c22:	42ae      	cmp	r6, r5
 8010c24:	d11a      	bne.n	8010c5c <__gethex+0x2fc>
 8010c26:	2e01      	cmp	r6, #1
 8010c28:	d112      	bne.n	8010c50 <__gethex+0x2f0>
 8010c2a:	9a04      	ldr	r2, [sp, #16]
 8010c2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010c30:	6013      	str	r3, [r2, #0]
 8010c32:	2301      	movs	r3, #1
 8010c34:	6123      	str	r3, [r4, #16]
 8010c36:	f8c9 3000 	str.w	r3, [r9]
 8010c3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010c3c:	2762      	movs	r7, #98	; 0x62
 8010c3e:	601c      	str	r4, [r3, #0]
 8010c40:	e723      	b.n	8010a8a <__gethex+0x12a>
 8010c42:	bf00      	nop
 8010c44:	08015230 	.word	0x08015230
 8010c48:	080151b8 	.word	0x080151b8
 8010c4c:	080151c9 	.word	0x080151c9
 8010c50:	1e71      	subs	r1, r6, #1
 8010c52:	4620      	mov	r0, r4
 8010c54:	f000 fe68 	bl	8011928 <__any_on>
 8010c58:	2800      	cmp	r0, #0
 8010c5a:	d1e6      	bne.n	8010c2a <__gethex+0x2ca>
 8010c5c:	ee18 0a10 	vmov	r0, s16
 8010c60:	4621      	mov	r1, r4
 8010c62:	f000 fa01 	bl	8011068 <_Bfree>
 8010c66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010c68:	2300      	movs	r3, #0
 8010c6a:	6013      	str	r3, [r2, #0]
 8010c6c:	2750      	movs	r7, #80	; 0x50
 8010c6e:	e70c      	b.n	8010a8a <__gethex+0x12a>
 8010c70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d1f2      	bne.n	8010c5c <__gethex+0x2fc>
 8010c76:	e7d8      	b.n	8010c2a <__gethex+0x2ca>
 8010c78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d1d5      	bne.n	8010c2a <__gethex+0x2ca>
 8010c7e:	e7ed      	b.n	8010c5c <__gethex+0x2fc>
 8010c80:	1e6f      	subs	r7, r5, #1
 8010c82:	f1ba 0f00 	cmp.w	sl, #0
 8010c86:	d131      	bne.n	8010cec <__gethex+0x38c>
 8010c88:	b127      	cbz	r7, 8010c94 <__gethex+0x334>
 8010c8a:	4639      	mov	r1, r7
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	f000 fe4b 	bl	8011928 <__any_on>
 8010c92:	4682      	mov	sl, r0
 8010c94:	117b      	asrs	r3, r7, #5
 8010c96:	2101      	movs	r1, #1
 8010c98:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010c9c:	f007 071f 	and.w	r7, r7, #31
 8010ca0:	fa01 f707 	lsl.w	r7, r1, r7
 8010ca4:	421f      	tst	r7, r3
 8010ca6:	4629      	mov	r1, r5
 8010ca8:	4620      	mov	r0, r4
 8010caa:	bf18      	it	ne
 8010cac:	f04a 0a02 	orrne.w	sl, sl, #2
 8010cb0:	1b76      	subs	r6, r6, r5
 8010cb2:	f7ff fded 	bl	8010890 <rshift>
 8010cb6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010cba:	2702      	movs	r7, #2
 8010cbc:	f1ba 0f00 	cmp.w	sl, #0
 8010cc0:	d048      	beq.n	8010d54 <__gethex+0x3f4>
 8010cc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010cc6:	2b02      	cmp	r3, #2
 8010cc8:	d015      	beq.n	8010cf6 <__gethex+0x396>
 8010cca:	2b03      	cmp	r3, #3
 8010ccc:	d017      	beq.n	8010cfe <__gethex+0x39e>
 8010cce:	2b01      	cmp	r3, #1
 8010cd0:	d109      	bne.n	8010ce6 <__gethex+0x386>
 8010cd2:	f01a 0f02 	tst.w	sl, #2
 8010cd6:	d006      	beq.n	8010ce6 <__gethex+0x386>
 8010cd8:	f8d9 0000 	ldr.w	r0, [r9]
 8010cdc:	ea4a 0a00 	orr.w	sl, sl, r0
 8010ce0:	f01a 0f01 	tst.w	sl, #1
 8010ce4:	d10e      	bne.n	8010d04 <__gethex+0x3a4>
 8010ce6:	f047 0710 	orr.w	r7, r7, #16
 8010cea:	e033      	b.n	8010d54 <__gethex+0x3f4>
 8010cec:	f04f 0a01 	mov.w	sl, #1
 8010cf0:	e7d0      	b.n	8010c94 <__gethex+0x334>
 8010cf2:	2701      	movs	r7, #1
 8010cf4:	e7e2      	b.n	8010cbc <__gethex+0x35c>
 8010cf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010cf8:	f1c3 0301 	rsb	r3, r3, #1
 8010cfc:	9315      	str	r3, [sp, #84]	; 0x54
 8010cfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d0f0      	beq.n	8010ce6 <__gethex+0x386>
 8010d04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010d08:	f104 0314 	add.w	r3, r4, #20
 8010d0c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010d10:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010d14:	f04f 0c00 	mov.w	ip, #0
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d1e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010d22:	d01c      	beq.n	8010d5e <__gethex+0x3fe>
 8010d24:	3201      	adds	r2, #1
 8010d26:	6002      	str	r2, [r0, #0]
 8010d28:	2f02      	cmp	r7, #2
 8010d2a:	f104 0314 	add.w	r3, r4, #20
 8010d2e:	d13f      	bne.n	8010db0 <__gethex+0x450>
 8010d30:	f8d8 2000 	ldr.w	r2, [r8]
 8010d34:	3a01      	subs	r2, #1
 8010d36:	42b2      	cmp	r2, r6
 8010d38:	d10a      	bne.n	8010d50 <__gethex+0x3f0>
 8010d3a:	1171      	asrs	r1, r6, #5
 8010d3c:	2201      	movs	r2, #1
 8010d3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d42:	f006 061f 	and.w	r6, r6, #31
 8010d46:	fa02 f606 	lsl.w	r6, r2, r6
 8010d4a:	421e      	tst	r6, r3
 8010d4c:	bf18      	it	ne
 8010d4e:	4617      	movne	r7, r2
 8010d50:	f047 0720 	orr.w	r7, r7, #32
 8010d54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010d56:	601c      	str	r4, [r3, #0]
 8010d58:	9b04      	ldr	r3, [sp, #16]
 8010d5a:	601d      	str	r5, [r3, #0]
 8010d5c:	e695      	b.n	8010a8a <__gethex+0x12a>
 8010d5e:	4299      	cmp	r1, r3
 8010d60:	f843 cc04 	str.w	ip, [r3, #-4]
 8010d64:	d8d8      	bhi.n	8010d18 <__gethex+0x3b8>
 8010d66:	68a3      	ldr	r3, [r4, #8]
 8010d68:	459b      	cmp	fp, r3
 8010d6a:	db19      	blt.n	8010da0 <__gethex+0x440>
 8010d6c:	6861      	ldr	r1, [r4, #4]
 8010d6e:	ee18 0a10 	vmov	r0, s16
 8010d72:	3101      	adds	r1, #1
 8010d74:	f000 f938 	bl	8010fe8 <_Balloc>
 8010d78:	4681      	mov	r9, r0
 8010d7a:	b918      	cbnz	r0, 8010d84 <__gethex+0x424>
 8010d7c:	4b1a      	ldr	r3, [pc, #104]	; (8010de8 <__gethex+0x488>)
 8010d7e:	4602      	mov	r2, r0
 8010d80:	2184      	movs	r1, #132	; 0x84
 8010d82:	e6a8      	b.n	8010ad6 <__gethex+0x176>
 8010d84:	6922      	ldr	r2, [r4, #16]
 8010d86:	3202      	adds	r2, #2
 8010d88:	f104 010c 	add.w	r1, r4, #12
 8010d8c:	0092      	lsls	r2, r2, #2
 8010d8e:	300c      	adds	r0, #12
 8010d90:	f7fc ff69 	bl	800dc66 <memcpy>
 8010d94:	4621      	mov	r1, r4
 8010d96:	ee18 0a10 	vmov	r0, s16
 8010d9a:	f000 f965 	bl	8011068 <_Bfree>
 8010d9e:	464c      	mov	r4, r9
 8010da0:	6923      	ldr	r3, [r4, #16]
 8010da2:	1c5a      	adds	r2, r3, #1
 8010da4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010da8:	6122      	str	r2, [r4, #16]
 8010daa:	2201      	movs	r2, #1
 8010dac:	615a      	str	r2, [r3, #20]
 8010dae:	e7bb      	b.n	8010d28 <__gethex+0x3c8>
 8010db0:	6922      	ldr	r2, [r4, #16]
 8010db2:	455a      	cmp	r2, fp
 8010db4:	dd0b      	ble.n	8010dce <__gethex+0x46e>
 8010db6:	2101      	movs	r1, #1
 8010db8:	4620      	mov	r0, r4
 8010dba:	f7ff fd69 	bl	8010890 <rshift>
 8010dbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010dc2:	3501      	adds	r5, #1
 8010dc4:	42ab      	cmp	r3, r5
 8010dc6:	f6ff aed0 	blt.w	8010b6a <__gethex+0x20a>
 8010dca:	2701      	movs	r7, #1
 8010dcc:	e7c0      	b.n	8010d50 <__gethex+0x3f0>
 8010dce:	f016 061f 	ands.w	r6, r6, #31
 8010dd2:	d0fa      	beq.n	8010dca <__gethex+0x46a>
 8010dd4:	4453      	add	r3, sl
 8010dd6:	f1c6 0620 	rsb	r6, r6, #32
 8010dda:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010dde:	f000 f9f5 	bl	80111cc <__hi0bits>
 8010de2:	42b0      	cmp	r0, r6
 8010de4:	dbe7      	blt.n	8010db6 <__gethex+0x456>
 8010de6:	e7f0      	b.n	8010dca <__gethex+0x46a>
 8010de8:	080151b8 	.word	0x080151b8

08010dec <L_shift>:
 8010dec:	f1c2 0208 	rsb	r2, r2, #8
 8010df0:	0092      	lsls	r2, r2, #2
 8010df2:	b570      	push	{r4, r5, r6, lr}
 8010df4:	f1c2 0620 	rsb	r6, r2, #32
 8010df8:	6843      	ldr	r3, [r0, #4]
 8010dfa:	6804      	ldr	r4, [r0, #0]
 8010dfc:	fa03 f506 	lsl.w	r5, r3, r6
 8010e00:	432c      	orrs	r4, r5
 8010e02:	40d3      	lsrs	r3, r2
 8010e04:	6004      	str	r4, [r0, #0]
 8010e06:	f840 3f04 	str.w	r3, [r0, #4]!
 8010e0a:	4288      	cmp	r0, r1
 8010e0c:	d3f4      	bcc.n	8010df8 <L_shift+0xc>
 8010e0e:	bd70      	pop	{r4, r5, r6, pc}

08010e10 <__match>:
 8010e10:	b530      	push	{r4, r5, lr}
 8010e12:	6803      	ldr	r3, [r0, #0]
 8010e14:	3301      	adds	r3, #1
 8010e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e1a:	b914      	cbnz	r4, 8010e22 <__match+0x12>
 8010e1c:	6003      	str	r3, [r0, #0]
 8010e1e:	2001      	movs	r0, #1
 8010e20:	bd30      	pop	{r4, r5, pc}
 8010e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010e2a:	2d19      	cmp	r5, #25
 8010e2c:	bf98      	it	ls
 8010e2e:	3220      	addls	r2, #32
 8010e30:	42a2      	cmp	r2, r4
 8010e32:	d0f0      	beq.n	8010e16 <__match+0x6>
 8010e34:	2000      	movs	r0, #0
 8010e36:	e7f3      	b.n	8010e20 <__match+0x10>

08010e38 <__hexnan>:
 8010e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e3c:	680b      	ldr	r3, [r1, #0]
 8010e3e:	115e      	asrs	r6, r3, #5
 8010e40:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010e44:	f013 031f 	ands.w	r3, r3, #31
 8010e48:	b087      	sub	sp, #28
 8010e4a:	bf18      	it	ne
 8010e4c:	3604      	addne	r6, #4
 8010e4e:	2500      	movs	r5, #0
 8010e50:	1f37      	subs	r7, r6, #4
 8010e52:	4690      	mov	r8, r2
 8010e54:	6802      	ldr	r2, [r0, #0]
 8010e56:	9301      	str	r3, [sp, #4]
 8010e58:	4682      	mov	sl, r0
 8010e5a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010e5e:	46b9      	mov	r9, r7
 8010e60:	463c      	mov	r4, r7
 8010e62:	9502      	str	r5, [sp, #8]
 8010e64:	46ab      	mov	fp, r5
 8010e66:	7851      	ldrb	r1, [r2, #1]
 8010e68:	1c53      	adds	r3, r2, #1
 8010e6a:	9303      	str	r3, [sp, #12]
 8010e6c:	b341      	cbz	r1, 8010ec0 <__hexnan+0x88>
 8010e6e:	4608      	mov	r0, r1
 8010e70:	9205      	str	r2, [sp, #20]
 8010e72:	9104      	str	r1, [sp, #16]
 8010e74:	f7ff fd5e 	bl	8010934 <__hexdig_fun>
 8010e78:	2800      	cmp	r0, #0
 8010e7a:	d14f      	bne.n	8010f1c <__hexnan+0xe4>
 8010e7c:	9904      	ldr	r1, [sp, #16]
 8010e7e:	9a05      	ldr	r2, [sp, #20]
 8010e80:	2920      	cmp	r1, #32
 8010e82:	d818      	bhi.n	8010eb6 <__hexnan+0x7e>
 8010e84:	9b02      	ldr	r3, [sp, #8]
 8010e86:	459b      	cmp	fp, r3
 8010e88:	dd13      	ble.n	8010eb2 <__hexnan+0x7a>
 8010e8a:	454c      	cmp	r4, r9
 8010e8c:	d206      	bcs.n	8010e9c <__hexnan+0x64>
 8010e8e:	2d07      	cmp	r5, #7
 8010e90:	dc04      	bgt.n	8010e9c <__hexnan+0x64>
 8010e92:	462a      	mov	r2, r5
 8010e94:	4649      	mov	r1, r9
 8010e96:	4620      	mov	r0, r4
 8010e98:	f7ff ffa8 	bl	8010dec <L_shift>
 8010e9c:	4544      	cmp	r4, r8
 8010e9e:	d950      	bls.n	8010f42 <__hexnan+0x10a>
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	f1a4 0904 	sub.w	r9, r4, #4
 8010ea6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010eaa:	f8cd b008 	str.w	fp, [sp, #8]
 8010eae:	464c      	mov	r4, r9
 8010eb0:	461d      	mov	r5, r3
 8010eb2:	9a03      	ldr	r2, [sp, #12]
 8010eb4:	e7d7      	b.n	8010e66 <__hexnan+0x2e>
 8010eb6:	2929      	cmp	r1, #41	; 0x29
 8010eb8:	d156      	bne.n	8010f68 <__hexnan+0x130>
 8010eba:	3202      	adds	r2, #2
 8010ebc:	f8ca 2000 	str.w	r2, [sl]
 8010ec0:	f1bb 0f00 	cmp.w	fp, #0
 8010ec4:	d050      	beq.n	8010f68 <__hexnan+0x130>
 8010ec6:	454c      	cmp	r4, r9
 8010ec8:	d206      	bcs.n	8010ed8 <__hexnan+0xa0>
 8010eca:	2d07      	cmp	r5, #7
 8010ecc:	dc04      	bgt.n	8010ed8 <__hexnan+0xa0>
 8010ece:	462a      	mov	r2, r5
 8010ed0:	4649      	mov	r1, r9
 8010ed2:	4620      	mov	r0, r4
 8010ed4:	f7ff ff8a 	bl	8010dec <L_shift>
 8010ed8:	4544      	cmp	r4, r8
 8010eda:	d934      	bls.n	8010f46 <__hexnan+0x10e>
 8010edc:	f1a8 0204 	sub.w	r2, r8, #4
 8010ee0:	4623      	mov	r3, r4
 8010ee2:	f853 1b04 	ldr.w	r1, [r3], #4
 8010ee6:	f842 1f04 	str.w	r1, [r2, #4]!
 8010eea:	429f      	cmp	r7, r3
 8010eec:	d2f9      	bcs.n	8010ee2 <__hexnan+0xaa>
 8010eee:	1b3b      	subs	r3, r7, r4
 8010ef0:	f023 0303 	bic.w	r3, r3, #3
 8010ef4:	3304      	adds	r3, #4
 8010ef6:	3401      	adds	r4, #1
 8010ef8:	3e03      	subs	r6, #3
 8010efa:	42b4      	cmp	r4, r6
 8010efc:	bf88      	it	hi
 8010efe:	2304      	movhi	r3, #4
 8010f00:	4443      	add	r3, r8
 8010f02:	2200      	movs	r2, #0
 8010f04:	f843 2b04 	str.w	r2, [r3], #4
 8010f08:	429f      	cmp	r7, r3
 8010f0a:	d2fb      	bcs.n	8010f04 <__hexnan+0xcc>
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	b91b      	cbnz	r3, 8010f18 <__hexnan+0xe0>
 8010f10:	4547      	cmp	r7, r8
 8010f12:	d127      	bne.n	8010f64 <__hexnan+0x12c>
 8010f14:	2301      	movs	r3, #1
 8010f16:	603b      	str	r3, [r7, #0]
 8010f18:	2005      	movs	r0, #5
 8010f1a:	e026      	b.n	8010f6a <__hexnan+0x132>
 8010f1c:	3501      	adds	r5, #1
 8010f1e:	2d08      	cmp	r5, #8
 8010f20:	f10b 0b01 	add.w	fp, fp, #1
 8010f24:	dd06      	ble.n	8010f34 <__hexnan+0xfc>
 8010f26:	4544      	cmp	r4, r8
 8010f28:	d9c3      	bls.n	8010eb2 <__hexnan+0x7a>
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	f844 3c04 	str.w	r3, [r4, #-4]
 8010f30:	2501      	movs	r5, #1
 8010f32:	3c04      	subs	r4, #4
 8010f34:	6822      	ldr	r2, [r4, #0]
 8010f36:	f000 000f 	and.w	r0, r0, #15
 8010f3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010f3e:	6022      	str	r2, [r4, #0]
 8010f40:	e7b7      	b.n	8010eb2 <__hexnan+0x7a>
 8010f42:	2508      	movs	r5, #8
 8010f44:	e7b5      	b.n	8010eb2 <__hexnan+0x7a>
 8010f46:	9b01      	ldr	r3, [sp, #4]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d0df      	beq.n	8010f0c <__hexnan+0xd4>
 8010f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f50:	f1c3 0320 	rsb	r3, r3, #32
 8010f54:	fa22 f303 	lsr.w	r3, r2, r3
 8010f58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010f5c:	401a      	ands	r2, r3
 8010f5e:	f846 2c04 	str.w	r2, [r6, #-4]
 8010f62:	e7d3      	b.n	8010f0c <__hexnan+0xd4>
 8010f64:	3f04      	subs	r7, #4
 8010f66:	e7d1      	b.n	8010f0c <__hexnan+0xd4>
 8010f68:	2004      	movs	r0, #4
 8010f6a:	b007      	add	sp, #28
 8010f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f70 <_localeconv_r>:
 8010f70:	4800      	ldr	r0, [pc, #0]	; (8010f74 <_localeconv_r+0x4>)
 8010f72:	4770      	bx	lr
 8010f74:	20000190 	.word	0x20000190

08010f78 <_lseek_r>:
 8010f78:	b538      	push	{r3, r4, r5, lr}
 8010f7a:	4d07      	ldr	r5, [pc, #28]	; (8010f98 <_lseek_r+0x20>)
 8010f7c:	4604      	mov	r4, r0
 8010f7e:	4608      	mov	r0, r1
 8010f80:	4611      	mov	r1, r2
 8010f82:	2200      	movs	r2, #0
 8010f84:	602a      	str	r2, [r5, #0]
 8010f86:	461a      	mov	r2, r3
 8010f88:	f7f1 f910 	bl	80021ac <_lseek>
 8010f8c:	1c43      	adds	r3, r0, #1
 8010f8e:	d102      	bne.n	8010f96 <_lseek_r+0x1e>
 8010f90:	682b      	ldr	r3, [r5, #0]
 8010f92:	b103      	cbz	r3, 8010f96 <_lseek_r+0x1e>
 8010f94:	6023      	str	r3, [r4, #0]
 8010f96:	bd38      	pop	{r3, r4, r5, pc}
 8010f98:	20005018 	.word	0x20005018

08010f9c <malloc>:
 8010f9c:	4b02      	ldr	r3, [pc, #8]	; (8010fa8 <malloc+0xc>)
 8010f9e:	4601      	mov	r1, r0
 8010fa0:	6818      	ldr	r0, [r3, #0]
 8010fa2:	f7fc be97 	b.w	800dcd4 <_malloc_r>
 8010fa6:	bf00      	nop
 8010fa8:	20000038 	.word	0x20000038

08010fac <__ascii_mbtowc>:
 8010fac:	b082      	sub	sp, #8
 8010fae:	b901      	cbnz	r1, 8010fb2 <__ascii_mbtowc+0x6>
 8010fb0:	a901      	add	r1, sp, #4
 8010fb2:	b142      	cbz	r2, 8010fc6 <__ascii_mbtowc+0x1a>
 8010fb4:	b14b      	cbz	r3, 8010fca <__ascii_mbtowc+0x1e>
 8010fb6:	7813      	ldrb	r3, [r2, #0]
 8010fb8:	600b      	str	r3, [r1, #0]
 8010fba:	7812      	ldrb	r2, [r2, #0]
 8010fbc:	1e10      	subs	r0, r2, #0
 8010fbe:	bf18      	it	ne
 8010fc0:	2001      	movne	r0, #1
 8010fc2:	b002      	add	sp, #8
 8010fc4:	4770      	bx	lr
 8010fc6:	4610      	mov	r0, r2
 8010fc8:	e7fb      	b.n	8010fc2 <__ascii_mbtowc+0x16>
 8010fca:	f06f 0001 	mvn.w	r0, #1
 8010fce:	e7f8      	b.n	8010fc2 <__ascii_mbtowc+0x16>

08010fd0 <__malloc_lock>:
 8010fd0:	4801      	ldr	r0, [pc, #4]	; (8010fd8 <__malloc_lock+0x8>)
 8010fd2:	f7fc be46 	b.w	800dc62 <__retarget_lock_acquire_recursive>
 8010fd6:	bf00      	nop
 8010fd8:	2000500c 	.word	0x2000500c

08010fdc <__malloc_unlock>:
 8010fdc:	4801      	ldr	r0, [pc, #4]	; (8010fe4 <__malloc_unlock+0x8>)
 8010fde:	f7fc be41 	b.w	800dc64 <__retarget_lock_release_recursive>
 8010fe2:	bf00      	nop
 8010fe4:	2000500c 	.word	0x2000500c

08010fe8 <_Balloc>:
 8010fe8:	b570      	push	{r4, r5, r6, lr}
 8010fea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010fec:	4604      	mov	r4, r0
 8010fee:	460d      	mov	r5, r1
 8010ff0:	b976      	cbnz	r6, 8011010 <_Balloc+0x28>
 8010ff2:	2010      	movs	r0, #16
 8010ff4:	f7ff ffd2 	bl	8010f9c <malloc>
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	6260      	str	r0, [r4, #36]	; 0x24
 8010ffc:	b920      	cbnz	r0, 8011008 <_Balloc+0x20>
 8010ffe:	4b18      	ldr	r3, [pc, #96]	; (8011060 <_Balloc+0x78>)
 8011000:	4818      	ldr	r0, [pc, #96]	; (8011064 <_Balloc+0x7c>)
 8011002:	2166      	movs	r1, #102	; 0x66
 8011004:	f000 feae 	bl	8011d64 <__assert_func>
 8011008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801100c:	6006      	str	r6, [r0, #0]
 801100e:	60c6      	str	r6, [r0, #12]
 8011010:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011012:	68f3      	ldr	r3, [r6, #12]
 8011014:	b183      	cbz	r3, 8011038 <_Balloc+0x50>
 8011016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011018:	68db      	ldr	r3, [r3, #12]
 801101a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801101e:	b9b8      	cbnz	r0, 8011050 <_Balloc+0x68>
 8011020:	2101      	movs	r1, #1
 8011022:	fa01 f605 	lsl.w	r6, r1, r5
 8011026:	1d72      	adds	r2, r6, #5
 8011028:	0092      	lsls	r2, r2, #2
 801102a:	4620      	mov	r0, r4
 801102c:	f000 fc9d 	bl	801196a <_calloc_r>
 8011030:	b160      	cbz	r0, 801104c <_Balloc+0x64>
 8011032:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011036:	e00e      	b.n	8011056 <_Balloc+0x6e>
 8011038:	2221      	movs	r2, #33	; 0x21
 801103a:	2104      	movs	r1, #4
 801103c:	4620      	mov	r0, r4
 801103e:	f000 fc94 	bl	801196a <_calloc_r>
 8011042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011044:	60f0      	str	r0, [r6, #12]
 8011046:	68db      	ldr	r3, [r3, #12]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d1e4      	bne.n	8011016 <_Balloc+0x2e>
 801104c:	2000      	movs	r0, #0
 801104e:	bd70      	pop	{r4, r5, r6, pc}
 8011050:	6802      	ldr	r2, [r0, #0]
 8011052:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011056:	2300      	movs	r3, #0
 8011058:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801105c:	e7f7      	b.n	801104e <_Balloc+0x66>
 801105e:	bf00      	nop
 8011060:	08015146 	.word	0x08015146
 8011064:	08015244 	.word	0x08015244

08011068 <_Bfree>:
 8011068:	b570      	push	{r4, r5, r6, lr}
 801106a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801106c:	4605      	mov	r5, r0
 801106e:	460c      	mov	r4, r1
 8011070:	b976      	cbnz	r6, 8011090 <_Bfree+0x28>
 8011072:	2010      	movs	r0, #16
 8011074:	f7ff ff92 	bl	8010f9c <malloc>
 8011078:	4602      	mov	r2, r0
 801107a:	6268      	str	r0, [r5, #36]	; 0x24
 801107c:	b920      	cbnz	r0, 8011088 <_Bfree+0x20>
 801107e:	4b09      	ldr	r3, [pc, #36]	; (80110a4 <_Bfree+0x3c>)
 8011080:	4809      	ldr	r0, [pc, #36]	; (80110a8 <_Bfree+0x40>)
 8011082:	218a      	movs	r1, #138	; 0x8a
 8011084:	f000 fe6e 	bl	8011d64 <__assert_func>
 8011088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801108c:	6006      	str	r6, [r0, #0]
 801108e:	60c6      	str	r6, [r0, #12]
 8011090:	b13c      	cbz	r4, 80110a2 <_Bfree+0x3a>
 8011092:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011094:	6862      	ldr	r2, [r4, #4]
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801109c:	6021      	str	r1, [r4, #0]
 801109e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80110a2:	bd70      	pop	{r4, r5, r6, pc}
 80110a4:	08015146 	.word	0x08015146
 80110a8:	08015244 	.word	0x08015244

080110ac <__multadd>:
 80110ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110b0:	690d      	ldr	r5, [r1, #16]
 80110b2:	4607      	mov	r7, r0
 80110b4:	460c      	mov	r4, r1
 80110b6:	461e      	mov	r6, r3
 80110b8:	f101 0c14 	add.w	ip, r1, #20
 80110bc:	2000      	movs	r0, #0
 80110be:	f8dc 3000 	ldr.w	r3, [ip]
 80110c2:	b299      	uxth	r1, r3
 80110c4:	fb02 6101 	mla	r1, r2, r1, r6
 80110c8:	0c1e      	lsrs	r6, r3, #16
 80110ca:	0c0b      	lsrs	r3, r1, #16
 80110cc:	fb02 3306 	mla	r3, r2, r6, r3
 80110d0:	b289      	uxth	r1, r1
 80110d2:	3001      	adds	r0, #1
 80110d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80110d8:	4285      	cmp	r5, r0
 80110da:	f84c 1b04 	str.w	r1, [ip], #4
 80110de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80110e2:	dcec      	bgt.n	80110be <__multadd+0x12>
 80110e4:	b30e      	cbz	r6, 801112a <__multadd+0x7e>
 80110e6:	68a3      	ldr	r3, [r4, #8]
 80110e8:	42ab      	cmp	r3, r5
 80110ea:	dc19      	bgt.n	8011120 <__multadd+0x74>
 80110ec:	6861      	ldr	r1, [r4, #4]
 80110ee:	4638      	mov	r0, r7
 80110f0:	3101      	adds	r1, #1
 80110f2:	f7ff ff79 	bl	8010fe8 <_Balloc>
 80110f6:	4680      	mov	r8, r0
 80110f8:	b928      	cbnz	r0, 8011106 <__multadd+0x5a>
 80110fa:	4602      	mov	r2, r0
 80110fc:	4b0c      	ldr	r3, [pc, #48]	; (8011130 <__multadd+0x84>)
 80110fe:	480d      	ldr	r0, [pc, #52]	; (8011134 <__multadd+0x88>)
 8011100:	21b5      	movs	r1, #181	; 0xb5
 8011102:	f000 fe2f 	bl	8011d64 <__assert_func>
 8011106:	6922      	ldr	r2, [r4, #16]
 8011108:	3202      	adds	r2, #2
 801110a:	f104 010c 	add.w	r1, r4, #12
 801110e:	0092      	lsls	r2, r2, #2
 8011110:	300c      	adds	r0, #12
 8011112:	f7fc fda8 	bl	800dc66 <memcpy>
 8011116:	4621      	mov	r1, r4
 8011118:	4638      	mov	r0, r7
 801111a:	f7ff ffa5 	bl	8011068 <_Bfree>
 801111e:	4644      	mov	r4, r8
 8011120:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011124:	3501      	adds	r5, #1
 8011126:	615e      	str	r6, [r3, #20]
 8011128:	6125      	str	r5, [r4, #16]
 801112a:	4620      	mov	r0, r4
 801112c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011130:	080151b8 	.word	0x080151b8
 8011134:	08015244 	.word	0x08015244

08011138 <__s2b>:
 8011138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801113c:	460c      	mov	r4, r1
 801113e:	4615      	mov	r5, r2
 8011140:	461f      	mov	r7, r3
 8011142:	2209      	movs	r2, #9
 8011144:	3308      	adds	r3, #8
 8011146:	4606      	mov	r6, r0
 8011148:	fb93 f3f2 	sdiv	r3, r3, r2
 801114c:	2100      	movs	r1, #0
 801114e:	2201      	movs	r2, #1
 8011150:	429a      	cmp	r2, r3
 8011152:	db09      	blt.n	8011168 <__s2b+0x30>
 8011154:	4630      	mov	r0, r6
 8011156:	f7ff ff47 	bl	8010fe8 <_Balloc>
 801115a:	b940      	cbnz	r0, 801116e <__s2b+0x36>
 801115c:	4602      	mov	r2, r0
 801115e:	4b19      	ldr	r3, [pc, #100]	; (80111c4 <__s2b+0x8c>)
 8011160:	4819      	ldr	r0, [pc, #100]	; (80111c8 <__s2b+0x90>)
 8011162:	21ce      	movs	r1, #206	; 0xce
 8011164:	f000 fdfe 	bl	8011d64 <__assert_func>
 8011168:	0052      	lsls	r2, r2, #1
 801116a:	3101      	adds	r1, #1
 801116c:	e7f0      	b.n	8011150 <__s2b+0x18>
 801116e:	9b08      	ldr	r3, [sp, #32]
 8011170:	6143      	str	r3, [r0, #20]
 8011172:	2d09      	cmp	r5, #9
 8011174:	f04f 0301 	mov.w	r3, #1
 8011178:	6103      	str	r3, [r0, #16]
 801117a:	dd16      	ble.n	80111aa <__s2b+0x72>
 801117c:	f104 0909 	add.w	r9, r4, #9
 8011180:	46c8      	mov	r8, r9
 8011182:	442c      	add	r4, r5
 8011184:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011188:	4601      	mov	r1, r0
 801118a:	3b30      	subs	r3, #48	; 0x30
 801118c:	220a      	movs	r2, #10
 801118e:	4630      	mov	r0, r6
 8011190:	f7ff ff8c 	bl	80110ac <__multadd>
 8011194:	45a0      	cmp	r8, r4
 8011196:	d1f5      	bne.n	8011184 <__s2b+0x4c>
 8011198:	f1a5 0408 	sub.w	r4, r5, #8
 801119c:	444c      	add	r4, r9
 801119e:	1b2d      	subs	r5, r5, r4
 80111a0:	1963      	adds	r3, r4, r5
 80111a2:	42bb      	cmp	r3, r7
 80111a4:	db04      	blt.n	80111b0 <__s2b+0x78>
 80111a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111aa:	340a      	adds	r4, #10
 80111ac:	2509      	movs	r5, #9
 80111ae:	e7f6      	b.n	801119e <__s2b+0x66>
 80111b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80111b4:	4601      	mov	r1, r0
 80111b6:	3b30      	subs	r3, #48	; 0x30
 80111b8:	220a      	movs	r2, #10
 80111ba:	4630      	mov	r0, r6
 80111bc:	f7ff ff76 	bl	80110ac <__multadd>
 80111c0:	e7ee      	b.n	80111a0 <__s2b+0x68>
 80111c2:	bf00      	nop
 80111c4:	080151b8 	.word	0x080151b8
 80111c8:	08015244 	.word	0x08015244

080111cc <__hi0bits>:
 80111cc:	0c03      	lsrs	r3, r0, #16
 80111ce:	041b      	lsls	r3, r3, #16
 80111d0:	b9d3      	cbnz	r3, 8011208 <__hi0bits+0x3c>
 80111d2:	0400      	lsls	r0, r0, #16
 80111d4:	2310      	movs	r3, #16
 80111d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80111da:	bf04      	itt	eq
 80111dc:	0200      	lsleq	r0, r0, #8
 80111de:	3308      	addeq	r3, #8
 80111e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80111e4:	bf04      	itt	eq
 80111e6:	0100      	lsleq	r0, r0, #4
 80111e8:	3304      	addeq	r3, #4
 80111ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80111ee:	bf04      	itt	eq
 80111f0:	0080      	lsleq	r0, r0, #2
 80111f2:	3302      	addeq	r3, #2
 80111f4:	2800      	cmp	r0, #0
 80111f6:	db05      	blt.n	8011204 <__hi0bits+0x38>
 80111f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80111fc:	f103 0301 	add.w	r3, r3, #1
 8011200:	bf08      	it	eq
 8011202:	2320      	moveq	r3, #32
 8011204:	4618      	mov	r0, r3
 8011206:	4770      	bx	lr
 8011208:	2300      	movs	r3, #0
 801120a:	e7e4      	b.n	80111d6 <__hi0bits+0xa>

0801120c <__lo0bits>:
 801120c:	6803      	ldr	r3, [r0, #0]
 801120e:	f013 0207 	ands.w	r2, r3, #7
 8011212:	4601      	mov	r1, r0
 8011214:	d00b      	beq.n	801122e <__lo0bits+0x22>
 8011216:	07da      	lsls	r2, r3, #31
 8011218:	d423      	bmi.n	8011262 <__lo0bits+0x56>
 801121a:	0798      	lsls	r0, r3, #30
 801121c:	bf49      	itett	mi
 801121e:	085b      	lsrmi	r3, r3, #1
 8011220:	089b      	lsrpl	r3, r3, #2
 8011222:	2001      	movmi	r0, #1
 8011224:	600b      	strmi	r3, [r1, #0]
 8011226:	bf5c      	itt	pl
 8011228:	600b      	strpl	r3, [r1, #0]
 801122a:	2002      	movpl	r0, #2
 801122c:	4770      	bx	lr
 801122e:	b298      	uxth	r0, r3
 8011230:	b9a8      	cbnz	r0, 801125e <__lo0bits+0x52>
 8011232:	0c1b      	lsrs	r3, r3, #16
 8011234:	2010      	movs	r0, #16
 8011236:	b2da      	uxtb	r2, r3
 8011238:	b90a      	cbnz	r2, 801123e <__lo0bits+0x32>
 801123a:	3008      	adds	r0, #8
 801123c:	0a1b      	lsrs	r3, r3, #8
 801123e:	071a      	lsls	r2, r3, #28
 8011240:	bf04      	itt	eq
 8011242:	091b      	lsreq	r3, r3, #4
 8011244:	3004      	addeq	r0, #4
 8011246:	079a      	lsls	r2, r3, #30
 8011248:	bf04      	itt	eq
 801124a:	089b      	lsreq	r3, r3, #2
 801124c:	3002      	addeq	r0, #2
 801124e:	07da      	lsls	r2, r3, #31
 8011250:	d403      	bmi.n	801125a <__lo0bits+0x4e>
 8011252:	085b      	lsrs	r3, r3, #1
 8011254:	f100 0001 	add.w	r0, r0, #1
 8011258:	d005      	beq.n	8011266 <__lo0bits+0x5a>
 801125a:	600b      	str	r3, [r1, #0]
 801125c:	4770      	bx	lr
 801125e:	4610      	mov	r0, r2
 8011260:	e7e9      	b.n	8011236 <__lo0bits+0x2a>
 8011262:	2000      	movs	r0, #0
 8011264:	4770      	bx	lr
 8011266:	2020      	movs	r0, #32
 8011268:	4770      	bx	lr
	...

0801126c <__i2b>:
 801126c:	b510      	push	{r4, lr}
 801126e:	460c      	mov	r4, r1
 8011270:	2101      	movs	r1, #1
 8011272:	f7ff feb9 	bl	8010fe8 <_Balloc>
 8011276:	4602      	mov	r2, r0
 8011278:	b928      	cbnz	r0, 8011286 <__i2b+0x1a>
 801127a:	4b05      	ldr	r3, [pc, #20]	; (8011290 <__i2b+0x24>)
 801127c:	4805      	ldr	r0, [pc, #20]	; (8011294 <__i2b+0x28>)
 801127e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011282:	f000 fd6f 	bl	8011d64 <__assert_func>
 8011286:	2301      	movs	r3, #1
 8011288:	6144      	str	r4, [r0, #20]
 801128a:	6103      	str	r3, [r0, #16]
 801128c:	bd10      	pop	{r4, pc}
 801128e:	bf00      	nop
 8011290:	080151b8 	.word	0x080151b8
 8011294:	08015244 	.word	0x08015244

08011298 <__multiply>:
 8011298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801129c:	4691      	mov	r9, r2
 801129e:	690a      	ldr	r2, [r1, #16]
 80112a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	bfb8      	it	lt
 80112a8:	460b      	movlt	r3, r1
 80112aa:	460c      	mov	r4, r1
 80112ac:	bfbc      	itt	lt
 80112ae:	464c      	movlt	r4, r9
 80112b0:	4699      	movlt	r9, r3
 80112b2:	6927      	ldr	r7, [r4, #16]
 80112b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80112b8:	68a3      	ldr	r3, [r4, #8]
 80112ba:	6861      	ldr	r1, [r4, #4]
 80112bc:	eb07 060a 	add.w	r6, r7, sl
 80112c0:	42b3      	cmp	r3, r6
 80112c2:	b085      	sub	sp, #20
 80112c4:	bfb8      	it	lt
 80112c6:	3101      	addlt	r1, #1
 80112c8:	f7ff fe8e 	bl	8010fe8 <_Balloc>
 80112cc:	b930      	cbnz	r0, 80112dc <__multiply+0x44>
 80112ce:	4602      	mov	r2, r0
 80112d0:	4b44      	ldr	r3, [pc, #272]	; (80113e4 <__multiply+0x14c>)
 80112d2:	4845      	ldr	r0, [pc, #276]	; (80113e8 <__multiply+0x150>)
 80112d4:	f240 115d 	movw	r1, #349	; 0x15d
 80112d8:	f000 fd44 	bl	8011d64 <__assert_func>
 80112dc:	f100 0514 	add.w	r5, r0, #20
 80112e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80112e4:	462b      	mov	r3, r5
 80112e6:	2200      	movs	r2, #0
 80112e8:	4543      	cmp	r3, r8
 80112ea:	d321      	bcc.n	8011330 <__multiply+0x98>
 80112ec:	f104 0314 	add.w	r3, r4, #20
 80112f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80112f4:	f109 0314 	add.w	r3, r9, #20
 80112f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80112fc:	9202      	str	r2, [sp, #8]
 80112fe:	1b3a      	subs	r2, r7, r4
 8011300:	3a15      	subs	r2, #21
 8011302:	f022 0203 	bic.w	r2, r2, #3
 8011306:	3204      	adds	r2, #4
 8011308:	f104 0115 	add.w	r1, r4, #21
 801130c:	428f      	cmp	r7, r1
 801130e:	bf38      	it	cc
 8011310:	2204      	movcc	r2, #4
 8011312:	9201      	str	r2, [sp, #4]
 8011314:	9a02      	ldr	r2, [sp, #8]
 8011316:	9303      	str	r3, [sp, #12]
 8011318:	429a      	cmp	r2, r3
 801131a:	d80c      	bhi.n	8011336 <__multiply+0x9e>
 801131c:	2e00      	cmp	r6, #0
 801131e:	dd03      	ble.n	8011328 <__multiply+0x90>
 8011320:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011324:	2b00      	cmp	r3, #0
 8011326:	d05a      	beq.n	80113de <__multiply+0x146>
 8011328:	6106      	str	r6, [r0, #16]
 801132a:	b005      	add	sp, #20
 801132c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011330:	f843 2b04 	str.w	r2, [r3], #4
 8011334:	e7d8      	b.n	80112e8 <__multiply+0x50>
 8011336:	f8b3 a000 	ldrh.w	sl, [r3]
 801133a:	f1ba 0f00 	cmp.w	sl, #0
 801133e:	d024      	beq.n	801138a <__multiply+0xf2>
 8011340:	f104 0e14 	add.w	lr, r4, #20
 8011344:	46a9      	mov	r9, r5
 8011346:	f04f 0c00 	mov.w	ip, #0
 801134a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801134e:	f8d9 1000 	ldr.w	r1, [r9]
 8011352:	fa1f fb82 	uxth.w	fp, r2
 8011356:	b289      	uxth	r1, r1
 8011358:	fb0a 110b 	mla	r1, sl, fp, r1
 801135c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011360:	f8d9 2000 	ldr.w	r2, [r9]
 8011364:	4461      	add	r1, ip
 8011366:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801136a:	fb0a c20b 	mla	r2, sl, fp, ip
 801136e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011372:	b289      	uxth	r1, r1
 8011374:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011378:	4577      	cmp	r7, lr
 801137a:	f849 1b04 	str.w	r1, [r9], #4
 801137e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011382:	d8e2      	bhi.n	801134a <__multiply+0xb2>
 8011384:	9a01      	ldr	r2, [sp, #4]
 8011386:	f845 c002 	str.w	ip, [r5, r2]
 801138a:	9a03      	ldr	r2, [sp, #12]
 801138c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011390:	3304      	adds	r3, #4
 8011392:	f1b9 0f00 	cmp.w	r9, #0
 8011396:	d020      	beq.n	80113da <__multiply+0x142>
 8011398:	6829      	ldr	r1, [r5, #0]
 801139a:	f104 0c14 	add.w	ip, r4, #20
 801139e:	46ae      	mov	lr, r5
 80113a0:	f04f 0a00 	mov.w	sl, #0
 80113a4:	f8bc b000 	ldrh.w	fp, [ip]
 80113a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80113ac:	fb09 220b 	mla	r2, r9, fp, r2
 80113b0:	4492      	add	sl, r2
 80113b2:	b289      	uxth	r1, r1
 80113b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80113b8:	f84e 1b04 	str.w	r1, [lr], #4
 80113bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80113c0:	f8be 1000 	ldrh.w	r1, [lr]
 80113c4:	0c12      	lsrs	r2, r2, #16
 80113c6:	fb09 1102 	mla	r1, r9, r2, r1
 80113ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80113ce:	4567      	cmp	r7, ip
 80113d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80113d4:	d8e6      	bhi.n	80113a4 <__multiply+0x10c>
 80113d6:	9a01      	ldr	r2, [sp, #4]
 80113d8:	50a9      	str	r1, [r5, r2]
 80113da:	3504      	adds	r5, #4
 80113dc:	e79a      	b.n	8011314 <__multiply+0x7c>
 80113de:	3e01      	subs	r6, #1
 80113e0:	e79c      	b.n	801131c <__multiply+0x84>
 80113e2:	bf00      	nop
 80113e4:	080151b8 	.word	0x080151b8
 80113e8:	08015244 	.word	0x08015244

080113ec <__pow5mult>:
 80113ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113f0:	4615      	mov	r5, r2
 80113f2:	f012 0203 	ands.w	r2, r2, #3
 80113f6:	4606      	mov	r6, r0
 80113f8:	460f      	mov	r7, r1
 80113fa:	d007      	beq.n	801140c <__pow5mult+0x20>
 80113fc:	4c25      	ldr	r4, [pc, #148]	; (8011494 <__pow5mult+0xa8>)
 80113fe:	3a01      	subs	r2, #1
 8011400:	2300      	movs	r3, #0
 8011402:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011406:	f7ff fe51 	bl	80110ac <__multadd>
 801140a:	4607      	mov	r7, r0
 801140c:	10ad      	asrs	r5, r5, #2
 801140e:	d03d      	beq.n	801148c <__pow5mult+0xa0>
 8011410:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011412:	b97c      	cbnz	r4, 8011434 <__pow5mult+0x48>
 8011414:	2010      	movs	r0, #16
 8011416:	f7ff fdc1 	bl	8010f9c <malloc>
 801141a:	4602      	mov	r2, r0
 801141c:	6270      	str	r0, [r6, #36]	; 0x24
 801141e:	b928      	cbnz	r0, 801142c <__pow5mult+0x40>
 8011420:	4b1d      	ldr	r3, [pc, #116]	; (8011498 <__pow5mult+0xac>)
 8011422:	481e      	ldr	r0, [pc, #120]	; (801149c <__pow5mult+0xb0>)
 8011424:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011428:	f000 fc9c 	bl	8011d64 <__assert_func>
 801142c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011430:	6004      	str	r4, [r0, #0]
 8011432:	60c4      	str	r4, [r0, #12]
 8011434:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011438:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801143c:	b94c      	cbnz	r4, 8011452 <__pow5mult+0x66>
 801143e:	f240 2171 	movw	r1, #625	; 0x271
 8011442:	4630      	mov	r0, r6
 8011444:	f7ff ff12 	bl	801126c <__i2b>
 8011448:	2300      	movs	r3, #0
 801144a:	f8c8 0008 	str.w	r0, [r8, #8]
 801144e:	4604      	mov	r4, r0
 8011450:	6003      	str	r3, [r0, #0]
 8011452:	f04f 0900 	mov.w	r9, #0
 8011456:	07eb      	lsls	r3, r5, #31
 8011458:	d50a      	bpl.n	8011470 <__pow5mult+0x84>
 801145a:	4639      	mov	r1, r7
 801145c:	4622      	mov	r2, r4
 801145e:	4630      	mov	r0, r6
 8011460:	f7ff ff1a 	bl	8011298 <__multiply>
 8011464:	4639      	mov	r1, r7
 8011466:	4680      	mov	r8, r0
 8011468:	4630      	mov	r0, r6
 801146a:	f7ff fdfd 	bl	8011068 <_Bfree>
 801146e:	4647      	mov	r7, r8
 8011470:	106d      	asrs	r5, r5, #1
 8011472:	d00b      	beq.n	801148c <__pow5mult+0xa0>
 8011474:	6820      	ldr	r0, [r4, #0]
 8011476:	b938      	cbnz	r0, 8011488 <__pow5mult+0x9c>
 8011478:	4622      	mov	r2, r4
 801147a:	4621      	mov	r1, r4
 801147c:	4630      	mov	r0, r6
 801147e:	f7ff ff0b 	bl	8011298 <__multiply>
 8011482:	6020      	str	r0, [r4, #0]
 8011484:	f8c0 9000 	str.w	r9, [r0]
 8011488:	4604      	mov	r4, r0
 801148a:	e7e4      	b.n	8011456 <__pow5mult+0x6a>
 801148c:	4638      	mov	r0, r7
 801148e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011492:	bf00      	nop
 8011494:	08015390 	.word	0x08015390
 8011498:	08015146 	.word	0x08015146
 801149c:	08015244 	.word	0x08015244

080114a0 <__lshift>:
 80114a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114a4:	460c      	mov	r4, r1
 80114a6:	6849      	ldr	r1, [r1, #4]
 80114a8:	6923      	ldr	r3, [r4, #16]
 80114aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80114ae:	68a3      	ldr	r3, [r4, #8]
 80114b0:	4607      	mov	r7, r0
 80114b2:	4691      	mov	r9, r2
 80114b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80114b8:	f108 0601 	add.w	r6, r8, #1
 80114bc:	42b3      	cmp	r3, r6
 80114be:	db0b      	blt.n	80114d8 <__lshift+0x38>
 80114c0:	4638      	mov	r0, r7
 80114c2:	f7ff fd91 	bl	8010fe8 <_Balloc>
 80114c6:	4605      	mov	r5, r0
 80114c8:	b948      	cbnz	r0, 80114de <__lshift+0x3e>
 80114ca:	4602      	mov	r2, r0
 80114cc:	4b2a      	ldr	r3, [pc, #168]	; (8011578 <__lshift+0xd8>)
 80114ce:	482b      	ldr	r0, [pc, #172]	; (801157c <__lshift+0xdc>)
 80114d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80114d4:	f000 fc46 	bl	8011d64 <__assert_func>
 80114d8:	3101      	adds	r1, #1
 80114da:	005b      	lsls	r3, r3, #1
 80114dc:	e7ee      	b.n	80114bc <__lshift+0x1c>
 80114de:	2300      	movs	r3, #0
 80114e0:	f100 0114 	add.w	r1, r0, #20
 80114e4:	f100 0210 	add.w	r2, r0, #16
 80114e8:	4618      	mov	r0, r3
 80114ea:	4553      	cmp	r3, sl
 80114ec:	db37      	blt.n	801155e <__lshift+0xbe>
 80114ee:	6920      	ldr	r0, [r4, #16]
 80114f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80114f4:	f104 0314 	add.w	r3, r4, #20
 80114f8:	f019 091f 	ands.w	r9, r9, #31
 80114fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011500:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011504:	d02f      	beq.n	8011566 <__lshift+0xc6>
 8011506:	f1c9 0e20 	rsb	lr, r9, #32
 801150a:	468a      	mov	sl, r1
 801150c:	f04f 0c00 	mov.w	ip, #0
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	fa02 f209 	lsl.w	r2, r2, r9
 8011516:	ea42 020c 	orr.w	r2, r2, ip
 801151a:	f84a 2b04 	str.w	r2, [sl], #4
 801151e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011522:	4298      	cmp	r0, r3
 8011524:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011528:	d8f2      	bhi.n	8011510 <__lshift+0x70>
 801152a:	1b03      	subs	r3, r0, r4
 801152c:	3b15      	subs	r3, #21
 801152e:	f023 0303 	bic.w	r3, r3, #3
 8011532:	3304      	adds	r3, #4
 8011534:	f104 0215 	add.w	r2, r4, #21
 8011538:	4290      	cmp	r0, r2
 801153a:	bf38      	it	cc
 801153c:	2304      	movcc	r3, #4
 801153e:	f841 c003 	str.w	ip, [r1, r3]
 8011542:	f1bc 0f00 	cmp.w	ip, #0
 8011546:	d001      	beq.n	801154c <__lshift+0xac>
 8011548:	f108 0602 	add.w	r6, r8, #2
 801154c:	3e01      	subs	r6, #1
 801154e:	4638      	mov	r0, r7
 8011550:	612e      	str	r6, [r5, #16]
 8011552:	4621      	mov	r1, r4
 8011554:	f7ff fd88 	bl	8011068 <_Bfree>
 8011558:	4628      	mov	r0, r5
 801155a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801155e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011562:	3301      	adds	r3, #1
 8011564:	e7c1      	b.n	80114ea <__lshift+0x4a>
 8011566:	3904      	subs	r1, #4
 8011568:	f853 2b04 	ldr.w	r2, [r3], #4
 801156c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011570:	4298      	cmp	r0, r3
 8011572:	d8f9      	bhi.n	8011568 <__lshift+0xc8>
 8011574:	e7ea      	b.n	801154c <__lshift+0xac>
 8011576:	bf00      	nop
 8011578:	080151b8 	.word	0x080151b8
 801157c:	08015244 	.word	0x08015244

08011580 <__mcmp>:
 8011580:	b530      	push	{r4, r5, lr}
 8011582:	6902      	ldr	r2, [r0, #16]
 8011584:	690c      	ldr	r4, [r1, #16]
 8011586:	1b12      	subs	r2, r2, r4
 8011588:	d10e      	bne.n	80115a8 <__mcmp+0x28>
 801158a:	f100 0314 	add.w	r3, r0, #20
 801158e:	3114      	adds	r1, #20
 8011590:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011594:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011598:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801159c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80115a0:	42a5      	cmp	r5, r4
 80115a2:	d003      	beq.n	80115ac <__mcmp+0x2c>
 80115a4:	d305      	bcc.n	80115b2 <__mcmp+0x32>
 80115a6:	2201      	movs	r2, #1
 80115a8:	4610      	mov	r0, r2
 80115aa:	bd30      	pop	{r4, r5, pc}
 80115ac:	4283      	cmp	r3, r0
 80115ae:	d3f3      	bcc.n	8011598 <__mcmp+0x18>
 80115b0:	e7fa      	b.n	80115a8 <__mcmp+0x28>
 80115b2:	f04f 32ff 	mov.w	r2, #4294967295
 80115b6:	e7f7      	b.n	80115a8 <__mcmp+0x28>

080115b8 <__mdiff>:
 80115b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115bc:	460c      	mov	r4, r1
 80115be:	4606      	mov	r6, r0
 80115c0:	4611      	mov	r1, r2
 80115c2:	4620      	mov	r0, r4
 80115c4:	4690      	mov	r8, r2
 80115c6:	f7ff ffdb 	bl	8011580 <__mcmp>
 80115ca:	1e05      	subs	r5, r0, #0
 80115cc:	d110      	bne.n	80115f0 <__mdiff+0x38>
 80115ce:	4629      	mov	r1, r5
 80115d0:	4630      	mov	r0, r6
 80115d2:	f7ff fd09 	bl	8010fe8 <_Balloc>
 80115d6:	b930      	cbnz	r0, 80115e6 <__mdiff+0x2e>
 80115d8:	4b3a      	ldr	r3, [pc, #232]	; (80116c4 <__mdiff+0x10c>)
 80115da:	4602      	mov	r2, r0
 80115dc:	f240 2132 	movw	r1, #562	; 0x232
 80115e0:	4839      	ldr	r0, [pc, #228]	; (80116c8 <__mdiff+0x110>)
 80115e2:	f000 fbbf 	bl	8011d64 <__assert_func>
 80115e6:	2301      	movs	r3, #1
 80115e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80115ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f0:	bfa4      	itt	ge
 80115f2:	4643      	movge	r3, r8
 80115f4:	46a0      	movge	r8, r4
 80115f6:	4630      	mov	r0, r6
 80115f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80115fc:	bfa6      	itte	ge
 80115fe:	461c      	movge	r4, r3
 8011600:	2500      	movge	r5, #0
 8011602:	2501      	movlt	r5, #1
 8011604:	f7ff fcf0 	bl	8010fe8 <_Balloc>
 8011608:	b920      	cbnz	r0, 8011614 <__mdiff+0x5c>
 801160a:	4b2e      	ldr	r3, [pc, #184]	; (80116c4 <__mdiff+0x10c>)
 801160c:	4602      	mov	r2, r0
 801160e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011612:	e7e5      	b.n	80115e0 <__mdiff+0x28>
 8011614:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011618:	6926      	ldr	r6, [r4, #16]
 801161a:	60c5      	str	r5, [r0, #12]
 801161c:	f104 0914 	add.w	r9, r4, #20
 8011620:	f108 0514 	add.w	r5, r8, #20
 8011624:	f100 0e14 	add.w	lr, r0, #20
 8011628:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801162c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011630:	f108 0210 	add.w	r2, r8, #16
 8011634:	46f2      	mov	sl, lr
 8011636:	2100      	movs	r1, #0
 8011638:	f859 3b04 	ldr.w	r3, [r9], #4
 801163c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011640:	fa1f f883 	uxth.w	r8, r3
 8011644:	fa11 f18b 	uxtah	r1, r1, fp
 8011648:	0c1b      	lsrs	r3, r3, #16
 801164a:	eba1 0808 	sub.w	r8, r1, r8
 801164e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011652:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011656:	fa1f f888 	uxth.w	r8, r8
 801165a:	1419      	asrs	r1, r3, #16
 801165c:	454e      	cmp	r6, r9
 801165e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011662:	f84a 3b04 	str.w	r3, [sl], #4
 8011666:	d8e7      	bhi.n	8011638 <__mdiff+0x80>
 8011668:	1b33      	subs	r3, r6, r4
 801166a:	3b15      	subs	r3, #21
 801166c:	f023 0303 	bic.w	r3, r3, #3
 8011670:	3304      	adds	r3, #4
 8011672:	3415      	adds	r4, #21
 8011674:	42a6      	cmp	r6, r4
 8011676:	bf38      	it	cc
 8011678:	2304      	movcc	r3, #4
 801167a:	441d      	add	r5, r3
 801167c:	4473      	add	r3, lr
 801167e:	469e      	mov	lr, r3
 8011680:	462e      	mov	r6, r5
 8011682:	4566      	cmp	r6, ip
 8011684:	d30e      	bcc.n	80116a4 <__mdiff+0xec>
 8011686:	f10c 0203 	add.w	r2, ip, #3
 801168a:	1b52      	subs	r2, r2, r5
 801168c:	f022 0203 	bic.w	r2, r2, #3
 8011690:	3d03      	subs	r5, #3
 8011692:	45ac      	cmp	ip, r5
 8011694:	bf38      	it	cc
 8011696:	2200      	movcc	r2, #0
 8011698:	441a      	add	r2, r3
 801169a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801169e:	b17b      	cbz	r3, 80116c0 <__mdiff+0x108>
 80116a0:	6107      	str	r7, [r0, #16]
 80116a2:	e7a3      	b.n	80115ec <__mdiff+0x34>
 80116a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80116a8:	fa11 f288 	uxtah	r2, r1, r8
 80116ac:	1414      	asrs	r4, r2, #16
 80116ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80116b2:	b292      	uxth	r2, r2
 80116b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80116b8:	f84e 2b04 	str.w	r2, [lr], #4
 80116bc:	1421      	asrs	r1, r4, #16
 80116be:	e7e0      	b.n	8011682 <__mdiff+0xca>
 80116c0:	3f01      	subs	r7, #1
 80116c2:	e7ea      	b.n	801169a <__mdiff+0xe2>
 80116c4:	080151b8 	.word	0x080151b8
 80116c8:	08015244 	.word	0x08015244

080116cc <__ulp>:
 80116cc:	b082      	sub	sp, #8
 80116ce:	ed8d 0b00 	vstr	d0, [sp]
 80116d2:	9b01      	ldr	r3, [sp, #4]
 80116d4:	4912      	ldr	r1, [pc, #72]	; (8011720 <__ulp+0x54>)
 80116d6:	4019      	ands	r1, r3
 80116d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80116dc:	2900      	cmp	r1, #0
 80116de:	dd05      	ble.n	80116ec <__ulp+0x20>
 80116e0:	2200      	movs	r2, #0
 80116e2:	460b      	mov	r3, r1
 80116e4:	ec43 2b10 	vmov	d0, r2, r3
 80116e8:	b002      	add	sp, #8
 80116ea:	4770      	bx	lr
 80116ec:	4249      	negs	r1, r1
 80116ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80116f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80116f6:	f04f 0200 	mov.w	r2, #0
 80116fa:	f04f 0300 	mov.w	r3, #0
 80116fe:	da04      	bge.n	801170a <__ulp+0x3e>
 8011700:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011704:	fa41 f300 	asr.w	r3, r1, r0
 8011708:	e7ec      	b.n	80116e4 <__ulp+0x18>
 801170a:	f1a0 0114 	sub.w	r1, r0, #20
 801170e:	291e      	cmp	r1, #30
 8011710:	bfda      	itte	le
 8011712:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011716:	fa20 f101 	lsrle.w	r1, r0, r1
 801171a:	2101      	movgt	r1, #1
 801171c:	460a      	mov	r2, r1
 801171e:	e7e1      	b.n	80116e4 <__ulp+0x18>
 8011720:	7ff00000 	.word	0x7ff00000

08011724 <__b2d>:
 8011724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011726:	6905      	ldr	r5, [r0, #16]
 8011728:	f100 0714 	add.w	r7, r0, #20
 801172c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011730:	1f2e      	subs	r6, r5, #4
 8011732:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011736:	4620      	mov	r0, r4
 8011738:	f7ff fd48 	bl	80111cc <__hi0bits>
 801173c:	f1c0 0320 	rsb	r3, r0, #32
 8011740:	280a      	cmp	r0, #10
 8011742:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80117c0 <__b2d+0x9c>
 8011746:	600b      	str	r3, [r1, #0]
 8011748:	dc14      	bgt.n	8011774 <__b2d+0x50>
 801174a:	f1c0 0e0b 	rsb	lr, r0, #11
 801174e:	fa24 f10e 	lsr.w	r1, r4, lr
 8011752:	42b7      	cmp	r7, r6
 8011754:	ea41 030c 	orr.w	r3, r1, ip
 8011758:	bf34      	ite	cc
 801175a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801175e:	2100      	movcs	r1, #0
 8011760:	3015      	adds	r0, #21
 8011762:	fa04 f000 	lsl.w	r0, r4, r0
 8011766:	fa21 f10e 	lsr.w	r1, r1, lr
 801176a:	ea40 0201 	orr.w	r2, r0, r1
 801176e:	ec43 2b10 	vmov	d0, r2, r3
 8011772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011774:	42b7      	cmp	r7, r6
 8011776:	bf3a      	itte	cc
 8011778:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801177c:	f1a5 0608 	subcc.w	r6, r5, #8
 8011780:	2100      	movcs	r1, #0
 8011782:	380b      	subs	r0, #11
 8011784:	d017      	beq.n	80117b6 <__b2d+0x92>
 8011786:	f1c0 0c20 	rsb	ip, r0, #32
 801178a:	fa04 f500 	lsl.w	r5, r4, r0
 801178e:	42be      	cmp	r6, r7
 8011790:	fa21 f40c 	lsr.w	r4, r1, ip
 8011794:	ea45 0504 	orr.w	r5, r5, r4
 8011798:	bf8c      	ite	hi
 801179a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801179e:	2400      	movls	r4, #0
 80117a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80117a4:	fa01 f000 	lsl.w	r0, r1, r0
 80117a8:	fa24 f40c 	lsr.w	r4, r4, ip
 80117ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80117b0:	ea40 0204 	orr.w	r2, r0, r4
 80117b4:	e7db      	b.n	801176e <__b2d+0x4a>
 80117b6:	ea44 030c 	orr.w	r3, r4, ip
 80117ba:	460a      	mov	r2, r1
 80117bc:	e7d7      	b.n	801176e <__b2d+0x4a>
 80117be:	bf00      	nop
 80117c0:	3ff00000 	.word	0x3ff00000

080117c4 <__d2b>:
 80117c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80117c8:	4689      	mov	r9, r1
 80117ca:	2101      	movs	r1, #1
 80117cc:	ec57 6b10 	vmov	r6, r7, d0
 80117d0:	4690      	mov	r8, r2
 80117d2:	f7ff fc09 	bl	8010fe8 <_Balloc>
 80117d6:	4604      	mov	r4, r0
 80117d8:	b930      	cbnz	r0, 80117e8 <__d2b+0x24>
 80117da:	4602      	mov	r2, r0
 80117dc:	4b25      	ldr	r3, [pc, #148]	; (8011874 <__d2b+0xb0>)
 80117de:	4826      	ldr	r0, [pc, #152]	; (8011878 <__d2b+0xb4>)
 80117e0:	f240 310a 	movw	r1, #778	; 0x30a
 80117e4:	f000 fabe 	bl	8011d64 <__assert_func>
 80117e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80117ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80117f0:	bb35      	cbnz	r5, 8011840 <__d2b+0x7c>
 80117f2:	2e00      	cmp	r6, #0
 80117f4:	9301      	str	r3, [sp, #4]
 80117f6:	d028      	beq.n	801184a <__d2b+0x86>
 80117f8:	4668      	mov	r0, sp
 80117fa:	9600      	str	r6, [sp, #0]
 80117fc:	f7ff fd06 	bl	801120c <__lo0bits>
 8011800:	9900      	ldr	r1, [sp, #0]
 8011802:	b300      	cbz	r0, 8011846 <__d2b+0x82>
 8011804:	9a01      	ldr	r2, [sp, #4]
 8011806:	f1c0 0320 	rsb	r3, r0, #32
 801180a:	fa02 f303 	lsl.w	r3, r2, r3
 801180e:	430b      	orrs	r3, r1
 8011810:	40c2      	lsrs	r2, r0
 8011812:	6163      	str	r3, [r4, #20]
 8011814:	9201      	str	r2, [sp, #4]
 8011816:	9b01      	ldr	r3, [sp, #4]
 8011818:	61a3      	str	r3, [r4, #24]
 801181a:	2b00      	cmp	r3, #0
 801181c:	bf14      	ite	ne
 801181e:	2202      	movne	r2, #2
 8011820:	2201      	moveq	r2, #1
 8011822:	6122      	str	r2, [r4, #16]
 8011824:	b1d5      	cbz	r5, 801185c <__d2b+0x98>
 8011826:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801182a:	4405      	add	r5, r0
 801182c:	f8c9 5000 	str.w	r5, [r9]
 8011830:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011834:	f8c8 0000 	str.w	r0, [r8]
 8011838:	4620      	mov	r0, r4
 801183a:	b003      	add	sp, #12
 801183c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011844:	e7d5      	b.n	80117f2 <__d2b+0x2e>
 8011846:	6161      	str	r1, [r4, #20]
 8011848:	e7e5      	b.n	8011816 <__d2b+0x52>
 801184a:	a801      	add	r0, sp, #4
 801184c:	f7ff fcde 	bl	801120c <__lo0bits>
 8011850:	9b01      	ldr	r3, [sp, #4]
 8011852:	6163      	str	r3, [r4, #20]
 8011854:	2201      	movs	r2, #1
 8011856:	6122      	str	r2, [r4, #16]
 8011858:	3020      	adds	r0, #32
 801185a:	e7e3      	b.n	8011824 <__d2b+0x60>
 801185c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011860:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011864:	f8c9 0000 	str.w	r0, [r9]
 8011868:	6918      	ldr	r0, [r3, #16]
 801186a:	f7ff fcaf 	bl	80111cc <__hi0bits>
 801186e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011872:	e7df      	b.n	8011834 <__d2b+0x70>
 8011874:	080151b8 	.word	0x080151b8
 8011878:	08015244 	.word	0x08015244

0801187c <__ratio>:
 801187c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011880:	4688      	mov	r8, r1
 8011882:	4669      	mov	r1, sp
 8011884:	4681      	mov	r9, r0
 8011886:	f7ff ff4d 	bl	8011724 <__b2d>
 801188a:	a901      	add	r1, sp, #4
 801188c:	4640      	mov	r0, r8
 801188e:	ec55 4b10 	vmov	r4, r5, d0
 8011892:	f7ff ff47 	bl	8011724 <__b2d>
 8011896:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801189a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801189e:	eba3 0c02 	sub.w	ip, r3, r2
 80118a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80118a6:	1a9b      	subs	r3, r3, r2
 80118a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80118ac:	ec51 0b10 	vmov	r0, r1, d0
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	bfd6      	itet	le
 80118b4:	460a      	movle	r2, r1
 80118b6:	462a      	movgt	r2, r5
 80118b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80118bc:	468b      	mov	fp, r1
 80118be:	462f      	mov	r7, r5
 80118c0:	bfd4      	ite	le
 80118c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80118c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80118ca:	4620      	mov	r0, r4
 80118cc:	ee10 2a10 	vmov	r2, s0
 80118d0:	465b      	mov	r3, fp
 80118d2:	4639      	mov	r1, r7
 80118d4:	f7ee ffc2 	bl	800085c <__aeabi_ddiv>
 80118d8:	ec41 0b10 	vmov	d0, r0, r1
 80118dc:	b003      	add	sp, #12
 80118de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080118e2 <__copybits>:
 80118e2:	3901      	subs	r1, #1
 80118e4:	b570      	push	{r4, r5, r6, lr}
 80118e6:	1149      	asrs	r1, r1, #5
 80118e8:	6914      	ldr	r4, [r2, #16]
 80118ea:	3101      	adds	r1, #1
 80118ec:	f102 0314 	add.w	r3, r2, #20
 80118f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80118f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80118f8:	1f05      	subs	r5, r0, #4
 80118fa:	42a3      	cmp	r3, r4
 80118fc:	d30c      	bcc.n	8011918 <__copybits+0x36>
 80118fe:	1aa3      	subs	r3, r4, r2
 8011900:	3b11      	subs	r3, #17
 8011902:	f023 0303 	bic.w	r3, r3, #3
 8011906:	3211      	adds	r2, #17
 8011908:	42a2      	cmp	r2, r4
 801190a:	bf88      	it	hi
 801190c:	2300      	movhi	r3, #0
 801190e:	4418      	add	r0, r3
 8011910:	2300      	movs	r3, #0
 8011912:	4288      	cmp	r0, r1
 8011914:	d305      	bcc.n	8011922 <__copybits+0x40>
 8011916:	bd70      	pop	{r4, r5, r6, pc}
 8011918:	f853 6b04 	ldr.w	r6, [r3], #4
 801191c:	f845 6f04 	str.w	r6, [r5, #4]!
 8011920:	e7eb      	b.n	80118fa <__copybits+0x18>
 8011922:	f840 3b04 	str.w	r3, [r0], #4
 8011926:	e7f4      	b.n	8011912 <__copybits+0x30>

08011928 <__any_on>:
 8011928:	f100 0214 	add.w	r2, r0, #20
 801192c:	6900      	ldr	r0, [r0, #16]
 801192e:	114b      	asrs	r3, r1, #5
 8011930:	4298      	cmp	r0, r3
 8011932:	b510      	push	{r4, lr}
 8011934:	db11      	blt.n	801195a <__any_on+0x32>
 8011936:	dd0a      	ble.n	801194e <__any_on+0x26>
 8011938:	f011 011f 	ands.w	r1, r1, #31
 801193c:	d007      	beq.n	801194e <__any_on+0x26>
 801193e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011942:	fa24 f001 	lsr.w	r0, r4, r1
 8011946:	fa00 f101 	lsl.w	r1, r0, r1
 801194a:	428c      	cmp	r4, r1
 801194c:	d10b      	bne.n	8011966 <__any_on+0x3e>
 801194e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011952:	4293      	cmp	r3, r2
 8011954:	d803      	bhi.n	801195e <__any_on+0x36>
 8011956:	2000      	movs	r0, #0
 8011958:	bd10      	pop	{r4, pc}
 801195a:	4603      	mov	r3, r0
 801195c:	e7f7      	b.n	801194e <__any_on+0x26>
 801195e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011962:	2900      	cmp	r1, #0
 8011964:	d0f5      	beq.n	8011952 <__any_on+0x2a>
 8011966:	2001      	movs	r0, #1
 8011968:	e7f6      	b.n	8011958 <__any_on+0x30>

0801196a <_calloc_r>:
 801196a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801196c:	fba1 2402 	umull	r2, r4, r1, r2
 8011970:	b94c      	cbnz	r4, 8011986 <_calloc_r+0x1c>
 8011972:	4611      	mov	r1, r2
 8011974:	9201      	str	r2, [sp, #4]
 8011976:	f7fc f9ad 	bl	800dcd4 <_malloc_r>
 801197a:	9a01      	ldr	r2, [sp, #4]
 801197c:	4605      	mov	r5, r0
 801197e:	b930      	cbnz	r0, 801198e <_calloc_r+0x24>
 8011980:	4628      	mov	r0, r5
 8011982:	b003      	add	sp, #12
 8011984:	bd30      	pop	{r4, r5, pc}
 8011986:	220c      	movs	r2, #12
 8011988:	6002      	str	r2, [r0, #0]
 801198a:	2500      	movs	r5, #0
 801198c:	e7f8      	b.n	8011980 <_calloc_r+0x16>
 801198e:	4621      	mov	r1, r4
 8011990:	f7fc f977 	bl	800dc82 <memset>
 8011994:	e7f4      	b.n	8011980 <_calloc_r+0x16>
	...

08011998 <_free_r>:
 8011998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801199a:	2900      	cmp	r1, #0
 801199c:	d044      	beq.n	8011a28 <_free_r+0x90>
 801199e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119a2:	9001      	str	r0, [sp, #4]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	f1a1 0404 	sub.w	r4, r1, #4
 80119aa:	bfb8      	it	lt
 80119ac:	18e4      	addlt	r4, r4, r3
 80119ae:	f7ff fb0f 	bl	8010fd0 <__malloc_lock>
 80119b2:	4a1e      	ldr	r2, [pc, #120]	; (8011a2c <_free_r+0x94>)
 80119b4:	9801      	ldr	r0, [sp, #4]
 80119b6:	6813      	ldr	r3, [r2, #0]
 80119b8:	b933      	cbnz	r3, 80119c8 <_free_r+0x30>
 80119ba:	6063      	str	r3, [r4, #4]
 80119bc:	6014      	str	r4, [r2, #0]
 80119be:	b003      	add	sp, #12
 80119c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119c4:	f7ff bb0a 	b.w	8010fdc <__malloc_unlock>
 80119c8:	42a3      	cmp	r3, r4
 80119ca:	d908      	bls.n	80119de <_free_r+0x46>
 80119cc:	6825      	ldr	r5, [r4, #0]
 80119ce:	1961      	adds	r1, r4, r5
 80119d0:	428b      	cmp	r3, r1
 80119d2:	bf01      	itttt	eq
 80119d4:	6819      	ldreq	r1, [r3, #0]
 80119d6:	685b      	ldreq	r3, [r3, #4]
 80119d8:	1949      	addeq	r1, r1, r5
 80119da:	6021      	streq	r1, [r4, #0]
 80119dc:	e7ed      	b.n	80119ba <_free_r+0x22>
 80119de:	461a      	mov	r2, r3
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	b10b      	cbz	r3, 80119e8 <_free_r+0x50>
 80119e4:	42a3      	cmp	r3, r4
 80119e6:	d9fa      	bls.n	80119de <_free_r+0x46>
 80119e8:	6811      	ldr	r1, [r2, #0]
 80119ea:	1855      	adds	r5, r2, r1
 80119ec:	42a5      	cmp	r5, r4
 80119ee:	d10b      	bne.n	8011a08 <_free_r+0x70>
 80119f0:	6824      	ldr	r4, [r4, #0]
 80119f2:	4421      	add	r1, r4
 80119f4:	1854      	adds	r4, r2, r1
 80119f6:	42a3      	cmp	r3, r4
 80119f8:	6011      	str	r1, [r2, #0]
 80119fa:	d1e0      	bne.n	80119be <_free_r+0x26>
 80119fc:	681c      	ldr	r4, [r3, #0]
 80119fe:	685b      	ldr	r3, [r3, #4]
 8011a00:	6053      	str	r3, [r2, #4]
 8011a02:	4421      	add	r1, r4
 8011a04:	6011      	str	r1, [r2, #0]
 8011a06:	e7da      	b.n	80119be <_free_r+0x26>
 8011a08:	d902      	bls.n	8011a10 <_free_r+0x78>
 8011a0a:	230c      	movs	r3, #12
 8011a0c:	6003      	str	r3, [r0, #0]
 8011a0e:	e7d6      	b.n	80119be <_free_r+0x26>
 8011a10:	6825      	ldr	r5, [r4, #0]
 8011a12:	1961      	adds	r1, r4, r5
 8011a14:	428b      	cmp	r3, r1
 8011a16:	bf04      	itt	eq
 8011a18:	6819      	ldreq	r1, [r3, #0]
 8011a1a:	685b      	ldreq	r3, [r3, #4]
 8011a1c:	6063      	str	r3, [r4, #4]
 8011a1e:	bf04      	itt	eq
 8011a20:	1949      	addeq	r1, r1, r5
 8011a22:	6021      	streq	r1, [r4, #0]
 8011a24:	6054      	str	r4, [r2, #4]
 8011a26:	e7ca      	b.n	80119be <_free_r+0x26>
 8011a28:	b003      	add	sp, #12
 8011a2a:	bd30      	pop	{r4, r5, pc}
 8011a2c:	20005010 	.word	0x20005010

08011a30 <__ssputs_r>:
 8011a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a34:	688e      	ldr	r6, [r1, #8]
 8011a36:	429e      	cmp	r6, r3
 8011a38:	4682      	mov	sl, r0
 8011a3a:	460c      	mov	r4, r1
 8011a3c:	4690      	mov	r8, r2
 8011a3e:	461f      	mov	r7, r3
 8011a40:	d838      	bhi.n	8011ab4 <__ssputs_r+0x84>
 8011a42:	898a      	ldrh	r2, [r1, #12]
 8011a44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011a48:	d032      	beq.n	8011ab0 <__ssputs_r+0x80>
 8011a4a:	6825      	ldr	r5, [r4, #0]
 8011a4c:	6909      	ldr	r1, [r1, #16]
 8011a4e:	eba5 0901 	sub.w	r9, r5, r1
 8011a52:	6965      	ldr	r5, [r4, #20]
 8011a54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	444b      	add	r3, r9
 8011a60:	106d      	asrs	r5, r5, #1
 8011a62:	429d      	cmp	r5, r3
 8011a64:	bf38      	it	cc
 8011a66:	461d      	movcc	r5, r3
 8011a68:	0553      	lsls	r3, r2, #21
 8011a6a:	d531      	bpl.n	8011ad0 <__ssputs_r+0xa0>
 8011a6c:	4629      	mov	r1, r5
 8011a6e:	f7fc f931 	bl	800dcd4 <_malloc_r>
 8011a72:	4606      	mov	r6, r0
 8011a74:	b950      	cbnz	r0, 8011a8c <__ssputs_r+0x5c>
 8011a76:	230c      	movs	r3, #12
 8011a78:	f8ca 3000 	str.w	r3, [sl]
 8011a7c:	89a3      	ldrh	r3, [r4, #12]
 8011a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a82:	81a3      	strh	r3, [r4, #12]
 8011a84:	f04f 30ff 	mov.w	r0, #4294967295
 8011a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a8c:	6921      	ldr	r1, [r4, #16]
 8011a8e:	464a      	mov	r2, r9
 8011a90:	f7fc f8e9 	bl	800dc66 <memcpy>
 8011a94:	89a3      	ldrh	r3, [r4, #12]
 8011a96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a9e:	81a3      	strh	r3, [r4, #12]
 8011aa0:	6126      	str	r6, [r4, #16]
 8011aa2:	6165      	str	r5, [r4, #20]
 8011aa4:	444e      	add	r6, r9
 8011aa6:	eba5 0509 	sub.w	r5, r5, r9
 8011aaa:	6026      	str	r6, [r4, #0]
 8011aac:	60a5      	str	r5, [r4, #8]
 8011aae:	463e      	mov	r6, r7
 8011ab0:	42be      	cmp	r6, r7
 8011ab2:	d900      	bls.n	8011ab6 <__ssputs_r+0x86>
 8011ab4:	463e      	mov	r6, r7
 8011ab6:	6820      	ldr	r0, [r4, #0]
 8011ab8:	4632      	mov	r2, r6
 8011aba:	4641      	mov	r1, r8
 8011abc:	f000 f982 	bl	8011dc4 <memmove>
 8011ac0:	68a3      	ldr	r3, [r4, #8]
 8011ac2:	1b9b      	subs	r3, r3, r6
 8011ac4:	60a3      	str	r3, [r4, #8]
 8011ac6:	6823      	ldr	r3, [r4, #0]
 8011ac8:	4433      	add	r3, r6
 8011aca:	6023      	str	r3, [r4, #0]
 8011acc:	2000      	movs	r0, #0
 8011ace:	e7db      	b.n	8011a88 <__ssputs_r+0x58>
 8011ad0:	462a      	mov	r2, r5
 8011ad2:	f000 f991 	bl	8011df8 <_realloc_r>
 8011ad6:	4606      	mov	r6, r0
 8011ad8:	2800      	cmp	r0, #0
 8011ada:	d1e1      	bne.n	8011aa0 <__ssputs_r+0x70>
 8011adc:	6921      	ldr	r1, [r4, #16]
 8011ade:	4650      	mov	r0, sl
 8011ae0:	f7ff ff5a 	bl	8011998 <_free_r>
 8011ae4:	e7c7      	b.n	8011a76 <__ssputs_r+0x46>
	...

08011ae8 <_svfiprintf_r>:
 8011ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aec:	4698      	mov	r8, r3
 8011aee:	898b      	ldrh	r3, [r1, #12]
 8011af0:	061b      	lsls	r3, r3, #24
 8011af2:	b09d      	sub	sp, #116	; 0x74
 8011af4:	4607      	mov	r7, r0
 8011af6:	460d      	mov	r5, r1
 8011af8:	4614      	mov	r4, r2
 8011afa:	d50e      	bpl.n	8011b1a <_svfiprintf_r+0x32>
 8011afc:	690b      	ldr	r3, [r1, #16]
 8011afe:	b963      	cbnz	r3, 8011b1a <_svfiprintf_r+0x32>
 8011b00:	2140      	movs	r1, #64	; 0x40
 8011b02:	f7fc f8e7 	bl	800dcd4 <_malloc_r>
 8011b06:	6028      	str	r0, [r5, #0]
 8011b08:	6128      	str	r0, [r5, #16]
 8011b0a:	b920      	cbnz	r0, 8011b16 <_svfiprintf_r+0x2e>
 8011b0c:	230c      	movs	r3, #12
 8011b0e:	603b      	str	r3, [r7, #0]
 8011b10:	f04f 30ff 	mov.w	r0, #4294967295
 8011b14:	e0d1      	b.n	8011cba <_svfiprintf_r+0x1d2>
 8011b16:	2340      	movs	r3, #64	; 0x40
 8011b18:	616b      	str	r3, [r5, #20]
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8011b1e:	2320      	movs	r3, #32
 8011b20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b24:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b28:	2330      	movs	r3, #48	; 0x30
 8011b2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011cd4 <_svfiprintf_r+0x1ec>
 8011b2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b32:	f04f 0901 	mov.w	r9, #1
 8011b36:	4623      	mov	r3, r4
 8011b38:	469a      	mov	sl, r3
 8011b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b3e:	b10a      	cbz	r2, 8011b44 <_svfiprintf_r+0x5c>
 8011b40:	2a25      	cmp	r2, #37	; 0x25
 8011b42:	d1f9      	bne.n	8011b38 <_svfiprintf_r+0x50>
 8011b44:	ebba 0b04 	subs.w	fp, sl, r4
 8011b48:	d00b      	beq.n	8011b62 <_svfiprintf_r+0x7a>
 8011b4a:	465b      	mov	r3, fp
 8011b4c:	4622      	mov	r2, r4
 8011b4e:	4629      	mov	r1, r5
 8011b50:	4638      	mov	r0, r7
 8011b52:	f7ff ff6d 	bl	8011a30 <__ssputs_r>
 8011b56:	3001      	adds	r0, #1
 8011b58:	f000 80aa 	beq.w	8011cb0 <_svfiprintf_r+0x1c8>
 8011b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b5e:	445a      	add	r2, fp
 8011b60:	9209      	str	r2, [sp, #36]	; 0x24
 8011b62:	f89a 3000 	ldrb.w	r3, [sl]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	f000 80a2 	beq.w	8011cb0 <_svfiprintf_r+0x1c8>
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8011b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b76:	f10a 0a01 	add.w	sl, sl, #1
 8011b7a:	9304      	str	r3, [sp, #16]
 8011b7c:	9307      	str	r3, [sp, #28]
 8011b7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b82:	931a      	str	r3, [sp, #104]	; 0x68
 8011b84:	4654      	mov	r4, sl
 8011b86:	2205      	movs	r2, #5
 8011b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b8c:	4851      	ldr	r0, [pc, #324]	; (8011cd4 <_svfiprintf_r+0x1ec>)
 8011b8e:	f7ee fb2f 	bl	80001f0 <memchr>
 8011b92:	9a04      	ldr	r2, [sp, #16]
 8011b94:	b9d8      	cbnz	r0, 8011bce <_svfiprintf_r+0xe6>
 8011b96:	06d0      	lsls	r0, r2, #27
 8011b98:	bf44      	itt	mi
 8011b9a:	2320      	movmi	r3, #32
 8011b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ba0:	0711      	lsls	r1, r2, #28
 8011ba2:	bf44      	itt	mi
 8011ba4:	232b      	movmi	r3, #43	; 0x2b
 8011ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011baa:	f89a 3000 	ldrb.w	r3, [sl]
 8011bae:	2b2a      	cmp	r3, #42	; 0x2a
 8011bb0:	d015      	beq.n	8011bde <_svfiprintf_r+0xf6>
 8011bb2:	9a07      	ldr	r2, [sp, #28]
 8011bb4:	4654      	mov	r4, sl
 8011bb6:	2000      	movs	r0, #0
 8011bb8:	f04f 0c0a 	mov.w	ip, #10
 8011bbc:	4621      	mov	r1, r4
 8011bbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bc2:	3b30      	subs	r3, #48	; 0x30
 8011bc4:	2b09      	cmp	r3, #9
 8011bc6:	d94e      	bls.n	8011c66 <_svfiprintf_r+0x17e>
 8011bc8:	b1b0      	cbz	r0, 8011bf8 <_svfiprintf_r+0x110>
 8011bca:	9207      	str	r2, [sp, #28]
 8011bcc:	e014      	b.n	8011bf8 <_svfiprintf_r+0x110>
 8011bce:	eba0 0308 	sub.w	r3, r0, r8
 8011bd2:	fa09 f303 	lsl.w	r3, r9, r3
 8011bd6:	4313      	orrs	r3, r2
 8011bd8:	9304      	str	r3, [sp, #16]
 8011bda:	46a2      	mov	sl, r4
 8011bdc:	e7d2      	b.n	8011b84 <_svfiprintf_r+0x9c>
 8011bde:	9b03      	ldr	r3, [sp, #12]
 8011be0:	1d19      	adds	r1, r3, #4
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	9103      	str	r1, [sp, #12]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	bfbb      	ittet	lt
 8011bea:	425b      	neglt	r3, r3
 8011bec:	f042 0202 	orrlt.w	r2, r2, #2
 8011bf0:	9307      	strge	r3, [sp, #28]
 8011bf2:	9307      	strlt	r3, [sp, #28]
 8011bf4:	bfb8      	it	lt
 8011bf6:	9204      	strlt	r2, [sp, #16]
 8011bf8:	7823      	ldrb	r3, [r4, #0]
 8011bfa:	2b2e      	cmp	r3, #46	; 0x2e
 8011bfc:	d10c      	bne.n	8011c18 <_svfiprintf_r+0x130>
 8011bfe:	7863      	ldrb	r3, [r4, #1]
 8011c00:	2b2a      	cmp	r3, #42	; 0x2a
 8011c02:	d135      	bne.n	8011c70 <_svfiprintf_r+0x188>
 8011c04:	9b03      	ldr	r3, [sp, #12]
 8011c06:	1d1a      	adds	r2, r3, #4
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	9203      	str	r2, [sp, #12]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	bfb8      	it	lt
 8011c10:	f04f 33ff 	movlt.w	r3, #4294967295
 8011c14:	3402      	adds	r4, #2
 8011c16:	9305      	str	r3, [sp, #20]
 8011c18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011ce4 <_svfiprintf_r+0x1fc>
 8011c1c:	7821      	ldrb	r1, [r4, #0]
 8011c1e:	2203      	movs	r2, #3
 8011c20:	4650      	mov	r0, sl
 8011c22:	f7ee fae5 	bl	80001f0 <memchr>
 8011c26:	b140      	cbz	r0, 8011c3a <_svfiprintf_r+0x152>
 8011c28:	2340      	movs	r3, #64	; 0x40
 8011c2a:	eba0 000a 	sub.w	r0, r0, sl
 8011c2e:	fa03 f000 	lsl.w	r0, r3, r0
 8011c32:	9b04      	ldr	r3, [sp, #16]
 8011c34:	4303      	orrs	r3, r0
 8011c36:	3401      	adds	r4, #1
 8011c38:	9304      	str	r3, [sp, #16]
 8011c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c3e:	4826      	ldr	r0, [pc, #152]	; (8011cd8 <_svfiprintf_r+0x1f0>)
 8011c40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011c44:	2206      	movs	r2, #6
 8011c46:	f7ee fad3 	bl	80001f0 <memchr>
 8011c4a:	2800      	cmp	r0, #0
 8011c4c:	d038      	beq.n	8011cc0 <_svfiprintf_r+0x1d8>
 8011c4e:	4b23      	ldr	r3, [pc, #140]	; (8011cdc <_svfiprintf_r+0x1f4>)
 8011c50:	bb1b      	cbnz	r3, 8011c9a <_svfiprintf_r+0x1b2>
 8011c52:	9b03      	ldr	r3, [sp, #12]
 8011c54:	3307      	adds	r3, #7
 8011c56:	f023 0307 	bic.w	r3, r3, #7
 8011c5a:	3308      	adds	r3, #8
 8011c5c:	9303      	str	r3, [sp, #12]
 8011c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c60:	4433      	add	r3, r6
 8011c62:	9309      	str	r3, [sp, #36]	; 0x24
 8011c64:	e767      	b.n	8011b36 <_svfiprintf_r+0x4e>
 8011c66:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c6a:	460c      	mov	r4, r1
 8011c6c:	2001      	movs	r0, #1
 8011c6e:	e7a5      	b.n	8011bbc <_svfiprintf_r+0xd4>
 8011c70:	2300      	movs	r3, #0
 8011c72:	3401      	adds	r4, #1
 8011c74:	9305      	str	r3, [sp, #20]
 8011c76:	4619      	mov	r1, r3
 8011c78:	f04f 0c0a 	mov.w	ip, #10
 8011c7c:	4620      	mov	r0, r4
 8011c7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c82:	3a30      	subs	r2, #48	; 0x30
 8011c84:	2a09      	cmp	r2, #9
 8011c86:	d903      	bls.n	8011c90 <_svfiprintf_r+0x1a8>
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d0c5      	beq.n	8011c18 <_svfiprintf_r+0x130>
 8011c8c:	9105      	str	r1, [sp, #20]
 8011c8e:	e7c3      	b.n	8011c18 <_svfiprintf_r+0x130>
 8011c90:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c94:	4604      	mov	r4, r0
 8011c96:	2301      	movs	r3, #1
 8011c98:	e7f0      	b.n	8011c7c <_svfiprintf_r+0x194>
 8011c9a:	ab03      	add	r3, sp, #12
 8011c9c:	9300      	str	r3, [sp, #0]
 8011c9e:	462a      	mov	r2, r5
 8011ca0:	4b0f      	ldr	r3, [pc, #60]	; (8011ce0 <_svfiprintf_r+0x1f8>)
 8011ca2:	a904      	add	r1, sp, #16
 8011ca4:	4638      	mov	r0, r7
 8011ca6:	f7fc f929 	bl	800defc <_printf_float>
 8011caa:	1c42      	adds	r2, r0, #1
 8011cac:	4606      	mov	r6, r0
 8011cae:	d1d6      	bne.n	8011c5e <_svfiprintf_r+0x176>
 8011cb0:	89ab      	ldrh	r3, [r5, #12]
 8011cb2:	065b      	lsls	r3, r3, #25
 8011cb4:	f53f af2c 	bmi.w	8011b10 <_svfiprintf_r+0x28>
 8011cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011cba:	b01d      	add	sp, #116	; 0x74
 8011cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cc0:	ab03      	add	r3, sp, #12
 8011cc2:	9300      	str	r3, [sp, #0]
 8011cc4:	462a      	mov	r2, r5
 8011cc6:	4b06      	ldr	r3, [pc, #24]	; (8011ce0 <_svfiprintf_r+0x1f8>)
 8011cc8:	a904      	add	r1, sp, #16
 8011cca:	4638      	mov	r0, r7
 8011ccc:	f7fc fbba 	bl	800e444 <_printf_i>
 8011cd0:	e7eb      	b.n	8011caa <_svfiprintf_r+0x1c2>
 8011cd2:	bf00      	nop
 8011cd4:	0801539c 	.word	0x0801539c
 8011cd8:	080153a6 	.word	0x080153a6
 8011cdc:	0800defd 	.word	0x0800defd
 8011ce0:	08011a31 	.word	0x08011a31
 8011ce4:	080153a2 	.word	0x080153a2

08011ce8 <_read_r>:
 8011ce8:	b538      	push	{r3, r4, r5, lr}
 8011cea:	4d07      	ldr	r5, [pc, #28]	; (8011d08 <_read_r+0x20>)
 8011cec:	4604      	mov	r4, r0
 8011cee:	4608      	mov	r0, r1
 8011cf0:	4611      	mov	r1, r2
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	602a      	str	r2, [r5, #0]
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	f7f0 f9f8 	bl	80020ec <_read>
 8011cfc:	1c43      	adds	r3, r0, #1
 8011cfe:	d102      	bne.n	8011d06 <_read_r+0x1e>
 8011d00:	682b      	ldr	r3, [r5, #0]
 8011d02:	b103      	cbz	r3, 8011d06 <_read_r+0x1e>
 8011d04:	6023      	str	r3, [r4, #0]
 8011d06:	bd38      	pop	{r3, r4, r5, pc}
 8011d08:	20005018 	.word	0x20005018
 8011d0c:	00000000 	.word	0x00000000

08011d10 <nan>:
 8011d10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011d18 <nan+0x8>
 8011d14:	4770      	bx	lr
 8011d16:	bf00      	nop
 8011d18:	00000000 	.word	0x00000000
 8011d1c:	7ff80000 	.word	0x7ff80000

08011d20 <strncmp>:
 8011d20:	b510      	push	{r4, lr}
 8011d22:	b17a      	cbz	r2, 8011d44 <strncmp+0x24>
 8011d24:	4603      	mov	r3, r0
 8011d26:	3901      	subs	r1, #1
 8011d28:	1884      	adds	r4, r0, r2
 8011d2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011d2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011d32:	4290      	cmp	r0, r2
 8011d34:	d101      	bne.n	8011d3a <strncmp+0x1a>
 8011d36:	42a3      	cmp	r3, r4
 8011d38:	d101      	bne.n	8011d3e <strncmp+0x1e>
 8011d3a:	1a80      	subs	r0, r0, r2
 8011d3c:	bd10      	pop	{r4, pc}
 8011d3e:	2800      	cmp	r0, #0
 8011d40:	d1f3      	bne.n	8011d2a <strncmp+0xa>
 8011d42:	e7fa      	b.n	8011d3a <strncmp+0x1a>
 8011d44:	4610      	mov	r0, r2
 8011d46:	e7f9      	b.n	8011d3c <strncmp+0x1c>

08011d48 <__ascii_wctomb>:
 8011d48:	b149      	cbz	r1, 8011d5e <__ascii_wctomb+0x16>
 8011d4a:	2aff      	cmp	r2, #255	; 0xff
 8011d4c:	bf85      	ittet	hi
 8011d4e:	238a      	movhi	r3, #138	; 0x8a
 8011d50:	6003      	strhi	r3, [r0, #0]
 8011d52:	700a      	strbls	r2, [r1, #0]
 8011d54:	f04f 30ff 	movhi.w	r0, #4294967295
 8011d58:	bf98      	it	ls
 8011d5a:	2001      	movls	r0, #1
 8011d5c:	4770      	bx	lr
 8011d5e:	4608      	mov	r0, r1
 8011d60:	4770      	bx	lr
	...

08011d64 <__assert_func>:
 8011d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d66:	4614      	mov	r4, r2
 8011d68:	461a      	mov	r2, r3
 8011d6a:	4b09      	ldr	r3, [pc, #36]	; (8011d90 <__assert_func+0x2c>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	4605      	mov	r5, r0
 8011d70:	68d8      	ldr	r0, [r3, #12]
 8011d72:	b14c      	cbz	r4, 8011d88 <__assert_func+0x24>
 8011d74:	4b07      	ldr	r3, [pc, #28]	; (8011d94 <__assert_func+0x30>)
 8011d76:	9100      	str	r1, [sp, #0]
 8011d78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d7c:	4906      	ldr	r1, [pc, #24]	; (8011d98 <__assert_func+0x34>)
 8011d7e:	462b      	mov	r3, r5
 8011d80:	f000 f80e 	bl	8011da0 <fiprintf>
 8011d84:	f000 fa80 	bl	8012288 <abort>
 8011d88:	4b04      	ldr	r3, [pc, #16]	; (8011d9c <__assert_func+0x38>)
 8011d8a:	461c      	mov	r4, r3
 8011d8c:	e7f3      	b.n	8011d76 <__assert_func+0x12>
 8011d8e:	bf00      	nop
 8011d90:	20000038 	.word	0x20000038
 8011d94:	080153ad 	.word	0x080153ad
 8011d98:	080153ba 	.word	0x080153ba
 8011d9c:	080153e8 	.word	0x080153e8

08011da0 <fiprintf>:
 8011da0:	b40e      	push	{r1, r2, r3}
 8011da2:	b503      	push	{r0, r1, lr}
 8011da4:	4601      	mov	r1, r0
 8011da6:	ab03      	add	r3, sp, #12
 8011da8:	4805      	ldr	r0, [pc, #20]	; (8011dc0 <fiprintf+0x20>)
 8011daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dae:	6800      	ldr	r0, [r0, #0]
 8011db0:	9301      	str	r3, [sp, #4]
 8011db2:	f000 f879 	bl	8011ea8 <_vfiprintf_r>
 8011db6:	b002      	add	sp, #8
 8011db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011dbc:	b003      	add	sp, #12
 8011dbe:	4770      	bx	lr
 8011dc0:	20000038 	.word	0x20000038

08011dc4 <memmove>:
 8011dc4:	4288      	cmp	r0, r1
 8011dc6:	b510      	push	{r4, lr}
 8011dc8:	eb01 0402 	add.w	r4, r1, r2
 8011dcc:	d902      	bls.n	8011dd4 <memmove+0x10>
 8011dce:	4284      	cmp	r4, r0
 8011dd0:	4623      	mov	r3, r4
 8011dd2:	d807      	bhi.n	8011de4 <memmove+0x20>
 8011dd4:	1e43      	subs	r3, r0, #1
 8011dd6:	42a1      	cmp	r1, r4
 8011dd8:	d008      	beq.n	8011dec <memmove+0x28>
 8011dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011de2:	e7f8      	b.n	8011dd6 <memmove+0x12>
 8011de4:	4402      	add	r2, r0
 8011de6:	4601      	mov	r1, r0
 8011de8:	428a      	cmp	r2, r1
 8011dea:	d100      	bne.n	8011dee <memmove+0x2a>
 8011dec:	bd10      	pop	{r4, pc}
 8011dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011df6:	e7f7      	b.n	8011de8 <memmove+0x24>

08011df8 <_realloc_r>:
 8011df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dfc:	4680      	mov	r8, r0
 8011dfe:	4614      	mov	r4, r2
 8011e00:	460e      	mov	r6, r1
 8011e02:	b921      	cbnz	r1, 8011e0e <_realloc_r+0x16>
 8011e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e08:	4611      	mov	r1, r2
 8011e0a:	f7fb bf63 	b.w	800dcd4 <_malloc_r>
 8011e0e:	b92a      	cbnz	r2, 8011e1c <_realloc_r+0x24>
 8011e10:	f7ff fdc2 	bl	8011998 <_free_r>
 8011e14:	4625      	mov	r5, r4
 8011e16:	4628      	mov	r0, r5
 8011e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e1c:	f000 faa0 	bl	8012360 <_malloc_usable_size_r>
 8011e20:	4284      	cmp	r4, r0
 8011e22:	4607      	mov	r7, r0
 8011e24:	d802      	bhi.n	8011e2c <_realloc_r+0x34>
 8011e26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011e2a:	d812      	bhi.n	8011e52 <_realloc_r+0x5a>
 8011e2c:	4621      	mov	r1, r4
 8011e2e:	4640      	mov	r0, r8
 8011e30:	f7fb ff50 	bl	800dcd4 <_malloc_r>
 8011e34:	4605      	mov	r5, r0
 8011e36:	2800      	cmp	r0, #0
 8011e38:	d0ed      	beq.n	8011e16 <_realloc_r+0x1e>
 8011e3a:	42bc      	cmp	r4, r7
 8011e3c:	4622      	mov	r2, r4
 8011e3e:	4631      	mov	r1, r6
 8011e40:	bf28      	it	cs
 8011e42:	463a      	movcs	r2, r7
 8011e44:	f7fb ff0f 	bl	800dc66 <memcpy>
 8011e48:	4631      	mov	r1, r6
 8011e4a:	4640      	mov	r0, r8
 8011e4c:	f7ff fda4 	bl	8011998 <_free_r>
 8011e50:	e7e1      	b.n	8011e16 <_realloc_r+0x1e>
 8011e52:	4635      	mov	r5, r6
 8011e54:	e7df      	b.n	8011e16 <_realloc_r+0x1e>

08011e56 <__sfputc_r>:
 8011e56:	6893      	ldr	r3, [r2, #8]
 8011e58:	3b01      	subs	r3, #1
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	b410      	push	{r4}
 8011e5e:	6093      	str	r3, [r2, #8]
 8011e60:	da08      	bge.n	8011e74 <__sfputc_r+0x1e>
 8011e62:	6994      	ldr	r4, [r2, #24]
 8011e64:	42a3      	cmp	r3, r4
 8011e66:	db01      	blt.n	8011e6c <__sfputc_r+0x16>
 8011e68:	290a      	cmp	r1, #10
 8011e6a:	d103      	bne.n	8011e74 <__sfputc_r+0x1e>
 8011e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e70:	f000 b94a 	b.w	8012108 <__swbuf_r>
 8011e74:	6813      	ldr	r3, [r2, #0]
 8011e76:	1c58      	adds	r0, r3, #1
 8011e78:	6010      	str	r0, [r2, #0]
 8011e7a:	7019      	strb	r1, [r3, #0]
 8011e7c:	4608      	mov	r0, r1
 8011e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e82:	4770      	bx	lr

08011e84 <__sfputs_r>:
 8011e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e86:	4606      	mov	r6, r0
 8011e88:	460f      	mov	r7, r1
 8011e8a:	4614      	mov	r4, r2
 8011e8c:	18d5      	adds	r5, r2, r3
 8011e8e:	42ac      	cmp	r4, r5
 8011e90:	d101      	bne.n	8011e96 <__sfputs_r+0x12>
 8011e92:	2000      	movs	r0, #0
 8011e94:	e007      	b.n	8011ea6 <__sfputs_r+0x22>
 8011e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e9a:	463a      	mov	r2, r7
 8011e9c:	4630      	mov	r0, r6
 8011e9e:	f7ff ffda 	bl	8011e56 <__sfputc_r>
 8011ea2:	1c43      	adds	r3, r0, #1
 8011ea4:	d1f3      	bne.n	8011e8e <__sfputs_r+0xa>
 8011ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011ea8 <_vfiprintf_r>:
 8011ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eac:	460d      	mov	r5, r1
 8011eae:	b09d      	sub	sp, #116	; 0x74
 8011eb0:	4614      	mov	r4, r2
 8011eb2:	4698      	mov	r8, r3
 8011eb4:	4606      	mov	r6, r0
 8011eb6:	b118      	cbz	r0, 8011ec0 <_vfiprintf_r+0x18>
 8011eb8:	6983      	ldr	r3, [r0, #24]
 8011eba:	b90b      	cbnz	r3, 8011ec0 <_vfiprintf_r+0x18>
 8011ebc:	f7fb fe0e 	bl	800dadc <__sinit>
 8011ec0:	4b89      	ldr	r3, [pc, #548]	; (80120e8 <_vfiprintf_r+0x240>)
 8011ec2:	429d      	cmp	r5, r3
 8011ec4:	d11b      	bne.n	8011efe <_vfiprintf_r+0x56>
 8011ec6:	6875      	ldr	r5, [r6, #4]
 8011ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011eca:	07d9      	lsls	r1, r3, #31
 8011ecc:	d405      	bmi.n	8011eda <_vfiprintf_r+0x32>
 8011ece:	89ab      	ldrh	r3, [r5, #12]
 8011ed0:	059a      	lsls	r2, r3, #22
 8011ed2:	d402      	bmi.n	8011eda <_vfiprintf_r+0x32>
 8011ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ed6:	f7fb fec4 	bl	800dc62 <__retarget_lock_acquire_recursive>
 8011eda:	89ab      	ldrh	r3, [r5, #12]
 8011edc:	071b      	lsls	r3, r3, #28
 8011ede:	d501      	bpl.n	8011ee4 <_vfiprintf_r+0x3c>
 8011ee0:	692b      	ldr	r3, [r5, #16]
 8011ee2:	b9eb      	cbnz	r3, 8011f20 <_vfiprintf_r+0x78>
 8011ee4:	4629      	mov	r1, r5
 8011ee6:	4630      	mov	r0, r6
 8011ee8:	f000 f960 	bl	80121ac <__swsetup_r>
 8011eec:	b1c0      	cbz	r0, 8011f20 <_vfiprintf_r+0x78>
 8011eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ef0:	07dc      	lsls	r4, r3, #31
 8011ef2:	d50e      	bpl.n	8011f12 <_vfiprintf_r+0x6a>
 8011ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ef8:	b01d      	add	sp, #116	; 0x74
 8011efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011efe:	4b7b      	ldr	r3, [pc, #492]	; (80120ec <_vfiprintf_r+0x244>)
 8011f00:	429d      	cmp	r5, r3
 8011f02:	d101      	bne.n	8011f08 <_vfiprintf_r+0x60>
 8011f04:	68b5      	ldr	r5, [r6, #8]
 8011f06:	e7df      	b.n	8011ec8 <_vfiprintf_r+0x20>
 8011f08:	4b79      	ldr	r3, [pc, #484]	; (80120f0 <_vfiprintf_r+0x248>)
 8011f0a:	429d      	cmp	r5, r3
 8011f0c:	bf08      	it	eq
 8011f0e:	68f5      	ldreq	r5, [r6, #12]
 8011f10:	e7da      	b.n	8011ec8 <_vfiprintf_r+0x20>
 8011f12:	89ab      	ldrh	r3, [r5, #12]
 8011f14:	0598      	lsls	r0, r3, #22
 8011f16:	d4ed      	bmi.n	8011ef4 <_vfiprintf_r+0x4c>
 8011f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f1a:	f7fb fea3 	bl	800dc64 <__retarget_lock_release_recursive>
 8011f1e:	e7e9      	b.n	8011ef4 <_vfiprintf_r+0x4c>
 8011f20:	2300      	movs	r3, #0
 8011f22:	9309      	str	r3, [sp, #36]	; 0x24
 8011f24:	2320      	movs	r3, #32
 8011f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f2e:	2330      	movs	r3, #48	; 0x30
 8011f30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80120f4 <_vfiprintf_r+0x24c>
 8011f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f38:	f04f 0901 	mov.w	r9, #1
 8011f3c:	4623      	mov	r3, r4
 8011f3e:	469a      	mov	sl, r3
 8011f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f44:	b10a      	cbz	r2, 8011f4a <_vfiprintf_r+0xa2>
 8011f46:	2a25      	cmp	r2, #37	; 0x25
 8011f48:	d1f9      	bne.n	8011f3e <_vfiprintf_r+0x96>
 8011f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8011f4e:	d00b      	beq.n	8011f68 <_vfiprintf_r+0xc0>
 8011f50:	465b      	mov	r3, fp
 8011f52:	4622      	mov	r2, r4
 8011f54:	4629      	mov	r1, r5
 8011f56:	4630      	mov	r0, r6
 8011f58:	f7ff ff94 	bl	8011e84 <__sfputs_r>
 8011f5c:	3001      	adds	r0, #1
 8011f5e:	f000 80aa 	beq.w	80120b6 <_vfiprintf_r+0x20e>
 8011f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f64:	445a      	add	r2, fp
 8011f66:	9209      	str	r2, [sp, #36]	; 0x24
 8011f68:	f89a 3000 	ldrb.w	r3, [sl]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	f000 80a2 	beq.w	80120b6 <_vfiprintf_r+0x20e>
 8011f72:	2300      	movs	r3, #0
 8011f74:	f04f 32ff 	mov.w	r2, #4294967295
 8011f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f7c:	f10a 0a01 	add.w	sl, sl, #1
 8011f80:	9304      	str	r3, [sp, #16]
 8011f82:	9307      	str	r3, [sp, #28]
 8011f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f88:	931a      	str	r3, [sp, #104]	; 0x68
 8011f8a:	4654      	mov	r4, sl
 8011f8c:	2205      	movs	r2, #5
 8011f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f92:	4858      	ldr	r0, [pc, #352]	; (80120f4 <_vfiprintf_r+0x24c>)
 8011f94:	f7ee f92c 	bl	80001f0 <memchr>
 8011f98:	9a04      	ldr	r2, [sp, #16]
 8011f9a:	b9d8      	cbnz	r0, 8011fd4 <_vfiprintf_r+0x12c>
 8011f9c:	06d1      	lsls	r1, r2, #27
 8011f9e:	bf44      	itt	mi
 8011fa0:	2320      	movmi	r3, #32
 8011fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fa6:	0713      	lsls	r3, r2, #28
 8011fa8:	bf44      	itt	mi
 8011faa:	232b      	movmi	r3, #43	; 0x2b
 8011fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8011fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8011fb6:	d015      	beq.n	8011fe4 <_vfiprintf_r+0x13c>
 8011fb8:	9a07      	ldr	r2, [sp, #28]
 8011fba:	4654      	mov	r4, sl
 8011fbc:	2000      	movs	r0, #0
 8011fbe:	f04f 0c0a 	mov.w	ip, #10
 8011fc2:	4621      	mov	r1, r4
 8011fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fc8:	3b30      	subs	r3, #48	; 0x30
 8011fca:	2b09      	cmp	r3, #9
 8011fcc:	d94e      	bls.n	801206c <_vfiprintf_r+0x1c4>
 8011fce:	b1b0      	cbz	r0, 8011ffe <_vfiprintf_r+0x156>
 8011fd0:	9207      	str	r2, [sp, #28]
 8011fd2:	e014      	b.n	8011ffe <_vfiprintf_r+0x156>
 8011fd4:	eba0 0308 	sub.w	r3, r0, r8
 8011fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8011fdc:	4313      	orrs	r3, r2
 8011fde:	9304      	str	r3, [sp, #16]
 8011fe0:	46a2      	mov	sl, r4
 8011fe2:	e7d2      	b.n	8011f8a <_vfiprintf_r+0xe2>
 8011fe4:	9b03      	ldr	r3, [sp, #12]
 8011fe6:	1d19      	adds	r1, r3, #4
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	9103      	str	r1, [sp, #12]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	bfbb      	ittet	lt
 8011ff0:	425b      	neglt	r3, r3
 8011ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8011ff6:	9307      	strge	r3, [sp, #28]
 8011ff8:	9307      	strlt	r3, [sp, #28]
 8011ffa:	bfb8      	it	lt
 8011ffc:	9204      	strlt	r2, [sp, #16]
 8011ffe:	7823      	ldrb	r3, [r4, #0]
 8012000:	2b2e      	cmp	r3, #46	; 0x2e
 8012002:	d10c      	bne.n	801201e <_vfiprintf_r+0x176>
 8012004:	7863      	ldrb	r3, [r4, #1]
 8012006:	2b2a      	cmp	r3, #42	; 0x2a
 8012008:	d135      	bne.n	8012076 <_vfiprintf_r+0x1ce>
 801200a:	9b03      	ldr	r3, [sp, #12]
 801200c:	1d1a      	adds	r2, r3, #4
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	9203      	str	r2, [sp, #12]
 8012012:	2b00      	cmp	r3, #0
 8012014:	bfb8      	it	lt
 8012016:	f04f 33ff 	movlt.w	r3, #4294967295
 801201a:	3402      	adds	r4, #2
 801201c:	9305      	str	r3, [sp, #20]
 801201e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012104 <_vfiprintf_r+0x25c>
 8012022:	7821      	ldrb	r1, [r4, #0]
 8012024:	2203      	movs	r2, #3
 8012026:	4650      	mov	r0, sl
 8012028:	f7ee f8e2 	bl	80001f0 <memchr>
 801202c:	b140      	cbz	r0, 8012040 <_vfiprintf_r+0x198>
 801202e:	2340      	movs	r3, #64	; 0x40
 8012030:	eba0 000a 	sub.w	r0, r0, sl
 8012034:	fa03 f000 	lsl.w	r0, r3, r0
 8012038:	9b04      	ldr	r3, [sp, #16]
 801203a:	4303      	orrs	r3, r0
 801203c:	3401      	adds	r4, #1
 801203e:	9304      	str	r3, [sp, #16]
 8012040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012044:	482c      	ldr	r0, [pc, #176]	; (80120f8 <_vfiprintf_r+0x250>)
 8012046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801204a:	2206      	movs	r2, #6
 801204c:	f7ee f8d0 	bl	80001f0 <memchr>
 8012050:	2800      	cmp	r0, #0
 8012052:	d03f      	beq.n	80120d4 <_vfiprintf_r+0x22c>
 8012054:	4b29      	ldr	r3, [pc, #164]	; (80120fc <_vfiprintf_r+0x254>)
 8012056:	bb1b      	cbnz	r3, 80120a0 <_vfiprintf_r+0x1f8>
 8012058:	9b03      	ldr	r3, [sp, #12]
 801205a:	3307      	adds	r3, #7
 801205c:	f023 0307 	bic.w	r3, r3, #7
 8012060:	3308      	adds	r3, #8
 8012062:	9303      	str	r3, [sp, #12]
 8012064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012066:	443b      	add	r3, r7
 8012068:	9309      	str	r3, [sp, #36]	; 0x24
 801206a:	e767      	b.n	8011f3c <_vfiprintf_r+0x94>
 801206c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012070:	460c      	mov	r4, r1
 8012072:	2001      	movs	r0, #1
 8012074:	e7a5      	b.n	8011fc2 <_vfiprintf_r+0x11a>
 8012076:	2300      	movs	r3, #0
 8012078:	3401      	adds	r4, #1
 801207a:	9305      	str	r3, [sp, #20]
 801207c:	4619      	mov	r1, r3
 801207e:	f04f 0c0a 	mov.w	ip, #10
 8012082:	4620      	mov	r0, r4
 8012084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012088:	3a30      	subs	r2, #48	; 0x30
 801208a:	2a09      	cmp	r2, #9
 801208c:	d903      	bls.n	8012096 <_vfiprintf_r+0x1ee>
 801208e:	2b00      	cmp	r3, #0
 8012090:	d0c5      	beq.n	801201e <_vfiprintf_r+0x176>
 8012092:	9105      	str	r1, [sp, #20]
 8012094:	e7c3      	b.n	801201e <_vfiprintf_r+0x176>
 8012096:	fb0c 2101 	mla	r1, ip, r1, r2
 801209a:	4604      	mov	r4, r0
 801209c:	2301      	movs	r3, #1
 801209e:	e7f0      	b.n	8012082 <_vfiprintf_r+0x1da>
 80120a0:	ab03      	add	r3, sp, #12
 80120a2:	9300      	str	r3, [sp, #0]
 80120a4:	462a      	mov	r2, r5
 80120a6:	4b16      	ldr	r3, [pc, #88]	; (8012100 <_vfiprintf_r+0x258>)
 80120a8:	a904      	add	r1, sp, #16
 80120aa:	4630      	mov	r0, r6
 80120ac:	f7fb ff26 	bl	800defc <_printf_float>
 80120b0:	4607      	mov	r7, r0
 80120b2:	1c78      	adds	r0, r7, #1
 80120b4:	d1d6      	bne.n	8012064 <_vfiprintf_r+0x1bc>
 80120b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80120b8:	07d9      	lsls	r1, r3, #31
 80120ba:	d405      	bmi.n	80120c8 <_vfiprintf_r+0x220>
 80120bc:	89ab      	ldrh	r3, [r5, #12]
 80120be:	059a      	lsls	r2, r3, #22
 80120c0:	d402      	bmi.n	80120c8 <_vfiprintf_r+0x220>
 80120c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120c4:	f7fb fdce 	bl	800dc64 <__retarget_lock_release_recursive>
 80120c8:	89ab      	ldrh	r3, [r5, #12]
 80120ca:	065b      	lsls	r3, r3, #25
 80120cc:	f53f af12 	bmi.w	8011ef4 <_vfiprintf_r+0x4c>
 80120d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120d2:	e711      	b.n	8011ef8 <_vfiprintf_r+0x50>
 80120d4:	ab03      	add	r3, sp, #12
 80120d6:	9300      	str	r3, [sp, #0]
 80120d8:	462a      	mov	r2, r5
 80120da:	4b09      	ldr	r3, [pc, #36]	; (8012100 <_vfiprintf_r+0x258>)
 80120dc:	a904      	add	r1, sp, #16
 80120de:	4630      	mov	r0, r6
 80120e0:	f7fc f9b0 	bl	800e444 <_printf_i>
 80120e4:	e7e4      	b.n	80120b0 <_vfiprintf_r+0x208>
 80120e6:	bf00      	nop
 80120e8:	08014f68 	.word	0x08014f68
 80120ec:	08014f88 	.word	0x08014f88
 80120f0:	08014f48 	.word	0x08014f48
 80120f4:	0801539c 	.word	0x0801539c
 80120f8:	080153a6 	.word	0x080153a6
 80120fc:	0800defd 	.word	0x0800defd
 8012100:	08011e85 	.word	0x08011e85
 8012104:	080153a2 	.word	0x080153a2

08012108 <__swbuf_r>:
 8012108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801210a:	460e      	mov	r6, r1
 801210c:	4614      	mov	r4, r2
 801210e:	4605      	mov	r5, r0
 8012110:	b118      	cbz	r0, 801211a <__swbuf_r+0x12>
 8012112:	6983      	ldr	r3, [r0, #24]
 8012114:	b90b      	cbnz	r3, 801211a <__swbuf_r+0x12>
 8012116:	f7fb fce1 	bl	800dadc <__sinit>
 801211a:	4b21      	ldr	r3, [pc, #132]	; (80121a0 <__swbuf_r+0x98>)
 801211c:	429c      	cmp	r4, r3
 801211e:	d12b      	bne.n	8012178 <__swbuf_r+0x70>
 8012120:	686c      	ldr	r4, [r5, #4]
 8012122:	69a3      	ldr	r3, [r4, #24]
 8012124:	60a3      	str	r3, [r4, #8]
 8012126:	89a3      	ldrh	r3, [r4, #12]
 8012128:	071a      	lsls	r2, r3, #28
 801212a:	d52f      	bpl.n	801218c <__swbuf_r+0x84>
 801212c:	6923      	ldr	r3, [r4, #16]
 801212e:	b36b      	cbz	r3, 801218c <__swbuf_r+0x84>
 8012130:	6923      	ldr	r3, [r4, #16]
 8012132:	6820      	ldr	r0, [r4, #0]
 8012134:	1ac0      	subs	r0, r0, r3
 8012136:	6963      	ldr	r3, [r4, #20]
 8012138:	b2f6      	uxtb	r6, r6
 801213a:	4283      	cmp	r3, r0
 801213c:	4637      	mov	r7, r6
 801213e:	dc04      	bgt.n	801214a <__swbuf_r+0x42>
 8012140:	4621      	mov	r1, r4
 8012142:	4628      	mov	r0, r5
 8012144:	f7fe fb68 	bl	8010818 <_fflush_r>
 8012148:	bb30      	cbnz	r0, 8012198 <__swbuf_r+0x90>
 801214a:	68a3      	ldr	r3, [r4, #8]
 801214c:	3b01      	subs	r3, #1
 801214e:	60a3      	str	r3, [r4, #8]
 8012150:	6823      	ldr	r3, [r4, #0]
 8012152:	1c5a      	adds	r2, r3, #1
 8012154:	6022      	str	r2, [r4, #0]
 8012156:	701e      	strb	r6, [r3, #0]
 8012158:	6963      	ldr	r3, [r4, #20]
 801215a:	3001      	adds	r0, #1
 801215c:	4283      	cmp	r3, r0
 801215e:	d004      	beq.n	801216a <__swbuf_r+0x62>
 8012160:	89a3      	ldrh	r3, [r4, #12]
 8012162:	07db      	lsls	r3, r3, #31
 8012164:	d506      	bpl.n	8012174 <__swbuf_r+0x6c>
 8012166:	2e0a      	cmp	r6, #10
 8012168:	d104      	bne.n	8012174 <__swbuf_r+0x6c>
 801216a:	4621      	mov	r1, r4
 801216c:	4628      	mov	r0, r5
 801216e:	f7fe fb53 	bl	8010818 <_fflush_r>
 8012172:	b988      	cbnz	r0, 8012198 <__swbuf_r+0x90>
 8012174:	4638      	mov	r0, r7
 8012176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012178:	4b0a      	ldr	r3, [pc, #40]	; (80121a4 <__swbuf_r+0x9c>)
 801217a:	429c      	cmp	r4, r3
 801217c:	d101      	bne.n	8012182 <__swbuf_r+0x7a>
 801217e:	68ac      	ldr	r4, [r5, #8]
 8012180:	e7cf      	b.n	8012122 <__swbuf_r+0x1a>
 8012182:	4b09      	ldr	r3, [pc, #36]	; (80121a8 <__swbuf_r+0xa0>)
 8012184:	429c      	cmp	r4, r3
 8012186:	bf08      	it	eq
 8012188:	68ec      	ldreq	r4, [r5, #12]
 801218a:	e7ca      	b.n	8012122 <__swbuf_r+0x1a>
 801218c:	4621      	mov	r1, r4
 801218e:	4628      	mov	r0, r5
 8012190:	f000 f80c 	bl	80121ac <__swsetup_r>
 8012194:	2800      	cmp	r0, #0
 8012196:	d0cb      	beq.n	8012130 <__swbuf_r+0x28>
 8012198:	f04f 37ff 	mov.w	r7, #4294967295
 801219c:	e7ea      	b.n	8012174 <__swbuf_r+0x6c>
 801219e:	bf00      	nop
 80121a0:	08014f68 	.word	0x08014f68
 80121a4:	08014f88 	.word	0x08014f88
 80121a8:	08014f48 	.word	0x08014f48

080121ac <__swsetup_r>:
 80121ac:	4b32      	ldr	r3, [pc, #200]	; (8012278 <__swsetup_r+0xcc>)
 80121ae:	b570      	push	{r4, r5, r6, lr}
 80121b0:	681d      	ldr	r5, [r3, #0]
 80121b2:	4606      	mov	r6, r0
 80121b4:	460c      	mov	r4, r1
 80121b6:	b125      	cbz	r5, 80121c2 <__swsetup_r+0x16>
 80121b8:	69ab      	ldr	r3, [r5, #24]
 80121ba:	b913      	cbnz	r3, 80121c2 <__swsetup_r+0x16>
 80121bc:	4628      	mov	r0, r5
 80121be:	f7fb fc8d 	bl	800dadc <__sinit>
 80121c2:	4b2e      	ldr	r3, [pc, #184]	; (801227c <__swsetup_r+0xd0>)
 80121c4:	429c      	cmp	r4, r3
 80121c6:	d10f      	bne.n	80121e8 <__swsetup_r+0x3c>
 80121c8:	686c      	ldr	r4, [r5, #4]
 80121ca:	89a3      	ldrh	r3, [r4, #12]
 80121cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80121d0:	0719      	lsls	r1, r3, #28
 80121d2:	d42c      	bmi.n	801222e <__swsetup_r+0x82>
 80121d4:	06dd      	lsls	r5, r3, #27
 80121d6:	d411      	bmi.n	80121fc <__swsetup_r+0x50>
 80121d8:	2309      	movs	r3, #9
 80121da:	6033      	str	r3, [r6, #0]
 80121dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80121e0:	81a3      	strh	r3, [r4, #12]
 80121e2:	f04f 30ff 	mov.w	r0, #4294967295
 80121e6:	e03e      	b.n	8012266 <__swsetup_r+0xba>
 80121e8:	4b25      	ldr	r3, [pc, #148]	; (8012280 <__swsetup_r+0xd4>)
 80121ea:	429c      	cmp	r4, r3
 80121ec:	d101      	bne.n	80121f2 <__swsetup_r+0x46>
 80121ee:	68ac      	ldr	r4, [r5, #8]
 80121f0:	e7eb      	b.n	80121ca <__swsetup_r+0x1e>
 80121f2:	4b24      	ldr	r3, [pc, #144]	; (8012284 <__swsetup_r+0xd8>)
 80121f4:	429c      	cmp	r4, r3
 80121f6:	bf08      	it	eq
 80121f8:	68ec      	ldreq	r4, [r5, #12]
 80121fa:	e7e6      	b.n	80121ca <__swsetup_r+0x1e>
 80121fc:	0758      	lsls	r0, r3, #29
 80121fe:	d512      	bpl.n	8012226 <__swsetup_r+0x7a>
 8012200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012202:	b141      	cbz	r1, 8012216 <__swsetup_r+0x6a>
 8012204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012208:	4299      	cmp	r1, r3
 801220a:	d002      	beq.n	8012212 <__swsetup_r+0x66>
 801220c:	4630      	mov	r0, r6
 801220e:	f7ff fbc3 	bl	8011998 <_free_r>
 8012212:	2300      	movs	r3, #0
 8012214:	6363      	str	r3, [r4, #52]	; 0x34
 8012216:	89a3      	ldrh	r3, [r4, #12]
 8012218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801221c:	81a3      	strh	r3, [r4, #12]
 801221e:	2300      	movs	r3, #0
 8012220:	6063      	str	r3, [r4, #4]
 8012222:	6923      	ldr	r3, [r4, #16]
 8012224:	6023      	str	r3, [r4, #0]
 8012226:	89a3      	ldrh	r3, [r4, #12]
 8012228:	f043 0308 	orr.w	r3, r3, #8
 801222c:	81a3      	strh	r3, [r4, #12]
 801222e:	6923      	ldr	r3, [r4, #16]
 8012230:	b94b      	cbnz	r3, 8012246 <__swsetup_r+0x9a>
 8012232:	89a3      	ldrh	r3, [r4, #12]
 8012234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801223c:	d003      	beq.n	8012246 <__swsetup_r+0x9a>
 801223e:	4621      	mov	r1, r4
 8012240:	4630      	mov	r0, r6
 8012242:	f000 f84d 	bl	80122e0 <__smakebuf_r>
 8012246:	89a0      	ldrh	r0, [r4, #12]
 8012248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801224c:	f010 0301 	ands.w	r3, r0, #1
 8012250:	d00a      	beq.n	8012268 <__swsetup_r+0xbc>
 8012252:	2300      	movs	r3, #0
 8012254:	60a3      	str	r3, [r4, #8]
 8012256:	6963      	ldr	r3, [r4, #20]
 8012258:	425b      	negs	r3, r3
 801225a:	61a3      	str	r3, [r4, #24]
 801225c:	6923      	ldr	r3, [r4, #16]
 801225e:	b943      	cbnz	r3, 8012272 <__swsetup_r+0xc6>
 8012260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012264:	d1ba      	bne.n	80121dc <__swsetup_r+0x30>
 8012266:	bd70      	pop	{r4, r5, r6, pc}
 8012268:	0781      	lsls	r1, r0, #30
 801226a:	bf58      	it	pl
 801226c:	6963      	ldrpl	r3, [r4, #20]
 801226e:	60a3      	str	r3, [r4, #8]
 8012270:	e7f4      	b.n	801225c <__swsetup_r+0xb0>
 8012272:	2000      	movs	r0, #0
 8012274:	e7f7      	b.n	8012266 <__swsetup_r+0xba>
 8012276:	bf00      	nop
 8012278:	20000038 	.word	0x20000038
 801227c:	08014f68 	.word	0x08014f68
 8012280:	08014f88 	.word	0x08014f88
 8012284:	08014f48 	.word	0x08014f48

08012288 <abort>:
 8012288:	b508      	push	{r3, lr}
 801228a:	2006      	movs	r0, #6
 801228c:	f000 f898 	bl	80123c0 <raise>
 8012290:	2001      	movs	r0, #1
 8012292:	f7ef ff21 	bl	80020d8 <_exit>

08012296 <__swhatbuf_r>:
 8012296:	b570      	push	{r4, r5, r6, lr}
 8012298:	460e      	mov	r6, r1
 801229a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801229e:	2900      	cmp	r1, #0
 80122a0:	b096      	sub	sp, #88	; 0x58
 80122a2:	4614      	mov	r4, r2
 80122a4:	461d      	mov	r5, r3
 80122a6:	da08      	bge.n	80122ba <__swhatbuf_r+0x24>
 80122a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80122ac:	2200      	movs	r2, #0
 80122ae:	602a      	str	r2, [r5, #0]
 80122b0:	061a      	lsls	r2, r3, #24
 80122b2:	d410      	bmi.n	80122d6 <__swhatbuf_r+0x40>
 80122b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80122b8:	e00e      	b.n	80122d8 <__swhatbuf_r+0x42>
 80122ba:	466a      	mov	r2, sp
 80122bc:	f000 f89c 	bl	80123f8 <_fstat_r>
 80122c0:	2800      	cmp	r0, #0
 80122c2:	dbf1      	blt.n	80122a8 <__swhatbuf_r+0x12>
 80122c4:	9a01      	ldr	r2, [sp, #4]
 80122c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80122ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80122ce:	425a      	negs	r2, r3
 80122d0:	415a      	adcs	r2, r3
 80122d2:	602a      	str	r2, [r5, #0]
 80122d4:	e7ee      	b.n	80122b4 <__swhatbuf_r+0x1e>
 80122d6:	2340      	movs	r3, #64	; 0x40
 80122d8:	2000      	movs	r0, #0
 80122da:	6023      	str	r3, [r4, #0]
 80122dc:	b016      	add	sp, #88	; 0x58
 80122de:	bd70      	pop	{r4, r5, r6, pc}

080122e0 <__smakebuf_r>:
 80122e0:	898b      	ldrh	r3, [r1, #12]
 80122e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80122e4:	079d      	lsls	r5, r3, #30
 80122e6:	4606      	mov	r6, r0
 80122e8:	460c      	mov	r4, r1
 80122ea:	d507      	bpl.n	80122fc <__smakebuf_r+0x1c>
 80122ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80122f0:	6023      	str	r3, [r4, #0]
 80122f2:	6123      	str	r3, [r4, #16]
 80122f4:	2301      	movs	r3, #1
 80122f6:	6163      	str	r3, [r4, #20]
 80122f8:	b002      	add	sp, #8
 80122fa:	bd70      	pop	{r4, r5, r6, pc}
 80122fc:	ab01      	add	r3, sp, #4
 80122fe:	466a      	mov	r2, sp
 8012300:	f7ff ffc9 	bl	8012296 <__swhatbuf_r>
 8012304:	9900      	ldr	r1, [sp, #0]
 8012306:	4605      	mov	r5, r0
 8012308:	4630      	mov	r0, r6
 801230a:	f7fb fce3 	bl	800dcd4 <_malloc_r>
 801230e:	b948      	cbnz	r0, 8012324 <__smakebuf_r+0x44>
 8012310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012314:	059a      	lsls	r2, r3, #22
 8012316:	d4ef      	bmi.n	80122f8 <__smakebuf_r+0x18>
 8012318:	f023 0303 	bic.w	r3, r3, #3
 801231c:	f043 0302 	orr.w	r3, r3, #2
 8012320:	81a3      	strh	r3, [r4, #12]
 8012322:	e7e3      	b.n	80122ec <__smakebuf_r+0xc>
 8012324:	4b0d      	ldr	r3, [pc, #52]	; (801235c <__smakebuf_r+0x7c>)
 8012326:	62b3      	str	r3, [r6, #40]	; 0x28
 8012328:	89a3      	ldrh	r3, [r4, #12]
 801232a:	6020      	str	r0, [r4, #0]
 801232c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012330:	81a3      	strh	r3, [r4, #12]
 8012332:	9b00      	ldr	r3, [sp, #0]
 8012334:	6163      	str	r3, [r4, #20]
 8012336:	9b01      	ldr	r3, [sp, #4]
 8012338:	6120      	str	r0, [r4, #16]
 801233a:	b15b      	cbz	r3, 8012354 <__smakebuf_r+0x74>
 801233c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012340:	4630      	mov	r0, r6
 8012342:	f000 f86b 	bl	801241c <_isatty_r>
 8012346:	b128      	cbz	r0, 8012354 <__smakebuf_r+0x74>
 8012348:	89a3      	ldrh	r3, [r4, #12]
 801234a:	f023 0303 	bic.w	r3, r3, #3
 801234e:	f043 0301 	orr.w	r3, r3, #1
 8012352:	81a3      	strh	r3, [r4, #12]
 8012354:	89a0      	ldrh	r0, [r4, #12]
 8012356:	4305      	orrs	r5, r0
 8012358:	81a5      	strh	r5, [r4, #12]
 801235a:	e7cd      	b.n	80122f8 <__smakebuf_r+0x18>
 801235c:	0800da75 	.word	0x0800da75

08012360 <_malloc_usable_size_r>:
 8012360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012364:	1f18      	subs	r0, r3, #4
 8012366:	2b00      	cmp	r3, #0
 8012368:	bfbc      	itt	lt
 801236a:	580b      	ldrlt	r3, [r1, r0]
 801236c:	18c0      	addlt	r0, r0, r3
 801236e:	4770      	bx	lr

08012370 <_raise_r>:
 8012370:	291f      	cmp	r1, #31
 8012372:	b538      	push	{r3, r4, r5, lr}
 8012374:	4604      	mov	r4, r0
 8012376:	460d      	mov	r5, r1
 8012378:	d904      	bls.n	8012384 <_raise_r+0x14>
 801237a:	2316      	movs	r3, #22
 801237c:	6003      	str	r3, [r0, #0]
 801237e:	f04f 30ff 	mov.w	r0, #4294967295
 8012382:	bd38      	pop	{r3, r4, r5, pc}
 8012384:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012386:	b112      	cbz	r2, 801238e <_raise_r+0x1e>
 8012388:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801238c:	b94b      	cbnz	r3, 80123a2 <_raise_r+0x32>
 801238e:	4620      	mov	r0, r4
 8012390:	f000 f830 	bl	80123f4 <_getpid_r>
 8012394:	462a      	mov	r2, r5
 8012396:	4601      	mov	r1, r0
 8012398:	4620      	mov	r0, r4
 801239a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801239e:	f000 b817 	b.w	80123d0 <_kill_r>
 80123a2:	2b01      	cmp	r3, #1
 80123a4:	d00a      	beq.n	80123bc <_raise_r+0x4c>
 80123a6:	1c59      	adds	r1, r3, #1
 80123a8:	d103      	bne.n	80123b2 <_raise_r+0x42>
 80123aa:	2316      	movs	r3, #22
 80123ac:	6003      	str	r3, [r0, #0]
 80123ae:	2001      	movs	r0, #1
 80123b0:	e7e7      	b.n	8012382 <_raise_r+0x12>
 80123b2:	2400      	movs	r4, #0
 80123b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80123b8:	4628      	mov	r0, r5
 80123ba:	4798      	blx	r3
 80123bc:	2000      	movs	r0, #0
 80123be:	e7e0      	b.n	8012382 <_raise_r+0x12>

080123c0 <raise>:
 80123c0:	4b02      	ldr	r3, [pc, #8]	; (80123cc <raise+0xc>)
 80123c2:	4601      	mov	r1, r0
 80123c4:	6818      	ldr	r0, [r3, #0]
 80123c6:	f7ff bfd3 	b.w	8012370 <_raise_r>
 80123ca:	bf00      	nop
 80123cc:	20000038 	.word	0x20000038

080123d0 <_kill_r>:
 80123d0:	b538      	push	{r3, r4, r5, lr}
 80123d2:	4d07      	ldr	r5, [pc, #28]	; (80123f0 <_kill_r+0x20>)
 80123d4:	2300      	movs	r3, #0
 80123d6:	4604      	mov	r4, r0
 80123d8:	4608      	mov	r0, r1
 80123da:	4611      	mov	r1, r2
 80123dc:	602b      	str	r3, [r5, #0]
 80123de:	f7ef fe6b 	bl	80020b8 <_kill>
 80123e2:	1c43      	adds	r3, r0, #1
 80123e4:	d102      	bne.n	80123ec <_kill_r+0x1c>
 80123e6:	682b      	ldr	r3, [r5, #0]
 80123e8:	b103      	cbz	r3, 80123ec <_kill_r+0x1c>
 80123ea:	6023      	str	r3, [r4, #0]
 80123ec:	bd38      	pop	{r3, r4, r5, pc}
 80123ee:	bf00      	nop
 80123f0:	20005018 	.word	0x20005018

080123f4 <_getpid_r>:
 80123f4:	f7ef be58 	b.w	80020a8 <_getpid>

080123f8 <_fstat_r>:
 80123f8:	b538      	push	{r3, r4, r5, lr}
 80123fa:	4d07      	ldr	r5, [pc, #28]	; (8012418 <_fstat_r+0x20>)
 80123fc:	2300      	movs	r3, #0
 80123fe:	4604      	mov	r4, r0
 8012400:	4608      	mov	r0, r1
 8012402:	4611      	mov	r1, r2
 8012404:	602b      	str	r3, [r5, #0]
 8012406:	f7ef feb6 	bl	8002176 <_fstat>
 801240a:	1c43      	adds	r3, r0, #1
 801240c:	d102      	bne.n	8012414 <_fstat_r+0x1c>
 801240e:	682b      	ldr	r3, [r5, #0]
 8012410:	b103      	cbz	r3, 8012414 <_fstat_r+0x1c>
 8012412:	6023      	str	r3, [r4, #0]
 8012414:	bd38      	pop	{r3, r4, r5, pc}
 8012416:	bf00      	nop
 8012418:	20005018 	.word	0x20005018

0801241c <_isatty_r>:
 801241c:	b538      	push	{r3, r4, r5, lr}
 801241e:	4d06      	ldr	r5, [pc, #24]	; (8012438 <_isatty_r+0x1c>)
 8012420:	2300      	movs	r3, #0
 8012422:	4604      	mov	r4, r0
 8012424:	4608      	mov	r0, r1
 8012426:	602b      	str	r3, [r5, #0]
 8012428:	f7ef feb5 	bl	8002196 <_isatty>
 801242c:	1c43      	adds	r3, r0, #1
 801242e:	d102      	bne.n	8012436 <_isatty_r+0x1a>
 8012430:	682b      	ldr	r3, [r5, #0]
 8012432:	b103      	cbz	r3, 8012436 <_isatty_r+0x1a>
 8012434:	6023      	str	r3, [r4, #0]
 8012436:	bd38      	pop	{r3, r4, r5, pc}
 8012438:	20005018 	.word	0x20005018

0801243c <pow>:
 801243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801243e:	ed2d 8b02 	vpush	{d8}
 8012442:	eeb0 8a40 	vmov.f32	s16, s0
 8012446:	eef0 8a60 	vmov.f32	s17, s1
 801244a:	ec55 4b11 	vmov	r4, r5, d1
 801244e:	f000 f867 	bl	8012520 <__ieee754_pow>
 8012452:	4622      	mov	r2, r4
 8012454:	462b      	mov	r3, r5
 8012456:	4620      	mov	r0, r4
 8012458:	4629      	mov	r1, r5
 801245a:	ec57 6b10 	vmov	r6, r7, d0
 801245e:	f7ee fb6d 	bl	8000b3c <__aeabi_dcmpun>
 8012462:	2800      	cmp	r0, #0
 8012464:	d13b      	bne.n	80124de <pow+0xa2>
 8012466:	ec51 0b18 	vmov	r0, r1, d8
 801246a:	2200      	movs	r2, #0
 801246c:	2300      	movs	r3, #0
 801246e:	f7ee fb33 	bl	8000ad8 <__aeabi_dcmpeq>
 8012472:	b1b8      	cbz	r0, 80124a4 <pow+0x68>
 8012474:	2200      	movs	r2, #0
 8012476:	2300      	movs	r3, #0
 8012478:	4620      	mov	r0, r4
 801247a:	4629      	mov	r1, r5
 801247c:	f7ee fb2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8012480:	2800      	cmp	r0, #0
 8012482:	d146      	bne.n	8012512 <pow+0xd6>
 8012484:	ec45 4b10 	vmov	d0, r4, r5
 8012488:	f000 fe63 	bl	8013152 <finite>
 801248c:	b338      	cbz	r0, 80124de <pow+0xa2>
 801248e:	2200      	movs	r2, #0
 8012490:	2300      	movs	r3, #0
 8012492:	4620      	mov	r0, r4
 8012494:	4629      	mov	r1, r5
 8012496:	f7ee fb29 	bl	8000aec <__aeabi_dcmplt>
 801249a:	b300      	cbz	r0, 80124de <pow+0xa2>
 801249c:	f7fb fac0 	bl	800da20 <__errno>
 80124a0:	2322      	movs	r3, #34	; 0x22
 80124a2:	e01b      	b.n	80124dc <pow+0xa0>
 80124a4:	ec47 6b10 	vmov	d0, r6, r7
 80124a8:	f000 fe53 	bl	8013152 <finite>
 80124ac:	b9e0      	cbnz	r0, 80124e8 <pow+0xac>
 80124ae:	eeb0 0a48 	vmov.f32	s0, s16
 80124b2:	eef0 0a68 	vmov.f32	s1, s17
 80124b6:	f000 fe4c 	bl	8013152 <finite>
 80124ba:	b1a8      	cbz	r0, 80124e8 <pow+0xac>
 80124bc:	ec45 4b10 	vmov	d0, r4, r5
 80124c0:	f000 fe47 	bl	8013152 <finite>
 80124c4:	b180      	cbz	r0, 80124e8 <pow+0xac>
 80124c6:	4632      	mov	r2, r6
 80124c8:	463b      	mov	r3, r7
 80124ca:	4630      	mov	r0, r6
 80124cc:	4639      	mov	r1, r7
 80124ce:	f7ee fb35 	bl	8000b3c <__aeabi_dcmpun>
 80124d2:	2800      	cmp	r0, #0
 80124d4:	d0e2      	beq.n	801249c <pow+0x60>
 80124d6:	f7fb faa3 	bl	800da20 <__errno>
 80124da:	2321      	movs	r3, #33	; 0x21
 80124dc:	6003      	str	r3, [r0, #0]
 80124de:	ecbd 8b02 	vpop	{d8}
 80124e2:	ec47 6b10 	vmov	d0, r6, r7
 80124e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124e8:	2200      	movs	r2, #0
 80124ea:	2300      	movs	r3, #0
 80124ec:	4630      	mov	r0, r6
 80124ee:	4639      	mov	r1, r7
 80124f0:	f7ee faf2 	bl	8000ad8 <__aeabi_dcmpeq>
 80124f4:	2800      	cmp	r0, #0
 80124f6:	d0f2      	beq.n	80124de <pow+0xa2>
 80124f8:	eeb0 0a48 	vmov.f32	s0, s16
 80124fc:	eef0 0a68 	vmov.f32	s1, s17
 8012500:	f000 fe27 	bl	8013152 <finite>
 8012504:	2800      	cmp	r0, #0
 8012506:	d0ea      	beq.n	80124de <pow+0xa2>
 8012508:	ec45 4b10 	vmov	d0, r4, r5
 801250c:	f000 fe21 	bl	8013152 <finite>
 8012510:	e7c3      	b.n	801249a <pow+0x5e>
 8012512:	4f01      	ldr	r7, [pc, #4]	; (8012518 <pow+0xdc>)
 8012514:	2600      	movs	r6, #0
 8012516:	e7e2      	b.n	80124de <pow+0xa2>
 8012518:	3ff00000 	.word	0x3ff00000
 801251c:	00000000 	.word	0x00000000

08012520 <__ieee754_pow>:
 8012520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012524:	ed2d 8b06 	vpush	{d8-d10}
 8012528:	b089      	sub	sp, #36	; 0x24
 801252a:	ed8d 1b00 	vstr	d1, [sp]
 801252e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012532:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012536:	ea58 0102 	orrs.w	r1, r8, r2
 801253a:	ec57 6b10 	vmov	r6, r7, d0
 801253e:	d115      	bne.n	801256c <__ieee754_pow+0x4c>
 8012540:	19b3      	adds	r3, r6, r6
 8012542:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8012546:	4152      	adcs	r2, r2
 8012548:	4299      	cmp	r1, r3
 801254a:	4b89      	ldr	r3, [pc, #548]	; (8012770 <__ieee754_pow+0x250>)
 801254c:	4193      	sbcs	r3, r2
 801254e:	f080 84d2 	bcs.w	8012ef6 <__ieee754_pow+0x9d6>
 8012552:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012556:	4630      	mov	r0, r6
 8012558:	4639      	mov	r1, r7
 801255a:	f7ed fe9f 	bl	800029c <__adddf3>
 801255e:	ec41 0b10 	vmov	d0, r0, r1
 8012562:	b009      	add	sp, #36	; 0x24
 8012564:	ecbd 8b06 	vpop	{d8-d10}
 8012568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801256c:	4b81      	ldr	r3, [pc, #516]	; (8012774 <__ieee754_pow+0x254>)
 801256e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8012572:	429c      	cmp	r4, r3
 8012574:	ee10 aa10 	vmov	sl, s0
 8012578:	463d      	mov	r5, r7
 801257a:	dc06      	bgt.n	801258a <__ieee754_pow+0x6a>
 801257c:	d101      	bne.n	8012582 <__ieee754_pow+0x62>
 801257e:	2e00      	cmp	r6, #0
 8012580:	d1e7      	bne.n	8012552 <__ieee754_pow+0x32>
 8012582:	4598      	cmp	r8, r3
 8012584:	dc01      	bgt.n	801258a <__ieee754_pow+0x6a>
 8012586:	d10f      	bne.n	80125a8 <__ieee754_pow+0x88>
 8012588:	b172      	cbz	r2, 80125a8 <__ieee754_pow+0x88>
 801258a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801258e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8012592:	ea55 050a 	orrs.w	r5, r5, sl
 8012596:	d1dc      	bne.n	8012552 <__ieee754_pow+0x32>
 8012598:	e9dd 3200 	ldrd	r3, r2, [sp]
 801259c:	18db      	adds	r3, r3, r3
 801259e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80125a2:	4152      	adcs	r2, r2
 80125a4:	429d      	cmp	r5, r3
 80125a6:	e7d0      	b.n	801254a <__ieee754_pow+0x2a>
 80125a8:	2d00      	cmp	r5, #0
 80125aa:	da3b      	bge.n	8012624 <__ieee754_pow+0x104>
 80125ac:	4b72      	ldr	r3, [pc, #456]	; (8012778 <__ieee754_pow+0x258>)
 80125ae:	4598      	cmp	r8, r3
 80125b0:	dc51      	bgt.n	8012656 <__ieee754_pow+0x136>
 80125b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80125b6:	4598      	cmp	r8, r3
 80125b8:	f340 84ac 	ble.w	8012f14 <__ieee754_pow+0x9f4>
 80125bc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80125c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80125c4:	2b14      	cmp	r3, #20
 80125c6:	dd0f      	ble.n	80125e8 <__ieee754_pow+0xc8>
 80125c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80125cc:	fa22 f103 	lsr.w	r1, r2, r3
 80125d0:	fa01 f303 	lsl.w	r3, r1, r3
 80125d4:	4293      	cmp	r3, r2
 80125d6:	f040 849d 	bne.w	8012f14 <__ieee754_pow+0x9f4>
 80125da:	f001 0101 	and.w	r1, r1, #1
 80125de:	f1c1 0302 	rsb	r3, r1, #2
 80125e2:	9304      	str	r3, [sp, #16]
 80125e4:	b182      	cbz	r2, 8012608 <__ieee754_pow+0xe8>
 80125e6:	e05f      	b.n	80126a8 <__ieee754_pow+0x188>
 80125e8:	2a00      	cmp	r2, #0
 80125ea:	d15b      	bne.n	80126a4 <__ieee754_pow+0x184>
 80125ec:	f1c3 0314 	rsb	r3, r3, #20
 80125f0:	fa48 f103 	asr.w	r1, r8, r3
 80125f4:	fa01 f303 	lsl.w	r3, r1, r3
 80125f8:	4543      	cmp	r3, r8
 80125fa:	f040 8488 	bne.w	8012f0e <__ieee754_pow+0x9ee>
 80125fe:	f001 0101 	and.w	r1, r1, #1
 8012602:	f1c1 0302 	rsb	r3, r1, #2
 8012606:	9304      	str	r3, [sp, #16]
 8012608:	4b5c      	ldr	r3, [pc, #368]	; (801277c <__ieee754_pow+0x25c>)
 801260a:	4598      	cmp	r8, r3
 801260c:	d132      	bne.n	8012674 <__ieee754_pow+0x154>
 801260e:	f1b9 0f00 	cmp.w	r9, #0
 8012612:	f280 8478 	bge.w	8012f06 <__ieee754_pow+0x9e6>
 8012616:	4959      	ldr	r1, [pc, #356]	; (801277c <__ieee754_pow+0x25c>)
 8012618:	4632      	mov	r2, r6
 801261a:	463b      	mov	r3, r7
 801261c:	2000      	movs	r0, #0
 801261e:	f7ee f91d 	bl	800085c <__aeabi_ddiv>
 8012622:	e79c      	b.n	801255e <__ieee754_pow+0x3e>
 8012624:	2300      	movs	r3, #0
 8012626:	9304      	str	r3, [sp, #16]
 8012628:	2a00      	cmp	r2, #0
 801262a:	d13d      	bne.n	80126a8 <__ieee754_pow+0x188>
 801262c:	4b51      	ldr	r3, [pc, #324]	; (8012774 <__ieee754_pow+0x254>)
 801262e:	4598      	cmp	r8, r3
 8012630:	d1ea      	bne.n	8012608 <__ieee754_pow+0xe8>
 8012632:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012636:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801263a:	ea53 030a 	orrs.w	r3, r3, sl
 801263e:	f000 845a 	beq.w	8012ef6 <__ieee754_pow+0x9d6>
 8012642:	4b4f      	ldr	r3, [pc, #316]	; (8012780 <__ieee754_pow+0x260>)
 8012644:	429c      	cmp	r4, r3
 8012646:	dd08      	ble.n	801265a <__ieee754_pow+0x13a>
 8012648:	f1b9 0f00 	cmp.w	r9, #0
 801264c:	f2c0 8457 	blt.w	8012efe <__ieee754_pow+0x9de>
 8012650:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012654:	e783      	b.n	801255e <__ieee754_pow+0x3e>
 8012656:	2302      	movs	r3, #2
 8012658:	e7e5      	b.n	8012626 <__ieee754_pow+0x106>
 801265a:	f1b9 0f00 	cmp.w	r9, #0
 801265e:	f04f 0000 	mov.w	r0, #0
 8012662:	f04f 0100 	mov.w	r1, #0
 8012666:	f6bf af7a 	bge.w	801255e <__ieee754_pow+0x3e>
 801266a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801266e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012672:	e774      	b.n	801255e <__ieee754_pow+0x3e>
 8012674:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012678:	d106      	bne.n	8012688 <__ieee754_pow+0x168>
 801267a:	4632      	mov	r2, r6
 801267c:	463b      	mov	r3, r7
 801267e:	4630      	mov	r0, r6
 8012680:	4639      	mov	r1, r7
 8012682:	f7ed ffc1 	bl	8000608 <__aeabi_dmul>
 8012686:	e76a      	b.n	801255e <__ieee754_pow+0x3e>
 8012688:	4b3e      	ldr	r3, [pc, #248]	; (8012784 <__ieee754_pow+0x264>)
 801268a:	4599      	cmp	r9, r3
 801268c:	d10c      	bne.n	80126a8 <__ieee754_pow+0x188>
 801268e:	2d00      	cmp	r5, #0
 8012690:	db0a      	blt.n	80126a8 <__ieee754_pow+0x188>
 8012692:	ec47 6b10 	vmov	d0, r6, r7
 8012696:	b009      	add	sp, #36	; 0x24
 8012698:	ecbd 8b06 	vpop	{d8-d10}
 801269c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126a0:	f000 bc6c 	b.w	8012f7c <__ieee754_sqrt>
 80126a4:	2300      	movs	r3, #0
 80126a6:	9304      	str	r3, [sp, #16]
 80126a8:	ec47 6b10 	vmov	d0, r6, r7
 80126ac:	f000 fd48 	bl	8013140 <fabs>
 80126b0:	ec51 0b10 	vmov	r0, r1, d0
 80126b4:	f1ba 0f00 	cmp.w	sl, #0
 80126b8:	d129      	bne.n	801270e <__ieee754_pow+0x1ee>
 80126ba:	b124      	cbz	r4, 80126c6 <__ieee754_pow+0x1a6>
 80126bc:	4b2f      	ldr	r3, [pc, #188]	; (801277c <__ieee754_pow+0x25c>)
 80126be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80126c2:	429a      	cmp	r2, r3
 80126c4:	d123      	bne.n	801270e <__ieee754_pow+0x1ee>
 80126c6:	f1b9 0f00 	cmp.w	r9, #0
 80126ca:	da05      	bge.n	80126d8 <__ieee754_pow+0x1b8>
 80126cc:	4602      	mov	r2, r0
 80126ce:	460b      	mov	r3, r1
 80126d0:	2000      	movs	r0, #0
 80126d2:	492a      	ldr	r1, [pc, #168]	; (801277c <__ieee754_pow+0x25c>)
 80126d4:	f7ee f8c2 	bl	800085c <__aeabi_ddiv>
 80126d8:	2d00      	cmp	r5, #0
 80126da:	f6bf af40 	bge.w	801255e <__ieee754_pow+0x3e>
 80126de:	9b04      	ldr	r3, [sp, #16]
 80126e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80126e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80126e8:	4323      	orrs	r3, r4
 80126ea:	d108      	bne.n	80126fe <__ieee754_pow+0x1de>
 80126ec:	4602      	mov	r2, r0
 80126ee:	460b      	mov	r3, r1
 80126f0:	4610      	mov	r0, r2
 80126f2:	4619      	mov	r1, r3
 80126f4:	f7ed fdd0 	bl	8000298 <__aeabi_dsub>
 80126f8:	4602      	mov	r2, r0
 80126fa:	460b      	mov	r3, r1
 80126fc:	e78f      	b.n	801261e <__ieee754_pow+0xfe>
 80126fe:	9b04      	ldr	r3, [sp, #16]
 8012700:	2b01      	cmp	r3, #1
 8012702:	f47f af2c 	bne.w	801255e <__ieee754_pow+0x3e>
 8012706:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801270a:	4619      	mov	r1, r3
 801270c:	e727      	b.n	801255e <__ieee754_pow+0x3e>
 801270e:	0feb      	lsrs	r3, r5, #31
 8012710:	3b01      	subs	r3, #1
 8012712:	9306      	str	r3, [sp, #24]
 8012714:	9a06      	ldr	r2, [sp, #24]
 8012716:	9b04      	ldr	r3, [sp, #16]
 8012718:	4313      	orrs	r3, r2
 801271a:	d102      	bne.n	8012722 <__ieee754_pow+0x202>
 801271c:	4632      	mov	r2, r6
 801271e:	463b      	mov	r3, r7
 8012720:	e7e6      	b.n	80126f0 <__ieee754_pow+0x1d0>
 8012722:	4b19      	ldr	r3, [pc, #100]	; (8012788 <__ieee754_pow+0x268>)
 8012724:	4598      	cmp	r8, r3
 8012726:	f340 80fb 	ble.w	8012920 <__ieee754_pow+0x400>
 801272a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801272e:	4598      	cmp	r8, r3
 8012730:	4b13      	ldr	r3, [pc, #76]	; (8012780 <__ieee754_pow+0x260>)
 8012732:	dd0c      	ble.n	801274e <__ieee754_pow+0x22e>
 8012734:	429c      	cmp	r4, r3
 8012736:	dc0f      	bgt.n	8012758 <__ieee754_pow+0x238>
 8012738:	f1b9 0f00 	cmp.w	r9, #0
 801273c:	da0f      	bge.n	801275e <__ieee754_pow+0x23e>
 801273e:	2000      	movs	r0, #0
 8012740:	b009      	add	sp, #36	; 0x24
 8012742:	ecbd 8b06 	vpop	{d8-d10}
 8012746:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801274a:	f000 bcf0 	b.w	801312e <__math_oflow>
 801274e:	429c      	cmp	r4, r3
 8012750:	dbf2      	blt.n	8012738 <__ieee754_pow+0x218>
 8012752:	4b0a      	ldr	r3, [pc, #40]	; (801277c <__ieee754_pow+0x25c>)
 8012754:	429c      	cmp	r4, r3
 8012756:	dd19      	ble.n	801278c <__ieee754_pow+0x26c>
 8012758:	f1b9 0f00 	cmp.w	r9, #0
 801275c:	dcef      	bgt.n	801273e <__ieee754_pow+0x21e>
 801275e:	2000      	movs	r0, #0
 8012760:	b009      	add	sp, #36	; 0x24
 8012762:	ecbd 8b06 	vpop	{d8-d10}
 8012766:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801276a:	f000 bcd7 	b.w	801311c <__math_uflow>
 801276e:	bf00      	nop
 8012770:	fff00000 	.word	0xfff00000
 8012774:	7ff00000 	.word	0x7ff00000
 8012778:	433fffff 	.word	0x433fffff
 801277c:	3ff00000 	.word	0x3ff00000
 8012780:	3fefffff 	.word	0x3fefffff
 8012784:	3fe00000 	.word	0x3fe00000
 8012788:	41e00000 	.word	0x41e00000
 801278c:	4b60      	ldr	r3, [pc, #384]	; (8012910 <__ieee754_pow+0x3f0>)
 801278e:	2200      	movs	r2, #0
 8012790:	f7ed fd82 	bl	8000298 <__aeabi_dsub>
 8012794:	a354      	add	r3, pc, #336	; (adr r3, 80128e8 <__ieee754_pow+0x3c8>)
 8012796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279a:	4604      	mov	r4, r0
 801279c:	460d      	mov	r5, r1
 801279e:	f7ed ff33 	bl	8000608 <__aeabi_dmul>
 80127a2:	a353      	add	r3, pc, #332	; (adr r3, 80128f0 <__ieee754_pow+0x3d0>)
 80127a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a8:	4606      	mov	r6, r0
 80127aa:	460f      	mov	r7, r1
 80127ac:	4620      	mov	r0, r4
 80127ae:	4629      	mov	r1, r5
 80127b0:	f7ed ff2a 	bl	8000608 <__aeabi_dmul>
 80127b4:	4b57      	ldr	r3, [pc, #348]	; (8012914 <__ieee754_pow+0x3f4>)
 80127b6:	4682      	mov	sl, r0
 80127b8:	468b      	mov	fp, r1
 80127ba:	2200      	movs	r2, #0
 80127bc:	4620      	mov	r0, r4
 80127be:	4629      	mov	r1, r5
 80127c0:	f7ed ff22 	bl	8000608 <__aeabi_dmul>
 80127c4:	4602      	mov	r2, r0
 80127c6:	460b      	mov	r3, r1
 80127c8:	a14b      	add	r1, pc, #300	; (adr r1, 80128f8 <__ieee754_pow+0x3d8>)
 80127ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127ce:	f7ed fd63 	bl	8000298 <__aeabi_dsub>
 80127d2:	4622      	mov	r2, r4
 80127d4:	462b      	mov	r3, r5
 80127d6:	f7ed ff17 	bl	8000608 <__aeabi_dmul>
 80127da:	4602      	mov	r2, r0
 80127dc:	460b      	mov	r3, r1
 80127de:	2000      	movs	r0, #0
 80127e0:	494d      	ldr	r1, [pc, #308]	; (8012918 <__ieee754_pow+0x3f8>)
 80127e2:	f7ed fd59 	bl	8000298 <__aeabi_dsub>
 80127e6:	4622      	mov	r2, r4
 80127e8:	4680      	mov	r8, r0
 80127ea:	4689      	mov	r9, r1
 80127ec:	462b      	mov	r3, r5
 80127ee:	4620      	mov	r0, r4
 80127f0:	4629      	mov	r1, r5
 80127f2:	f7ed ff09 	bl	8000608 <__aeabi_dmul>
 80127f6:	4602      	mov	r2, r0
 80127f8:	460b      	mov	r3, r1
 80127fa:	4640      	mov	r0, r8
 80127fc:	4649      	mov	r1, r9
 80127fe:	f7ed ff03 	bl	8000608 <__aeabi_dmul>
 8012802:	a33f      	add	r3, pc, #252	; (adr r3, 8012900 <__ieee754_pow+0x3e0>)
 8012804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012808:	f7ed fefe 	bl	8000608 <__aeabi_dmul>
 801280c:	4602      	mov	r2, r0
 801280e:	460b      	mov	r3, r1
 8012810:	4650      	mov	r0, sl
 8012812:	4659      	mov	r1, fp
 8012814:	f7ed fd40 	bl	8000298 <__aeabi_dsub>
 8012818:	4602      	mov	r2, r0
 801281a:	460b      	mov	r3, r1
 801281c:	4680      	mov	r8, r0
 801281e:	4689      	mov	r9, r1
 8012820:	4630      	mov	r0, r6
 8012822:	4639      	mov	r1, r7
 8012824:	f7ed fd3a 	bl	800029c <__adddf3>
 8012828:	2000      	movs	r0, #0
 801282a:	4632      	mov	r2, r6
 801282c:	463b      	mov	r3, r7
 801282e:	4604      	mov	r4, r0
 8012830:	460d      	mov	r5, r1
 8012832:	f7ed fd31 	bl	8000298 <__aeabi_dsub>
 8012836:	4602      	mov	r2, r0
 8012838:	460b      	mov	r3, r1
 801283a:	4640      	mov	r0, r8
 801283c:	4649      	mov	r1, r9
 801283e:	f7ed fd2b 	bl	8000298 <__aeabi_dsub>
 8012842:	9b04      	ldr	r3, [sp, #16]
 8012844:	9a06      	ldr	r2, [sp, #24]
 8012846:	3b01      	subs	r3, #1
 8012848:	4313      	orrs	r3, r2
 801284a:	4682      	mov	sl, r0
 801284c:	468b      	mov	fp, r1
 801284e:	f040 81e7 	bne.w	8012c20 <__ieee754_pow+0x700>
 8012852:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012908 <__ieee754_pow+0x3e8>
 8012856:	eeb0 8a47 	vmov.f32	s16, s14
 801285a:	eef0 8a67 	vmov.f32	s17, s15
 801285e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012862:	2600      	movs	r6, #0
 8012864:	4632      	mov	r2, r6
 8012866:	463b      	mov	r3, r7
 8012868:	e9dd 0100 	ldrd	r0, r1, [sp]
 801286c:	f7ed fd14 	bl	8000298 <__aeabi_dsub>
 8012870:	4622      	mov	r2, r4
 8012872:	462b      	mov	r3, r5
 8012874:	f7ed fec8 	bl	8000608 <__aeabi_dmul>
 8012878:	e9dd 2300 	ldrd	r2, r3, [sp]
 801287c:	4680      	mov	r8, r0
 801287e:	4689      	mov	r9, r1
 8012880:	4650      	mov	r0, sl
 8012882:	4659      	mov	r1, fp
 8012884:	f7ed fec0 	bl	8000608 <__aeabi_dmul>
 8012888:	4602      	mov	r2, r0
 801288a:	460b      	mov	r3, r1
 801288c:	4640      	mov	r0, r8
 801288e:	4649      	mov	r1, r9
 8012890:	f7ed fd04 	bl	800029c <__adddf3>
 8012894:	4632      	mov	r2, r6
 8012896:	463b      	mov	r3, r7
 8012898:	4680      	mov	r8, r0
 801289a:	4689      	mov	r9, r1
 801289c:	4620      	mov	r0, r4
 801289e:	4629      	mov	r1, r5
 80128a0:	f7ed feb2 	bl	8000608 <__aeabi_dmul>
 80128a4:	460b      	mov	r3, r1
 80128a6:	4604      	mov	r4, r0
 80128a8:	460d      	mov	r5, r1
 80128aa:	4602      	mov	r2, r0
 80128ac:	4649      	mov	r1, r9
 80128ae:	4640      	mov	r0, r8
 80128b0:	f7ed fcf4 	bl	800029c <__adddf3>
 80128b4:	4b19      	ldr	r3, [pc, #100]	; (801291c <__ieee754_pow+0x3fc>)
 80128b6:	4299      	cmp	r1, r3
 80128b8:	ec45 4b19 	vmov	d9, r4, r5
 80128bc:	4606      	mov	r6, r0
 80128be:	460f      	mov	r7, r1
 80128c0:	468b      	mov	fp, r1
 80128c2:	f340 82f1 	ble.w	8012ea8 <__ieee754_pow+0x988>
 80128c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80128ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80128ce:	4303      	orrs	r3, r0
 80128d0:	f000 81e4 	beq.w	8012c9c <__ieee754_pow+0x77c>
 80128d4:	ec51 0b18 	vmov	r0, r1, d8
 80128d8:	2200      	movs	r2, #0
 80128da:	2300      	movs	r3, #0
 80128dc:	f7ee f906 	bl	8000aec <__aeabi_dcmplt>
 80128e0:	3800      	subs	r0, #0
 80128e2:	bf18      	it	ne
 80128e4:	2001      	movne	r0, #1
 80128e6:	e72b      	b.n	8012740 <__ieee754_pow+0x220>
 80128e8:	60000000 	.word	0x60000000
 80128ec:	3ff71547 	.word	0x3ff71547
 80128f0:	f85ddf44 	.word	0xf85ddf44
 80128f4:	3e54ae0b 	.word	0x3e54ae0b
 80128f8:	55555555 	.word	0x55555555
 80128fc:	3fd55555 	.word	0x3fd55555
 8012900:	652b82fe 	.word	0x652b82fe
 8012904:	3ff71547 	.word	0x3ff71547
 8012908:	00000000 	.word	0x00000000
 801290c:	bff00000 	.word	0xbff00000
 8012910:	3ff00000 	.word	0x3ff00000
 8012914:	3fd00000 	.word	0x3fd00000
 8012918:	3fe00000 	.word	0x3fe00000
 801291c:	408fffff 	.word	0x408fffff
 8012920:	4bd5      	ldr	r3, [pc, #852]	; (8012c78 <__ieee754_pow+0x758>)
 8012922:	402b      	ands	r3, r5
 8012924:	2200      	movs	r2, #0
 8012926:	b92b      	cbnz	r3, 8012934 <__ieee754_pow+0x414>
 8012928:	4bd4      	ldr	r3, [pc, #848]	; (8012c7c <__ieee754_pow+0x75c>)
 801292a:	f7ed fe6d 	bl	8000608 <__aeabi_dmul>
 801292e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012932:	460c      	mov	r4, r1
 8012934:	1523      	asrs	r3, r4, #20
 8012936:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801293a:	4413      	add	r3, r2
 801293c:	9305      	str	r3, [sp, #20]
 801293e:	4bd0      	ldr	r3, [pc, #832]	; (8012c80 <__ieee754_pow+0x760>)
 8012940:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012944:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012948:	429c      	cmp	r4, r3
 801294a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801294e:	dd08      	ble.n	8012962 <__ieee754_pow+0x442>
 8012950:	4bcc      	ldr	r3, [pc, #816]	; (8012c84 <__ieee754_pow+0x764>)
 8012952:	429c      	cmp	r4, r3
 8012954:	f340 8162 	ble.w	8012c1c <__ieee754_pow+0x6fc>
 8012958:	9b05      	ldr	r3, [sp, #20]
 801295a:	3301      	adds	r3, #1
 801295c:	9305      	str	r3, [sp, #20]
 801295e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012962:	2400      	movs	r4, #0
 8012964:	00e3      	lsls	r3, r4, #3
 8012966:	9307      	str	r3, [sp, #28]
 8012968:	4bc7      	ldr	r3, [pc, #796]	; (8012c88 <__ieee754_pow+0x768>)
 801296a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801296e:	ed93 7b00 	vldr	d7, [r3]
 8012972:	4629      	mov	r1, r5
 8012974:	ec53 2b17 	vmov	r2, r3, d7
 8012978:	eeb0 9a47 	vmov.f32	s18, s14
 801297c:	eef0 9a67 	vmov.f32	s19, s15
 8012980:	4682      	mov	sl, r0
 8012982:	f7ed fc89 	bl	8000298 <__aeabi_dsub>
 8012986:	4652      	mov	r2, sl
 8012988:	4606      	mov	r6, r0
 801298a:	460f      	mov	r7, r1
 801298c:	462b      	mov	r3, r5
 801298e:	ec51 0b19 	vmov	r0, r1, d9
 8012992:	f7ed fc83 	bl	800029c <__adddf3>
 8012996:	4602      	mov	r2, r0
 8012998:	460b      	mov	r3, r1
 801299a:	2000      	movs	r0, #0
 801299c:	49bb      	ldr	r1, [pc, #748]	; (8012c8c <__ieee754_pow+0x76c>)
 801299e:	f7ed ff5d 	bl	800085c <__aeabi_ddiv>
 80129a2:	ec41 0b1a 	vmov	d10, r0, r1
 80129a6:	4602      	mov	r2, r0
 80129a8:	460b      	mov	r3, r1
 80129aa:	4630      	mov	r0, r6
 80129ac:	4639      	mov	r1, r7
 80129ae:	f7ed fe2b 	bl	8000608 <__aeabi_dmul>
 80129b2:	2300      	movs	r3, #0
 80129b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129b8:	9302      	str	r3, [sp, #8]
 80129ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80129be:	46ab      	mov	fp, r5
 80129c0:	106d      	asrs	r5, r5, #1
 80129c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80129c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80129ca:	ec41 0b18 	vmov	d8, r0, r1
 80129ce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80129d2:	2200      	movs	r2, #0
 80129d4:	4640      	mov	r0, r8
 80129d6:	4649      	mov	r1, r9
 80129d8:	4614      	mov	r4, r2
 80129da:	461d      	mov	r5, r3
 80129dc:	f7ed fe14 	bl	8000608 <__aeabi_dmul>
 80129e0:	4602      	mov	r2, r0
 80129e2:	460b      	mov	r3, r1
 80129e4:	4630      	mov	r0, r6
 80129e6:	4639      	mov	r1, r7
 80129e8:	f7ed fc56 	bl	8000298 <__aeabi_dsub>
 80129ec:	ec53 2b19 	vmov	r2, r3, d9
 80129f0:	4606      	mov	r6, r0
 80129f2:	460f      	mov	r7, r1
 80129f4:	4620      	mov	r0, r4
 80129f6:	4629      	mov	r1, r5
 80129f8:	f7ed fc4e 	bl	8000298 <__aeabi_dsub>
 80129fc:	4602      	mov	r2, r0
 80129fe:	460b      	mov	r3, r1
 8012a00:	4650      	mov	r0, sl
 8012a02:	4659      	mov	r1, fp
 8012a04:	f7ed fc48 	bl	8000298 <__aeabi_dsub>
 8012a08:	4642      	mov	r2, r8
 8012a0a:	464b      	mov	r3, r9
 8012a0c:	f7ed fdfc 	bl	8000608 <__aeabi_dmul>
 8012a10:	4602      	mov	r2, r0
 8012a12:	460b      	mov	r3, r1
 8012a14:	4630      	mov	r0, r6
 8012a16:	4639      	mov	r1, r7
 8012a18:	f7ed fc3e 	bl	8000298 <__aeabi_dsub>
 8012a1c:	ec53 2b1a 	vmov	r2, r3, d10
 8012a20:	f7ed fdf2 	bl	8000608 <__aeabi_dmul>
 8012a24:	ec53 2b18 	vmov	r2, r3, d8
 8012a28:	ec41 0b19 	vmov	d9, r0, r1
 8012a2c:	ec51 0b18 	vmov	r0, r1, d8
 8012a30:	f7ed fdea 	bl	8000608 <__aeabi_dmul>
 8012a34:	a37c      	add	r3, pc, #496	; (adr r3, 8012c28 <__ieee754_pow+0x708>)
 8012a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3a:	4604      	mov	r4, r0
 8012a3c:	460d      	mov	r5, r1
 8012a3e:	f7ed fde3 	bl	8000608 <__aeabi_dmul>
 8012a42:	a37b      	add	r3, pc, #492	; (adr r3, 8012c30 <__ieee754_pow+0x710>)
 8012a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a48:	f7ed fc28 	bl	800029c <__adddf3>
 8012a4c:	4622      	mov	r2, r4
 8012a4e:	462b      	mov	r3, r5
 8012a50:	f7ed fdda 	bl	8000608 <__aeabi_dmul>
 8012a54:	a378      	add	r3, pc, #480	; (adr r3, 8012c38 <__ieee754_pow+0x718>)
 8012a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5a:	f7ed fc1f 	bl	800029c <__adddf3>
 8012a5e:	4622      	mov	r2, r4
 8012a60:	462b      	mov	r3, r5
 8012a62:	f7ed fdd1 	bl	8000608 <__aeabi_dmul>
 8012a66:	a376      	add	r3, pc, #472	; (adr r3, 8012c40 <__ieee754_pow+0x720>)
 8012a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6c:	f7ed fc16 	bl	800029c <__adddf3>
 8012a70:	4622      	mov	r2, r4
 8012a72:	462b      	mov	r3, r5
 8012a74:	f7ed fdc8 	bl	8000608 <__aeabi_dmul>
 8012a78:	a373      	add	r3, pc, #460	; (adr r3, 8012c48 <__ieee754_pow+0x728>)
 8012a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a7e:	f7ed fc0d 	bl	800029c <__adddf3>
 8012a82:	4622      	mov	r2, r4
 8012a84:	462b      	mov	r3, r5
 8012a86:	f7ed fdbf 	bl	8000608 <__aeabi_dmul>
 8012a8a:	a371      	add	r3, pc, #452	; (adr r3, 8012c50 <__ieee754_pow+0x730>)
 8012a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a90:	f7ed fc04 	bl	800029c <__adddf3>
 8012a94:	4622      	mov	r2, r4
 8012a96:	4606      	mov	r6, r0
 8012a98:	460f      	mov	r7, r1
 8012a9a:	462b      	mov	r3, r5
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	4629      	mov	r1, r5
 8012aa0:	f7ed fdb2 	bl	8000608 <__aeabi_dmul>
 8012aa4:	4602      	mov	r2, r0
 8012aa6:	460b      	mov	r3, r1
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	4639      	mov	r1, r7
 8012aac:	f7ed fdac 	bl	8000608 <__aeabi_dmul>
 8012ab0:	4642      	mov	r2, r8
 8012ab2:	4604      	mov	r4, r0
 8012ab4:	460d      	mov	r5, r1
 8012ab6:	464b      	mov	r3, r9
 8012ab8:	ec51 0b18 	vmov	r0, r1, d8
 8012abc:	f7ed fbee 	bl	800029c <__adddf3>
 8012ac0:	ec53 2b19 	vmov	r2, r3, d9
 8012ac4:	f7ed fda0 	bl	8000608 <__aeabi_dmul>
 8012ac8:	4622      	mov	r2, r4
 8012aca:	462b      	mov	r3, r5
 8012acc:	f7ed fbe6 	bl	800029c <__adddf3>
 8012ad0:	4642      	mov	r2, r8
 8012ad2:	4682      	mov	sl, r0
 8012ad4:	468b      	mov	fp, r1
 8012ad6:	464b      	mov	r3, r9
 8012ad8:	4640      	mov	r0, r8
 8012ada:	4649      	mov	r1, r9
 8012adc:	f7ed fd94 	bl	8000608 <__aeabi_dmul>
 8012ae0:	4b6b      	ldr	r3, [pc, #428]	; (8012c90 <__ieee754_pow+0x770>)
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	4606      	mov	r6, r0
 8012ae6:	460f      	mov	r7, r1
 8012ae8:	f7ed fbd8 	bl	800029c <__adddf3>
 8012aec:	4652      	mov	r2, sl
 8012aee:	465b      	mov	r3, fp
 8012af0:	f7ed fbd4 	bl	800029c <__adddf3>
 8012af4:	2000      	movs	r0, #0
 8012af6:	4604      	mov	r4, r0
 8012af8:	460d      	mov	r5, r1
 8012afa:	4602      	mov	r2, r0
 8012afc:	460b      	mov	r3, r1
 8012afe:	4640      	mov	r0, r8
 8012b00:	4649      	mov	r1, r9
 8012b02:	f7ed fd81 	bl	8000608 <__aeabi_dmul>
 8012b06:	4b62      	ldr	r3, [pc, #392]	; (8012c90 <__ieee754_pow+0x770>)
 8012b08:	4680      	mov	r8, r0
 8012b0a:	4689      	mov	r9, r1
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	4620      	mov	r0, r4
 8012b10:	4629      	mov	r1, r5
 8012b12:	f7ed fbc1 	bl	8000298 <__aeabi_dsub>
 8012b16:	4632      	mov	r2, r6
 8012b18:	463b      	mov	r3, r7
 8012b1a:	f7ed fbbd 	bl	8000298 <__aeabi_dsub>
 8012b1e:	4602      	mov	r2, r0
 8012b20:	460b      	mov	r3, r1
 8012b22:	4650      	mov	r0, sl
 8012b24:	4659      	mov	r1, fp
 8012b26:	f7ed fbb7 	bl	8000298 <__aeabi_dsub>
 8012b2a:	ec53 2b18 	vmov	r2, r3, d8
 8012b2e:	f7ed fd6b 	bl	8000608 <__aeabi_dmul>
 8012b32:	4622      	mov	r2, r4
 8012b34:	4606      	mov	r6, r0
 8012b36:	460f      	mov	r7, r1
 8012b38:	462b      	mov	r3, r5
 8012b3a:	ec51 0b19 	vmov	r0, r1, d9
 8012b3e:	f7ed fd63 	bl	8000608 <__aeabi_dmul>
 8012b42:	4602      	mov	r2, r0
 8012b44:	460b      	mov	r3, r1
 8012b46:	4630      	mov	r0, r6
 8012b48:	4639      	mov	r1, r7
 8012b4a:	f7ed fba7 	bl	800029c <__adddf3>
 8012b4e:	4606      	mov	r6, r0
 8012b50:	460f      	mov	r7, r1
 8012b52:	4602      	mov	r2, r0
 8012b54:	460b      	mov	r3, r1
 8012b56:	4640      	mov	r0, r8
 8012b58:	4649      	mov	r1, r9
 8012b5a:	f7ed fb9f 	bl	800029c <__adddf3>
 8012b5e:	a33e      	add	r3, pc, #248	; (adr r3, 8012c58 <__ieee754_pow+0x738>)
 8012b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b64:	2000      	movs	r0, #0
 8012b66:	4604      	mov	r4, r0
 8012b68:	460d      	mov	r5, r1
 8012b6a:	f7ed fd4d 	bl	8000608 <__aeabi_dmul>
 8012b6e:	4642      	mov	r2, r8
 8012b70:	ec41 0b18 	vmov	d8, r0, r1
 8012b74:	464b      	mov	r3, r9
 8012b76:	4620      	mov	r0, r4
 8012b78:	4629      	mov	r1, r5
 8012b7a:	f7ed fb8d 	bl	8000298 <__aeabi_dsub>
 8012b7e:	4602      	mov	r2, r0
 8012b80:	460b      	mov	r3, r1
 8012b82:	4630      	mov	r0, r6
 8012b84:	4639      	mov	r1, r7
 8012b86:	f7ed fb87 	bl	8000298 <__aeabi_dsub>
 8012b8a:	a335      	add	r3, pc, #212	; (adr r3, 8012c60 <__ieee754_pow+0x740>)
 8012b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b90:	f7ed fd3a 	bl	8000608 <__aeabi_dmul>
 8012b94:	a334      	add	r3, pc, #208	; (adr r3, 8012c68 <__ieee754_pow+0x748>)
 8012b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9a:	4606      	mov	r6, r0
 8012b9c:	460f      	mov	r7, r1
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	4629      	mov	r1, r5
 8012ba2:	f7ed fd31 	bl	8000608 <__aeabi_dmul>
 8012ba6:	4602      	mov	r2, r0
 8012ba8:	460b      	mov	r3, r1
 8012baa:	4630      	mov	r0, r6
 8012bac:	4639      	mov	r1, r7
 8012bae:	f7ed fb75 	bl	800029c <__adddf3>
 8012bb2:	9a07      	ldr	r2, [sp, #28]
 8012bb4:	4b37      	ldr	r3, [pc, #220]	; (8012c94 <__ieee754_pow+0x774>)
 8012bb6:	4413      	add	r3, r2
 8012bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bbc:	f7ed fb6e 	bl	800029c <__adddf3>
 8012bc0:	4682      	mov	sl, r0
 8012bc2:	9805      	ldr	r0, [sp, #20]
 8012bc4:	468b      	mov	fp, r1
 8012bc6:	f7ed fcb5 	bl	8000534 <__aeabi_i2d>
 8012bca:	9a07      	ldr	r2, [sp, #28]
 8012bcc:	4b32      	ldr	r3, [pc, #200]	; (8012c98 <__ieee754_pow+0x778>)
 8012bce:	4413      	add	r3, r2
 8012bd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012bd4:	4606      	mov	r6, r0
 8012bd6:	460f      	mov	r7, r1
 8012bd8:	4652      	mov	r2, sl
 8012bda:	465b      	mov	r3, fp
 8012bdc:	ec51 0b18 	vmov	r0, r1, d8
 8012be0:	f7ed fb5c 	bl	800029c <__adddf3>
 8012be4:	4642      	mov	r2, r8
 8012be6:	464b      	mov	r3, r9
 8012be8:	f7ed fb58 	bl	800029c <__adddf3>
 8012bec:	4632      	mov	r2, r6
 8012bee:	463b      	mov	r3, r7
 8012bf0:	f7ed fb54 	bl	800029c <__adddf3>
 8012bf4:	2000      	movs	r0, #0
 8012bf6:	4632      	mov	r2, r6
 8012bf8:	463b      	mov	r3, r7
 8012bfa:	4604      	mov	r4, r0
 8012bfc:	460d      	mov	r5, r1
 8012bfe:	f7ed fb4b 	bl	8000298 <__aeabi_dsub>
 8012c02:	4642      	mov	r2, r8
 8012c04:	464b      	mov	r3, r9
 8012c06:	f7ed fb47 	bl	8000298 <__aeabi_dsub>
 8012c0a:	ec53 2b18 	vmov	r2, r3, d8
 8012c0e:	f7ed fb43 	bl	8000298 <__aeabi_dsub>
 8012c12:	4602      	mov	r2, r0
 8012c14:	460b      	mov	r3, r1
 8012c16:	4650      	mov	r0, sl
 8012c18:	4659      	mov	r1, fp
 8012c1a:	e610      	b.n	801283e <__ieee754_pow+0x31e>
 8012c1c:	2401      	movs	r4, #1
 8012c1e:	e6a1      	b.n	8012964 <__ieee754_pow+0x444>
 8012c20:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012c70 <__ieee754_pow+0x750>
 8012c24:	e617      	b.n	8012856 <__ieee754_pow+0x336>
 8012c26:	bf00      	nop
 8012c28:	4a454eef 	.word	0x4a454eef
 8012c2c:	3fca7e28 	.word	0x3fca7e28
 8012c30:	93c9db65 	.word	0x93c9db65
 8012c34:	3fcd864a 	.word	0x3fcd864a
 8012c38:	a91d4101 	.word	0xa91d4101
 8012c3c:	3fd17460 	.word	0x3fd17460
 8012c40:	518f264d 	.word	0x518f264d
 8012c44:	3fd55555 	.word	0x3fd55555
 8012c48:	db6fabff 	.word	0xdb6fabff
 8012c4c:	3fdb6db6 	.word	0x3fdb6db6
 8012c50:	33333303 	.word	0x33333303
 8012c54:	3fe33333 	.word	0x3fe33333
 8012c58:	e0000000 	.word	0xe0000000
 8012c5c:	3feec709 	.word	0x3feec709
 8012c60:	dc3a03fd 	.word	0xdc3a03fd
 8012c64:	3feec709 	.word	0x3feec709
 8012c68:	145b01f5 	.word	0x145b01f5
 8012c6c:	be3e2fe0 	.word	0xbe3e2fe0
 8012c70:	00000000 	.word	0x00000000
 8012c74:	3ff00000 	.word	0x3ff00000
 8012c78:	7ff00000 	.word	0x7ff00000
 8012c7c:	43400000 	.word	0x43400000
 8012c80:	0003988e 	.word	0x0003988e
 8012c84:	000bb679 	.word	0x000bb679
 8012c88:	080153f0 	.word	0x080153f0
 8012c8c:	3ff00000 	.word	0x3ff00000
 8012c90:	40080000 	.word	0x40080000
 8012c94:	08015410 	.word	0x08015410
 8012c98:	08015400 	.word	0x08015400
 8012c9c:	a3b5      	add	r3, pc, #724	; (adr r3, 8012f74 <__ieee754_pow+0xa54>)
 8012c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca2:	4640      	mov	r0, r8
 8012ca4:	4649      	mov	r1, r9
 8012ca6:	f7ed faf9 	bl	800029c <__adddf3>
 8012caa:	4622      	mov	r2, r4
 8012cac:	ec41 0b1a 	vmov	d10, r0, r1
 8012cb0:	462b      	mov	r3, r5
 8012cb2:	4630      	mov	r0, r6
 8012cb4:	4639      	mov	r1, r7
 8012cb6:	f7ed faef 	bl	8000298 <__aeabi_dsub>
 8012cba:	4602      	mov	r2, r0
 8012cbc:	460b      	mov	r3, r1
 8012cbe:	ec51 0b1a 	vmov	r0, r1, d10
 8012cc2:	f7ed ff31 	bl	8000b28 <__aeabi_dcmpgt>
 8012cc6:	2800      	cmp	r0, #0
 8012cc8:	f47f ae04 	bne.w	80128d4 <__ieee754_pow+0x3b4>
 8012ccc:	4aa4      	ldr	r2, [pc, #656]	; (8012f60 <__ieee754_pow+0xa40>)
 8012cce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	f340 8108 	ble.w	8012ee8 <__ieee754_pow+0x9c8>
 8012cd8:	151b      	asrs	r3, r3, #20
 8012cda:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012cde:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012ce2:	fa4a f303 	asr.w	r3, sl, r3
 8012ce6:	445b      	add	r3, fp
 8012ce8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012cec:	4e9d      	ldr	r6, [pc, #628]	; (8012f64 <__ieee754_pow+0xa44>)
 8012cee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012cf2:	4116      	asrs	r6, r2
 8012cf4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012cf8:	2000      	movs	r0, #0
 8012cfa:	ea23 0106 	bic.w	r1, r3, r6
 8012cfe:	f1c2 0214 	rsb	r2, r2, #20
 8012d02:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012d06:	fa4a fa02 	asr.w	sl, sl, r2
 8012d0a:	f1bb 0f00 	cmp.w	fp, #0
 8012d0e:	4602      	mov	r2, r0
 8012d10:	460b      	mov	r3, r1
 8012d12:	4620      	mov	r0, r4
 8012d14:	4629      	mov	r1, r5
 8012d16:	bfb8      	it	lt
 8012d18:	f1ca 0a00 	rsblt	sl, sl, #0
 8012d1c:	f7ed fabc 	bl	8000298 <__aeabi_dsub>
 8012d20:	ec41 0b19 	vmov	d9, r0, r1
 8012d24:	4642      	mov	r2, r8
 8012d26:	464b      	mov	r3, r9
 8012d28:	ec51 0b19 	vmov	r0, r1, d9
 8012d2c:	f7ed fab6 	bl	800029c <__adddf3>
 8012d30:	a37b      	add	r3, pc, #492	; (adr r3, 8012f20 <__ieee754_pow+0xa00>)
 8012d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d36:	2000      	movs	r0, #0
 8012d38:	4604      	mov	r4, r0
 8012d3a:	460d      	mov	r5, r1
 8012d3c:	f7ed fc64 	bl	8000608 <__aeabi_dmul>
 8012d40:	ec53 2b19 	vmov	r2, r3, d9
 8012d44:	4606      	mov	r6, r0
 8012d46:	460f      	mov	r7, r1
 8012d48:	4620      	mov	r0, r4
 8012d4a:	4629      	mov	r1, r5
 8012d4c:	f7ed faa4 	bl	8000298 <__aeabi_dsub>
 8012d50:	4602      	mov	r2, r0
 8012d52:	460b      	mov	r3, r1
 8012d54:	4640      	mov	r0, r8
 8012d56:	4649      	mov	r1, r9
 8012d58:	f7ed fa9e 	bl	8000298 <__aeabi_dsub>
 8012d5c:	a372      	add	r3, pc, #456	; (adr r3, 8012f28 <__ieee754_pow+0xa08>)
 8012d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d62:	f7ed fc51 	bl	8000608 <__aeabi_dmul>
 8012d66:	a372      	add	r3, pc, #456	; (adr r3, 8012f30 <__ieee754_pow+0xa10>)
 8012d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d6c:	4680      	mov	r8, r0
 8012d6e:	4689      	mov	r9, r1
 8012d70:	4620      	mov	r0, r4
 8012d72:	4629      	mov	r1, r5
 8012d74:	f7ed fc48 	bl	8000608 <__aeabi_dmul>
 8012d78:	4602      	mov	r2, r0
 8012d7a:	460b      	mov	r3, r1
 8012d7c:	4640      	mov	r0, r8
 8012d7e:	4649      	mov	r1, r9
 8012d80:	f7ed fa8c 	bl	800029c <__adddf3>
 8012d84:	4604      	mov	r4, r0
 8012d86:	460d      	mov	r5, r1
 8012d88:	4602      	mov	r2, r0
 8012d8a:	460b      	mov	r3, r1
 8012d8c:	4630      	mov	r0, r6
 8012d8e:	4639      	mov	r1, r7
 8012d90:	f7ed fa84 	bl	800029c <__adddf3>
 8012d94:	4632      	mov	r2, r6
 8012d96:	463b      	mov	r3, r7
 8012d98:	4680      	mov	r8, r0
 8012d9a:	4689      	mov	r9, r1
 8012d9c:	f7ed fa7c 	bl	8000298 <__aeabi_dsub>
 8012da0:	4602      	mov	r2, r0
 8012da2:	460b      	mov	r3, r1
 8012da4:	4620      	mov	r0, r4
 8012da6:	4629      	mov	r1, r5
 8012da8:	f7ed fa76 	bl	8000298 <__aeabi_dsub>
 8012dac:	4642      	mov	r2, r8
 8012dae:	4606      	mov	r6, r0
 8012db0:	460f      	mov	r7, r1
 8012db2:	464b      	mov	r3, r9
 8012db4:	4640      	mov	r0, r8
 8012db6:	4649      	mov	r1, r9
 8012db8:	f7ed fc26 	bl	8000608 <__aeabi_dmul>
 8012dbc:	a35e      	add	r3, pc, #376	; (adr r3, 8012f38 <__ieee754_pow+0xa18>)
 8012dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc2:	4604      	mov	r4, r0
 8012dc4:	460d      	mov	r5, r1
 8012dc6:	f7ed fc1f 	bl	8000608 <__aeabi_dmul>
 8012dca:	a35d      	add	r3, pc, #372	; (adr r3, 8012f40 <__ieee754_pow+0xa20>)
 8012dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd0:	f7ed fa62 	bl	8000298 <__aeabi_dsub>
 8012dd4:	4622      	mov	r2, r4
 8012dd6:	462b      	mov	r3, r5
 8012dd8:	f7ed fc16 	bl	8000608 <__aeabi_dmul>
 8012ddc:	a35a      	add	r3, pc, #360	; (adr r3, 8012f48 <__ieee754_pow+0xa28>)
 8012dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de2:	f7ed fa5b 	bl	800029c <__adddf3>
 8012de6:	4622      	mov	r2, r4
 8012de8:	462b      	mov	r3, r5
 8012dea:	f7ed fc0d 	bl	8000608 <__aeabi_dmul>
 8012dee:	a358      	add	r3, pc, #352	; (adr r3, 8012f50 <__ieee754_pow+0xa30>)
 8012df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df4:	f7ed fa50 	bl	8000298 <__aeabi_dsub>
 8012df8:	4622      	mov	r2, r4
 8012dfa:	462b      	mov	r3, r5
 8012dfc:	f7ed fc04 	bl	8000608 <__aeabi_dmul>
 8012e00:	a355      	add	r3, pc, #340	; (adr r3, 8012f58 <__ieee754_pow+0xa38>)
 8012e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e06:	f7ed fa49 	bl	800029c <__adddf3>
 8012e0a:	4622      	mov	r2, r4
 8012e0c:	462b      	mov	r3, r5
 8012e0e:	f7ed fbfb 	bl	8000608 <__aeabi_dmul>
 8012e12:	4602      	mov	r2, r0
 8012e14:	460b      	mov	r3, r1
 8012e16:	4640      	mov	r0, r8
 8012e18:	4649      	mov	r1, r9
 8012e1a:	f7ed fa3d 	bl	8000298 <__aeabi_dsub>
 8012e1e:	4604      	mov	r4, r0
 8012e20:	460d      	mov	r5, r1
 8012e22:	4602      	mov	r2, r0
 8012e24:	460b      	mov	r3, r1
 8012e26:	4640      	mov	r0, r8
 8012e28:	4649      	mov	r1, r9
 8012e2a:	f7ed fbed 	bl	8000608 <__aeabi_dmul>
 8012e2e:	2200      	movs	r2, #0
 8012e30:	ec41 0b19 	vmov	d9, r0, r1
 8012e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012e38:	4620      	mov	r0, r4
 8012e3a:	4629      	mov	r1, r5
 8012e3c:	f7ed fa2c 	bl	8000298 <__aeabi_dsub>
 8012e40:	4602      	mov	r2, r0
 8012e42:	460b      	mov	r3, r1
 8012e44:	ec51 0b19 	vmov	r0, r1, d9
 8012e48:	f7ed fd08 	bl	800085c <__aeabi_ddiv>
 8012e4c:	4632      	mov	r2, r6
 8012e4e:	4604      	mov	r4, r0
 8012e50:	460d      	mov	r5, r1
 8012e52:	463b      	mov	r3, r7
 8012e54:	4640      	mov	r0, r8
 8012e56:	4649      	mov	r1, r9
 8012e58:	f7ed fbd6 	bl	8000608 <__aeabi_dmul>
 8012e5c:	4632      	mov	r2, r6
 8012e5e:	463b      	mov	r3, r7
 8012e60:	f7ed fa1c 	bl	800029c <__adddf3>
 8012e64:	4602      	mov	r2, r0
 8012e66:	460b      	mov	r3, r1
 8012e68:	4620      	mov	r0, r4
 8012e6a:	4629      	mov	r1, r5
 8012e6c:	f7ed fa14 	bl	8000298 <__aeabi_dsub>
 8012e70:	4642      	mov	r2, r8
 8012e72:	464b      	mov	r3, r9
 8012e74:	f7ed fa10 	bl	8000298 <__aeabi_dsub>
 8012e78:	460b      	mov	r3, r1
 8012e7a:	4602      	mov	r2, r0
 8012e7c:	493a      	ldr	r1, [pc, #232]	; (8012f68 <__ieee754_pow+0xa48>)
 8012e7e:	2000      	movs	r0, #0
 8012e80:	f7ed fa0a 	bl	8000298 <__aeabi_dsub>
 8012e84:	ec41 0b10 	vmov	d0, r0, r1
 8012e88:	ee10 3a90 	vmov	r3, s1
 8012e8c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012e94:	da2b      	bge.n	8012eee <__ieee754_pow+0x9ce>
 8012e96:	4650      	mov	r0, sl
 8012e98:	f000 f966 	bl	8013168 <scalbn>
 8012e9c:	ec51 0b10 	vmov	r0, r1, d0
 8012ea0:	ec53 2b18 	vmov	r2, r3, d8
 8012ea4:	f7ff bbed 	b.w	8012682 <__ieee754_pow+0x162>
 8012ea8:	4b30      	ldr	r3, [pc, #192]	; (8012f6c <__ieee754_pow+0xa4c>)
 8012eaa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012eae:	429e      	cmp	r6, r3
 8012eb0:	f77f af0c 	ble.w	8012ccc <__ieee754_pow+0x7ac>
 8012eb4:	4b2e      	ldr	r3, [pc, #184]	; (8012f70 <__ieee754_pow+0xa50>)
 8012eb6:	440b      	add	r3, r1
 8012eb8:	4303      	orrs	r3, r0
 8012eba:	d009      	beq.n	8012ed0 <__ieee754_pow+0x9b0>
 8012ebc:	ec51 0b18 	vmov	r0, r1, d8
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	f7ed fe12 	bl	8000aec <__aeabi_dcmplt>
 8012ec8:	3800      	subs	r0, #0
 8012eca:	bf18      	it	ne
 8012ecc:	2001      	movne	r0, #1
 8012ece:	e447      	b.n	8012760 <__ieee754_pow+0x240>
 8012ed0:	4622      	mov	r2, r4
 8012ed2:	462b      	mov	r3, r5
 8012ed4:	f7ed f9e0 	bl	8000298 <__aeabi_dsub>
 8012ed8:	4642      	mov	r2, r8
 8012eda:	464b      	mov	r3, r9
 8012edc:	f7ed fe1a 	bl	8000b14 <__aeabi_dcmpge>
 8012ee0:	2800      	cmp	r0, #0
 8012ee2:	f43f aef3 	beq.w	8012ccc <__ieee754_pow+0x7ac>
 8012ee6:	e7e9      	b.n	8012ebc <__ieee754_pow+0x99c>
 8012ee8:	f04f 0a00 	mov.w	sl, #0
 8012eec:	e71a      	b.n	8012d24 <__ieee754_pow+0x804>
 8012eee:	ec51 0b10 	vmov	r0, r1, d0
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	e7d4      	b.n	8012ea0 <__ieee754_pow+0x980>
 8012ef6:	491c      	ldr	r1, [pc, #112]	; (8012f68 <__ieee754_pow+0xa48>)
 8012ef8:	2000      	movs	r0, #0
 8012efa:	f7ff bb30 	b.w	801255e <__ieee754_pow+0x3e>
 8012efe:	2000      	movs	r0, #0
 8012f00:	2100      	movs	r1, #0
 8012f02:	f7ff bb2c 	b.w	801255e <__ieee754_pow+0x3e>
 8012f06:	4630      	mov	r0, r6
 8012f08:	4639      	mov	r1, r7
 8012f0a:	f7ff bb28 	b.w	801255e <__ieee754_pow+0x3e>
 8012f0e:	9204      	str	r2, [sp, #16]
 8012f10:	f7ff bb7a 	b.w	8012608 <__ieee754_pow+0xe8>
 8012f14:	2300      	movs	r3, #0
 8012f16:	f7ff bb64 	b.w	80125e2 <__ieee754_pow+0xc2>
 8012f1a:	bf00      	nop
 8012f1c:	f3af 8000 	nop.w
 8012f20:	00000000 	.word	0x00000000
 8012f24:	3fe62e43 	.word	0x3fe62e43
 8012f28:	fefa39ef 	.word	0xfefa39ef
 8012f2c:	3fe62e42 	.word	0x3fe62e42
 8012f30:	0ca86c39 	.word	0x0ca86c39
 8012f34:	be205c61 	.word	0xbe205c61
 8012f38:	72bea4d0 	.word	0x72bea4d0
 8012f3c:	3e663769 	.word	0x3e663769
 8012f40:	c5d26bf1 	.word	0xc5d26bf1
 8012f44:	3ebbbd41 	.word	0x3ebbbd41
 8012f48:	af25de2c 	.word	0xaf25de2c
 8012f4c:	3f11566a 	.word	0x3f11566a
 8012f50:	16bebd93 	.word	0x16bebd93
 8012f54:	3f66c16c 	.word	0x3f66c16c
 8012f58:	5555553e 	.word	0x5555553e
 8012f5c:	3fc55555 	.word	0x3fc55555
 8012f60:	3fe00000 	.word	0x3fe00000
 8012f64:	000fffff 	.word	0x000fffff
 8012f68:	3ff00000 	.word	0x3ff00000
 8012f6c:	4090cbff 	.word	0x4090cbff
 8012f70:	3f6f3400 	.word	0x3f6f3400
 8012f74:	652b82fe 	.word	0x652b82fe
 8012f78:	3c971547 	.word	0x3c971547

08012f7c <__ieee754_sqrt>:
 8012f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f80:	ec55 4b10 	vmov	r4, r5, d0
 8012f84:	4e55      	ldr	r6, [pc, #340]	; (80130dc <__ieee754_sqrt+0x160>)
 8012f86:	43ae      	bics	r6, r5
 8012f88:	ee10 0a10 	vmov	r0, s0
 8012f8c:	ee10 3a10 	vmov	r3, s0
 8012f90:	462a      	mov	r2, r5
 8012f92:	4629      	mov	r1, r5
 8012f94:	d110      	bne.n	8012fb8 <__ieee754_sqrt+0x3c>
 8012f96:	ee10 2a10 	vmov	r2, s0
 8012f9a:	462b      	mov	r3, r5
 8012f9c:	f7ed fb34 	bl	8000608 <__aeabi_dmul>
 8012fa0:	4602      	mov	r2, r0
 8012fa2:	460b      	mov	r3, r1
 8012fa4:	4620      	mov	r0, r4
 8012fa6:	4629      	mov	r1, r5
 8012fa8:	f7ed f978 	bl	800029c <__adddf3>
 8012fac:	4604      	mov	r4, r0
 8012fae:	460d      	mov	r5, r1
 8012fb0:	ec45 4b10 	vmov	d0, r4, r5
 8012fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fb8:	2d00      	cmp	r5, #0
 8012fba:	dc10      	bgt.n	8012fde <__ieee754_sqrt+0x62>
 8012fbc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012fc0:	4330      	orrs	r0, r6
 8012fc2:	d0f5      	beq.n	8012fb0 <__ieee754_sqrt+0x34>
 8012fc4:	b15d      	cbz	r5, 8012fde <__ieee754_sqrt+0x62>
 8012fc6:	ee10 2a10 	vmov	r2, s0
 8012fca:	462b      	mov	r3, r5
 8012fcc:	ee10 0a10 	vmov	r0, s0
 8012fd0:	f7ed f962 	bl	8000298 <__aeabi_dsub>
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	460b      	mov	r3, r1
 8012fd8:	f7ed fc40 	bl	800085c <__aeabi_ddiv>
 8012fdc:	e7e6      	b.n	8012fac <__ieee754_sqrt+0x30>
 8012fde:	1512      	asrs	r2, r2, #20
 8012fe0:	d074      	beq.n	80130cc <__ieee754_sqrt+0x150>
 8012fe2:	07d4      	lsls	r4, r2, #31
 8012fe4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012fe8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012fec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012ff0:	bf5e      	ittt	pl
 8012ff2:	0fda      	lsrpl	r2, r3, #31
 8012ff4:	005b      	lslpl	r3, r3, #1
 8012ff6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8012ffa:	2400      	movs	r4, #0
 8012ffc:	0fda      	lsrs	r2, r3, #31
 8012ffe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8013002:	107f      	asrs	r7, r7, #1
 8013004:	005b      	lsls	r3, r3, #1
 8013006:	2516      	movs	r5, #22
 8013008:	4620      	mov	r0, r4
 801300a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801300e:	1886      	adds	r6, r0, r2
 8013010:	428e      	cmp	r6, r1
 8013012:	bfde      	ittt	le
 8013014:	1b89      	suble	r1, r1, r6
 8013016:	18b0      	addle	r0, r6, r2
 8013018:	18a4      	addle	r4, r4, r2
 801301a:	0049      	lsls	r1, r1, #1
 801301c:	3d01      	subs	r5, #1
 801301e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8013022:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8013026:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801302a:	d1f0      	bne.n	801300e <__ieee754_sqrt+0x92>
 801302c:	462a      	mov	r2, r5
 801302e:	f04f 0e20 	mov.w	lr, #32
 8013032:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013036:	4281      	cmp	r1, r0
 8013038:	eb06 0c05 	add.w	ip, r6, r5
 801303c:	dc02      	bgt.n	8013044 <__ieee754_sqrt+0xc8>
 801303e:	d113      	bne.n	8013068 <__ieee754_sqrt+0xec>
 8013040:	459c      	cmp	ip, r3
 8013042:	d811      	bhi.n	8013068 <__ieee754_sqrt+0xec>
 8013044:	f1bc 0f00 	cmp.w	ip, #0
 8013048:	eb0c 0506 	add.w	r5, ip, r6
 801304c:	da43      	bge.n	80130d6 <__ieee754_sqrt+0x15a>
 801304e:	2d00      	cmp	r5, #0
 8013050:	db41      	blt.n	80130d6 <__ieee754_sqrt+0x15a>
 8013052:	f100 0801 	add.w	r8, r0, #1
 8013056:	1a09      	subs	r1, r1, r0
 8013058:	459c      	cmp	ip, r3
 801305a:	bf88      	it	hi
 801305c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8013060:	eba3 030c 	sub.w	r3, r3, ip
 8013064:	4432      	add	r2, r6
 8013066:	4640      	mov	r0, r8
 8013068:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801306c:	f1be 0e01 	subs.w	lr, lr, #1
 8013070:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8013074:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013078:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801307c:	d1db      	bne.n	8013036 <__ieee754_sqrt+0xba>
 801307e:	430b      	orrs	r3, r1
 8013080:	d006      	beq.n	8013090 <__ieee754_sqrt+0x114>
 8013082:	1c50      	adds	r0, r2, #1
 8013084:	bf13      	iteet	ne
 8013086:	3201      	addne	r2, #1
 8013088:	3401      	addeq	r4, #1
 801308a:	4672      	moveq	r2, lr
 801308c:	f022 0201 	bicne.w	r2, r2, #1
 8013090:	1063      	asrs	r3, r4, #1
 8013092:	0852      	lsrs	r2, r2, #1
 8013094:	07e1      	lsls	r1, r4, #31
 8013096:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801309a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801309e:	bf48      	it	mi
 80130a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80130a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80130a8:	4614      	mov	r4, r2
 80130aa:	e781      	b.n	8012fb0 <__ieee754_sqrt+0x34>
 80130ac:	0ad9      	lsrs	r1, r3, #11
 80130ae:	3815      	subs	r0, #21
 80130b0:	055b      	lsls	r3, r3, #21
 80130b2:	2900      	cmp	r1, #0
 80130b4:	d0fa      	beq.n	80130ac <__ieee754_sqrt+0x130>
 80130b6:	02cd      	lsls	r5, r1, #11
 80130b8:	d50a      	bpl.n	80130d0 <__ieee754_sqrt+0x154>
 80130ba:	f1c2 0420 	rsb	r4, r2, #32
 80130be:	fa23 f404 	lsr.w	r4, r3, r4
 80130c2:	1e55      	subs	r5, r2, #1
 80130c4:	4093      	lsls	r3, r2
 80130c6:	4321      	orrs	r1, r4
 80130c8:	1b42      	subs	r2, r0, r5
 80130ca:	e78a      	b.n	8012fe2 <__ieee754_sqrt+0x66>
 80130cc:	4610      	mov	r0, r2
 80130ce:	e7f0      	b.n	80130b2 <__ieee754_sqrt+0x136>
 80130d0:	0049      	lsls	r1, r1, #1
 80130d2:	3201      	adds	r2, #1
 80130d4:	e7ef      	b.n	80130b6 <__ieee754_sqrt+0x13a>
 80130d6:	4680      	mov	r8, r0
 80130d8:	e7bd      	b.n	8013056 <__ieee754_sqrt+0xda>
 80130da:	bf00      	nop
 80130dc:	7ff00000 	.word	0x7ff00000

080130e0 <with_errno>:
 80130e0:	b570      	push	{r4, r5, r6, lr}
 80130e2:	4604      	mov	r4, r0
 80130e4:	460d      	mov	r5, r1
 80130e6:	4616      	mov	r6, r2
 80130e8:	f7fa fc9a 	bl	800da20 <__errno>
 80130ec:	4629      	mov	r1, r5
 80130ee:	6006      	str	r6, [r0, #0]
 80130f0:	4620      	mov	r0, r4
 80130f2:	bd70      	pop	{r4, r5, r6, pc}

080130f4 <xflow>:
 80130f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80130f6:	4614      	mov	r4, r2
 80130f8:	461d      	mov	r5, r3
 80130fa:	b108      	cbz	r0, 8013100 <xflow+0xc>
 80130fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013100:	e9cd 2300 	strd	r2, r3, [sp]
 8013104:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013108:	4620      	mov	r0, r4
 801310a:	4629      	mov	r1, r5
 801310c:	f7ed fa7c 	bl	8000608 <__aeabi_dmul>
 8013110:	2222      	movs	r2, #34	; 0x22
 8013112:	b003      	add	sp, #12
 8013114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013118:	f7ff bfe2 	b.w	80130e0 <with_errno>

0801311c <__math_uflow>:
 801311c:	b508      	push	{r3, lr}
 801311e:	2200      	movs	r2, #0
 8013120:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013124:	f7ff ffe6 	bl	80130f4 <xflow>
 8013128:	ec41 0b10 	vmov	d0, r0, r1
 801312c:	bd08      	pop	{r3, pc}

0801312e <__math_oflow>:
 801312e:	b508      	push	{r3, lr}
 8013130:	2200      	movs	r2, #0
 8013132:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013136:	f7ff ffdd 	bl	80130f4 <xflow>
 801313a:	ec41 0b10 	vmov	d0, r0, r1
 801313e:	bd08      	pop	{r3, pc}

08013140 <fabs>:
 8013140:	ec51 0b10 	vmov	r0, r1, d0
 8013144:	ee10 2a10 	vmov	r2, s0
 8013148:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801314c:	ec43 2b10 	vmov	d0, r2, r3
 8013150:	4770      	bx	lr

08013152 <finite>:
 8013152:	b082      	sub	sp, #8
 8013154:	ed8d 0b00 	vstr	d0, [sp]
 8013158:	9801      	ldr	r0, [sp, #4]
 801315a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801315e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013162:	0fc0      	lsrs	r0, r0, #31
 8013164:	b002      	add	sp, #8
 8013166:	4770      	bx	lr

08013168 <scalbn>:
 8013168:	b570      	push	{r4, r5, r6, lr}
 801316a:	ec55 4b10 	vmov	r4, r5, d0
 801316e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013172:	4606      	mov	r6, r0
 8013174:	462b      	mov	r3, r5
 8013176:	b99a      	cbnz	r2, 80131a0 <scalbn+0x38>
 8013178:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801317c:	4323      	orrs	r3, r4
 801317e:	d036      	beq.n	80131ee <scalbn+0x86>
 8013180:	4b39      	ldr	r3, [pc, #228]	; (8013268 <scalbn+0x100>)
 8013182:	4629      	mov	r1, r5
 8013184:	ee10 0a10 	vmov	r0, s0
 8013188:	2200      	movs	r2, #0
 801318a:	f7ed fa3d 	bl	8000608 <__aeabi_dmul>
 801318e:	4b37      	ldr	r3, [pc, #220]	; (801326c <scalbn+0x104>)
 8013190:	429e      	cmp	r6, r3
 8013192:	4604      	mov	r4, r0
 8013194:	460d      	mov	r5, r1
 8013196:	da10      	bge.n	80131ba <scalbn+0x52>
 8013198:	a32b      	add	r3, pc, #172	; (adr r3, 8013248 <scalbn+0xe0>)
 801319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319e:	e03a      	b.n	8013216 <scalbn+0xae>
 80131a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80131a4:	428a      	cmp	r2, r1
 80131a6:	d10c      	bne.n	80131c2 <scalbn+0x5a>
 80131a8:	ee10 2a10 	vmov	r2, s0
 80131ac:	4620      	mov	r0, r4
 80131ae:	4629      	mov	r1, r5
 80131b0:	f7ed f874 	bl	800029c <__adddf3>
 80131b4:	4604      	mov	r4, r0
 80131b6:	460d      	mov	r5, r1
 80131b8:	e019      	b.n	80131ee <scalbn+0x86>
 80131ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80131be:	460b      	mov	r3, r1
 80131c0:	3a36      	subs	r2, #54	; 0x36
 80131c2:	4432      	add	r2, r6
 80131c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80131c8:	428a      	cmp	r2, r1
 80131ca:	dd08      	ble.n	80131de <scalbn+0x76>
 80131cc:	2d00      	cmp	r5, #0
 80131ce:	a120      	add	r1, pc, #128	; (adr r1, 8013250 <scalbn+0xe8>)
 80131d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131d4:	da1c      	bge.n	8013210 <scalbn+0xa8>
 80131d6:	a120      	add	r1, pc, #128	; (adr r1, 8013258 <scalbn+0xf0>)
 80131d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131dc:	e018      	b.n	8013210 <scalbn+0xa8>
 80131de:	2a00      	cmp	r2, #0
 80131e0:	dd08      	ble.n	80131f4 <scalbn+0x8c>
 80131e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80131e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80131ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80131ee:	ec45 4b10 	vmov	d0, r4, r5
 80131f2:	bd70      	pop	{r4, r5, r6, pc}
 80131f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80131f8:	da19      	bge.n	801322e <scalbn+0xc6>
 80131fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80131fe:	429e      	cmp	r6, r3
 8013200:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013204:	dd0a      	ble.n	801321c <scalbn+0xb4>
 8013206:	a112      	add	r1, pc, #72	; (adr r1, 8013250 <scalbn+0xe8>)
 8013208:	e9d1 0100 	ldrd	r0, r1, [r1]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d1e2      	bne.n	80131d6 <scalbn+0x6e>
 8013210:	a30f      	add	r3, pc, #60	; (adr r3, 8013250 <scalbn+0xe8>)
 8013212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013216:	f7ed f9f7 	bl	8000608 <__aeabi_dmul>
 801321a:	e7cb      	b.n	80131b4 <scalbn+0x4c>
 801321c:	a10a      	add	r1, pc, #40	; (adr r1, 8013248 <scalbn+0xe0>)
 801321e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d0b8      	beq.n	8013198 <scalbn+0x30>
 8013226:	a10e      	add	r1, pc, #56	; (adr r1, 8013260 <scalbn+0xf8>)
 8013228:	e9d1 0100 	ldrd	r0, r1, [r1]
 801322c:	e7b4      	b.n	8013198 <scalbn+0x30>
 801322e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013232:	3236      	adds	r2, #54	; 0x36
 8013234:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013238:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801323c:	4620      	mov	r0, r4
 801323e:	4b0c      	ldr	r3, [pc, #48]	; (8013270 <scalbn+0x108>)
 8013240:	2200      	movs	r2, #0
 8013242:	e7e8      	b.n	8013216 <scalbn+0xae>
 8013244:	f3af 8000 	nop.w
 8013248:	c2f8f359 	.word	0xc2f8f359
 801324c:	01a56e1f 	.word	0x01a56e1f
 8013250:	8800759c 	.word	0x8800759c
 8013254:	7e37e43c 	.word	0x7e37e43c
 8013258:	8800759c 	.word	0x8800759c
 801325c:	fe37e43c 	.word	0xfe37e43c
 8013260:	c2f8f359 	.word	0xc2f8f359
 8013264:	81a56e1f 	.word	0x81a56e1f
 8013268:	43500000 	.word	0x43500000
 801326c:	ffff3cb0 	.word	0xffff3cb0
 8013270:	3c900000 	.word	0x3c900000

08013274 <_init>:
 8013274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013276:	bf00      	nop
 8013278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801327a:	bc08      	pop	{r3}
 801327c:	469e      	mov	lr, r3
 801327e:	4770      	bx	lr

08013280 <_fini>:
 8013280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013282:	bf00      	nop
 8013284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013286:	bc08      	pop	{r3}
 8013288:	469e      	mov	lr, r3
 801328a:	4770      	bx	lr
