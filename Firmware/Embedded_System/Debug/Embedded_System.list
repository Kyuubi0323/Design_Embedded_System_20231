
Embedded_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001011c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f80  080102c0  080102c0  000202c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012240  08012240  0003020c  2**0
                  CONTENTS
  4 .ARM          00000008  08012240  08012240  00022240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012248  08012248  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012248  08012248  00022248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801224c  0801224c  0002224c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08012250  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d3c  2000020c  0801245c  0003020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f48  0801245c  00034f48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024f05  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005127  00000000  00000000  00055141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  0005a268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b38  00000000  00000000  0005bf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1b4  00000000  00000000  0005dab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002883a  00000000  00000000  00079c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f8d2  00000000  00000000  000a249e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141d70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090b0  00000000  00000000  00141dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080102a4 	.word	0x080102a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	080102a4 	.word	0x080102a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Touch_binary */
  Touch_binaryHandle = osSemaphoreNew(1, 1, &Touch_binary_attributes);
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_FREERTOS_Init+0x8c>)
 800100e:	2101      	movs	r1, #1
 8001010:	2001      	movs	r0, #1
 8001012:	f006 f8fa 	bl	800720a <osSemaphoreNew>
 8001016:	4603      	mov	r3, r0
 8001018:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <MX_FREERTOS_Init+0x90>)
 800101a:	6013      	str	r3, [r2, #0]

  /* creation of Uart_binary */
  Uart_binaryHandle = osSemaphoreNew(1, 1, &Uart_binary_attributes);
 800101c:	4a1f      	ldr	r2, [pc, #124]	; (800109c <MX_FREERTOS_Init+0x94>)
 800101e:	2101      	movs	r1, #1
 8001020:	2001      	movs	r0, #1
 8001022:	f006 f8f2 	bl	800720a <osSemaphoreNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <MX_FREERTOS_Init+0x98>)
 800102a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Timer02 */
  Timer02Handle = osTimerNew(LCD_Timeout, osTimerOnce, NULL, &Timer02_attributes);
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_FREERTOS_Init+0x9c>)
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	481d      	ldr	r0, [pc, #116]	; (80010a8 <MX_FREERTOS_Init+0xa0>)
 8001034:	f006 f808 	bl	8007048 <osTimerNew>
 8001038:	4603      	mov	r3, r0
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MX_FREERTOS_Init+0xa4>)
 800103c:	6013      	str	r3, [r2, #0]

  /* creation of Timer03 */
  Timer03Handle = osTimerNew(Measure_Timer, osTimerPeriodic, NULL, &Timer03_attributes);
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <MX_FREERTOS_Init+0xa8>)
 8001040:	2200      	movs	r2, #0
 8001042:	2101      	movs	r1, #1
 8001044:	481b      	ldr	r0, [pc, #108]	; (80010b4 <MX_FREERTOS_Init+0xac>)
 8001046:	f005 ffff 	bl	8007048 <osTimerNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a1a      	ldr	r2, [pc, #104]	; (80010b8 <MX_FREERTOS_Init+0xb0>)
 800104e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SuperQueue */
  SuperQueueHandle = osMessageQueueNew (64, sizeof(uint16_t), &SuperQueue_attributes);
 8001050:	4a1a      	ldr	r2, [pc, #104]	; (80010bc <MX_FREERTOS_Init+0xb4>)
 8001052:	2102      	movs	r1, #2
 8001054:	2040      	movs	r0, #64	; 0x40
 8001056:	f006 f9f7 	bl	8007448 <osMessageQueueNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <MX_FREERTOS_Init+0xb8>)
 800105e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LCD */
  LCDHandle = osThreadNew(LCD_task, NULL, &LCD_attributes);
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <MX_FREERTOS_Init+0xbc>)
 8001062:	2100      	movs	r1, #0
 8001064:	4818      	ldr	r0, [pc, #96]	; (80010c8 <MX_FREERTOS_Init+0xc0>)
 8001066:	f005 feeb 	bl	8006e40 <osThreadNew>
 800106a:	4603      	mov	r3, r0
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <MX_FREERTOS_Init+0xc4>)
 800106e:	6013      	str	r3, [r2, #0]

  /* creation of IRQ */
  IRQHandle = osThreadNew(IRQ_task, NULL, &IRQ_attributes);
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <MX_FREERTOS_Init+0xc8>)
 8001072:	2100      	movs	r1, #0
 8001074:	4817      	ldr	r0, [pc, #92]	; (80010d4 <MX_FREERTOS_Init+0xcc>)
 8001076:	f005 fee3 	bl	8006e40 <osThreadNew>
 800107a:	4603      	mov	r3, r0
 800107c:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <MX_FREERTOS_Init+0xd0>)
 800107e:	6013      	str	r3, [r2, #0]

  /* creation of Uart_user */
  Uart_userHandle = osThreadNew(Uart_task, NULL, &Uart_user_attributes);
 8001080:	4a16      	ldr	r2, [pc, #88]	; (80010dc <MX_FREERTOS_Init+0xd4>)
 8001082:	2100      	movs	r1, #0
 8001084:	4816      	ldr	r0, [pc, #88]	; (80010e0 <MX_FREERTOS_Init+0xd8>)
 8001086:	f005 fedb 	bl	8006e40 <osThreadNew>
 800108a:	4603      	mov	r3, r0
 800108c:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <MX_FREERTOS_Init+0xdc>)
 800108e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	08010868 	.word	0x08010868
 8001098:	200002a4 	.word	0x200002a4
 800109c:	08010878 	.word	0x08010878
 80010a0:	200002a8 	.word	0x200002a8
 80010a4:	08010848 	.word	0x08010848
 80010a8:	08001699 	.word	0x08001699
 80010ac:	2000029c 	.word	0x2000029c
 80010b0:	08010858 	.word	0x08010858
 80010b4:	080016e5 	.word	0x080016e5
 80010b8:	200002a0 	.word	0x200002a0
 80010bc:	08010830 	.word	0x08010830
 80010c0:	20000298 	.word	0x20000298
 80010c4:	080107c4 	.word	0x080107c4
 80010c8:	080010e9 	.word	0x080010e9
 80010cc:	2000028c 	.word	0x2000028c
 80010d0:	080107e8 	.word	0x080107e8
 80010d4:	0800150d 	.word	0x0800150d
 80010d8:	20000290 	.word	0x20000290
 80010dc:	0801080c 	.word	0x0801080c
 80010e0:	08001639 	.word	0x08001639
 80010e4:	20000294 	.word	0x20000294

080010e8 <LCD_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LCD_task */
void LCD_task(void *argument)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	6078      	str	r0, [r7, #4]
	char Strgbpm[4] ;
	char Strgspo2[4];
//	char *payload = {0};

	//Display
	ILI9341_Unselect();
 80010f0:	f001 fa70 	bl	80025d4 <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 80010f4:	f001 fe4e 	bl	8002d94 <ILI9341_TouchUnselect>
	ILI9341_Init();
 80010f8:	f001 fb1e 	bl	8002738 <ILI9341_Init>
	ILI9341_FillScreen(ILI9341_BLACK);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f001 fe37 	bl	8002d70 <ILI9341_FillScreen>
	//Background
	ILI9341_WriteString(10, 10, "Embedded Design System 20231", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001102:	4bbb      	ldr	r3, [pc, #748]	; (80013f0 <LCD_task+0x308>)
 8001104:	2200      	movs	r2, #0
 8001106:	9202      	str	r2, [sp, #8]
 8001108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110c:	9201      	str	r2, [sp, #4]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4ab7      	ldr	r2, [pc, #732]	; (80013f4 <LCD_task+0x30c>)
 8001116:	210a      	movs	r1, #10
 8001118:	200a      	movs	r0, #10
 800111a:	f001 fd6e 	bl	8002bfa <ILI9341_WriteString>
	ILI9341_WriteString(30, 40, "20202647", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 800111e:	4bb6      	ldr	r3, [pc, #728]	; (80013f8 <LCD_task+0x310>)
 8001120:	2200      	movs	r2, #0
 8001122:	9202      	str	r2, [sp, #8]
 8001124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001128:	9201      	str	r2, [sp, #4]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	9200      	str	r2, [sp, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4ab2      	ldr	r2, [pc, #712]	; (80013fc <LCD_task+0x314>)
 8001132:	2128      	movs	r1, #40	; 0x28
 8001134:	201e      	movs	r0, #30
 8001136:	f001 fd60 	bl	8002bfa <ILI9341_WriteString>
	ILI9341_WriteString(235, 40, "20202543", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 800113a:	4baf      	ldr	r3, [pc, #700]	; (80013f8 <LCD_task+0x310>)
 800113c:	2200      	movs	r2, #0
 800113e:	9202      	str	r2, [sp, #8]
 8001140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001144:	9201      	str	r2, [sp, #4]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	9200      	str	r2, [sp, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4aac      	ldr	r2, [pc, #688]	; (8001400 <LCD_task+0x318>)
 800114e:	2128      	movs	r1, #40	; 0x28
 8001150:	20eb      	movs	r0, #235	; 0xeb
 8001152:	f001 fd52 	bl	8002bfa <ILI9341_WriteString>
	ILI9341_DrawLine(0, 55, 320, 55, ILI9341_WHITE);
 8001156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2337      	movs	r3, #55	; 0x37
 800115e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001162:	2137      	movs	r1, #55	; 0x37
 8001164:	2000      	movs	r0, #0
 8001166:	f001 fc4e 	bl	8002a06 <ILI9341_DrawLine>
	ILI9341_DrawLine(0, 200, 320, 200, ILI9341_WHITE);
 800116a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	23c8      	movs	r3, #200	; 0xc8
 8001172:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001176:	21c8      	movs	r1, #200	; 0xc8
 8001178:	2000      	movs	r0, #0
 800117a:	f001 fc44 	bl	8002a06 <ILI9341_DrawLine>
	ILI9341_DrawLine(250, 55, 250, 200, ILI9341_WHITE);
 800117e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	23c8      	movs	r3, #200	; 0xc8
 8001186:	22fa      	movs	r2, #250	; 0xfa
 8001188:	2137      	movs	r1, #55	; 0x37
 800118a:	20fa      	movs	r0, #250	; 0xfa
 800118c:	f001 fc3b 	bl	8002a06 <ILI9341_DrawLine>
	ILI9341_WriteString(10, 180, "Mode:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001190:	4b97      	ldr	r3, [pc, #604]	; (80013f0 <LCD_task+0x308>)
 8001192:	2200      	movs	r2, #0
 8001194:	9202      	str	r2, [sp, #8]
 8001196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119a:	9201      	str	r2, [sp, #4]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	9200      	str	r2, [sp, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a98      	ldr	r2, [pc, #608]	; (8001404 <LCD_task+0x31c>)
 80011a4:	21b4      	movs	r1, #180	; 0xb4
 80011a6:	200a      	movs	r0, #10
 80011a8:	f001 fd27 	bl	8002bfa <ILI9341_WriteString>
	ILI9341_WriteString(100, 210, "MANDEVICES", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 80011ac:	4b90      	ldr	r3, [pc, #576]	; (80013f0 <LCD_task+0x308>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	9202      	str	r2, [sp, #8]
 80011b2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80011b6:	9201      	str	r2, [sp, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	9200      	str	r2, [sp, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a92      	ldr	r2, [pc, #584]	; (8001408 <LCD_task+0x320>)
 80011c0:	21d2      	movs	r1, #210	; 0xd2
 80011c2:	2064      	movs	r0, #100	; 0x64
 80011c4:	f001 fd19 	bl	8002bfa <ILI9341_WriteString>

	//Data
	ILI9341_WriteString(10, 60, "Temperature:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80011c8:	4b89      	ldr	r3, [pc, #548]	; (80013f0 <LCD_task+0x308>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	9202      	str	r2, [sp, #8]
 80011ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d2:	9201      	str	r2, [sp, #4]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a8c      	ldr	r2, [pc, #560]	; (800140c <LCD_task+0x324>)
 80011dc:	213c      	movs	r1, #60	; 0x3c
 80011de:	200a      	movs	r0, #10
 80011e0:	f001 fd0b 	bl	8002bfa <ILI9341_WriteString>
	ftoa(Node_1.Temperature, StrgTemp, 1);
 80011e4:	4b8a      	ldr	r3, [pc, #552]	; (8001410 <LCD_task+0x328>)
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	2101      	movs	r1, #1
 80011f0:	4618      	mov	r0, r3
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	f001 f903 	bl	8002400 <ftoa>
	ILI9341_WriteString(150, 60, StrgTemp, Font_11x18, ILI9341_ORANGE, ILI9341_BLACK);
 80011fa:	4b7d      	ldr	r3, [pc, #500]	; (80013f0 <LCD_task+0x308>)
 80011fc:	f107 0118 	add.w	r1, r7, #24
 8001200:	2200      	movs	r2, #0
 8001202:	9202      	str	r2, [sp, #8]
 8001204:	f64f 5220 	movw	r2, #64800	; 0xfd20
 8001208:	9201      	str	r2, [sp, #4]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	9200      	str	r2, [sp, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	460a      	mov	r2, r1
 8001212:	213c      	movs	r1, #60	; 0x3c
 8001214:	2096      	movs	r0, #150	; 0x96
 8001216:	f001 fcf0 	bl	8002bfa <ILI9341_WriteString>

	ILI9341_WriteString(10, 90, "Humidity:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 800121a:	4b75      	ldr	r3, [pc, #468]	; (80013f0 <LCD_task+0x308>)
 800121c:	2200      	movs	r2, #0
 800121e:	9202      	str	r2, [sp, #8]
 8001220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001224:	9201      	str	r2, [sp, #4]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	9200      	str	r2, [sp, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a79      	ldr	r2, [pc, #484]	; (8001414 <LCD_task+0x32c>)
 800122e:	215a      	movs	r1, #90	; 0x5a
 8001230:	200a      	movs	r0, #10
 8001232:	f001 fce2 	bl	8002bfa <ILI9341_WriteString>
	intToStr((int)Node_1.Humidity, StrgHumd, 2);
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <LCD_task+0x328>)
 8001238:	edd3 7a01 	vldr	s15, [r3, #4]
 800123c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2202      	movs	r2, #2
 8001246:	4619      	mov	r1, r3
 8001248:	ee17 0a90 	vmov	r0, s15
 800124c:	f001 f934 	bl	80024b8 <intToStr>
	ILI9341_WriteString(150, 90, StrgHumd, Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 8001250:	4b67      	ldr	r3, [pc, #412]	; (80013f0 <LCD_task+0x308>)
 8001252:	f107 0114 	add.w	r1, r7, #20
 8001256:	2200      	movs	r2, #0
 8001258:	9202      	str	r2, [sp, #8]
 800125a:	221f      	movs	r2, #31
 800125c:	9201      	str	r2, [sp, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	9200      	str	r2, [sp, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	460a      	mov	r2, r1
 8001266:	215a      	movs	r1, #90	; 0x5a
 8001268:	2096      	movs	r0, #150	; 0x96
 800126a:	f001 fcc6 	bl	8002bfa <ILI9341_WriteString>
	ILI9341_WriteString(180, 90, "%", Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 800126e:	4b60      	ldr	r3, [pc, #384]	; (80013f0 <LCD_task+0x308>)
 8001270:	2200      	movs	r2, #0
 8001272:	9202      	str	r2, [sp, #8]
 8001274:	221f      	movs	r2, #31
 8001276:	9201      	str	r2, [sp, #4]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	9200      	str	r2, [sp, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a66      	ldr	r2, [pc, #408]	; (8001418 <LCD_task+0x330>)
 8001280:	215a      	movs	r1, #90	; 0x5a
 8001282:	20b4      	movs	r0, #180	; 0xb4
 8001284:	f001 fcb9 	bl	8002bfa <ILI9341_WriteString>

	ILI9341_WriteString(10, 120, "BPM:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001288:	4b59      	ldr	r3, [pc, #356]	; (80013f0 <LCD_task+0x308>)
 800128a:	2200      	movs	r2, #0
 800128c:	9202      	str	r2, [sp, #8]
 800128e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001292:	9201      	str	r2, [sp, #4]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	9200      	str	r2, [sp, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a60      	ldr	r2, [pc, #384]	; (800141c <LCD_task+0x334>)
 800129c:	2178      	movs	r1, #120	; 0x78
 800129e:	200a      	movs	r0, #10
 80012a0:	f001 fcab 	bl	8002bfa <ILI9341_WriteString>
	intToStr(Node_1.bpm, Strgbpm, 2);
 80012a4:	4b5a      	ldr	r3, [pc, #360]	; (8001410 <LCD_task+0x328>)
 80012a6:	7a1b      	ldrb	r3, [r3, #8]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	2202      	movs	r2, #2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f001 f901 	bl	80024b8 <intToStr>
	ILI9341_WriteString(150, 120, Strgbpm, Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 80012b6:	4b4e      	ldr	r3, [pc, #312]	; (80013f0 <LCD_task+0x308>)
 80012b8:	f107 0110 	add.w	r1, r7, #16
 80012bc:	2200      	movs	r2, #0
 80012be:	9202      	str	r2, [sp, #8]
 80012c0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80012c4:	9201      	str	r2, [sp, #4]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	9200      	str	r2, [sp, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	460a      	mov	r2, r1
 80012ce:	2178      	movs	r1, #120	; 0x78
 80012d0:	2096      	movs	r0, #150	; 0x96
 80012d2:	f001 fc92 	bl	8002bfa <ILI9341_WriteString>

	ILI9341_WriteString(10, 150, "Spo2:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80012d6:	4b46      	ldr	r3, [pc, #280]	; (80013f0 <LCD_task+0x308>)
 80012d8:	2200      	movs	r2, #0
 80012da:	9202      	str	r2, [sp, #8]
 80012dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e0:	9201      	str	r2, [sp, #4]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	9200      	str	r2, [sp, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a4d      	ldr	r2, [pc, #308]	; (8001420 <LCD_task+0x338>)
 80012ea:	2196      	movs	r1, #150	; 0x96
 80012ec:	200a      	movs	r0, #10
 80012ee:	f001 fc84 	bl	8002bfa <ILI9341_WriteString>
	intToStr(Node_1.spo2, Strgspo2, 2);
 80012f2:	4b47      	ldr	r3, [pc, #284]	; (8001410 <LCD_task+0x328>)
 80012f4:	7a5b      	ldrb	r3, [r3, #9]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2202      	movs	r2, #2
 80012fe:	4619      	mov	r1, r3
 8001300:	f001 f8da 	bl	80024b8 <intToStr>
	ILI9341_WriteString(150, 150, Strgspo2, Font_11x18, ILI9341_PINK, ILI9341_BLACK);
 8001304:	4b3a      	ldr	r3, [pc, #232]	; (80013f0 <LCD_task+0x308>)
 8001306:	f107 010c 	add.w	r1, r7, #12
 800130a:	2200      	movs	r2, #0
 800130c:	9202      	str	r2, [sp, #8]
 800130e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001312:	9201      	str	r2, [sp, #4]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	9200      	str	r2, [sp, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	460a      	mov	r2, r1
 800131c:	2196      	movs	r1, #150	; 0x96
 800131e:	2096      	movs	r0, #150	; 0x96
 8001320:	f001 fc6b 	bl	8002bfa <ILI9341_WriteString>
//			ILI9341_FillCircle(Button_1.pos_x, Button_1.pos_y, Button_1.shape_r, ILI9341_RED);
//			ILI9341_DrawCircle(Button_1.pos_x, Button_1.pos_y, Button_1.shape_r/4, ILI9341_BLACK);
//		}
	//start timer and softimer
	//osTimerStart(Timer01Handle, ActionPeriod);
	osTimerStart(Timer02Handle, Timeout);
 8001324:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <LCD_task+0x33c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f64e 2160 	movw	r1, #60000	; 0xea60
 800132c:	4618      	mov	r0, r3
 800132e:	f005 ff07 	bl	8007140 <osTimerStart>
	osTimerStart(Timer03Handle, MeasurePeriod);
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <LCD_task+0x340>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f241 3188 	movw	r1, #5000	; 0x1388
 800133a:	4618      	mov	r0, r3
 800133c:	f005 ff00 	bl	8007140 <osTimerStart>
	//ILI9341_WriteString(150, 180, "Start Timer", Font_11x18, ILI9341_PINK, ILI9341_BLACK);

	HAL_TIM_Base_Start_IT(&htim11);
 8001340:	483a      	ldr	r0, [pc, #232]	; (800142c <LCD_task+0x344>)
 8001342:	f004 f973 	bl	800562c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	osThreadSuspend(LCDHandle);
 8001346:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <LCD_task+0x348>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f005 fe0a 	bl	8006f64 <osThreadSuspend>
	Time_keeper.LCD_Time[0] = HAL_GetTick();
 8001350:	f001 fdb4 	bl	8002ebc <HAL_GetTick>
 8001354:	4603      	mov	r3, r0
 8001356:	4a37      	ldr	r2, [pc, #220]	; (8001434 <LCD_task+0x34c>)
 8001358:	6013      	str	r3, [r2, #0]
	//Update

	ftoa(Node_1.Temperature, StrgTemp, 1);
 800135a:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <LCD_task+0x328>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	f107 0318 	add.w	r3, r7, #24
 8001364:	2101      	movs	r1, #1
 8001366:	4618      	mov	r0, r3
 8001368:	eeb0 0a67 	vmov.f32	s0, s15
 800136c:	f001 f848 	bl	8002400 <ftoa>
	ILI9341_WriteString(150, 60, StrgTemp, Font_11x18, ILI9341_ORANGE, ILI9341_BLACK);
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <LCD_task+0x308>)
 8001372:	f107 0118 	add.w	r1, r7, #24
 8001376:	2200      	movs	r2, #0
 8001378:	9202      	str	r2, [sp, #8]
 800137a:	f64f 5220 	movw	r2, #64800	; 0xfd20
 800137e:	9201      	str	r2, [sp, #4]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	9200      	str	r2, [sp, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	460a      	mov	r2, r1
 8001388:	213c      	movs	r1, #60	; 0x3c
 800138a:	2096      	movs	r0, #150	; 0x96
 800138c:	f001 fc35 	bl	8002bfa <ILI9341_WriteString>

	intToStr((int)Node_1.Humidity, StrgHumd, 2);
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <LCD_task+0x328>)
 8001392:	edd3 7a01 	vldr	s15, [r3, #4]
 8001396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	2202      	movs	r2, #2
 80013a0:	4619      	mov	r1, r3
 80013a2:	ee17 0a90 	vmov	r0, s15
 80013a6:	f001 f887 	bl	80024b8 <intToStr>
	ILI9341_WriteString(150, 90, StrgHumd, Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <LCD_task+0x308>)
 80013ac:	f107 0114 	add.w	r1, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	9202      	str	r2, [sp, #8]
 80013b4:	221f      	movs	r2, #31
 80013b6:	9201      	str	r2, [sp, #4]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	9200      	str	r2, [sp, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	460a      	mov	r2, r1
 80013c0:	215a      	movs	r1, #90	; 0x5a
 80013c2:	2096      	movs	r0, #150	; 0x96
 80013c4:	f001 fc19 	bl	8002bfa <ILI9341_WriteString>
	ILI9341_WriteString(180, 90, "%", Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <LCD_task+0x308>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	9202      	str	r2, [sp, #8]
 80013ce:	221f      	movs	r2, #31
 80013d0:	9201      	str	r2, [sp, #4]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	9200      	str	r2, [sp, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <LCD_task+0x330>)
 80013da:	215a      	movs	r1, #90	; 0x5a
 80013dc:	20b4      	movs	r0, #180	; 0xb4
 80013de:	f001 fc0c 	bl	8002bfa <ILI9341_WriteString>

	intToStr(Node_1.bpm, Strgbpm, 2);
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <LCD_task+0x328>)
 80013e4:	7a1b      	ldrb	r3, [r3, #8]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	e024      	b.n	8001438 <LCD_task+0x350>
 80013ee:	bf00      	nop
 80013f0:	20000024 	.word	0x20000024
 80013f4:	08010314 	.word	0x08010314
 80013f8:	2000001c 	.word	0x2000001c
 80013fc:	08010334 	.word	0x08010334
 8001400:	08010340 	.word	0x08010340
 8001404:	0801034c 	.word	0x0801034c
 8001408:	08010354 	.word	0x08010354
 800140c:	08010360 	.word	0x08010360
 8001410:	20000228 	.word	0x20000228
 8001414:	08010370 	.word	0x08010370
 8001418:	0801037c 	.word	0x0801037c
 800141c:	08010380 	.word	0x08010380
 8001420:	08010388 	.word	0x08010388
 8001424:	2000029c 	.word	0x2000029c
 8001428:	200002a0 	.word	0x200002a0
 800142c:	200003fc 	.word	0x200003fc
 8001430:	2000028c 	.word	0x2000028c
 8001434:	20000234 	.word	0x20000234
 8001438:	2202      	movs	r2, #2
 800143a:	4619      	mov	r1, r3
 800143c:	f001 f83c 	bl	80024b8 <intToStr>
	ILI9341_WriteString(150, 120, Strgbpm, Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 8001440:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <LCD_task+0x40c>)
 8001442:	f107 0110 	add.w	r1, r7, #16
 8001446:	2200      	movs	r2, #0
 8001448:	9202      	str	r2, [sp, #8]
 800144a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800144e:	9201      	str	r2, [sp, #4]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	9200      	str	r2, [sp, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	460a      	mov	r2, r1
 8001458:	2178      	movs	r1, #120	; 0x78
 800145a:	2096      	movs	r0, #150	; 0x96
 800145c:	f001 fbcd 	bl	8002bfa <ILI9341_WriteString>

	intToStr(Node_1.spo2, Strgspo2, 2);
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <LCD_task+0x410>)
 8001462:	7a5b      	ldrb	r3, [r3, #9]
 8001464:	4618      	mov	r0, r3
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	2202      	movs	r2, #2
 800146c:	4619      	mov	r1, r3
 800146e:	f001 f823 	bl	80024b8 <intToStr>
	ILI9341_WriteString(150, 150, Strgspo2, Font_11x18, ILI9341_PINK, ILI9341_BLACK);
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <LCD_task+0x40c>)
 8001474:	f107 010c 	add.w	r1, r7, #12
 8001478:	2200      	movs	r2, #0
 800147a:	9202      	str	r2, [sp, #8]
 800147c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001480:	9201      	str	r2, [sp, #4]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	9200      	str	r2, [sp, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	460a      	mov	r2, r1
 800148a:	2196      	movs	r1, #150	; 0x96
 800148c:	2096      	movs	r0, #150	; 0x96
 800148e:	f001 fbb4 	bl	8002bfa <ILI9341_WriteString>
	//check button state
	if (Button_1.state == 1)
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <LCD_task+0x414>)
 8001494:	7b1b      	ldrb	r3, [r3, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00f      	beq.n	80014ba <LCD_task+0x3d2>
		{
			ILI9341_WriteString(260, 120, "Bad ", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <LCD_task+0x40c>)
 800149c:	2200      	movs	r2, #0
 800149e:	9202      	str	r2, [sp, #8]
 80014a0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80014a4:	9201      	str	r2, [sp, #4]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	9200      	str	r2, [sp, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <LCD_task+0x418>)
 80014ae:	2178      	movs	r1, #120	; 0x78
 80014b0:	f44f 7082 	mov.w	r0, #260	; 0x104
 80014b4:	f001 fba1 	bl	8002bfa <ILI9341_WriteString>
 80014b8:	e00e      	b.n	80014d8 <LCD_task+0x3f0>
//			ILI9341_FillCircle(Button_1.pos_x, Button_1.pos_y + 0.5, Button_1.shape_r, ILI9341_BLUE);
//			ILI9341_DrawCircle(Button_1.pos_x, Button_1.pos_y, Button_1.shape_r/4, ILI9341_BLACK);
		}
	else
		{
			ILI9341_WriteString(260, 120 , "Good", Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <LCD_task+0x40c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	9202      	str	r2, [sp, #8]
 80014c0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80014c4:	9201      	str	r2, [sp, #4]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	9200      	str	r2, [sp, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <LCD_task+0x41c>)
 80014ce:	2178      	movs	r1, #120	; 0x78
 80014d0:	f44f 7082 	mov.w	r0, #260	; 0x104
 80014d4:	f001 fb91 	bl	8002bfa <ILI9341_WriteString>
//	sprintf(payload, "{temp}: %2.2f, {humd}: %2f %, {bpm}: %2d, {spo2}: %2d \r\n", Node_1.Temperature, Node_1.Humidity, Node_1.bpm, Node_1.spo2);
//	HAL_UART_Transmit(&huart2, (uint8_t *) payload, strlen(payload), 200);

//	memset(payload, 0, strlen(payload));

	Time_keeper.LCD_Time[1] = HAL_GetTick();
 80014d8:	f001 fcf0 	bl	8002ebc <HAL_GetTick>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <LCD_task+0x420>)
 80014e0:	6053      	str	r3, [r2, #4]
	Time_keeper.LCD_Time[2] = Time_keeper.LCD_Time[1] - Time_keeper.LCD_Time[0];
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <LCD_task+0x420>)
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <LCD_task+0x420>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <LCD_task+0x420>)
 80014ee:	6093      	str	r3, [r2, #8]
	osThreadSuspend(LCDHandle);
 80014f0:	e729      	b.n	8001346 <LCD_task+0x25e>
 80014f2:	bf00      	nop
 80014f4:	20000024 	.word	0x20000024
 80014f8:	20000228 	.word	0x20000228
 80014fc:	20000004 	.word	0x20000004
 8001500:	08010390 	.word	0x08010390
 8001504:	08010398 	.word	0x08010398
 8001508:	20000234 	.word	0x20000234

0800150c <IRQ_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IRQ_task */
void IRQ_task(void *argument)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IRQ_task */
	uint32_t currentTick = 0, lastTick = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	if (osSemaphoreAcquire(Touch_binaryHandle, portMAX_DELAY) == osOK)
 800151c:	4b3a      	ldr	r3, [pc, #232]	; (8001608 <IRQ_task+0xfc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	4618      	mov	r0, r3
 8001526:	f005 fef9 	bl	800731c <osSemaphoreAcquire>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f5      	bne.n	800151c <IRQ_task+0x10>
	{
		Time_keeper.IRQ_Time[0] = HAL_GetTick();
 8001530:	f001 fcc4 	bl	8002ebc <HAL_GetTick>
 8001534:	4603      	mov	r3, r0
 8001536:	4a35      	ldr	r2, [pc, #212]	; (800160c <IRQ_task+0x100>)
 8001538:	60d3      	str	r3, [r2, #12]
		osDelay(100);
 800153a:	2064      	movs	r0, #100	; 0x64
 800153c:	f005 fd54 	bl	8006fe8 <osDelay>

		//debounce irq touch
		currentTick = HAL_GetTick();
 8001540:	f001 fcbc 	bl	8002ebc <HAL_GetTick>
 8001544:	60b8      	str	r0, [r7, #8]
		if ((HAL_GPIO_ReadPin(T_IRQ_GPIO_Port, T_IRQ_Pin) == 0) && (currentTick - lastTick > 500))
 8001546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154a:	4831      	ldr	r0, [pc, #196]	; (8001610 <IRQ_task+0x104>)
 800154c:	f002 fa5c 	bl	8003a08 <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1e2      	bne.n	800151c <IRQ_task+0x10>
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001560:	d9dc      	bls.n	800151c <IRQ_task+0x10>
		{
			osThreadResume(LCDHandle);
 8001562:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <IRQ_task+0x108>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f005 fd1d 	bl	8006fa6 <osThreadResume>
			HAL_UART_Transmit(&huart2, (uint8_t *) "[Action]: Touch\r\n", 17, 10);
 800156c:	230a      	movs	r3, #10
 800156e:	2211      	movs	r2, #17
 8001570:	4929      	ldr	r1, [pc, #164]	; (8001618 <IRQ_task+0x10c>)
 8001572:	482a      	ldr	r0, [pc, #168]	; (800161c <IRQ_task+0x110>)
 8001574:	f004 fb66 	bl	8005c44 <HAL_UART_Transmit>
			lastTick = currentTick;
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60fb      	str	r3, [r7, #12]

			//init spi touch
			HAL_SPI_DeInit(&hspi1);
 800157c:	4828      	ldr	r0, [pc, #160]	; (8001620 <IRQ_task+0x114>)
 800157e:	f003 fc0f 	bl	8004da0 <HAL_SPI_DeInit>
			hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <IRQ_task+0x114>)
 8001584:	2230      	movs	r2, #48	; 0x30
 8001586:	61da      	str	r2, [r3, #28]
			HAL_SPI_Init(&hspi1);
 8001588:	4825      	ldr	r0, [pc, #148]	; (8001620 <IRQ_task+0x114>)
 800158a:	f003 fa75 	bl	8004a78 <HAL_SPI_Init>
//			ILI9341_WriteString(x, y, "touch", Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
//			HAL_SPI_DeInit(&hspi2);
//			hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
//			HAL_SPI_Init(&hspi2);
			//reset Timeout Timer
			osTimerStop(Timer02Handle);
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <IRQ_task+0x118>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f005 fe02 	bl	800719c <osTimerStop>
			osTimerStart(Timer02Handle, 100);
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <IRQ_task+0x118>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2164      	movs	r1, #100	; 0x64
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 fdce 	bl	8007140 <osTimerStart>

			//Handle touch
			if (Mode == SLEEP)
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <IRQ_task+0x11c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d113      	bne.n	80015d4 <IRQ_task+0xc8>
			{
				Mode = ACTIVE;
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <IRQ_task+0x11c>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, 1);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2102      	movs	r1, #2
 80015b6:	481d      	ldr	r0, [pc, #116]	; (800162c <IRQ_task+0x120>)
 80015b8:	f002 fa4c 	bl	8003a54 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, (uint8_t *) "[Action]: Wake\r\n", 16, 10);
 80015bc:	230a      	movs	r3, #10
 80015be:	2210      	movs	r2, #16
 80015c0:	491b      	ldr	r1, [pc, #108]	; (8001630 <IRQ_task+0x124>)
 80015c2:	4816      	ldr	r0, [pc, #88]	; (800161c <IRQ_task+0x110>)
 80015c4:	f004 fb3e 	bl	8005c44 <HAL_UART_Transmit>
				osThreadResume(LCDHandle);
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <IRQ_task+0x108>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f005 fcea 	bl	8006fa6 <osThreadResume>
 80015d2:	e005      	b.n	80015e0 <IRQ_task+0xd4>
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *) "[Action]: Active\r\n", 18, 10);
 80015d4:	230a      	movs	r3, #10
 80015d6:	2212      	movs	r2, #18
 80015d8:	4916      	ldr	r1, [pc, #88]	; (8001634 <IRQ_task+0x128>)
 80015da:	4810      	ldr	r0, [pc, #64]	; (800161c <IRQ_task+0x110>)
 80015dc:	f004 fb32 	bl	8005c44 <HAL_UART_Transmit>
			}
			osTimerStart(Timer02Handle, Timeout);
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <IRQ_task+0x118>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f64e 2160 	movw	r1, #60000	; 0xea60
 80015e8:	4618      	mov	r0, r3
 80015ea:	f005 fda9 	bl	8007140 <osTimerStart>
			Time_keeper.IRQ_Time[1] = HAL_GetTick();
 80015ee:	f001 fc65 	bl	8002ebc <HAL_GetTick>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a05      	ldr	r2, [pc, #20]	; (800160c <IRQ_task+0x100>)
 80015f6:	6113      	str	r3, [r2, #16]
			Time_keeper.IRQ_Time[2] = Time_keeper.IRQ_Time[1] - Time_keeper.IRQ_Time[0];
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <IRQ_task+0x100>)
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <IRQ_task+0x100>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	4a02      	ldr	r2, [pc, #8]	; (800160c <IRQ_task+0x100>)
 8001604:	6153      	str	r3, [r2, #20]
	if (osSemaphoreAcquire(Touch_binaryHandle, portMAX_DELAY) == osOK)
 8001606:	e789      	b.n	800151c <IRQ_task+0x10>
 8001608:	200002a4 	.word	0x200002a4
 800160c:	20000234 	.word	0x20000234
 8001610:	40020000 	.word	0x40020000
 8001614:	2000028c 	.word	0x2000028c
 8001618:	080103a0 	.word	0x080103a0
 800161c:	20000444 	.word	0x20000444
 8001620:	20000300 	.word	0x20000300
 8001624:	2000029c 	.word	0x2000029c
 8001628:	20000000 	.word	0x20000000
 800162c:	40020400 	.word	0x40020400
 8001630:	080103b4 	.word	0x080103b4
 8001634:	080103c8 	.word	0x080103c8

08001638 <Uart_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Uart_task */
void Uart_task(void *argument)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b0b8      	sub	sp, #224	; 0xe0
 800163c:	af04      	add	r7, sp, #16
 800163e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Uart_task */


	Ringbuf_init();
 8001640:	f001 fbb4 	bl	8002dac <Ringbuf_init>
	char* action[BUFFER_ACTION];
	ILI9341_WriteString(150, 180, "Init   ", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <Uart_task+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	9202      	str	r2, [sp, #8]
 800164a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800164e:	9201      	str	r2, [sp, #4]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	9200      	str	r2, [sp, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <Uart_task+0x50>)
 8001658:	21b4      	movs	r1, #180	; 0xb4
 800165a:	2096      	movs	r0, #150	; 0x96
 800165c:	f001 facd 	bl	8002bfa <ILI9341_WriteString>

  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(Uart_binaryHandle, portMAX_DELAY) == osOK)
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <Uart_task+0x54>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	4618      	mov	r0, r3
 800166a:	f005 fe57 	bl	800731c <osSemaphoreAcquire>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f5      	bne.n	8001660 <Uart_task+0x28>
		  {
		  HAL_UART_Transmit(&huart2, (uint8_t *) "[Action]: Acquire\r\n", 18, 10);
 8001674:	230a      	movs	r3, #10
 8001676:	2212      	movs	r2, #18
 8001678:	4905      	ldr	r1, [pc, #20]	; (8001690 <Uart_task+0x58>)
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <Uart_task+0x5c>)
 800167c:	f004 fae2 	bl	8005c44 <HAL_UART_Transmit>
	  if (osSemaphoreAcquire(Uart_binaryHandle, portMAX_DELAY) == osOK)
 8001680:	e7ee      	b.n	8001660 <Uart_task+0x28>
 8001682:	bf00      	nop
 8001684:	20000024 	.word	0x20000024
 8001688:	080103dc 	.word	0x080103dc
 800168c:	200002a8 	.word	0x200002a8
 8001690:	080103e4 	.word	0x080103e4
 8001694:	20000444 	.word	0x20000444

08001698 <LCD_Timeout>:
  /* USER CODE END Uart_task */
}

/* LCD_Timeout function */
void LCD_Timeout(void *argument)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCD_Timeout */
	HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2102      	movs	r1, #2
 80016a4:	480a      	ldr	r0, [pc, #40]	; (80016d0 <LCD_Timeout+0x38>)
 80016a6:	f002 f9d5 	bl	8003a54 <HAL_GPIO_WritePin>
	Mode = SLEEP;
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <LCD_Timeout+0x3c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) "[Action]: Sleep\r\n", 17, 10);
 80016b0:	230a      	movs	r3, #10
 80016b2:	2211      	movs	r2, #17
 80016b4:	4908      	ldr	r1, [pc, #32]	; (80016d8 <LCD_Timeout+0x40>)
 80016b6:	4809      	ldr	r0, [pc, #36]	; (80016dc <LCD_Timeout+0x44>)
 80016b8:	f004 fac4 	bl	8005c44 <HAL_UART_Transmit>
	osThreadSuspend(LCDHandle);
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <LCD_Timeout+0x48>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f005 fc4f 	bl	8006f64 <osThreadSuspend>
  /* USER CODE END LCD_Timeout */
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40020400 	.word	0x40020400
 80016d4:	20000000 	.word	0x20000000
 80016d8:	080103f8 	.word	0x080103f8
 80016dc:	20000444 	.word	0x20000444
 80016e0:	2000028c 	.word	0x2000028c

080016e4 <Measure_Timer>:

/* Measure_Timer function */
void Measure_Timer(void *argument)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08e      	sub	sp, #56	; 0x38
 80016e8:	af04      	add	r7, sp, #16
 80016ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Measure_Timer */
	DHT_DataTypedef DHT;
	char str[20];
	ILI9341_WriteString(150, 180, "Measure", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <Measure_Timer+0x90>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	9202      	str	r2, [sp, #8]
 80016f2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80016f6:	9201      	str	r2, [sp, #4]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	9200      	str	r2, [sp, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <Measure_Timer+0x94>)
 8001700:	21b4      	movs	r1, #180	; 0xb4
 8001702:	2096      	movs	r0, #150	; 0x96
 8001704:	f001 fa79 	bl	8002bfa <ILI9341_WriteString>
	Time_keeper.Measure_Time[0] = HAL_GetTick();
 8001708:	f001 fbd8 	bl	8002ebc <HAL_GetTick>
 800170c:	4603      	mov	r3, r0
 800170e:	4a1b      	ldr	r2, [pc, #108]	; (800177c <Measure_Timer+0x98>)
 8001710:	6193      	str	r3, [r2, #24]
	HAL_UART_Transmit(&huart2, (uint8_t *) "[Action]: Measure\r\n", 19, 100);
 8001712:	2364      	movs	r3, #100	; 0x64
 8001714:	2213      	movs	r2, #19
 8001716:	491a      	ldr	r1, [pc, #104]	; (8001780 <Measure_Timer+0x9c>)
 8001718:	481a      	ldr	r0, [pc, #104]	; (8001784 <Measure_Timer+0xa0>)
 800171a:	f004 fa93 	bl	8005c44 <HAL_UART_Transmit>





	Time_keeper.Measure_Time[1] = HAL_GetTick();
 800171e:	f001 fbcd 	bl	8002ebc <HAL_GetTick>
 8001722:	4603      	mov	r3, r0
 8001724:	4a15      	ldr	r2, [pc, #84]	; (800177c <Measure_Timer+0x98>)
 8001726:	61d3      	str	r3, [r2, #28]
	Time_keeper.Measure_Time[2] = Time_keeper.Measure_Time[1] - Time_keeper.Measure_Time[0];
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <Measure_Timer+0x98>)
 800172a:	69da      	ldr	r2, [r3, #28]
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <Measure_Timer+0x98>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <Measure_Timer+0x98>)
 8001734:	6213      	str	r3, [r2, #32]
	osDelay(1000);
 8001736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800173a:	f005 fc55 	bl	8006fe8 <osDelay>
	ILI9341_WriteString(150, 180, "Idle   ", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <Measure_Timer+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	9202      	str	r2, [sp, #8]
 8001744:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001748:	9201      	str	r2, [sp, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	9200      	str	r2, [sp, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <Measure_Timer+0xa4>)
 8001752:	21b4      	movs	r1, #180	; 0xb4
 8001754:	2096      	movs	r0, #150	; 0x96
 8001756:	f001 fa50 	bl	8002bfa <ILI9341_WriteString>
	if (Mode == ACTIVE)
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <Measure_Timer+0xa8>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d104      	bne.n	800176c <Measure_Timer+0x88>
		osThreadResume(LCDHandle);
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <Measure_Timer+0xac>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f005 fc1d 	bl	8006fa6 <osThreadResume>
  /* USER CODE END Measure_Timer */
}
 800176c:	bf00      	nop
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000024 	.word	0x20000024
 8001778:	0801040c 	.word	0x0801040c
 800177c:	20000234 	.word	0x20000234
 8001780:	08010414 	.word	0x08010414
 8001784:	20000444 	.word	0x20000444
 8001788:	08010428 	.word	0x08010428
 800178c:	20000000 	.word	0x20000000
 8001790:	2000028c 	.word	0x2000028c

08001794 <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == T_IRQ_Pin)
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a4:	d11f      	bne.n	80017e6 <HAL_GPIO_EXTI_Callback+0x52>
  {
	  	Button_1.state = !Button_1.state;
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80017a8:	7b1b      	ldrb	r3, [r3, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf14      	ite	ne
 80017ae:	2301      	movne	r3, #1
 80017b0:	2300      	moveq	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f083 0301 	eor.w	r3, r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80017c2:	731a      	strb	r2, [r3, #12]
	  	Node_1.Temperature = 22.5;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_GPIO_EXTI_Callback+0x60>)
 80017c6:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <HAL_GPIO_EXTI_Callback+0x64>)
 80017c8:	601a      	str	r2, [r3, #0]
	  	Node_1.bpm = 110;
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_GPIO_EXTI_Callback+0x60>)
 80017cc:	226e      	movs	r2, #110	; 0x6e
 80017ce:	721a      	strb	r2, [r3, #8]
	  	Node_1.Humidity = 82.0;
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_GPIO_EXTI_Callback+0x60>)
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <HAL_GPIO_EXTI_Callback+0x68>)
 80017d4:	605a      	str	r2, [r3, #4]
	  	Node_1.spo2 = 85;
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <HAL_GPIO_EXTI_Callback+0x60>)
 80017d8:	2255      	movs	r2, #85	; 0x55
 80017da:	725a      	strb	r2, [r3, #9]
		osSemaphoreRelease(Touch_binaryHandle);
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_GPIO_EXTI_Callback+0x6c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f005 fded 	bl	80073c0 <osSemaphoreRelease>
  }
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000004 	.word	0x20000004
 80017f4:	20000228 	.word	0x20000228
 80017f8:	41b40000 	.word	0x41b40000
 80017fc:	42a40000 	.word	0x42a40000
 8001800:	200002a4 	.word	0x200002a4

08001804 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af04      	add	r7, sp, #16
 800180a:	6078      	str	r0, [r7, #4]

	if (huart == &huart2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a19      	ldr	r2, [pc, #100]	; (8001874 <HAL_UART_RxCpltCallback+0x70>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d12b      	bne.n	800186c <HAL_UART_RxCpltCallback+0x68>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *) "[Action]: EXTI\r\n", 17, 10);
 8001814:	230a      	movs	r3, #10
 8001816:	2211      	movs	r2, #17
 8001818:	4917      	ldr	r1, [pc, #92]	; (8001878 <HAL_UART_RxCpltCallback+0x74>)
 800181a:	4816      	ldr	r0, [pc, #88]	; (8001874 <HAL_UART_RxCpltCallback+0x70>)
 800181c:	f004 fa12 	bl	8005c44 <HAL_UART_Transmit>
		ILI9341_WriteString(150, 180, "Uart   ", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_UART_RxCpltCallback+0x78>)
 8001822:	2200      	movs	r2, #0
 8001824:	9202      	str	r2, [sp, #8]
 8001826:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800182a:	9201      	str	r2, [sp, #4]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	9200      	str	r2, [sp, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a13      	ldr	r2, [pc, #76]	; (8001880 <HAL_UART_RxCpltCallback+0x7c>)
 8001834:	21b4      	movs	r1, #180	; 0xb4
 8001836:	2096      	movs	r0, #150	; 0x96
 8001838:	f001 f9df 	bl	8002bfa <ILI9341_WriteString>
		osDelay(1000);
 800183c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001840:	f005 fbd2 	bl	8006fe8 <osDelay>
		HAL_UART_Receive_IT(&huart2, (uint8_t*) payload, sizeof(payload));
 8001844:	2232      	movs	r2, #50	; 0x32
 8001846:	490f      	ldr	r1, [pc, #60]	; (8001884 <HAL_UART_RxCpltCallback+0x80>)
 8001848:	480a      	ldr	r0, [pc, #40]	; (8001874 <HAL_UART_RxCpltCallback+0x70>)
 800184a:	f004 fa8d 	bl	8005d68 <HAL_UART_Receive_IT>
		osThreadSuspend(LCDHandle);
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_UART_RxCpltCallback+0x84>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f005 fb86 	bl	8006f64 <osThreadSuspend>
		osThreadSuspend(IRQHandle);
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <HAL_UART_RxCpltCallback+0x88>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f005 fb81 	bl	8006f64 <osThreadSuspend>
		osSemaphoreRelease(Uart_binaryHandle);
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_UART_RxCpltCallback+0x8c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f005 fdaa 	bl	80073c0 <osSemaphoreRelease>
	}
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000444 	.word	0x20000444
 8001878:	08010430 	.word	0x08010430
 800187c:	20000024 	.word	0x20000024
 8001880:	08010444 	.word	0x08010444
 8001884:	20000258 	.word	0x20000258
 8001888:	2000028c 	.word	0x2000028c
 800188c:	20000290 	.word	0x20000290
 8001890:	200002a8 	.word	0x200002a8

08001894 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b56      	ldr	r3, [pc, #344]	; (8001a08 <MX_GPIO_Init+0x174>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a55      	ldr	r2, [pc, #340]	; (8001a08 <MX_GPIO_Init+0x174>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <MX_GPIO_Init+0x174>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b4f      	ldr	r3, [pc, #316]	; (8001a08 <MX_GPIO_Init+0x174>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a4e      	ldr	r2, [pc, #312]	; (8001a08 <MX_GPIO_Init+0x174>)
 80018d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b4c      	ldr	r3, [pc, #304]	; (8001a08 <MX_GPIO_Init+0x174>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b48      	ldr	r3, [pc, #288]	; (8001a08 <MX_GPIO_Init+0x174>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a47      	ldr	r2, [pc, #284]	; (8001a08 <MX_GPIO_Init+0x174>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b45      	ldr	r3, [pc, #276]	; (8001a08 <MX_GPIO_Init+0x174>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <MX_GPIO_Init+0x174>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a40      	ldr	r2, [pc, #256]	; (8001a08 <MX_GPIO_Init+0x174>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <MX_GPIO_Init+0x174>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|DHT_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001920:	483a      	ldr	r0, [pc, #232]	; (8001a0c <MX_GPIO_Init+0x178>)
 8001922:	f002 f897 	bl	8003a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_LED_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	f240 3102 	movw	r1, #770	; 0x302
 800192c:	4838      	ldr	r0, [pc, #224]	; (8001a10 <MX_GPIO_Init+0x17c>)
 800192e:	f002 f891 	bl	8003a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001938:	4836      	ldr	r0, [pc, #216]	; (8001a14 <MX_GPIO_Init+0x180>)
 800193a:	f002 f88b 	bl	8003a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800193e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001944:	2301      	movs	r3, #1
 8001946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	482d      	ldr	r0, [pc, #180]	; (8001a0c <MX_GPIO_Init+0x178>)
 8001958:	f001 fcc0 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT_Pin;
 800195c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001966:	2301      	movs	r3, #1
 8001968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4825      	ldr	r0, [pc, #148]	; (8001a0c <MX_GPIO_Init+0x178>)
 8001976:	f001 fcb1 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 800197a:	2302      	movs	r3, #2
 800197c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	481f      	ldr	r0, [pc, #124]	; (8001a10 <MX_GPIO_Init+0x17c>)
 8001992:	f001 fca3 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800199c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	4819      	ldr	r0, [pc, #100]	; (8001a14 <MX_GPIO_Init+0x180>)
 80019ae:	f001 fc95 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin;
 80019b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	4812      	ldr	r0, [pc, #72]	; (8001a14 <MX_GPIO_Init+0x180>)
 80019cc:	f001 fc86 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 80019d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019da:	2301      	movs	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4809      	ldr	r0, [pc, #36]	; (8001a10 <MX_GPIO_Init+0x17c>)
 80019ea:	f001 fc77 	bl	80032dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2105      	movs	r1, #5
 80019f2:	2017      	movs	r0, #23
 80019f4:	f001 fb84 	bl	8003100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019f8:	2017      	movs	r0, #23
 80019fa:	f001 fbad 	bl	8003158 <HAL_NVIC_EnableIRQ>

}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	; 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40020400 	.word	0x40020400
 8001a14:	40020000 	.word	0x40020000

08001a18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a1e:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <MX_I2C1_Init+0x54>)
 8001a20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a24:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <MX_I2C1_Init+0x58>)
 8001a26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_I2C1_Init+0x50>)
 8001a56:	f002 f847 	bl	8003ae8 <HAL_I2C_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a60:	f000 f8f8 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200002ac 	.word	0x200002ac
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	000186a0 	.word	0x000186a0

08001a74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a19      	ldr	r2, [pc, #100]	; (8001af8 <HAL_I2C_MspInit+0x84>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d12b      	bne.n	8001aee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_I2C_MspInit+0x88>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <HAL_I2C_MspInit+0x88>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_I2C_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ab2:	23c0      	movs	r3, #192	; 0xc0
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab6:	2312      	movs	r3, #18
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <HAL_I2C_MspInit+0x8c>)
 8001ace:	f001 fc05 	bl	80032dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_I2C_MspInit+0x88>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_I2C_MspInit+0x88>)
 8001adc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_I2C_MspInit+0x88>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	; 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40005400 	.word	0x40005400
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020400 	.word	0x40020400

08001b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b08:	f001 f9a2 	bl	8002e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b0c:	f000 f814 	bl	8001b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b10:	f7ff fec0 	bl	8001894 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b14:	f000 f8ae 	bl	8001c74 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001b18:	f000 fbf6 	bl	8002308 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8001b1c:	f000 fba8 	bl	8002270 <MX_TIM11_Init>
  MX_SPI2_Init();
 8001b20:	f000 f8de 	bl	8001ce0 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001b24:	f7ff ff78 	bl	8001a18 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001b28:	f005 f940 	bl	8006dac <osKernelInitialize>
  MX_FREERTOS_Init();
 8001b2c:	f7ff fa6c 	bl	8001008 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b30:	f005 f960 	bl	8006df4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <main+0x30>
	...

08001b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b094      	sub	sp, #80	; 0x50
 8001b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3e:	f107 0320 	add.w	r3, r7, #32
 8001b42:	2230      	movs	r2, #48	; 0x30
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f009 f8b3 	bl	800acb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <SystemClock_Config+0xcc>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <SystemClock_Config+0xcc>)
 8001b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <SystemClock_Config+0xcc>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <SystemClock_Config+0xd0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b84:	4a20      	ldr	r2, [pc, #128]	; (8001c08 <SystemClock_Config+0xd0>)
 8001b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <SystemClock_Config+0xd0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ba0:	2310      	movs	r3, #16
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bac:	2308      	movs	r3, #8
 8001bae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001bb0:	2354      	movs	r3, #84	; 0x54
 8001bb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bb8:	2304      	movs	r3, #4
 8001bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bbc:	f107 0320 	add.w	r3, r7, #32
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f002 f977 	bl	8003eb4 <HAL_RCC_OscConfig>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001bcc:	f000 f842 	bl	8001c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd0:	230f      	movs	r3, #15
 8001bd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	2102      	movs	r1, #2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 fc89 	bl	8004504 <HAL_RCC_ClockConfig>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001bf8:	f000 f82c 	bl	8001c54 <Error_Handler>
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3750      	adds	r7, #80	; 0x50
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40007000 	.word	0x40007000

08001c0c <__io_putchar>:
	 set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10);
 8001c14:	1d39      	adds	r1, r7, #4
 8001c16:	230a      	movs	r3, #10
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4804      	ldr	r0, [pc, #16]	; (8001c2c <__io_putchar+0x20>)
 8001c1c:	f004 f812 	bl	8005c44 <HAL_UART_Transmit>
  return ch;
 8001c20:	687b      	ldr	r3, [r7, #4]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000444 	.word	0x20000444

08001c30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c42:	f001 f927 	bl	8002e94 <HAL_IncTick>
  {
//	  HAL_TIM_Base_Stop_IT(htim);
//	  if (Button_1.state == false)
  }
  /* USER CODE END Callback 1 */
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40014400 	.word	0x40014400

08001c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c58:	b672      	cpsid	i
}
 8001c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <Error_Handler+0x8>

08001c5e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c7a:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <MX_SPI1_Init+0x68>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001cc0:	220a      	movs	r2, #10
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001cc6:	f002 fed7 	bl	8004a78 <HAL_SPI_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cd0:	f7ff ffc0 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000300 	.word	0x20000300
 8001cdc:	40013000 	.word	0x40013000

08001ce0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001ce6:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <MX_SPI2_Init+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001cec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cf0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d10:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d2c:	220a      	movs	r2, #10
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d30:	4804      	ldr	r0, [pc, #16]	; (8001d44 <MX_SPI2_Init+0x64>)
 8001d32:	f002 fea1 	bl	8004a78 <HAL_SPI_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d3c:	f7ff ff8a 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000358 	.word	0x20000358
 8001d48:	40003800 	.word	0x40003800

08001d4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08c      	sub	sp, #48	; 0x30
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a36      	ldr	r2, [pc, #216]	; (8001e44 <HAL_SPI_MspInit+0xf8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d134      	bne.n	8001dd8 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	4b35      	ldr	r3, [pc, #212]	; (8001e48 <HAL_SPI_MspInit+0xfc>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	4a34      	ldr	r2, [pc, #208]	; (8001e48 <HAL_SPI_MspInit+0xfc>)
 8001d78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7e:	4b32      	ldr	r3, [pc, #200]	; (8001e48 <HAL_SPI_MspInit+0xfc>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <HAL_SPI_MspInit+0xfc>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a2d      	ldr	r2, [pc, #180]	; (8001e48 <HAL_SPI_MspInit+0xfc>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <HAL_SPI_MspInit+0xfc>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001da6:	23e0      	movs	r3, #224	; 0xe0
 8001da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001db6:	2305      	movs	r3, #5
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4822      	ldr	r0, [pc, #136]	; (8001e4c <HAL_SPI_MspInit+0x100>)
 8001dc2:	f001 fa8b 	bl	80032dc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2105      	movs	r1, #5
 8001dca:	2023      	movs	r0, #35	; 0x23
 8001dcc:	f001 f998 	bl	8003100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001dd0:	2023      	movs	r0, #35	; 0x23
 8001dd2:	f001 f9c1 	bl	8003158 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001dd6:	e031      	b.n	8001e3c <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_SPI_MspInit+0x104>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d12c      	bne.n	8001e3c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_SPI_MspInit+0xfc>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <HAL_SPI_MspInit+0xfc>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_SPI_MspInit+0xfc>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_SPI_MspInit+0xfc>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <HAL_SPI_MspInit+0xfc>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_SPI_MspInit+0xfc>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e1a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e2c:	2305      	movs	r3, #5
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	4807      	ldr	r0, [pc, #28]	; (8001e54 <HAL_SPI_MspInit+0x108>)
 8001e38:	f001 fa50 	bl	80032dc <HAL_GPIO_Init>
}
 8001e3c:	bf00      	nop
 8001e3e:	3730      	adds	r7, #48	; 0x30
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40013000 	.word	0x40013000
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40003800 	.word	0x40003800
 8001e54:	40020400 	.word	0x40020400

08001e58 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <HAL_SPI_MspDeInit+0x58>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10d      	bne.n	8001e86 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_SPI_MspDeInit+0x5c>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <HAL_SPI_MspDeInit+0x5c>)
 8001e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e74:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001e76:	21e0      	movs	r1, #224	; 0xe0
 8001e78:	480f      	ldr	r0, [pc, #60]	; (8001eb8 <HAL_SPI_MspDeInit+0x60>)
 8001e7a:	f001 fcc3 	bl	8003804 <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8001e7e:	2023      	movs	r0, #35	; 0x23
 8001e80:	f001 f982 	bl	8003188 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 8001e84:	e00f      	b.n	8001ea6 <HAL_SPI_MspDeInit+0x4e>
  else if(spiHandle->Instance==SPI2)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <HAL_SPI_MspDeInit+0x64>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d10a      	bne.n	8001ea6 <HAL_SPI_MspDeInit+0x4e>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_SPI_MspDeInit+0x5c>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_SPI_MspDeInit+0x5c>)
 8001e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e9a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8001e9c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001ea0:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <HAL_SPI_MspDeInit+0x68>)
 8001ea2:	f001 fcaf 	bl	8003804 <HAL_GPIO_DeInit>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40013000 	.word	0x40013000
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	40003800 	.word	0x40003800
 8001ec0:	40020400 	.word	0x40020400

08001ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <HAL_MspInit+0x64>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <HAL_MspInit+0x64>)
 8001ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_MspInit+0x64>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <HAL_MspInit+0x64>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <HAL_MspInit+0x64>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_MspInit+0x64>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	210f      	movs	r1, #15
 8001f06:	f06f 0001 	mvn.w	r0, #1
 8001f0a:	f001 f8f9 	bl	8003100 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2105      	movs	r1, #5
 8001f12:	2001      	movs	r0, #1
 8001f14:	f001 f8f4 	bl	8003100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f001 f91d 	bl	8003158 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	; 0x30
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <HAL_InitTick+0xd0>)
 8001f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f44:	4a2d      	ldr	r2, [pc, #180]	; (8001ffc <HAL_InitTick+0xd0>)
 8001f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <HAL_InitTick+0xd0>)
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f58:	f107 020c 	add.w	r2, r7, #12
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f002 fd56 	bl	8004a14 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f68:	f002 fd40 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 8001f6c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f70:	4a23      	ldr	r2, [pc, #140]	; (8002000 <HAL_InitTick+0xd4>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	0c9b      	lsrs	r3, r3, #18
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001f7c:	4b21      	ldr	r3, [pc, #132]	; (8002004 <HAL_InitTick+0xd8>)
 8001f7e:	4a22      	ldr	r2, [pc, #136]	; (8002008 <HAL_InitTick+0xdc>)
 8001f80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_InitTick+0xd8>)
 8001f84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f88:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001f8a:	4a1e      	ldr	r2, [pc, #120]	; (8002004 <HAL_InitTick+0xd8>)
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001f90:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <HAL_InitTick+0xd8>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_InitTick+0xd8>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9c:	4b19      	ldr	r3, [pc, #100]	; (8002004 <HAL_InitTick+0xd8>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001fa2:	4818      	ldr	r0, [pc, #96]	; (8002004 <HAL_InitTick+0xd8>)
 8001fa4:	f003 fa7c 	bl	80054a0 <HAL_TIM_Base_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d11b      	bne.n	8001fee <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001fb6:	4813      	ldr	r0, [pc, #76]	; (8002004 <HAL_InitTick+0xd8>)
 8001fb8:	f003 fb38 	bl	800562c <HAL_TIM_Base_Start_IT>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d111      	bne.n	8001fee <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fca:	2019      	movs	r0, #25
 8001fcc:	f001 f8c4 	bl	8003158 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b0f      	cmp	r3, #15
 8001fd4:	d808      	bhi.n	8001fe8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	2019      	movs	r0, #25
 8001fdc:	f001 f890 	bl	8003100 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <HAL_InitTick+0xe0>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e002      	b.n	8001fee <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3730      	adds	r7, #48	; 0x30
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	431bde83 	.word	0x431bde83
 8002004:	200003b0 	.word	0x200003b0
 8002008:	40014400 	.word	0x40014400
 800200c:	2000002c 	.word	0x2000002c

08002010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <NMI_Handler+0x4>

08002016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <HardFault_Handler+0x4>

0800201c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <MemManage_Handler+0x4>

08002022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002026:	e7fe      	b.n	8002026 <BusFault_Handler+0x4>

08002028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800202c:	e7fe      	b.n	800202c <UsageFault_Handler+0x4>

0800202e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002040:	f001 ff1e 	bl	8003e80 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 800204c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002050:	f001 fd32 	bl	8003ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(timeout > 0)
 800205c:	4b07      	ldr	r3, [pc, #28]	; (800207c <TIM1_UP_TIM10_IRQHandler+0x24>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <TIM1_UP_TIM10_IRQHandler+0x18>
		timeout--;
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <TIM1_UP_TIM10_IRQHandler+0x24>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <TIM1_UP_TIM10_IRQHandler+0x24>)
 800206e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002070:	4803      	ldr	r0, [pc, #12]	; (8002080 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8002072:	f003 fb6d 	bl	8005750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000488 	.word	0x20000488
 8002080:	200003b0 	.word	0x200003b0

08002084 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800208a:	f003 fb61 	bl	8005750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200003fc 	.word	0x200003fc

08002098 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <SPI1_IRQHandler+0x10>)
 800209e:	f003 f817 	bl	80050d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000300 	.word	0x20000300

080020ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <USART2_IRQHandler+0x10>)
 80020b2:	f003 fe89 	bl	8005dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000444 	.word	0x20000444

080020c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return 1;
 80020c4:	2301      	movs	r3, #1
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_kill>:

int _kill(int pid, int sig)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020da:	f008 fcb9 	bl	800aa50 <__errno>
 80020de:	4603      	mov	r3, r0
 80020e0:	2216      	movs	r2, #22
 80020e2:	601a      	str	r2, [r3, #0]
  return -1;
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_exit>:

void _exit (int status)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020f8:	f04f 31ff 	mov.w	r1, #4294967295
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ffe7 	bl	80020d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002102:	e7fe      	b.n	8002102 <_exit+0x12>

08002104 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	e00a      	b.n	800212c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002116:	f3af 8000 	nop.w
 800211a:	4601      	mov	r1, r0
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	60ba      	str	r2, [r7, #8]
 8002122:	b2ca      	uxtb	r2, r1
 8002124:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3301      	adds	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	dbf0      	blt.n	8002116 <_read+0x12>
  }

  return len;
 8002134:	687b      	ldr	r3, [r7, #4]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e009      	b.n	8002164 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	60ba      	str	r2, [r7, #8]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fd57 	bl	8001c0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	dbf1      	blt.n	8002150 <_write+0x12>
  }
  return len;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_close>:

int _close(int file)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800219e:	605a      	str	r2, [r3, #4]
  return 0;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_isatty>:

int _isatty(int file)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <_sbrk+0x5c>)
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <_sbrk+0x60>)
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <_sbrk+0x64>)
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <_sbrk+0x68>)
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <_sbrk+0x64>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	429a      	cmp	r2, r3
 800220e:	d207      	bcs.n	8002220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002210:	f008 fc1e 	bl	800aa50 <__errno>
 8002214:	4603      	mov	r3, r0
 8002216:	220c      	movs	r2, #12
 8002218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	e009      	b.n	8002234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <_sbrk+0x64>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <_sbrk+0x64>)
 8002230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002232:	68fb      	ldr	r3, [r7, #12]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20010000 	.word	0x20010000
 8002240:	00000400 	.word	0x00000400
 8002244:	200003f8 	.word	0x200003f8
 8002248:	20004f48 	.word	0x20004f48

0800224c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <SystemInit+0x20>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <SystemInit+0x20>)
 8002258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800225c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <MX_TIM11_Init+0x40>)
 8002276:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <MX_TIM11_Init+0x44>)
 8002278:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 839;
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <MX_TIM11_Init+0x40>)
 800227c:	f240 3247 	movw	r2, #839	; 0x347
 8002280:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <MX_TIM11_Init+0x40>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <MX_TIM11_Init+0x40>)
 800228a:	2263      	movs	r2, #99	; 0x63
 800228c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <MX_TIM11_Init+0x40>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <MX_TIM11_Init+0x40>)
 8002296:	2200      	movs	r2, #0
 8002298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800229a:	4805      	ldr	r0, [pc, #20]	; (80022b0 <MX_TIM11_Init+0x40>)
 800229c:	f003 f900 	bl	80054a0 <HAL_TIM_Base_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80022a6:	f7ff fcd5 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200003fc 	.word	0x200003fc
 80022b4:	40014800 	.word	0x40014800

080022b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_TIM_Base_MspInit+0x48>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d115      	bne.n	80022f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <HAL_TIM_Base_MspInit+0x4c>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <HAL_TIM_Base_MspInit+0x4c>)
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d8:	6453      	str	r3, [r2, #68]	; 0x44
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_TIM_Base_MspInit+0x4c>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2105      	movs	r1, #5
 80022ea:	201a      	movs	r0, #26
 80022ec:	f000 ff08 	bl	8003100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80022f0:	201a      	movs	r0, #26
 80022f2:	f000 ff31 	bl	8003158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40014800 	.word	0x40014800
 8002304:	40023800 	.word	0x40023800

08002308 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <MX_USART2_UART_Init+0x4c>)
 800230e:	4a12      	ldr	r2, [pc, #72]	; (8002358 <MX_USART2_UART_Init+0x50>)
 8002310:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <MX_USART2_UART_Init+0x4c>)
 8002314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002318:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800231a:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <MX_USART2_UART_Init+0x4c>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <MX_USART2_UART_Init+0x4c>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <MX_USART2_UART_Init+0x4c>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <MX_USART2_UART_Init+0x4c>)
 800232e:	220c      	movs	r2, #12
 8002330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <MX_USART2_UART_Init+0x4c>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <MX_USART2_UART_Init+0x4c>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800233e:	4805      	ldr	r0, [pc, #20]	; (8002354 <MX_USART2_UART_Init+0x4c>)
 8002340:	f003 fbca 	bl	8005ad8 <HAL_UART_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800234a:	f7ff fc83 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000444 	.word	0x20000444
 8002358:	40004400 	.word	0x40004400

0800235c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	; 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <HAL_UART_MspInit+0x94>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d133      	bne.n	80023e6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_UART_MspInit+0x98>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a1b      	ldr	r2, [pc, #108]	; (80023f4 <HAL_UART_MspInit+0x98>)
 8002388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_UART_MspInit+0x98>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_UART_MspInit+0x98>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <HAL_UART_MspInit+0x98>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_UART_MspInit+0x98>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023b6:	230c      	movs	r3, #12
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023c6:	2307      	movs	r3, #7
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4619      	mov	r1, r3
 80023d0:	4809      	ldr	r0, [pc, #36]	; (80023f8 <HAL_UART_MspInit+0x9c>)
 80023d2:	f000 ff83 	bl	80032dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	210a      	movs	r1, #10
 80023da:	2026      	movs	r0, #38	; 0x26
 80023dc:	f000 fe90 	bl	8003100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023e0:	2026      	movs	r0, #38	; 0x26
 80023e2:	f000 feb9 	bl	8003158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023e6:	bf00      	nop
 80023e8:	3728      	adds	r7, #40	; 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40004400 	.word	0x40004400
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000
 80023fc:	00000000 	.word	0x00000000

08002400 <ftoa>:
#include "common.h"
#include <math.h>
#include <stdio.h>
// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 8002400:	b5b0      	push	{r4, r5, r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
 8002406:	ed87 0a03 	vstr	s0, [r7, #12]
 800240a:	60b8      	str	r0, [r7, #8]
 800240c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 800240e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002416:	ee17 3a90 	vmov	r3, s15
 800241a:	61fb      	str	r3, [r7, #28]
    // Extract floating part
    float fpart = n - (float)ipart;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002426:	ed97 7a03 	vldr	s14, [r7, #12]
 800242a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800242e:	edc7 7a06 	vstr	s15, [r7, #24]
    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	69f8      	ldr	r0, [r7, #28]
 8002438:	f000 f83e 	bl	80024b8 <intToStr>
 800243c:	6178      	str	r0, [r7, #20]
    // check for display option after point
    if (afterpoint != 0)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d030      	beq.n	80024a6 <ftoa+0xa6>
    {
        res[i] = '.'; // add dot
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4413      	add	r3, r2
 800244a:	222e      	movs	r2, #46	; 0x2e
 800244c:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 800244e:	69b8      	ldr	r0, [r7, #24]
 8002450:	f7fe f882 	bl	8000558 <__aeabi_f2d>
 8002454:	4604      	mov	r4, r0
 8002456:	460d      	mov	r5, r1
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7fe f86b 	bl	8000534 <__aeabi_i2d>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	ec43 2b11 	vmov	d1, r2, r3
 8002466:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80024b0 <ftoa+0xb0>
 800246a:	f00c ffff 	bl	800f46c <pow>
 800246e:	ec53 2b10 	vmov	r2, r3, d0
 8002472:	4620      	mov	r0, r4
 8002474:	4629      	mov	r1, r5
 8002476:	f7fe f8c7 	bl	8000608 <__aeabi_dmul>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	f7fe fbb9 	bl	8000bf8 <__aeabi_d2f>
 8002486:	4603      	mov	r3, r0
 8002488:	61bb      	str	r3, [r7, #24]
        intToStr((int)fpart, res + i + 1, afterpoint);
 800248a:	edd7 7a06 	vldr	s15, [r7, #24]
 800248e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3301      	adds	r3, #1
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	4413      	add	r3, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4619      	mov	r1, r3
 800249e:	ee17 0a90 	vmov	r0, s15
 80024a2:	f000 f809 	bl	80024b8 <intToStr>
    }
}
 80024a6:	bf00      	nop
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bdb0      	pop	{r4, r5, r7, pc}
 80024ae:	bf00      	nop
 80024b0:	00000000 	.word	0x00000000
 80024b4:	40240000 	.word	0x40240000

080024b8 <intToStr>:

int intToStr(int x, char str[], int d)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
    int i = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
    if (x == 0)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d126      	bne.n	800251c <intToStr+0x64>
    {
        str[i++] = '0';
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	617a      	str	r2, [r7, #20]
 80024d4:	461a      	mov	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	4413      	add	r3, r2
 80024da:	2230      	movs	r2, #48	; 0x30
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e029      	b.n	8002534 <intToStr+0x7c>
    }
    else
    {
        while (x)
        {
            str[i++] = (x % 10) + '0';
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <intToStr+0xa0>)
 80024e4:	fb83 1302 	smull	r1, r3, r3, r2
 80024e8:	1099      	asrs	r1, r3, #2
 80024ea:	17d3      	asrs	r3, r2, #31
 80024ec:	1ac9      	subs	r1, r1, r3
 80024ee:	460b      	mov	r3, r1
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	1ad1      	subs	r1, r2, r3
 80024f8:	b2ca      	uxtb	r2, r1
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	1c59      	adds	r1, r3, #1
 80024fe:	6179      	str	r1, [r7, #20]
 8002500:	4619      	mov	r1, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	440b      	add	r3, r1
 8002506:	3230      	adds	r2, #48	; 0x30
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	701a      	strb	r2, [r3, #0]
            x = x / 10;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a12      	ldr	r2, [pc, #72]	; (8002558 <intToStr+0xa0>)
 8002510:	fb82 1203 	smull	r1, r2, r2, r3
 8002514:	1092      	asrs	r2, r2, #2
 8002516:	17db      	asrs	r3, r3, #31
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	60fb      	str	r3, [r7, #12]
        while (x)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1de      	bne.n	80024e0 <intToStr+0x28>
        }
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8002522:	e007      	b.n	8002534 <intToStr+0x7c>
        str[i++] = '0';
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	617a      	str	r2, [r7, #20]
 800252a:	461a      	mov	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4413      	add	r3, r2
 8002530:	2230      	movs	r2, #48	; 0x30
 8002532:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	dbf3      	blt.n	8002524 <intToStr+0x6c>

    reverse(str, i);
 800253c:	6979      	ldr	r1, [r7, #20]
 800253e:	68b8      	ldr	r0, [r7, #8]
 8002540:	f000 f80c 	bl	800255c <reverse>
    str[i] = '\0';
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	4413      	add	r3, r2
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
    return i;
 800254e:	697b      	ldr	r3, [r7, #20]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	66666667 	.word	0x66666667

0800255c <reverse>:

void reverse(char* str, int len)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	3b01      	subs	r3, #1
 800256e:	613b      	str	r3, [r7, #16]
    while (i < j)
 8002570:	e018      	b.n	80025a4 <reverse+0x48>
    {
        temp = str[i];
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	4413      	add	r3, r2
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	441a      	add	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	440b      	add	r3, r1
 8002588:	7812      	ldrb	r2, [r2, #0]
 800258a:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]
        i++;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3301      	adds	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
        j--;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	613b      	str	r3, [r7, #16]
    while (i < j)
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	dbe2      	blt.n	8002572 <reverse+0x16>
    }
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	371c      	adds	r7, #28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <ILI9341_Select>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"


static void ILI9341_Select()
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 80025c0:	2200      	movs	r2, #0
 80025c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025c6:	4802      	ldr	r0, [pc, #8]	; (80025d0 <ILI9341_Select+0x14>)
 80025c8:	f001 fa44 	bl	8003a54 <HAL_GPIO_WritePin>

}
 80025cc:	bf00      	nop
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40020000 	.word	0x40020000

080025d4 <ILI9341_Unselect>:

void ILI9341_Unselect()
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80025d8:	2201      	movs	r2, #1
 80025da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025de:	4802      	ldr	r0, [pc, #8]	; (80025e8 <ILI9341_Unselect+0x14>)
 80025e0:	f001 fa38 	bl	8003a54 <HAL_GPIO_WritePin>
}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40020000 	.word	0x40020000

080025ec <ILI9341_Reset>:

static void ILI9341_Reset()
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80025f0:	2200      	movs	r2, #0
 80025f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025f6:	4807      	ldr	r0, [pc, #28]	; (8002614 <ILI9341_Reset+0x28>)
 80025f8:	f001 fa2c 	bl	8003a54 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80025fc:	200a      	movs	r0, #10
 80025fe:	f000 fc69 	bl	8002ed4 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8002602:	2201      	movs	r2, #1
 8002604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <ILI9341_Reset+0x28>)
 800260a:	f001 fa23 	bl	8003a54 <HAL_GPIO_WritePin>
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40020400 	.word	0x40020400

08002618 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8002622:	2200      	movs	r2, #0
 8002624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002628:	4806      	ldr	r0, [pc, #24]	; (8002644 <ILI9341_WriteCommand+0x2c>)
 800262a:	f001 fa13 	bl	8003a54 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800262e:	1df9      	adds	r1, r7, #7
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
 8002634:	2201      	movs	r2, #1
 8002636:	4804      	ldr	r0, [pc, #16]	; (8002648 <ILI9341_WriteCommand+0x30>)
 8002638:	f002 fbfe 	bl	8004e38 <HAL_SPI_Transmit>
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40020400 	.word	0x40020400
 8002648:	20000300 	.word	0x20000300

0800264c <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8002656:	2201      	movs	r2, #1
 8002658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800265c:	4810      	ldr	r0, [pc, #64]	; (80026a0 <ILI9341_WriteData+0x54>)
 800265e:	f001 f9f9 	bl	8003a54 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8002662:	e015      	b.n	8002690 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800266a:	bf28      	it	cs
 800266c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8002670:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8002672:	89fa      	ldrh	r2, [r7, #14]
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	480a      	ldr	r0, [pc, #40]	; (80026a4 <ILI9341_WriteData+0x58>)
 800267c:	f002 fbdc 	bl	8004e38 <HAL_SPI_Transmit>
        buff += chunk_size;
 8002680:	89fb      	ldrh	r3, [r7, #14]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8002688:	89fb      	ldrh	r3, [r7, #14]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1e6      	bne.n	8002664 <ILI9341_WriteData+0x18>
    }
}
 8002696:	bf00      	nop
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40020400 	.word	0x40020400
 80026a4:	20000300 	.word	0x20000300

080026a8 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4604      	mov	r4, r0
 80026b0:	4608      	mov	r0, r1
 80026b2:	4611      	mov	r1, r2
 80026b4:	461a      	mov	r2, r3
 80026b6:	4623      	mov	r3, r4
 80026b8:	80fb      	strh	r3, [r7, #6]
 80026ba:	4603      	mov	r3, r0
 80026bc:	80bb      	strh	r3, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	807b      	strh	r3, [r7, #2]
 80026c2:	4613      	mov	r3, r2
 80026c4:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 80026c6:	202a      	movs	r0, #42	; 0x2a
 80026c8:	f7ff ffa6 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	733b      	strb	r3, [r7, #12]
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	737b      	strb	r3, [r7, #13]
 80026dc:	887b      	ldrh	r3, [r7, #2]
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	73bb      	strb	r3, [r7, #14]
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	2104      	movs	r1, #4
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ffaa 	bl	800264c <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80026f8:	202b      	movs	r0, #43	; 0x2b
 80026fa:	f7ff ff8d 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80026fe:	88bb      	ldrh	r3, [r7, #4]
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	b29b      	uxth	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	723b      	strb	r3, [r7, #8]
 8002708:	88bb      	ldrh	r3, [r7, #4]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	727b      	strb	r3, [r7, #9]
 800270e:	883b      	ldrh	r3, [r7, #0]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	b29b      	uxth	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	72bb      	strb	r3, [r7, #10]
 8002718:	883b      	ldrh	r3, [r7, #0]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800271e:	f107 0308 	add.w	r3, r7, #8
 8002722:	2104      	movs	r1, #4
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff91 	bl	800264c <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800272a:	202c      	movs	r0, #44	; 0x2c
 800272c:	f7ff ff74 	bl	8002618 <ILI9341_WriteCommand>
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bd90      	pop	{r4, r7, pc}

08002738 <ILI9341_Init>:

void ILI9341_Init()
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b09b      	sub	sp, #108	; 0x6c
 800273c:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800273e:	f7ff ff3d 	bl	80025bc <ILI9341_Select>
    ILI9341_Reset();
 8002742:	f7ff ff53 	bl	80025ec <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8002746:	2001      	movs	r0, #1
 8002748:	f7ff ff66 	bl	8002618 <ILI9341_WriteCommand>
    HAL_Delay(500);
 800274c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002750:	f000 fbc0 	bl	8002ed4 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8002754:	20cb      	movs	r0, #203	; 0xcb
 8002756:	f7ff ff5f 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800275a:	4a8a      	ldr	r2, [pc, #552]	; (8002984 <ILI9341_Init+0x24c>)
 800275c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002760:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002764:	6018      	str	r0, [r3, #0]
 8002766:	3304      	adds	r3, #4
 8002768:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800276a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800276e:	2105      	movs	r1, #5
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff6b 	bl	800264c <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8002776:	20cf      	movs	r0, #207	; 0xcf
 8002778:	f7ff ff4e 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 800277c:	4a82      	ldr	r2, [pc, #520]	; (8002988 <ILI9341_Init+0x250>)
 800277e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	4611      	mov	r1, r2
 8002786:	8019      	strh	r1, [r3, #0]
 8002788:	3302      	adds	r3, #2
 800278a:	0c12      	lsrs	r2, r2, #16
 800278c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800278e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002792:	2103      	movs	r1, #3
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff59 	bl	800264c <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800279a:	20e8      	movs	r0, #232	; 0xe8
 800279c:	f7ff ff3c 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80027a0:	4a7a      	ldr	r2, [pc, #488]	; (800298c <ILI9341_Init+0x254>)
 80027a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	4611      	mov	r1, r2
 80027aa:	8019      	strh	r1, [r3, #0]
 80027ac:	3302      	adds	r3, #2
 80027ae:	0c12      	lsrs	r2, r2, #16
 80027b0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80027b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027b6:	2103      	movs	r1, #3
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff47 	bl	800264c <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80027be:	20ea      	movs	r0, #234	; 0xea
 80027c0:	f7ff ff2a 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 80027ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027ce:	2102      	movs	r1, #2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff3b 	bl	800264c <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 80027d6:	20ed      	movs	r0, #237	; 0xed
 80027d8:	f7ff ff1e 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80027dc:	4b6c      	ldr	r3, [pc, #432]	; (8002990 <ILI9341_Init+0x258>)
 80027de:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 80027e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027e4:	2104      	movs	r1, #4
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff30 	bl	800264c <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80027ec:	20f7      	movs	r0, #247	; 0xf7
 80027ee:	f7ff ff13 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80027f2:	2320      	movs	r3, #32
 80027f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80027f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027fc:	2101      	movs	r1, #1
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff24 	bl	800264c <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8002804:	20c0      	movs	r0, #192	; 0xc0
 8002806:	f7ff ff07 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800280a:	2323      	movs	r3, #35	; 0x23
 800280c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8002810:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002814:	2101      	movs	r1, #1
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff ff18 	bl	800264c <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 800281c:	20c1      	movs	r0, #193	; 0xc1
 800281e:	f7ff fefb 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8002822:	2310      	movs	r3, #16
 8002824:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8002828:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800282c:	2101      	movs	r1, #1
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ff0c 	bl	800264c <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8002834:	20c5      	movs	r0, #197	; 0xc5
 8002836:	f7ff feef 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800283a:	f642 033e 	movw	r3, #10302	; 0x283e
 800283e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 8002842:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002846:	2102      	movs	r1, #2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff feff 	bl	800264c <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 800284e:	20c7      	movs	r0, #199	; 0xc7
 8002850:	f7ff fee2 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8002854:	2386      	movs	r3, #134	; 0x86
 8002856:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800285a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800285e:	2101      	movs	r1, #1
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fef3 	bl	800264c <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8002866:	2036      	movs	r0, #54	; 0x36
 8002868:	f7ff fed6 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 800286c:	2348      	movs	r3, #72	; 0x48
 800286e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 8002872:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002876:	2101      	movs	r1, #1
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fee7 	bl	800264c <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 800287e:	203a      	movs	r0, #58	; 0x3a
 8002880:	f7ff feca 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8002884:	2355      	movs	r3, #85	; 0x55
 8002886:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 800288a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800288e:	2101      	movs	r1, #1
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fedb 	bl	800264c <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8002896:	20b1      	movs	r0, #177	; 0xb1
 8002898:	f7ff febe 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 800289c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028a0:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 80028a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028a6:	2102      	movs	r1, #2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fecf 	bl	800264c <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80028ae:	20b6      	movs	r0, #182	; 0xb6
 80028b0:	f7ff feb2 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80028b4:	4a37      	ldr	r2, [pc, #220]	; (8002994 <ILI9341_Init+0x25c>)
 80028b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	4611      	mov	r1, r2
 80028be:	8019      	strh	r1, [r3, #0]
 80028c0:	3302      	adds	r3, #2
 80028c2:	0c12      	lsrs	r2, r2, #16
 80028c4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80028c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ca:	2103      	movs	r1, #3
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff febd 	bl	800264c <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 80028d2:	20f2      	movs	r0, #242	; 0xf2
 80028d4:	f7ff fea0 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 80028de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028e2:	2101      	movs	r1, #1
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff feb1 	bl	800264c <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80028ea:	2026      	movs	r0, #38	; 0x26
 80028ec:	f7ff fe94 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80028f0:	2301      	movs	r3, #1
 80028f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 80028f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fa:	2101      	movs	r1, #1
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fea5 	bl	800264c <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8002902:	20e0      	movs	r0, #224	; 0xe0
 8002904:	f7ff fe88 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8002908:	4b23      	ldr	r3, [pc, #140]	; (8002998 <ILI9341_Init+0x260>)
 800290a:	f107 0414 	add.w	r4, r7, #20
 800290e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002910:	c407      	stmia	r4!, {r0, r1, r2}
 8002912:	8023      	strh	r3, [r4, #0]
 8002914:	3402      	adds	r4, #2
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	7023      	strb	r3, [r4, #0]
                            0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	210f      	movs	r1, #15
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fe93 	bl	800264c <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8002926:	20e1      	movs	r0, #225	; 0xe1
 8002928:	f7ff fe76 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <ILI9341_Init+0x264>)
 800292e:	1d3c      	adds	r4, r7, #4
 8002930:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002932:	c407      	stmia	r4!, {r0, r1, r2}
 8002934:	8023      	strh	r3, [r4, #0]
 8002936:	3402      	adds	r4, #2
 8002938:	0c1b      	lsrs	r3, r3, #16
 800293a:	7023      	strb	r3, [r4, #0]
                            0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	210f      	movs	r1, #15
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fe83 	bl	800264c <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8002946:	2011      	movs	r0, #17
 8002948:	f7ff fe66 	bl	8002618 <ILI9341_WriteCommand>
    HAL_Delay(120);
 800294c:	2078      	movs	r0, #120	; 0x78
 800294e:	f000 fac1 	bl	8002ed4 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8002952:	2029      	movs	r0, #41	; 0x29
 8002954:	f7ff fe60 	bl	8002618 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8002958:	2036      	movs	r0, #54	; 0x36
 800295a:	f7ff fe5d 	bl	8002618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 800295e:	23e8      	movs	r3, #232	; 0xe8
 8002960:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002962:	463b      	mov	r3, r7
 8002964:	2101      	movs	r1, #1
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fe70 	bl	800264c <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 800296c:	f7ff fe32 	bl	80025d4 <ILI9341_Unselect>

    HAL_GPIO_WritePin(ILI9341_LED_GPIO_Port, ILI9341_LED_Pin, SET);
 8002970:	2201      	movs	r2, #1
 8002972:	2102      	movs	r1, #2
 8002974:	480a      	ldr	r0, [pc, #40]	; (80029a0 <ILI9341_Init+0x268>)
 8002976:	f001 f86d 	bl	8003a54 <HAL_GPIO_WritePin>
}
 800297a:	bf00      	nop
 800297c:	376c      	adds	r7, #108	; 0x6c
 800297e:	46bd      	mov	sp, r7
 8002980:	bd90      	pop	{r4, r7, pc}
 8002982:	bf00      	nop
 8002984:	0801044c 	.word	0x0801044c
 8002988:	08010454 	.word	0x08010454
 800298c:	08010458 	.word	0x08010458
 8002990:	81120364 	.word	0x81120364
 8002994:	0801045c 	.word	0x0801045c
 8002998:	08010460 	.word	0x08010460
 800299c:	08010470 	.word	0x08010470
 80029a0:	40020400 	.word	0x40020400

080029a4 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	80fb      	strh	r3, [r7, #6]
 80029ae:	460b      	mov	r3, r1
 80029b0:	80bb      	strh	r3, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80029bc:	d21f      	bcs.n	80029fe <ILI9341_DrawPixel+0x5a>
 80029be:	88bb      	ldrh	r3, [r7, #4]
 80029c0:	2bef      	cmp	r3, #239	; 0xef
 80029c2:	d81c      	bhi.n	80029fe <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 80029c4:	f7ff fdfa 	bl	80025bc <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 80029c8:	88fb      	ldrh	r3, [r7, #6]
 80029ca:	3301      	adds	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	88bb      	ldrh	r3, [r7, #4]
 80029d0:	3301      	adds	r3, #1
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	88b9      	ldrh	r1, [r7, #4]
 80029d6:	88f8      	ldrh	r0, [r7, #6]
 80029d8:	f7ff fe66 	bl	80026a8 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80029dc:	887b      	ldrh	r3, [r7, #2]
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	733b      	strb	r3, [r7, #12]
 80029e6:	887b      	ldrh	r3, [r7, #2]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 80029ec:	f107 030c 	add.w	r3, r7, #12
 80029f0:	2102      	movs	r1, #2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fe2a 	bl	800264c <ILI9341_WriteData>

    ILI9341_Unselect();
 80029f8:	f7ff fdec 	bl	80025d4 <ILI9341_Unselect>
 80029fc:	e000      	b.n	8002a00 <ILI9341_DrawPixel+0x5c>
        return;
 80029fe:	bf00      	nop
}
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <ILI9341_DrawLine>:

void ILI9341_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8002a06:	b590      	push	{r4, r7, lr}
 8002a08:	b08d      	sub	sp, #52	; 0x34
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	4608      	mov	r0, r1
 8002a10:	4611      	mov	r1, r2
 8002a12:	461a      	mov	r2, r3
 8002a14:	4623      	mov	r3, r4
 8002a16:	80fb      	strh	r3, [r7, #6]
 8002a18:	4603      	mov	r3, r0
 8002a1a:	80bb      	strh	r3, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]
 8002a20:	4613      	mov	r3, r2
 8002a22:	803b      	strh	r3, [r7, #0]
    uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8002a24:	2300      	movs	r3, #0
 8002a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a28:	2300      	movs	r3, #0
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;

	delta_x = x2 - x1;
 8002a2c:	887a      	ldrh	r2, [r7, #2]
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8002a34:	883a      	ldrh	r2, [r7, #0]
 8002a36:	88bb      	ldrh	r3, [r7, #4]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8002a40:	88bb      	ldrh	r3, [r7, #4]
 8002a42:	60bb      	str	r3, [r7, #8]

	if (delta_x > 0)
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	dd02      	ble.n	8002a50 <ILI9341_DrawLine+0x4a>
        incx = 1;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	e00b      	b.n	8002a68 <ILI9341_DrawLine+0x62>
	else if (delta_x == 0)
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d102      	bne.n	8002a5c <ILI9341_DrawLine+0x56>
        incx = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	e005      	b.n	8002a68 <ILI9341_DrawLine+0x62>
	else
    {
        incx = -1;
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a60:	617b      	str	r3, [r7, #20]
        delta_x = -delta_x;
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	425b      	negs	r3, r3
 8002a66:	623b      	str	r3, [r7, #32]
    }

    if (delta_y > 0)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	dd02      	ble.n	8002a74 <ILI9341_DrawLine+0x6e>
        incy = 1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	e00b      	b.n	8002a8c <ILI9341_DrawLine+0x86>
	else if (delta_y==0)
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <ILI9341_DrawLine+0x7a>
        incy = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	e005      	b.n	8002a8c <ILI9341_DrawLine+0x86>
	else
    {
        incy = -1;
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	613b      	str	r3, [r7, #16]
        delta_y = -delta_y;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	425b      	negs	r3, r3
 8002a8a:	61fb      	str	r3, [r7, #28]
    }

	if (delta_x > delta_y)
 8002a8c:	6a3a      	ldr	r2, [r7, #32]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	dd02      	ble.n	8002a9a <ILI9341_DrawLine+0x94>
        distance = delta_x;
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	e001      	b.n	8002a9e <ILI9341_DrawLine+0x98>
	else
        distance = delta_y;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	61bb      	str	r3, [r7, #24]

	for(t = 0; t <= distance + 1; t++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002aa2:	e02b      	b.n	8002afc <ILI9341_DrawLine+0xf6>
	{
		ILI9341_DrawPixel(uRow, uCol, color);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	b291      	uxth	r1, r2
 8002aac:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ff77 	bl	80029a4 <ILI9341_DrawPixel>

		xerr += delta_x;
 8002ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	4413      	add	r3, r2
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 8002abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24

		if (xerr > distance)
 8002ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	dd07      	ble.n	8002ade <ILI9341_DrawLine+0xd8>
		{
			xerr -= distance;
 8002ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	4413      	add	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance)
 8002ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	dd07      	ble.n	8002af6 <ILI9341_DrawLine+0xf0>
		{
			yerr -= distance;
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	60bb      	str	r3, [r7, #8]
	for(t = 0; t <= distance + 1; t++)
 8002af6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002af8:	3301      	adds	r3, #1
 8002afa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002afc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	3301      	adds	r3, #1
 8002b02:	429a      	cmp	r2, r3
 8002b04:	ddce      	ble.n	8002aa4 <ILI9341_DrawLine+0x9e>
		}
	}
}
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
 8002b0a:	3734      	adds	r7, #52	; 0x34
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd90      	pop	{r4, r7, pc}

08002b10 <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002b10:	b082      	sub	sp, #8
 8002b12:	b590      	push	{r4, r7, lr}
 8002b14:	b089      	sub	sp, #36	; 0x24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	637b      	str	r3, [r7, #52]	; 0x34
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80fb      	strh	r3, [r7, #6]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	80bb      	strh	r3, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002b26:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	4413      	add	r3, r2
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29c      	uxth	r4, r3
 8002b36:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	88bb      	ldrh	r3, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	88b9      	ldrh	r1, [r7, #4]
 8002b48:	88f8      	ldrh	r0, [r7, #6]
 8002b4a:	4622      	mov	r2, r4
 8002b4c:	f7ff fdac 	bl	80026a8 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	e043      	b.n	8002bde <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 8002b56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	3b20      	subs	r3, #32
 8002b5c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4619      	mov	r1, r3
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	440b      	add	r3, r1
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	e029      	b.n	8002bcc <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00e      	beq.n	8002ba6 <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002b88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	743b      	strb	r3, [r7, #16]
 8002b92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8002b98:	f107 0310 	add.w	r3, r7, #16
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fd54 	bl	800264c <ILI9341_WriteData>
 8002ba4:	e00f      	b.n	8002bc6 <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002ba6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	733b      	strb	r3, [r7, #12]
 8002bb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8002bba:	f107 030c 	add.w	r3, r7, #12
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fd43 	bl	800264c <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	61bb      	str	r3, [r7, #24]
 8002bcc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d3cf      	bcc.n	8002b78 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002be2:	461a      	mov	r2, r3
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d3b5      	bcc.n	8002b56 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 8002bea:	bf00      	nop
 8002bec:	bf00      	nop
 8002bee:	3724      	adds	r7, #36	; 0x24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002bf6:	b002      	add	sp, #8
 8002bf8:	4770      	bx	lr

08002bfa <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af04      	add	r7, sp, #16
 8002c02:	603a      	str	r2, [r7, #0]
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	4603      	mov	r3, r0
 8002c08:	80fb      	strh	r3, [r7, #6]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8002c0e:	f7ff fcd5 	bl	80025bc <ILI9341_Select>

    while(*str) {
 8002c12:	e02e      	b.n	8002c72 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	7d3a      	ldrb	r2, [r7, #20]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002c1e:	db13      	blt.n	8002c48 <ILI9341_WriteString+0x4e>
            x = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002c24:	7d7b      	ldrb	r3, [r7, #21]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	88bb      	ldrh	r3, [r7, #4]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8002c2e:	88bb      	ldrh	r3, [r7, #4]
 8002c30:	7d7a      	ldrb	r2, [r7, #21]
 8002c32:	4413      	add	r3, r2
 8002c34:	2bef      	cmp	r3, #239	; 0xef
 8002c36:	dc21      	bgt.n	8002c7c <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d103      	bne.n	8002c48 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	3301      	adds	r3, #1
 8002c44:	603b      	str	r3, [r7, #0]
                continue;
 8002c46:	e014      	b.n	8002c72 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	781a      	ldrb	r2, [r3, #0]
 8002c4c:	88b9      	ldrh	r1, [r7, #4]
 8002c4e:	88f8      	ldrh	r0, [r7, #6]
 8002c50:	8c3b      	ldrh	r3, [r7, #32]
 8002c52:	9302      	str	r3, [sp, #8]
 8002c54:	8bbb      	ldrh	r3, [r7, #28]
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f7ff ff57 	bl	8002b10 <ILI9341_WriteChar>
        x += font.width;
 8002c62:	7d3b      	ldrb	r3, [r7, #20]
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	4413      	add	r3, r2
 8002c6a:	80fb      	strh	r3, [r7, #6]
        str++;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1cc      	bne.n	8002c14 <ILI9341_WriteString+0x1a>
 8002c7a:	e000      	b.n	8002c7e <ILI9341_WriteString+0x84>
                break;
 8002c7c:	bf00      	nop
    }

    ILI9341_Unselect();
 8002c7e:	f7ff fca9 	bl	80025d4 <ILI9341_Unselect>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c8c:	b002      	add	sp, #8
 8002c8e:	4770      	bx	lr

08002c90 <ILI9341_FillRectangle>:
    ILI9341_DrawLine(x, y, x, y + h, color);
    ILI9341_DrawLine(x, y + h, x + w, y + h, color);
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4604      	mov	r4, r0
 8002c98:	4608      	mov	r0, r1
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4623      	mov	r3, r4
 8002ca0:	80fb      	strh	r3, [r7, #6]
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	80bb      	strh	r3, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	807b      	strh	r3, [r7, #2]
 8002caa:	4613      	mov	r3, r2
 8002cac:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002cb4:	d253      	bcs.n	8002d5e <ILI9341_FillRectangle+0xce>
 8002cb6:	88bb      	ldrh	r3, [r7, #4]
 8002cb8:	2bef      	cmp	r3, #239	; 0xef
 8002cba:	d850      	bhi.n	8002d5e <ILI9341_FillRectangle+0xce>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8002cbc:	88fa      	ldrh	r2, [r7, #6]
 8002cbe:	887b      	ldrh	r3, [r7, #2]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002cc6:	dd03      	ble.n	8002cd0 <ILI9341_FillRectangle+0x40>
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002cce:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8002cd0:	88ba      	ldrh	r2, [r7, #4]
 8002cd2:	883b      	ldrh	r3, [r7, #0]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	2bf0      	cmp	r3, #240	; 0xf0
 8002cd8:	dd03      	ble.n	8002ce2 <ILI9341_FillRectangle+0x52>
 8002cda:	88bb      	ldrh	r3, [r7, #4]
 8002cdc:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002ce0:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8002ce2:	f7ff fc6b 	bl	80025bc <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002ce6:	88fa      	ldrh	r2, [r7, #6]
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	4413      	add	r3, r2
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29c      	uxth	r4, r3
 8002cf2:	88ba      	ldrh	r2, [r7, #4]
 8002cf4:	883b      	ldrh	r3, [r7, #0]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	88b9      	ldrh	r1, [r7, #4]
 8002d00:	88f8      	ldrh	r0, [r7, #6]
 8002d02:	4622      	mov	r2, r4
 8002d04:	f7ff fcd0 	bl	80026a8 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002d08:	8c3b      	ldrh	r3, [r7, #32]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	733b      	strb	r3, [r7, #12]
 8002d12:	8c3b      	ldrh	r3, [r7, #32]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d1e:	4812      	ldr	r0, [pc, #72]	; (8002d68 <ILI9341_FillRectangle+0xd8>)
 8002d20:	f000 fe98 	bl	8003a54 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002d24:	883b      	ldrh	r3, [r7, #0]
 8002d26:	80bb      	strh	r3, [r7, #4]
 8002d28:	e013      	b.n	8002d52 <ILI9341_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 8002d2a:	887b      	ldrh	r3, [r7, #2]
 8002d2c:	80fb      	strh	r3, [r7, #6]
 8002d2e:	e00a      	b.n	8002d46 <ILI9341_FillRectangle+0xb6>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002d30:	f107 010c 	add.w	r1, r7, #12
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
 8002d38:	2202      	movs	r2, #2
 8002d3a:	480c      	ldr	r0, [pc, #48]	; (8002d6c <ILI9341_FillRectangle+0xdc>)
 8002d3c:	f002 f87c 	bl	8004e38 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	80fb      	strh	r3, [r7, #6]
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f1      	bne.n	8002d30 <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8002d4c:	88bb      	ldrh	r3, [r7, #4]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	80bb      	strh	r3, [r7, #4]
 8002d52:	88bb      	ldrh	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1e8      	bne.n	8002d2a <ILI9341_FillRectangle+0x9a>
        }
    }

    ILI9341_Unselect();
 8002d58:	f7ff fc3c 	bl	80025d4 <ILI9341_Unselect>
 8002d5c:	e000      	b.n	8002d60 <ILI9341_FillRectangle+0xd0>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8002d5e:	bf00      	nop
}
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40020400 	.word	0x40020400
 8002d6c:	20000300 	.word	0x20000300

08002d70 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	4603      	mov	r3, r0
 8002d78:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	23f0      	movs	r3, #240	; 0xf0
 8002d80:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d84:	2100      	movs	r1, #0
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7ff ff82 	bl	8002c90 <ILI9341_FillRectangle>
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d9e:	4802      	ldr	r0, [pc, #8]	; (8002da8 <ILI9341_TouchUnselect+0x14>)
 8002da0:	f000 fe58 	bl	8003a54 <HAL_GPIO_WritePin>
}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40020000 	.word	0x40020000

08002dac <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8002db0:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <Ringbuf_init+0x3c>)
 8002db2:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <Ringbuf_init+0x40>)
 8002db4:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <Ringbuf_init+0x44>)
 8002db8:	4a0e      	ldr	r2, [pc, #56]	; (8002df4 <Ringbuf_init+0x48>)
 8002dba:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002dbc:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <Ringbuf_init+0x4c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <Ringbuf_init+0x4c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <Ringbuf_init+0x4c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <Ringbuf_init+0x4c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0220 	orr.w	r2, r2, #32
 8002dda:	60da      	str	r2, [r3, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	2000051c 	.word	0x2000051c
 8002dec:	2000048c 	.word	0x2000048c
 8002df0:	20000520 	.word	0x20000520
 8002df4:	200004d4 	.word	0x200004d4
 8002df8:	20000444 	.word	0x20000444

08002dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e00:	480d      	ldr	r0, [pc, #52]	; (8002e38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e02:	490e      	ldr	r1, [pc, #56]	; (8002e3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e04:	4a0e      	ldr	r2, [pc, #56]	; (8002e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e08:	e002      	b.n	8002e10 <LoopCopyDataInit>

08002e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e0e:	3304      	adds	r3, #4

08002e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e14:	d3f9      	bcc.n	8002e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e16:	4a0b      	ldr	r2, [pc, #44]	; (8002e44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e18:	4c0b      	ldr	r4, [pc, #44]	; (8002e48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e1c:	e001      	b.n	8002e22 <LoopFillZerobss>

08002e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e20:	3204      	adds	r2, #4

08002e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e24:	d3fb      	bcc.n	8002e1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e26:	f7ff fa11 	bl	800224c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e2a:	f007 ff0d 	bl	800ac48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e2e:	f7fe fe69 	bl	8001b04 <main>
  bx  lr    
 8002e32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e3c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002e40:	08012250 	.word	0x08012250
  ldr r2, =_sbss
 8002e44:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002e48:	20004f48 	.word	0x20004f48

08002e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e4c:	e7fe      	b.n	8002e4c <ADC_IRQHandler>
	...

08002e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e54:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <HAL_Init+0x40>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0d      	ldr	r2, [pc, #52]	; (8002e90 <HAL_Init+0x40>)
 8002e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_Init+0x40>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <HAL_Init+0x40>)
 8002e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_Init+0x40>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a07      	ldr	r2, [pc, #28]	; (8002e90 <HAL_Init+0x40>)
 8002e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e78:	2003      	movs	r0, #3
 8002e7a:	f000 f921 	bl	80030c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e7e:	2005      	movs	r0, #5
 8002e80:	f7ff f854 	bl	8001f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e84:	f7ff f81e 	bl	8001ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40023c00 	.word	0x40023c00

08002e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_IncTick+0x20>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_IncTick+0x24>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a04      	ldr	r2, [pc, #16]	; (8002eb8 <HAL_IncTick+0x24>)
 8002ea6:	6013      	str	r3, [r2, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000030 	.word	0x20000030
 8002eb8:	20000524 	.word	0x20000524

08002ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <HAL_GetTick+0x14>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000524 	.word	0x20000524

08002ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002edc:	f7ff ffee 	bl	8002ebc <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d005      	beq.n	8002efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <HAL_Delay+0x44>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002efa:	bf00      	nop
 8002efc:	f7ff ffde 	bl	8002ebc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d8f7      	bhi.n	8002efc <HAL_Delay+0x28>
  {
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000030 	.word	0x20000030

08002f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <__NVIC_SetPriorityGrouping+0x44>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4e:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <__NVIC_SetPriorityGrouping+0x44>)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	60d3      	str	r3, [r2, #12]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <__NVIC_GetPriorityGrouping+0x18>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	0a1b      	lsrs	r3, r3, #8
 8002f6e:	f003 0307 	and.w	r3, r3, #7
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	db0b      	blt.n	8002faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	4907      	ldr	r1, [pc, #28]	; (8002fb8 <__NVIC_EnableIRQ+0x38>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	e000e100 	.word	0xe000e100

08002fbc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	db12      	blt.n	8002ff4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	f003 021f 	and.w	r2, r3, #31
 8002fd4:	490a      	ldr	r1, [pc, #40]	; (8003000 <__NVIC_DisableIRQ+0x44>)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	2001      	movs	r0, #1
 8002fde:	fa00 f202 	lsl.w	r2, r0, r2
 8002fe2:	3320      	adds	r3, #32
 8002fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002fe8:	f3bf 8f4f 	dsb	sy
}
 8002fec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002fee:	f3bf 8f6f 	isb	sy
}
 8002ff2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000e100 	.word	0xe000e100

08003004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003014:	2b00      	cmp	r3, #0
 8003016:	db0a      	blt.n	800302e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	b2da      	uxtb	r2, r3
 800301c:	490c      	ldr	r1, [pc, #48]	; (8003050 <__NVIC_SetPriority+0x4c>)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	0112      	lsls	r2, r2, #4
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	440b      	add	r3, r1
 8003028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800302c:	e00a      	b.n	8003044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4908      	ldr	r1, [pc, #32]	; (8003054 <__NVIC_SetPriority+0x50>)
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	3b04      	subs	r3, #4
 800303c:	0112      	lsls	r2, r2, #4
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	440b      	add	r3, r1
 8003042:	761a      	strb	r2, [r3, #24]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000e100 	.word	0xe000e100
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	; 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f1c3 0307 	rsb	r3, r3, #7
 8003072:	2b04      	cmp	r3, #4
 8003074:	bf28      	it	cs
 8003076:	2304      	movcs	r3, #4
 8003078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3304      	adds	r3, #4
 800307e:	2b06      	cmp	r3, #6
 8003080:	d902      	bls.n	8003088 <NVIC_EncodePriority+0x30>
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3b03      	subs	r3, #3
 8003086:	e000      	b.n	800308a <NVIC_EncodePriority+0x32>
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	f04f 32ff 	mov.w	r2, #4294967295
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43da      	mvns	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	401a      	ands	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a0:	f04f 31ff 	mov.w	r1, #4294967295
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	43d9      	mvns	r1, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	4313      	orrs	r3, r2
         );
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3724      	adds	r7, #36	; 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b07      	cmp	r3, #7
 80030cc:	d00f      	beq.n	80030ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b06      	cmp	r3, #6
 80030d2:	d00c      	beq.n	80030ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b05      	cmp	r3, #5
 80030d8:	d009      	beq.n	80030ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d006      	beq.n	80030ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d003      	beq.n	80030ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80030e6:	2190      	movs	r1, #144	; 0x90
 80030e8:	4804      	ldr	r0, [pc, #16]	; (80030fc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80030ea:	f7fe fdb8 	bl	8001c5e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ff14 	bl	8002f1c <__NVIC_SetPriorityGrouping>
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	08010480 	.word	0x08010480

08003100 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b0f      	cmp	r3, #15
 8003116:	d903      	bls.n	8003120 <HAL_NVIC_SetPriority+0x20>
 8003118:	21a8      	movs	r1, #168	; 0xa8
 800311a:	480e      	ldr	r0, [pc, #56]	; (8003154 <HAL_NVIC_SetPriority+0x54>)
 800311c:	f7fe fd9f 	bl	8001c5e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	d903      	bls.n	800312e <HAL_NVIC_SetPriority+0x2e>
 8003126:	21a9      	movs	r1, #169	; 0xa9
 8003128:	480a      	ldr	r0, [pc, #40]	; (8003154 <HAL_NVIC_SetPriority+0x54>)
 800312a:	f7fe fd98 	bl	8001c5e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800312e:	f7ff ff19 	bl	8002f64 <__NVIC_GetPriorityGrouping>
 8003132:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	6978      	ldr	r0, [r7, #20]
 800313a:	f7ff ff8d 	bl	8003058 <NVIC_EncodePriority>
 800313e:	4602      	mov	r2, r0
 8003140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003144:	4611      	mov	r1, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff ff5c 	bl	8003004 <__NVIC_SetPriority>
}
 800314c:	bf00      	nop
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	08010480 	.word	0x08010480

08003158 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	2b00      	cmp	r3, #0
 8003168:	da03      	bge.n	8003172 <HAL_NVIC_EnableIRQ+0x1a>
 800316a:	21bc      	movs	r1, #188	; 0xbc
 800316c:	4805      	ldr	r0, [pc, #20]	; (8003184 <HAL_NVIC_EnableIRQ+0x2c>)
 800316e:	f7fe fd76 	bl	8001c5e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff ff02 	bl	8002f80 <__NVIC_EnableIRQ>
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	08010480 	.word	0x08010480

08003188 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	2b00      	cmp	r3, #0
 8003198:	da03      	bge.n	80031a2 <HAL_NVIC_DisableIRQ+0x1a>
 800319a:	21cc      	movs	r1, #204	; 0xcc
 800319c:	4805      	ldr	r0, [pc, #20]	; (80031b4 <HAL_NVIC_DisableIRQ+0x2c>)
 800319e:	f7fe fd5e 	bl	8001c5e <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff08 	bl	8002fbc <__NVIC_DisableIRQ>
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	08010480 	.word	0x08010480

080031b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031c6:	f7ff fe79 	bl	8002ebc <HAL_GetTick>
 80031ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d008      	beq.n	80031ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e052      	b.n	8003290 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0216 	bic.w	r2, r2, #22
 80031f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003208:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <HAL_DMA_Abort+0x62>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0208 	bic.w	r2, r2, #8
 8003228:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323a:	e013      	b.n	8003264 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800323c:	f7ff fe3e 	bl	8002ebc <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b05      	cmp	r3, #5
 8003248:	d90c      	bls.n	8003264 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2203      	movs	r2, #3
 8003254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e015      	b.n	8003290 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1e4      	bne.n	800323c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003276:	223f      	movs	r2, #63	; 0x3f
 8003278:	409a      	lsls	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d004      	beq.n	80032b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2280      	movs	r2, #128	; 0x80
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e00c      	b.n	80032d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2205      	movs	r2, #5
 80032ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a33      	ldr	r2, [pc, #204]	; (80033c4 <HAL_GPIO_Init+0xe8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d017      	beq.n	800332a <HAL_GPIO_Init+0x4e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a32      	ldr	r2, [pc, #200]	; (80033c8 <HAL_GPIO_Init+0xec>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d013      	beq.n	800332a <HAL_GPIO_Init+0x4e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a31      	ldr	r2, [pc, #196]	; (80033cc <HAL_GPIO_Init+0xf0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00f      	beq.n	800332a <HAL_GPIO_Init+0x4e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a30      	ldr	r2, [pc, #192]	; (80033d0 <HAL_GPIO_Init+0xf4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00b      	beq.n	800332a <HAL_GPIO_Init+0x4e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a2f      	ldr	r2, [pc, #188]	; (80033d4 <HAL_GPIO_Init+0xf8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <HAL_GPIO_Init+0x4e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a2e      	ldr	r2, [pc, #184]	; (80033d8 <HAL_GPIO_Init+0xfc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x4e>
 8003322:	21ac      	movs	r1, #172	; 0xac
 8003324:	482d      	ldr	r0, [pc, #180]	; (80033dc <HAL_GPIO_Init+0x100>)
 8003326:	f7fe fc9a 	bl	8001c5e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_GPIO_Init+0x64>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_GPIO_Init+0x6c>
 8003340:	21ad      	movs	r1, #173	; 0xad
 8003342:	4826      	ldr	r0, [pc, #152]	; (80033dc <HAL_GPIO_Init+0x100>)
 8003344:	f7fe fc8b 	bl	8001c5e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d035      	beq.n	80033bc <HAL_GPIO_Init+0xe0>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d031      	beq.n	80033bc <HAL_GPIO_Init+0xe0>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b11      	cmp	r3, #17
 800335e:	d02d      	beq.n	80033bc <HAL_GPIO_Init+0xe0>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d029      	beq.n	80033bc <HAL_GPIO_Init+0xe0>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b12      	cmp	r3, #18
 800336e:	d025      	beq.n	80033bc <HAL_GPIO_Init+0xe0>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003378:	d020      	beq.n	80033bc <HAL_GPIO_Init+0xe0>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003382:	d01b      	beq.n	80033bc <HAL_GPIO_Init+0xe0>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800338c:	d016      	beq.n	80033bc <HAL_GPIO_Init+0xe0>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003396:	d011      	beq.n	80033bc <HAL_GPIO_Init+0xe0>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80033a0:	d00c      	beq.n	80033bc <HAL_GPIO_Init+0xe0>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80033aa:	d007      	beq.n	80033bc <HAL_GPIO_Init+0xe0>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0xe0>
 80033b4:	21ae      	movs	r1, #174	; 0xae
 80033b6:	4809      	ldr	r0, [pc, #36]	; (80033dc <HAL_GPIO_Init+0x100>)
 80033b8:	f7fe fc51 	bl	8001c5e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033bc:	2300      	movs	r3, #0
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	e206      	b.n	80037d0 <HAL_GPIO_Init+0x4f4>
 80033c2:	bf00      	nop
 80033c4:	40020000 	.word	0x40020000
 80033c8:	40020400 	.word	0x40020400
 80033cc:	40020800 	.word	0x40020800
 80033d0:	40020c00 	.word	0x40020c00
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40021c00 	.word	0x40021c00
 80033dc:	080104f4 	.word	0x080104f4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033e0:	2201      	movs	r2, #1
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4013      	ands	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	f040 81e6 	bne.w	80037ca <HAL_GPIO_Init+0x4ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b01      	cmp	r3, #1
 8003408:	d005      	beq.n	8003416 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003412:	2b02      	cmp	r3, #2
 8003414:	d144      	bne.n	80034a0 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00f      	beq.n	800343e <HAL_GPIO_Init+0x162>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d00b      	beq.n	800343e <HAL_GPIO_Init+0x162>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d007      	beq.n	800343e <HAL_GPIO_Init+0x162>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b03      	cmp	r3, #3
 8003434:	d003      	beq.n	800343e <HAL_GPIO_Init+0x162>
 8003436:	21c0      	movs	r1, #192	; 0xc0
 8003438:	4894      	ldr	r0, [pc, #592]	; (800368c <HAL_GPIO_Init+0x3b0>)
 800343a:	f7fe fc10 	bl	8001c5e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	2203      	movs	r2, #3
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003474:	2201      	movs	r2, #1
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 0201 	and.w	r2, r3, #1
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d027      	beq.n	80034fc <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00b      	beq.n	80034cc <HAL_GPIO_Init+0x1f0>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d007      	beq.n	80034cc <HAL_GPIO_Init+0x1f0>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d003      	beq.n	80034cc <HAL_GPIO_Init+0x1f0>
 80034c4:	21d1      	movs	r1, #209	; 0xd1
 80034c6:	4871      	ldr	r0, [pc, #452]	; (800368c <HAL_GPIO_Init+0x3b0>)
 80034c8:	f7fe fbc9 	bl	8001c5e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	2b02      	cmp	r3, #2
 8003506:	f040 8098 	bne.w	800363a <HAL_GPIO_Init+0x35e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d06f      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b0c      	cmp	r3, #12
 8003518:	d06b      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d067      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d063      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d05f      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d05b      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d057      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d053      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d04f      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d04b      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d047      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b03      	cmp	r3, #3
 8003568:	d043      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d03f      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d03b      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b04      	cmp	r3, #4
 8003580:	d037      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b04      	cmp	r3, #4
 8003588:	d033      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b04      	cmp	r3, #4
 8003590:	d02f      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b05      	cmp	r3, #5
 8003598:	d02b      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b05      	cmp	r3, #5
 80035a0:	d027      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b05      	cmp	r3, #5
 80035a8:	d023      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d01f      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b07      	cmp	r3, #7
 80035b8:	d01b      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b07      	cmp	r3, #7
 80035c0:	d017      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d013      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b09      	cmp	r3, #9
 80035d0:	d00f      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b09      	cmp	r3, #9
 80035d8:	d00b      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b0a      	cmp	r3, #10
 80035e0:	d007      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b0f      	cmp	r3, #15
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x316>
 80035ea:	21de      	movs	r1, #222	; 0xde
 80035ec:	4827      	ldr	r0, [pc, #156]	; (800368c <HAL_GPIO_Init+0x3b0>)
 80035ee:	f7fe fb36 	bl	8001c5e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	08da      	lsrs	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3208      	adds	r2, #8
 80035fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	220f      	movs	r2, #15
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	08da      	lsrs	r2, r3, #3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3208      	adds	r2, #8
 8003634:	69b9      	ldr	r1, [r7, #24]
 8003636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	2203      	movs	r2, #3
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0203 	and.w	r2, r3, #3
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80a7 	beq.w	80037ca <HAL_GPIO_Init+0x4ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <HAL_GPIO_Init+0x3b4>)
 8003682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003684:	4a02      	ldr	r2, [pc, #8]	; (8003690 <HAL_GPIO_Init+0x3b4>)
 8003686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800368a:	e003      	b.n	8003694 <HAL_GPIO_Init+0x3b8>
 800368c:	080104f4 	.word	0x080104f4
 8003690:	40023800 	.word	0x40023800
 8003694:	6453      	str	r3, [r2, #68]	; 0x44
 8003696:	4b53      	ldr	r3, [pc, #332]	; (80037e4 <HAL_GPIO_Init+0x508>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036a2:	4a51      	ldr	r2, [pc, #324]	; (80037e8 <HAL_GPIO_Init+0x50c>)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	3302      	adds	r3, #2
 80036aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	220f      	movs	r2, #15
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43db      	mvns	r3, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4013      	ands	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a48      	ldr	r2, [pc, #288]	; (80037ec <HAL_GPIO_Init+0x510>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d019      	beq.n	8003702 <HAL_GPIO_Init+0x426>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a47      	ldr	r2, [pc, #284]	; (80037f0 <HAL_GPIO_Init+0x514>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_GPIO_Init+0x422>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a46      	ldr	r2, [pc, #280]	; (80037f4 <HAL_GPIO_Init+0x518>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00d      	beq.n	80036fa <HAL_GPIO_Init+0x41e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a45      	ldr	r2, [pc, #276]	; (80037f8 <HAL_GPIO_Init+0x51c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <HAL_GPIO_Init+0x41a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a44      	ldr	r2, [pc, #272]	; (80037fc <HAL_GPIO_Init+0x520>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <HAL_GPIO_Init+0x416>
 80036ee:	2304      	movs	r3, #4
 80036f0:	e008      	b.n	8003704 <HAL_GPIO_Init+0x428>
 80036f2:	2307      	movs	r3, #7
 80036f4:	e006      	b.n	8003704 <HAL_GPIO_Init+0x428>
 80036f6:	2303      	movs	r3, #3
 80036f8:	e004      	b.n	8003704 <HAL_GPIO_Init+0x428>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e002      	b.n	8003704 <HAL_GPIO_Init+0x428>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_GPIO_Init+0x428>
 8003702:	2300      	movs	r3, #0
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	f002 0203 	and.w	r2, r2, #3
 800370a:	0092      	lsls	r2, r2, #2
 800370c:	4093      	lsls	r3, r2
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4313      	orrs	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003714:	4934      	ldr	r1, [pc, #208]	; (80037e8 <HAL_GPIO_Init+0x50c>)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	3302      	adds	r3, #2
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003722:	4b37      	ldr	r3, [pc, #220]	; (8003800 <HAL_GPIO_Init+0x524>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x46a>
        {
          temp |= iocurrent;
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003746:	4a2e      	ldr	r2, [pc, #184]	; (8003800 <HAL_GPIO_Init+0x524>)
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800374c:	4b2c      	ldr	r3, [pc, #176]	; (8003800 <HAL_GPIO_Init+0x524>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x494>
        {
          temp |= iocurrent;
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003770:	4a23      	ldr	r2, [pc, #140]	; (8003800 <HAL_GPIO_Init+0x524>)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003776:	4b22      	ldr	r3, [pc, #136]	; (8003800 <HAL_GPIO_Init+0x524>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	43db      	mvns	r3, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4013      	ands	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x4be>
        {
          temp |= iocurrent;
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800379a:	4a19      	ldr	r2, [pc, #100]	; (8003800 <HAL_GPIO_Init+0x524>)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037a0:	4b17      	ldr	r3, [pc, #92]	; (8003800 <HAL_GPIO_Init+0x524>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x4e8>
        {
          temp |= iocurrent;
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037c4:	4a0e      	ldr	r2, [pc, #56]	; (8003800 <HAL_GPIO_Init+0x524>)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3301      	adds	r3, #1
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b0f      	cmp	r3, #15
 80037d4:	f67f ae04 	bls.w	80033e0 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40013800 	.word	0x40013800
 80037ec:	40020000 	.word	0x40020000
 80037f0:	40020400 	.word	0x40020400
 80037f4:	40020800 	.word	0x40020800
 80037f8:	40020c00 	.word	0x40020c00
 80037fc:	40021000 	.word	0x40021000
 8003800:	40013c00 	.word	0x40013c00

08003804 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a71      	ldr	r2, [pc, #452]	; (80039e4 <HAL_GPIO_DeInit+0x1e0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d018      	beq.n	8003854 <HAL_GPIO_DeInit+0x50>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a70      	ldr	r2, [pc, #448]	; (80039e8 <HAL_GPIO_DeInit+0x1e4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d014      	beq.n	8003854 <HAL_GPIO_DeInit+0x50>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a6f      	ldr	r2, [pc, #444]	; (80039ec <HAL_GPIO_DeInit+0x1e8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d010      	beq.n	8003854 <HAL_GPIO_DeInit+0x50>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a6e      	ldr	r2, [pc, #440]	; (80039f0 <HAL_GPIO_DeInit+0x1ec>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00c      	beq.n	8003854 <HAL_GPIO_DeInit+0x50>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a6d      	ldr	r2, [pc, #436]	; (80039f4 <HAL_GPIO_DeInit+0x1f0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d008      	beq.n	8003854 <HAL_GPIO_DeInit+0x50>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a6c      	ldr	r2, [pc, #432]	; (80039f8 <HAL_GPIO_DeInit+0x1f4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_GPIO_DeInit+0x50>
 800384a:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800384e:	486b      	ldr	r0, [pc, #428]	; (80039fc <HAL_GPIO_DeInit+0x1f8>)
 8003850:	f7fe fa05 	bl	8001c5e <assert_failed>
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	e0bb      	b.n	80039d2 <HAL_GPIO_DeInit+0x1ce>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800385a:	2201      	movs	r2, #1
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4013      	ands	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	429a      	cmp	r2, r3
 8003872:	f040 80ab 	bne.w	80039cc <HAL_GPIO_DeInit+0x1c8>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003876:	4a62      	ldr	r2, [pc, #392]	; (8003a00 <HAL_GPIO_DeInit+0x1fc>)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	3302      	adds	r3, #2
 800387e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003882:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	220f      	movs	r2, #15
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	4013      	ands	r3, r2
 8003896:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a52      	ldr	r2, [pc, #328]	; (80039e4 <HAL_GPIO_DeInit+0x1e0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d019      	beq.n	80038d4 <HAL_GPIO_DeInit+0xd0>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a51      	ldr	r2, [pc, #324]	; (80039e8 <HAL_GPIO_DeInit+0x1e4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_GPIO_DeInit+0xcc>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a50      	ldr	r2, [pc, #320]	; (80039ec <HAL_GPIO_DeInit+0x1e8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00d      	beq.n	80038cc <HAL_GPIO_DeInit+0xc8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a4f      	ldr	r2, [pc, #316]	; (80039f0 <HAL_GPIO_DeInit+0x1ec>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d007      	beq.n	80038c8 <HAL_GPIO_DeInit+0xc4>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a4e      	ldr	r2, [pc, #312]	; (80039f4 <HAL_GPIO_DeInit+0x1f0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d101      	bne.n	80038c4 <HAL_GPIO_DeInit+0xc0>
 80038c0:	2304      	movs	r3, #4
 80038c2:	e008      	b.n	80038d6 <HAL_GPIO_DeInit+0xd2>
 80038c4:	2307      	movs	r3, #7
 80038c6:	e006      	b.n	80038d6 <HAL_GPIO_DeInit+0xd2>
 80038c8:	2303      	movs	r3, #3
 80038ca:	e004      	b.n	80038d6 <HAL_GPIO_DeInit+0xd2>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e002      	b.n	80038d6 <HAL_GPIO_DeInit+0xd2>
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_GPIO_DeInit+0xd2>
 80038d4:	2300      	movs	r3, #0
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	f002 0203 	and.w	r2, r2, #3
 80038dc:	0092      	lsls	r2, r2, #2
 80038de:	4093      	lsls	r3, r2
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d132      	bne.n	800394c <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80038e6:	4b47      	ldr	r3, [pc, #284]	; (8003a04 <HAL_GPIO_DeInit+0x200>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	4945      	ldr	r1, [pc, #276]	; (8003a04 <HAL_GPIO_DeInit+0x200>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80038f4:	4b43      	ldr	r3, [pc, #268]	; (8003a04 <HAL_GPIO_DeInit+0x200>)
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	4941      	ldr	r1, [pc, #260]	; (8003a04 <HAL_GPIO_DeInit+0x200>)
 80038fe:	4013      	ands	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003902:	4b40      	ldr	r3, [pc, #256]	; (8003a04 <HAL_GPIO_DeInit+0x200>)
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	43db      	mvns	r3, r3
 800390a:	493e      	ldr	r1, [pc, #248]	; (8003a04 <HAL_GPIO_DeInit+0x200>)
 800390c:	4013      	ands	r3, r2
 800390e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003910:	4b3c      	ldr	r3, [pc, #240]	; (8003a04 <HAL_GPIO_DeInit+0x200>)
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	43db      	mvns	r3, r3
 8003918:	493a      	ldr	r1, [pc, #232]	; (8003a04 <HAL_GPIO_DeInit+0x200>)
 800391a:	4013      	ands	r3, r2
 800391c:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	220f      	movs	r2, #15
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800392e:	4a34      	ldr	r2, [pc, #208]	; (8003a00 <HAL_GPIO_DeInit+0x1fc>)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	089b      	lsrs	r3, r3, #2
 8003934:	3302      	adds	r3, #2
 8003936:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	43da      	mvns	r2, r3
 800393e:	4830      	ldr	r0, [pc, #192]	; (8003a00 <HAL_GPIO_DeInit+0x1fc>)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	089b      	lsrs	r3, r3, #2
 8003944:	400a      	ands	r2, r1
 8003946:	3302      	adds	r3, #2
 8003948:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	2103      	movs	r1, #3
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	401a      	ands	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	08da      	lsrs	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	220f      	movs	r2, #15
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	08d2      	lsrs	r2, r2, #3
 8003982:	4019      	ands	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3208      	adds	r2, #8
 8003988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	2103      	movs	r1, #3
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	401a      	ands	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	2101      	movs	r1, #1
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	401a      	ands	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	2103      	movs	r1, #3
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	401a      	ands	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3301      	adds	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b0f      	cmp	r3, #15
 80039d6:	f67f af40 	bls.w	800385a <HAL_GPIO_DeInit+0x56>
    }
  }
}
 80039da:	bf00      	nop
 80039dc:	bf00      	nop
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40020000 	.word	0x40020000
 80039e8:	40020400 	.word	0x40020400
 80039ec:	40020800 	.word	0x40020800
 80039f0:	40020c00 	.word	0x40020c00
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40021c00 	.word	0x40021c00
 80039fc:	080104f4 	.word	0x080104f4
 8003a00:	40013800 	.word	0x40013800
 8003a04:	40013c00 	.word	0x40013c00

08003a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003a14:	887b      	ldrh	r3, [r7, #2]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d004      	beq.n	8003a24 <HAL_GPIO_ReadPin+0x1c>
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	041b      	lsls	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <HAL_GPIO_ReadPin+0x26>
 8003a24:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8003a28:	4809      	ldr	r0, [pc, #36]	; (8003a50 <HAL_GPIO_ReadPin+0x48>)
 8003a2a:	f7fe f918 	bl	8001c5e <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
 8003a3e:	e001      	b.n	8003a44 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	080104f4 	.word	0x080104f4

08003a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	807b      	strh	r3, [r7, #2]
 8003a60:	4613      	mov	r3, r2
 8003a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003a64:	887b      	ldrh	r3, [r7, #2]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <HAL_GPIO_WritePin+0x20>
 8003a6a:	887b      	ldrh	r3, [r7, #2]
 8003a6c:	0c1b      	lsrs	r3, r3, #16
 8003a6e:	041b      	lsls	r3, r3, #16
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d004      	beq.n	8003a7e <HAL_GPIO_WritePin+0x2a>
 8003a74:	f240 119d 	movw	r1, #413	; 0x19d
 8003a78:	480e      	ldr	r0, [pc, #56]	; (8003ab4 <HAL_GPIO_WritePin+0x60>)
 8003a7a:	f7fe f8f0 	bl	8001c5e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003a7e:	787b      	ldrb	r3, [r7, #1]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <HAL_GPIO_WritePin+0x40>
 8003a84:	787b      	ldrb	r3, [r7, #1]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d004      	beq.n	8003a94 <HAL_GPIO_WritePin+0x40>
 8003a8a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003a8e:	4809      	ldr	r0, [pc, #36]	; (8003ab4 <HAL_GPIO_WritePin+0x60>)
 8003a90:	f7fe f8e5 	bl	8001c5e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003a94:	787b      	ldrb	r3, [r7, #1]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a9a:	887a      	ldrh	r2, [r7, #2]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003aa0:	e003      	b.n	8003aaa <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aa2:	887b      	ldrh	r3, [r7, #2]
 8003aa4:	041a      	lsls	r2, r3, #16
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	619a      	str	r2, [r3, #24]
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	080104f4 	.word	0x080104f4

08003ab8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ac2:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d006      	beq.n	8003adc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ace:	4a05      	ldr	r2, [pc, #20]	; (8003ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd fe5c 	bl	8001794 <HAL_GPIO_EXTI_Callback>
  }
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40013c00 	.word	0x40013c00

08003ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e1bd      	b.n	8003e76 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a93      	ldr	r2, [pc, #588]	; (8003d4c <HAL_I2C_Init+0x264>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00e      	beq.n	8003b22 <HAL_I2C_Init+0x3a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a91      	ldr	r2, [pc, #580]	; (8003d50 <HAL_I2C_Init+0x268>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <HAL_I2C_Init+0x3a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a90      	ldr	r2, [pc, #576]	; (8003d54 <HAL_I2C_Init+0x26c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d004      	beq.n	8003b22 <HAL_I2C_Init+0x3a>
 8003b18:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8003b1c:	488e      	ldr	r0, [pc, #568]	; (8003d58 <HAL_I2C_Init+0x270>)
 8003b1e:	f7fe f89e 	bl	8001c5e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d004      	beq.n	8003b34 <HAL_I2C_Init+0x4c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4a8b      	ldr	r2, [pc, #556]	; (8003d5c <HAL_I2C_Init+0x274>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d904      	bls.n	8003b3e <HAL_I2C_Init+0x56>
 8003b34:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003b38:	4887      	ldr	r0, [pc, #540]	; (8003d58 <HAL_I2C_Init+0x270>)
 8003b3a:	f7fe f890 	bl	8001c5e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_I2C_Init+0x72>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b4e:	d004      	beq.n	8003b5a <HAL_I2C_Init+0x72>
 8003b50:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003b54:	4880      	ldr	r0, [pc, #512]	; (8003d58 <HAL_I2C_Init+0x270>)
 8003b56:	f7fe f882 	bl	8001c5e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b62:	f023 0303 	bic.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <HAL_I2C_Init+0x8c>
 8003b6a:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003b6e:	487a      	ldr	r0, [pc, #488]	; (8003d58 <HAL_I2C_Init+0x270>)
 8003b70:	f7fe f875 	bl	8001c5e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b7c:	d009      	beq.n	8003b92 <HAL_I2C_Init+0xaa>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b86:	d004      	beq.n	8003b92 <HAL_I2C_Init+0xaa>
 8003b88:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003b8c:	4872      	ldr	r0, [pc, #456]	; (8003d58 <HAL_I2C_Init+0x270>)
 8003b8e:	f7fe f866 	bl	8001c5e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_I2C_Init+0xc4>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d004      	beq.n	8003bac <HAL_I2C_Init+0xc4>
 8003ba2:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003ba6:	486c      	ldr	r0, [pc, #432]	; (8003d58 <HAL_I2C_Init+0x270>)
 8003ba8:	f7fe f859 	bl	8001c5e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d004      	beq.n	8003bc2 <HAL_I2C_Init+0xda>
 8003bb8:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003bbc:	4866      	ldr	r0, [pc, #408]	; (8003d58 <HAL_I2C_Init+0x270>)
 8003bbe:	f7fe f84e 	bl	8001c5e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d008      	beq.n	8003bdc <HAL_I2C_Init+0xf4>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d004      	beq.n	8003bdc <HAL_I2C_Init+0xf4>
 8003bd2:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003bd6:	4860      	ldr	r0, [pc, #384]	; (8003d58 <HAL_I2C_Init+0x270>)
 8003bd8:	f7fe f841 	bl	8001c5e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_I2C_Init+0x10e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	2b80      	cmp	r3, #128	; 0x80
 8003bea:	d004      	beq.n	8003bf6 <HAL_I2C_Init+0x10e>
 8003bec:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003bf0:	4859      	ldr	r0, [pc, #356]	; (8003d58 <HAL_I2C_Init+0x270>)
 8003bf2:	f7fe f834 	bl	8001c5e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fd ff32 	bl	8001a74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2224      	movs	r2, #36	; 0x24
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c48:	f000 febc 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8003c4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4a43      	ldr	r2, [pc, #268]	; (8003d60 <HAL_I2C_Init+0x278>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d807      	bhi.n	8003c68 <HAL_I2C_Init+0x180>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4a42      	ldr	r2, [pc, #264]	; (8003d64 <HAL_I2C_Init+0x27c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	bf94      	ite	ls
 8003c60:	2301      	movls	r3, #1
 8003c62:	2300      	movhi	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e006      	b.n	8003c76 <HAL_I2C_Init+0x18e>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a3f      	ldr	r2, [pc, #252]	; (8003d68 <HAL_I2C_Init+0x280>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	bf94      	ite	ls
 8003c70:	2301      	movls	r3, #1
 8003c72:	2300      	movhi	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0fb      	b.n	8003e76 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4a3a      	ldr	r2, [pc, #232]	; (8003d6c <HAL_I2C_Init+0x284>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0c9b      	lsrs	r3, r3, #18
 8003c88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4a2c      	ldr	r2, [pc, #176]	; (8003d60 <HAL_I2C_Init+0x278>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d802      	bhi.n	8003cb8 <HAL_I2C_Init+0x1d0>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	e009      	b.n	8003ccc <HAL_I2C_Init+0x1e4>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	4a2b      	ldr	r2, [pc, #172]	; (8003d70 <HAL_I2C_Init+0x288>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	099b      	lsrs	r3, r3, #6
 8003cca:	3301      	adds	r3, #1
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	491e      	ldr	r1, [pc, #120]	; (8003d60 <HAL_I2C_Init+0x278>)
 8003ce8:	428b      	cmp	r3, r1
 8003cea:	d819      	bhi.n	8003d20 <HAL_I2C_Init+0x238>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1e59      	subs	r1, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cfa:	1c59      	adds	r1, r3, #1
 8003cfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d00:	400b      	ands	r3, r1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_I2C_Init+0x234>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1e59      	subs	r1, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d14:	3301      	adds	r3, #1
 8003d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1a:	e065      	b.n	8003de8 <HAL_I2C_Init+0x300>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	e063      	b.n	8003de8 <HAL_I2C_Init+0x300>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d125      	bne.n	8003d74 <HAL_I2C_Init+0x28c>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e58      	subs	r0, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	440b      	add	r3, r1
 8003d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	e026      	b.n	8003d9a <HAL_I2C_Init+0x2b2>
 8003d4c:	40005400 	.word	0x40005400
 8003d50:	40005800 	.word	0x40005800
 8003d54:	40005c00 	.word	0x40005c00
 8003d58:	08010568 	.word	0x08010568
 8003d5c:	00061a80 	.word	0x00061a80
 8003d60:	000186a0 	.word	0x000186a0
 8003d64:	001e847f 	.word	0x001e847f
 8003d68:	003d08ff 	.word	0x003d08ff
 8003d6c:	431bde83 	.word	0x431bde83
 8003d70:	10624dd3 	.word	0x10624dd3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1e58      	subs	r0, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	0099      	lsls	r1, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_I2C_Init+0x2ba>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e022      	b.n	8003de8 <HAL_I2C_Init+0x300>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10e      	bne.n	8003dc8 <HAL_I2C_Init+0x2e0>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1e58      	subs	r0, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6859      	ldr	r1, [r3, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	440b      	add	r3, r1
 8003db8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc6:	e00f      	b.n	8003de8 <HAL_I2C_Init+0x300>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1e58      	subs	r0, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	0099      	lsls	r1, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dde:	3301      	adds	r3, #1
 8003de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	6809      	ldr	r1, [r1, #0]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6911      	ldr	r1, [r2, #16]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68d2      	ldr	r2, [r2, #12]
 8003e22:	4311      	orrs	r1, r2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6812      	ldr	r2, [r2, #0]
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop

08003e80 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003e90:	f000 f808 	bl	8003ea4 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003e94:	4b02      	ldr	r3, [pc, #8]	; (8003ea0 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003e96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e9a:	615a      	str	r2, [r3, #20]
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40013c00 	.word	0x40013c00

08003ea4 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e314      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b0f      	cmp	r3, #15
 8003ecc:	d903      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x22>
 8003ece:	21e6      	movs	r1, #230	; 0xe6
 8003ed0:	4897      	ldr	r0, [pc, #604]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003ed2:	f7fd fec4 	bl	8001c5e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 8088 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00d      	beq.n	8003f08 <HAL_RCC_OscConfig+0x54>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef4:	d008      	beq.n	8003f08 <HAL_RCC_OscConfig+0x54>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003efe:	d003      	beq.n	8003f08 <HAL_RCC_OscConfig+0x54>
 8003f00:	21eb      	movs	r1, #235	; 0xeb
 8003f02:	488b      	ldr	r0, [pc, #556]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8003f04:	f7fd feab 	bl	8001c5e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f08:	4b8a      	ldr	r3, [pc, #552]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 030c 	and.w	r3, r3, #12
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d00c      	beq.n	8003f2e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f14:	4b87      	ldr	r3, [pc, #540]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d112      	bne.n	8003f46 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f20:	4b84      	ldr	r3, [pc, #528]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f2c:	d10b      	bne.n	8003f46 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2e:	4b81      	ldr	r3, [pc, #516]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d05b      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x13e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d157      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e2d4      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCC_OscConfig+0xaa>
 8003f50:	4b78      	ldr	r3, [pc, #480]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a77      	ldr	r2, [pc, #476]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	e01d      	b.n	8003f9a <HAL_RCC_OscConfig+0xe6>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f66:	d10c      	bne.n	8003f82 <HAL_RCC_OscConfig+0xce>
 8003f68:	4b72      	ldr	r3, [pc, #456]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a71      	ldr	r2, [pc, #452]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003f6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	4b6f      	ldr	r3, [pc, #444]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a6e      	ldr	r2, [pc, #440]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	e00b      	b.n	8003f9a <HAL_RCC_OscConfig+0xe6>
 8003f82:	4b6c      	ldr	r3, [pc, #432]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a6b      	ldr	r2, [pc, #428]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	4b69      	ldr	r3, [pc, #420]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a68      	ldr	r2, [pc, #416]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d013      	beq.n	8003fca <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7fe ff8b 	bl	8002ebc <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003faa:	f7fe ff87 	bl	8002ebc <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b64      	cmp	r3, #100	; 0x64
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e299      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fbc:	4b5d      	ldr	r3, [pc, #372]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0xf6>
 8003fc8:	e014      	b.n	8003ff4 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fca:	f7fe ff77 	bl	8002ebc <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd2:	f7fe ff73 	bl	8002ebc <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b64      	cmp	r3, #100	; 0x64
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e285      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe4:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f0      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x11e>
 8003ff0:	e000      	b.n	8003ff4 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d079      	beq.n	80040f4 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_RCC_OscConfig+0x166>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d004      	beq.n	800401a <HAL_RCC_OscConfig+0x166>
 8004010:	f240 111d 	movw	r1, #285	; 0x11d
 8004014:	4846      	ldr	r0, [pc, #280]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8004016:	f7fd fe22 	bl	8001c5e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b1f      	cmp	r3, #31
 8004020:	d904      	bls.n	800402c <HAL_RCC_OscConfig+0x178>
 8004022:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004026:	4842      	ldr	r0, [pc, #264]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8004028:	f7fd fe19 	bl	8001c5e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800402c:	4b41      	ldr	r3, [pc, #260]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 030c 	and.w	r3, r3, #12
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00b      	beq.n	8004050 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004038:	4b3e      	ldr	r3, [pc, #248]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004040:	2b08      	cmp	r3, #8
 8004042:	d11c      	bne.n	800407e <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004044:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d116      	bne.n	800407e <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004050:	4b38      	ldr	r3, [pc, #224]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_RCC_OscConfig+0x1b4>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d001      	beq.n	8004068 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e243      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004068:	4b32      	ldr	r3, [pc, #200]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	492f      	ldr	r1, [pc, #188]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 8004078:	4313      	orrs	r3, r2
 800407a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407c:	e03a      	b.n	80040f4 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d020      	beq.n	80040c8 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004086:	4b2c      	ldr	r3, [pc, #176]	; (8004138 <HAL_RCC_OscConfig+0x284>)
 8004088:	2201      	movs	r2, #1
 800408a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fe ff16 	bl	8002ebc <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004094:	f7fe ff12 	bl	8002ebc <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e224      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a6:	4b23      	ldr	r3, [pc, #140]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b2:	4b20      	ldr	r3, [pc, #128]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	491c      	ldr	r1, [pc, #112]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]
 80040c6:	e015      	b.n	80040f4 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c8:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <HAL_RCC_OscConfig+0x284>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7fe fef5 	bl	8002ebc <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d6:	f7fe fef1 	bl	8002ebc <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e203      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e8:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_RCC_OscConfig+0x280>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f0      	bne.n	80040d6 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d045      	beq.n	800418c <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_RCC_OscConfig+0x266>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d004      	beq.n	800411a <HAL_RCC_OscConfig+0x266>
 8004110:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004114:	4806      	ldr	r0, [pc, #24]	; (8004130 <HAL_RCC_OscConfig+0x27c>)
 8004116:	f7fd fda2 	bl	8001c5e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01e      	beq.n	8004160 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_RCC_OscConfig+0x288>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fe fec8 	bl	8002ebc <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412e:	e010      	b.n	8004152 <HAL_RCC_OscConfig+0x29e>
 8004130:	080105dc 	.word	0x080105dc
 8004134:	40023800 	.word	0x40023800
 8004138:	42470000 	.word	0x42470000
 800413c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004140:	f7fe febc 	bl	8002ebc <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e1ce      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004152:	4b5e      	ldr	r3, [pc, #376]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 8004154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x28c>
 800415e:	e015      	b.n	800418c <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004160:	4b5b      	ldr	r3, [pc, #364]	; (80042d0 <HAL_RCC_OscConfig+0x41c>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004166:	f7fe fea9 	bl	8002ebc <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800416e:	f7fe fea5 	bl	8002ebc <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e1b7      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004180:	4b52      	ldr	r3, [pc, #328]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 8004182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f0      	bne.n	800416e <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80b0 	beq.w	80042fa <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00c      	beq.n	80041c0 <HAL_RCC_OscConfig+0x30c>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d008      	beq.n	80041c0 <HAL_RCC_OscConfig+0x30c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b05      	cmp	r3, #5
 80041b4:	d004      	beq.n	80041c0 <HAL_RCC_OscConfig+0x30c>
 80041b6:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80041ba:	4846      	ldr	r0, [pc, #280]	; (80042d4 <HAL_RCC_OscConfig+0x420>)
 80041bc:	f7fd fd4f 	bl	8001c5e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c0:	4b42      	ldr	r3, [pc, #264]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10f      	bne.n	80041ec <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041cc:	2300      	movs	r3, #0
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	4b3e      	ldr	r3, [pc, #248]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	4a3d      	ldr	r2, [pc, #244]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 80041d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041da:	6413      	str	r3, [r2, #64]	; 0x40
 80041dc:	4b3b      	ldr	r3, [pc, #236]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ec:	4b3a      	ldr	r3, [pc, #232]	; (80042d8 <HAL_RCC_OscConfig+0x424>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d118      	bne.n	800422a <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f8:	4b37      	ldr	r3, [pc, #220]	; (80042d8 <HAL_RCC_OscConfig+0x424>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a36      	ldr	r2, [pc, #216]	; (80042d8 <HAL_RCC_OscConfig+0x424>)
 80041fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004202:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004204:	f7fe fe5a 	bl	8002ebc <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420c:	f7fe fe56 	bl	8002ebc <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e168      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421e:	4b2e      	ldr	r3, [pc, #184]	; (80042d8 <HAL_RCC_OscConfig+0x424>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d106      	bne.n	8004240 <HAL_RCC_OscConfig+0x38c>
 8004232:	4b26      	ldr	r3, [pc, #152]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	4a25      	ldr	r2, [pc, #148]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	6713      	str	r3, [r2, #112]	; 0x70
 800423e:	e01c      	b.n	800427a <HAL_RCC_OscConfig+0x3c6>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b05      	cmp	r3, #5
 8004246:	d10c      	bne.n	8004262 <HAL_RCC_OscConfig+0x3ae>
 8004248:	4b20      	ldr	r3, [pc, #128]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 800424a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424c:	4a1f      	ldr	r2, [pc, #124]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 800424e:	f043 0304 	orr.w	r3, r3, #4
 8004252:	6713      	str	r3, [r2, #112]	; 0x70
 8004254:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 8004256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004258:	4a1c      	ldr	r2, [pc, #112]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	6713      	str	r3, [r2, #112]	; 0x70
 8004260:	e00b      	b.n	800427a <HAL_RCC_OscConfig+0x3c6>
 8004262:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	4a19      	ldr	r2, [pc, #100]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	6713      	str	r3, [r2, #112]	; 0x70
 800426e:	4b17      	ldr	r3, [pc, #92]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	4a16      	ldr	r2, [pc, #88]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 8004274:	f023 0304 	bic.w	r3, r3, #4
 8004278:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d015      	beq.n	80042ae <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004282:	f7fe fe1b 	bl	8002ebc <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004288:	e00a      	b.n	80042a0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428a:	f7fe fe17 	bl	8002ebc <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	f241 3288 	movw	r2, #5000	; 0x1388
 8004298:	4293      	cmp	r3, r2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e127      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <HAL_RCC_OscConfig+0x418>)
 80042a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ee      	beq.n	800428a <HAL_RCC_OscConfig+0x3d6>
 80042ac:	e01c      	b.n	80042e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ae:	f7fe fe05 	bl	8002ebc <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b4:	e012      	b.n	80042dc <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b6:	f7fe fe01 	bl	8002ebc <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d909      	bls.n	80042dc <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e111      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
 80042cc:	40023800 	.word	0x40023800
 80042d0:	42470e80 	.word	0x42470e80
 80042d4:	080105dc 	.word	0x080105dc
 80042d8:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042dc:	4b86      	ldr	r3, [pc, #536]	; (80044f8 <HAL_RCC_OscConfig+0x644>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e6      	bne.n	80042b6 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d105      	bne.n	80042fa <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ee:	4b82      	ldr	r3, [pc, #520]	; (80044f8 <HAL_RCC_OscConfig+0x644>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	4a81      	ldr	r2, [pc, #516]	; (80044f8 <HAL_RCC_OscConfig+0x644>)
 80042f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00c      	beq.n	800431c <HAL_RCC_OscConfig+0x468>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d008      	beq.n	800431c <HAL_RCC_OscConfig+0x468>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d004      	beq.n	800431c <HAL_RCC_OscConfig+0x468>
 8004312:	f240 11cd 	movw	r1, #461	; 0x1cd
 8004316:	4879      	ldr	r0, [pc, #484]	; (80044fc <HAL_RCC_OscConfig+0x648>)
 8004318:	f7fd fca1 	bl	8001c5e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80e4 	beq.w	80044ee <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004326:	4b74      	ldr	r3, [pc, #464]	; (80044f8 <HAL_RCC_OscConfig+0x644>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	2b08      	cmp	r3, #8
 8004330:	f000 80a5 	beq.w	800447e <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b02      	cmp	r3, #2
 800433a:	f040 8089 	bne.w	8004450 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <HAL_RCC_OscConfig+0x4a6>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434e:	d004      	beq.n	800435a <HAL_RCC_OscConfig+0x4a6>
 8004350:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004354:	4869      	ldr	r0, [pc, #420]	; (80044fc <HAL_RCC_OscConfig+0x648>)
 8004356:	f7fd fc82 	bl	8001c5e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	2b3f      	cmp	r3, #63	; 0x3f
 8004360:	d904      	bls.n	800436c <HAL_RCC_OscConfig+0x4b8>
 8004362:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004366:	4865      	ldr	r0, [pc, #404]	; (80044fc <HAL_RCC_OscConfig+0x648>)
 8004368:	f7fd fc79 	bl	8001c5e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	2b31      	cmp	r3, #49	; 0x31
 8004372:	d904      	bls.n	800437e <HAL_RCC_OscConfig+0x4ca>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800437c:	d904      	bls.n	8004388 <HAL_RCC_OscConfig+0x4d4>
 800437e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004382:	485e      	ldr	r0, [pc, #376]	; (80044fc <HAL_RCC_OscConfig+0x648>)
 8004384:	f7fd fc6b 	bl	8001c5e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	2b02      	cmp	r3, #2
 800438e:	d010      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4fe>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	2b04      	cmp	r3, #4
 8004396:	d00c      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4fe>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	2b06      	cmp	r3, #6
 800439e:	d008      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4fe>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d004      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4fe>
 80043a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80043ac:	4853      	ldr	r0, [pc, #332]	; (80044fc <HAL_RCC_OscConfig+0x648>)
 80043ae:	f7fd fc56 	bl	8001c5e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d903      	bls.n	80043c2 <HAL_RCC_OscConfig+0x50e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043be:	2b0f      	cmp	r3, #15
 80043c0:	d904      	bls.n	80043cc <HAL_RCC_OscConfig+0x518>
 80043c2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80043c6:	484d      	ldr	r0, [pc, #308]	; (80044fc <HAL_RCC_OscConfig+0x648>)
 80043c8:	f7fd fc49 	bl	8001c5e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043cc:	4b4c      	ldr	r3, [pc, #304]	; (8004500 <HAL_RCC_OscConfig+0x64c>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d2:	f7fe fd73 	bl	8002ebc <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043da:	f7fe fd6f 	bl	8002ebc <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e081      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ec:	4b42      	ldr	r3, [pc, #264]	; (80044f8 <HAL_RCC_OscConfig+0x644>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f0      	bne.n	80043da <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69da      	ldr	r2, [r3, #28]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	019b      	lsls	r3, r3, #6
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	3b01      	subs	r3, #1
 8004412:	041b      	lsls	r3, r3, #16
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	061b      	lsls	r3, r3, #24
 800441c:	4936      	ldr	r1, [pc, #216]	; (80044f8 <HAL_RCC_OscConfig+0x644>)
 800441e:	4313      	orrs	r3, r2
 8004420:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004422:	4b37      	ldr	r3, [pc, #220]	; (8004500 <HAL_RCC_OscConfig+0x64c>)
 8004424:	2201      	movs	r2, #1
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fe fd48 	bl	8002ebc <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004430:	f7fe fd44 	bl	8002ebc <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e056      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004442:	4b2d      	ldr	r3, [pc, #180]	; (80044f8 <HAL_RCC_OscConfig+0x644>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x57c>
 800444e:	e04e      	b.n	80044ee <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004450:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_RCC_OscConfig+0x64c>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004456:	f7fe fd31 	bl	8002ebc <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800445e:	f7fe fd2d 	bl	8002ebc <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e03f      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004470:	4b21      	ldr	r3, [pc, #132]	; (80044f8 <HAL_RCC_OscConfig+0x644>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x5aa>
 800447c:	e037      	b.n	80044ee <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e032      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800448a:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_RCC_OscConfig+0x644>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d028      	beq.n	80044ea <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d121      	bne.n	80044ea <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d11a      	bne.n	80044ea <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044ba:	4013      	ands	r3, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d111      	bne.n	80044ea <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	3b01      	subs	r3, #1
 80044d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d107      	bne.n	80044ea <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d001      	beq.n	80044ee <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	080105dc 	.word	0x080105dc
 8004500:	42470060 	.word	0x42470060

08004504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e174      	b.n	8004802 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_RCC_ClockConfig+0x24>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b0f      	cmp	r3, #15
 8004526:	d904      	bls.n	8004532 <HAL_RCC_ClockConfig+0x2e>
 8004528:	f240 215a 	movw	r1, #602	; 0x25a
 800452c:	487b      	ldr	r0, [pc, #492]	; (800471c <HAL_RCC_ClockConfig+0x218>)
 800452e:	f7fd fb96 	bl	8001c5e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d019      	beq.n	800456c <HAL_RCC_ClockConfig+0x68>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d016      	beq.n	800456c <HAL_RCC_ClockConfig+0x68>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d013      	beq.n	800456c <HAL_RCC_ClockConfig+0x68>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b03      	cmp	r3, #3
 8004548:	d010      	beq.n	800456c <HAL_RCC_ClockConfig+0x68>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b04      	cmp	r3, #4
 800454e:	d00d      	beq.n	800456c <HAL_RCC_ClockConfig+0x68>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b05      	cmp	r3, #5
 8004554:	d00a      	beq.n	800456c <HAL_RCC_ClockConfig+0x68>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b06      	cmp	r3, #6
 800455a:	d007      	beq.n	800456c <HAL_RCC_ClockConfig+0x68>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b07      	cmp	r3, #7
 8004560:	d004      	beq.n	800456c <HAL_RCC_ClockConfig+0x68>
 8004562:	f240 215b 	movw	r1, #603	; 0x25b
 8004566:	486d      	ldr	r0, [pc, #436]	; (800471c <HAL_RCC_ClockConfig+0x218>)
 8004568:	f7fd fb79 	bl	8001c5e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800456c:	4b6c      	ldr	r3, [pc, #432]	; (8004720 <HAL_RCC_ClockConfig+0x21c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d90c      	bls.n	8004594 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b69      	ldr	r3, [pc, #420]	; (8004720 <HAL_RCC_ClockConfig+0x21c>)
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b67      	ldr	r3, [pc, #412]	; (8004720 <HAL_RCC_ClockConfig+0x21c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e136      	b.n	8004802 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d049      	beq.n	8004634 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045ac:	4b5d      	ldr	r3, [pc, #372]	; (8004724 <HAL_RCC_ClockConfig+0x220>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4a5c      	ldr	r2, [pc, #368]	; (8004724 <HAL_RCC_ClockConfig+0x220>)
 80045b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045c4:	4b57      	ldr	r3, [pc, #348]	; (8004724 <HAL_RCC_ClockConfig+0x220>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4a56      	ldr	r2, [pc, #344]	; (8004724 <HAL_RCC_ClockConfig+0x220>)
 80045ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d024      	beq.n	8004622 <HAL_RCC_ClockConfig+0x11e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b80      	cmp	r3, #128	; 0x80
 80045de:	d020      	beq.n	8004622 <HAL_RCC_ClockConfig+0x11e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b90      	cmp	r3, #144	; 0x90
 80045e6:	d01c      	beq.n	8004622 <HAL_RCC_ClockConfig+0x11e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2ba0      	cmp	r3, #160	; 0xa0
 80045ee:	d018      	beq.n	8004622 <HAL_RCC_ClockConfig+0x11e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2bb0      	cmp	r3, #176	; 0xb0
 80045f6:	d014      	beq.n	8004622 <HAL_RCC_ClockConfig+0x11e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2bc0      	cmp	r3, #192	; 0xc0
 80045fe:	d010      	beq.n	8004622 <HAL_RCC_ClockConfig+0x11e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2bd0      	cmp	r3, #208	; 0xd0
 8004606:	d00c      	beq.n	8004622 <HAL_RCC_ClockConfig+0x11e>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2be0      	cmp	r3, #224	; 0xe0
 800460e:	d008      	beq.n	8004622 <HAL_RCC_ClockConfig+0x11e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2bf0      	cmp	r3, #240	; 0xf0
 8004616:	d004      	beq.n	8004622 <HAL_RCC_ClockConfig+0x11e>
 8004618:	f240 217e 	movw	r1, #638	; 0x27e
 800461c:	483f      	ldr	r0, [pc, #252]	; (800471c <HAL_RCC_ClockConfig+0x218>)
 800461e:	f7fd fb1e 	bl	8001c5e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004622:	4b40      	ldr	r3, [pc, #256]	; (8004724 <HAL_RCC_ClockConfig+0x220>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	493d      	ldr	r1, [pc, #244]	; (8004724 <HAL_RCC_ClockConfig+0x220>)
 8004630:	4313      	orrs	r3, r2
 8004632:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d059      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d010      	beq.n	800466a <HAL_RCC_ClockConfig+0x166>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d00c      	beq.n	800466a <HAL_RCC_ClockConfig+0x166>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d008      	beq.n	800466a <HAL_RCC_ClockConfig+0x166>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b03      	cmp	r3, #3
 800465e:	d004      	beq.n	800466a <HAL_RCC_ClockConfig+0x166>
 8004660:	f240 2185 	movw	r1, #645	; 0x285
 8004664:	482d      	ldr	r0, [pc, #180]	; (800471c <HAL_RCC_ClockConfig+0x218>)
 8004666:	f7fd fafa 	bl	8001c5e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d107      	bne.n	8004682 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004672:	4b2c      	ldr	r3, [pc, #176]	; (8004724 <HAL_RCC_ClockConfig+0x220>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d119      	bne.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e0bf      	b.n	8004802 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d003      	beq.n	8004692 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800468e:	2b03      	cmp	r3, #3
 8004690:	d107      	bne.n	80046a2 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004692:	4b24      	ldr	r3, [pc, #144]	; (8004724 <HAL_RCC_ClockConfig+0x220>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e0af      	b.n	8004802 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a2:	4b20      	ldr	r3, [pc, #128]	; (8004724 <HAL_RCC_ClockConfig+0x220>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e0a7      	b.n	8004802 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046b2:	4b1c      	ldr	r3, [pc, #112]	; (8004724 <HAL_RCC_ClockConfig+0x220>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f023 0203 	bic.w	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4919      	ldr	r1, [pc, #100]	; (8004724 <HAL_RCC_ClockConfig+0x220>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046c4:	f7fe fbfa 	bl	8002ebc <HAL_GetTick>
 80046c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046cc:	f7fe fbf6 	bl	8002ebc <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e08f      	b.n	8004802 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e2:	4b10      	ldr	r3, [pc, #64]	; (8004724 <HAL_RCC_ClockConfig+0x220>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 020c 	and.w	r2, r3, #12
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d1eb      	bne.n	80046cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046f4:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <HAL_RCC_ClockConfig+0x21c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d212      	bcs.n	8004728 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004702:	4b07      	ldr	r3, [pc, #28]	; (8004720 <HAL_RCC_ClockConfig+0x21c>)
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCC_ClockConfig+0x21c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d007      	beq.n	8004728 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e072      	b.n	8004802 <HAL_RCC_ClockConfig+0x2fe>
 800471c:	080105dc 	.word	0x080105dc
 8004720:	40023c00 	.word	0x40023c00
 8004724:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d025      	beq.n	8004780 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d018      	beq.n	800476e <HAL_RCC_ClockConfig+0x26a>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004744:	d013      	beq.n	800476e <HAL_RCC_ClockConfig+0x26a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800474e:	d00e      	beq.n	800476e <HAL_RCC_ClockConfig+0x26a>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004758:	d009      	beq.n	800476e <HAL_RCC_ClockConfig+0x26a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004762:	d004      	beq.n	800476e <HAL_RCC_ClockConfig+0x26a>
 8004764:	f240 21c3 	movw	r1, #707	; 0x2c3
 8004768:	4828      	ldr	r0, [pc, #160]	; (800480c <HAL_RCC_ClockConfig+0x308>)
 800476a:	f7fd fa78 	bl	8001c5e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800476e:	4b28      	ldr	r3, [pc, #160]	; (8004810 <HAL_RCC_ClockConfig+0x30c>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	4925      	ldr	r1, [pc, #148]	; (8004810 <HAL_RCC_ClockConfig+0x30c>)
 800477c:	4313      	orrs	r3, r2
 800477e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d026      	beq.n	80047da <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d018      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x2c2>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479c:	d013      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x2c2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047a6:	d00e      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x2c2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80047b0:	d009      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x2c2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80047ba:	d004      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x2c2>
 80047bc:	f240 21ca 	movw	r1, #714	; 0x2ca
 80047c0:	4812      	ldr	r0, [pc, #72]	; (800480c <HAL_RCC_ClockConfig+0x308>)
 80047c2:	f7fd fa4c 	bl	8001c5e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047c6:	4b12      	ldr	r3, [pc, #72]	; (8004810 <HAL_RCC_ClockConfig+0x30c>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	490e      	ldr	r1, [pc, #56]	; (8004810 <HAL_RCC_ClockConfig+0x30c>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047da:	f000 f821 	bl	8004820 <HAL_RCC_GetSysClockFreq>
 80047de:	4602      	mov	r2, r0
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <HAL_RCC_ClockConfig+0x30c>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	490a      	ldr	r1, [pc, #40]	; (8004814 <HAL_RCC_ClockConfig+0x310>)
 80047ec:	5ccb      	ldrb	r3, [r1, r3]
 80047ee:	fa22 f303 	lsr.w	r3, r2, r3
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <HAL_RCC_ClockConfig+0x314>)
 80047f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047f6:	4b09      	ldr	r3, [pc, #36]	; (800481c <HAL_RCC_ClockConfig+0x318>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fd fb96 	bl	8001f2c <HAL_InitTick>

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	080105dc 	.word	0x080105dc
 8004810:	40023800 	.word	0x40023800
 8004814:	08010888 	.word	0x08010888
 8004818:	20000018 	.word	0x20000018
 800481c:	2000002c 	.word	0x2000002c

08004820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004824:	b090      	sub	sp, #64	; 0x40
 8004826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	637b      	str	r3, [r7, #52]	; 0x34
 800482c:	2300      	movs	r3, #0
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004830:	2300      	movs	r3, #0
 8004832:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004838:	4b59      	ldr	r3, [pc, #356]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 030c 	and.w	r3, r3, #12
 8004840:	2b08      	cmp	r3, #8
 8004842:	d00d      	beq.n	8004860 <HAL_RCC_GetSysClockFreq+0x40>
 8004844:	2b08      	cmp	r3, #8
 8004846:	f200 80a1 	bhi.w	800498c <HAL_RCC_GetSysClockFreq+0x16c>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_RCC_GetSysClockFreq+0x34>
 800484e:	2b04      	cmp	r3, #4
 8004850:	d003      	beq.n	800485a <HAL_RCC_GetSysClockFreq+0x3a>
 8004852:	e09b      	b.n	800498c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004854:	4b53      	ldr	r3, [pc, #332]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004856:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004858:	e09b      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800485a:	4b53      	ldr	r3, [pc, #332]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800485c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800485e:	e098      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004860:	4b4f      	ldr	r3, [pc, #316]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800486a:	4b4d      	ldr	r3, [pc, #308]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d028      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004876:	4b4a      	ldr	r3, [pc, #296]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	2200      	movs	r2, #0
 800487e:	623b      	str	r3, [r7, #32]
 8004880:	627a      	str	r2, [r7, #36]	; 0x24
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004888:	2100      	movs	r1, #0
 800488a:	4b47      	ldr	r3, [pc, #284]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800488c:	fb03 f201 	mul.w	r2, r3, r1
 8004890:	2300      	movs	r3, #0
 8004892:	fb00 f303 	mul.w	r3, r0, r3
 8004896:	4413      	add	r3, r2
 8004898:	4a43      	ldr	r2, [pc, #268]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800489a:	fba0 1202 	umull	r1, r2, r0, r2
 800489e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048a0:	460a      	mov	r2, r1
 80048a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80048a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048a6:	4413      	add	r3, r2
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ac:	2200      	movs	r2, #0
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	61fa      	str	r2, [r7, #28]
 80048b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80048ba:	f7fc f9ed 	bl	8000c98 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4613      	mov	r3, r2
 80048c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c6:	e053      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c8:	4b35      	ldr	r3, [pc, #212]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	099b      	lsrs	r3, r3, #6
 80048ce:	2200      	movs	r2, #0
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	617a      	str	r2, [r7, #20]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048da:	f04f 0b00 	mov.w	fp, #0
 80048de:	4652      	mov	r2, sl
 80048e0:	465b      	mov	r3, fp
 80048e2:	f04f 0000 	mov.w	r0, #0
 80048e6:	f04f 0100 	mov.w	r1, #0
 80048ea:	0159      	lsls	r1, r3, #5
 80048ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048f0:	0150      	lsls	r0, r2, #5
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	ebb2 080a 	subs.w	r8, r2, sl
 80048fa:	eb63 090b 	sbc.w	r9, r3, fp
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800490a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800490e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004912:	ebb2 0408 	subs.w	r4, r2, r8
 8004916:	eb63 0509 	sbc.w	r5, r3, r9
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	00eb      	lsls	r3, r5, #3
 8004924:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004928:	00e2      	lsls	r2, r4, #3
 800492a:	4614      	mov	r4, r2
 800492c:	461d      	mov	r5, r3
 800492e:	eb14 030a 	adds.w	r3, r4, sl
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	eb45 030b 	adc.w	r3, r5, fp
 8004938:	607b      	str	r3, [r7, #4]
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004946:	4629      	mov	r1, r5
 8004948:	028b      	lsls	r3, r1, #10
 800494a:	4621      	mov	r1, r4
 800494c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004950:	4621      	mov	r1, r4
 8004952:	028a      	lsls	r2, r1, #10
 8004954:	4610      	mov	r0, r2
 8004956:	4619      	mov	r1, r3
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	2200      	movs	r2, #0
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	60fa      	str	r2, [r7, #12]
 8004960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004964:	f7fc f998 	bl	8000c98 <__aeabi_uldivmod>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4613      	mov	r3, r2
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	3301      	adds	r3, #1
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004980:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004984:	fbb2 f3f3 	udiv	r3, r2, r3
 8004988:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800498a:	e002      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800498e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004994:	4618      	mov	r0, r3
 8004996:	3740      	adds	r7, #64	; 0x40
 8004998:	46bd      	mov	sp, r7
 800499a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800
 80049a4:	00f42400 	.word	0x00f42400
 80049a8:	017d7840 	.word	0x017d7840

080049ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b0:	4b03      	ldr	r3, [pc, #12]	; (80049c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049b2:	681b      	ldr	r3, [r3, #0]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000018 	.word	0x20000018

080049c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049c8:	f7ff fff0 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	0a9b      	lsrs	r3, r3, #10
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4903      	ldr	r1, [pc, #12]	; (80049e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40023800 	.word	0x40023800
 80049e8:	08010898 	.word	0x08010898

080049ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049f0:	f7ff ffdc 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	0b5b      	lsrs	r3, r3, #13
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	4903      	ldr	r1, [pc, #12]	; (8004a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	08010898 	.word	0x08010898

08004a14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	220f      	movs	r2, #15
 8004a22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a24:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <HAL_RCC_GetClockConfig+0x5c>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0203 	and.w	r2, r3, #3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a30:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <HAL_RCC_GetClockConfig+0x5c>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <HAL_RCC_GetClockConfig+0x5c>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a48:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <HAL_RCC_GetClockConfig+0x5c>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	08db      	lsrs	r3, r3, #3
 8004a4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a56:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <HAL_RCC_GetClockConfig+0x60>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0207 	and.w	r2, r3, #7
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	601a      	str	r2, [r3, #0]
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800
 8004a74:	40023c00 	.word	0x40023c00

08004a78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e184      	b.n	8004d94 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a72      	ldr	r2, [pc, #456]	; (8004c58 <HAL_SPI_Init+0x1e0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d013      	beq.n	8004abc <HAL_SPI_Init+0x44>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a70      	ldr	r2, [pc, #448]	; (8004c5c <HAL_SPI_Init+0x1e4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00e      	beq.n	8004abc <HAL_SPI_Init+0x44>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a6f      	ldr	r2, [pc, #444]	; (8004c60 <HAL_SPI_Init+0x1e8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d009      	beq.n	8004abc <HAL_SPI_Init+0x44>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a6d      	ldr	r2, [pc, #436]	; (8004c64 <HAL_SPI_Init+0x1ec>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d004      	beq.n	8004abc <HAL_SPI_Init+0x44>
 8004ab2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004ab6:	486c      	ldr	r0, [pc, #432]	; (8004c68 <HAL_SPI_Init+0x1f0>)
 8004ab8:	f7fd f8d1 	bl	8001c5e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d009      	beq.n	8004ad8 <HAL_SPI_Init+0x60>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004acc:	d004      	beq.n	8004ad8 <HAL_SPI_Init+0x60>
 8004ace:	f240 1141 	movw	r1, #321	; 0x141
 8004ad2:	4865      	ldr	r0, [pc, #404]	; (8004c68 <HAL_SPI_Init+0x1f0>)
 8004ad4:	f7fd f8c3 	bl	8001c5e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00e      	beq.n	8004afe <HAL_SPI_Init+0x86>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae8:	d009      	beq.n	8004afe <HAL_SPI_Init+0x86>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af2:	d004      	beq.n	8004afe <HAL_SPI_Init+0x86>
 8004af4:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004af8:	485b      	ldr	r0, [pc, #364]	; (8004c68 <HAL_SPI_Init+0x1f0>)
 8004afa:	f7fd f8b0 	bl	8001c5e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b06:	d008      	beq.n	8004b1a <HAL_SPI_Init+0xa2>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d004      	beq.n	8004b1a <HAL_SPI_Init+0xa2>
 8004b10:	f240 1143 	movw	r1, #323	; 0x143
 8004b14:	4854      	ldr	r0, [pc, #336]	; (8004c68 <HAL_SPI_Init+0x1f0>)
 8004b16:	f7fd f8a2 	bl	8001c5e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b22:	d00d      	beq.n	8004b40 <HAL_SPI_Init+0xc8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d009      	beq.n	8004b40 <HAL_SPI_Init+0xc8>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b34:	d004      	beq.n	8004b40 <HAL_SPI_Init+0xc8>
 8004b36:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004b3a:	484b      	ldr	r0, [pc, #300]	; (8004c68 <HAL_SPI_Init+0x1f0>)
 8004b3c:	f7fd f88f 	bl	8001c5e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d020      	beq.n	8004b8a <HAL_SPI_Init+0x112>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d01c      	beq.n	8004b8a <HAL_SPI_Init+0x112>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	2b10      	cmp	r3, #16
 8004b56:	d018      	beq.n	8004b8a <HAL_SPI_Init+0x112>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	2b18      	cmp	r3, #24
 8004b5e:	d014      	beq.n	8004b8a <HAL_SPI_Init+0x112>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d010      	beq.n	8004b8a <HAL_SPI_Init+0x112>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	2b28      	cmp	r3, #40	; 0x28
 8004b6e:	d00c      	beq.n	8004b8a <HAL_SPI_Init+0x112>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	2b30      	cmp	r3, #48	; 0x30
 8004b76:	d008      	beq.n	8004b8a <HAL_SPI_Init+0x112>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	2b38      	cmp	r3, #56	; 0x38
 8004b7e:	d004      	beq.n	8004b8a <HAL_SPI_Init+0x112>
 8004b80:	f240 1145 	movw	r1, #325	; 0x145
 8004b84:	4838      	ldr	r0, [pc, #224]	; (8004c68 <HAL_SPI_Init+0x1f0>)
 8004b86:	f7fd f86a 	bl	8001c5e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <HAL_SPI_Init+0x12c>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	2b80      	cmp	r3, #128	; 0x80
 8004b98:	d004      	beq.n	8004ba4 <HAL_SPI_Init+0x12c>
 8004b9a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004b9e:	4832      	ldr	r0, [pc, #200]	; (8004c68 <HAL_SPI_Init+0x1f0>)
 8004ba0:	f7fd f85d 	bl	8001c5e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <HAL_SPI_Init+0x146>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d004      	beq.n	8004bbe <HAL_SPI_Init+0x146>
 8004bb4:	f240 1147 	movw	r1, #327	; 0x147
 8004bb8:	482b      	ldr	r0, [pc, #172]	; (8004c68 <HAL_SPI_Init+0x1f0>)
 8004bba:	f7fd f850 	bl	8001c5e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d152      	bne.n	8004c6c <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_SPI_Init+0x168>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d004      	beq.n	8004be0 <HAL_SPI_Init+0x168>
 8004bd6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004bda:	4823      	ldr	r0, [pc, #140]	; (8004c68 <HAL_SPI_Init+0x1f0>)
 8004bdc:	f7fd f83f 	bl	8001c5e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d008      	beq.n	8004bfa <HAL_SPI_Init+0x182>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d004      	beq.n	8004bfa <HAL_SPI_Init+0x182>
 8004bf0:	f240 114b 	movw	r1, #331	; 0x14b
 8004bf4:	481c      	ldr	r0, [pc, #112]	; (8004c68 <HAL_SPI_Init+0x1f0>)
 8004bf6:	f7fd f832 	bl	8001c5e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c02:	d125      	bne.n	8004c50 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d05a      	beq.n	8004cc2 <HAL_SPI_Init+0x24a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d056      	beq.n	8004cc2 <HAL_SPI_Init+0x24a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d052      	beq.n	8004cc2 <HAL_SPI_Init+0x24a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	2b18      	cmp	r3, #24
 8004c22:	d04e      	beq.n	8004cc2 <HAL_SPI_Init+0x24a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d04a      	beq.n	8004cc2 <HAL_SPI_Init+0x24a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	2b28      	cmp	r3, #40	; 0x28
 8004c32:	d046      	beq.n	8004cc2 <HAL_SPI_Init+0x24a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	2b30      	cmp	r3, #48	; 0x30
 8004c3a:	d042      	beq.n	8004cc2 <HAL_SPI_Init+0x24a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	2b38      	cmp	r3, #56	; 0x38
 8004c42:	d03e      	beq.n	8004cc2 <HAL_SPI_Init+0x24a>
 8004c44:	f240 114f 	movw	r1, #335	; 0x14f
 8004c48:	4807      	ldr	r0, [pc, #28]	; (8004c68 <HAL_SPI_Init+0x1f0>)
 8004c4a:	f7fd f808 	bl	8001c5e <assert_failed>
 8004c4e:	e038      	b.n	8004cc2 <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	61da      	str	r2, [r3, #28]
 8004c56:	e034      	b.n	8004cc2 <HAL_SPI_Init+0x24a>
 8004c58:	40013000 	.word	0x40013000
 8004c5c:	40003800 	.word	0x40003800
 8004c60:	40003c00 	.word	0x40003c00
 8004c64:	40013400 	.word	0x40013400
 8004c68:	08010650 	.word	0x08010650
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <HAL_SPI_Init+0x23e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d01c      	beq.n	8004cb6 <HAL_SPI_Init+0x23e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d018      	beq.n	8004cb6 <HAL_SPI_Init+0x23e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	2b18      	cmp	r3, #24
 8004c8a:	d014      	beq.n	8004cb6 <HAL_SPI_Init+0x23e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d010      	beq.n	8004cb6 <HAL_SPI_Init+0x23e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	2b28      	cmp	r3, #40	; 0x28
 8004c9a:	d00c      	beq.n	8004cb6 <HAL_SPI_Init+0x23e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	2b30      	cmp	r3, #48	; 0x30
 8004ca2:	d008      	beq.n	8004cb6 <HAL_SPI_Init+0x23e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	2b38      	cmp	r3, #56	; 0x38
 8004caa:	d004      	beq.n	8004cb6 <HAL_SPI_Init+0x23e>
 8004cac:	f240 1159 	movw	r1, #345	; 0x159
 8004cb0:	483a      	ldr	r0, [pc, #232]	; (8004d9c <HAL_SPI_Init+0x324>)
 8004cb2:	f7fc ffd4 	bl	8001c5e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d106      	bne.n	8004ce2 <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7fd f835 	bl	8001d4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d46:	ea42 0103 	orr.w	r1, r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	0c1b      	lsrs	r3, r3, #16
 8004d60:	f003 0104 	and.w	r1, r3, #4
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	f003 0210 	and.w	r2, r3, #16
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69da      	ldr	r2, [r3, #28]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	08010650 	.word	0x08010650

08004da0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e033      	b.n	8004e1a <HAL_SPI_DeInit+0x7a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a1b      	ldr	r2, [pc, #108]	; (8004e24 <HAL_SPI_DeInit+0x84>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d013      	beq.n	8004de4 <HAL_SPI_DeInit+0x44>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a19      	ldr	r2, [pc, #100]	; (8004e28 <HAL_SPI_DeInit+0x88>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00e      	beq.n	8004de4 <HAL_SPI_DeInit+0x44>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <HAL_SPI_DeInit+0x8c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d009      	beq.n	8004de4 <HAL_SPI_DeInit+0x44>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a16      	ldr	r2, [pc, #88]	; (8004e30 <HAL_SPI_DeInit+0x90>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <HAL_SPI_DeInit+0x44>
 8004dda:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8004dde:	4815      	ldr	r0, [pc, #84]	; (8004e34 <HAL_SPI_DeInit+0x94>)
 8004de0:	f7fc ff3d 	bl	8001c5e <assert_failed>

  hspi->State = HAL_SPI_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7fd f82b 	bl	8001e58 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40013000 	.word	0x40013000
 8004e28:	40003800 	.word	0x40003800
 8004e2c:	40003c00 	.word	0x40003c00
 8004e30:	40013400 	.word	0x40013400
 8004e34:	08010650 	.word	0x08010650

08004e38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	4613      	mov	r3, r2
 8004e46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d009      	beq.n	8004e68 <HAL_SPI_Transmit+0x30>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e5c:	d004      	beq.n	8004e68 <HAL_SPI_Transmit+0x30>
 8004e5e:	f44f 7142 	mov.w	r1, #776	; 0x308
 8004e62:	4880      	ldr	r0, [pc, #512]	; (8005064 <HAL_SPI_Transmit+0x22c>)
 8004e64:	f7fc fefb 	bl	8001c5e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_SPI_Transmit+0x3e>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e128      	b.n	80050c8 <HAL_SPI_Transmit+0x290>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e7e:	f7fe f81d 	bl	8002ebc <HAL_GetTick>
 8004e82:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e84:	88fb      	ldrh	r3, [r7, #6]
 8004e86:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d002      	beq.n	8004e9a <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8004e94:	2302      	movs	r3, #2
 8004e96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e98:	e10d      	b.n	80050b6 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_SPI_Transmit+0x6e>
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d102      	bne.n	8004eac <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004eaa:	e104      	b.n	80050b6 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2203      	movs	r2, #3
 8004eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	88fa      	ldrh	r2, [r7, #6]
 8004ec4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	88fa      	ldrh	r2, [r7, #6]
 8004eca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef2:	d10f      	bne.n	8004f14 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b40      	cmp	r3, #64	; 0x40
 8004f20:	d007      	beq.n	8004f32 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3a:	d14b      	bne.n	8004fd4 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <HAL_SPI_Transmit+0x112>
 8004f44:	8afb      	ldrh	r3, [r7, #22]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d13e      	bne.n	8004fc8 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	881a      	ldrh	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	1c9a      	adds	r2, r3, #2
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f6e:	e02b      	b.n	8004fc8 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d112      	bne.n	8004fa4 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	881a      	ldrh	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	1c9a      	adds	r2, r3, #2
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fa2:	e011      	b.n	8004fc8 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fa4:	f7fd ff8a 	bl	8002ebc <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d803      	bhi.n	8004fbc <HAL_SPI_Transmit+0x184>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d102      	bne.n	8004fc2 <HAL_SPI_Transmit+0x18a>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d102      	bne.n	8004fc8 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fc6:	e076      	b.n	80050b6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1ce      	bne.n	8004f70 <HAL_SPI_Transmit+0x138>
 8004fd2:	e04e      	b.n	8005072 <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <HAL_SPI_Transmit+0x1aa>
 8004fdc:	8afb      	ldrh	r3, [r7, #22]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d142      	bne.n	8005068 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	330c      	adds	r3, #12
 8004fec:	7812      	ldrb	r2, [r2, #0]
 8004fee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005008:	e02e      	b.n	8005068 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b02      	cmp	r3, #2
 8005016:	d113      	bne.n	8005040 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	330c      	adds	r3, #12
 8005022:	7812      	ldrb	r2, [r2, #0]
 8005024:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	86da      	strh	r2, [r3, #54]	; 0x36
 800503e:	e013      	b.n	8005068 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005040:	f7fd ff3c 	bl	8002ebc <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d803      	bhi.n	8005058 <HAL_SPI_Transmit+0x220>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005056:	d102      	bne.n	800505e <HAL_SPI_Transmit+0x226>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d104      	bne.n	8005068 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005062:	e028      	b.n	80050b6 <HAL_SPI_Transmit+0x27e>
 8005064:	08010650 	.word	0x08010650
    while (hspi->TxXferCount > 0U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1cb      	bne.n	800500a <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f9d0 	bl	800541c <SPI_EndRxTxTransaction>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2220      	movs	r2, #32
 8005086:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005090:	2300      	movs	r3, #0
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	77fb      	strb	r3, [r7, #31]
 80050b2:	e000      	b.n	80050b6 <HAL_SPI_Transmit+0x27e>
  }

error:
 80050b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3720      	adds	r7, #32
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	099b      	lsrs	r3, r3, #6
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10f      	bne.n	8005114 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	099b      	lsrs	r3, r3, #6
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d004      	beq.n	8005114 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	4798      	blx	r3
    return;
 8005112:	e0d7      	b.n	80052c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <HAL_SPI_IRQHandler+0x66>
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	09db      	lsrs	r3, r3, #7
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	4798      	blx	r3
    return;
 8005134:	e0c6      	b.n	80052c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	095b      	lsrs	r3, r3, #5
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10c      	bne.n	800515c <HAL_SPI_IRQHandler+0x8c>
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	099b      	lsrs	r3, r3, #6
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	0a1b      	lsrs	r3, r3, #8
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 80b4 	beq.w	80052c4 <HAL_SPI_IRQHandler+0x1f4>
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 80ad 	beq.w	80052c4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	099b      	lsrs	r3, r3, #6
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d023      	beq.n	80051be <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b03      	cmp	r3, #3
 8005180:	d011      	beq.n	80051a6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005186:	f043 0204 	orr.w	r2, r3, #4
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	e00b      	b.n	80051be <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051a6:	2300      	movs	r3, #0
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	693b      	ldr	r3, [r7, #16]
        return;
 80051bc:	e082      	b.n	80052c4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ce:	f043 0201 	orr.w	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	0a1b      	lsrs	r3, r3, #8
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00c      	beq.n	800521a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005204:	f043 0208 	orr.w	r2, r3, #8
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800520c:	2300      	movs	r3, #0
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521e:	2b00      	cmp	r3, #0
 8005220:	d04f      	beq.n	80052c2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005230:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <HAL_SPI_IRQHandler+0x17e>
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d034      	beq.n	80052b8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0203 	bic.w	r2, r2, #3
 800525c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005262:	2b00      	cmp	r3, #0
 8005264:	d011      	beq.n	800528a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526a:	4a18      	ldr	r2, [pc, #96]	; (80052cc <HAL_SPI_IRQHandler+0x1fc>)
 800526c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005272:	4618      	mov	r0, r3
 8005274:	f7fe f810 	bl	8003298 <HAL_DMA_Abort_IT>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d005      	beq.n	800528a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005282:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528e:	2b00      	cmp	r3, #0
 8005290:	d016      	beq.n	80052c0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005296:	4a0d      	ldr	r2, [pc, #52]	; (80052cc <HAL_SPI_IRQHandler+0x1fc>)
 8005298:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fd fffa 	bl	8003298 <HAL_DMA_Abort_IT>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80052b6:	e003      	b.n	80052c0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f809 	bl	80052d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80052be:	e000      	b.n	80052c2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80052c0:	bf00      	nop
    return;
 80052c2:	bf00      	nop
  }
}
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	080052e5 	.word	0x080052e5

080052d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f7ff ffe6 	bl	80052d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005304:	bf00      	nop
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800531c:	f7fd fdce 	bl	8002ebc <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005324:	1a9b      	subs	r3, r3, r2
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	4413      	add	r3, r2
 800532a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800532c:	f7fd fdc6 	bl	8002ebc <HAL_GetTick>
 8005330:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005332:	4b39      	ldr	r3, [pc, #228]	; (8005418 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	015b      	lsls	r3, r3, #5
 8005338:	0d1b      	lsrs	r3, r3, #20
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	fb02 f303 	mul.w	r3, r2, r3
 8005340:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005342:	e054      	b.n	80053ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534a:	d050      	beq.n	80053ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800534c:	f7fd fdb6 	bl	8002ebc <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	429a      	cmp	r2, r3
 800535a:	d902      	bls.n	8005362 <SPI_WaitFlagStateUntilTimeout+0x56>
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d13d      	bne.n	80053de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005370:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800537a:	d111      	bne.n	80053a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005384:	d004      	beq.n	8005390 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800538e:	d107      	bne.n	80053a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a8:	d10f      	bne.n	80053ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e017      	b.n	800540e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4013      	ands	r3, r2
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	bf0c      	ite	eq
 80053fe:	2301      	moveq	r3, #1
 8005400:	2300      	movne	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	429a      	cmp	r2, r3
 800540a:	d19b      	bne.n	8005344 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20000018 	.word	0x20000018

0800541c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005428:	4b1b      	ldr	r3, [pc, #108]	; (8005498 <SPI_EndRxTxTransaction+0x7c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1b      	ldr	r2, [pc, #108]	; (800549c <SPI_EndRxTxTransaction+0x80>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	0d5b      	lsrs	r3, r3, #21
 8005434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005438:	fb02 f303 	mul.w	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005446:	d112      	bne.n	800546e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2200      	movs	r2, #0
 8005450:	2180      	movs	r1, #128	; 0x80
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7ff ff5a 	bl	800530c <SPI_WaitFlagStateUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d016      	beq.n	800548c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	f043 0220 	orr.w	r2, r3, #32
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e00f      	b.n	800548e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	3b01      	subs	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d0f2      	beq.n	800546e <SPI_EndRxTxTransaction+0x52>
 8005488:	e000      	b.n	800548c <SPI_EndRxTxTransaction+0x70>
        break;
 800548a:	bf00      	nop
  }

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000018 	.word	0x20000018
 800549c:	165e9f81 	.word	0x165e9f81

080054a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e0a7      	b.n	8005602 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a55      	ldr	r2, [pc, #340]	; (800560c <HAL_TIM_Base_Init+0x16c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d027      	beq.n	800550c <HAL_TIM_Base_Init+0x6c>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c4:	d022      	beq.n	800550c <HAL_TIM_Base_Init+0x6c>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a51      	ldr	r2, [pc, #324]	; (8005610 <HAL_TIM_Base_Init+0x170>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d01d      	beq.n	800550c <HAL_TIM_Base_Init+0x6c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a4f      	ldr	r2, [pc, #316]	; (8005614 <HAL_TIM_Base_Init+0x174>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d018      	beq.n	800550c <HAL_TIM_Base_Init+0x6c>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a4e      	ldr	r2, [pc, #312]	; (8005618 <HAL_TIM_Base_Init+0x178>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d013      	beq.n	800550c <HAL_TIM_Base_Init+0x6c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a4c      	ldr	r2, [pc, #304]	; (800561c <HAL_TIM_Base_Init+0x17c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00e      	beq.n	800550c <HAL_TIM_Base_Init+0x6c>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a4b      	ldr	r2, [pc, #300]	; (8005620 <HAL_TIM_Base_Init+0x180>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d009      	beq.n	800550c <HAL_TIM_Base_Init+0x6c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a49      	ldr	r2, [pc, #292]	; (8005624 <HAL_TIM_Base_Init+0x184>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d004      	beq.n	800550c <HAL_TIM_Base_Init+0x6c>
 8005502:	f240 1113 	movw	r1, #275	; 0x113
 8005506:	4848      	ldr	r0, [pc, #288]	; (8005628 <HAL_TIM_Base_Init+0x188>)
 8005508:	f7fc fba9 	bl	8001c5e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d014      	beq.n	800553e <HAL_TIM_Base_Init+0x9e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b10      	cmp	r3, #16
 800551a:	d010      	beq.n	800553e <HAL_TIM_Base_Init+0x9e>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b20      	cmp	r3, #32
 8005522:	d00c      	beq.n	800553e <HAL_TIM_Base_Init+0x9e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	2b40      	cmp	r3, #64	; 0x40
 800552a:	d008      	beq.n	800553e <HAL_TIM_Base_Init+0x9e>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	2b60      	cmp	r3, #96	; 0x60
 8005532:	d004      	beq.n	800553e <HAL_TIM_Base_Init+0x9e>
 8005534:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005538:	483b      	ldr	r0, [pc, #236]	; (8005628 <HAL_TIM_Base_Init+0x188>)
 800553a:	f7fc fb90 	bl	8001c5e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00e      	beq.n	8005564 <HAL_TIM_Base_Init+0xc4>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554e:	d009      	beq.n	8005564 <HAL_TIM_Base_Init+0xc4>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005558:	d004      	beq.n	8005564 <HAL_TIM_Base_Init+0xc4>
 800555a:	f240 1115 	movw	r1, #277	; 0x115
 800555e:	4832      	ldr	r0, [pc, #200]	; (8005628 <HAL_TIM_Base_Init+0x188>)
 8005560:	f7fc fb7d 	bl	8001c5e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d008      	beq.n	800557e <HAL_TIM_Base_Init+0xde>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	2b80      	cmp	r3, #128	; 0x80
 8005572:	d004      	beq.n	800557e <HAL_TIM_Base_Init+0xde>
 8005574:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005578:	482b      	ldr	r0, [pc, #172]	; (8005628 <HAL_TIM_Base_Init+0x188>)
 800557a:	f7fc fb70 	bl	8001c5e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fc fe90 	bl	80022b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3304      	adds	r3, #4
 80055a8:	4619      	mov	r1, r3
 80055aa:	4610      	mov	r0, r2
 80055ac:	f000 fa00 	bl	80059b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	40010000 	.word	0x40010000
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40000c00 	.word	0x40000c00
 800561c:	40014000 	.word	0x40014000
 8005620:	40014400 	.word	0x40014400
 8005624:	40014800 	.word	0x40014800
 8005628:	080106c4 	.word	0x080106c4

0800562c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a3d      	ldr	r2, [pc, #244]	; (8005730 <HAL_TIM_Base_Start_IT+0x104>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d027      	beq.n	800568e <HAL_TIM_Base_Start_IT+0x62>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005646:	d022      	beq.n	800568e <HAL_TIM_Base_Start_IT+0x62>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a39      	ldr	r2, [pc, #228]	; (8005734 <HAL_TIM_Base_Start_IT+0x108>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d01d      	beq.n	800568e <HAL_TIM_Base_Start_IT+0x62>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a38      	ldr	r2, [pc, #224]	; (8005738 <HAL_TIM_Base_Start_IT+0x10c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d018      	beq.n	800568e <HAL_TIM_Base_Start_IT+0x62>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a36      	ldr	r2, [pc, #216]	; (800573c <HAL_TIM_Base_Start_IT+0x110>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d013      	beq.n	800568e <HAL_TIM_Base_Start_IT+0x62>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a35      	ldr	r2, [pc, #212]	; (8005740 <HAL_TIM_Base_Start_IT+0x114>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00e      	beq.n	800568e <HAL_TIM_Base_Start_IT+0x62>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a33      	ldr	r2, [pc, #204]	; (8005744 <HAL_TIM_Base_Start_IT+0x118>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d009      	beq.n	800568e <HAL_TIM_Base_Start_IT+0x62>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a32      	ldr	r2, [pc, #200]	; (8005748 <HAL_TIM_Base_Start_IT+0x11c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d004      	beq.n	800568e <HAL_TIM_Base_Start_IT+0x62>
 8005684:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005688:	4830      	ldr	r0, [pc, #192]	; (800574c <HAL_TIM_Base_Start_IT+0x120>)
 800568a:	f7fc fae8 	bl	8001c5e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b01      	cmp	r3, #1
 8005698:	d001      	beq.n	800569e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e044      	b.n	8005728 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0201 	orr.w	r2, r2, #1
 80056b4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1d      	ldr	r2, [pc, #116]	; (8005730 <HAL_TIM_Base_Start_IT+0x104>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d018      	beq.n	80056f2 <HAL_TIM_Base_Start_IT+0xc6>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c8:	d013      	beq.n	80056f2 <HAL_TIM_Base_Start_IT+0xc6>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a19      	ldr	r2, [pc, #100]	; (8005734 <HAL_TIM_Base_Start_IT+0x108>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00e      	beq.n	80056f2 <HAL_TIM_Base_Start_IT+0xc6>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a17      	ldr	r2, [pc, #92]	; (8005738 <HAL_TIM_Base_Start_IT+0x10c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d009      	beq.n	80056f2 <HAL_TIM_Base_Start_IT+0xc6>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a16      	ldr	r2, [pc, #88]	; (800573c <HAL_TIM_Base_Start_IT+0x110>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d004      	beq.n	80056f2 <HAL_TIM_Base_Start_IT+0xc6>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a14      	ldr	r2, [pc, #80]	; (8005740 <HAL_TIM_Base_Start_IT+0x114>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d111      	bne.n	8005716 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b06      	cmp	r3, #6
 8005702:	d010      	beq.n	8005726 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005714:	e007      	b.n	8005726 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0201 	orr.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40010000 	.word	0x40010000
 8005734:	40000400 	.word	0x40000400
 8005738:	40000800 	.word	0x40000800
 800573c:	40000c00 	.word	0x40000c00
 8005740:	40014000 	.word	0x40014000
 8005744:	40014400 	.word	0x40014400
 8005748:	40014800 	.word	0x40014800
 800574c:	080106c4 	.word	0x080106c4

08005750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b02      	cmp	r3, #2
 8005764:	d122      	bne.n	80057ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b02      	cmp	r3, #2
 8005772:	d11b      	bne.n	80057ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0202 	mvn.w	r2, #2
 800577c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f8ee 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 8005798:	e005      	b.n	80057a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f8e0 	bl	8005960 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f8f1 	bl	8005988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d122      	bne.n	8005800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d11b      	bne.n	8005800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0204 	mvn.w	r2, #4
 80057d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f8c4 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 80057ec:	e005      	b.n	80057fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f8b6 	bl	8005960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f8c7 	bl	8005988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	2b08      	cmp	r3, #8
 800580c:	d122      	bne.n	8005854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b08      	cmp	r3, #8
 800581a:	d11b      	bne.n	8005854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0208 	mvn.w	r2, #8
 8005824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2204      	movs	r2, #4
 800582a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	f003 0303 	and.w	r3, r3, #3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f89a 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 8005840:	e005      	b.n	800584e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f88c 	bl	8005960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f89d 	bl	8005988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	2b10      	cmp	r3, #16
 8005860:	d122      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	2b10      	cmp	r3, #16
 800586e:	d11b      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0210 	mvn.w	r2, #16
 8005878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2208      	movs	r2, #8
 800587e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f870 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 8005894:	e005      	b.n	80058a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f862 	bl	8005960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f873 	bl	8005988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d10e      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d107      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0201 	mvn.w	r2, #1
 80058cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fc f9ae 	bl	8001c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058de:	2b80      	cmp	r3, #128	; 0x80
 80058e0:	d10e      	bne.n	8005900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ec:	2b80      	cmp	r3, #128	; 0x80
 80058ee:	d107      	bne.n	8005900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f8e2 	bl	8005ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d10e      	bne.n	800592c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	d107      	bne.n	800592c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f838 	bl	800599c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b20      	cmp	r3, #32
 8005938:	d10e      	bne.n	8005958 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f003 0320 	and.w	r3, r3, #32
 8005944:	2b20      	cmp	r3, #32
 8005946:	d107      	bne.n	8005958 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0220 	mvn.w	r2, #32
 8005950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f8ac 	bl	8005ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005958:	bf00      	nop
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a34      	ldr	r2, [pc, #208]	; (8005a94 <TIM_Base_SetConfig+0xe4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00f      	beq.n	80059e8 <TIM_Base_SetConfig+0x38>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ce:	d00b      	beq.n	80059e8 <TIM_Base_SetConfig+0x38>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a31      	ldr	r2, [pc, #196]	; (8005a98 <TIM_Base_SetConfig+0xe8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d007      	beq.n	80059e8 <TIM_Base_SetConfig+0x38>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a30      	ldr	r2, [pc, #192]	; (8005a9c <TIM_Base_SetConfig+0xec>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_Base_SetConfig+0x38>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a2f      	ldr	r2, [pc, #188]	; (8005aa0 <TIM_Base_SetConfig+0xf0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d108      	bne.n	80059fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a25      	ldr	r2, [pc, #148]	; (8005a94 <TIM_Base_SetConfig+0xe4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d01b      	beq.n	8005a3a <TIM_Base_SetConfig+0x8a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a08:	d017      	beq.n	8005a3a <TIM_Base_SetConfig+0x8a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <TIM_Base_SetConfig+0xe8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <TIM_Base_SetConfig+0x8a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a21      	ldr	r2, [pc, #132]	; (8005a9c <TIM_Base_SetConfig+0xec>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00f      	beq.n	8005a3a <TIM_Base_SetConfig+0x8a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a20      	ldr	r2, [pc, #128]	; (8005aa0 <TIM_Base_SetConfig+0xf0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d00b      	beq.n	8005a3a <TIM_Base_SetConfig+0x8a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a1f      	ldr	r2, [pc, #124]	; (8005aa4 <TIM_Base_SetConfig+0xf4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d007      	beq.n	8005a3a <TIM_Base_SetConfig+0x8a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a1e      	ldr	r2, [pc, #120]	; (8005aa8 <TIM_Base_SetConfig+0xf8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d003      	beq.n	8005a3a <TIM_Base_SetConfig+0x8a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a1d      	ldr	r2, [pc, #116]	; (8005aac <TIM_Base_SetConfig+0xfc>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d108      	bne.n	8005a4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a08      	ldr	r2, [pc, #32]	; (8005a94 <TIM_Base_SetConfig+0xe4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d103      	bne.n	8005a80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	615a      	str	r2, [r3, #20]
}
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40010000 	.word	0x40010000
 8005a98:	40000400 	.word	0x40000400
 8005a9c:	40000800 	.word	0x40000800
 8005aa0:	40000c00 	.word	0x40000c00
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800

08005ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e0a0      	b.n	8005c2c <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d02c      	beq.n	8005b4c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a4f      	ldr	r2, [pc, #316]	; (8005c34 <HAL_UART_Init+0x15c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00e      	beq.n	8005b1a <HAL_UART_Init+0x42>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a4d      	ldr	r2, [pc, #308]	; (8005c38 <HAL_UART_Init+0x160>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d009      	beq.n	8005b1a <HAL_UART_Init+0x42>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a4c      	ldr	r2, [pc, #304]	; (8005c3c <HAL_UART_Init+0x164>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d004      	beq.n	8005b1a <HAL_UART_Init+0x42>
 8005b10:	f240 1173 	movw	r1, #371	; 0x173
 8005b14:	484a      	ldr	r0, [pc, #296]	; (8005c40 <HAL_UART_Init+0x168>)
 8005b16:	f7fc f8a2 	bl	8001c5e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d028      	beq.n	8005b74 <HAL_UART_Init+0x9c>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b2a:	d023      	beq.n	8005b74 <HAL_UART_Init+0x9c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b34:	d01e      	beq.n	8005b74 <HAL_UART_Init+0x9c>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b3e:	d019      	beq.n	8005b74 <HAL_UART_Init+0x9c>
 8005b40:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8005b44:	483e      	ldr	r0, [pc, #248]	; (8005c40 <HAL_UART_Init+0x168>)
 8005b46:	f7fc f88a 	bl	8001c5e <assert_failed>
 8005b4a:	e013      	b.n	8005b74 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a38      	ldr	r2, [pc, #224]	; (8005c34 <HAL_UART_Init+0x15c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00e      	beq.n	8005b74 <HAL_UART_Init+0x9c>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a37      	ldr	r2, [pc, #220]	; (8005c38 <HAL_UART_Init+0x160>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d009      	beq.n	8005b74 <HAL_UART_Init+0x9c>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a35      	ldr	r2, [pc, #212]	; (8005c3c <HAL_UART_Init+0x164>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_UART_Init+0x9c>
 8005b6a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8005b6e:	4834      	ldr	r0, [pc, #208]	; (8005c40 <HAL_UART_Init+0x168>)
 8005b70:	f7fc f875 	bl	8001c5e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d009      	beq.n	8005b90 <HAL_UART_Init+0xb8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b84:	d004      	beq.n	8005b90 <HAL_UART_Init+0xb8>
 8005b86:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8005b8a:	482d      	ldr	r0, [pc, #180]	; (8005c40 <HAL_UART_Init+0x168>)
 8005b8c:	f7fc f867 	bl	8001c5e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d009      	beq.n	8005bac <HAL_UART_Init+0xd4>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba0:	d004      	beq.n	8005bac <HAL_UART_Init+0xd4>
 8005ba2:	f240 117b 	movw	r1, #379	; 0x17b
 8005ba6:	4826      	ldr	r0, [pc, #152]	; (8005c40 <HAL_UART_Init+0x168>)
 8005ba8:	f7fc f859 	bl	8001c5e <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d106      	bne.n	8005bc6 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7fc fbcb 	bl	800235c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2224      	movs	r2, #36	; 0x24
 8005bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bdc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fde6 	bl	80067b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bf2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695a      	ldr	r2, [r3, #20]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c02:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c12:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40011000 	.word	0x40011000
 8005c38:	40004400 	.word	0x40004400
 8005c3c:	40011400 	.word	0x40011400
 8005c40:	08010738 	.word	0x08010738

08005c44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08a      	sub	sp, #40	; 0x28
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	4613      	mov	r3, r2
 8005c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d17c      	bne.n	8005d5e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_UART_Transmit+0x2c>
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e075      	b.n	8005d60 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_UART_Transmit+0x3e>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e06e      	b.n	8005d60 <HAL_UART_Transmit+0x11c>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2221      	movs	r2, #33	; 0x21
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c98:	f7fd f910 	bl	8002ebc <HAL_GetTick>
 8005c9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	88fa      	ldrh	r2, [r7, #6]
 8005ca2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	88fa      	ldrh	r2, [r7, #6]
 8005ca8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb2:	d108      	bne.n	8005cc6 <HAL_UART_Transmit+0x82>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d104      	bne.n	8005cc6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	61bb      	str	r3, [r7, #24]
 8005cc4:	e003      	b.n	8005cce <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005cd6:	e02a      	b.n	8005d2e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2180      	movs	r1, #128	; 0x80
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 fb1e 	bl	8006324 <UART_WaitOnFlagUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e036      	b.n	8005d60 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10b      	bne.n	8005d10 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d06:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	3302      	adds	r3, #2
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	e007      	b.n	8005d20 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	781a      	ldrb	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	3b01      	subs	r3, #1
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1cf      	bne.n	8005cd8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2140      	movs	r1, #64	; 0x40
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 faee 	bl	8006324 <UART_WaitOnFlagUntilTimeout>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e006      	b.n	8005d60 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e000      	b.n	8005d60 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d5e:	2302      	movs	r3, #2
  }
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3720      	adds	r7, #32
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	4613      	mov	r3, r2
 8005d74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d11d      	bne.n	8005dbe <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <HAL_UART_Receive_IT+0x26>
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e016      	b.n	8005dc0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_UART_Receive_IT+0x38>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e00f      	b.n	8005dc0 <HAL_UART_Receive_IT+0x58>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005dae:	88fb      	ldrh	r3, [r7, #6]
 8005db0:	461a      	mov	r2, r3
 8005db2:	68b9      	ldr	r1, [r7, #8]
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 fb23 	bl	8006400 <UART_Start_Receive_IT>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	e000      	b.n	8005dc0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005dbe:	2302      	movs	r3, #2
  }
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b0ba      	sub	sp, #232	; 0xe8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10f      	bne.n	8005e2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d009      	beq.n	8005e2e <HAL_UART_IRQHandler+0x66>
 8005e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fc07 	bl	800663a <UART_Receive_IT>
      return;
 8005e2c:	e256      	b.n	80062dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 80de 	beq.w	8005ff4 <HAL_UART_IRQHandler+0x22c>
 8005e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d106      	bne.n	8005e52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 80d1 	beq.w	8005ff4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00b      	beq.n	8005e76 <HAL_UART_IRQHandler+0xae>
 8005e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	f043 0201 	orr.w	r2, r3, #1
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00b      	beq.n	8005e9a <HAL_UART_IRQHandler+0xd2>
 8005e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d005      	beq.n	8005e9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f043 0202 	orr.w	r2, r3, #2
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00b      	beq.n	8005ebe <HAL_UART_IRQHandler+0xf6>
 8005ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f043 0204 	orr.w	r2, r3, #4
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d011      	beq.n	8005eee <HAL_UART_IRQHandler+0x126>
 8005eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d105      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	f043 0208 	orr.w	r2, r3, #8
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 81ed 	beq.w	80062d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d008      	beq.n	8005f16 <HAL_UART_IRQHandler+0x14e>
 8005f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f08:	f003 0320 	and.w	r3, r3, #32
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fb92 	bl	800663a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f20:	2b40      	cmp	r3, #64	; 0x40
 8005f22:	bf0c      	ite	eq
 8005f24:	2301      	moveq	r3, #1
 8005f26:	2300      	movne	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	f003 0308 	and.w	r3, r3, #8
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d103      	bne.n	8005f42 <HAL_UART_IRQHandler+0x17a>
 8005f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d04f      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa9a 	bl	800647c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b40      	cmp	r3, #64	; 0x40
 8005f54:	d141      	bne.n	8005fda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3314      	adds	r3, #20
 8005f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3314      	adds	r3, #20
 8005f7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f92:	e841 2300 	strex	r3, r2, [r1]
 8005f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1d9      	bne.n	8005f56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d013      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	4a7d      	ldr	r2, [pc, #500]	; (80061a4 <HAL_UART_IRQHandler+0x3dc>)
 8005fb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fd f96e 	bl	8003298 <HAL_DMA_Abort_IT>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d016      	beq.n	8005ff0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd0:	e00e      	b.n	8005ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f990 	bl	80062f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd8:	e00a      	b.n	8005ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f98c 	bl	80062f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe0:	e006      	b.n	8005ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f988 	bl	80062f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005fee:	e170      	b.n	80062d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff0:	bf00      	nop
    return;
 8005ff2:	e16e      	b.n	80062d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	f040 814a 	bne.w	8006292 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006002:	f003 0310 	and.w	r3, r3, #16
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 8143 	beq.w	8006292 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800600c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 813c 	beq.w	8006292 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800601a:	2300      	movs	r3, #0
 800601c:	60bb      	str	r3, [r7, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	60bb      	str	r3, [r7, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	60bb      	str	r3, [r7, #8]
 800602e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	f040 80b4 	bne.w	80061a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800604c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 8140 	beq.w	80062d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800605a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800605e:	429a      	cmp	r2, r3
 8006060:	f080 8139 	bcs.w	80062d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800606a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006076:	f000 8088 	beq.w	800618a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	330c      	adds	r3, #12
 8006080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006090:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	330c      	adds	r3, #12
 80060a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1d9      	bne.n	800607a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3314      	adds	r3, #20
 80060cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060d8:	f023 0301 	bic.w	r3, r3, #1
 80060dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3314      	adds	r3, #20
 80060e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e1      	bne.n	80060c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3314      	adds	r3, #20
 8006108:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3314      	adds	r3, #20
 8006122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006126:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006128:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800612c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e3      	bne.n	8006102 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006152:	e853 3f00 	ldrex	r3, [r3]
 8006156:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800615a:	f023 0310 	bic.w	r3, r3, #16
 800615e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	330c      	adds	r3, #12
 8006168:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800616c:	65ba      	str	r2, [r7, #88]	; 0x58
 800616e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006170:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006172:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006174:	e841 2300 	strex	r3, r2, [r1]
 8006178:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800617a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1e3      	bne.n	8006148 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	4618      	mov	r0, r3
 8006186:	f7fd f817 	bl	80031b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006192:	b29b      	uxth	r3, r3
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	b29b      	uxth	r3, r3
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f8b6 	bl	800630c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061a0:	e099      	b.n	80062d6 <HAL_UART_IRQHandler+0x50e>
 80061a2:	bf00      	nop
 80061a4:	08006543 	.word	0x08006543
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 808b 	beq.w	80062da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80061c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 8086 	beq.w	80062da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	330c      	adds	r3, #12
 80061d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	330c      	adds	r3, #12
 80061ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80061f2:	647a      	str	r2, [r7, #68]	; 0x44
 80061f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e3      	bne.n	80061ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3314      	adds	r3, #20
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	623b      	str	r3, [r7, #32]
   return(result);
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	f023 0301 	bic.w	r3, r3, #1
 800621c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3314      	adds	r3, #20
 8006226:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800622a:	633a      	str	r2, [r7, #48]	; 0x30
 800622c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e3      	bne.n	8006206 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	60fb      	str	r3, [r7, #12]
   return(result);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0310 	bic.w	r3, r3, #16
 8006262:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	330c      	adds	r3, #12
 800626c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006270:	61fa      	str	r2, [r7, #28]
 8006272:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	69b9      	ldr	r1, [r7, #24]
 8006276:	69fa      	ldr	r2, [r7, #28]
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	617b      	str	r3, [r7, #20]
   return(result);
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e3      	bne.n	800624c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f83e 	bl	800630c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006290:	e023      	b.n	80062da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <HAL_UART_IRQHandler+0x4ea>
 800629e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f95d 	bl	800656a <UART_Transmit_IT>
    return;
 80062b0:	e014      	b.n	80062dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00e      	beq.n	80062dc <HAL_UART_IRQHandler+0x514>
 80062be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d008      	beq.n	80062dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f99d 	bl	800660a <UART_EndTransmit_IT>
    return;
 80062d0:	e004      	b.n	80062dc <HAL_UART_IRQHandler+0x514>
    return;
 80062d2:	bf00      	nop
 80062d4:	e002      	b.n	80062dc <HAL_UART_IRQHandler+0x514>
      return;
 80062d6:	bf00      	nop
 80062d8:	e000      	b.n	80062dc <HAL_UART_IRQHandler+0x514>
      return;
 80062da:	bf00      	nop
  }
}
 80062dc:	37e8      	adds	r7, #232	; 0xe8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop

080062e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b090      	sub	sp, #64	; 0x40
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	4613      	mov	r3, r2
 8006332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006334:	e050      	b.n	80063d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d04c      	beq.n	80063d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800633e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <UART_WaitOnFlagUntilTimeout+0x30>
 8006344:	f7fc fdba 	bl	8002ebc <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006350:	429a      	cmp	r2, r3
 8006352:	d241      	bcs.n	80063d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	330c      	adds	r3, #12
 800635a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800636a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	330c      	adds	r3, #12
 8006372:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006374:	637a      	str	r2, [r7, #52]	; 0x34
 8006376:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800637a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e5      	bne.n	8006354 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3314      	adds	r3, #20
 800638e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	613b      	str	r3, [r7, #16]
   return(result);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f023 0301 	bic.w	r3, r3, #1
 800639e:	63bb      	str	r3, [r7, #56]	; 0x38
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3314      	adds	r3, #20
 80063a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063a8:	623a      	str	r2, [r7, #32]
 80063aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	69f9      	ldr	r1, [r7, #28]
 80063ae:	6a3a      	ldr	r2, [r7, #32]
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e5      	bne.n	8006388 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e00f      	b.n	80063f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	4013      	ands	r3, r2
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	bf0c      	ite	eq
 80063e8:	2301      	moveq	r3, #1
 80063ea:	2300      	movne	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	79fb      	ldrb	r3, [r7, #7]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d09f      	beq.n	8006336 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3740      	adds	r7, #64	; 0x40
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4613      	mov	r3, r2
 800640c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	88fa      	ldrh	r2, [r7, #6]
 8006418:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	88fa      	ldrh	r2, [r7, #6]
 800641e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2222      	movs	r2, #34	; 0x22
 800642a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800644c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	695a      	ldr	r2, [r3, #20]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0201 	orr.w	r2, r2, #1
 800645c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 0220 	orr.w	r2, r2, #32
 800646c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800647c:	b480      	push	{r7}
 800647e:	b095      	sub	sp, #84	; 0x54
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	330c      	adds	r3, #12
 800648a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800649a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	330c      	adds	r3, #12
 80064a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064a4:	643a      	str	r2, [r7, #64]	; 0x40
 80064a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e5      	bne.n	8006484 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3314      	adds	r3, #20
 80064be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	f023 0301 	bic.w	r3, r3, #1
 80064ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3314      	adds	r3, #20
 80064d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e5      	bne.n	80064b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d119      	bne.n	8006528 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	330c      	adds	r3, #12
 80064fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	e853 3f00 	ldrex	r3, [r3]
 8006502:	60bb      	str	r3, [r7, #8]
   return(result);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f023 0310 	bic.w	r3, r3, #16
 800650a:	647b      	str	r3, [r7, #68]	; 0x44
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	330c      	adds	r3, #12
 8006512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006514:	61ba      	str	r2, [r7, #24]
 8006516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006518:	6979      	ldr	r1, [r7, #20]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	e841 2300 	strex	r3, r2, [r1]
 8006520:	613b      	str	r3, [r7, #16]
   return(result);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1e5      	bne.n	80064f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2220      	movs	r2, #32
 800652c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006536:	bf00      	nop
 8006538:	3754      	adds	r7, #84	; 0x54
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f7ff fecb 	bl	80062f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006562:	bf00      	nop
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800656a:	b480      	push	{r7}
 800656c:	b085      	sub	sp, #20
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b21      	cmp	r3, #33	; 0x21
 800657c:	d13e      	bne.n	80065fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006586:	d114      	bne.n	80065b2 <UART_Transmit_IT+0x48>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d110      	bne.n	80065b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	1c9a      	adds	r2, r3, #2
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	621a      	str	r2, [r3, #32]
 80065b0:	e008      	b.n	80065c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	1c59      	adds	r1, r3, #1
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6211      	str	r1, [r2, #32]
 80065bc:	781a      	ldrb	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	4619      	mov	r1, r3
 80065d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10f      	bne.n	80065f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	e000      	b.n	80065fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065fc:	2302      	movs	r3, #2
  }
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006620:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff fe5a 	bl	80062e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b08c      	sub	sp, #48	; 0x30
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b22      	cmp	r3, #34	; 0x22
 800664c:	f040 80ab 	bne.w	80067a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006658:	d117      	bne.n	800668a <UART_Receive_IT+0x50>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d113      	bne.n	800668a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006662:	2300      	movs	r3, #0
 8006664:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006678:	b29a      	uxth	r2, r3
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006682:	1c9a      	adds	r2, r3, #2
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	629a      	str	r2, [r3, #40]	; 0x28
 8006688:	e026      	b.n	80066d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006690:	2300      	movs	r3, #0
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669c:	d007      	beq.n	80066ae <UART_Receive_IT+0x74>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10a      	bne.n	80066bc <UART_Receive_IT+0x82>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	e008      	b.n	80066ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066dc:	b29b      	uxth	r3, r3
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	4619      	mov	r1, r3
 80066e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d15a      	bne.n	80067a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0220 	bic.w	r2, r2, #32
 80066fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800670a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695a      	ldr	r2, [r3, #20]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0201 	bic.w	r2, r2, #1
 800671a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006728:	2b01      	cmp	r3, #1
 800672a:	d135      	bne.n	8006798 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	330c      	adds	r3, #12
 8006738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	613b      	str	r3, [r7, #16]
   return(result);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f023 0310 	bic.w	r3, r3, #16
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	330c      	adds	r3, #12
 8006750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006752:	623a      	str	r2, [r7, #32]
 8006754:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	69f9      	ldr	r1, [r7, #28]
 8006758:	6a3a      	ldr	r2, [r7, #32]
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e5      	bne.n	8006732 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0310 	and.w	r3, r3, #16
 8006770:	2b10      	cmp	r3, #16
 8006772:	d10a      	bne.n	800678a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff fdbb 	bl	800630c <HAL_UARTEx_RxEventCallback>
 8006796:	e002      	b.n	800679e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7fb f833 	bl	8001804 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	e002      	b.n	80067a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	e000      	b.n	80067a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80067a6:	2302      	movs	r3, #2
  }
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3730      	adds	r7, #48	; 0x30
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067b4:	b0c0      	sub	sp, #256	; 0x100
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80067bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	4bcf      	ldr	r3, [pc, #828]	; (8006b00 <UART_SetConfig+0x350>)
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d904      	bls.n	80067d2 <UART_SetConfig+0x22>
 80067c8:	f640 6161 	movw	r1, #3681	; 0xe61
 80067cc:	48cd      	ldr	r0, [pc, #820]	; (8006b04 <UART_SetConfig+0x354>)
 80067ce:	f7fb fa46 	bl	8001c5e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80067d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <UART_SetConfig+0x42>
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067e6:	d004      	beq.n	80067f2 <UART_SetConfig+0x42>
 80067e8:	f640 6162 	movw	r1, #3682	; 0xe62
 80067ec:	48c5      	ldr	r0, [pc, #788]	; (8006b04 <UART_SetConfig+0x354>)
 80067ee:	f7fb fa36 	bl	8001c5e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80067f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d010      	beq.n	800681e <UART_SetConfig+0x6e>
 80067fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006806:	d00a      	beq.n	800681e <UART_SetConfig+0x6e>
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006812:	d004      	beq.n	800681e <UART_SetConfig+0x6e>
 8006814:	f640 6163 	movw	r1, #3683	; 0xe63
 8006818:	48ba      	ldr	r0, [pc, #744]	; (8006b04 <UART_SetConfig+0x354>)
 800681a:	f7fb fa20 	bl	8001c5e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800681e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006822:	695a      	ldr	r2, [r3, #20]
 8006824:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8006828:	4013      	ands	r3, r2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d104      	bne.n	8006838 <UART_SetConfig+0x88>
 800682e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <UART_SetConfig+0x92>
 8006838:	f640 6164 	movw	r1, #3684	; 0xe64
 800683c:	48b1      	ldr	r0, [pc, #708]	; (8006b04 <UART_SetConfig+0x354>)
 800683e:	f7fb fa0e 	bl	8001c5e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800684e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006852:	68d9      	ldr	r1, [r3, #12]
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	ea40 0301 	orr.w	r3, r0, r1
 800685e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006864:	689a      	ldr	r2, [r3, #8]
 8006866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	431a      	orrs	r2, r3
 800686e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	431a      	orrs	r2, r3
 8006876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800688e:	f021 010c 	bic.w	r1, r1, #12
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800689c:	430b      	orrs	r3, r1
 800689e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80068ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b0:	6999      	ldr	r1, [r3, #24]
 80068b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	ea40 0301 	orr.w	r3, r0, r1
 80068bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	4b90      	ldr	r3, [pc, #576]	; (8006b08 <UART_SetConfig+0x358>)
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d005      	beq.n	80068d6 <UART_SetConfig+0x126>
 80068ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	4b8e      	ldr	r3, [pc, #568]	; (8006b0c <UART_SetConfig+0x35c>)
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d104      	bne.n	80068e0 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068d6:	f7fe f889 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 80068da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80068de:	e003      	b.n	80068e8 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068e0:	f7fe f870 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 80068e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f2:	f040 810f 	bne.w	8006b14 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006900:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006904:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006908:	4622      	mov	r2, r4
 800690a:	462b      	mov	r3, r5
 800690c:	1891      	adds	r1, r2, r2
 800690e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006910:	415b      	adcs	r3, r3
 8006912:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006914:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006918:	4621      	mov	r1, r4
 800691a:	eb12 0801 	adds.w	r8, r2, r1
 800691e:	4629      	mov	r1, r5
 8006920:	eb43 0901 	adc.w	r9, r3, r1
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006930:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006934:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006938:	4690      	mov	r8, r2
 800693a:	4699      	mov	r9, r3
 800693c:	4623      	mov	r3, r4
 800693e:	eb18 0303 	adds.w	r3, r8, r3
 8006942:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006946:	462b      	mov	r3, r5
 8006948:	eb49 0303 	adc.w	r3, r9, r3
 800694c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800695c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006960:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006964:	460b      	mov	r3, r1
 8006966:	18db      	adds	r3, r3, r3
 8006968:	653b      	str	r3, [r7, #80]	; 0x50
 800696a:	4613      	mov	r3, r2
 800696c:	eb42 0303 	adc.w	r3, r2, r3
 8006970:	657b      	str	r3, [r7, #84]	; 0x54
 8006972:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006976:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800697a:	f7fa f98d 	bl	8000c98 <__aeabi_uldivmod>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4b63      	ldr	r3, [pc, #396]	; (8006b10 <UART_SetConfig+0x360>)
 8006984:	fba3 2302 	umull	r2, r3, r3, r2
 8006988:	095b      	lsrs	r3, r3, #5
 800698a:	011c      	lsls	r4, r3, #4
 800698c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006990:	2200      	movs	r2, #0
 8006992:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006996:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800699a:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800699e:	4642      	mov	r2, r8
 80069a0:	464b      	mov	r3, r9
 80069a2:	1891      	adds	r1, r2, r2
 80069a4:	64b9      	str	r1, [r7, #72]	; 0x48
 80069a6:	415b      	adcs	r3, r3
 80069a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80069ae:	4641      	mov	r1, r8
 80069b0:	eb12 0a01 	adds.w	sl, r2, r1
 80069b4:	4649      	mov	r1, r9
 80069b6:	eb43 0b01 	adc.w	fp, r3, r1
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	f04f 0300 	mov.w	r3, #0
 80069c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069ce:	4692      	mov	sl, r2
 80069d0:	469b      	mov	fp, r3
 80069d2:	4643      	mov	r3, r8
 80069d4:	eb1a 0303 	adds.w	r3, sl, r3
 80069d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069dc:	464b      	mov	r3, r9
 80069de:	eb4b 0303 	adc.w	r3, fp, r3
 80069e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069f2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069fa:	460b      	mov	r3, r1
 80069fc:	18db      	adds	r3, r3, r3
 80069fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006a00:	4613      	mov	r3, r2
 8006a02:	eb42 0303 	adc.w	r3, r2, r3
 8006a06:	647b      	str	r3, [r7, #68]	; 0x44
 8006a08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a0c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a10:	f7fa f942 	bl	8000c98 <__aeabi_uldivmod>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4611      	mov	r1, r2
 8006a1a:	4b3d      	ldr	r3, [pc, #244]	; (8006b10 <UART_SetConfig+0x360>)
 8006a1c:	fba3 2301 	umull	r2, r3, r3, r1
 8006a20:	095b      	lsrs	r3, r3, #5
 8006a22:	2264      	movs	r2, #100	; 0x64
 8006a24:	fb02 f303 	mul.w	r3, r2, r3
 8006a28:	1acb      	subs	r3, r1, r3
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a30:	4b37      	ldr	r3, [pc, #220]	; (8006b10 <UART_SetConfig+0x360>)
 8006a32:	fba3 2302 	umull	r2, r3, r3, r2
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a3e:	441c      	add	r4, r3
 8006a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a44:	2200      	movs	r2, #0
 8006a46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a4a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a4e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a52:	4642      	mov	r2, r8
 8006a54:	464b      	mov	r3, r9
 8006a56:	1891      	adds	r1, r2, r2
 8006a58:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a5a:	415b      	adcs	r3, r3
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a5e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a62:	4641      	mov	r1, r8
 8006a64:	1851      	adds	r1, r2, r1
 8006a66:	6339      	str	r1, [r7, #48]	; 0x30
 8006a68:	4649      	mov	r1, r9
 8006a6a:	414b      	adcs	r3, r1
 8006a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a7a:	4659      	mov	r1, fp
 8006a7c:	00cb      	lsls	r3, r1, #3
 8006a7e:	4651      	mov	r1, sl
 8006a80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a84:	4651      	mov	r1, sl
 8006a86:	00ca      	lsls	r2, r1, #3
 8006a88:	4610      	mov	r0, r2
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	4642      	mov	r2, r8
 8006a90:	189b      	adds	r3, r3, r2
 8006a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a96:	464b      	mov	r3, r9
 8006a98:	460a      	mov	r2, r1
 8006a9a:	eb42 0303 	adc.w	r3, r2, r3
 8006a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006aae:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ab2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	18db      	adds	r3, r3, r3
 8006aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006abc:	4613      	mov	r3, r2
 8006abe:	eb42 0303 	adc.w	r3, r2, r3
 8006ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ac4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ac8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006acc:	f7fa f8e4 	bl	8000c98 <__aeabi_uldivmod>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4b0e      	ldr	r3, [pc, #56]	; (8006b10 <UART_SetConfig+0x360>)
 8006ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8006ada:	095b      	lsrs	r3, r3, #5
 8006adc:	2164      	movs	r1, #100	; 0x64
 8006ade:	fb01 f303 	mul.w	r3, r1, r3
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	3332      	adds	r3, #50	; 0x32
 8006ae8:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <UART_SetConfig+0x360>)
 8006aea:	fba2 2303 	umull	r2, r3, r2, r3
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	f003 0207 	and.w	r2, r3, #7
 8006af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4422      	add	r2, r4
 8006afc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006afe:	e108      	b.n	8006d12 <UART_SetConfig+0x562>
 8006b00:	00a037a0 	.word	0x00a037a0
 8006b04:	08010738 	.word	0x08010738
 8006b08:	40011000 	.word	0x40011000
 8006b0c:	40011400 	.word	0x40011400
 8006b10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b26:	4642      	mov	r2, r8
 8006b28:	464b      	mov	r3, r9
 8006b2a:	1891      	adds	r1, r2, r2
 8006b2c:	6239      	str	r1, [r7, #32]
 8006b2e:	415b      	adcs	r3, r3
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
 8006b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b36:	4641      	mov	r1, r8
 8006b38:	1854      	adds	r4, r2, r1
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	eb43 0501 	adc.w	r5, r3, r1
 8006b40:	f04f 0200 	mov.w	r2, #0
 8006b44:	f04f 0300 	mov.w	r3, #0
 8006b48:	00eb      	lsls	r3, r5, #3
 8006b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b4e:	00e2      	lsls	r2, r4, #3
 8006b50:	4614      	mov	r4, r2
 8006b52:	461d      	mov	r5, r3
 8006b54:	4643      	mov	r3, r8
 8006b56:	18e3      	adds	r3, r4, r3
 8006b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b5c:	464b      	mov	r3, r9
 8006b5e:	eb45 0303 	adc.w	r3, r5, r3
 8006b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b82:	4629      	mov	r1, r5
 8006b84:	008b      	lsls	r3, r1, #2
 8006b86:	4621      	mov	r1, r4
 8006b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	008a      	lsls	r2, r1, #2
 8006b90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b94:	f7fa f880 	bl	8000c98 <__aeabi_uldivmod>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4b60      	ldr	r3, [pc, #384]	; (8006d20 <UART_SetConfig+0x570>)
 8006b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	011c      	lsls	r4, r3, #4
 8006ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006bb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006bb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006bb8:	4642      	mov	r2, r8
 8006bba:	464b      	mov	r3, r9
 8006bbc:	1891      	adds	r1, r2, r2
 8006bbe:	61b9      	str	r1, [r7, #24]
 8006bc0:	415b      	adcs	r3, r3
 8006bc2:	61fb      	str	r3, [r7, #28]
 8006bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bc8:	4641      	mov	r1, r8
 8006bca:	1851      	adds	r1, r2, r1
 8006bcc:	6139      	str	r1, [r7, #16]
 8006bce:	4649      	mov	r1, r9
 8006bd0:	414b      	adcs	r3, r1
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	f04f 0200 	mov.w	r2, #0
 8006bd8:	f04f 0300 	mov.w	r3, #0
 8006bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006be0:	4659      	mov	r1, fp
 8006be2:	00cb      	lsls	r3, r1, #3
 8006be4:	4651      	mov	r1, sl
 8006be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bea:	4651      	mov	r1, sl
 8006bec:	00ca      	lsls	r2, r1, #3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4642      	mov	r2, r8
 8006bf6:	189b      	adds	r3, r3, r2
 8006bf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bfc:	464b      	mov	r3, r9
 8006bfe:	460a      	mov	r2, r1
 8006c00:	eb42 0303 	adc.w	r3, r2, r3
 8006c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c14:	f04f 0200 	mov.w	r2, #0
 8006c18:	f04f 0300 	mov.w	r3, #0
 8006c1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c20:	4649      	mov	r1, r9
 8006c22:	008b      	lsls	r3, r1, #2
 8006c24:	4641      	mov	r1, r8
 8006c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c2a:	4641      	mov	r1, r8
 8006c2c:	008a      	lsls	r2, r1, #2
 8006c2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006c32:	f7fa f831 	bl	8000c98 <__aeabi_uldivmod>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4b39      	ldr	r3, [pc, #228]	; (8006d20 <UART_SetConfig+0x570>)
 8006c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	2164      	movs	r1, #100	; 0x64
 8006c44:	fb01 f303 	mul.w	r3, r1, r3
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	011b      	lsls	r3, r3, #4
 8006c4c:	3332      	adds	r3, #50	; 0x32
 8006c4e:	4a34      	ldr	r2, [pc, #208]	; (8006d20 <UART_SetConfig+0x570>)
 8006c50:	fba2 2303 	umull	r2, r3, r2, r3
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c5a:	441c      	add	r4, r3
 8006c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c60:	2200      	movs	r2, #0
 8006c62:	673b      	str	r3, [r7, #112]	; 0x70
 8006c64:	677a      	str	r2, [r7, #116]	; 0x74
 8006c66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c6a:	4642      	mov	r2, r8
 8006c6c:	464b      	mov	r3, r9
 8006c6e:	1891      	adds	r1, r2, r2
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	415b      	adcs	r3, r3
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c7a:	4641      	mov	r1, r8
 8006c7c:	1851      	adds	r1, r2, r1
 8006c7e:	6039      	str	r1, [r7, #0]
 8006c80:	4649      	mov	r1, r9
 8006c82:	414b      	adcs	r3, r1
 8006c84:	607b      	str	r3, [r7, #4]
 8006c86:	f04f 0200 	mov.w	r2, #0
 8006c8a:	f04f 0300 	mov.w	r3, #0
 8006c8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c92:	4659      	mov	r1, fp
 8006c94:	00cb      	lsls	r3, r1, #3
 8006c96:	4651      	mov	r1, sl
 8006c98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c9c:	4651      	mov	r1, sl
 8006c9e:	00ca      	lsls	r2, r1, #3
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	4642      	mov	r2, r8
 8006ca8:	189b      	adds	r3, r3, r2
 8006caa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cac:	464b      	mov	r3, r9
 8006cae:	460a      	mov	r2, r1
 8006cb0:	eb42 0303 	adc.w	r3, r2, r3
 8006cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	663b      	str	r3, [r7, #96]	; 0x60
 8006cc0:	667a      	str	r2, [r7, #100]	; 0x64
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006cce:	4649      	mov	r1, r9
 8006cd0:	008b      	lsls	r3, r1, #2
 8006cd2:	4641      	mov	r1, r8
 8006cd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cd8:	4641      	mov	r1, r8
 8006cda:	008a      	lsls	r2, r1, #2
 8006cdc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ce0:	f7f9 ffda 	bl	8000c98 <__aeabi_uldivmod>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4b0d      	ldr	r3, [pc, #52]	; (8006d20 <UART_SetConfig+0x570>)
 8006cea:	fba3 1302 	umull	r1, r3, r3, r2
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	2164      	movs	r1, #100	; 0x64
 8006cf2:	fb01 f303 	mul.w	r3, r1, r3
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	3332      	adds	r3, #50	; 0x32
 8006cfc:	4a08      	ldr	r2, [pc, #32]	; (8006d20 <UART_SetConfig+0x570>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	f003 020f 	and.w	r2, r3, #15
 8006d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4422      	add	r2, r4
 8006d10:	609a      	str	r2, [r3, #8]
}
 8006d12:	bf00      	nop
 8006d14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d1e:	bf00      	nop
 8006d20:	51eb851f 	.word	0x51eb851f

08006d24 <__NVIC_SetPriority>:
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	6039      	str	r1, [r7, #0]
 8006d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	db0a      	blt.n	8006d4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	490c      	ldr	r1, [pc, #48]	; (8006d70 <__NVIC_SetPriority+0x4c>)
 8006d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d42:	0112      	lsls	r2, r2, #4
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	440b      	add	r3, r1
 8006d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006d4c:	e00a      	b.n	8006d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	4908      	ldr	r1, [pc, #32]	; (8006d74 <__NVIC_SetPriority+0x50>)
 8006d54:	79fb      	ldrb	r3, [r7, #7]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	3b04      	subs	r3, #4
 8006d5c:	0112      	lsls	r2, r2, #4
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	440b      	add	r3, r1
 8006d62:	761a      	strb	r2, [r3, #24]
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	e000e100 	.word	0xe000e100
 8006d74:	e000ed00 	.word	0xe000ed00

08006d78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006d7c:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <SysTick_Handler+0x1c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006d80:	f003 f856 	bl	8009e30 <xTaskGetSchedulerState>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d001      	beq.n	8006d8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006d8a:	f001 f865 	bl	8007e58 <xPortSysTickHandler>
  }
}
 8006d8e:	bf00      	nop
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	e000e010 	.word	0xe000e010

08006d98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	f06f 0004 	mvn.w	r0, #4
 8006da2:	f7ff ffbf 	bl	8006d24 <__NVIC_SetPriority>
#endif
}
 8006da6:	bf00      	nop
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006db2:	f3ef 8305 	mrs	r3, IPSR
 8006db6:	603b      	str	r3, [r7, #0]
  return(result);
 8006db8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006dbe:	f06f 0305 	mvn.w	r3, #5
 8006dc2:	607b      	str	r3, [r7, #4]
 8006dc4:	e00c      	b.n	8006de0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <osKernelInitialize+0x44>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d105      	bne.n	8006dda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006dce:	4b08      	ldr	r3, [pc, #32]	; (8006df0 <osKernelInitialize+0x44>)
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	607b      	str	r3, [r7, #4]
 8006dd8:	e002      	b.n	8006de0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006dda:	f04f 33ff 	mov.w	r3, #4294967295
 8006dde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006de0:	687b      	ldr	r3, [r7, #4]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	20000528 	.word	0x20000528

08006df4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dfa:	f3ef 8305 	mrs	r3, IPSR
 8006dfe:	603b      	str	r3, [r7, #0]
  return(result);
 8006e00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006e06:	f06f 0305 	mvn.w	r3, #5
 8006e0a:	607b      	str	r3, [r7, #4]
 8006e0c:	e010      	b.n	8006e30 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e0e:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <osKernelStart+0x48>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d109      	bne.n	8006e2a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e16:	f7ff ffbf 	bl	8006d98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e1a:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <osKernelStart+0x48>)
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e20:	f002 fbaa 	bl	8009578 <vTaskStartScheduler>
      stat = osOK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	607b      	str	r3, [r7, #4]
 8006e28:	e002      	b.n	8006e30 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e30:	687b      	ldr	r3, [r7, #4]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000528 	.word	0x20000528

08006e40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08e      	sub	sp, #56	; 0x38
 8006e44:	af04      	add	r7, sp, #16
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e50:	f3ef 8305 	mrs	r3, IPSR
 8006e54:	617b      	str	r3, [r7, #20]
  return(result);
 8006e56:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d17e      	bne.n	8006f5a <osThreadNew+0x11a>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d07b      	beq.n	8006f5a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006e62:	2380      	movs	r3, #128	; 0x80
 8006e64:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006e66:	2318      	movs	r3, #24
 8006e68:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e72:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d045      	beq.n	8006f06 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <osThreadNew+0x48>
        name = attr->name;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d008      	beq.n	8006eae <osThreadNew+0x6e>
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	2b38      	cmp	r3, #56	; 0x38
 8006ea0:	d805      	bhi.n	8006eae <osThreadNew+0x6e>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <osThreadNew+0x72>
        return (NULL);
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e054      	b.n	8006f5c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	089b      	lsrs	r3, r3, #2
 8006ec0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00e      	beq.n	8006ee8 <osThreadNew+0xa8>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	2bbb      	cmp	r3, #187	; 0xbb
 8006ed0:	d90a      	bls.n	8006ee8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d006      	beq.n	8006ee8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <osThreadNew+0xa8>
        mem = 1;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	e010      	b.n	8006f0a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10c      	bne.n	8006f0a <osThreadNew+0xca>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d108      	bne.n	8006f0a <osThreadNew+0xca>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d104      	bne.n	8006f0a <osThreadNew+0xca>
          mem = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61bb      	str	r3, [r7, #24]
 8006f04:	e001      	b.n	8006f0a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d110      	bne.n	8006f32 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f18:	9202      	str	r2, [sp, #8]
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6a3a      	ldr	r2, [r7, #32]
 8006f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f002 f834 	bl	8008f94 <xTaskCreateStatic>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	e013      	b.n	8006f5a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d110      	bne.n	8006f5a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	f107 0310 	add.w	r3, r7, #16
 8006f40:	9301      	str	r3, [sp, #4]
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f002 f87f 	bl	800904e <xTaskCreate>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d001      	beq.n	8006f5a <osThreadNew+0x11a>
            hTask = NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f5a:	693b      	ldr	r3, [r7, #16]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3728      	adds	r7, #40	; 0x28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f70:	f3ef 8305 	mrs	r3, IPSR
 8006f74:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f76:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8006f7c:	f06f 0305 	mvn.w	r3, #5
 8006f80:	617b      	str	r3, [r7, #20]
 8006f82:	e00b      	b.n	8006f9c <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d103      	bne.n	8006f92 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8006f8a:	f06f 0303 	mvn.w	r3, #3
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	e004      	b.n	8006f9c <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8006f96:	6938      	ldr	r0, [r7, #16]
 8006f98:	f002 f9e8 	bl	800936c <vTaskSuspend>
  }

  return (stat);
 8006f9c:	697b      	ldr	r3, [r7, #20]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3718      	adds	r7, #24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b086      	sub	sp, #24
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fb2:	f3ef 8305 	mrs	r3, IPSR
 8006fb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <osThreadResume+0x20>
    stat = osErrorISR;
 8006fbe:	f06f 0305 	mvn.w	r3, #5
 8006fc2:	617b      	str	r3, [r7, #20]
 8006fc4:	e00b      	b.n	8006fde <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d103      	bne.n	8006fd4 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8006fcc:	f06f 0303 	mvn.w	r3, #3
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	e004      	b.n	8006fde <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8006fd8:	6938      	ldr	r0, [r7, #16]
 8006fda:	f002 fa6f 	bl	80094bc <vTaskResume>
  }

  return (stat);
 8006fde:	697b      	ldr	r3, [r7, #20]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ff0:	f3ef 8305 	mrs	r3, IPSR
 8006ff4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <osDelay+0x1c>
    stat = osErrorISR;
 8006ffc:	f06f 0305 	mvn.w	r3, #5
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	e007      	b.n	8007014 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007004:	2300      	movs	r3, #0
 8007006:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <osDelay+0x2c>
      vTaskDelay(ticks);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f002 f978 	bl	8009304 <vTaskDelay>
    }
  }

  return (stat);
 8007014:	68fb      	ldr	r3, [r7, #12]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f003 fcf1 	bl	800aa0e <pvTimerGetTimerID>
 800702c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <TimerCallback+0x22>
    callb->func (callb->arg);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	6852      	ldr	r2, [r2, #4]
 800703c:	4610      	mov	r0, r2
 800703e:	4798      	blx	r3
  }
}
 8007040:	bf00      	nop
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007048:	b580      	push	{r7, lr}
 800704a:	b08c      	sub	sp, #48	; 0x30
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	607a      	str	r2, [r7, #4]
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	460b      	mov	r3, r1
 8007056:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007058:	2300      	movs	r3, #0
 800705a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800705c:	f3ef 8305 	mrs	r3, IPSR
 8007060:	613b      	str	r3, [r7, #16]
  return(result);
 8007062:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8007064:	2b00      	cmp	r3, #0
 8007066:	d163      	bne.n	8007130 <osTimerNew+0xe8>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d060      	beq.n	8007130 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800706e:	2008      	movs	r0, #8
 8007070:	f000 fa92 	bl	8007598 <pvPortMalloc>
 8007074:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d059      	beq.n	8007130 <osTimerNew+0xe8>
      callb->func = func;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007088:	7afb      	ldrb	r3, [r7, #11]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d102      	bne.n	8007094 <osTimerNew+0x4c>
        reload = pdFALSE;
 800708e:	2300      	movs	r3, #0
 8007090:	61fb      	str	r3, [r7, #28]
 8007092:	e001      	b.n	8007098 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8007094:	2301      	movs	r3, #1
 8007096:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007098:	f04f 33ff 	mov.w	r3, #4294967295
 800709c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800709e:	2300      	movs	r3, #0
 80070a0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d01c      	beq.n	80070e2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <osTimerNew+0x6e>
          name = attr->name;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d006      	beq.n	80070cc <osTimerNew+0x84>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	2b2b      	cmp	r3, #43	; 0x2b
 80070c4:	d902      	bls.n	80070cc <osTimerNew+0x84>
          mem = 1;
 80070c6:	2301      	movs	r3, #1
 80070c8:	61bb      	str	r3, [r7, #24]
 80070ca:	e00c      	b.n	80070e6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d108      	bne.n	80070e6 <osTimerNew+0x9e>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d104      	bne.n	80070e6 <osTimerNew+0x9e>
            mem = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	e001      	b.n	80070e6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d10c      	bne.n	8007106 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	4b12      	ldr	r3, [pc, #72]	; (800713c <osTimerNew+0xf4>)
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	69fa      	ldr	r2, [r7, #28]
 80070fa:	2101      	movs	r1, #1
 80070fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070fe:	f003 f8de 	bl	800a2be <xTimerCreateStatic>
 8007102:	6238      	str	r0, [r7, #32]
 8007104:	e00b      	b.n	800711e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d108      	bne.n	800711e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800710c:	4b0b      	ldr	r3, [pc, #44]	; (800713c <osTimerNew+0xf4>)
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	2101      	movs	r1, #1
 8007116:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007118:	f003 f8b0 	bl	800a27c <xTimerCreate>
 800711c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d105      	bne.n	8007130 <osTimerNew+0xe8>
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <osTimerNew+0xe8>
        vPortFree (callb);
 800712a:	6978      	ldr	r0, [r7, #20]
 800712c:	f000 fb00 	bl	8007730 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007130:	6a3b      	ldr	r3, [r7, #32]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3728      	adds	r7, #40	; 0x28
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	0800701f 	.word	0x0800701f

08007140 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007140:	b580      	push	{r7, lr}
 8007142:	b088      	sub	sp, #32
 8007144:	af02      	add	r7, sp, #8
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800714e:	f3ef 8305 	mrs	r3, IPSR
 8007152:	60fb      	str	r3, [r7, #12]
  return(result);
 8007154:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <osTimerStart+0x22>
    stat = osErrorISR;
 800715a:	f06f 0305 	mvn.w	r3, #5
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	e017      	b.n	8007192 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d103      	bne.n	8007170 <osTimerStart+0x30>
    stat = osErrorParameter;
 8007168:	f06f 0303 	mvn.w	r3, #3
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	e010      	b.n	8007192 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007170:	2300      	movs	r3, #0
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	2300      	movs	r3, #0
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	2104      	movs	r1, #4
 800717a:	6938      	ldr	r0, [r7, #16]
 800717c:	f003 f918 	bl	800a3b0 <xTimerGenericCommand>
 8007180:	4603      	mov	r3, r0
 8007182:	2b01      	cmp	r3, #1
 8007184:	d102      	bne.n	800718c <osTimerStart+0x4c>
      stat = osOK;
 8007186:	2300      	movs	r3, #0
 8007188:	617b      	str	r3, [r7, #20]
 800718a:	e002      	b.n	8007192 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800718c:	f06f 0302 	mvn.w	r3, #2
 8007190:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007192:	697b      	ldr	r3, [r7, #20]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a8:	f3ef 8305 	mrs	r3, IPSR
 80071ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80071ae:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <osTimerStop+0x20>
    stat = osErrorISR;
 80071b4:	f06f 0305 	mvn.w	r3, #5
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	e021      	b.n	8007200 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d103      	bne.n	80071ca <osTimerStop+0x2e>
    stat = osErrorParameter;
 80071c2:	f06f 0303 	mvn.w	r3, #3
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	e01a      	b.n	8007200 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 80071ca:	6938      	ldr	r0, [r7, #16]
 80071cc:	f003 fbf6 	bl	800a9bc <xTimerIsTimerActive>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d103      	bne.n	80071de <osTimerStop+0x42>
      stat = osErrorResource;
 80071d6:	f06f 0302 	mvn.w	r3, #2
 80071da:	617b      	str	r3, [r7, #20]
 80071dc:	e010      	b.n	8007200 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80071de:	2300      	movs	r3, #0
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	2300      	movs	r3, #0
 80071e4:	2200      	movs	r2, #0
 80071e6:	2103      	movs	r1, #3
 80071e8:	6938      	ldr	r0, [r7, #16]
 80071ea:	f003 f8e1 	bl	800a3b0 <xTimerGenericCommand>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d102      	bne.n	80071fa <osTimerStop+0x5e>
        stat = osOK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	e002      	b.n	8007200 <osTimerStop+0x64>
      } else {
        stat = osError;
 80071fa:	f04f 33ff 	mov.w	r3, #4294967295
 80071fe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007200:	697b      	ldr	r3, [r7, #20]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800720a:	b580      	push	{r7, lr}
 800720c:	b08a      	sub	sp, #40	; 0x28
 800720e:	af02      	add	r7, sp, #8
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	60b9      	str	r1, [r7, #8]
 8007214:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007216:	2300      	movs	r3, #0
 8007218:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800721a:	f3ef 8305 	mrs	r3, IPSR
 800721e:	613b      	str	r3, [r7, #16]
  return(result);
 8007220:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007222:	2b00      	cmp	r3, #0
 8007224:	d175      	bne.n	8007312 <osSemaphoreNew+0x108>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d072      	beq.n	8007312 <osSemaphoreNew+0x108>
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	429a      	cmp	r2, r3
 8007232:	d86e      	bhi.n	8007312 <osSemaphoreNew+0x108>
    mem = -1;
 8007234:	f04f 33ff 	mov.w	r3, #4294967295
 8007238:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d015      	beq.n	800726c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d006      	beq.n	8007256 <osSemaphoreNew+0x4c>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	2b4f      	cmp	r3, #79	; 0x4f
 800724e:	d902      	bls.n	8007256 <osSemaphoreNew+0x4c>
        mem = 1;
 8007250:	2301      	movs	r3, #1
 8007252:	61bb      	str	r3, [r7, #24]
 8007254:	e00c      	b.n	8007270 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d108      	bne.n	8007270 <osSemaphoreNew+0x66>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d104      	bne.n	8007270 <osSemaphoreNew+0x66>
          mem = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	61bb      	str	r3, [r7, #24]
 800726a:	e001      	b.n	8007270 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800726c:	2300      	movs	r3, #0
 800726e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007276:	d04c      	beq.n	8007312 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d128      	bne.n	80072d0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d10a      	bne.n	800729a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2203      	movs	r2, #3
 800728a:	9200      	str	r2, [sp, #0]
 800728c:	2200      	movs	r2, #0
 800728e:	2100      	movs	r1, #0
 8007290:	2001      	movs	r0, #1
 8007292:	f000 fed9 	bl	8008048 <xQueueGenericCreateStatic>
 8007296:	61f8      	str	r0, [r7, #28]
 8007298:	e005      	b.n	80072a6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800729a:	2203      	movs	r2, #3
 800729c:	2100      	movs	r1, #0
 800729e:	2001      	movs	r0, #1
 80072a0:	f000 ff4a 	bl	8008138 <xQueueGenericCreate>
 80072a4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d022      	beq.n	80072f2 <osSemaphoreNew+0xe8>
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d01f      	beq.n	80072f2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80072b2:	2300      	movs	r3, #0
 80072b4:	2200      	movs	r2, #0
 80072b6:	2100      	movs	r1, #0
 80072b8:	69f8      	ldr	r0, [r7, #28]
 80072ba:	f001 f805 	bl	80082c8 <xQueueGenericSend>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d016      	beq.n	80072f2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80072c4:	69f8      	ldr	r0, [r7, #28]
 80072c6:	f001 fc91 	bl	8008bec <vQueueDelete>
            hSemaphore = NULL;
 80072ca:	2300      	movs	r3, #0
 80072cc:	61fb      	str	r3, [r7, #28]
 80072ce:	e010      	b.n	80072f2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d108      	bne.n	80072e8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	461a      	mov	r2, r3
 80072dc:	68b9      	ldr	r1, [r7, #8]
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 ff87 	bl	80081f2 <xQueueCreateCountingSemaphoreStatic>
 80072e4:	61f8      	str	r0, [r7, #28]
 80072e6:	e004      	b.n	80072f2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80072e8:	68b9      	ldr	r1, [r7, #8]
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 ffb8 	bl	8008260 <xQueueCreateCountingSemaphore>
 80072f0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00c      	beq.n	8007312 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <osSemaphoreNew+0xfc>
          name = attr->name;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	e001      	b.n	800730a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007306:	2300      	movs	r3, #0
 8007308:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800730a:	6979      	ldr	r1, [r7, #20]
 800730c:	69f8      	ldr	r0, [r7, #28]
 800730e:	f001 fdb9 	bl	8008e84 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007312:	69fb      	ldr	r3, [r7, #28]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3720      	adds	r7, #32
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800732a:	2300      	movs	r3, #0
 800732c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d103      	bne.n	800733c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007334:	f06f 0303 	mvn.w	r3, #3
 8007338:	617b      	str	r3, [r7, #20]
 800733a:	e039      	b.n	80073b0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800733c:	f3ef 8305 	mrs	r3, IPSR
 8007340:	60fb      	str	r3, [r7, #12]
  return(result);
 8007342:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007344:	2b00      	cmp	r3, #0
 8007346:	d022      	beq.n	800738e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800734e:	f06f 0303 	mvn.w	r3, #3
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	e02c      	b.n	80073b0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007356:	2300      	movs	r3, #0
 8007358:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800735a:	f107 0308 	add.w	r3, r7, #8
 800735e:	461a      	mov	r2, r3
 8007360:	2100      	movs	r1, #0
 8007362:	6938      	ldr	r0, [r7, #16]
 8007364:	f001 fbc2 	bl	8008aec <xQueueReceiveFromISR>
 8007368:	4603      	mov	r3, r0
 800736a:	2b01      	cmp	r3, #1
 800736c:	d003      	beq.n	8007376 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800736e:	f06f 0302 	mvn.w	r3, #2
 8007372:	617b      	str	r3, [r7, #20]
 8007374:	e01c      	b.n	80073b0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d019      	beq.n	80073b0 <osSemaphoreAcquire+0x94>
 800737c:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <osSemaphoreAcquire+0xa0>)
 800737e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	e010      	b.n	80073b0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6938      	ldr	r0, [r7, #16]
 8007392:	f001 fa9f 	bl	80088d4 <xQueueSemaphoreTake>
 8007396:	4603      	mov	r3, r0
 8007398:	2b01      	cmp	r3, #1
 800739a:	d009      	beq.n	80073b0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80073a2:	f06f 0301 	mvn.w	r3, #1
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	e002      	b.n	80073b0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80073aa:	f06f 0302 	mvn.w	r3, #2
 80073ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80073b0:	697b      	ldr	r3, [r7, #20]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	e000ed04 	.word	0xe000ed04

080073c0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d103      	bne.n	80073de <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80073d6:	f06f 0303 	mvn.w	r3, #3
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	e02c      	b.n	8007438 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073de:	f3ef 8305 	mrs	r3, IPSR
 80073e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80073e4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d01a      	beq.n	8007420 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80073ee:	f107 0308 	add.w	r3, r7, #8
 80073f2:	4619      	mov	r1, r3
 80073f4:	6938      	ldr	r0, [r7, #16]
 80073f6:	f001 f900 	bl	80085fa <xQueueGiveFromISR>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d003      	beq.n	8007408 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007400:	f06f 0302 	mvn.w	r3, #2
 8007404:	617b      	str	r3, [r7, #20]
 8007406:	e017      	b.n	8007438 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d014      	beq.n	8007438 <osSemaphoreRelease+0x78>
 800740e:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <osSemaphoreRelease+0x84>)
 8007410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	e00b      	b.n	8007438 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007420:	2300      	movs	r3, #0
 8007422:	2200      	movs	r2, #0
 8007424:	2100      	movs	r1, #0
 8007426:	6938      	ldr	r0, [r7, #16]
 8007428:	f000 ff4e 	bl	80082c8 <xQueueGenericSend>
 800742c:	4603      	mov	r3, r0
 800742e:	2b01      	cmp	r3, #1
 8007430:	d002      	beq.n	8007438 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007432:	f06f 0302 	mvn.w	r3, #2
 8007436:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007438:	697b      	ldr	r3, [r7, #20]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	e000ed04 	.word	0xe000ed04

08007448 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007448:	b580      	push	{r7, lr}
 800744a:	b08a      	sub	sp, #40	; 0x28
 800744c:	af02      	add	r7, sp, #8
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007454:	2300      	movs	r3, #0
 8007456:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007458:	f3ef 8305 	mrs	r3, IPSR
 800745c:	613b      	str	r3, [r7, #16]
  return(result);
 800745e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007460:	2b00      	cmp	r3, #0
 8007462:	d15f      	bne.n	8007524 <osMessageQueueNew+0xdc>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d05c      	beq.n	8007524 <osMessageQueueNew+0xdc>
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d059      	beq.n	8007524 <osMessageQueueNew+0xdc>
    mem = -1;
 8007470:	f04f 33ff 	mov.w	r3, #4294967295
 8007474:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d029      	beq.n	80074d0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d012      	beq.n	80074aa <osMessageQueueNew+0x62>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	2b4f      	cmp	r3, #79	; 0x4f
 800748a:	d90e      	bls.n	80074aa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	695a      	ldr	r2, [r3, #20]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	68b9      	ldr	r1, [r7, #8]
 800749c:	fb01 f303 	mul.w	r3, r1, r3
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d302      	bcc.n	80074aa <osMessageQueueNew+0x62>
        mem = 1;
 80074a4:	2301      	movs	r3, #1
 80074a6:	61bb      	str	r3, [r7, #24]
 80074a8:	e014      	b.n	80074d4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d110      	bne.n	80074d4 <osMessageQueueNew+0x8c>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10c      	bne.n	80074d4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d108      	bne.n	80074d4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d104      	bne.n	80074d4 <osMessageQueueNew+0x8c>
          mem = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	61bb      	str	r3, [r7, #24]
 80074ce:	e001      	b.n	80074d4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d10b      	bne.n	80074f2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691a      	ldr	r2, [r3, #16]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	2100      	movs	r1, #0
 80074e4:	9100      	str	r1, [sp, #0]
 80074e6:	68b9      	ldr	r1, [r7, #8]
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 fdad 	bl	8008048 <xQueueGenericCreateStatic>
 80074ee:	61f8      	str	r0, [r7, #28]
 80074f0:	e008      	b.n	8007504 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d105      	bne.n	8007504 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80074f8:	2200      	movs	r2, #0
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 fe1b 	bl	8008138 <xQueueGenericCreate>
 8007502:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00c      	beq.n	8007524 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	617b      	str	r3, [r7, #20]
 8007516:	e001      	b.n	800751c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007518:	2300      	movs	r3, #0
 800751a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800751c:	6979      	ldr	r1, [r7, #20]
 800751e:	69f8      	ldr	r0, [r7, #28]
 8007520:	f001 fcb0 	bl	8008e84 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007524:	69fb      	ldr	r3, [r7, #28]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3720      	adds	r7, #32
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4a07      	ldr	r2, [pc, #28]	; (800755c <vApplicationGetIdleTaskMemory+0x2c>)
 8007540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4a06      	ldr	r2, [pc, #24]	; (8007560 <vApplicationGetIdleTaskMemory+0x30>)
 8007546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2280      	movs	r2, #128	; 0x80
 800754c:	601a      	str	r2, [r3, #0]
}
 800754e:	bf00      	nop
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	2000052c 	.word	0x2000052c
 8007560:	200005e8 	.word	0x200005e8

08007564 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4a07      	ldr	r2, [pc, #28]	; (8007590 <vApplicationGetTimerTaskMemory+0x2c>)
 8007574:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	4a06      	ldr	r2, [pc, #24]	; (8007594 <vApplicationGetTimerTaskMemory+0x30>)
 800757a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007582:	601a      	str	r2, [r3, #0]
}
 8007584:	bf00      	nop
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	200007e8 	.word	0x200007e8
 8007594:	200008a4 	.word	0x200008a4

08007598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08a      	sub	sp, #40	; 0x28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075a0:	2300      	movs	r3, #0
 80075a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075a4:	f002 f858 	bl	8009658 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075a8:	4b5b      	ldr	r3, [pc, #364]	; (8007718 <pvPortMalloc+0x180>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075b0:	f000 f920 	bl	80077f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075b4:	4b59      	ldr	r3, [pc, #356]	; (800771c <pvPortMalloc+0x184>)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f040 8093 	bne.w	80076e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01d      	beq.n	8007604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075c8:	2208      	movs	r2, #8
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4413      	add	r3, r2
 80075ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f003 0307 	and.w	r3, r3, #7
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d014      	beq.n	8007604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f023 0307 	bic.w	r3, r3, #7
 80075e0:	3308      	adds	r3, #8
 80075e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d06e      	beq.n	80076e8 <pvPortMalloc+0x150>
 800760a:	4b45      	ldr	r3, [pc, #276]	; (8007720 <pvPortMalloc+0x188>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	429a      	cmp	r2, r3
 8007612:	d869      	bhi.n	80076e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007614:	4b43      	ldr	r3, [pc, #268]	; (8007724 <pvPortMalloc+0x18c>)
 8007616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007618:	4b42      	ldr	r3, [pc, #264]	; (8007724 <pvPortMalloc+0x18c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800761e:	e004      	b.n	800762a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	429a      	cmp	r2, r3
 8007632:	d903      	bls.n	800763c <pvPortMalloc+0xa4>
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1f1      	bne.n	8007620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800763c:	4b36      	ldr	r3, [pc, #216]	; (8007718 <pvPortMalloc+0x180>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007642:	429a      	cmp	r2, r3
 8007644:	d050      	beq.n	80076e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2208      	movs	r2, #8
 800764c:	4413      	add	r3, r2
 800764e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	1ad2      	subs	r2, r2, r3
 8007660:	2308      	movs	r3, #8
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	429a      	cmp	r2, r3
 8007666:	d91f      	bls.n	80076a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4413      	add	r3, r2
 800766e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <pvPortMalloc+0xf8>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	613b      	str	r3, [r7, #16]
}
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	1ad2      	subs	r2, r2, r3
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076a2:	69b8      	ldr	r0, [r7, #24]
 80076a4:	f000 f908 	bl	80078b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076a8:	4b1d      	ldr	r3, [pc, #116]	; (8007720 <pvPortMalloc+0x188>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	4a1b      	ldr	r2, [pc, #108]	; (8007720 <pvPortMalloc+0x188>)
 80076b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076b6:	4b1a      	ldr	r3, [pc, #104]	; (8007720 <pvPortMalloc+0x188>)
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	4b1b      	ldr	r3, [pc, #108]	; (8007728 <pvPortMalloc+0x190>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d203      	bcs.n	80076ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076c2:	4b17      	ldr	r3, [pc, #92]	; (8007720 <pvPortMalloc+0x188>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a18      	ldr	r2, [pc, #96]	; (8007728 <pvPortMalloc+0x190>)
 80076c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <pvPortMalloc+0x184>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076de:	4b13      	ldr	r3, [pc, #76]	; (800772c <pvPortMalloc+0x194>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3301      	adds	r3, #1
 80076e4:	4a11      	ldr	r2, [pc, #68]	; (800772c <pvPortMalloc+0x194>)
 80076e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076e8:	f001 ffc4 	bl	8009674 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <pvPortMalloc+0x174>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	60fb      	str	r3, [r7, #12]
}
 8007708:	bf00      	nop
 800770a:	e7fe      	b.n	800770a <pvPortMalloc+0x172>
	return pvReturn;
 800770c:	69fb      	ldr	r3, [r7, #28]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3728      	adds	r7, #40	; 0x28
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	200048ac 	.word	0x200048ac
 800771c:	200048c0 	.word	0x200048c0
 8007720:	200048b0 	.word	0x200048b0
 8007724:	200048a4 	.word	0x200048a4
 8007728:	200048b4 	.word	0x200048b4
 800772c:	200048b8 	.word	0x200048b8

08007730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d04d      	beq.n	80077de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007742:	2308      	movs	r3, #8
 8007744:	425b      	negs	r3, r3
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4413      	add	r3, r2
 800774a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <vPortFree+0xb8>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4013      	ands	r3, r2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10a      	bne.n	8007774 <vPortFree+0x44>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	60fb      	str	r3, [r7, #12]
}
 8007770:	bf00      	nop
 8007772:	e7fe      	b.n	8007772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00a      	beq.n	8007792 <vPortFree+0x62>
	__asm volatile
 800777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	60bb      	str	r3, [r7, #8]
}
 800778e:	bf00      	nop
 8007790:	e7fe      	b.n	8007790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <vPortFree+0xb8>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4013      	ands	r3, r2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d01e      	beq.n	80077de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d11a      	bne.n	80077de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <vPortFree+0xb8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	43db      	mvns	r3, r3
 80077b2:	401a      	ands	r2, r3
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077b8:	f001 ff4e 	bl	8009658 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	4b0a      	ldr	r3, [pc, #40]	; (80077ec <vPortFree+0xbc>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4413      	add	r3, r2
 80077c6:	4a09      	ldr	r2, [pc, #36]	; (80077ec <vPortFree+0xbc>)
 80077c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077ca:	6938      	ldr	r0, [r7, #16]
 80077cc:	f000 f874 	bl	80078b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077d0:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <vPortFree+0xc0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	4a06      	ldr	r2, [pc, #24]	; (80077f0 <vPortFree+0xc0>)
 80077d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077da:	f001 ff4b 	bl	8009674 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077de:	bf00      	nop
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	200048c0 	.word	0x200048c0
 80077ec:	200048b0 	.word	0x200048b0
 80077f0:	200048bc 	.word	0x200048bc

080077f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80077fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007800:	4b27      	ldr	r3, [pc, #156]	; (80078a0 <prvHeapInit+0xac>)
 8007802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f003 0307 	and.w	r3, r3, #7
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00c      	beq.n	8007828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3307      	adds	r3, #7
 8007812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f023 0307 	bic.w	r3, r3, #7
 800781a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	4a1f      	ldr	r2, [pc, #124]	; (80078a0 <prvHeapInit+0xac>)
 8007824:	4413      	add	r3, r2
 8007826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800782c:	4a1d      	ldr	r2, [pc, #116]	; (80078a4 <prvHeapInit+0xb0>)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007832:	4b1c      	ldr	r3, [pc, #112]	; (80078a4 <prvHeapInit+0xb0>)
 8007834:	2200      	movs	r2, #0
 8007836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	4413      	add	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007840:	2208      	movs	r2, #8
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	1a9b      	subs	r3, r3, r2
 8007846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0307 	bic.w	r3, r3, #7
 800784e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4a15      	ldr	r2, [pc, #84]	; (80078a8 <prvHeapInit+0xb4>)
 8007854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007856:	4b14      	ldr	r3, [pc, #80]	; (80078a8 <prvHeapInit+0xb4>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2200      	movs	r2, #0
 800785c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800785e:	4b12      	ldr	r3, [pc, #72]	; (80078a8 <prvHeapInit+0xb4>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	1ad2      	subs	r2, r2, r3
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007874:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <prvHeapInit+0xb4>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	4a0a      	ldr	r2, [pc, #40]	; (80078ac <prvHeapInit+0xb8>)
 8007882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	4a09      	ldr	r2, [pc, #36]	; (80078b0 <prvHeapInit+0xbc>)
 800788a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800788c:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <prvHeapInit+0xc0>)
 800788e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007892:	601a      	str	r2, [r3, #0]
}
 8007894:	bf00      	nop
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	20000ca4 	.word	0x20000ca4
 80078a4:	200048a4 	.word	0x200048a4
 80078a8:	200048ac 	.word	0x200048ac
 80078ac:	200048b4 	.word	0x200048b4
 80078b0:	200048b0 	.word	0x200048b0
 80078b4:	200048c0 	.word	0x200048c0

080078b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078c0:	4b28      	ldr	r3, [pc, #160]	; (8007964 <prvInsertBlockIntoFreeList+0xac>)
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	e002      	b.n	80078cc <prvInsertBlockIntoFreeList+0x14>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d8f7      	bhi.n	80078c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	4413      	add	r3, r2
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d108      	bne.n	80078fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	441a      	add	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	441a      	add	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d118      	bne.n	8007940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	4b15      	ldr	r3, [pc, #84]	; (8007968 <prvInsertBlockIntoFreeList+0xb0>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	d00d      	beq.n	8007936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	441a      	add	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	e008      	b.n	8007948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007936:	4b0c      	ldr	r3, [pc, #48]	; (8007968 <prvInsertBlockIntoFreeList+0xb0>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	e003      	b.n	8007948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	429a      	cmp	r2, r3
 800794e:	d002      	beq.n	8007956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007956:	bf00      	nop
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	200048a4 	.word	0x200048a4
 8007968:	200048ac 	.word	0x200048ac

0800796c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f103 0208 	add.w	r2, r3, #8
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f04f 32ff 	mov.w	r2, #4294967295
 8007984:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f103 0208 	add.w	r2, r3, #8
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f103 0208 	add.w	r2, r3, #8
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079c6:	b480      	push	{r7}
 80079c8:	b085      	sub	sp, #20
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	601a      	str	r2, [r3, #0]
}
 8007a02:	bf00      	nop
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b085      	sub	sp, #20
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a24:	d103      	bne.n	8007a2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	e00c      	b.n	8007a48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3308      	adds	r3, #8
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	e002      	b.n	8007a3c <vListInsert+0x2e>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d2f6      	bcs.n	8007a36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	601a      	str	r2, [r3, #0]
}
 8007a74:	bf00      	nop
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6892      	ldr	r2, [r2, #8]
 8007a96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	6852      	ldr	r2, [r2, #4]
 8007aa0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d103      	bne.n	8007ab4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	1e5a      	subs	r2, r3, #1
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3b04      	subs	r3, #4
 8007ae4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3b04      	subs	r3, #4
 8007af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f023 0201 	bic.w	r2, r3, #1
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3b04      	subs	r3, #4
 8007b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b04:	4a0c      	ldr	r2, [pc, #48]	; (8007b38 <pxPortInitialiseStack+0x64>)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3b14      	subs	r3, #20
 8007b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3b04      	subs	r3, #4
 8007b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f06f 0202 	mvn.w	r2, #2
 8007b22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	3b20      	subs	r3, #32
 8007b28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	08007b3d 	.word	0x08007b3d

08007b3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b46:	4b12      	ldr	r3, [pc, #72]	; (8007b90 <prvTaskExitError+0x54>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4e:	d00a      	beq.n	8007b66 <prvTaskExitError+0x2a>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	60fb      	str	r3, [r7, #12]
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <prvTaskExitError+0x28>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	60bb      	str	r3, [r7, #8]
}
 8007b78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b7a:	bf00      	nop
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d0fc      	beq.n	8007b7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b82:	bf00      	nop
 8007b84:	bf00      	nop
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	20000034 	.word	0x20000034
	...

08007ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ba0:	4b07      	ldr	r3, [pc, #28]	; (8007bc0 <pxCurrentTCBConst2>)
 8007ba2:	6819      	ldr	r1, [r3, #0]
 8007ba4:	6808      	ldr	r0, [r1, #0]
 8007ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007baa:	f380 8809 	msr	PSP, r0
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f04f 0000 	mov.w	r0, #0
 8007bb6:	f380 8811 	msr	BASEPRI, r0
 8007bba:	4770      	bx	lr
 8007bbc:	f3af 8000 	nop.w

08007bc0 <pxCurrentTCBConst2>:
 8007bc0:	2000490c 	.word	0x2000490c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop

08007bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bc8:	4808      	ldr	r0, [pc, #32]	; (8007bec <prvPortStartFirstTask+0x24>)
 8007bca:	6800      	ldr	r0, [r0, #0]
 8007bcc:	6800      	ldr	r0, [r0, #0]
 8007bce:	f380 8808 	msr	MSP, r0
 8007bd2:	f04f 0000 	mov.w	r0, #0
 8007bd6:	f380 8814 	msr	CONTROL, r0
 8007bda:	b662      	cpsie	i
 8007bdc:	b661      	cpsie	f
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	df00      	svc	0
 8007be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bea:	bf00      	nop
 8007bec:	e000ed08 	.word	0xe000ed08

08007bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bf6:	4b46      	ldr	r3, [pc, #280]	; (8007d10 <xPortStartScheduler+0x120>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a46      	ldr	r2, [pc, #280]	; (8007d14 <xPortStartScheduler+0x124>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d10a      	bne.n	8007c16 <xPortStartScheduler+0x26>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	613b      	str	r3, [r7, #16]
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c16:	4b3e      	ldr	r3, [pc, #248]	; (8007d10 <xPortStartScheduler+0x120>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a3f      	ldr	r2, [pc, #252]	; (8007d18 <xPortStartScheduler+0x128>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d10a      	bne.n	8007c36 <xPortStartScheduler+0x46>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	60fb      	str	r3, [r7, #12]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c36:	4b39      	ldr	r3, [pc, #228]	; (8007d1c <xPortStartScheduler+0x12c>)
 8007c38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	22ff      	movs	r2, #255	; 0xff
 8007c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	4b31      	ldr	r3, [pc, #196]	; (8007d20 <xPortStartScheduler+0x130>)
 8007c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c5e:	4b31      	ldr	r3, [pc, #196]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c60:	2207      	movs	r2, #7
 8007c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c64:	e009      	b.n	8007c7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c66:	4b2f      	ldr	r3, [pc, #188]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	4a2d      	ldr	r2, [pc, #180]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c82:	2b80      	cmp	r3, #128	; 0x80
 8007c84:	d0ef      	beq.n	8007c66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c86:	4b27      	ldr	r3, [pc, #156]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f1c3 0307 	rsb	r3, r3, #7
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d00a      	beq.n	8007ca8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	60bb      	str	r3, [r7, #8]
}
 8007ca4:	bf00      	nop
 8007ca6:	e7fe      	b.n	8007ca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ca8:	4b1e      	ldr	r3, [pc, #120]	; (8007d24 <xPortStartScheduler+0x134>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	4a1d      	ldr	r2, [pc, #116]	; (8007d24 <xPortStartScheduler+0x134>)
 8007cb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cb2:	4b1c      	ldr	r3, [pc, #112]	; (8007d24 <xPortStartScheduler+0x134>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cba:	4a1a      	ldr	r2, [pc, #104]	; (8007d24 <xPortStartScheduler+0x134>)
 8007cbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cc6:	4b18      	ldr	r3, [pc, #96]	; (8007d28 <xPortStartScheduler+0x138>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a17      	ldr	r2, [pc, #92]	; (8007d28 <xPortStartScheduler+0x138>)
 8007ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cd2:	4b15      	ldr	r3, [pc, #84]	; (8007d28 <xPortStartScheduler+0x138>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a14      	ldr	r2, [pc, #80]	; (8007d28 <xPortStartScheduler+0x138>)
 8007cd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cde:	f000 f8dd 	bl	8007e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ce2:	4b12      	ldr	r3, [pc, #72]	; (8007d2c <xPortStartScheduler+0x13c>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ce8:	f000 f8fc 	bl	8007ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cec:	4b10      	ldr	r3, [pc, #64]	; (8007d30 <xPortStartScheduler+0x140>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a0f      	ldr	r2, [pc, #60]	; (8007d30 <xPortStartScheduler+0x140>)
 8007cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007cf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cf8:	f7ff ff66 	bl	8007bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cfc:	f001 fe22 	bl	8009944 <vTaskSwitchContext>
	prvTaskExitError();
 8007d00:	f7ff ff1c 	bl	8007b3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	e000ed00 	.word	0xe000ed00
 8007d14:	410fc271 	.word	0x410fc271
 8007d18:	410fc270 	.word	0x410fc270
 8007d1c:	e000e400 	.word	0xe000e400
 8007d20:	200048c4 	.word	0x200048c4
 8007d24:	200048c8 	.word	0x200048c8
 8007d28:	e000ed20 	.word	0xe000ed20
 8007d2c:	20000034 	.word	0x20000034
 8007d30:	e000ef34 	.word	0xe000ef34

08007d34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
	__asm volatile
 8007d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	607b      	str	r3, [r7, #4]
}
 8007d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d4e:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <vPortEnterCritical+0x58>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3301      	adds	r3, #1
 8007d54:	4a0d      	ldr	r2, [pc, #52]	; (8007d8c <vPortEnterCritical+0x58>)
 8007d56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d58:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <vPortEnterCritical+0x58>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d10f      	bne.n	8007d80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d60:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <vPortEnterCritical+0x5c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	603b      	str	r3, [r7, #0]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <vPortEnterCritical+0x4a>
	}
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	20000034 	.word	0x20000034
 8007d90:	e000ed04 	.word	0xe000ed04

08007d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d9a:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <vPortExitCritical+0x50>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10a      	bne.n	8007db8 <vPortExitCritical+0x24>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	607b      	str	r3, [r7, #4]
}
 8007db4:	bf00      	nop
 8007db6:	e7fe      	b.n	8007db6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007db8:	4b0a      	ldr	r3, [pc, #40]	; (8007de4 <vPortExitCritical+0x50>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	4a09      	ldr	r2, [pc, #36]	; (8007de4 <vPortExitCritical+0x50>)
 8007dc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dc2:	4b08      	ldr	r3, [pc, #32]	; (8007de4 <vPortExitCritical+0x50>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d105      	bne.n	8007dd6 <vPortExitCritical+0x42>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007dd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	20000034 	.word	0x20000034
	...

08007df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007df0:	f3ef 8009 	mrs	r0, PSP
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <pxCurrentTCBConst>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	f01e 0f10 	tst.w	lr, #16
 8007e00:	bf08      	it	eq
 8007e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0a:	6010      	str	r0, [r2, #0]
 8007e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e14:	f380 8811 	msr	BASEPRI, r0
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f001 fd90 	bl	8009944 <vTaskSwitchContext>
 8007e24:	f04f 0000 	mov.w	r0, #0
 8007e28:	f380 8811 	msr	BASEPRI, r0
 8007e2c:	bc09      	pop	{r0, r3}
 8007e2e:	6819      	ldr	r1, [r3, #0]
 8007e30:	6808      	ldr	r0, [r1, #0]
 8007e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e36:	f01e 0f10 	tst.w	lr, #16
 8007e3a:	bf08      	it	eq
 8007e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e40:	f380 8809 	msr	PSP, r0
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	f3af 8000 	nop.w

08007e50 <pxCurrentTCBConst>:
 8007e50:	2000490c 	.word	0x2000490c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop

08007e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	607b      	str	r3, [r7, #4]
}
 8007e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e72:	f001 fcad 	bl	80097d0 <xTaskIncrementTick>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e7c:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <xPortSysTickHandler+0x40>)
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	2300      	movs	r3, #0
 8007e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	f383 8811 	msr	BASEPRI, r3
}
 8007e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ea0:	4b0b      	ldr	r3, [pc, #44]	; (8007ed0 <vPortSetupTimerInterrupt+0x34>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <vPortSetupTimerInterrupt+0x38>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007eac:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <vPortSetupTimerInterrupt+0x3c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a0a      	ldr	r2, [pc, #40]	; (8007edc <vPortSetupTimerInterrupt+0x40>)
 8007eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb6:	099b      	lsrs	r3, r3, #6
 8007eb8:	4a09      	ldr	r2, [pc, #36]	; (8007ee0 <vPortSetupTimerInterrupt+0x44>)
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ebe:	4b04      	ldr	r3, [pc, #16]	; (8007ed0 <vPortSetupTimerInterrupt+0x34>)
 8007ec0:	2207      	movs	r2, #7
 8007ec2:	601a      	str	r2, [r3, #0]
}
 8007ec4:	bf00      	nop
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	e000e010 	.word	0xe000e010
 8007ed4:	e000e018 	.word	0xe000e018
 8007ed8:	20000018 	.word	0x20000018
 8007edc:	10624dd3 	.word	0x10624dd3
 8007ee0:	e000e014 	.word	0xe000e014

08007ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ef4 <vPortEnableVFP+0x10>
 8007ee8:	6801      	ldr	r1, [r0, #0]
 8007eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007eee:	6001      	str	r1, [r0, #0]
 8007ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ef2:	bf00      	nop
 8007ef4:	e000ed88 	.word	0xe000ed88

08007ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007efe:	f3ef 8305 	mrs	r3, IPSR
 8007f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b0f      	cmp	r3, #15
 8007f08:	d914      	bls.n	8007f34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f0a:	4a17      	ldr	r2, [pc, #92]	; (8007f68 <vPortValidateInterruptPriority+0x70>)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f14:	4b15      	ldr	r3, [pc, #84]	; (8007f6c <vPortValidateInterruptPriority+0x74>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	7afa      	ldrb	r2, [r7, #11]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d20a      	bcs.n	8007f34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	607b      	str	r3, [r7, #4]
}
 8007f30:	bf00      	nop
 8007f32:	e7fe      	b.n	8007f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f34:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <vPortValidateInterruptPriority+0x78>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f3c:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <vPortValidateInterruptPriority+0x7c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d90a      	bls.n	8007f5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	603b      	str	r3, [r7, #0]
}
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <vPortValidateInterruptPriority+0x60>
	}
 8007f5a:	bf00      	nop
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	e000e3f0 	.word	0xe000e3f0
 8007f6c:	200048c4 	.word	0x200048c4
 8007f70:	e000ed0c 	.word	0xe000ed0c
 8007f74:	200048c8 	.word	0x200048c8

08007f78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10a      	bne.n	8007fa2 <xQueueGenericReset+0x2a>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	60bb      	str	r3, [r7, #8]
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007fa2:	f7ff fec7 	bl	8007d34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fae:	68f9      	ldr	r1, [r7, #12]
 8007fb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fb2:	fb01 f303 	mul.w	r3, r1, r3
 8007fb6:	441a      	add	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	68f9      	ldr	r1, [r7, #12]
 8007fd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fd8:	fb01 f303 	mul.w	r3, r1, r3
 8007fdc:	441a      	add	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	22ff      	movs	r2, #255	; 0xff
 8007fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	22ff      	movs	r2, #255	; 0xff
 8007fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d114      	bne.n	8008022 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01a      	beq.n	8008036 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	3310      	adds	r3, #16
 8008004:	4618      	mov	r0, r3
 8008006:	f001 fd51 	bl	8009aac <xTaskRemoveFromEventList>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d012      	beq.n	8008036 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008010:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <xQueueGenericReset+0xcc>)
 8008012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	e009      	b.n	8008036 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3310      	adds	r3, #16
 8008026:	4618      	mov	r0, r3
 8008028:	f7ff fca0 	bl	800796c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3324      	adds	r3, #36	; 0x24
 8008030:	4618      	mov	r0, r3
 8008032:	f7ff fc9b 	bl	800796c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008036:	f7ff fead 	bl	8007d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800803a:	2301      	movs	r3, #1
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	e000ed04 	.word	0xe000ed04

08008048 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08e      	sub	sp, #56	; 0x38
 800804c:	af02      	add	r7, sp, #8
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
 8008054:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10a      	bne.n	8008072 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
}
 800808a:	bf00      	nop
 800808c:	e7fe      	b.n	800808c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d002      	beq.n	800809a <xQueueGenericCreateStatic+0x52>
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <xQueueGenericCreateStatic+0x56>
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <xQueueGenericCreateStatic+0x58>
 800809e:	2300      	movs	r3, #0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10a      	bne.n	80080ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	623b      	str	r3, [r7, #32]
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d102      	bne.n	80080c6 <xQueueGenericCreateStatic+0x7e>
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <xQueueGenericCreateStatic+0x82>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <xQueueGenericCreateStatic+0x84>
 80080ca:	2300      	movs	r3, #0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10a      	bne.n	80080e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	61fb      	str	r3, [r7, #28]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080e6:	2350      	movs	r3, #80	; 0x50
 80080e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b50      	cmp	r3, #80	; 0x50
 80080ee:	d00a      	beq.n	8008106 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	61bb      	str	r3, [r7, #24]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008106:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00d      	beq.n	800812e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800811a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	4613      	mov	r3, r2
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	68b9      	ldr	r1, [r7, #8]
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 f83f 	bl	80081ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008130:	4618      	mov	r0, r3
 8008132:	3730      	adds	r7, #48	; 0x30
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08a      	sub	sp, #40	; 0x28
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	4613      	mov	r3, r2
 8008144:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10a      	bne.n	8008162 <xQueueGenericCreate+0x2a>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	613b      	str	r3, [r7, #16]
}
 800815e:	bf00      	nop
 8008160:	e7fe      	b.n	8008160 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	fb02 f303 	mul.w	r3, r2, r3
 800816a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	3350      	adds	r3, #80	; 0x50
 8008170:	4618      	mov	r0, r3
 8008172:	f7ff fa11 	bl	8007598 <pvPortMalloc>
 8008176:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d011      	beq.n	80081a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	3350      	adds	r3, #80	; 0x50
 8008186:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008190:	79fa      	ldrb	r2, [r7, #7]
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	4613      	mov	r3, r2
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	68b9      	ldr	r1, [r7, #8]
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 f805 	bl	80081ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081a2:	69bb      	ldr	r3, [r7, #24]
	}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3720      	adds	r7, #32
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d103      	bne.n	80081c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	e002      	b.n	80081ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081da:	2101      	movs	r1, #1
 80081dc:	69b8      	ldr	r0, [r7, #24]
 80081de:	f7ff fecb 	bl	8007f78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	78fa      	ldrb	r2, [r7, #3]
 80081e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081ea:	bf00      	nop
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b08a      	sub	sp, #40	; 0x28
 80081f6:	af02      	add	r7, sp, #8
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	61bb      	str	r3, [r7, #24]
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	429a      	cmp	r2, r3
 8008220:	d90a      	bls.n	8008238 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	617b      	str	r3, [r7, #20]
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008238:	2302      	movs	r3, #2
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	2100      	movs	r1, #0
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f7ff ff00 	bl	8008048 <xQueueGenericCreateStatic>
 8008248:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008256:	69fb      	ldr	r3, [r7, #28]
	}
 8008258:	4618      	mov	r0, r3
 800825a:	3720      	adds	r7, #32
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	613b      	str	r3, [r7, #16]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	429a      	cmp	r2, r3
 800828c:	d90a      	bls.n	80082a4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	60fb      	str	r3, [r7, #12]
}
 80082a0:	bf00      	nop
 80082a2:	e7fe      	b.n	80082a2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80082a4:	2202      	movs	r2, #2
 80082a6:	2100      	movs	r1, #0
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7ff ff45 	bl	8008138 <xQueueGenericCreate>
 80082ae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80082bc:	697b      	ldr	r3, [r7, #20]
	}
 80082be:	4618      	mov	r0, r3
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08e      	sub	sp, #56	; 0x38
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80082d6:	2300      	movs	r3, #0
 80082d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80082de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <xQueueGenericSend+0x32>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <xQueueGenericSend+0x40>
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <xQueueGenericSend+0x44>
 8008308:	2301      	movs	r3, #1
 800830a:	e000      	b.n	800830e <xQueueGenericSend+0x46>
 800830c:	2300      	movs	r3, #0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10a      	bne.n	8008328 <xQueueGenericSend+0x60>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008324:	bf00      	nop
 8008326:	e7fe      	b.n	8008326 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d103      	bne.n	8008336 <xQueueGenericSend+0x6e>
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008332:	2b01      	cmp	r3, #1
 8008334:	d101      	bne.n	800833a <xQueueGenericSend+0x72>
 8008336:	2301      	movs	r3, #1
 8008338:	e000      	b.n	800833c <xQueueGenericSend+0x74>
 800833a:	2300      	movs	r3, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10a      	bne.n	8008356 <xQueueGenericSend+0x8e>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	623b      	str	r3, [r7, #32]
}
 8008352:	bf00      	nop
 8008354:	e7fe      	b.n	8008354 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008356:	f001 fd6b 	bl	8009e30 <xTaskGetSchedulerState>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d102      	bne.n	8008366 <xQueueGenericSend+0x9e>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <xQueueGenericSend+0xa2>
 8008366:	2301      	movs	r3, #1
 8008368:	e000      	b.n	800836c <xQueueGenericSend+0xa4>
 800836a:	2300      	movs	r3, #0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10a      	bne.n	8008386 <xQueueGenericSend+0xbe>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	61fb      	str	r3, [r7, #28]
}
 8008382:	bf00      	nop
 8008384:	e7fe      	b.n	8008384 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008386:	f7ff fcd5 	bl	8007d34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008392:	429a      	cmp	r2, r3
 8008394:	d302      	bcc.n	800839c <xQueueGenericSend+0xd4>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b02      	cmp	r3, #2
 800839a:	d129      	bne.n	80083f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083a2:	f000 fc5e 	bl	8008c62 <prvCopyDataToQueue>
 80083a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d010      	beq.n	80083d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	3324      	adds	r3, #36	; 0x24
 80083b4:	4618      	mov	r0, r3
 80083b6:	f001 fb79 	bl	8009aac <xTaskRemoveFromEventList>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d013      	beq.n	80083e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80083c0:	4b3f      	ldr	r3, [pc, #252]	; (80084c0 <xQueueGenericSend+0x1f8>)
 80083c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	e00a      	b.n	80083e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d007      	beq.n	80083e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80083d8:	4b39      	ldr	r3, [pc, #228]	; (80084c0 <xQueueGenericSend+0x1f8>)
 80083da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80083e8:	f7ff fcd4 	bl	8007d94 <vPortExitCritical>
				return pdPASS;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e063      	b.n	80084b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d103      	bne.n	80083fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083f6:	f7ff fccd 	bl	8007d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	e05c      	b.n	80084b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008400:	2b00      	cmp	r3, #0
 8008402:	d106      	bne.n	8008412 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008404:	f107 0314 	add.w	r3, r7, #20
 8008408:	4618      	mov	r0, r3
 800840a:	f001 fbb3 	bl	8009b74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800840e:	2301      	movs	r3, #1
 8008410:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008412:	f7ff fcbf 	bl	8007d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008416:	f001 f91f 	bl	8009658 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800841a:	f7ff fc8b 	bl	8007d34 <vPortEnterCritical>
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008424:	b25b      	sxtb	r3, r3
 8008426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842a:	d103      	bne.n	8008434 <xQueueGenericSend+0x16c>
 800842c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842e:	2200      	movs	r2, #0
 8008430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008436:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800843a:	b25b      	sxtb	r3, r3
 800843c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008440:	d103      	bne.n	800844a <xQueueGenericSend+0x182>
 8008442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800844a:	f7ff fca3 	bl	8007d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800844e:	1d3a      	adds	r2, r7, #4
 8008450:	f107 0314 	add.w	r3, r7, #20
 8008454:	4611      	mov	r1, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f001 fba2 	bl	8009ba0 <xTaskCheckForTimeOut>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d124      	bne.n	80084ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008464:	f000 fcf5 	bl	8008e52 <prvIsQueueFull>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d018      	beq.n	80084a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	3310      	adds	r3, #16
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	4611      	mov	r1, r2
 8008476:	4618      	mov	r0, r3
 8008478:	f001 fac8 	bl	8009a0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800847c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800847e:	f000 fc80 	bl	8008d82 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008482:	f001 f8f7 	bl	8009674 <xTaskResumeAll>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	f47f af7c 	bne.w	8008386 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800848e:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <xQueueGenericSend+0x1f8>)
 8008490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	e772      	b.n	8008386 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80084a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084a2:	f000 fc6e 	bl	8008d82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084a6:	f001 f8e5 	bl	8009674 <xTaskResumeAll>
 80084aa:	e76c      	b.n	8008386 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80084ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084ae:	f000 fc68 	bl	8008d82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084b2:	f001 f8df 	bl	8009674 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80084b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3738      	adds	r7, #56	; 0x38
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	e000ed04 	.word	0xe000ed04

080084c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b090      	sub	sp, #64	; 0x40
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80084d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084ee:	bf00      	nop
 80084f0:	e7fe      	b.n	80084f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d103      	bne.n	8008500 <xQueueGenericSendFromISR+0x3c>
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <xQueueGenericSendFromISR+0x40>
 8008500:	2301      	movs	r3, #1
 8008502:	e000      	b.n	8008506 <xQueueGenericSendFromISR+0x42>
 8008504:	2300      	movs	r3, #0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10a      	bne.n	8008520 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800851c:	bf00      	nop
 800851e:	e7fe      	b.n	800851e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2b02      	cmp	r3, #2
 8008524:	d103      	bne.n	800852e <xQueueGenericSendFromISR+0x6a>
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852a:	2b01      	cmp	r3, #1
 800852c:	d101      	bne.n	8008532 <xQueueGenericSendFromISR+0x6e>
 800852e:	2301      	movs	r3, #1
 8008530:	e000      	b.n	8008534 <xQueueGenericSendFromISR+0x70>
 8008532:	2300      	movs	r3, #0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10a      	bne.n	800854e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	623b      	str	r3, [r7, #32]
}
 800854a:	bf00      	nop
 800854c:	e7fe      	b.n	800854c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800854e:	f7ff fcd3 	bl	8007ef8 <vPortValidateInterruptPriority>
	__asm volatile
 8008552:	f3ef 8211 	mrs	r2, BASEPRI
 8008556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	61fa      	str	r2, [r7, #28]
 8008568:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800856a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800856c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008576:	429a      	cmp	r2, r3
 8008578:	d302      	bcc.n	8008580 <xQueueGenericSendFromISR+0xbc>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b02      	cmp	r3, #2
 800857e:	d12f      	bne.n	80085e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008582:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	68b9      	ldr	r1, [r7, #8]
 8008594:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008596:	f000 fb64 	bl	8008c62 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800859a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a2:	d112      	bne.n	80085ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d016      	beq.n	80085da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ae:	3324      	adds	r3, #36	; 0x24
 80085b0:	4618      	mov	r0, r3
 80085b2:	f001 fa7b 	bl	8009aac <xTaskRemoveFromEventList>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00e      	beq.n	80085da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00b      	beq.n	80085da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	e007      	b.n	80085da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80085ce:	3301      	adds	r3, #1
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	b25a      	sxtb	r2, r3
 80085d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80085da:	2301      	movs	r3, #1
 80085dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80085de:	e001      	b.n	80085e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80085e0:	2300      	movs	r3, #0
 80085e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f383 8811 	msr	BASEPRI, r3
}
 80085ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3740      	adds	r7, #64	; 0x40
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b08e      	sub	sp, #56	; 0x38
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10a      	bne.n	8008624 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	623b      	str	r3, [r7, #32]
}
 8008620:	bf00      	nop
 8008622:	e7fe      	b.n	8008622 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00a      	beq.n	8008642 <xQueueGiveFromISR+0x48>
	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	61fb      	str	r3, [r7, #28]
}
 800863e:	bf00      	nop
 8008640:	e7fe      	b.n	8008640 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d103      	bne.n	8008652 <xQueueGiveFromISR+0x58>
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d101      	bne.n	8008656 <xQueueGiveFromISR+0x5c>
 8008652:	2301      	movs	r3, #1
 8008654:	e000      	b.n	8008658 <xQueueGiveFromISR+0x5e>
 8008656:	2300      	movs	r3, #0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10a      	bne.n	8008672 <xQueueGiveFromISR+0x78>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	61bb      	str	r3, [r7, #24]
}
 800866e:	bf00      	nop
 8008670:	e7fe      	b.n	8008670 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008672:	f7ff fc41 	bl	8007ef8 <vPortValidateInterruptPriority>
	__asm volatile
 8008676:	f3ef 8211 	mrs	r2, BASEPRI
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	617a      	str	r2, [r7, #20]
 800868c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800868e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008690:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008696:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800869e:	429a      	cmp	r2, r3
 80086a0:	d22b      	bcs.n	80086fa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80086b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086bc:	d112      	bne.n	80086e4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d016      	beq.n	80086f4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	3324      	adds	r3, #36	; 0x24
 80086ca:	4618      	mov	r0, r3
 80086cc:	f001 f9ee 	bl	8009aac <xTaskRemoveFromEventList>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00e      	beq.n	80086f4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00b      	beq.n	80086f4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2201      	movs	r2, #1
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	e007      	b.n	80086f4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086e8:	3301      	adds	r3, #1
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	b25a      	sxtb	r2, r3
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80086f4:	2301      	movs	r3, #1
 80086f6:	637b      	str	r3, [r7, #52]	; 0x34
 80086f8:	e001      	b.n	80086fe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	637b      	str	r3, [r7, #52]	; 0x34
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f383 8811 	msr	BASEPRI, r3
}
 8008708:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800870a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800870c:	4618      	mov	r0, r3
 800870e:	3738      	adds	r7, #56	; 0x38
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b08c      	sub	sp, #48	; 0x30
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008720:	2300      	movs	r3, #0
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10a      	bne.n	8008744 <xQueueReceive+0x30>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	623b      	str	r3, [r7, #32]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <xQueueReceive+0x3e>
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <xQueueReceive+0x42>
 8008752:	2301      	movs	r3, #1
 8008754:	e000      	b.n	8008758 <xQueueReceive+0x44>
 8008756:	2300      	movs	r3, #0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10a      	bne.n	8008772 <xQueueReceive+0x5e>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	61fb      	str	r3, [r7, #28]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008772:	f001 fb5d 	bl	8009e30 <xTaskGetSchedulerState>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d102      	bne.n	8008782 <xQueueReceive+0x6e>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <xQueueReceive+0x72>
 8008782:	2301      	movs	r3, #1
 8008784:	e000      	b.n	8008788 <xQueueReceive+0x74>
 8008786:	2300      	movs	r3, #0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10a      	bne.n	80087a2 <xQueueReceive+0x8e>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	61bb      	str	r3, [r7, #24]
}
 800879e:	bf00      	nop
 80087a0:	e7fe      	b.n	80087a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087a2:	f7ff fac7 	bl	8007d34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d01f      	beq.n	80087f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087b2:	68b9      	ldr	r1, [r7, #8]
 80087b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b6:	f000 fabe 	bl	8008d36 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	1e5a      	subs	r2, r3, #1
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00f      	beq.n	80087ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	3310      	adds	r3, #16
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 f96c 	bl	8009aac <xTaskRemoveFromEventList>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d007      	beq.n	80087ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087da:	4b3d      	ldr	r3, [pc, #244]	; (80088d0 <xQueueReceive+0x1bc>)
 80087dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087ea:	f7ff fad3 	bl	8007d94 <vPortExitCritical>
				return pdPASS;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e069      	b.n	80088c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d103      	bne.n	8008800 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087f8:	f7ff facc 	bl	8007d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087fc:	2300      	movs	r3, #0
 80087fe:	e062      	b.n	80088c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d106      	bne.n	8008814 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008806:	f107 0310 	add.w	r3, r7, #16
 800880a:	4618      	mov	r0, r3
 800880c:	f001 f9b2 	bl	8009b74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008810:	2301      	movs	r3, #1
 8008812:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008814:	f7ff fabe 	bl	8007d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008818:	f000 ff1e 	bl	8009658 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800881c:	f7ff fa8a 	bl	8007d34 <vPortEnterCritical>
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008826:	b25b      	sxtb	r3, r3
 8008828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882c:	d103      	bne.n	8008836 <xQueueReceive+0x122>
 800882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800883c:	b25b      	sxtb	r3, r3
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008842:	d103      	bne.n	800884c <xQueueReceive+0x138>
 8008844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800884c:	f7ff faa2 	bl	8007d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008850:	1d3a      	adds	r2, r7, #4
 8008852:	f107 0310 	add.w	r3, r7, #16
 8008856:	4611      	mov	r1, r2
 8008858:	4618      	mov	r0, r3
 800885a:	f001 f9a1 	bl	8009ba0 <xTaskCheckForTimeOut>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d123      	bne.n	80088ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008866:	f000 fade 	bl	8008e26 <prvIsQueueEmpty>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d017      	beq.n	80088a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	3324      	adds	r3, #36	; 0x24
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	4611      	mov	r1, r2
 8008878:	4618      	mov	r0, r3
 800887a:	f001 f8c7 	bl	8009a0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800887e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008880:	f000 fa7f 	bl	8008d82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008884:	f000 fef6 	bl	8009674 <xTaskResumeAll>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d189      	bne.n	80087a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800888e:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <xQueueReceive+0x1bc>)
 8008890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	e780      	b.n	80087a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80088a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088a2:	f000 fa6e 	bl	8008d82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088a6:	f000 fee5 	bl	8009674 <xTaskResumeAll>
 80088aa:	e77a      	b.n	80087a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ae:	f000 fa68 	bl	8008d82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088b2:	f000 fedf 	bl	8009674 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088b8:	f000 fab5 	bl	8008e26 <prvIsQueueEmpty>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f43f af6f 	beq.w	80087a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3730      	adds	r7, #48	; 0x30
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	e000ed04 	.word	0xe000ed04

080088d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08e      	sub	sp, #56	; 0x38
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80088de:	2300      	movs	r3, #0
 80088e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80088e6:	2300      	movs	r3, #0
 80088e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80088ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10a      	bne.n	8008906 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	623b      	str	r3, [r7, #32]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00a      	beq.n	8008924 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	61fb      	str	r3, [r7, #28]
}
 8008920:	bf00      	nop
 8008922:	e7fe      	b.n	8008922 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008924:	f001 fa84 	bl	8009e30 <xTaskGetSchedulerState>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d102      	bne.n	8008934 <xQueueSemaphoreTake+0x60>
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <xQueueSemaphoreTake+0x64>
 8008934:	2301      	movs	r3, #1
 8008936:	e000      	b.n	800893a <xQueueSemaphoreTake+0x66>
 8008938:	2300      	movs	r3, #0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10a      	bne.n	8008954 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	61bb      	str	r3, [r7, #24]
}
 8008950:	bf00      	nop
 8008952:	e7fe      	b.n	8008952 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008954:	f7ff f9ee 	bl	8007d34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800895e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008960:	2b00      	cmp	r3, #0
 8008962:	d024      	beq.n	80089ae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	1e5a      	subs	r2, r3, #1
 8008968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d104      	bne.n	800897e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008974:	f001 fbd2 	bl	800a11c <pvTaskIncrementMutexHeldCount>
 8008978:	4602      	mov	r2, r0
 800897a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800897e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00f      	beq.n	80089a6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008988:	3310      	adds	r3, #16
 800898a:	4618      	mov	r0, r3
 800898c:	f001 f88e 	bl	8009aac <xTaskRemoveFromEventList>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d007      	beq.n	80089a6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008996:	4b54      	ldr	r3, [pc, #336]	; (8008ae8 <xQueueSemaphoreTake+0x214>)
 8008998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089a6:	f7ff f9f5 	bl	8007d94 <vPortExitCritical>
				return pdPASS;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e097      	b.n	8008ade <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d111      	bne.n	80089d8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00a      	beq.n	80089d0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	617b      	str	r3, [r7, #20]
}
 80089cc:	bf00      	nop
 80089ce:	e7fe      	b.n	80089ce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80089d0:	f7ff f9e0 	bl	8007d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80089d4:	2300      	movs	r3, #0
 80089d6:	e082      	b.n	8008ade <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d106      	bne.n	80089ec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089de:	f107 030c 	add.w	r3, r7, #12
 80089e2:	4618      	mov	r0, r3
 80089e4:	f001 f8c6 	bl	8009b74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089e8:	2301      	movs	r3, #1
 80089ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089ec:	f7ff f9d2 	bl	8007d94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089f0:	f000 fe32 	bl	8009658 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089f4:	f7ff f99e 	bl	8007d34 <vPortEnterCritical>
 80089f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089fe:	b25b      	sxtb	r3, r3
 8008a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a04:	d103      	bne.n	8008a0e <xQueueSemaphoreTake+0x13a>
 8008a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a14:	b25b      	sxtb	r3, r3
 8008a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1a:	d103      	bne.n	8008a24 <xQueueSemaphoreTake+0x150>
 8008a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a24:	f7ff f9b6 	bl	8007d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a28:	463a      	mov	r2, r7
 8008a2a:	f107 030c 	add.w	r3, r7, #12
 8008a2e:	4611      	mov	r1, r2
 8008a30:	4618      	mov	r0, r3
 8008a32:	f001 f8b5 	bl	8009ba0 <xTaskCheckForTimeOut>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d132      	bne.n	8008aa2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a3e:	f000 f9f2 	bl	8008e26 <prvIsQueueEmpty>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d026      	beq.n	8008a96 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d109      	bne.n	8008a64 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008a50:	f7ff f970 	bl	8007d34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f001 fa07 	bl	8009e6c <xTaskPriorityInherit>
 8008a5e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008a60:	f7ff f998 	bl	8007d94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a66:	3324      	adds	r3, #36	; 0x24
 8008a68:	683a      	ldr	r2, [r7, #0]
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 ffcd 	bl	8009a0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a74:	f000 f985 	bl	8008d82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a78:	f000 fdfc 	bl	8009674 <xTaskResumeAll>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f47f af68 	bne.w	8008954 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008a84:	4b18      	ldr	r3, [pc, #96]	; (8008ae8 <xQueueSemaphoreTake+0x214>)
 8008a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a8a:	601a      	str	r2, [r3, #0]
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	e75e      	b.n	8008954 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008a96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a98:	f000 f973 	bl	8008d82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a9c:	f000 fdea 	bl	8009674 <xTaskResumeAll>
 8008aa0:	e758      	b.n	8008954 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008aa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008aa4:	f000 f96d 	bl	8008d82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008aa8:	f000 fde4 	bl	8009674 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008aae:	f000 f9ba 	bl	8008e26 <prvIsQueueEmpty>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f43f af4d 	beq.w	8008954 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00d      	beq.n	8008adc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008ac0:	f7ff f938 	bl	8007d34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008ac4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ac6:	f000 f8b4 	bl	8008c32 <prvGetDisinheritPriorityAfterTimeout>
 8008aca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f001 faa0 	bl	800a018 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008ad8:	f7ff f95c 	bl	8007d94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008adc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3738      	adds	r7, #56	; 0x38
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	e000ed04 	.word	0xe000ed04

08008aec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08e      	sub	sp, #56	; 0x38
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10a      	bne.n	8008b18 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	623b      	str	r3, [r7, #32]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d103      	bne.n	8008b26 <xQueueReceiveFromISR+0x3a>
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <xQueueReceiveFromISR+0x3e>
 8008b26:	2301      	movs	r3, #1
 8008b28:	e000      	b.n	8008b2c <xQueueReceiveFromISR+0x40>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10a      	bne.n	8008b46 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	61fb      	str	r3, [r7, #28]
}
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b46:	f7ff f9d7 	bl	8007ef8 <vPortValidateInterruptPriority>
	__asm volatile
 8008b4a:	f3ef 8211 	mrs	r2, BASEPRI
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	61ba      	str	r2, [r7, #24]
 8008b60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008b62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d02f      	beq.n	8008bd2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b7c:	68b9      	ldr	r1, [r7, #8]
 8008b7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b80:	f000 f8d9 	bl	8008d36 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	1e5a      	subs	r2, r3, #1
 8008b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008b8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b94:	d112      	bne.n	8008bbc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d016      	beq.n	8008bcc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	3310      	adds	r3, #16
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 ff82 	bl	8009aac <xTaskRemoveFromEventList>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00e      	beq.n	8008bcc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00b      	beq.n	8008bcc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	e007      	b.n	8008bcc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	b25a      	sxtb	r2, r3
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	637b      	str	r3, [r7, #52]	; 0x34
 8008bd0:	e001      	b.n	8008bd6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f383 8811 	msr	BASEPRI, r3
}
 8008be0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3738      	adds	r7, #56	; 0x38
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10a      	bne.n	8008c14 <vQueueDelete+0x28>
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	60bb      	str	r3, [r7, #8]
}
 8008c10:	bf00      	nop
 8008c12:	e7fe      	b.n	8008c12 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 f95f 	bl	8008ed8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d102      	bne.n	8008c2a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7fe fd83 	bl	8007730 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008c32:	b480      	push	{r7}
 8008c34:	b085      	sub	sp, #20
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d006      	beq.n	8008c50 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008c4c:	60fb      	str	r3, [r7, #12]
 8008c4e:	e001      	b.n	8008c54 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008c50:	2300      	movs	r3, #0
 8008c52:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008c54:	68fb      	ldr	r3, [r7, #12]
	}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b086      	sub	sp, #24
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c76:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10d      	bne.n	8008c9c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d14d      	bne.n	8008d24 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 f955 	bl	8009f3c <xTaskPriorityDisinherit>
 8008c92:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	609a      	str	r2, [r3, #8]
 8008c9a:	e043      	b.n	8008d24 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d119      	bne.n	8008cd6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6858      	ldr	r0, [r3, #4]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008caa:	461a      	mov	r2, r3
 8008cac:	68b9      	ldr	r1, [r7, #8]
 8008cae:	f001 fff2 	bl	800ac96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	441a      	add	r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d32b      	bcc.n	8008d24 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	605a      	str	r2, [r3, #4]
 8008cd4:	e026      	b.n	8008d24 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	68d8      	ldr	r0, [r3, #12]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cde:	461a      	mov	r2, r3
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	f001 ffd8 	bl	800ac96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	425b      	negs	r3, r3
 8008cf0:	441a      	add	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d207      	bcs.n	8008d12 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	689a      	ldr	r2, [r3, #8]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	425b      	negs	r3, r3
 8008d0c:	441a      	add	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d105      	bne.n	8008d24 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	1c5a      	adds	r2, r3, #1
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d2c:	697b      	ldr	r3, [r7, #20]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b082      	sub	sp, #8
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d018      	beq.n	8008d7a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68da      	ldr	r2, [r3, #12]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d50:	441a      	add	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d303      	bcc.n	8008d6a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68d9      	ldr	r1, [r3, #12]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d72:	461a      	mov	r2, r3
 8008d74:	6838      	ldr	r0, [r7, #0]
 8008d76:	f001 ff8e 	bl	800ac96 <memcpy>
	}
}
 8008d7a:	bf00      	nop
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b084      	sub	sp, #16
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d8a:	f7fe ffd3 	bl	8007d34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d94:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d96:	e011      	b.n	8008dbc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d012      	beq.n	8008dc6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3324      	adds	r3, #36	; 0x24
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 fe81 	bl	8009aac <xTaskRemoveFromEventList>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d001      	beq.n	8008db4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008db0:	f000 ff58 	bl	8009c64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	dce9      	bgt.n	8008d98 <prvUnlockQueue+0x16>
 8008dc4:	e000      	b.n	8008dc8 <prvUnlockQueue+0x46>
					break;
 8008dc6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	22ff      	movs	r2, #255	; 0xff
 8008dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008dd0:	f7fe ffe0 	bl	8007d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008dd4:	f7fe ffae 	bl	8007d34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dde:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008de0:	e011      	b.n	8008e06 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d012      	beq.n	8008e10 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	3310      	adds	r3, #16
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 fe5c 	bl	8009aac <xTaskRemoveFromEventList>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008dfa:	f000 ff33 	bl	8009c64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	3b01      	subs	r3, #1
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	dce9      	bgt.n	8008de2 <prvUnlockQueue+0x60>
 8008e0e:	e000      	b.n	8008e12 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e10:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	22ff      	movs	r2, #255	; 0xff
 8008e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e1a:	f7fe ffbb 	bl	8007d94 <vPortExitCritical>
}
 8008e1e:	bf00      	nop
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b084      	sub	sp, #16
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e2e:	f7fe ff81 	bl	8007d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d102      	bne.n	8008e40 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	60fb      	str	r3, [r7, #12]
 8008e3e:	e001      	b.n	8008e44 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e40:	2300      	movs	r3, #0
 8008e42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e44:	f7fe ffa6 	bl	8007d94 <vPortExitCritical>

	return xReturn;
 8008e48:	68fb      	ldr	r3, [r7, #12]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e5a:	f7fe ff6b 	bl	8007d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d102      	bne.n	8008e70 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]
 8008e6e:	e001      	b.n	8008e74 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e74:	f7fe ff8e 	bl	8007d94 <vPortExitCritical>

	return xReturn;
 8008e78:	68fb      	ldr	r3, [r7, #12]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e8e:	2300      	movs	r3, #0
 8008e90:	60fb      	str	r3, [r7, #12]
 8008e92:	e014      	b.n	8008ebe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e94:	4a0f      	ldr	r2, [pc, #60]	; (8008ed4 <vQueueAddToRegistry+0x50>)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10b      	bne.n	8008eb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ea0:	490c      	ldr	r1, [pc, #48]	; (8008ed4 <vQueueAddToRegistry+0x50>)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008eaa:	4a0a      	ldr	r2, [pc, #40]	; (8008ed4 <vQueueAddToRegistry+0x50>)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	4413      	add	r3, r2
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008eb6:	e006      	b.n	8008ec6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b07      	cmp	r3, #7
 8008ec2:	d9e7      	bls.n	8008e94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	200048cc 	.word	0x200048cc

08008ed8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	e016      	b.n	8008f14 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008ee6:	4a10      	ldr	r2, [pc, #64]	; (8008f28 <vQueueUnregisterQueue+0x50>)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	00db      	lsls	r3, r3, #3
 8008eec:	4413      	add	r3, r2
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d10b      	bne.n	8008f0e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008ef6:	4a0c      	ldr	r2, [pc, #48]	; (8008f28 <vQueueUnregisterQueue+0x50>)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2100      	movs	r1, #0
 8008efc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008f00:	4a09      	ldr	r2, [pc, #36]	; (8008f28 <vQueueUnregisterQueue+0x50>)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	4413      	add	r3, r2
 8008f08:	2200      	movs	r2, #0
 8008f0a:	605a      	str	r2, [r3, #4]
				break;
 8008f0c:	e006      	b.n	8008f1c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	3301      	adds	r3, #1
 8008f12:	60fb      	str	r3, [r7, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b07      	cmp	r3, #7
 8008f18:	d9e5      	bls.n	8008ee6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008f1a:	bf00      	nop
 8008f1c:	bf00      	nop
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	200048cc 	.word	0x200048cc

08008f2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f3c:	f7fe fefa 	bl	8007d34 <vPortEnterCritical>
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f46:	b25b      	sxtb	r3, r3
 8008f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4c:	d103      	bne.n	8008f56 <vQueueWaitForMessageRestricted+0x2a>
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f5c:	b25b      	sxtb	r3, r3
 8008f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f62:	d103      	bne.n	8008f6c <vQueueWaitForMessageRestricted+0x40>
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f6c:	f7fe ff12 	bl	8007d94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d106      	bne.n	8008f86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	3324      	adds	r3, #36	; 0x24
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	68b9      	ldr	r1, [r7, #8]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fd67 	bl	8009a54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f86:	6978      	ldr	r0, [r7, #20]
 8008f88:	f7ff fefb 	bl	8008d82 <prvUnlockQueue>
	}
 8008f8c:	bf00      	nop
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b08e      	sub	sp, #56	; 0x38
 8008f98:	af04      	add	r7, sp, #16
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
 8008fa0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10a      	bne.n	8008fbe <xTaskCreateStatic+0x2a>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	623b      	str	r3, [r7, #32]
}
 8008fba:	bf00      	nop
 8008fbc:	e7fe      	b.n	8008fbc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10a      	bne.n	8008fda <xTaskCreateStatic+0x46>
	__asm volatile
 8008fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	61fb      	str	r3, [r7, #28]
}
 8008fd6:	bf00      	nop
 8008fd8:	e7fe      	b.n	8008fd8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fda:	23bc      	movs	r3, #188	; 0xbc
 8008fdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2bbc      	cmp	r3, #188	; 0xbc
 8008fe2:	d00a      	beq.n	8008ffa <xTaskCreateStatic+0x66>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	61bb      	str	r3, [r7, #24]
}
 8008ff6:	bf00      	nop
 8008ff8:	e7fe      	b.n	8008ff8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ffa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d01e      	beq.n	8009040 <xTaskCreateStatic+0xac>
 8009002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01b      	beq.n	8009040 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800900c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009010:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	2202      	movs	r2, #2
 8009016:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800901a:	2300      	movs	r3, #0
 800901c:	9303      	str	r3, [sp, #12]
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	9302      	str	r3, [sp, #8]
 8009022:	f107 0314 	add.w	r3, r7, #20
 8009026:	9301      	str	r3, [sp, #4]
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	68b9      	ldr	r1, [r7, #8]
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f000 f850 	bl	80090d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009038:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800903a:	f000 f8f3 	bl	8009224 <prvAddNewTaskToReadyList>
 800903e:	e001      	b.n	8009044 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009040:	2300      	movs	r3, #0
 8009042:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009044:	697b      	ldr	r3, [r7, #20]
	}
 8009046:	4618      	mov	r0, r3
 8009048:	3728      	adds	r7, #40	; 0x28
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800904e:	b580      	push	{r7, lr}
 8009050:	b08c      	sub	sp, #48	; 0x30
 8009052:	af04      	add	r7, sp, #16
 8009054:	60f8      	str	r0, [r7, #12]
 8009056:	60b9      	str	r1, [r7, #8]
 8009058:	603b      	str	r3, [r7, #0]
 800905a:	4613      	mov	r3, r2
 800905c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800905e:	88fb      	ldrh	r3, [r7, #6]
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe fa98 	bl	8007598 <pvPortMalloc>
 8009068:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00e      	beq.n	800908e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009070:	20bc      	movs	r0, #188	; 0xbc
 8009072:	f7fe fa91 	bl	8007598 <pvPortMalloc>
 8009076:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	631a      	str	r2, [r3, #48]	; 0x30
 8009084:	e005      	b.n	8009092 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009086:	6978      	ldr	r0, [r7, #20]
 8009088:	f7fe fb52 	bl	8007730 <vPortFree>
 800908c:	e001      	b.n	8009092 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800908e:	2300      	movs	r3, #0
 8009090:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d017      	beq.n	80090c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090a0:	88fa      	ldrh	r2, [r7, #6]
 80090a2:	2300      	movs	r3, #0
 80090a4:	9303      	str	r3, [sp, #12]
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	9302      	str	r3, [sp, #8]
 80090aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	68b9      	ldr	r1, [r7, #8]
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 f80e 	bl	80090d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090bc:	69f8      	ldr	r0, [r7, #28]
 80090be:	f000 f8b1 	bl	8009224 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090c2:	2301      	movs	r3, #1
 80090c4:	61bb      	str	r3, [r7, #24]
 80090c6:	e002      	b.n	80090ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090c8:	f04f 33ff 	mov.w	r3, #4294967295
 80090cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090ce:	69bb      	ldr	r3, [r7, #24]
	}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3720      	adds	r7, #32
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	461a      	mov	r2, r3
 80090f0:	21a5      	movs	r1, #165	; 0xa5
 80090f2:	f001 fdde 	bl	800acb2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009100:	3b01      	subs	r3, #1
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	f023 0307 	bic.w	r3, r3, #7
 800910e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	f003 0307 	and.w	r3, r3, #7
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00a      	beq.n	8009130 <prvInitialiseNewTask+0x58>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	617b      	str	r3, [r7, #20]
}
 800912c:	bf00      	nop
 800912e:	e7fe      	b.n	800912e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d01f      	beq.n	8009176 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009136:	2300      	movs	r3, #0
 8009138:	61fb      	str	r3, [r7, #28]
 800913a:	e012      	b.n	8009162 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	4413      	add	r3, r2
 8009142:	7819      	ldrb	r1, [r3, #0]
 8009144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	4413      	add	r3, r2
 800914a:	3334      	adds	r3, #52	; 0x34
 800914c:	460a      	mov	r2, r1
 800914e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	4413      	add	r3, r2
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d006      	beq.n	800916a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	3301      	adds	r3, #1
 8009160:	61fb      	str	r3, [r7, #28]
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	2b0f      	cmp	r3, #15
 8009166:	d9e9      	bls.n	800913c <prvInitialiseNewTask+0x64>
 8009168:	e000      	b.n	800916c <prvInitialiseNewTask+0x94>
			{
				break;
 800916a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009174:	e003      	b.n	800917e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009178:	2200      	movs	r2, #0
 800917a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800917e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009180:	2b37      	cmp	r3, #55	; 0x37
 8009182:	d901      	bls.n	8009188 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009184:	2337      	movs	r3, #55	; 0x37
 8009186:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800918c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009192:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	2200      	movs	r2, #0
 8009198:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919c:	3304      	adds	r3, #4
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fe fc04 	bl	80079ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a6:	3318      	adds	r3, #24
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7fe fbff 	bl	80079ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c6:	2200      	movs	r2, #0
 80091c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80091d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d6:	3354      	adds	r3, #84	; 0x54
 80091d8:	2260      	movs	r2, #96	; 0x60
 80091da:	2100      	movs	r1, #0
 80091dc:	4618      	mov	r0, r3
 80091de:	f001 fd68 	bl	800acb2 <memset>
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	4a0c      	ldr	r2, [pc, #48]	; (8009218 <prvInitialiseNewTask+0x140>)
 80091e6:	659a      	str	r2, [r3, #88]	; 0x58
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	4a0c      	ldr	r2, [pc, #48]	; (800921c <prvInitialiseNewTask+0x144>)
 80091ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80091ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f0:	4a0b      	ldr	r2, [pc, #44]	; (8009220 <prvInitialiseNewTask+0x148>)
 80091f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	68f9      	ldr	r1, [r7, #12]
 80091f8:	69b8      	ldr	r0, [r7, #24]
 80091fa:	f7fe fc6b 	bl	8007ad4 <pxPortInitialiseStack>
 80091fe:	4602      	mov	r2, r0
 8009200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009202:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800920e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009210:	bf00      	nop
 8009212:	3720      	adds	r7, #32
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	08011d88 	.word	0x08011d88
 800921c:	08011da8 	.word	0x08011da8
 8009220:	08011d68 	.word	0x08011d68

08009224 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800922c:	f7fe fd82 	bl	8007d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009230:	4b2d      	ldr	r3, [pc, #180]	; (80092e8 <prvAddNewTaskToReadyList+0xc4>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3301      	adds	r3, #1
 8009236:	4a2c      	ldr	r2, [pc, #176]	; (80092e8 <prvAddNewTaskToReadyList+0xc4>)
 8009238:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800923a:	4b2c      	ldr	r3, [pc, #176]	; (80092ec <prvAddNewTaskToReadyList+0xc8>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d109      	bne.n	8009256 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009242:	4a2a      	ldr	r2, [pc, #168]	; (80092ec <prvAddNewTaskToReadyList+0xc8>)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009248:	4b27      	ldr	r3, [pc, #156]	; (80092e8 <prvAddNewTaskToReadyList+0xc4>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d110      	bne.n	8009272 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009250:	f000 fd2c 	bl	8009cac <prvInitialiseTaskLists>
 8009254:	e00d      	b.n	8009272 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009256:	4b26      	ldr	r3, [pc, #152]	; (80092f0 <prvAddNewTaskToReadyList+0xcc>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d109      	bne.n	8009272 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800925e:	4b23      	ldr	r3, [pc, #140]	; (80092ec <prvAddNewTaskToReadyList+0xc8>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009268:	429a      	cmp	r2, r3
 800926a:	d802      	bhi.n	8009272 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800926c:	4a1f      	ldr	r2, [pc, #124]	; (80092ec <prvAddNewTaskToReadyList+0xc8>)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009272:	4b20      	ldr	r3, [pc, #128]	; (80092f4 <prvAddNewTaskToReadyList+0xd0>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3301      	adds	r3, #1
 8009278:	4a1e      	ldr	r2, [pc, #120]	; (80092f4 <prvAddNewTaskToReadyList+0xd0>)
 800927a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800927c:	4b1d      	ldr	r3, [pc, #116]	; (80092f4 <prvAddNewTaskToReadyList+0xd0>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009288:	4b1b      	ldr	r3, [pc, #108]	; (80092f8 <prvAddNewTaskToReadyList+0xd4>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	429a      	cmp	r2, r3
 800928e:	d903      	bls.n	8009298 <prvAddNewTaskToReadyList+0x74>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009294:	4a18      	ldr	r2, [pc, #96]	; (80092f8 <prvAddNewTaskToReadyList+0xd4>)
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929c:	4613      	mov	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4a15      	ldr	r2, [pc, #84]	; (80092fc <prvAddNewTaskToReadyList+0xd8>)
 80092a6:	441a      	add	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	3304      	adds	r3, #4
 80092ac:	4619      	mov	r1, r3
 80092ae:	4610      	mov	r0, r2
 80092b0:	f7fe fb89 	bl	80079c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80092b4:	f7fe fd6e 	bl	8007d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80092b8:	4b0d      	ldr	r3, [pc, #52]	; (80092f0 <prvAddNewTaskToReadyList+0xcc>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00e      	beq.n	80092de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092c0:	4b0a      	ldr	r3, [pc, #40]	; (80092ec <prvAddNewTaskToReadyList+0xc8>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d207      	bcs.n	80092de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092ce:	4b0c      	ldr	r3, [pc, #48]	; (8009300 <prvAddNewTaskToReadyList+0xdc>)
 80092d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092de:	bf00      	nop
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20004de0 	.word	0x20004de0
 80092ec:	2000490c 	.word	0x2000490c
 80092f0:	20004dec 	.word	0x20004dec
 80092f4:	20004dfc 	.word	0x20004dfc
 80092f8:	20004de8 	.word	0x20004de8
 80092fc:	20004910 	.word	0x20004910
 8009300:	e000ed04 	.word	0xe000ed04

08009304 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800930c:	2300      	movs	r3, #0
 800930e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d017      	beq.n	8009346 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009316:	4b13      	ldr	r3, [pc, #76]	; (8009364 <vTaskDelay+0x60>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00a      	beq.n	8009334 <vTaskDelay+0x30>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	60bb      	str	r3, [r7, #8]
}
 8009330:	bf00      	nop
 8009332:	e7fe      	b.n	8009332 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009334:	f000 f990 	bl	8009658 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009338:	2100      	movs	r1, #0
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 ff02 	bl	800a144 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009340:	f000 f998 	bl	8009674 <xTaskResumeAll>
 8009344:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d107      	bne.n	800935c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800934c:	4b06      	ldr	r3, [pc, #24]	; (8009368 <vTaskDelay+0x64>)
 800934e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800935c:	bf00      	nop
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	20004e08 	.word	0x20004e08
 8009368:	e000ed04 	.word	0xe000ed04

0800936c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009374:	f7fe fcde 	bl	8007d34 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d102      	bne.n	8009384 <vTaskSuspend+0x18>
 800937e:	4b30      	ldr	r3, [pc, #192]	; (8009440 <vTaskSuspend+0xd4>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	e000      	b.n	8009386 <vTaskSuspend+0x1a>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	3304      	adds	r3, #4
 800938c:	4618      	mov	r0, r3
 800938e:	f7fe fb77 	bl	8007a80 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009396:	2b00      	cmp	r3, #0
 8009398:	d004      	beq.n	80093a4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	3318      	adds	r3, #24
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe fb6e 	bl	8007a80 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	3304      	adds	r3, #4
 80093a8:	4619      	mov	r1, r3
 80093aa:	4826      	ldr	r0, [pc, #152]	; (8009444 <vTaskSuspend+0xd8>)
 80093ac:	f7fe fb0b 	bl	80079c6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d103      	bne.n	80093c4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80093c4:	f7fe fce6 	bl	8007d94 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80093c8:	4b1f      	ldr	r3, [pc, #124]	; (8009448 <vTaskSuspend+0xdc>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d005      	beq.n	80093dc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80093d0:	f7fe fcb0 	bl	8007d34 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80093d4:	f000 fd0c 	bl	8009df0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80093d8:	f7fe fcdc 	bl	8007d94 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80093dc:	4b18      	ldr	r3, [pc, #96]	; (8009440 <vTaskSuspend+0xd4>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d127      	bne.n	8009436 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80093e6:	4b18      	ldr	r3, [pc, #96]	; (8009448 <vTaskSuspend+0xdc>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d017      	beq.n	800941e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80093ee:	4b17      	ldr	r3, [pc, #92]	; (800944c <vTaskSuspend+0xe0>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00a      	beq.n	800940c <vTaskSuspend+0xa0>
	__asm volatile
 80093f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fa:	f383 8811 	msr	BASEPRI, r3
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	60bb      	str	r3, [r7, #8]
}
 8009408:	bf00      	nop
 800940a:	e7fe      	b.n	800940a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800940c:	4b10      	ldr	r3, [pc, #64]	; (8009450 <vTaskSuspend+0xe4>)
 800940e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800941c:	e00b      	b.n	8009436 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800941e:	4b09      	ldr	r3, [pc, #36]	; (8009444 <vTaskSuspend+0xd8>)
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	4b0c      	ldr	r3, [pc, #48]	; (8009454 <vTaskSuspend+0xe8>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	429a      	cmp	r2, r3
 8009428:	d103      	bne.n	8009432 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800942a:	4b05      	ldr	r3, [pc, #20]	; (8009440 <vTaskSuspend+0xd4>)
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
	}
 8009430:	e001      	b.n	8009436 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8009432:	f000 fa87 	bl	8009944 <vTaskSwitchContext>
	}
 8009436:	bf00      	nop
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	2000490c 	.word	0x2000490c
 8009444:	20004dcc 	.word	0x20004dcc
 8009448:	20004dec 	.word	0x20004dec
 800944c:	20004e08 	.word	0x20004e08
 8009450:	e000ed04 	.word	0xe000ed04
 8009454:	20004de0 	.word	0x20004de0

08009458 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009460:	2300      	movs	r3, #0
 8009462:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10a      	bne.n	8009484 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	60fb      	str	r3, [r7, #12]
}
 8009480:	bf00      	nop
 8009482:	e7fe      	b.n	8009482 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	695b      	ldr	r3, [r3, #20]
 8009488:	4a0a      	ldr	r2, [pc, #40]	; (80094b4 <prvTaskIsTaskSuspended+0x5c>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d10a      	bne.n	80094a4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009492:	4a09      	ldr	r2, [pc, #36]	; (80094b8 <prvTaskIsTaskSuspended+0x60>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d005      	beq.n	80094a4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80094a0:	2301      	movs	r3, #1
 80094a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094a4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80094a6:	4618      	mov	r0, r3
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	20004dcc 	.word	0x20004dcc
 80094b8:	20004da0 	.word	0x20004da0

080094bc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10a      	bne.n	80094e4 <vTaskResume+0x28>
	__asm volatile
 80094ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	60bb      	str	r3, [r7, #8]
}
 80094e0:	bf00      	nop
 80094e2:	e7fe      	b.n	80094e2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80094e4:	4b20      	ldr	r3, [pc, #128]	; (8009568 <vTaskResume+0xac>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d038      	beq.n	8009560 <vTaskResume+0xa4>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d035      	beq.n	8009560 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80094f4:	f7fe fc1e 	bl	8007d34 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7ff ffad 	bl	8009458 <prvTaskIsTaskSuspended>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d02b      	beq.n	800955c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	3304      	adds	r3, #4
 8009508:	4618      	mov	r0, r3
 800950a:	f7fe fab9 	bl	8007a80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009512:	4b16      	ldr	r3, [pc, #88]	; (800956c <vTaskResume+0xb0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	429a      	cmp	r2, r3
 8009518:	d903      	bls.n	8009522 <vTaskResume+0x66>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951e:	4a13      	ldr	r2, [pc, #76]	; (800956c <vTaskResume+0xb0>)
 8009520:	6013      	str	r3, [r2, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009526:	4613      	mov	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4a10      	ldr	r2, [pc, #64]	; (8009570 <vTaskResume+0xb4>)
 8009530:	441a      	add	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3304      	adds	r3, #4
 8009536:	4619      	mov	r1, r3
 8009538:	4610      	mov	r0, r2
 800953a:	f7fe fa44 	bl	80079c6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009542:	4b09      	ldr	r3, [pc, #36]	; (8009568 <vTaskResume+0xac>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009548:	429a      	cmp	r2, r3
 800954a:	d307      	bcc.n	800955c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800954c:	4b09      	ldr	r3, [pc, #36]	; (8009574 <vTaskResume+0xb8>)
 800954e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800955c:	f7fe fc1a 	bl	8007d94 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009560:	bf00      	nop
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	2000490c 	.word	0x2000490c
 800956c:	20004de8 	.word	0x20004de8
 8009570:	20004910 	.word	0x20004910
 8009574:	e000ed04 	.word	0xe000ed04

08009578 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b08a      	sub	sp, #40	; 0x28
 800957c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800957e:	2300      	movs	r3, #0
 8009580:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009582:	2300      	movs	r3, #0
 8009584:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009586:	463a      	mov	r2, r7
 8009588:	1d39      	adds	r1, r7, #4
 800958a:	f107 0308 	add.w	r3, r7, #8
 800958e:	4618      	mov	r0, r3
 8009590:	f7fd ffce 	bl	8007530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	9202      	str	r2, [sp, #8]
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	2300      	movs	r3, #0
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	2300      	movs	r3, #0
 80095a4:	460a      	mov	r2, r1
 80095a6:	4924      	ldr	r1, [pc, #144]	; (8009638 <vTaskStartScheduler+0xc0>)
 80095a8:	4824      	ldr	r0, [pc, #144]	; (800963c <vTaskStartScheduler+0xc4>)
 80095aa:	f7ff fcf3 	bl	8008f94 <xTaskCreateStatic>
 80095ae:	4603      	mov	r3, r0
 80095b0:	4a23      	ldr	r2, [pc, #140]	; (8009640 <vTaskStartScheduler+0xc8>)
 80095b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095b4:	4b22      	ldr	r3, [pc, #136]	; (8009640 <vTaskStartScheduler+0xc8>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095bc:	2301      	movs	r3, #1
 80095be:	617b      	str	r3, [r7, #20]
 80095c0:	e001      	b.n	80095c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80095c2:	2300      	movs	r3, #0
 80095c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d102      	bne.n	80095d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80095cc:	f000 fe0e 	bl	800a1ec <xTimerCreateTimerTask>
 80095d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d11b      	bne.n	8009610 <vTaskStartScheduler+0x98>
	__asm volatile
 80095d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	613b      	str	r3, [r7, #16]
}
 80095ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80095ec:	4b15      	ldr	r3, [pc, #84]	; (8009644 <vTaskStartScheduler+0xcc>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3354      	adds	r3, #84	; 0x54
 80095f2:	4a15      	ldr	r2, [pc, #84]	; (8009648 <vTaskStartScheduler+0xd0>)
 80095f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095f6:	4b15      	ldr	r3, [pc, #84]	; (800964c <vTaskStartScheduler+0xd4>)
 80095f8:	f04f 32ff 	mov.w	r2, #4294967295
 80095fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095fe:	4b14      	ldr	r3, [pc, #80]	; (8009650 <vTaskStartScheduler+0xd8>)
 8009600:	2201      	movs	r2, #1
 8009602:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009604:	4b13      	ldr	r3, [pc, #76]	; (8009654 <vTaskStartScheduler+0xdc>)
 8009606:	2200      	movs	r2, #0
 8009608:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800960a:	f7fe faf1 	bl	8007bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800960e:	e00e      	b.n	800962e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009616:	d10a      	bne.n	800962e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	60fb      	str	r3, [r7, #12]
}
 800962a:	bf00      	nop
 800962c:	e7fe      	b.n	800962c <vTaskStartScheduler+0xb4>
}
 800962e:	bf00      	nop
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	080107ac 	.word	0x080107ac
 800963c:	08009c7d 	.word	0x08009c7d
 8009640:	20004e04 	.word	0x20004e04
 8009644:	2000490c 	.word	0x2000490c
 8009648:	20000038 	.word	0x20000038
 800964c:	20004e00 	.word	0x20004e00
 8009650:	20004dec 	.word	0x20004dec
 8009654:	20004de4 	.word	0x20004de4

08009658 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009658:	b480      	push	{r7}
 800965a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800965c:	4b04      	ldr	r3, [pc, #16]	; (8009670 <vTaskSuspendAll+0x18>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3301      	adds	r3, #1
 8009662:	4a03      	ldr	r2, [pc, #12]	; (8009670 <vTaskSuspendAll+0x18>)
 8009664:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009666:	bf00      	nop
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr
 8009670:	20004e08 	.word	0x20004e08

08009674 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800967a:	2300      	movs	r3, #0
 800967c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800967e:	2300      	movs	r3, #0
 8009680:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009682:	4b42      	ldr	r3, [pc, #264]	; (800978c <xTaskResumeAll+0x118>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10a      	bne.n	80096a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	603b      	str	r3, [r7, #0]
}
 800969c:	bf00      	nop
 800969e:	e7fe      	b.n	800969e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096a0:	f7fe fb48 	bl	8007d34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096a4:	4b39      	ldr	r3, [pc, #228]	; (800978c <xTaskResumeAll+0x118>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	4a38      	ldr	r2, [pc, #224]	; (800978c <xTaskResumeAll+0x118>)
 80096ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096ae:	4b37      	ldr	r3, [pc, #220]	; (800978c <xTaskResumeAll+0x118>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d162      	bne.n	800977c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096b6:	4b36      	ldr	r3, [pc, #216]	; (8009790 <xTaskResumeAll+0x11c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d05e      	beq.n	800977c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096be:	e02f      	b.n	8009720 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096c0:	4b34      	ldr	r3, [pc, #208]	; (8009794 <xTaskResumeAll+0x120>)
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	3318      	adds	r3, #24
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7fe f9d7 	bl	8007a80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3304      	adds	r3, #4
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe f9d2 	bl	8007a80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e0:	4b2d      	ldr	r3, [pc, #180]	; (8009798 <xTaskResumeAll+0x124>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d903      	bls.n	80096f0 <xTaskResumeAll+0x7c>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ec:	4a2a      	ldr	r2, [pc, #168]	; (8009798 <xTaskResumeAll+0x124>)
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f4:	4613      	mov	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	4413      	add	r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4a27      	ldr	r2, [pc, #156]	; (800979c <xTaskResumeAll+0x128>)
 80096fe:	441a      	add	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	3304      	adds	r3, #4
 8009704:	4619      	mov	r1, r3
 8009706:	4610      	mov	r0, r2
 8009708:	f7fe f95d 	bl	80079c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009710:	4b23      	ldr	r3, [pc, #140]	; (80097a0 <xTaskResumeAll+0x12c>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009716:	429a      	cmp	r2, r3
 8009718:	d302      	bcc.n	8009720 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800971a:	4b22      	ldr	r3, [pc, #136]	; (80097a4 <xTaskResumeAll+0x130>)
 800971c:	2201      	movs	r2, #1
 800971e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009720:	4b1c      	ldr	r3, [pc, #112]	; (8009794 <xTaskResumeAll+0x120>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1cb      	bne.n	80096c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d001      	beq.n	8009732 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800972e:	f000 fb5f 	bl	8009df0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009732:	4b1d      	ldr	r3, [pc, #116]	; (80097a8 <xTaskResumeAll+0x134>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d010      	beq.n	8009760 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800973e:	f000 f847 	bl	80097d0 <xTaskIncrementTick>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009748:	4b16      	ldr	r3, [pc, #88]	; (80097a4 <xTaskResumeAll+0x130>)
 800974a:	2201      	movs	r2, #1
 800974c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	3b01      	subs	r3, #1
 8009752:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1f1      	bne.n	800973e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800975a:	4b13      	ldr	r3, [pc, #76]	; (80097a8 <xTaskResumeAll+0x134>)
 800975c:	2200      	movs	r2, #0
 800975e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009760:	4b10      	ldr	r3, [pc, #64]	; (80097a4 <xTaskResumeAll+0x130>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d009      	beq.n	800977c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009768:	2301      	movs	r3, #1
 800976a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800976c:	4b0f      	ldr	r3, [pc, #60]	; (80097ac <xTaskResumeAll+0x138>)
 800976e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800977c:	f7fe fb0a 	bl	8007d94 <vPortExitCritical>

	return xAlreadyYielded;
 8009780:	68bb      	ldr	r3, [r7, #8]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20004e08 	.word	0x20004e08
 8009790:	20004de0 	.word	0x20004de0
 8009794:	20004da0 	.word	0x20004da0
 8009798:	20004de8 	.word	0x20004de8
 800979c:	20004910 	.word	0x20004910
 80097a0:	2000490c 	.word	0x2000490c
 80097a4:	20004df4 	.word	0x20004df4
 80097a8:	20004df0 	.word	0x20004df0
 80097ac:	e000ed04 	.word	0xe000ed04

080097b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80097b6:	4b05      	ldr	r3, [pc, #20]	; (80097cc <xTaskGetTickCount+0x1c>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80097bc:	687b      	ldr	r3, [r7, #4]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	370c      	adds	r7, #12
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	20004de4 	.word	0x20004de4

080097d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80097d6:	2300      	movs	r3, #0
 80097d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097da:	4b4f      	ldr	r3, [pc, #316]	; (8009918 <xTaskIncrementTick+0x148>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f040 808f 	bne.w	8009902 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097e4:	4b4d      	ldr	r3, [pc, #308]	; (800991c <xTaskIncrementTick+0x14c>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	3301      	adds	r3, #1
 80097ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097ec:	4a4b      	ldr	r2, [pc, #300]	; (800991c <xTaskIncrementTick+0x14c>)
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d120      	bne.n	800983a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80097f8:	4b49      	ldr	r3, [pc, #292]	; (8009920 <xTaskIncrementTick+0x150>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00a      	beq.n	8009818 <xTaskIncrementTick+0x48>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	603b      	str	r3, [r7, #0]
}
 8009814:	bf00      	nop
 8009816:	e7fe      	b.n	8009816 <xTaskIncrementTick+0x46>
 8009818:	4b41      	ldr	r3, [pc, #260]	; (8009920 <xTaskIncrementTick+0x150>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	60fb      	str	r3, [r7, #12]
 800981e:	4b41      	ldr	r3, [pc, #260]	; (8009924 <xTaskIncrementTick+0x154>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a3f      	ldr	r2, [pc, #252]	; (8009920 <xTaskIncrementTick+0x150>)
 8009824:	6013      	str	r3, [r2, #0]
 8009826:	4a3f      	ldr	r2, [pc, #252]	; (8009924 <xTaskIncrementTick+0x154>)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6013      	str	r3, [r2, #0]
 800982c:	4b3e      	ldr	r3, [pc, #248]	; (8009928 <xTaskIncrementTick+0x158>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	3301      	adds	r3, #1
 8009832:	4a3d      	ldr	r2, [pc, #244]	; (8009928 <xTaskIncrementTick+0x158>)
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	f000 fadb 	bl	8009df0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800983a:	4b3c      	ldr	r3, [pc, #240]	; (800992c <xTaskIncrementTick+0x15c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	693a      	ldr	r2, [r7, #16]
 8009840:	429a      	cmp	r2, r3
 8009842:	d349      	bcc.n	80098d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009844:	4b36      	ldr	r3, [pc, #216]	; (8009920 <xTaskIncrementTick+0x150>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d104      	bne.n	8009858 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800984e:	4b37      	ldr	r3, [pc, #220]	; (800992c <xTaskIncrementTick+0x15c>)
 8009850:	f04f 32ff 	mov.w	r2, #4294967295
 8009854:	601a      	str	r2, [r3, #0]
					break;
 8009856:	e03f      	b.n	80098d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009858:	4b31      	ldr	r3, [pc, #196]	; (8009920 <xTaskIncrementTick+0x150>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	429a      	cmp	r2, r3
 800986e:	d203      	bcs.n	8009878 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009870:	4a2e      	ldr	r2, [pc, #184]	; (800992c <xTaskIncrementTick+0x15c>)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009876:	e02f      	b.n	80098d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	3304      	adds	r3, #4
 800987c:	4618      	mov	r0, r3
 800987e:	f7fe f8ff 	bl	8007a80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009886:	2b00      	cmp	r3, #0
 8009888:	d004      	beq.n	8009894 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	3318      	adds	r3, #24
 800988e:	4618      	mov	r0, r3
 8009890:	f7fe f8f6 	bl	8007a80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009898:	4b25      	ldr	r3, [pc, #148]	; (8009930 <xTaskIncrementTick+0x160>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	429a      	cmp	r2, r3
 800989e:	d903      	bls.n	80098a8 <xTaskIncrementTick+0xd8>
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a4:	4a22      	ldr	r2, [pc, #136]	; (8009930 <xTaskIncrementTick+0x160>)
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ac:	4613      	mov	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4a1f      	ldr	r2, [pc, #124]	; (8009934 <xTaskIncrementTick+0x164>)
 80098b6:	441a      	add	r2, r3
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	3304      	adds	r3, #4
 80098bc:	4619      	mov	r1, r3
 80098be:	4610      	mov	r0, r2
 80098c0:	f7fe f881 	bl	80079c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c8:	4b1b      	ldr	r3, [pc, #108]	; (8009938 <xTaskIncrementTick+0x168>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d3b8      	bcc.n	8009844 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80098d2:	2301      	movs	r3, #1
 80098d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098d6:	e7b5      	b.n	8009844 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098d8:	4b17      	ldr	r3, [pc, #92]	; (8009938 <xTaskIncrementTick+0x168>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098de:	4915      	ldr	r1, [pc, #84]	; (8009934 <xTaskIncrementTick+0x164>)
 80098e0:	4613      	mov	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	440b      	add	r3, r1
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d901      	bls.n	80098f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80098f0:	2301      	movs	r3, #1
 80098f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098f4:	4b11      	ldr	r3, [pc, #68]	; (800993c <xTaskIncrementTick+0x16c>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d007      	beq.n	800990c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80098fc:	2301      	movs	r3, #1
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	e004      	b.n	800990c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009902:	4b0f      	ldr	r3, [pc, #60]	; (8009940 <xTaskIncrementTick+0x170>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3301      	adds	r3, #1
 8009908:	4a0d      	ldr	r2, [pc, #52]	; (8009940 <xTaskIncrementTick+0x170>)
 800990a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800990c:	697b      	ldr	r3, [r7, #20]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3718      	adds	r7, #24
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	20004e08 	.word	0x20004e08
 800991c:	20004de4 	.word	0x20004de4
 8009920:	20004d98 	.word	0x20004d98
 8009924:	20004d9c 	.word	0x20004d9c
 8009928:	20004df8 	.word	0x20004df8
 800992c:	20004e00 	.word	0x20004e00
 8009930:	20004de8 	.word	0x20004de8
 8009934:	20004910 	.word	0x20004910
 8009938:	2000490c 	.word	0x2000490c
 800993c:	20004df4 	.word	0x20004df4
 8009940:	20004df0 	.word	0x20004df0

08009944 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800994a:	4b2a      	ldr	r3, [pc, #168]	; (80099f4 <vTaskSwitchContext+0xb0>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009952:	4b29      	ldr	r3, [pc, #164]	; (80099f8 <vTaskSwitchContext+0xb4>)
 8009954:	2201      	movs	r2, #1
 8009956:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009958:	e046      	b.n	80099e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800995a:	4b27      	ldr	r3, [pc, #156]	; (80099f8 <vTaskSwitchContext+0xb4>)
 800995c:	2200      	movs	r2, #0
 800995e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009960:	4b26      	ldr	r3, [pc, #152]	; (80099fc <vTaskSwitchContext+0xb8>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	60fb      	str	r3, [r7, #12]
 8009966:	e010      	b.n	800998a <vTaskSwitchContext+0x46>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10a      	bne.n	8009984 <vTaskSwitchContext+0x40>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	607b      	str	r3, [r7, #4]
}
 8009980:	bf00      	nop
 8009982:	e7fe      	b.n	8009982 <vTaskSwitchContext+0x3e>
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3b01      	subs	r3, #1
 8009988:	60fb      	str	r3, [r7, #12]
 800998a:	491d      	ldr	r1, [pc, #116]	; (8009a00 <vTaskSwitchContext+0xbc>)
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	4613      	mov	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	440b      	add	r3, r1
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0e4      	beq.n	8009968 <vTaskSwitchContext+0x24>
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	4613      	mov	r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	4413      	add	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4a15      	ldr	r2, [pc, #84]	; (8009a00 <vTaskSwitchContext+0xbc>)
 80099aa:	4413      	add	r3, r2
 80099ac:	60bb      	str	r3, [r7, #8]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	605a      	str	r2, [r3, #4]
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	3308      	adds	r3, #8
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d104      	bne.n	80099ce <vTaskSwitchContext+0x8a>
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	605a      	str	r2, [r3, #4]
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	4a0b      	ldr	r2, [pc, #44]	; (8009a04 <vTaskSwitchContext+0xc0>)
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	4a08      	ldr	r2, [pc, #32]	; (80099fc <vTaskSwitchContext+0xb8>)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099de:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <vTaskSwitchContext+0xc0>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3354      	adds	r3, #84	; 0x54
 80099e4:	4a08      	ldr	r2, [pc, #32]	; (8009a08 <vTaskSwitchContext+0xc4>)
 80099e6:	6013      	str	r3, [r2, #0]
}
 80099e8:	bf00      	nop
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	20004e08 	.word	0x20004e08
 80099f8:	20004df4 	.word	0x20004df4
 80099fc:	20004de8 	.word	0x20004de8
 8009a00:	20004910 	.word	0x20004910
 8009a04:	2000490c 	.word	0x2000490c
 8009a08:	20000038 	.word	0x20000038

08009a0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10a      	bne.n	8009a32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	60fb      	str	r3, [r7, #12]
}
 8009a2e:	bf00      	nop
 8009a30:	e7fe      	b.n	8009a30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a32:	4b07      	ldr	r3, [pc, #28]	; (8009a50 <vTaskPlaceOnEventList+0x44>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3318      	adds	r3, #24
 8009a38:	4619      	mov	r1, r3
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7fd ffe7 	bl	8007a0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a40:	2101      	movs	r1, #1
 8009a42:	6838      	ldr	r0, [r7, #0]
 8009a44:	f000 fb7e 	bl	800a144 <prvAddCurrentTaskToDelayedList>
}
 8009a48:	bf00      	nop
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	2000490c 	.word	0x2000490c

08009a54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b086      	sub	sp, #24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10a      	bne.n	8009a7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	617b      	str	r3, [r7, #20]
}
 8009a78:	bf00      	nop
 8009a7a:	e7fe      	b.n	8009a7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a7c:	4b0a      	ldr	r3, [pc, #40]	; (8009aa8 <vTaskPlaceOnEventListRestricted+0x54>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3318      	adds	r3, #24
 8009a82:	4619      	mov	r1, r3
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f7fd ff9e 	bl	80079c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d002      	beq.n	8009a96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009a90:	f04f 33ff 	mov.w	r3, #4294967295
 8009a94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	68b8      	ldr	r0, [r7, #8]
 8009a9a:	f000 fb53 	bl	800a144 <prvAddCurrentTaskToDelayedList>
	}
 8009a9e:	bf00      	nop
 8009aa0:	3718      	adds	r7, #24
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	2000490c 	.word	0x2000490c

08009aac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10a      	bne.n	8009ad8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac6:	f383 8811 	msr	BASEPRI, r3
 8009aca:	f3bf 8f6f 	isb	sy
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	60fb      	str	r3, [r7, #12]
}
 8009ad4:	bf00      	nop
 8009ad6:	e7fe      	b.n	8009ad6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	3318      	adds	r3, #24
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fd ffcf 	bl	8007a80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ae2:	4b1e      	ldr	r3, [pc, #120]	; (8009b5c <xTaskRemoveFromEventList+0xb0>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d11d      	bne.n	8009b26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	3304      	adds	r3, #4
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fd ffc6 	bl	8007a80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af8:	4b19      	ldr	r3, [pc, #100]	; (8009b60 <xTaskRemoveFromEventList+0xb4>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d903      	bls.n	8009b08 <xTaskRemoveFromEventList+0x5c>
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b04:	4a16      	ldr	r2, [pc, #88]	; (8009b60 <xTaskRemoveFromEventList+0xb4>)
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4a13      	ldr	r2, [pc, #76]	; (8009b64 <xTaskRemoveFromEventList+0xb8>)
 8009b16:	441a      	add	r2, r3
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4610      	mov	r0, r2
 8009b20:	f7fd ff51 	bl	80079c6 <vListInsertEnd>
 8009b24:	e005      	b.n	8009b32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	3318      	adds	r3, #24
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	480e      	ldr	r0, [pc, #56]	; (8009b68 <xTaskRemoveFromEventList+0xbc>)
 8009b2e:	f7fd ff4a 	bl	80079c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b36:	4b0d      	ldr	r3, [pc, #52]	; (8009b6c <xTaskRemoveFromEventList+0xc0>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d905      	bls.n	8009b4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b40:	2301      	movs	r3, #1
 8009b42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b44:	4b0a      	ldr	r3, [pc, #40]	; (8009b70 <xTaskRemoveFromEventList+0xc4>)
 8009b46:	2201      	movs	r2, #1
 8009b48:	601a      	str	r2, [r3, #0]
 8009b4a:	e001      	b.n	8009b50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b50:	697b      	ldr	r3, [r7, #20]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3718      	adds	r7, #24
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	20004e08 	.word	0x20004e08
 8009b60:	20004de8 	.word	0x20004de8
 8009b64:	20004910 	.word	0x20004910
 8009b68:	20004da0 	.word	0x20004da0
 8009b6c:	2000490c 	.word	0x2000490c
 8009b70:	20004df4 	.word	0x20004df4

08009b74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b7c:	4b06      	ldr	r3, [pc, #24]	; (8009b98 <vTaskInternalSetTimeOutState+0x24>)
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b84:	4b05      	ldr	r3, [pc, #20]	; (8009b9c <vTaskInternalSetTimeOutState+0x28>)
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	605a      	str	r2, [r3, #4]
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	20004df8 	.word	0x20004df8
 8009b9c:	20004de4 	.word	0x20004de4

08009ba0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b088      	sub	sp, #32
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10a      	bne.n	8009bc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	613b      	str	r3, [r7, #16]
}
 8009bc2:	bf00      	nop
 8009bc4:	e7fe      	b.n	8009bc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10a      	bne.n	8009be2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd0:	f383 8811 	msr	BASEPRI, r3
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	60fb      	str	r3, [r7, #12]
}
 8009bde:	bf00      	nop
 8009be0:	e7fe      	b.n	8009be0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009be2:	f7fe f8a7 	bl	8007d34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009be6:	4b1d      	ldr	r3, [pc, #116]	; (8009c5c <xTaskCheckForTimeOut+0xbc>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	69ba      	ldr	r2, [r7, #24]
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfe:	d102      	bne.n	8009c06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c00:	2300      	movs	r3, #0
 8009c02:	61fb      	str	r3, [r7, #28]
 8009c04:	e023      	b.n	8009c4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	4b15      	ldr	r3, [pc, #84]	; (8009c60 <xTaskCheckForTimeOut+0xc0>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d007      	beq.n	8009c22 <xTaskCheckForTimeOut+0x82>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	69ba      	ldr	r2, [r7, #24]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d302      	bcc.n	8009c22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	61fb      	str	r3, [r7, #28]
 8009c20:	e015      	b.n	8009c4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d20b      	bcs.n	8009c44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	1ad2      	subs	r2, r2, r3
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7ff ff9b 	bl	8009b74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	61fb      	str	r3, [r7, #28]
 8009c42:	e004      	b.n	8009c4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c4e:	f7fe f8a1 	bl	8007d94 <vPortExitCritical>

	return xReturn;
 8009c52:	69fb      	ldr	r3, [r7, #28]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3720      	adds	r7, #32
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20004de4 	.word	0x20004de4
 8009c60:	20004df8 	.word	0x20004df8

08009c64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c64:	b480      	push	{r7}
 8009c66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c68:	4b03      	ldr	r3, [pc, #12]	; (8009c78 <vTaskMissedYield+0x14>)
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	601a      	str	r2, [r3, #0]
}
 8009c6e:	bf00      	nop
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	20004df4 	.word	0x20004df4

08009c7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c84:	f000 f852 	bl	8009d2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c88:	4b06      	ldr	r3, [pc, #24]	; (8009ca4 <prvIdleTask+0x28>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d9f9      	bls.n	8009c84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c90:	4b05      	ldr	r3, [pc, #20]	; (8009ca8 <prvIdleTask+0x2c>)
 8009c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c96:	601a      	str	r2, [r3, #0]
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ca0:	e7f0      	b.n	8009c84 <prvIdleTask+0x8>
 8009ca2:	bf00      	nop
 8009ca4:	20004910 	.word	0x20004910
 8009ca8:	e000ed04 	.word	0xe000ed04

08009cac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	607b      	str	r3, [r7, #4]
 8009cb6:	e00c      	b.n	8009cd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4a12      	ldr	r2, [pc, #72]	; (8009d0c <prvInitialiseTaskLists+0x60>)
 8009cc4:	4413      	add	r3, r2
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fd fe50 	bl	800796c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	607b      	str	r3, [r7, #4]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b37      	cmp	r3, #55	; 0x37
 8009cd6:	d9ef      	bls.n	8009cb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009cd8:	480d      	ldr	r0, [pc, #52]	; (8009d10 <prvInitialiseTaskLists+0x64>)
 8009cda:	f7fd fe47 	bl	800796c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009cde:	480d      	ldr	r0, [pc, #52]	; (8009d14 <prvInitialiseTaskLists+0x68>)
 8009ce0:	f7fd fe44 	bl	800796c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ce4:	480c      	ldr	r0, [pc, #48]	; (8009d18 <prvInitialiseTaskLists+0x6c>)
 8009ce6:	f7fd fe41 	bl	800796c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009cea:	480c      	ldr	r0, [pc, #48]	; (8009d1c <prvInitialiseTaskLists+0x70>)
 8009cec:	f7fd fe3e 	bl	800796c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009cf0:	480b      	ldr	r0, [pc, #44]	; (8009d20 <prvInitialiseTaskLists+0x74>)
 8009cf2:	f7fd fe3b 	bl	800796c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cf6:	4b0b      	ldr	r3, [pc, #44]	; (8009d24 <prvInitialiseTaskLists+0x78>)
 8009cf8:	4a05      	ldr	r2, [pc, #20]	; (8009d10 <prvInitialiseTaskLists+0x64>)
 8009cfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cfc:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <prvInitialiseTaskLists+0x7c>)
 8009cfe:	4a05      	ldr	r2, [pc, #20]	; (8009d14 <prvInitialiseTaskLists+0x68>)
 8009d00:	601a      	str	r2, [r3, #0]
}
 8009d02:	bf00      	nop
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20004910 	.word	0x20004910
 8009d10:	20004d70 	.word	0x20004d70
 8009d14:	20004d84 	.word	0x20004d84
 8009d18:	20004da0 	.word	0x20004da0
 8009d1c:	20004db4 	.word	0x20004db4
 8009d20:	20004dcc 	.word	0x20004dcc
 8009d24:	20004d98 	.word	0x20004d98
 8009d28:	20004d9c 	.word	0x20004d9c

08009d2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d32:	e019      	b.n	8009d68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d34:	f7fd fffe 	bl	8007d34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d38:	4b10      	ldr	r3, [pc, #64]	; (8009d7c <prvCheckTasksWaitingTermination+0x50>)
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	3304      	adds	r3, #4
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fd fe9b 	bl	8007a80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d4a:	4b0d      	ldr	r3, [pc, #52]	; (8009d80 <prvCheckTasksWaitingTermination+0x54>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	4a0b      	ldr	r2, [pc, #44]	; (8009d80 <prvCheckTasksWaitingTermination+0x54>)
 8009d52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d54:	4b0b      	ldr	r3, [pc, #44]	; (8009d84 <prvCheckTasksWaitingTermination+0x58>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	4a0a      	ldr	r2, [pc, #40]	; (8009d84 <prvCheckTasksWaitingTermination+0x58>)
 8009d5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d5e:	f7fe f819 	bl	8007d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f810 	bl	8009d88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d68:	4b06      	ldr	r3, [pc, #24]	; (8009d84 <prvCheckTasksWaitingTermination+0x58>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1e1      	bne.n	8009d34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d70:	bf00      	nop
 8009d72:	bf00      	nop
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20004db4 	.word	0x20004db4
 8009d80:	20004de0 	.word	0x20004de0
 8009d84:	20004dc8 	.word	0x20004dc8

08009d88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3354      	adds	r3, #84	; 0x54
 8009d94:	4618      	mov	r0, r3
 8009d96:	f001 feb1 	bl	800bafc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d108      	bne.n	8009db6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fd fcc1 	bl	8007730 <vPortFree>
				vPortFree( pxTCB );
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7fd fcbe 	bl	8007730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009db4:	e018      	b.n	8009de8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d103      	bne.n	8009dc8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7fd fcb5 	bl	8007730 <vPortFree>
	}
 8009dc6:	e00f      	b.n	8009de8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d00a      	beq.n	8009de8 <prvDeleteTCB+0x60>
	__asm volatile
 8009dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	60fb      	str	r3, [r7, #12]
}
 8009de4:	bf00      	nop
 8009de6:	e7fe      	b.n	8009de6 <prvDeleteTCB+0x5e>
	}
 8009de8:	bf00      	nop
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009df6:	4b0c      	ldr	r3, [pc, #48]	; (8009e28 <prvResetNextTaskUnblockTime+0x38>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d104      	bne.n	8009e0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e00:	4b0a      	ldr	r3, [pc, #40]	; (8009e2c <prvResetNextTaskUnblockTime+0x3c>)
 8009e02:	f04f 32ff 	mov.w	r2, #4294967295
 8009e06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e08:	e008      	b.n	8009e1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e0a:	4b07      	ldr	r3, [pc, #28]	; (8009e28 <prvResetNextTaskUnblockTime+0x38>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	4a04      	ldr	r2, [pc, #16]	; (8009e2c <prvResetNextTaskUnblockTime+0x3c>)
 8009e1a:	6013      	str	r3, [r2, #0]
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	20004d98 	.word	0x20004d98
 8009e2c:	20004e00 	.word	0x20004e00

08009e30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e36:	4b0b      	ldr	r3, [pc, #44]	; (8009e64 <xTaskGetSchedulerState+0x34>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d102      	bne.n	8009e44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	607b      	str	r3, [r7, #4]
 8009e42:	e008      	b.n	8009e56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e44:	4b08      	ldr	r3, [pc, #32]	; (8009e68 <xTaskGetSchedulerState+0x38>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d102      	bne.n	8009e52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	607b      	str	r3, [r7, #4]
 8009e50:	e001      	b.n	8009e56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e52:	2300      	movs	r3, #0
 8009e54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e56:	687b      	ldr	r3, [r7, #4]
	}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	20004dec 	.word	0x20004dec
 8009e68:	20004e08 	.word	0x20004e08

08009e6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d051      	beq.n	8009f26 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e86:	4b2a      	ldr	r3, [pc, #168]	; (8009f30 <xTaskPriorityInherit+0xc4>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d241      	bcs.n	8009f14 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	db06      	blt.n	8009ea6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e98:	4b25      	ldr	r3, [pc, #148]	; (8009f30 <xTaskPriorityInherit+0xc4>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	6959      	ldr	r1, [r3, #20]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eae:	4613      	mov	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4a1f      	ldr	r2, [pc, #124]	; (8009f34 <xTaskPriorityInherit+0xc8>)
 8009eb8:	4413      	add	r3, r2
 8009eba:	4299      	cmp	r1, r3
 8009ebc:	d122      	bne.n	8009f04 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fd fddc 	bl	8007a80 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ec8:	4b19      	ldr	r3, [pc, #100]	; (8009f30 <xTaskPriorityInherit+0xc4>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed6:	4b18      	ldr	r3, [pc, #96]	; (8009f38 <xTaskPriorityInherit+0xcc>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d903      	bls.n	8009ee6 <xTaskPriorityInherit+0x7a>
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee2:	4a15      	ldr	r2, [pc, #84]	; (8009f38 <xTaskPriorityInherit+0xcc>)
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eea:	4613      	mov	r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	4413      	add	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4a10      	ldr	r2, [pc, #64]	; (8009f34 <xTaskPriorityInherit+0xc8>)
 8009ef4:	441a      	add	r2, r3
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	4619      	mov	r1, r3
 8009efc:	4610      	mov	r0, r2
 8009efe:	f7fd fd62 	bl	80079c6 <vListInsertEnd>
 8009f02:	e004      	b.n	8009f0e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f04:	4b0a      	ldr	r3, [pc, #40]	; (8009f30 <xTaskPriorityInherit+0xc4>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	e008      	b.n	8009f26 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f18:	4b05      	ldr	r3, [pc, #20]	; (8009f30 <xTaskPriorityInherit+0xc4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d201      	bcs.n	8009f26 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009f22:	2301      	movs	r3, #1
 8009f24:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f26:	68fb      	ldr	r3, [r7, #12]
	}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	2000490c 	.word	0x2000490c
 8009f34:	20004910 	.word	0x20004910
 8009f38:	20004de8 	.word	0x20004de8

08009f3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d056      	beq.n	800a000 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f52:	4b2e      	ldr	r3, [pc, #184]	; (800a00c <xTaskPriorityDisinherit+0xd0>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d00a      	beq.n	8009f72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	60fb      	str	r3, [r7, #12]
}
 8009f6e:	bf00      	nop
 8009f70:	e7fe      	b.n	8009f70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10a      	bne.n	8009f90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	60bb      	str	r3, [r7, #8]
}
 8009f8c:	bf00      	nop
 8009f8e:	e7fe      	b.n	8009f8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f94:	1e5a      	subs	r2, r3, #1
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d02c      	beq.n	800a000 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d128      	bne.n	800a000 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fd fd64 	bl	8007a80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd0:	4b0f      	ldr	r3, [pc, #60]	; (800a010 <xTaskPriorityDisinherit+0xd4>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d903      	bls.n	8009fe0 <xTaskPriorityDisinherit+0xa4>
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fdc:	4a0c      	ldr	r2, [pc, #48]	; (800a010 <xTaskPriorityDisinherit+0xd4>)
 8009fde:	6013      	str	r3, [r2, #0]
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4413      	add	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4a09      	ldr	r2, [pc, #36]	; (800a014 <xTaskPriorityDisinherit+0xd8>)
 8009fee:	441a      	add	r2, r3
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	f7fd fce5 	bl	80079c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a000:	697b      	ldr	r3, [r7, #20]
	}
 800a002:	4618      	mov	r0, r3
 800a004:	3718      	adds	r7, #24
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	2000490c 	.word	0x2000490c
 800a010:	20004de8 	.word	0x20004de8
 800a014:	20004910 	.word	0x20004910

0800a018 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a026:	2301      	movs	r3, #1
 800a028:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d06a      	beq.n	800a106 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10a      	bne.n	800a04e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	60fb      	str	r3, [r7, #12]
}
 800a04a:	bf00      	nop
 800a04c:	e7fe      	b.n	800a04c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	429a      	cmp	r2, r3
 800a056:	d902      	bls.n	800a05e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	61fb      	str	r3, [r7, #28]
 800a05c:	e002      	b.n	800a064 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a062:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a068:	69fa      	ldr	r2, [r7, #28]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d04b      	beq.n	800a106 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	429a      	cmp	r2, r3
 800a076:	d146      	bne.n	800a106 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a078:	4b25      	ldr	r3, [pc, #148]	; (800a110 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	69ba      	ldr	r2, [r7, #24]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d10a      	bne.n	800a098 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	60bb      	str	r3, [r7, #8]
}
 800a094:	bf00      	nop
 800a096:	e7fe      	b.n	800a096 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	69fa      	ldr	r2, [r7, #28]
 800a0a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	db04      	blt.n	800a0b6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	6959      	ldr	r1, [r3, #20]
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4a13      	ldr	r2, [pc, #76]	; (800a114 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a0c6:	4413      	add	r3, r2
 800a0c8:	4299      	cmp	r1, r3
 800a0ca:	d11c      	bne.n	800a106 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fd fcd5 	bl	8007a80 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0da:	4b0f      	ldr	r3, [pc, #60]	; (800a118 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d903      	bls.n	800a0ea <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e6:	4a0c      	ldr	r2, [pc, #48]	; (800a118 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a0e8:	6013      	str	r3, [r2, #0]
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4a07      	ldr	r2, [pc, #28]	; (800a114 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a0f8:	441a      	add	r2, r3
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	4619      	mov	r1, r3
 800a100:	4610      	mov	r0, r2
 800a102:	f7fd fc60 	bl	80079c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a106:	bf00      	nop
 800a108:	3720      	adds	r7, #32
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	2000490c 	.word	0x2000490c
 800a114:	20004910 	.word	0x20004910
 800a118:	20004de8 	.word	0x20004de8

0800a11c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a11c:	b480      	push	{r7}
 800a11e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a120:	4b07      	ldr	r3, [pc, #28]	; (800a140 <pvTaskIncrementMutexHeldCount+0x24>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d004      	beq.n	800a132 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a128:	4b05      	ldr	r3, [pc, #20]	; (800a140 <pvTaskIncrementMutexHeldCount+0x24>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a12e:	3201      	adds	r2, #1
 800a130:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a132:	4b03      	ldr	r3, [pc, #12]	; (800a140 <pvTaskIncrementMutexHeldCount+0x24>)
 800a134:	681b      	ldr	r3, [r3, #0]
	}
 800a136:	4618      	mov	r0, r3
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr
 800a140:	2000490c 	.word	0x2000490c

0800a144 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a14e:	4b21      	ldr	r3, [pc, #132]	; (800a1d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a154:	4b20      	ldr	r3, [pc, #128]	; (800a1d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	3304      	adds	r3, #4
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fd fc90 	bl	8007a80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a166:	d10a      	bne.n	800a17e <prvAddCurrentTaskToDelayedList+0x3a>
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d007      	beq.n	800a17e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a16e:	4b1a      	ldr	r3, [pc, #104]	; (800a1d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3304      	adds	r3, #4
 800a174:	4619      	mov	r1, r3
 800a176:	4819      	ldr	r0, [pc, #100]	; (800a1dc <prvAddCurrentTaskToDelayedList+0x98>)
 800a178:	f7fd fc25 	bl	80079c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a17c:	e026      	b.n	800a1cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4413      	add	r3, r2
 800a184:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a186:	4b14      	ldr	r3, [pc, #80]	; (800a1d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	429a      	cmp	r2, r3
 800a194:	d209      	bcs.n	800a1aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a196:	4b12      	ldr	r3, [pc, #72]	; (800a1e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	4b0f      	ldr	r3, [pc, #60]	; (800a1d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3304      	adds	r3, #4
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	f7fd fc33 	bl	8007a0e <vListInsert>
}
 800a1a8:	e010      	b.n	800a1cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1aa:	4b0e      	ldr	r3, [pc, #56]	; (800a1e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	4b0a      	ldr	r3, [pc, #40]	; (800a1d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3304      	adds	r3, #4
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	f7fd fc29 	bl	8007a0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a1bc:	4b0a      	ldr	r3, [pc, #40]	; (800a1e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d202      	bcs.n	800a1cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a1c6:	4a08      	ldr	r2, [pc, #32]	; (800a1e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	6013      	str	r3, [r2, #0]
}
 800a1cc:	bf00      	nop
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	20004de4 	.word	0x20004de4
 800a1d8:	2000490c 	.word	0x2000490c
 800a1dc:	20004dcc 	.word	0x20004dcc
 800a1e0:	20004d9c 	.word	0x20004d9c
 800a1e4:	20004d98 	.word	0x20004d98
 800a1e8:	20004e00 	.word	0x20004e00

0800a1ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b08a      	sub	sp, #40	; 0x28
 800a1f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a1f6:	f000 fba1 	bl	800a93c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a1fa:	4b1c      	ldr	r3, [pc, #112]	; (800a26c <xTimerCreateTimerTask+0x80>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d021      	beq.n	800a246 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a202:	2300      	movs	r3, #0
 800a204:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a206:	2300      	movs	r3, #0
 800a208:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a20a:	1d3a      	adds	r2, r7, #4
 800a20c:	f107 0108 	add.w	r1, r7, #8
 800a210:	f107 030c 	add.w	r3, r7, #12
 800a214:	4618      	mov	r0, r3
 800a216:	f7fd f9a5 	bl	8007564 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a21a:	6879      	ldr	r1, [r7, #4]
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	9202      	str	r2, [sp, #8]
 800a222:	9301      	str	r3, [sp, #4]
 800a224:	2302      	movs	r3, #2
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	2300      	movs	r3, #0
 800a22a:	460a      	mov	r2, r1
 800a22c:	4910      	ldr	r1, [pc, #64]	; (800a270 <xTimerCreateTimerTask+0x84>)
 800a22e:	4811      	ldr	r0, [pc, #68]	; (800a274 <xTimerCreateTimerTask+0x88>)
 800a230:	f7fe feb0 	bl	8008f94 <xTaskCreateStatic>
 800a234:	4603      	mov	r3, r0
 800a236:	4a10      	ldr	r2, [pc, #64]	; (800a278 <xTimerCreateTimerTask+0x8c>)
 800a238:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a23a:	4b0f      	ldr	r3, [pc, #60]	; (800a278 <xTimerCreateTimerTask+0x8c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d001      	beq.n	800a246 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a242:	2301      	movs	r3, #1
 800a244:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d10a      	bne.n	800a262 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a250:	f383 8811 	msr	BASEPRI, r3
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	613b      	str	r3, [r7, #16]
}
 800a25e:	bf00      	nop
 800a260:	e7fe      	b.n	800a260 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a262:	697b      	ldr	r3, [r7, #20]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3718      	adds	r7, #24
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	20004e3c 	.word	0x20004e3c
 800a270:	080107b4 	.word	0x080107b4
 800a274:	0800a4e5 	.word	0x0800a4e5
 800a278:	20004e40 	.word	0x20004e40

0800a27c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b088      	sub	sp, #32
 800a280:	af02      	add	r7, sp, #8
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
 800a288:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a28a:	202c      	movs	r0, #44	; 0x2c
 800a28c:	f7fd f984 	bl	8007598 <pvPortMalloc>
 800a290:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00d      	beq.n	800a2b4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	9301      	str	r3, [sp, #4]
 800a2a4:	6a3b      	ldr	r3, [r7, #32]
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	68b9      	ldr	r1, [r7, #8]
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 f843 	bl	800a33a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a2b4:	697b      	ldr	r3, [r7, #20]
	}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b08a      	sub	sp, #40	; 0x28
 800a2c2:	af02      	add	r7, sp, #8
 800a2c4:	60f8      	str	r0, [r7, #12]
 800a2c6:	60b9      	str	r1, [r7, #8]
 800a2c8:	607a      	str	r2, [r7, #4]
 800a2ca:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a2cc:	232c      	movs	r3, #44	; 0x2c
 800a2ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	2b2c      	cmp	r3, #44	; 0x2c
 800a2d4:	d00a      	beq.n	800a2ec <xTimerCreateStatic+0x2e>
	__asm volatile
 800a2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2da:	f383 8811 	msr	BASEPRI, r3
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	61bb      	str	r3, [r7, #24]
}
 800a2e8:	bf00      	nop
 800a2ea:	e7fe      	b.n	800a2ea <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a2ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10a      	bne.n	800a30a <xTimerCreateStatic+0x4c>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	617b      	str	r3, [r7, #20]
}
 800a306:	bf00      	nop
 800a308:	e7fe      	b.n	800a308 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00d      	beq.n	800a330 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	2202      	movs	r2, #2
 800a318:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	9301      	str	r3, [sp, #4]
 800a320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	68b9      	ldr	r1, [r7, #8]
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f000 f805 	bl	800a33a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a330:	69fb      	ldr	r3, [r7, #28]
	}
 800a332:	4618      	mov	r0, r3
 800a334:	3720      	adds	r7, #32
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b086      	sub	sp, #24
 800a33e:	af00      	add	r7, sp, #0
 800a340:	60f8      	str	r0, [r7, #12]
 800a342:	60b9      	str	r1, [r7, #8]
 800a344:	607a      	str	r2, [r7, #4]
 800a346:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d10a      	bne.n	800a364 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	617b      	str	r3, [r7, #20]
}
 800a360:	bf00      	nop
 800a362:	e7fe      	b.n	800a362 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a366:	2b00      	cmp	r3, #0
 800a368:	d01e      	beq.n	800a3a8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a36a:	f000 fae7 	bl	800a93c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a382:	6a3a      	ldr	r2, [r7, #32]
 800a384:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a388:	3304      	adds	r3, #4
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fd fb0e 	bl	80079ac <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d008      	beq.n	800a3a8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a39c:	f043 0304 	orr.w	r3, r3, #4
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a3a8:	bf00      	nop
 800a3aa:	3718      	adds	r7, #24
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b08a      	sub	sp, #40	; 0x28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	607a      	str	r2, [r7, #4]
 800a3bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10a      	bne.n	800a3de <xTimerGenericCommand+0x2e>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	623b      	str	r3, [r7, #32]
}
 800a3da:	bf00      	nop
 800a3dc:	e7fe      	b.n	800a3dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a3de:	4b1a      	ldr	r3, [pc, #104]	; (800a448 <xTimerGenericCommand+0x98>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d02a      	beq.n	800a43c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	2b05      	cmp	r3, #5
 800a3f6:	dc18      	bgt.n	800a42a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a3f8:	f7ff fd1a 	bl	8009e30 <xTaskGetSchedulerState>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d109      	bne.n	800a416 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a402:	4b11      	ldr	r3, [pc, #68]	; (800a448 <xTimerGenericCommand+0x98>)
 800a404:	6818      	ldr	r0, [r3, #0]
 800a406:	f107 0110 	add.w	r1, r7, #16
 800a40a:	2300      	movs	r3, #0
 800a40c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a40e:	f7fd ff5b 	bl	80082c8 <xQueueGenericSend>
 800a412:	6278      	str	r0, [r7, #36]	; 0x24
 800a414:	e012      	b.n	800a43c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a416:	4b0c      	ldr	r3, [pc, #48]	; (800a448 <xTimerGenericCommand+0x98>)
 800a418:	6818      	ldr	r0, [r3, #0]
 800a41a:	f107 0110 	add.w	r1, r7, #16
 800a41e:	2300      	movs	r3, #0
 800a420:	2200      	movs	r2, #0
 800a422:	f7fd ff51 	bl	80082c8 <xQueueGenericSend>
 800a426:	6278      	str	r0, [r7, #36]	; 0x24
 800a428:	e008      	b.n	800a43c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a42a:	4b07      	ldr	r3, [pc, #28]	; (800a448 <xTimerGenericCommand+0x98>)
 800a42c:	6818      	ldr	r0, [r3, #0]
 800a42e:	f107 0110 	add.w	r1, r7, #16
 800a432:	2300      	movs	r3, #0
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	f7fe f845 	bl	80084c4 <xQueueGenericSendFromISR>
 800a43a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3728      	adds	r7, #40	; 0x28
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20004e3c 	.word	0x20004e3c

0800a44c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b088      	sub	sp, #32
 800a450:	af02      	add	r7, sp, #8
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a456:	4b22      	ldr	r3, [pc, #136]	; (800a4e0 <prvProcessExpiredTimer+0x94>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	3304      	adds	r3, #4
 800a464:	4618      	mov	r0, r3
 800a466:	f7fd fb0b 	bl	8007a80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a470:	f003 0304 	and.w	r3, r3, #4
 800a474:	2b00      	cmp	r3, #0
 800a476:	d022      	beq.n	800a4be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	699a      	ldr	r2, [r3, #24]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	18d1      	adds	r1, r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	6978      	ldr	r0, [r7, #20]
 800a486:	f000 f8d1 	bl	800a62c <prvInsertTimerInActiveList>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d01f      	beq.n	800a4d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a490:	2300      	movs	r3, #0
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	2300      	movs	r3, #0
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	2100      	movs	r1, #0
 800a49a:	6978      	ldr	r0, [r7, #20]
 800a49c:	f7ff ff88 	bl	800a3b0 <xTimerGenericCommand>
 800a4a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d113      	bne.n	800a4d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ac:	f383 8811 	msr	BASEPRI, r3
 800a4b0:	f3bf 8f6f 	isb	sy
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	60fb      	str	r3, [r7, #12]
}
 800a4ba:	bf00      	nop
 800a4bc:	e7fe      	b.n	800a4bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4c4:	f023 0301 	bic.w	r3, r3, #1
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	6a1b      	ldr	r3, [r3, #32]
 800a4d4:	6978      	ldr	r0, [r7, #20]
 800a4d6:	4798      	blx	r3
}
 800a4d8:	bf00      	nop
 800a4da:	3718      	adds	r7, #24
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	20004e34 	.word	0x20004e34

0800a4e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4ec:	f107 0308 	add.w	r3, r7, #8
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f000 f857 	bl	800a5a4 <prvGetNextExpireTime>
 800a4f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f000 f803 	bl	800a508 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a502:	f000 f8d5 	bl	800a6b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a506:	e7f1      	b.n	800a4ec <prvTimerTask+0x8>

0800a508 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a512:	f7ff f8a1 	bl	8009658 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a516:	f107 0308 	add.w	r3, r7, #8
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 f866 	bl	800a5ec <prvSampleTimeNow>
 800a520:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d130      	bne.n	800a58a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d10a      	bne.n	800a544 <prvProcessTimerOrBlockTask+0x3c>
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	429a      	cmp	r2, r3
 800a534:	d806      	bhi.n	800a544 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a536:	f7ff f89d 	bl	8009674 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a53a:	68f9      	ldr	r1, [r7, #12]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f7ff ff85 	bl	800a44c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a542:	e024      	b.n	800a58e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d008      	beq.n	800a55c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a54a:	4b13      	ldr	r3, [pc, #76]	; (800a598 <prvProcessTimerOrBlockTask+0x90>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d101      	bne.n	800a558 <prvProcessTimerOrBlockTask+0x50>
 800a554:	2301      	movs	r3, #1
 800a556:	e000      	b.n	800a55a <prvProcessTimerOrBlockTask+0x52>
 800a558:	2300      	movs	r3, #0
 800a55a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a55c:	4b0f      	ldr	r3, [pc, #60]	; (800a59c <prvProcessTimerOrBlockTask+0x94>)
 800a55e:	6818      	ldr	r0, [r3, #0]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	1ad3      	subs	r3, r2, r3
 800a566:	683a      	ldr	r2, [r7, #0]
 800a568:	4619      	mov	r1, r3
 800a56a:	f7fe fcdf 	bl	8008f2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a56e:	f7ff f881 	bl	8009674 <xTaskResumeAll>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10a      	bne.n	800a58e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a578:	4b09      	ldr	r3, [pc, #36]	; (800a5a0 <prvProcessTimerOrBlockTask+0x98>)
 800a57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	f3bf 8f6f 	isb	sy
}
 800a588:	e001      	b.n	800a58e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a58a:	f7ff f873 	bl	8009674 <xTaskResumeAll>
}
 800a58e:	bf00      	nop
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	20004e38 	.word	0x20004e38
 800a59c:	20004e3c 	.word	0x20004e3c
 800a5a0:	e000ed04 	.word	0xe000ed04

0800a5a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a5ac:	4b0e      	ldr	r3, [pc, #56]	; (800a5e8 <prvGetNextExpireTime+0x44>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <prvGetNextExpireTime+0x16>
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	e000      	b.n	800a5bc <prvGetNextExpireTime+0x18>
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d105      	bne.n	800a5d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5c8:	4b07      	ldr	r3, [pc, #28]	; (800a5e8 <prvGetNextExpireTime+0x44>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	60fb      	str	r3, [r7, #12]
 800a5d2:	e001      	b.n	800a5d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3714      	adds	r7, #20
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	20004e34 	.word	0x20004e34

0800a5ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a5f4:	f7ff f8dc 	bl	80097b0 <xTaskGetTickCount>
 800a5f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a5fa:	4b0b      	ldr	r3, [pc, #44]	; (800a628 <prvSampleTimeNow+0x3c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	429a      	cmp	r2, r3
 800a602:	d205      	bcs.n	800a610 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a604:	f000 f936 	bl	800a874 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	e002      	b.n	800a616 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a616:	4a04      	ldr	r2, [pc, #16]	; (800a628 <prvSampleTimeNow+0x3c>)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a61c:	68fb      	ldr	r3, [r7, #12]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	20004e44 	.word	0x20004e44

0800a62c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b086      	sub	sp, #24
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
 800a638:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a63a:	2300      	movs	r3, #0
 800a63c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d812      	bhi.n	800a678 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	1ad2      	subs	r2, r2, r3
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d302      	bcc.n	800a666 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a660:	2301      	movs	r3, #1
 800a662:	617b      	str	r3, [r7, #20]
 800a664:	e01b      	b.n	800a69e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a666:	4b10      	ldr	r3, [pc, #64]	; (800a6a8 <prvInsertTimerInActiveList+0x7c>)
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	3304      	adds	r3, #4
 800a66e:	4619      	mov	r1, r3
 800a670:	4610      	mov	r0, r2
 800a672:	f7fd f9cc 	bl	8007a0e <vListInsert>
 800a676:	e012      	b.n	800a69e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d206      	bcs.n	800a68e <prvInsertTimerInActiveList+0x62>
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	429a      	cmp	r2, r3
 800a686:	d302      	bcc.n	800a68e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a688:	2301      	movs	r3, #1
 800a68a:	617b      	str	r3, [r7, #20]
 800a68c:	e007      	b.n	800a69e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a68e:	4b07      	ldr	r3, [pc, #28]	; (800a6ac <prvInsertTimerInActiveList+0x80>)
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3304      	adds	r3, #4
 800a696:	4619      	mov	r1, r3
 800a698:	4610      	mov	r0, r2
 800a69a:	f7fd f9b8 	bl	8007a0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a69e:	697b      	ldr	r3, [r7, #20]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3718      	adds	r7, #24
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	20004e38 	.word	0x20004e38
 800a6ac:	20004e34 	.word	0x20004e34

0800a6b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b08e      	sub	sp, #56	; 0x38
 800a6b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6b6:	e0ca      	b.n	800a84e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	da18      	bge.n	800a6f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a6be:	1d3b      	adds	r3, r7, #4
 800a6c0:	3304      	adds	r3, #4
 800a6c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10a      	bne.n	800a6e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	61fb      	str	r3, [r7, #28]
}
 800a6dc:	bf00      	nop
 800a6de:	e7fe      	b.n	800a6de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6e6:	6850      	ldr	r0, [r2, #4]
 800a6e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ea:	6892      	ldr	r2, [r2, #8]
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f2c0 80aa 	blt.w	800a84c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fe:	695b      	ldr	r3, [r3, #20]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d004      	beq.n	800a70e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a706:	3304      	adds	r3, #4
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fd f9b9 	bl	8007a80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a70e:	463b      	mov	r3, r7
 800a710:	4618      	mov	r0, r3
 800a712:	f7ff ff6b 	bl	800a5ec <prvSampleTimeNow>
 800a716:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b09      	cmp	r3, #9
 800a71c:	f200 8097 	bhi.w	800a84e <prvProcessReceivedCommands+0x19e>
 800a720:	a201      	add	r2, pc, #4	; (adr r2, 800a728 <prvProcessReceivedCommands+0x78>)
 800a722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a726:	bf00      	nop
 800a728:	0800a751 	.word	0x0800a751
 800a72c:	0800a751 	.word	0x0800a751
 800a730:	0800a751 	.word	0x0800a751
 800a734:	0800a7c5 	.word	0x0800a7c5
 800a738:	0800a7d9 	.word	0x0800a7d9
 800a73c:	0800a823 	.word	0x0800a823
 800a740:	0800a751 	.word	0x0800a751
 800a744:	0800a751 	.word	0x0800a751
 800a748:	0800a7c5 	.word	0x0800a7c5
 800a74c:	0800a7d9 	.word	0x0800a7d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a756:	f043 0301 	orr.w	r3, r3, #1
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	699b      	ldr	r3, [r3, #24]
 800a768:	18d1      	adds	r1, r2, r3
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a76e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a770:	f7ff ff5c 	bl	800a62c <prvInsertTimerInActiveList>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d069      	beq.n	800a84e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77c:	6a1b      	ldr	r3, [r3, #32]
 800a77e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a780:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a788:	f003 0304 	and.w	r3, r3, #4
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d05e      	beq.n	800a84e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a794:	699b      	ldr	r3, [r3, #24]
 800a796:	441a      	add	r2, r3
 800a798:	2300      	movs	r3, #0
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	2300      	movs	r3, #0
 800a79e:	2100      	movs	r1, #0
 800a7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a2:	f7ff fe05 	bl	800a3b0 <xTimerGenericCommand>
 800a7a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a7a8:	6a3b      	ldr	r3, [r7, #32]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d14f      	bne.n	800a84e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	61bb      	str	r3, [r7, #24]
}
 800a7c0:	bf00      	nop
 800a7c2:	e7fe      	b.n	800a7c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7ca:	f023 0301 	bic.w	r3, r3, #1
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a7d6:	e03a      	b.n	800a84e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7de:	f043 0301 	orr.w	r3, r3, #1
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a7ea:	68ba      	ldr	r2, [r7, #8]
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10a      	bne.n	800a80e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	617b      	str	r3, [r7, #20]
}
 800a80a:	bf00      	nop
 800a80c:	e7fe      	b.n	800a80c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a810:	699a      	ldr	r2, [r3, #24]
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	18d1      	adds	r1, r2, r3
 800a816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a81a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a81c:	f7ff ff06 	bl	800a62c <prvInsertTimerInActiveList>
					break;
 800a820:	e015      	b.n	800a84e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a828:	f003 0302 	and.w	r3, r3, #2
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d103      	bne.n	800a838 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a832:	f7fc ff7d 	bl	8007730 <vPortFree>
 800a836:	e00a      	b.n	800a84e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a83e:	f023 0301 	bic.w	r3, r3, #1
 800a842:	b2da      	uxtb	r2, r3
 800a844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a84a:	e000      	b.n	800a84e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a84c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a84e:	4b08      	ldr	r3, [pc, #32]	; (800a870 <prvProcessReceivedCommands+0x1c0>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	1d39      	adds	r1, r7, #4
 800a854:	2200      	movs	r2, #0
 800a856:	4618      	mov	r0, r3
 800a858:	f7fd ff5c 	bl	8008714 <xQueueReceive>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f47f af2a 	bne.w	800a6b8 <prvProcessReceivedCommands+0x8>
	}
}
 800a864:	bf00      	nop
 800a866:	bf00      	nop
 800a868:	3730      	adds	r7, #48	; 0x30
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	20004e3c 	.word	0x20004e3c

0800a874 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b088      	sub	sp, #32
 800a878:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a87a:	e048      	b.n	800a90e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a87c:	4b2d      	ldr	r3, [pc, #180]	; (800a934 <prvSwitchTimerLists+0xc0>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a886:	4b2b      	ldr	r3, [pc, #172]	; (800a934 <prvSwitchTimerLists+0xc0>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	3304      	adds	r3, #4
 800a894:	4618      	mov	r0, r3
 800a896:	f7fd f8f3 	bl	8007a80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8a8:	f003 0304 	and.w	r3, r3, #4
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d02e      	beq.n	800a90e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	699b      	ldr	r3, [r3, #24]
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d90e      	bls.n	800a8e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8ce:	4b19      	ldr	r3, [pc, #100]	; (800a934 <prvSwitchTimerLists+0xc0>)
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4610      	mov	r0, r2
 800a8da:	f7fd f898 	bl	8007a0e <vListInsert>
 800a8de:	e016      	b.n	800a90e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f7ff fd60 	bl	800a3b0 <xTimerGenericCommand>
 800a8f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10a      	bne.n	800a90e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	603b      	str	r3, [r7, #0]
}
 800a90a:	bf00      	nop
 800a90c:	e7fe      	b.n	800a90c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a90e:	4b09      	ldr	r3, [pc, #36]	; (800a934 <prvSwitchTimerLists+0xc0>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1b1      	bne.n	800a87c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a918:	4b06      	ldr	r3, [pc, #24]	; (800a934 <prvSwitchTimerLists+0xc0>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a91e:	4b06      	ldr	r3, [pc, #24]	; (800a938 <prvSwitchTimerLists+0xc4>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a04      	ldr	r2, [pc, #16]	; (800a934 <prvSwitchTimerLists+0xc0>)
 800a924:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a926:	4a04      	ldr	r2, [pc, #16]	; (800a938 <prvSwitchTimerLists+0xc4>)
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	6013      	str	r3, [r2, #0]
}
 800a92c:	bf00      	nop
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	20004e34 	.word	0x20004e34
 800a938:	20004e38 	.word	0x20004e38

0800a93c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a942:	f7fd f9f7 	bl	8007d34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a946:	4b15      	ldr	r3, [pc, #84]	; (800a99c <prvCheckForValidListAndQueue+0x60>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d120      	bne.n	800a990 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a94e:	4814      	ldr	r0, [pc, #80]	; (800a9a0 <prvCheckForValidListAndQueue+0x64>)
 800a950:	f7fd f80c 	bl	800796c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a954:	4813      	ldr	r0, [pc, #76]	; (800a9a4 <prvCheckForValidListAndQueue+0x68>)
 800a956:	f7fd f809 	bl	800796c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a95a:	4b13      	ldr	r3, [pc, #76]	; (800a9a8 <prvCheckForValidListAndQueue+0x6c>)
 800a95c:	4a10      	ldr	r2, [pc, #64]	; (800a9a0 <prvCheckForValidListAndQueue+0x64>)
 800a95e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a960:	4b12      	ldr	r3, [pc, #72]	; (800a9ac <prvCheckForValidListAndQueue+0x70>)
 800a962:	4a10      	ldr	r2, [pc, #64]	; (800a9a4 <prvCheckForValidListAndQueue+0x68>)
 800a964:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a966:	2300      	movs	r3, #0
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	4b11      	ldr	r3, [pc, #68]	; (800a9b0 <prvCheckForValidListAndQueue+0x74>)
 800a96c:	4a11      	ldr	r2, [pc, #68]	; (800a9b4 <prvCheckForValidListAndQueue+0x78>)
 800a96e:	2110      	movs	r1, #16
 800a970:	200a      	movs	r0, #10
 800a972:	f7fd fb69 	bl	8008048 <xQueueGenericCreateStatic>
 800a976:	4603      	mov	r3, r0
 800a978:	4a08      	ldr	r2, [pc, #32]	; (800a99c <prvCheckForValidListAndQueue+0x60>)
 800a97a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a97c:	4b07      	ldr	r3, [pc, #28]	; (800a99c <prvCheckForValidListAndQueue+0x60>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d005      	beq.n	800a990 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a984:	4b05      	ldr	r3, [pc, #20]	; (800a99c <prvCheckForValidListAndQueue+0x60>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	490b      	ldr	r1, [pc, #44]	; (800a9b8 <prvCheckForValidListAndQueue+0x7c>)
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fe fa7a 	bl	8008e84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a990:	f7fd fa00 	bl	8007d94 <vPortExitCritical>
}
 800a994:	bf00      	nop
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	20004e3c 	.word	0x20004e3c
 800a9a0:	20004e0c 	.word	0x20004e0c
 800a9a4:	20004e20 	.word	0x20004e20
 800a9a8:	20004e34 	.word	0x20004e34
 800a9ac:	20004e38 	.word	0x20004e38
 800a9b0:	20004ee8 	.word	0x20004ee8
 800a9b4:	20004e48 	.word	0x20004e48
 800a9b8:	080107bc 	.word	0x080107bc

0800a9bc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10a      	bne.n	800a9e4 <xTimerIsTimerActive+0x28>
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	60fb      	str	r3, [r7, #12]
}
 800a9e0:	bf00      	nop
 800a9e2:	e7fe      	b.n	800a9e2 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800a9e4:	f7fd f9a6 	bl	8007d34 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ee:	f003 0301 	and.w	r3, r3, #1
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d102      	bne.n	800a9fc <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	617b      	str	r3, [r7, #20]
 800a9fa:	e001      	b.n	800aa00 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800aa00:	f7fd f9c8 	bl	8007d94 <vPortExitCritical>

	return xReturn;
 800aa04:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800aa06:	4618      	mov	r0, r3
 800aa08:	3718      	adds	r7, #24
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b086      	sub	sp, #24
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10a      	bne.n	800aa36 <pvTimerGetTimerID+0x28>
	__asm volatile
 800aa20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	60fb      	str	r3, [r7, #12]
}
 800aa32:	bf00      	nop
 800aa34:	e7fe      	b.n	800aa34 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800aa36:	f7fd f97d 	bl	8007d34 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800aa40:	f7fd f9a8 	bl	8007d94 <vPortExitCritical>

	return pvReturn;
 800aa44:	693b      	ldr	r3, [r7, #16]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3718      	adds	r7, #24
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
	...

0800aa50 <__errno>:
 800aa50:	4b01      	ldr	r3, [pc, #4]	; (800aa58 <__errno+0x8>)
 800aa52:	6818      	ldr	r0, [r3, #0]
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	20000038 	.word	0x20000038

0800aa5c <std>:
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	b510      	push	{r4, lr}
 800aa60:	4604      	mov	r4, r0
 800aa62:	e9c0 3300 	strd	r3, r3, [r0]
 800aa66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa6a:	6083      	str	r3, [r0, #8]
 800aa6c:	8181      	strh	r1, [r0, #12]
 800aa6e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa70:	81c2      	strh	r2, [r0, #14]
 800aa72:	6183      	str	r3, [r0, #24]
 800aa74:	4619      	mov	r1, r3
 800aa76:	2208      	movs	r2, #8
 800aa78:	305c      	adds	r0, #92	; 0x5c
 800aa7a:	f000 f91a 	bl	800acb2 <memset>
 800aa7e:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <std+0x38>)
 800aa80:	6263      	str	r3, [r4, #36]	; 0x24
 800aa82:	4b05      	ldr	r3, [pc, #20]	; (800aa98 <std+0x3c>)
 800aa84:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa86:	4b05      	ldr	r3, [pc, #20]	; (800aa9c <std+0x40>)
 800aa88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa8a:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <std+0x44>)
 800aa8c:	6224      	str	r4, [r4, #32]
 800aa8e:	6323      	str	r3, [r4, #48]	; 0x30
 800aa90:	bd10      	pop	{r4, pc}
 800aa92:	bf00      	nop
 800aa94:	0800bc21 	.word	0x0800bc21
 800aa98:	0800bc43 	.word	0x0800bc43
 800aa9c:	0800bc7b 	.word	0x0800bc7b
 800aaa0:	0800bc9f 	.word	0x0800bc9f

0800aaa4 <_cleanup_r>:
 800aaa4:	4901      	ldr	r1, [pc, #4]	; (800aaac <_cleanup_r+0x8>)
 800aaa6:	f000 b8af 	b.w	800ac08 <_fwalk_reent>
 800aaaa:	bf00      	nop
 800aaac:	0800d849 	.word	0x0800d849

0800aab0 <__sfmoreglue>:
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	2268      	movs	r2, #104	; 0x68
 800aab4:	1e4d      	subs	r5, r1, #1
 800aab6:	4355      	muls	r5, r2
 800aab8:	460e      	mov	r6, r1
 800aaba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aabe:	f000 f921 	bl	800ad04 <_malloc_r>
 800aac2:	4604      	mov	r4, r0
 800aac4:	b140      	cbz	r0, 800aad8 <__sfmoreglue+0x28>
 800aac6:	2100      	movs	r1, #0
 800aac8:	e9c0 1600 	strd	r1, r6, [r0]
 800aacc:	300c      	adds	r0, #12
 800aace:	60a0      	str	r0, [r4, #8]
 800aad0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aad4:	f000 f8ed 	bl	800acb2 <memset>
 800aad8:	4620      	mov	r0, r4
 800aada:	bd70      	pop	{r4, r5, r6, pc}

0800aadc <__sfp_lock_acquire>:
 800aadc:	4801      	ldr	r0, [pc, #4]	; (800aae4 <__sfp_lock_acquire+0x8>)
 800aade:	f000 b8d8 	b.w	800ac92 <__retarget_lock_acquire_recursive>
 800aae2:	bf00      	nop
 800aae4:	20004f39 	.word	0x20004f39

0800aae8 <__sfp_lock_release>:
 800aae8:	4801      	ldr	r0, [pc, #4]	; (800aaf0 <__sfp_lock_release+0x8>)
 800aaea:	f000 b8d3 	b.w	800ac94 <__retarget_lock_release_recursive>
 800aaee:	bf00      	nop
 800aaf0:	20004f39 	.word	0x20004f39

0800aaf4 <__sinit_lock_acquire>:
 800aaf4:	4801      	ldr	r0, [pc, #4]	; (800aafc <__sinit_lock_acquire+0x8>)
 800aaf6:	f000 b8cc 	b.w	800ac92 <__retarget_lock_acquire_recursive>
 800aafa:	bf00      	nop
 800aafc:	20004f3a 	.word	0x20004f3a

0800ab00 <__sinit_lock_release>:
 800ab00:	4801      	ldr	r0, [pc, #4]	; (800ab08 <__sinit_lock_release+0x8>)
 800ab02:	f000 b8c7 	b.w	800ac94 <__retarget_lock_release_recursive>
 800ab06:	bf00      	nop
 800ab08:	20004f3a 	.word	0x20004f3a

0800ab0c <__sinit>:
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	4604      	mov	r4, r0
 800ab10:	f7ff fff0 	bl	800aaf4 <__sinit_lock_acquire>
 800ab14:	69a3      	ldr	r3, [r4, #24]
 800ab16:	b11b      	cbz	r3, 800ab20 <__sinit+0x14>
 800ab18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab1c:	f7ff bff0 	b.w	800ab00 <__sinit_lock_release>
 800ab20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab24:	6523      	str	r3, [r4, #80]	; 0x50
 800ab26:	4b13      	ldr	r3, [pc, #76]	; (800ab74 <__sinit+0x68>)
 800ab28:	4a13      	ldr	r2, [pc, #76]	; (800ab78 <__sinit+0x6c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab2e:	42a3      	cmp	r3, r4
 800ab30:	bf04      	itt	eq
 800ab32:	2301      	moveq	r3, #1
 800ab34:	61a3      	streq	r3, [r4, #24]
 800ab36:	4620      	mov	r0, r4
 800ab38:	f000 f820 	bl	800ab7c <__sfp>
 800ab3c:	6060      	str	r0, [r4, #4]
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f000 f81c 	bl	800ab7c <__sfp>
 800ab44:	60a0      	str	r0, [r4, #8]
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 f818 	bl	800ab7c <__sfp>
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	60e0      	str	r0, [r4, #12]
 800ab50:	2104      	movs	r1, #4
 800ab52:	6860      	ldr	r0, [r4, #4]
 800ab54:	f7ff ff82 	bl	800aa5c <std>
 800ab58:	68a0      	ldr	r0, [r4, #8]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	2109      	movs	r1, #9
 800ab5e:	f7ff ff7d 	bl	800aa5c <std>
 800ab62:	68e0      	ldr	r0, [r4, #12]
 800ab64:	2202      	movs	r2, #2
 800ab66:	2112      	movs	r1, #18
 800ab68:	f7ff ff78 	bl	800aa5c <std>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	61a3      	str	r3, [r4, #24]
 800ab70:	e7d2      	b.n	800ab18 <__sinit+0xc>
 800ab72:	bf00      	nop
 800ab74:	08011dc8 	.word	0x08011dc8
 800ab78:	0800aaa5 	.word	0x0800aaa5

0800ab7c <__sfp>:
 800ab7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7e:	4607      	mov	r7, r0
 800ab80:	f7ff ffac 	bl	800aadc <__sfp_lock_acquire>
 800ab84:	4b1e      	ldr	r3, [pc, #120]	; (800ac00 <__sfp+0x84>)
 800ab86:	681e      	ldr	r6, [r3, #0]
 800ab88:	69b3      	ldr	r3, [r6, #24]
 800ab8a:	b913      	cbnz	r3, 800ab92 <__sfp+0x16>
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f7ff ffbd 	bl	800ab0c <__sinit>
 800ab92:	3648      	adds	r6, #72	; 0x48
 800ab94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	d503      	bpl.n	800aba4 <__sfp+0x28>
 800ab9c:	6833      	ldr	r3, [r6, #0]
 800ab9e:	b30b      	cbz	r3, 800abe4 <__sfp+0x68>
 800aba0:	6836      	ldr	r6, [r6, #0]
 800aba2:	e7f7      	b.n	800ab94 <__sfp+0x18>
 800aba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aba8:	b9d5      	cbnz	r5, 800abe0 <__sfp+0x64>
 800abaa:	4b16      	ldr	r3, [pc, #88]	; (800ac04 <__sfp+0x88>)
 800abac:	60e3      	str	r3, [r4, #12]
 800abae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abb2:	6665      	str	r5, [r4, #100]	; 0x64
 800abb4:	f000 f86c 	bl	800ac90 <__retarget_lock_init_recursive>
 800abb8:	f7ff ff96 	bl	800aae8 <__sfp_lock_release>
 800abbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800abc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800abc4:	6025      	str	r5, [r4, #0]
 800abc6:	61a5      	str	r5, [r4, #24]
 800abc8:	2208      	movs	r2, #8
 800abca:	4629      	mov	r1, r5
 800abcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800abd0:	f000 f86f 	bl	800acb2 <memset>
 800abd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abdc:	4620      	mov	r0, r4
 800abde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abe0:	3468      	adds	r4, #104	; 0x68
 800abe2:	e7d9      	b.n	800ab98 <__sfp+0x1c>
 800abe4:	2104      	movs	r1, #4
 800abe6:	4638      	mov	r0, r7
 800abe8:	f7ff ff62 	bl	800aab0 <__sfmoreglue>
 800abec:	4604      	mov	r4, r0
 800abee:	6030      	str	r0, [r6, #0]
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d1d5      	bne.n	800aba0 <__sfp+0x24>
 800abf4:	f7ff ff78 	bl	800aae8 <__sfp_lock_release>
 800abf8:	230c      	movs	r3, #12
 800abfa:	603b      	str	r3, [r7, #0]
 800abfc:	e7ee      	b.n	800abdc <__sfp+0x60>
 800abfe:	bf00      	nop
 800ac00:	08011dc8 	.word	0x08011dc8
 800ac04:	ffff0001 	.word	0xffff0001

0800ac08 <_fwalk_reent>:
 800ac08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac0c:	4606      	mov	r6, r0
 800ac0e:	4688      	mov	r8, r1
 800ac10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac14:	2700      	movs	r7, #0
 800ac16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac1a:	f1b9 0901 	subs.w	r9, r9, #1
 800ac1e:	d505      	bpl.n	800ac2c <_fwalk_reent+0x24>
 800ac20:	6824      	ldr	r4, [r4, #0]
 800ac22:	2c00      	cmp	r4, #0
 800ac24:	d1f7      	bne.n	800ac16 <_fwalk_reent+0xe>
 800ac26:	4638      	mov	r0, r7
 800ac28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac2c:	89ab      	ldrh	r3, [r5, #12]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d907      	bls.n	800ac42 <_fwalk_reent+0x3a>
 800ac32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac36:	3301      	adds	r3, #1
 800ac38:	d003      	beq.n	800ac42 <_fwalk_reent+0x3a>
 800ac3a:	4629      	mov	r1, r5
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	47c0      	blx	r8
 800ac40:	4307      	orrs	r7, r0
 800ac42:	3568      	adds	r5, #104	; 0x68
 800ac44:	e7e9      	b.n	800ac1a <_fwalk_reent+0x12>
	...

0800ac48 <__libc_init_array>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	4d0d      	ldr	r5, [pc, #52]	; (800ac80 <__libc_init_array+0x38>)
 800ac4c:	4c0d      	ldr	r4, [pc, #52]	; (800ac84 <__libc_init_array+0x3c>)
 800ac4e:	1b64      	subs	r4, r4, r5
 800ac50:	10a4      	asrs	r4, r4, #2
 800ac52:	2600      	movs	r6, #0
 800ac54:	42a6      	cmp	r6, r4
 800ac56:	d109      	bne.n	800ac6c <__libc_init_array+0x24>
 800ac58:	4d0b      	ldr	r5, [pc, #44]	; (800ac88 <__libc_init_array+0x40>)
 800ac5a:	4c0c      	ldr	r4, [pc, #48]	; (800ac8c <__libc_init_array+0x44>)
 800ac5c:	f005 fb22 	bl	80102a4 <_init>
 800ac60:	1b64      	subs	r4, r4, r5
 800ac62:	10a4      	asrs	r4, r4, #2
 800ac64:	2600      	movs	r6, #0
 800ac66:	42a6      	cmp	r6, r4
 800ac68:	d105      	bne.n	800ac76 <__libc_init_array+0x2e>
 800ac6a:	bd70      	pop	{r4, r5, r6, pc}
 800ac6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac70:	4798      	blx	r3
 800ac72:	3601      	adds	r6, #1
 800ac74:	e7ee      	b.n	800ac54 <__libc_init_array+0xc>
 800ac76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac7a:	4798      	blx	r3
 800ac7c:	3601      	adds	r6, #1
 800ac7e:	e7f2      	b.n	800ac66 <__libc_init_array+0x1e>
 800ac80:	08012248 	.word	0x08012248
 800ac84:	08012248 	.word	0x08012248
 800ac88:	08012248 	.word	0x08012248
 800ac8c:	0801224c 	.word	0x0801224c

0800ac90 <__retarget_lock_init_recursive>:
 800ac90:	4770      	bx	lr

0800ac92 <__retarget_lock_acquire_recursive>:
 800ac92:	4770      	bx	lr

0800ac94 <__retarget_lock_release_recursive>:
 800ac94:	4770      	bx	lr

0800ac96 <memcpy>:
 800ac96:	440a      	add	r2, r1
 800ac98:	4291      	cmp	r1, r2
 800ac9a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac9e:	d100      	bne.n	800aca2 <memcpy+0xc>
 800aca0:	4770      	bx	lr
 800aca2:	b510      	push	{r4, lr}
 800aca4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aca8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acac:	4291      	cmp	r1, r2
 800acae:	d1f9      	bne.n	800aca4 <memcpy+0xe>
 800acb0:	bd10      	pop	{r4, pc}

0800acb2 <memset>:
 800acb2:	4402      	add	r2, r0
 800acb4:	4603      	mov	r3, r0
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d100      	bne.n	800acbc <memset+0xa>
 800acba:	4770      	bx	lr
 800acbc:	f803 1b01 	strb.w	r1, [r3], #1
 800acc0:	e7f9      	b.n	800acb6 <memset+0x4>
	...

0800acc4 <sbrk_aligned>:
 800acc4:	b570      	push	{r4, r5, r6, lr}
 800acc6:	4e0e      	ldr	r6, [pc, #56]	; (800ad00 <sbrk_aligned+0x3c>)
 800acc8:	460c      	mov	r4, r1
 800acca:	6831      	ldr	r1, [r6, #0]
 800accc:	4605      	mov	r5, r0
 800acce:	b911      	cbnz	r1, 800acd6 <sbrk_aligned+0x12>
 800acd0:	f000 ff70 	bl	800bbb4 <_sbrk_r>
 800acd4:	6030      	str	r0, [r6, #0]
 800acd6:	4621      	mov	r1, r4
 800acd8:	4628      	mov	r0, r5
 800acda:	f000 ff6b 	bl	800bbb4 <_sbrk_r>
 800acde:	1c43      	adds	r3, r0, #1
 800ace0:	d00a      	beq.n	800acf8 <sbrk_aligned+0x34>
 800ace2:	1cc4      	adds	r4, r0, #3
 800ace4:	f024 0403 	bic.w	r4, r4, #3
 800ace8:	42a0      	cmp	r0, r4
 800acea:	d007      	beq.n	800acfc <sbrk_aligned+0x38>
 800acec:	1a21      	subs	r1, r4, r0
 800acee:	4628      	mov	r0, r5
 800acf0:	f000 ff60 	bl	800bbb4 <_sbrk_r>
 800acf4:	3001      	adds	r0, #1
 800acf6:	d101      	bne.n	800acfc <sbrk_aligned+0x38>
 800acf8:	f04f 34ff 	mov.w	r4, #4294967295
 800acfc:	4620      	mov	r0, r4
 800acfe:	bd70      	pop	{r4, r5, r6, pc}
 800ad00:	20004f40 	.word	0x20004f40

0800ad04 <_malloc_r>:
 800ad04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad08:	1ccd      	adds	r5, r1, #3
 800ad0a:	f025 0503 	bic.w	r5, r5, #3
 800ad0e:	3508      	adds	r5, #8
 800ad10:	2d0c      	cmp	r5, #12
 800ad12:	bf38      	it	cc
 800ad14:	250c      	movcc	r5, #12
 800ad16:	2d00      	cmp	r5, #0
 800ad18:	4607      	mov	r7, r0
 800ad1a:	db01      	blt.n	800ad20 <_malloc_r+0x1c>
 800ad1c:	42a9      	cmp	r1, r5
 800ad1e:	d905      	bls.n	800ad2c <_malloc_r+0x28>
 800ad20:	230c      	movs	r3, #12
 800ad22:	603b      	str	r3, [r7, #0]
 800ad24:	2600      	movs	r6, #0
 800ad26:	4630      	mov	r0, r6
 800ad28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad2c:	4e2e      	ldr	r6, [pc, #184]	; (800ade8 <_malloc_r+0xe4>)
 800ad2e:	f003 f967 	bl	800e000 <__malloc_lock>
 800ad32:	6833      	ldr	r3, [r6, #0]
 800ad34:	461c      	mov	r4, r3
 800ad36:	bb34      	cbnz	r4, 800ad86 <_malloc_r+0x82>
 800ad38:	4629      	mov	r1, r5
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	f7ff ffc2 	bl	800acc4 <sbrk_aligned>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	4604      	mov	r4, r0
 800ad44:	d14d      	bne.n	800ade2 <_malloc_r+0xde>
 800ad46:	6834      	ldr	r4, [r6, #0]
 800ad48:	4626      	mov	r6, r4
 800ad4a:	2e00      	cmp	r6, #0
 800ad4c:	d140      	bne.n	800add0 <_malloc_r+0xcc>
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	4631      	mov	r1, r6
 800ad52:	4638      	mov	r0, r7
 800ad54:	eb04 0803 	add.w	r8, r4, r3
 800ad58:	f000 ff2c 	bl	800bbb4 <_sbrk_r>
 800ad5c:	4580      	cmp	r8, r0
 800ad5e:	d13a      	bne.n	800add6 <_malloc_r+0xd2>
 800ad60:	6821      	ldr	r1, [r4, #0]
 800ad62:	3503      	adds	r5, #3
 800ad64:	1a6d      	subs	r5, r5, r1
 800ad66:	f025 0503 	bic.w	r5, r5, #3
 800ad6a:	3508      	adds	r5, #8
 800ad6c:	2d0c      	cmp	r5, #12
 800ad6e:	bf38      	it	cc
 800ad70:	250c      	movcc	r5, #12
 800ad72:	4629      	mov	r1, r5
 800ad74:	4638      	mov	r0, r7
 800ad76:	f7ff ffa5 	bl	800acc4 <sbrk_aligned>
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	d02b      	beq.n	800add6 <_malloc_r+0xd2>
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	442b      	add	r3, r5
 800ad82:	6023      	str	r3, [r4, #0]
 800ad84:	e00e      	b.n	800ada4 <_malloc_r+0xa0>
 800ad86:	6822      	ldr	r2, [r4, #0]
 800ad88:	1b52      	subs	r2, r2, r5
 800ad8a:	d41e      	bmi.n	800adca <_malloc_r+0xc6>
 800ad8c:	2a0b      	cmp	r2, #11
 800ad8e:	d916      	bls.n	800adbe <_malloc_r+0xba>
 800ad90:	1961      	adds	r1, r4, r5
 800ad92:	42a3      	cmp	r3, r4
 800ad94:	6025      	str	r5, [r4, #0]
 800ad96:	bf18      	it	ne
 800ad98:	6059      	strne	r1, [r3, #4]
 800ad9a:	6863      	ldr	r3, [r4, #4]
 800ad9c:	bf08      	it	eq
 800ad9e:	6031      	streq	r1, [r6, #0]
 800ada0:	5162      	str	r2, [r4, r5]
 800ada2:	604b      	str	r3, [r1, #4]
 800ada4:	4638      	mov	r0, r7
 800ada6:	f104 060b 	add.w	r6, r4, #11
 800adaa:	f003 f92f 	bl	800e00c <__malloc_unlock>
 800adae:	f026 0607 	bic.w	r6, r6, #7
 800adb2:	1d23      	adds	r3, r4, #4
 800adb4:	1af2      	subs	r2, r6, r3
 800adb6:	d0b6      	beq.n	800ad26 <_malloc_r+0x22>
 800adb8:	1b9b      	subs	r3, r3, r6
 800adba:	50a3      	str	r3, [r4, r2]
 800adbc:	e7b3      	b.n	800ad26 <_malloc_r+0x22>
 800adbe:	6862      	ldr	r2, [r4, #4]
 800adc0:	42a3      	cmp	r3, r4
 800adc2:	bf0c      	ite	eq
 800adc4:	6032      	streq	r2, [r6, #0]
 800adc6:	605a      	strne	r2, [r3, #4]
 800adc8:	e7ec      	b.n	800ada4 <_malloc_r+0xa0>
 800adca:	4623      	mov	r3, r4
 800adcc:	6864      	ldr	r4, [r4, #4]
 800adce:	e7b2      	b.n	800ad36 <_malloc_r+0x32>
 800add0:	4634      	mov	r4, r6
 800add2:	6876      	ldr	r6, [r6, #4]
 800add4:	e7b9      	b.n	800ad4a <_malloc_r+0x46>
 800add6:	230c      	movs	r3, #12
 800add8:	603b      	str	r3, [r7, #0]
 800adda:	4638      	mov	r0, r7
 800addc:	f003 f916 	bl	800e00c <__malloc_unlock>
 800ade0:	e7a1      	b.n	800ad26 <_malloc_r+0x22>
 800ade2:	6025      	str	r5, [r4, #0]
 800ade4:	e7de      	b.n	800ada4 <_malloc_r+0xa0>
 800ade6:	bf00      	nop
 800ade8:	20004f3c 	.word	0x20004f3c

0800adec <__cvt>:
 800adec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adf0:	ec55 4b10 	vmov	r4, r5, d0
 800adf4:	2d00      	cmp	r5, #0
 800adf6:	460e      	mov	r6, r1
 800adf8:	4619      	mov	r1, r3
 800adfa:	462b      	mov	r3, r5
 800adfc:	bfbb      	ittet	lt
 800adfe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae02:	461d      	movlt	r5, r3
 800ae04:	2300      	movge	r3, #0
 800ae06:	232d      	movlt	r3, #45	; 0x2d
 800ae08:	700b      	strb	r3, [r1, #0]
 800ae0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae10:	4691      	mov	r9, r2
 800ae12:	f023 0820 	bic.w	r8, r3, #32
 800ae16:	bfbc      	itt	lt
 800ae18:	4622      	movlt	r2, r4
 800ae1a:	4614      	movlt	r4, r2
 800ae1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae20:	d005      	beq.n	800ae2e <__cvt+0x42>
 800ae22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae26:	d100      	bne.n	800ae2a <__cvt+0x3e>
 800ae28:	3601      	adds	r6, #1
 800ae2a:	2102      	movs	r1, #2
 800ae2c:	e000      	b.n	800ae30 <__cvt+0x44>
 800ae2e:	2103      	movs	r1, #3
 800ae30:	ab03      	add	r3, sp, #12
 800ae32:	9301      	str	r3, [sp, #4]
 800ae34:	ab02      	add	r3, sp, #8
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	ec45 4b10 	vmov	d0, r4, r5
 800ae3c:	4653      	mov	r3, sl
 800ae3e:	4632      	mov	r2, r6
 800ae40:	f001 fe8e 	bl	800cb60 <_dtoa_r>
 800ae44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae48:	4607      	mov	r7, r0
 800ae4a:	d102      	bne.n	800ae52 <__cvt+0x66>
 800ae4c:	f019 0f01 	tst.w	r9, #1
 800ae50:	d022      	beq.n	800ae98 <__cvt+0xac>
 800ae52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae56:	eb07 0906 	add.w	r9, r7, r6
 800ae5a:	d110      	bne.n	800ae7e <__cvt+0x92>
 800ae5c:	783b      	ldrb	r3, [r7, #0]
 800ae5e:	2b30      	cmp	r3, #48	; 0x30
 800ae60:	d10a      	bne.n	800ae78 <__cvt+0x8c>
 800ae62:	2200      	movs	r2, #0
 800ae64:	2300      	movs	r3, #0
 800ae66:	4620      	mov	r0, r4
 800ae68:	4629      	mov	r1, r5
 800ae6a:	f7f5 fe35 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae6e:	b918      	cbnz	r0, 800ae78 <__cvt+0x8c>
 800ae70:	f1c6 0601 	rsb	r6, r6, #1
 800ae74:	f8ca 6000 	str.w	r6, [sl]
 800ae78:	f8da 3000 	ldr.w	r3, [sl]
 800ae7c:	4499      	add	r9, r3
 800ae7e:	2200      	movs	r2, #0
 800ae80:	2300      	movs	r3, #0
 800ae82:	4620      	mov	r0, r4
 800ae84:	4629      	mov	r1, r5
 800ae86:	f7f5 fe27 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae8a:	b108      	cbz	r0, 800ae90 <__cvt+0xa4>
 800ae8c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae90:	2230      	movs	r2, #48	; 0x30
 800ae92:	9b03      	ldr	r3, [sp, #12]
 800ae94:	454b      	cmp	r3, r9
 800ae96:	d307      	bcc.n	800aea8 <__cvt+0xbc>
 800ae98:	9b03      	ldr	r3, [sp, #12]
 800ae9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae9c:	1bdb      	subs	r3, r3, r7
 800ae9e:	4638      	mov	r0, r7
 800aea0:	6013      	str	r3, [r2, #0]
 800aea2:	b004      	add	sp, #16
 800aea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea8:	1c59      	adds	r1, r3, #1
 800aeaa:	9103      	str	r1, [sp, #12]
 800aeac:	701a      	strb	r2, [r3, #0]
 800aeae:	e7f0      	b.n	800ae92 <__cvt+0xa6>

0800aeb0 <__exponent>:
 800aeb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2900      	cmp	r1, #0
 800aeb6:	bfb8      	it	lt
 800aeb8:	4249      	neglt	r1, r1
 800aeba:	f803 2b02 	strb.w	r2, [r3], #2
 800aebe:	bfb4      	ite	lt
 800aec0:	222d      	movlt	r2, #45	; 0x2d
 800aec2:	222b      	movge	r2, #43	; 0x2b
 800aec4:	2909      	cmp	r1, #9
 800aec6:	7042      	strb	r2, [r0, #1]
 800aec8:	dd2a      	ble.n	800af20 <__exponent+0x70>
 800aeca:	f10d 0407 	add.w	r4, sp, #7
 800aece:	46a4      	mov	ip, r4
 800aed0:	270a      	movs	r7, #10
 800aed2:	46a6      	mov	lr, r4
 800aed4:	460a      	mov	r2, r1
 800aed6:	fb91 f6f7 	sdiv	r6, r1, r7
 800aeda:	fb07 1516 	mls	r5, r7, r6, r1
 800aede:	3530      	adds	r5, #48	; 0x30
 800aee0:	2a63      	cmp	r2, #99	; 0x63
 800aee2:	f104 34ff 	add.w	r4, r4, #4294967295
 800aee6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aeea:	4631      	mov	r1, r6
 800aeec:	dcf1      	bgt.n	800aed2 <__exponent+0x22>
 800aeee:	3130      	adds	r1, #48	; 0x30
 800aef0:	f1ae 0502 	sub.w	r5, lr, #2
 800aef4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aef8:	1c44      	adds	r4, r0, #1
 800aefa:	4629      	mov	r1, r5
 800aefc:	4561      	cmp	r1, ip
 800aefe:	d30a      	bcc.n	800af16 <__exponent+0x66>
 800af00:	f10d 0209 	add.w	r2, sp, #9
 800af04:	eba2 020e 	sub.w	r2, r2, lr
 800af08:	4565      	cmp	r5, ip
 800af0a:	bf88      	it	hi
 800af0c:	2200      	movhi	r2, #0
 800af0e:	4413      	add	r3, r2
 800af10:	1a18      	subs	r0, r3, r0
 800af12:	b003      	add	sp, #12
 800af14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af1e:	e7ed      	b.n	800aefc <__exponent+0x4c>
 800af20:	2330      	movs	r3, #48	; 0x30
 800af22:	3130      	adds	r1, #48	; 0x30
 800af24:	7083      	strb	r3, [r0, #2]
 800af26:	70c1      	strb	r1, [r0, #3]
 800af28:	1d03      	adds	r3, r0, #4
 800af2a:	e7f1      	b.n	800af10 <__exponent+0x60>

0800af2c <_printf_float>:
 800af2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af30:	ed2d 8b02 	vpush	{d8}
 800af34:	b08d      	sub	sp, #52	; 0x34
 800af36:	460c      	mov	r4, r1
 800af38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af3c:	4616      	mov	r6, r2
 800af3e:	461f      	mov	r7, r3
 800af40:	4605      	mov	r5, r0
 800af42:	f003 f82d 	bl	800dfa0 <_localeconv_r>
 800af46:	f8d0 a000 	ldr.w	sl, [r0]
 800af4a:	4650      	mov	r0, sl
 800af4c:	f7f5 f948 	bl	80001e0 <strlen>
 800af50:	2300      	movs	r3, #0
 800af52:	930a      	str	r3, [sp, #40]	; 0x28
 800af54:	6823      	ldr	r3, [r4, #0]
 800af56:	9305      	str	r3, [sp, #20]
 800af58:	f8d8 3000 	ldr.w	r3, [r8]
 800af5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800af60:	3307      	adds	r3, #7
 800af62:	f023 0307 	bic.w	r3, r3, #7
 800af66:	f103 0208 	add.w	r2, r3, #8
 800af6a:	f8c8 2000 	str.w	r2, [r8]
 800af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800af7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af7e:	9307      	str	r3, [sp, #28]
 800af80:	f8cd 8018 	str.w	r8, [sp, #24]
 800af84:	ee08 0a10 	vmov	s16, r0
 800af88:	4b9f      	ldr	r3, [pc, #636]	; (800b208 <_printf_float+0x2dc>)
 800af8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af8e:	f04f 32ff 	mov.w	r2, #4294967295
 800af92:	f7f5 fdd3 	bl	8000b3c <__aeabi_dcmpun>
 800af96:	bb88      	cbnz	r0, 800affc <_printf_float+0xd0>
 800af98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af9c:	4b9a      	ldr	r3, [pc, #616]	; (800b208 <_printf_float+0x2dc>)
 800af9e:	f04f 32ff 	mov.w	r2, #4294967295
 800afa2:	f7f5 fdad 	bl	8000b00 <__aeabi_dcmple>
 800afa6:	bb48      	cbnz	r0, 800affc <_printf_float+0xd0>
 800afa8:	2200      	movs	r2, #0
 800afaa:	2300      	movs	r3, #0
 800afac:	4640      	mov	r0, r8
 800afae:	4649      	mov	r1, r9
 800afb0:	f7f5 fd9c 	bl	8000aec <__aeabi_dcmplt>
 800afb4:	b110      	cbz	r0, 800afbc <_printf_float+0x90>
 800afb6:	232d      	movs	r3, #45	; 0x2d
 800afb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afbc:	4b93      	ldr	r3, [pc, #588]	; (800b20c <_printf_float+0x2e0>)
 800afbe:	4894      	ldr	r0, [pc, #592]	; (800b210 <_printf_float+0x2e4>)
 800afc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800afc4:	bf94      	ite	ls
 800afc6:	4698      	movls	r8, r3
 800afc8:	4680      	movhi	r8, r0
 800afca:	2303      	movs	r3, #3
 800afcc:	6123      	str	r3, [r4, #16]
 800afce:	9b05      	ldr	r3, [sp, #20]
 800afd0:	f023 0204 	bic.w	r2, r3, #4
 800afd4:	6022      	str	r2, [r4, #0]
 800afd6:	f04f 0900 	mov.w	r9, #0
 800afda:	9700      	str	r7, [sp, #0]
 800afdc:	4633      	mov	r3, r6
 800afde:	aa0b      	add	r2, sp, #44	; 0x2c
 800afe0:	4621      	mov	r1, r4
 800afe2:	4628      	mov	r0, r5
 800afe4:	f000 f9d8 	bl	800b398 <_printf_common>
 800afe8:	3001      	adds	r0, #1
 800afea:	f040 8090 	bne.w	800b10e <_printf_float+0x1e2>
 800afee:	f04f 30ff 	mov.w	r0, #4294967295
 800aff2:	b00d      	add	sp, #52	; 0x34
 800aff4:	ecbd 8b02 	vpop	{d8}
 800aff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800affc:	4642      	mov	r2, r8
 800affe:	464b      	mov	r3, r9
 800b000:	4640      	mov	r0, r8
 800b002:	4649      	mov	r1, r9
 800b004:	f7f5 fd9a 	bl	8000b3c <__aeabi_dcmpun>
 800b008:	b140      	cbz	r0, 800b01c <_printf_float+0xf0>
 800b00a:	464b      	mov	r3, r9
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	bfbc      	itt	lt
 800b010:	232d      	movlt	r3, #45	; 0x2d
 800b012:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b016:	487f      	ldr	r0, [pc, #508]	; (800b214 <_printf_float+0x2e8>)
 800b018:	4b7f      	ldr	r3, [pc, #508]	; (800b218 <_printf_float+0x2ec>)
 800b01a:	e7d1      	b.n	800afc0 <_printf_float+0x94>
 800b01c:	6863      	ldr	r3, [r4, #4]
 800b01e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b022:	9206      	str	r2, [sp, #24]
 800b024:	1c5a      	adds	r2, r3, #1
 800b026:	d13f      	bne.n	800b0a8 <_printf_float+0x17c>
 800b028:	2306      	movs	r3, #6
 800b02a:	6063      	str	r3, [r4, #4]
 800b02c:	9b05      	ldr	r3, [sp, #20]
 800b02e:	6861      	ldr	r1, [r4, #4]
 800b030:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b034:	2300      	movs	r3, #0
 800b036:	9303      	str	r3, [sp, #12]
 800b038:	ab0a      	add	r3, sp, #40	; 0x28
 800b03a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b03e:	ab09      	add	r3, sp, #36	; 0x24
 800b040:	ec49 8b10 	vmov	d0, r8, r9
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	6022      	str	r2, [r4, #0]
 800b048:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b04c:	4628      	mov	r0, r5
 800b04e:	f7ff fecd 	bl	800adec <__cvt>
 800b052:	9b06      	ldr	r3, [sp, #24]
 800b054:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b056:	2b47      	cmp	r3, #71	; 0x47
 800b058:	4680      	mov	r8, r0
 800b05a:	d108      	bne.n	800b06e <_printf_float+0x142>
 800b05c:	1cc8      	adds	r0, r1, #3
 800b05e:	db02      	blt.n	800b066 <_printf_float+0x13a>
 800b060:	6863      	ldr	r3, [r4, #4]
 800b062:	4299      	cmp	r1, r3
 800b064:	dd41      	ble.n	800b0ea <_printf_float+0x1be>
 800b066:	f1ab 0b02 	sub.w	fp, fp, #2
 800b06a:	fa5f fb8b 	uxtb.w	fp, fp
 800b06e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b072:	d820      	bhi.n	800b0b6 <_printf_float+0x18a>
 800b074:	3901      	subs	r1, #1
 800b076:	465a      	mov	r2, fp
 800b078:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b07c:	9109      	str	r1, [sp, #36]	; 0x24
 800b07e:	f7ff ff17 	bl	800aeb0 <__exponent>
 800b082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b084:	1813      	adds	r3, r2, r0
 800b086:	2a01      	cmp	r2, #1
 800b088:	4681      	mov	r9, r0
 800b08a:	6123      	str	r3, [r4, #16]
 800b08c:	dc02      	bgt.n	800b094 <_printf_float+0x168>
 800b08e:	6822      	ldr	r2, [r4, #0]
 800b090:	07d2      	lsls	r2, r2, #31
 800b092:	d501      	bpl.n	800b098 <_printf_float+0x16c>
 800b094:	3301      	adds	r3, #1
 800b096:	6123      	str	r3, [r4, #16]
 800b098:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d09c      	beq.n	800afda <_printf_float+0xae>
 800b0a0:	232d      	movs	r3, #45	; 0x2d
 800b0a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0a6:	e798      	b.n	800afda <_printf_float+0xae>
 800b0a8:	9a06      	ldr	r2, [sp, #24]
 800b0aa:	2a47      	cmp	r2, #71	; 0x47
 800b0ac:	d1be      	bne.n	800b02c <_printf_float+0x100>
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1bc      	bne.n	800b02c <_printf_float+0x100>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e7b9      	b.n	800b02a <_printf_float+0xfe>
 800b0b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b0ba:	d118      	bne.n	800b0ee <_printf_float+0x1c2>
 800b0bc:	2900      	cmp	r1, #0
 800b0be:	6863      	ldr	r3, [r4, #4]
 800b0c0:	dd0b      	ble.n	800b0da <_printf_float+0x1ae>
 800b0c2:	6121      	str	r1, [r4, #16]
 800b0c4:	b913      	cbnz	r3, 800b0cc <_printf_float+0x1a0>
 800b0c6:	6822      	ldr	r2, [r4, #0]
 800b0c8:	07d0      	lsls	r0, r2, #31
 800b0ca:	d502      	bpl.n	800b0d2 <_printf_float+0x1a6>
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	440b      	add	r3, r1
 800b0d0:	6123      	str	r3, [r4, #16]
 800b0d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b0d4:	f04f 0900 	mov.w	r9, #0
 800b0d8:	e7de      	b.n	800b098 <_printf_float+0x16c>
 800b0da:	b913      	cbnz	r3, 800b0e2 <_printf_float+0x1b6>
 800b0dc:	6822      	ldr	r2, [r4, #0]
 800b0de:	07d2      	lsls	r2, r2, #31
 800b0e0:	d501      	bpl.n	800b0e6 <_printf_float+0x1ba>
 800b0e2:	3302      	adds	r3, #2
 800b0e4:	e7f4      	b.n	800b0d0 <_printf_float+0x1a4>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e7f2      	b.n	800b0d0 <_printf_float+0x1a4>
 800b0ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0f0:	4299      	cmp	r1, r3
 800b0f2:	db05      	blt.n	800b100 <_printf_float+0x1d4>
 800b0f4:	6823      	ldr	r3, [r4, #0]
 800b0f6:	6121      	str	r1, [r4, #16]
 800b0f8:	07d8      	lsls	r0, r3, #31
 800b0fa:	d5ea      	bpl.n	800b0d2 <_printf_float+0x1a6>
 800b0fc:	1c4b      	adds	r3, r1, #1
 800b0fe:	e7e7      	b.n	800b0d0 <_printf_float+0x1a4>
 800b100:	2900      	cmp	r1, #0
 800b102:	bfd4      	ite	le
 800b104:	f1c1 0202 	rsble	r2, r1, #2
 800b108:	2201      	movgt	r2, #1
 800b10a:	4413      	add	r3, r2
 800b10c:	e7e0      	b.n	800b0d0 <_printf_float+0x1a4>
 800b10e:	6823      	ldr	r3, [r4, #0]
 800b110:	055a      	lsls	r2, r3, #21
 800b112:	d407      	bmi.n	800b124 <_printf_float+0x1f8>
 800b114:	6923      	ldr	r3, [r4, #16]
 800b116:	4642      	mov	r2, r8
 800b118:	4631      	mov	r1, r6
 800b11a:	4628      	mov	r0, r5
 800b11c:	47b8      	blx	r7
 800b11e:	3001      	adds	r0, #1
 800b120:	d12c      	bne.n	800b17c <_printf_float+0x250>
 800b122:	e764      	b.n	800afee <_printf_float+0xc2>
 800b124:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b128:	f240 80e0 	bls.w	800b2ec <_printf_float+0x3c0>
 800b12c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b130:	2200      	movs	r2, #0
 800b132:	2300      	movs	r3, #0
 800b134:	f7f5 fcd0 	bl	8000ad8 <__aeabi_dcmpeq>
 800b138:	2800      	cmp	r0, #0
 800b13a:	d034      	beq.n	800b1a6 <_printf_float+0x27a>
 800b13c:	4a37      	ldr	r2, [pc, #220]	; (800b21c <_printf_float+0x2f0>)
 800b13e:	2301      	movs	r3, #1
 800b140:	4631      	mov	r1, r6
 800b142:	4628      	mov	r0, r5
 800b144:	47b8      	blx	r7
 800b146:	3001      	adds	r0, #1
 800b148:	f43f af51 	beq.w	800afee <_printf_float+0xc2>
 800b14c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b150:	429a      	cmp	r2, r3
 800b152:	db02      	blt.n	800b15a <_printf_float+0x22e>
 800b154:	6823      	ldr	r3, [r4, #0]
 800b156:	07d8      	lsls	r0, r3, #31
 800b158:	d510      	bpl.n	800b17c <_printf_float+0x250>
 800b15a:	ee18 3a10 	vmov	r3, s16
 800b15e:	4652      	mov	r2, sl
 800b160:	4631      	mov	r1, r6
 800b162:	4628      	mov	r0, r5
 800b164:	47b8      	blx	r7
 800b166:	3001      	adds	r0, #1
 800b168:	f43f af41 	beq.w	800afee <_printf_float+0xc2>
 800b16c:	f04f 0800 	mov.w	r8, #0
 800b170:	f104 091a 	add.w	r9, r4, #26
 800b174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b176:	3b01      	subs	r3, #1
 800b178:	4543      	cmp	r3, r8
 800b17a:	dc09      	bgt.n	800b190 <_printf_float+0x264>
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	079b      	lsls	r3, r3, #30
 800b180:	f100 8105 	bmi.w	800b38e <_printf_float+0x462>
 800b184:	68e0      	ldr	r0, [r4, #12]
 800b186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b188:	4298      	cmp	r0, r3
 800b18a:	bfb8      	it	lt
 800b18c:	4618      	movlt	r0, r3
 800b18e:	e730      	b.n	800aff2 <_printf_float+0xc6>
 800b190:	2301      	movs	r3, #1
 800b192:	464a      	mov	r2, r9
 800b194:	4631      	mov	r1, r6
 800b196:	4628      	mov	r0, r5
 800b198:	47b8      	blx	r7
 800b19a:	3001      	adds	r0, #1
 800b19c:	f43f af27 	beq.w	800afee <_printf_float+0xc2>
 800b1a0:	f108 0801 	add.w	r8, r8, #1
 800b1a4:	e7e6      	b.n	800b174 <_printf_float+0x248>
 800b1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	dc39      	bgt.n	800b220 <_printf_float+0x2f4>
 800b1ac:	4a1b      	ldr	r2, [pc, #108]	; (800b21c <_printf_float+0x2f0>)
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	4631      	mov	r1, r6
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	47b8      	blx	r7
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	f43f af19 	beq.w	800afee <_printf_float+0xc2>
 800b1bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	d102      	bne.n	800b1ca <_printf_float+0x29e>
 800b1c4:	6823      	ldr	r3, [r4, #0]
 800b1c6:	07d9      	lsls	r1, r3, #31
 800b1c8:	d5d8      	bpl.n	800b17c <_printf_float+0x250>
 800b1ca:	ee18 3a10 	vmov	r3, s16
 800b1ce:	4652      	mov	r2, sl
 800b1d0:	4631      	mov	r1, r6
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	47b8      	blx	r7
 800b1d6:	3001      	adds	r0, #1
 800b1d8:	f43f af09 	beq.w	800afee <_printf_float+0xc2>
 800b1dc:	f04f 0900 	mov.w	r9, #0
 800b1e0:	f104 0a1a 	add.w	sl, r4, #26
 800b1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e6:	425b      	negs	r3, r3
 800b1e8:	454b      	cmp	r3, r9
 800b1ea:	dc01      	bgt.n	800b1f0 <_printf_float+0x2c4>
 800b1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ee:	e792      	b.n	800b116 <_printf_float+0x1ea>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	4652      	mov	r2, sl
 800b1f4:	4631      	mov	r1, r6
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	47b8      	blx	r7
 800b1fa:	3001      	adds	r0, #1
 800b1fc:	f43f aef7 	beq.w	800afee <_printf_float+0xc2>
 800b200:	f109 0901 	add.w	r9, r9, #1
 800b204:	e7ee      	b.n	800b1e4 <_printf_float+0x2b8>
 800b206:	bf00      	nop
 800b208:	7fefffff 	.word	0x7fefffff
 800b20c:	08011dcc 	.word	0x08011dcc
 800b210:	08011dd0 	.word	0x08011dd0
 800b214:	08011dd8 	.word	0x08011dd8
 800b218:	08011dd4 	.word	0x08011dd4
 800b21c:	08011ddc 	.word	0x08011ddc
 800b220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b224:	429a      	cmp	r2, r3
 800b226:	bfa8      	it	ge
 800b228:	461a      	movge	r2, r3
 800b22a:	2a00      	cmp	r2, #0
 800b22c:	4691      	mov	r9, r2
 800b22e:	dc37      	bgt.n	800b2a0 <_printf_float+0x374>
 800b230:	f04f 0b00 	mov.w	fp, #0
 800b234:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b238:	f104 021a 	add.w	r2, r4, #26
 800b23c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b23e:	9305      	str	r3, [sp, #20]
 800b240:	eba3 0309 	sub.w	r3, r3, r9
 800b244:	455b      	cmp	r3, fp
 800b246:	dc33      	bgt.n	800b2b0 <_printf_float+0x384>
 800b248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b24c:	429a      	cmp	r2, r3
 800b24e:	db3b      	blt.n	800b2c8 <_printf_float+0x39c>
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	07da      	lsls	r2, r3, #31
 800b254:	d438      	bmi.n	800b2c8 <_printf_float+0x39c>
 800b256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b258:	9a05      	ldr	r2, [sp, #20]
 800b25a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b25c:	1a9a      	subs	r2, r3, r2
 800b25e:	eba3 0901 	sub.w	r9, r3, r1
 800b262:	4591      	cmp	r9, r2
 800b264:	bfa8      	it	ge
 800b266:	4691      	movge	r9, r2
 800b268:	f1b9 0f00 	cmp.w	r9, #0
 800b26c:	dc35      	bgt.n	800b2da <_printf_float+0x3ae>
 800b26e:	f04f 0800 	mov.w	r8, #0
 800b272:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b276:	f104 0a1a 	add.w	sl, r4, #26
 800b27a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b27e:	1a9b      	subs	r3, r3, r2
 800b280:	eba3 0309 	sub.w	r3, r3, r9
 800b284:	4543      	cmp	r3, r8
 800b286:	f77f af79 	ble.w	800b17c <_printf_float+0x250>
 800b28a:	2301      	movs	r3, #1
 800b28c:	4652      	mov	r2, sl
 800b28e:	4631      	mov	r1, r6
 800b290:	4628      	mov	r0, r5
 800b292:	47b8      	blx	r7
 800b294:	3001      	adds	r0, #1
 800b296:	f43f aeaa 	beq.w	800afee <_printf_float+0xc2>
 800b29a:	f108 0801 	add.w	r8, r8, #1
 800b29e:	e7ec      	b.n	800b27a <_printf_float+0x34e>
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	4642      	mov	r2, r8
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	47b8      	blx	r7
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	d1c0      	bne.n	800b230 <_printf_float+0x304>
 800b2ae:	e69e      	b.n	800afee <_printf_float+0xc2>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	4631      	mov	r1, r6
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	9205      	str	r2, [sp, #20]
 800b2b8:	47b8      	blx	r7
 800b2ba:	3001      	adds	r0, #1
 800b2bc:	f43f ae97 	beq.w	800afee <_printf_float+0xc2>
 800b2c0:	9a05      	ldr	r2, [sp, #20]
 800b2c2:	f10b 0b01 	add.w	fp, fp, #1
 800b2c6:	e7b9      	b.n	800b23c <_printf_float+0x310>
 800b2c8:	ee18 3a10 	vmov	r3, s16
 800b2cc:	4652      	mov	r2, sl
 800b2ce:	4631      	mov	r1, r6
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	47b8      	blx	r7
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	d1be      	bne.n	800b256 <_printf_float+0x32a>
 800b2d8:	e689      	b.n	800afee <_printf_float+0xc2>
 800b2da:	9a05      	ldr	r2, [sp, #20]
 800b2dc:	464b      	mov	r3, r9
 800b2de:	4442      	add	r2, r8
 800b2e0:	4631      	mov	r1, r6
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	47b8      	blx	r7
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	d1c1      	bne.n	800b26e <_printf_float+0x342>
 800b2ea:	e680      	b.n	800afee <_printf_float+0xc2>
 800b2ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2ee:	2a01      	cmp	r2, #1
 800b2f0:	dc01      	bgt.n	800b2f6 <_printf_float+0x3ca>
 800b2f2:	07db      	lsls	r3, r3, #31
 800b2f4:	d538      	bpl.n	800b368 <_printf_float+0x43c>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	4642      	mov	r2, r8
 800b2fa:	4631      	mov	r1, r6
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	47b8      	blx	r7
 800b300:	3001      	adds	r0, #1
 800b302:	f43f ae74 	beq.w	800afee <_printf_float+0xc2>
 800b306:	ee18 3a10 	vmov	r3, s16
 800b30a:	4652      	mov	r2, sl
 800b30c:	4631      	mov	r1, r6
 800b30e:	4628      	mov	r0, r5
 800b310:	47b8      	blx	r7
 800b312:	3001      	adds	r0, #1
 800b314:	f43f ae6b 	beq.w	800afee <_printf_float+0xc2>
 800b318:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b31c:	2200      	movs	r2, #0
 800b31e:	2300      	movs	r3, #0
 800b320:	f7f5 fbda 	bl	8000ad8 <__aeabi_dcmpeq>
 800b324:	b9d8      	cbnz	r0, 800b35e <_printf_float+0x432>
 800b326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b328:	f108 0201 	add.w	r2, r8, #1
 800b32c:	3b01      	subs	r3, #1
 800b32e:	4631      	mov	r1, r6
 800b330:	4628      	mov	r0, r5
 800b332:	47b8      	blx	r7
 800b334:	3001      	adds	r0, #1
 800b336:	d10e      	bne.n	800b356 <_printf_float+0x42a>
 800b338:	e659      	b.n	800afee <_printf_float+0xc2>
 800b33a:	2301      	movs	r3, #1
 800b33c:	4652      	mov	r2, sl
 800b33e:	4631      	mov	r1, r6
 800b340:	4628      	mov	r0, r5
 800b342:	47b8      	blx	r7
 800b344:	3001      	adds	r0, #1
 800b346:	f43f ae52 	beq.w	800afee <_printf_float+0xc2>
 800b34a:	f108 0801 	add.w	r8, r8, #1
 800b34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b350:	3b01      	subs	r3, #1
 800b352:	4543      	cmp	r3, r8
 800b354:	dcf1      	bgt.n	800b33a <_printf_float+0x40e>
 800b356:	464b      	mov	r3, r9
 800b358:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b35c:	e6dc      	b.n	800b118 <_printf_float+0x1ec>
 800b35e:	f04f 0800 	mov.w	r8, #0
 800b362:	f104 0a1a 	add.w	sl, r4, #26
 800b366:	e7f2      	b.n	800b34e <_printf_float+0x422>
 800b368:	2301      	movs	r3, #1
 800b36a:	4642      	mov	r2, r8
 800b36c:	e7df      	b.n	800b32e <_printf_float+0x402>
 800b36e:	2301      	movs	r3, #1
 800b370:	464a      	mov	r2, r9
 800b372:	4631      	mov	r1, r6
 800b374:	4628      	mov	r0, r5
 800b376:	47b8      	blx	r7
 800b378:	3001      	adds	r0, #1
 800b37a:	f43f ae38 	beq.w	800afee <_printf_float+0xc2>
 800b37e:	f108 0801 	add.w	r8, r8, #1
 800b382:	68e3      	ldr	r3, [r4, #12]
 800b384:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b386:	1a5b      	subs	r3, r3, r1
 800b388:	4543      	cmp	r3, r8
 800b38a:	dcf0      	bgt.n	800b36e <_printf_float+0x442>
 800b38c:	e6fa      	b.n	800b184 <_printf_float+0x258>
 800b38e:	f04f 0800 	mov.w	r8, #0
 800b392:	f104 0919 	add.w	r9, r4, #25
 800b396:	e7f4      	b.n	800b382 <_printf_float+0x456>

0800b398 <_printf_common>:
 800b398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b39c:	4616      	mov	r6, r2
 800b39e:	4699      	mov	r9, r3
 800b3a0:	688a      	ldr	r2, [r1, #8]
 800b3a2:	690b      	ldr	r3, [r1, #16]
 800b3a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	bfb8      	it	lt
 800b3ac:	4613      	movlt	r3, r2
 800b3ae:	6033      	str	r3, [r6, #0]
 800b3b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3b4:	4607      	mov	r7, r0
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	b10a      	cbz	r2, 800b3be <_printf_common+0x26>
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	6033      	str	r3, [r6, #0]
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	0699      	lsls	r1, r3, #26
 800b3c2:	bf42      	ittt	mi
 800b3c4:	6833      	ldrmi	r3, [r6, #0]
 800b3c6:	3302      	addmi	r3, #2
 800b3c8:	6033      	strmi	r3, [r6, #0]
 800b3ca:	6825      	ldr	r5, [r4, #0]
 800b3cc:	f015 0506 	ands.w	r5, r5, #6
 800b3d0:	d106      	bne.n	800b3e0 <_printf_common+0x48>
 800b3d2:	f104 0a19 	add.w	sl, r4, #25
 800b3d6:	68e3      	ldr	r3, [r4, #12]
 800b3d8:	6832      	ldr	r2, [r6, #0]
 800b3da:	1a9b      	subs	r3, r3, r2
 800b3dc:	42ab      	cmp	r3, r5
 800b3de:	dc26      	bgt.n	800b42e <_printf_common+0x96>
 800b3e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3e4:	1e13      	subs	r3, r2, #0
 800b3e6:	6822      	ldr	r2, [r4, #0]
 800b3e8:	bf18      	it	ne
 800b3ea:	2301      	movne	r3, #1
 800b3ec:	0692      	lsls	r2, r2, #26
 800b3ee:	d42b      	bmi.n	800b448 <_printf_common+0xb0>
 800b3f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	4638      	mov	r0, r7
 800b3f8:	47c0      	blx	r8
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	d01e      	beq.n	800b43c <_printf_common+0xa4>
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	68e5      	ldr	r5, [r4, #12]
 800b402:	6832      	ldr	r2, [r6, #0]
 800b404:	f003 0306 	and.w	r3, r3, #6
 800b408:	2b04      	cmp	r3, #4
 800b40a:	bf08      	it	eq
 800b40c:	1aad      	subeq	r5, r5, r2
 800b40e:	68a3      	ldr	r3, [r4, #8]
 800b410:	6922      	ldr	r2, [r4, #16]
 800b412:	bf0c      	ite	eq
 800b414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b418:	2500      	movne	r5, #0
 800b41a:	4293      	cmp	r3, r2
 800b41c:	bfc4      	itt	gt
 800b41e:	1a9b      	subgt	r3, r3, r2
 800b420:	18ed      	addgt	r5, r5, r3
 800b422:	2600      	movs	r6, #0
 800b424:	341a      	adds	r4, #26
 800b426:	42b5      	cmp	r5, r6
 800b428:	d11a      	bne.n	800b460 <_printf_common+0xc8>
 800b42a:	2000      	movs	r0, #0
 800b42c:	e008      	b.n	800b440 <_printf_common+0xa8>
 800b42e:	2301      	movs	r3, #1
 800b430:	4652      	mov	r2, sl
 800b432:	4649      	mov	r1, r9
 800b434:	4638      	mov	r0, r7
 800b436:	47c0      	blx	r8
 800b438:	3001      	adds	r0, #1
 800b43a:	d103      	bne.n	800b444 <_printf_common+0xac>
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295
 800b440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b444:	3501      	adds	r5, #1
 800b446:	e7c6      	b.n	800b3d6 <_printf_common+0x3e>
 800b448:	18e1      	adds	r1, r4, r3
 800b44a:	1c5a      	adds	r2, r3, #1
 800b44c:	2030      	movs	r0, #48	; 0x30
 800b44e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b452:	4422      	add	r2, r4
 800b454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b45c:	3302      	adds	r3, #2
 800b45e:	e7c7      	b.n	800b3f0 <_printf_common+0x58>
 800b460:	2301      	movs	r3, #1
 800b462:	4622      	mov	r2, r4
 800b464:	4649      	mov	r1, r9
 800b466:	4638      	mov	r0, r7
 800b468:	47c0      	blx	r8
 800b46a:	3001      	adds	r0, #1
 800b46c:	d0e6      	beq.n	800b43c <_printf_common+0xa4>
 800b46e:	3601      	adds	r6, #1
 800b470:	e7d9      	b.n	800b426 <_printf_common+0x8e>
	...

0800b474 <_printf_i>:
 800b474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b478:	7e0f      	ldrb	r7, [r1, #24]
 800b47a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b47c:	2f78      	cmp	r7, #120	; 0x78
 800b47e:	4691      	mov	r9, r2
 800b480:	4680      	mov	r8, r0
 800b482:	460c      	mov	r4, r1
 800b484:	469a      	mov	sl, r3
 800b486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b48a:	d807      	bhi.n	800b49c <_printf_i+0x28>
 800b48c:	2f62      	cmp	r7, #98	; 0x62
 800b48e:	d80a      	bhi.n	800b4a6 <_printf_i+0x32>
 800b490:	2f00      	cmp	r7, #0
 800b492:	f000 80d8 	beq.w	800b646 <_printf_i+0x1d2>
 800b496:	2f58      	cmp	r7, #88	; 0x58
 800b498:	f000 80a3 	beq.w	800b5e2 <_printf_i+0x16e>
 800b49c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4a4:	e03a      	b.n	800b51c <_printf_i+0xa8>
 800b4a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4aa:	2b15      	cmp	r3, #21
 800b4ac:	d8f6      	bhi.n	800b49c <_printf_i+0x28>
 800b4ae:	a101      	add	r1, pc, #4	; (adr r1, 800b4b4 <_printf_i+0x40>)
 800b4b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4b4:	0800b50d 	.word	0x0800b50d
 800b4b8:	0800b521 	.word	0x0800b521
 800b4bc:	0800b49d 	.word	0x0800b49d
 800b4c0:	0800b49d 	.word	0x0800b49d
 800b4c4:	0800b49d 	.word	0x0800b49d
 800b4c8:	0800b49d 	.word	0x0800b49d
 800b4cc:	0800b521 	.word	0x0800b521
 800b4d0:	0800b49d 	.word	0x0800b49d
 800b4d4:	0800b49d 	.word	0x0800b49d
 800b4d8:	0800b49d 	.word	0x0800b49d
 800b4dc:	0800b49d 	.word	0x0800b49d
 800b4e0:	0800b62d 	.word	0x0800b62d
 800b4e4:	0800b551 	.word	0x0800b551
 800b4e8:	0800b60f 	.word	0x0800b60f
 800b4ec:	0800b49d 	.word	0x0800b49d
 800b4f0:	0800b49d 	.word	0x0800b49d
 800b4f4:	0800b64f 	.word	0x0800b64f
 800b4f8:	0800b49d 	.word	0x0800b49d
 800b4fc:	0800b551 	.word	0x0800b551
 800b500:	0800b49d 	.word	0x0800b49d
 800b504:	0800b49d 	.word	0x0800b49d
 800b508:	0800b617 	.word	0x0800b617
 800b50c:	682b      	ldr	r3, [r5, #0]
 800b50e:	1d1a      	adds	r2, r3, #4
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	602a      	str	r2, [r5, #0]
 800b514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b51c:	2301      	movs	r3, #1
 800b51e:	e0a3      	b.n	800b668 <_printf_i+0x1f4>
 800b520:	6820      	ldr	r0, [r4, #0]
 800b522:	6829      	ldr	r1, [r5, #0]
 800b524:	0606      	lsls	r6, r0, #24
 800b526:	f101 0304 	add.w	r3, r1, #4
 800b52a:	d50a      	bpl.n	800b542 <_printf_i+0xce>
 800b52c:	680e      	ldr	r6, [r1, #0]
 800b52e:	602b      	str	r3, [r5, #0]
 800b530:	2e00      	cmp	r6, #0
 800b532:	da03      	bge.n	800b53c <_printf_i+0xc8>
 800b534:	232d      	movs	r3, #45	; 0x2d
 800b536:	4276      	negs	r6, r6
 800b538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b53c:	485e      	ldr	r0, [pc, #376]	; (800b6b8 <_printf_i+0x244>)
 800b53e:	230a      	movs	r3, #10
 800b540:	e019      	b.n	800b576 <_printf_i+0x102>
 800b542:	680e      	ldr	r6, [r1, #0]
 800b544:	602b      	str	r3, [r5, #0]
 800b546:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b54a:	bf18      	it	ne
 800b54c:	b236      	sxthne	r6, r6
 800b54e:	e7ef      	b.n	800b530 <_printf_i+0xbc>
 800b550:	682b      	ldr	r3, [r5, #0]
 800b552:	6820      	ldr	r0, [r4, #0]
 800b554:	1d19      	adds	r1, r3, #4
 800b556:	6029      	str	r1, [r5, #0]
 800b558:	0601      	lsls	r1, r0, #24
 800b55a:	d501      	bpl.n	800b560 <_printf_i+0xec>
 800b55c:	681e      	ldr	r6, [r3, #0]
 800b55e:	e002      	b.n	800b566 <_printf_i+0xf2>
 800b560:	0646      	lsls	r6, r0, #25
 800b562:	d5fb      	bpl.n	800b55c <_printf_i+0xe8>
 800b564:	881e      	ldrh	r6, [r3, #0]
 800b566:	4854      	ldr	r0, [pc, #336]	; (800b6b8 <_printf_i+0x244>)
 800b568:	2f6f      	cmp	r7, #111	; 0x6f
 800b56a:	bf0c      	ite	eq
 800b56c:	2308      	moveq	r3, #8
 800b56e:	230a      	movne	r3, #10
 800b570:	2100      	movs	r1, #0
 800b572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b576:	6865      	ldr	r5, [r4, #4]
 800b578:	60a5      	str	r5, [r4, #8]
 800b57a:	2d00      	cmp	r5, #0
 800b57c:	bfa2      	ittt	ge
 800b57e:	6821      	ldrge	r1, [r4, #0]
 800b580:	f021 0104 	bicge.w	r1, r1, #4
 800b584:	6021      	strge	r1, [r4, #0]
 800b586:	b90e      	cbnz	r6, 800b58c <_printf_i+0x118>
 800b588:	2d00      	cmp	r5, #0
 800b58a:	d04d      	beq.n	800b628 <_printf_i+0x1b4>
 800b58c:	4615      	mov	r5, r2
 800b58e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b592:	fb03 6711 	mls	r7, r3, r1, r6
 800b596:	5dc7      	ldrb	r7, [r0, r7]
 800b598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b59c:	4637      	mov	r7, r6
 800b59e:	42bb      	cmp	r3, r7
 800b5a0:	460e      	mov	r6, r1
 800b5a2:	d9f4      	bls.n	800b58e <_printf_i+0x11a>
 800b5a4:	2b08      	cmp	r3, #8
 800b5a6:	d10b      	bne.n	800b5c0 <_printf_i+0x14c>
 800b5a8:	6823      	ldr	r3, [r4, #0]
 800b5aa:	07de      	lsls	r6, r3, #31
 800b5ac:	d508      	bpl.n	800b5c0 <_printf_i+0x14c>
 800b5ae:	6923      	ldr	r3, [r4, #16]
 800b5b0:	6861      	ldr	r1, [r4, #4]
 800b5b2:	4299      	cmp	r1, r3
 800b5b4:	bfde      	ittt	le
 800b5b6:	2330      	movle	r3, #48	; 0x30
 800b5b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b5c0:	1b52      	subs	r2, r2, r5
 800b5c2:	6122      	str	r2, [r4, #16]
 800b5c4:	f8cd a000 	str.w	sl, [sp]
 800b5c8:	464b      	mov	r3, r9
 800b5ca:	aa03      	add	r2, sp, #12
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	4640      	mov	r0, r8
 800b5d0:	f7ff fee2 	bl	800b398 <_printf_common>
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	d14c      	bne.n	800b672 <_printf_i+0x1fe>
 800b5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5dc:	b004      	add	sp, #16
 800b5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5e2:	4835      	ldr	r0, [pc, #212]	; (800b6b8 <_printf_i+0x244>)
 800b5e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b5e8:	6829      	ldr	r1, [r5, #0]
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5f0:	6029      	str	r1, [r5, #0]
 800b5f2:	061d      	lsls	r5, r3, #24
 800b5f4:	d514      	bpl.n	800b620 <_printf_i+0x1ac>
 800b5f6:	07df      	lsls	r7, r3, #31
 800b5f8:	bf44      	itt	mi
 800b5fa:	f043 0320 	orrmi.w	r3, r3, #32
 800b5fe:	6023      	strmi	r3, [r4, #0]
 800b600:	b91e      	cbnz	r6, 800b60a <_printf_i+0x196>
 800b602:	6823      	ldr	r3, [r4, #0]
 800b604:	f023 0320 	bic.w	r3, r3, #32
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	2310      	movs	r3, #16
 800b60c:	e7b0      	b.n	800b570 <_printf_i+0xfc>
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	f043 0320 	orr.w	r3, r3, #32
 800b614:	6023      	str	r3, [r4, #0]
 800b616:	2378      	movs	r3, #120	; 0x78
 800b618:	4828      	ldr	r0, [pc, #160]	; (800b6bc <_printf_i+0x248>)
 800b61a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b61e:	e7e3      	b.n	800b5e8 <_printf_i+0x174>
 800b620:	0659      	lsls	r1, r3, #25
 800b622:	bf48      	it	mi
 800b624:	b2b6      	uxthmi	r6, r6
 800b626:	e7e6      	b.n	800b5f6 <_printf_i+0x182>
 800b628:	4615      	mov	r5, r2
 800b62a:	e7bb      	b.n	800b5a4 <_printf_i+0x130>
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	6826      	ldr	r6, [r4, #0]
 800b630:	6961      	ldr	r1, [r4, #20]
 800b632:	1d18      	adds	r0, r3, #4
 800b634:	6028      	str	r0, [r5, #0]
 800b636:	0635      	lsls	r5, r6, #24
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	d501      	bpl.n	800b640 <_printf_i+0x1cc>
 800b63c:	6019      	str	r1, [r3, #0]
 800b63e:	e002      	b.n	800b646 <_printf_i+0x1d2>
 800b640:	0670      	lsls	r0, r6, #25
 800b642:	d5fb      	bpl.n	800b63c <_printf_i+0x1c8>
 800b644:	8019      	strh	r1, [r3, #0]
 800b646:	2300      	movs	r3, #0
 800b648:	6123      	str	r3, [r4, #16]
 800b64a:	4615      	mov	r5, r2
 800b64c:	e7ba      	b.n	800b5c4 <_printf_i+0x150>
 800b64e:	682b      	ldr	r3, [r5, #0]
 800b650:	1d1a      	adds	r2, r3, #4
 800b652:	602a      	str	r2, [r5, #0]
 800b654:	681d      	ldr	r5, [r3, #0]
 800b656:	6862      	ldr	r2, [r4, #4]
 800b658:	2100      	movs	r1, #0
 800b65a:	4628      	mov	r0, r5
 800b65c:	f7f4 fdc8 	bl	80001f0 <memchr>
 800b660:	b108      	cbz	r0, 800b666 <_printf_i+0x1f2>
 800b662:	1b40      	subs	r0, r0, r5
 800b664:	6060      	str	r0, [r4, #4]
 800b666:	6863      	ldr	r3, [r4, #4]
 800b668:	6123      	str	r3, [r4, #16]
 800b66a:	2300      	movs	r3, #0
 800b66c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b670:	e7a8      	b.n	800b5c4 <_printf_i+0x150>
 800b672:	6923      	ldr	r3, [r4, #16]
 800b674:	462a      	mov	r2, r5
 800b676:	4649      	mov	r1, r9
 800b678:	4640      	mov	r0, r8
 800b67a:	47d0      	blx	sl
 800b67c:	3001      	adds	r0, #1
 800b67e:	d0ab      	beq.n	800b5d8 <_printf_i+0x164>
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	079b      	lsls	r3, r3, #30
 800b684:	d413      	bmi.n	800b6ae <_printf_i+0x23a>
 800b686:	68e0      	ldr	r0, [r4, #12]
 800b688:	9b03      	ldr	r3, [sp, #12]
 800b68a:	4298      	cmp	r0, r3
 800b68c:	bfb8      	it	lt
 800b68e:	4618      	movlt	r0, r3
 800b690:	e7a4      	b.n	800b5dc <_printf_i+0x168>
 800b692:	2301      	movs	r3, #1
 800b694:	4632      	mov	r2, r6
 800b696:	4649      	mov	r1, r9
 800b698:	4640      	mov	r0, r8
 800b69a:	47d0      	blx	sl
 800b69c:	3001      	adds	r0, #1
 800b69e:	d09b      	beq.n	800b5d8 <_printf_i+0x164>
 800b6a0:	3501      	adds	r5, #1
 800b6a2:	68e3      	ldr	r3, [r4, #12]
 800b6a4:	9903      	ldr	r1, [sp, #12]
 800b6a6:	1a5b      	subs	r3, r3, r1
 800b6a8:	42ab      	cmp	r3, r5
 800b6aa:	dcf2      	bgt.n	800b692 <_printf_i+0x21e>
 800b6ac:	e7eb      	b.n	800b686 <_printf_i+0x212>
 800b6ae:	2500      	movs	r5, #0
 800b6b0:	f104 0619 	add.w	r6, r4, #25
 800b6b4:	e7f5      	b.n	800b6a2 <_printf_i+0x22e>
 800b6b6:	bf00      	nop
 800b6b8:	08011dde 	.word	0x08011dde
 800b6bc:	08011def 	.word	0x08011def

0800b6c0 <_scanf_float>:
 800b6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c4:	b087      	sub	sp, #28
 800b6c6:	4617      	mov	r7, r2
 800b6c8:	9303      	str	r3, [sp, #12]
 800b6ca:	688b      	ldr	r3, [r1, #8]
 800b6cc:	1e5a      	subs	r2, r3, #1
 800b6ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b6d2:	bf83      	ittte	hi
 800b6d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b6d8:	195b      	addhi	r3, r3, r5
 800b6da:	9302      	strhi	r3, [sp, #8]
 800b6dc:	2300      	movls	r3, #0
 800b6de:	bf86      	itte	hi
 800b6e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b6e4:	608b      	strhi	r3, [r1, #8]
 800b6e6:	9302      	strls	r3, [sp, #8]
 800b6e8:	680b      	ldr	r3, [r1, #0]
 800b6ea:	468b      	mov	fp, r1
 800b6ec:	2500      	movs	r5, #0
 800b6ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b6f2:	f84b 3b1c 	str.w	r3, [fp], #28
 800b6f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b6fa:	4680      	mov	r8, r0
 800b6fc:	460c      	mov	r4, r1
 800b6fe:	465e      	mov	r6, fp
 800b700:	46aa      	mov	sl, r5
 800b702:	46a9      	mov	r9, r5
 800b704:	9501      	str	r5, [sp, #4]
 800b706:	68a2      	ldr	r2, [r4, #8]
 800b708:	b152      	cbz	r2, 800b720 <_scanf_float+0x60>
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	2b4e      	cmp	r3, #78	; 0x4e
 800b710:	d864      	bhi.n	800b7dc <_scanf_float+0x11c>
 800b712:	2b40      	cmp	r3, #64	; 0x40
 800b714:	d83c      	bhi.n	800b790 <_scanf_float+0xd0>
 800b716:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b71a:	b2c8      	uxtb	r0, r1
 800b71c:	280e      	cmp	r0, #14
 800b71e:	d93a      	bls.n	800b796 <_scanf_float+0xd6>
 800b720:	f1b9 0f00 	cmp.w	r9, #0
 800b724:	d003      	beq.n	800b72e <_scanf_float+0x6e>
 800b726:	6823      	ldr	r3, [r4, #0]
 800b728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b72c:	6023      	str	r3, [r4, #0]
 800b72e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b732:	f1ba 0f01 	cmp.w	sl, #1
 800b736:	f200 8113 	bhi.w	800b960 <_scanf_float+0x2a0>
 800b73a:	455e      	cmp	r6, fp
 800b73c:	f200 8105 	bhi.w	800b94a <_scanf_float+0x28a>
 800b740:	2501      	movs	r5, #1
 800b742:	4628      	mov	r0, r5
 800b744:	b007      	add	sp, #28
 800b746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b74e:	2a0d      	cmp	r2, #13
 800b750:	d8e6      	bhi.n	800b720 <_scanf_float+0x60>
 800b752:	a101      	add	r1, pc, #4	; (adr r1, 800b758 <_scanf_float+0x98>)
 800b754:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b758:	0800b897 	.word	0x0800b897
 800b75c:	0800b721 	.word	0x0800b721
 800b760:	0800b721 	.word	0x0800b721
 800b764:	0800b721 	.word	0x0800b721
 800b768:	0800b8f7 	.word	0x0800b8f7
 800b76c:	0800b8cf 	.word	0x0800b8cf
 800b770:	0800b721 	.word	0x0800b721
 800b774:	0800b721 	.word	0x0800b721
 800b778:	0800b8a5 	.word	0x0800b8a5
 800b77c:	0800b721 	.word	0x0800b721
 800b780:	0800b721 	.word	0x0800b721
 800b784:	0800b721 	.word	0x0800b721
 800b788:	0800b721 	.word	0x0800b721
 800b78c:	0800b85d 	.word	0x0800b85d
 800b790:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b794:	e7db      	b.n	800b74e <_scanf_float+0x8e>
 800b796:	290e      	cmp	r1, #14
 800b798:	d8c2      	bhi.n	800b720 <_scanf_float+0x60>
 800b79a:	a001      	add	r0, pc, #4	; (adr r0, 800b7a0 <_scanf_float+0xe0>)
 800b79c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b7a0:	0800b84f 	.word	0x0800b84f
 800b7a4:	0800b721 	.word	0x0800b721
 800b7a8:	0800b84f 	.word	0x0800b84f
 800b7ac:	0800b8e3 	.word	0x0800b8e3
 800b7b0:	0800b721 	.word	0x0800b721
 800b7b4:	0800b7fd 	.word	0x0800b7fd
 800b7b8:	0800b839 	.word	0x0800b839
 800b7bc:	0800b839 	.word	0x0800b839
 800b7c0:	0800b839 	.word	0x0800b839
 800b7c4:	0800b839 	.word	0x0800b839
 800b7c8:	0800b839 	.word	0x0800b839
 800b7cc:	0800b839 	.word	0x0800b839
 800b7d0:	0800b839 	.word	0x0800b839
 800b7d4:	0800b839 	.word	0x0800b839
 800b7d8:	0800b839 	.word	0x0800b839
 800b7dc:	2b6e      	cmp	r3, #110	; 0x6e
 800b7de:	d809      	bhi.n	800b7f4 <_scanf_float+0x134>
 800b7e0:	2b60      	cmp	r3, #96	; 0x60
 800b7e2:	d8b2      	bhi.n	800b74a <_scanf_float+0x8a>
 800b7e4:	2b54      	cmp	r3, #84	; 0x54
 800b7e6:	d077      	beq.n	800b8d8 <_scanf_float+0x218>
 800b7e8:	2b59      	cmp	r3, #89	; 0x59
 800b7ea:	d199      	bne.n	800b720 <_scanf_float+0x60>
 800b7ec:	2d07      	cmp	r5, #7
 800b7ee:	d197      	bne.n	800b720 <_scanf_float+0x60>
 800b7f0:	2508      	movs	r5, #8
 800b7f2:	e029      	b.n	800b848 <_scanf_float+0x188>
 800b7f4:	2b74      	cmp	r3, #116	; 0x74
 800b7f6:	d06f      	beq.n	800b8d8 <_scanf_float+0x218>
 800b7f8:	2b79      	cmp	r3, #121	; 0x79
 800b7fa:	e7f6      	b.n	800b7ea <_scanf_float+0x12a>
 800b7fc:	6821      	ldr	r1, [r4, #0]
 800b7fe:	05c8      	lsls	r0, r1, #23
 800b800:	d51a      	bpl.n	800b838 <_scanf_float+0x178>
 800b802:	9b02      	ldr	r3, [sp, #8]
 800b804:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b808:	6021      	str	r1, [r4, #0]
 800b80a:	f109 0901 	add.w	r9, r9, #1
 800b80e:	b11b      	cbz	r3, 800b818 <_scanf_float+0x158>
 800b810:	3b01      	subs	r3, #1
 800b812:	3201      	adds	r2, #1
 800b814:	9302      	str	r3, [sp, #8]
 800b816:	60a2      	str	r2, [r4, #8]
 800b818:	68a3      	ldr	r3, [r4, #8]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	60a3      	str	r3, [r4, #8]
 800b81e:	6923      	ldr	r3, [r4, #16]
 800b820:	3301      	adds	r3, #1
 800b822:	6123      	str	r3, [r4, #16]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	3b01      	subs	r3, #1
 800b828:	2b00      	cmp	r3, #0
 800b82a:	607b      	str	r3, [r7, #4]
 800b82c:	f340 8084 	ble.w	800b938 <_scanf_float+0x278>
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	3301      	adds	r3, #1
 800b834:	603b      	str	r3, [r7, #0]
 800b836:	e766      	b.n	800b706 <_scanf_float+0x46>
 800b838:	eb1a 0f05 	cmn.w	sl, r5
 800b83c:	f47f af70 	bne.w	800b720 <_scanf_float+0x60>
 800b840:	6822      	ldr	r2, [r4, #0]
 800b842:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b846:	6022      	str	r2, [r4, #0]
 800b848:	f806 3b01 	strb.w	r3, [r6], #1
 800b84c:	e7e4      	b.n	800b818 <_scanf_float+0x158>
 800b84e:	6822      	ldr	r2, [r4, #0]
 800b850:	0610      	lsls	r0, r2, #24
 800b852:	f57f af65 	bpl.w	800b720 <_scanf_float+0x60>
 800b856:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b85a:	e7f4      	b.n	800b846 <_scanf_float+0x186>
 800b85c:	f1ba 0f00 	cmp.w	sl, #0
 800b860:	d10e      	bne.n	800b880 <_scanf_float+0x1c0>
 800b862:	f1b9 0f00 	cmp.w	r9, #0
 800b866:	d10e      	bne.n	800b886 <_scanf_float+0x1c6>
 800b868:	6822      	ldr	r2, [r4, #0]
 800b86a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b86e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b872:	d108      	bne.n	800b886 <_scanf_float+0x1c6>
 800b874:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b878:	6022      	str	r2, [r4, #0]
 800b87a:	f04f 0a01 	mov.w	sl, #1
 800b87e:	e7e3      	b.n	800b848 <_scanf_float+0x188>
 800b880:	f1ba 0f02 	cmp.w	sl, #2
 800b884:	d055      	beq.n	800b932 <_scanf_float+0x272>
 800b886:	2d01      	cmp	r5, #1
 800b888:	d002      	beq.n	800b890 <_scanf_float+0x1d0>
 800b88a:	2d04      	cmp	r5, #4
 800b88c:	f47f af48 	bne.w	800b720 <_scanf_float+0x60>
 800b890:	3501      	adds	r5, #1
 800b892:	b2ed      	uxtb	r5, r5
 800b894:	e7d8      	b.n	800b848 <_scanf_float+0x188>
 800b896:	f1ba 0f01 	cmp.w	sl, #1
 800b89a:	f47f af41 	bne.w	800b720 <_scanf_float+0x60>
 800b89e:	f04f 0a02 	mov.w	sl, #2
 800b8a2:	e7d1      	b.n	800b848 <_scanf_float+0x188>
 800b8a4:	b97d      	cbnz	r5, 800b8c6 <_scanf_float+0x206>
 800b8a6:	f1b9 0f00 	cmp.w	r9, #0
 800b8aa:	f47f af3c 	bne.w	800b726 <_scanf_float+0x66>
 800b8ae:	6822      	ldr	r2, [r4, #0]
 800b8b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b8b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b8b8:	f47f af39 	bne.w	800b72e <_scanf_float+0x6e>
 800b8bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b8c0:	6022      	str	r2, [r4, #0]
 800b8c2:	2501      	movs	r5, #1
 800b8c4:	e7c0      	b.n	800b848 <_scanf_float+0x188>
 800b8c6:	2d03      	cmp	r5, #3
 800b8c8:	d0e2      	beq.n	800b890 <_scanf_float+0x1d0>
 800b8ca:	2d05      	cmp	r5, #5
 800b8cc:	e7de      	b.n	800b88c <_scanf_float+0x1cc>
 800b8ce:	2d02      	cmp	r5, #2
 800b8d0:	f47f af26 	bne.w	800b720 <_scanf_float+0x60>
 800b8d4:	2503      	movs	r5, #3
 800b8d6:	e7b7      	b.n	800b848 <_scanf_float+0x188>
 800b8d8:	2d06      	cmp	r5, #6
 800b8da:	f47f af21 	bne.w	800b720 <_scanf_float+0x60>
 800b8de:	2507      	movs	r5, #7
 800b8e0:	e7b2      	b.n	800b848 <_scanf_float+0x188>
 800b8e2:	6822      	ldr	r2, [r4, #0]
 800b8e4:	0591      	lsls	r1, r2, #22
 800b8e6:	f57f af1b 	bpl.w	800b720 <_scanf_float+0x60>
 800b8ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b8ee:	6022      	str	r2, [r4, #0]
 800b8f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800b8f4:	e7a8      	b.n	800b848 <_scanf_float+0x188>
 800b8f6:	6822      	ldr	r2, [r4, #0]
 800b8f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b8fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b900:	d006      	beq.n	800b910 <_scanf_float+0x250>
 800b902:	0550      	lsls	r0, r2, #21
 800b904:	f57f af0c 	bpl.w	800b720 <_scanf_float+0x60>
 800b908:	f1b9 0f00 	cmp.w	r9, #0
 800b90c:	f43f af0f 	beq.w	800b72e <_scanf_float+0x6e>
 800b910:	0591      	lsls	r1, r2, #22
 800b912:	bf58      	it	pl
 800b914:	9901      	ldrpl	r1, [sp, #4]
 800b916:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b91a:	bf58      	it	pl
 800b91c:	eba9 0101 	subpl.w	r1, r9, r1
 800b920:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b924:	bf58      	it	pl
 800b926:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b92a:	6022      	str	r2, [r4, #0]
 800b92c:	f04f 0900 	mov.w	r9, #0
 800b930:	e78a      	b.n	800b848 <_scanf_float+0x188>
 800b932:	f04f 0a03 	mov.w	sl, #3
 800b936:	e787      	b.n	800b848 <_scanf_float+0x188>
 800b938:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b93c:	4639      	mov	r1, r7
 800b93e:	4640      	mov	r0, r8
 800b940:	4798      	blx	r3
 800b942:	2800      	cmp	r0, #0
 800b944:	f43f aedf 	beq.w	800b706 <_scanf_float+0x46>
 800b948:	e6ea      	b.n	800b720 <_scanf_float+0x60>
 800b94a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b94e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b952:	463a      	mov	r2, r7
 800b954:	4640      	mov	r0, r8
 800b956:	4798      	blx	r3
 800b958:	6923      	ldr	r3, [r4, #16]
 800b95a:	3b01      	subs	r3, #1
 800b95c:	6123      	str	r3, [r4, #16]
 800b95e:	e6ec      	b.n	800b73a <_scanf_float+0x7a>
 800b960:	1e6b      	subs	r3, r5, #1
 800b962:	2b06      	cmp	r3, #6
 800b964:	d825      	bhi.n	800b9b2 <_scanf_float+0x2f2>
 800b966:	2d02      	cmp	r5, #2
 800b968:	d836      	bhi.n	800b9d8 <_scanf_float+0x318>
 800b96a:	455e      	cmp	r6, fp
 800b96c:	f67f aee8 	bls.w	800b740 <_scanf_float+0x80>
 800b970:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b974:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b978:	463a      	mov	r2, r7
 800b97a:	4640      	mov	r0, r8
 800b97c:	4798      	blx	r3
 800b97e:	6923      	ldr	r3, [r4, #16]
 800b980:	3b01      	subs	r3, #1
 800b982:	6123      	str	r3, [r4, #16]
 800b984:	e7f1      	b.n	800b96a <_scanf_float+0x2aa>
 800b986:	9802      	ldr	r0, [sp, #8]
 800b988:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b98c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b990:	9002      	str	r0, [sp, #8]
 800b992:	463a      	mov	r2, r7
 800b994:	4640      	mov	r0, r8
 800b996:	4798      	blx	r3
 800b998:	6923      	ldr	r3, [r4, #16]
 800b99a:	3b01      	subs	r3, #1
 800b99c:	6123      	str	r3, [r4, #16]
 800b99e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9a2:	fa5f fa8a 	uxtb.w	sl, sl
 800b9a6:	f1ba 0f02 	cmp.w	sl, #2
 800b9aa:	d1ec      	bne.n	800b986 <_scanf_float+0x2c6>
 800b9ac:	3d03      	subs	r5, #3
 800b9ae:	b2ed      	uxtb	r5, r5
 800b9b0:	1b76      	subs	r6, r6, r5
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	05da      	lsls	r2, r3, #23
 800b9b6:	d52f      	bpl.n	800ba18 <_scanf_float+0x358>
 800b9b8:	055b      	lsls	r3, r3, #21
 800b9ba:	d510      	bpl.n	800b9de <_scanf_float+0x31e>
 800b9bc:	455e      	cmp	r6, fp
 800b9be:	f67f aebf 	bls.w	800b740 <_scanf_float+0x80>
 800b9c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9ca:	463a      	mov	r2, r7
 800b9cc:	4640      	mov	r0, r8
 800b9ce:	4798      	blx	r3
 800b9d0:	6923      	ldr	r3, [r4, #16]
 800b9d2:	3b01      	subs	r3, #1
 800b9d4:	6123      	str	r3, [r4, #16]
 800b9d6:	e7f1      	b.n	800b9bc <_scanf_float+0x2fc>
 800b9d8:	46aa      	mov	sl, r5
 800b9da:	9602      	str	r6, [sp, #8]
 800b9dc:	e7df      	b.n	800b99e <_scanf_float+0x2de>
 800b9de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b9e2:	6923      	ldr	r3, [r4, #16]
 800b9e4:	2965      	cmp	r1, #101	; 0x65
 800b9e6:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9ea:	f106 35ff 	add.w	r5, r6, #4294967295
 800b9ee:	6123      	str	r3, [r4, #16]
 800b9f0:	d00c      	beq.n	800ba0c <_scanf_float+0x34c>
 800b9f2:	2945      	cmp	r1, #69	; 0x45
 800b9f4:	d00a      	beq.n	800ba0c <_scanf_float+0x34c>
 800b9f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9fa:	463a      	mov	r2, r7
 800b9fc:	4640      	mov	r0, r8
 800b9fe:	4798      	blx	r3
 800ba00:	6923      	ldr	r3, [r4, #16]
 800ba02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	1eb5      	subs	r5, r6, #2
 800ba0a:	6123      	str	r3, [r4, #16]
 800ba0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba10:	463a      	mov	r2, r7
 800ba12:	4640      	mov	r0, r8
 800ba14:	4798      	blx	r3
 800ba16:	462e      	mov	r6, r5
 800ba18:	6825      	ldr	r5, [r4, #0]
 800ba1a:	f015 0510 	ands.w	r5, r5, #16
 800ba1e:	d159      	bne.n	800bad4 <_scanf_float+0x414>
 800ba20:	7035      	strb	r5, [r6, #0]
 800ba22:	6823      	ldr	r3, [r4, #0]
 800ba24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ba28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba2c:	d11b      	bne.n	800ba66 <_scanf_float+0x3a6>
 800ba2e:	9b01      	ldr	r3, [sp, #4]
 800ba30:	454b      	cmp	r3, r9
 800ba32:	eba3 0209 	sub.w	r2, r3, r9
 800ba36:	d123      	bne.n	800ba80 <_scanf_float+0x3c0>
 800ba38:	2200      	movs	r2, #0
 800ba3a:	4659      	mov	r1, fp
 800ba3c:	4640      	mov	r0, r8
 800ba3e:	f000 ff55 	bl	800c8ec <_strtod_r>
 800ba42:	6822      	ldr	r2, [r4, #0]
 800ba44:	9b03      	ldr	r3, [sp, #12]
 800ba46:	f012 0f02 	tst.w	r2, #2
 800ba4a:	ec57 6b10 	vmov	r6, r7, d0
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	d021      	beq.n	800ba96 <_scanf_float+0x3d6>
 800ba52:	9903      	ldr	r1, [sp, #12]
 800ba54:	1d1a      	adds	r2, r3, #4
 800ba56:	600a      	str	r2, [r1, #0]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	e9c3 6700 	strd	r6, r7, [r3]
 800ba5e:	68e3      	ldr	r3, [r4, #12]
 800ba60:	3301      	adds	r3, #1
 800ba62:	60e3      	str	r3, [r4, #12]
 800ba64:	e66d      	b.n	800b742 <_scanf_float+0x82>
 800ba66:	9b04      	ldr	r3, [sp, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d0e5      	beq.n	800ba38 <_scanf_float+0x378>
 800ba6c:	9905      	ldr	r1, [sp, #20]
 800ba6e:	230a      	movs	r3, #10
 800ba70:	462a      	mov	r2, r5
 800ba72:	3101      	adds	r1, #1
 800ba74:	4640      	mov	r0, r8
 800ba76:	f000 ffc1 	bl	800c9fc <_strtol_r>
 800ba7a:	9b04      	ldr	r3, [sp, #16]
 800ba7c:	9e05      	ldr	r6, [sp, #20]
 800ba7e:	1ac2      	subs	r2, r0, r3
 800ba80:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ba84:	429e      	cmp	r6, r3
 800ba86:	bf28      	it	cs
 800ba88:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ba8c:	4912      	ldr	r1, [pc, #72]	; (800bad8 <_scanf_float+0x418>)
 800ba8e:	4630      	mov	r0, r6
 800ba90:	f000 f8a6 	bl	800bbe0 <siprintf>
 800ba94:	e7d0      	b.n	800ba38 <_scanf_float+0x378>
 800ba96:	9903      	ldr	r1, [sp, #12]
 800ba98:	f012 0f04 	tst.w	r2, #4
 800ba9c:	f103 0204 	add.w	r2, r3, #4
 800baa0:	600a      	str	r2, [r1, #0]
 800baa2:	d1d9      	bne.n	800ba58 <_scanf_float+0x398>
 800baa4:	f8d3 8000 	ldr.w	r8, [r3]
 800baa8:	ee10 2a10 	vmov	r2, s0
 800baac:	ee10 0a10 	vmov	r0, s0
 800bab0:	463b      	mov	r3, r7
 800bab2:	4639      	mov	r1, r7
 800bab4:	f7f5 f842 	bl	8000b3c <__aeabi_dcmpun>
 800bab8:	b128      	cbz	r0, 800bac6 <_scanf_float+0x406>
 800baba:	4808      	ldr	r0, [pc, #32]	; (800badc <_scanf_float+0x41c>)
 800babc:	f000 f88a 	bl	800bbd4 <nanf>
 800bac0:	ed88 0a00 	vstr	s0, [r8]
 800bac4:	e7cb      	b.n	800ba5e <_scanf_float+0x39e>
 800bac6:	4630      	mov	r0, r6
 800bac8:	4639      	mov	r1, r7
 800baca:	f7f5 f895 	bl	8000bf8 <__aeabi_d2f>
 800bace:	f8c8 0000 	str.w	r0, [r8]
 800bad2:	e7c4      	b.n	800ba5e <_scanf_float+0x39e>
 800bad4:	2500      	movs	r5, #0
 800bad6:	e634      	b.n	800b742 <_scanf_float+0x82>
 800bad8:	08011e00 	.word	0x08011e00
 800badc:	08012208 	.word	0x08012208

0800bae0 <cleanup_glue>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	460c      	mov	r4, r1
 800bae4:	6809      	ldr	r1, [r1, #0]
 800bae6:	4605      	mov	r5, r0
 800bae8:	b109      	cbz	r1, 800baee <cleanup_glue+0xe>
 800baea:	f7ff fff9 	bl	800bae0 <cleanup_glue>
 800baee:	4621      	mov	r1, r4
 800baf0:	4628      	mov	r0, r5
 800baf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baf6:	f002 bf67 	b.w	800e9c8 <_free_r>
	...

0800bafc <_reclaim_reent>:
 800bafc:	4b2c      	ldr	r3, [pc, #176]	; (800bbb0 <_reclaim_reent+0xb4>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4283      	cmp	r3, r0
 800bb02:	b570      	push	{r4, r5, r6, lr}
 800bb04:	4604      	mov	r4, r0
 800bb06:	d051      	beq.n	800bbac <_reclaim_reent+0xb0>
 800bb08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb0a:	b143      	cbz	r3, 800bb1e <_reclaim_reent+0x22>
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d14a      	bne.n	800bba8 <_reclaim_reent+0xac>
 800bb12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb14:	6819      	ldr	r1, [r3, #0]
 800bb16:	b111      	cbz	r1, 800bb1e <_reclaim_reent+0x22>
 800bb18:	4620      	mov	r0, r4
 800bb1a:	f002 ff55 	bl	800e9c8 <_free_r>
 800bb1e:	6961      	ldr	r1, [r4, #20]
 800bb20:	b111      	cbz	r1, 800bb28 <_reclaim_reent+0x2c>
 800bb22:	4620      	mov	r0, r4
 800bb24:	f002 ff50 	bl	800e9c8 <_free_r>
 800bb28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bb2a:	b111      	cbz	r1, 800bb32 <_reclaim_reent+0x36>
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f002 ff4b 	bl	800e9c8 <_free_r>
 800bb32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bb34:	b111      	cbz	r1, 800bb3c <_reclaim_reent+0x40>
 800bb36:	4620      	mov	r0, r4
 800bb38:	f002 ff46 	bl	800e9c8 <_free_r>
 800bb3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bb3e:	b111      	cbz	r1, 800bb46 <_reclaim_reent+0x4a>
 800bb40:	4620      	mov	r0, r4
 800bb42:	f002 ff41 	bl	800e9c8 <_free_r>
 800bb46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bb48:	b111      	cbz	r1, 800bb50 <_reclaim_reent+0x54>
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	f002 ff3c 	bl	800e9c8 <_free_r>
 800bb50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bb52:	b111      	cbz	r1, 800bb5a <_reclaim_reent+0x5e>
 800bb54:	4620      	mov	r0, r4
 800bb56:	f002 ff37 	bl	800e9c8 <_free_r>
 800bb5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bb5c:	b111      	cbz	r1, 800bb64 <_reclaim_reent+0x68>
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f002 ff32 	bl	800e9c8 <_free_r>
 800bb64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb66:	b111      	cbz	r1, 800bb6e <_reclaim_reent+0x72>
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f002 ff2d 	bl	800e9c8 <_free_r>
 800bb6e:	69a3      	ldr	r3, [r4, #24]
 800bb70:	b1e3      	cbz	r3, 800bbac <_reclaim_reent+0xb0>
 800bb72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bb74:	4620      	mov	r0, r4
 800bb76:	4798      	blx	r3
 800bb78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bb7a:	b1b9      	cbz	r1, 800bbac <_reclaim_reent+0xb0>
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb82:	f7ff bfad 	b.w	800bae0 <cleanup_glue>
 800bb86:	5949      	ldr	r1, [r1, r5]
 800bb88:	b941      	cbnz	r1, 800bb9c <_reclaim_reent+0xa0>
 800bb8a:	3504      	adds	r5, #4
 800bb8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb8e:	2d80      	cmp	r5, #128	; 0x80
 800bb90:	68d9      	ldr	r1, [r3, #12]
 800bb92:	d1f8      	bne.n	800bb86 <_reclaim_reent+0x8a>
 800bb94:	4620      	mov	r0, r4
 800bb96:	f002 ff17 	bl	800e9c8 <_free_r>
 800bb9a:	e7ba      	b.n	800bb12 <_reclaim_reent+0x16>
 800bb9c:	680e      	ldr	r6, [r1, #0]
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f002 ff12 	bl	800e9c8 <_free_r>
 800bba4:	4631      	mov	r1, r6
 800bba6:	e7ef      	b.n	800bb88 <_reclaim_reent+0x8c>
 800bba8:	2500      	movs	r5, #0
 800bbaa:	e7ef      	b.n	800bb8c <_reclaim_reent+0x90>
 800bbac:	bd70      	pop	{r4, r5, r6, pc}
 800bbae:	bf00      	nop
 800bbb0:	20000038 	.word	0x20000038

0800bbb4 <_sbrk_r>:
 800bbb4:	b538      	push	{r3, r4, r5, lr}
 800bbb6:	4d06      	ldr	r5, [pc, #24]	; (800bbd0 <_sbrk_r+0x1c>)
 800bbb8:	2300      	movs	r3, #0
 800bbba:	4604      	mov	r4, r0
 800bbbc:	4608      	mov	r0, r1
 800bbbe:	602b      	str	r3, [r5, #0]
 800bbc0:	f7f6 fb0e 	bl	80021e0 <_sbrk>
 800bbc4:	1c43      	adds	r3, r0, #1
 800bbc6:	d102      	bne.n	800bbce <_sbrk_r+0x1a>
 800bbc8:	682b      	ldr	r3, [r5, #0]
 800bbca:	b103      	cbz	r3, 800bbce <_sbrk_r+0x1a>
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	20004f44 	.word	0x20004f44

0800bbd4 <nanf>:
 800bbd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bbdc <nanf+0x8>
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	7fc00000 	.word	0x7fc00000

0800bbe0 <siprintf>:
 800bbe0:	b40e      	push	{r1, r2, r3}
 800bbe2:	b500      	push	{lr}
 800bbe4:	b09c      	sub	sp, #112	; 0x70
 800bbe6:	ab1d      	add	r3, sp, #116	; 0x74
 800bbe8:	9002      	str	r0, [sp, #8]
 800bbea:	9006      	str	r0, [sp, #24]
 800bbec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bbf0:	4809      	ldr	r0, [pc, #36]	; (800bc18 <siprintf+0x38>)
 800bbf2:	9107      	str	r1, [sp, #28]
 800bbf4:	9104      	str	r1, [sp, #16]
 800bbf6:	4909      	ldr	r1, [pc, #36]	; (800bc1c <siprintf+0x3c>)
 800bbf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbfc:	9105      	str	r1, [sp, #20]
 800bbfe:	6800      	ldr	r0, [r0, #0]
 800bc00:	9301      	str	r3, [sp, #4]
 800bc02:	a902      	add	r1, sp, #8
 800bc04:	f002 ff88 	bl	800eb18 <_svfiprintf_r>
 800bc08:	9b02      	ldr	r3, [sp, #8]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	701a      	strb	r2, [r3, #0]
 800bc0e:	b01c      	add	sp, #112	; 0x70
 800bc10:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc14:	b003      	add	sp, #12
 800bc16:	4770      	bx	lr
 800bc18:	20000038 	.word	0x20000038
 800bc1c:	ffff0208 	.word	0xffff0208

0800bc20 <__sread>:
 800bc20:	b510      	push	{r4, lr}
 800bc22:	460c      	mov	r4, r1
 800bc24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc28:	f003 f876 	bl	800ed18 <_read_r>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	bfab      	itete	ge
 800bc30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc32:	89a3      	ldrhlt	r3, [r4, #12]
 800bc34:	181b      	addge	r3, r3, r0
 800bc36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc3a:	bfac      	ite	ge
 800bc3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc3e:	81a3      	strhlt	r3, [r4, #12]
 800bc40:	bd10      	pop	{r4, pc}

0800bc42 <__swrite>:
 800bc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc46:	461f      	mov	r7, r3
 800bc48:	898b      	ldrh	r3, [r1, #12]
 800bc4a:	05db      	lsls	r3, r3, #23
 800bc4c:	4605      	mov	r5, r0
 800bc4e:	460c      	mov	r4, r1
 800bc50:	4616      	mov	r6, r2
 800bc52:	d505      	bpl.n	800bc60 <__swrite+0x1e>
 800bc54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc58:	2302      	movs	r3, #2
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f002 f9a4 	bl	800dfa8 <_lseek_r>
 800bc60:	89a3      	ldrh	r3, [r4, #12]
 800bc62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc6a:	81a3      	strh	r3, [r4, #12]
 800bc6c:	4632      	mov	r2, r6
 800bc6e:	463b      	mov	r3, r7
 800bc70:	4628      	mov	r0, r5
 800bc72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc76:	f000 bec3 	b.w	800ca00 <_write_r>

0800bc7a <__sseek>:
 800bc7a:	b510      	push	{r4, lr}
 800bc7c:	460c      	mov	r4, r1
 800bc7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc82:	f002 f991 	bl	800dfa8 <_lseek_r>
 800bc86:	1c43      	adds	r3, r0, #1
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	bf15      	itete	ne
 800bc8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc96:	81a3      	strheq	r3, [r4, #12]
 800bc98:	bf18      	it	ne
 800bc9a:	81a3      	strhne	r3, [r4, #12]
 800bc9c:	bd10      	pop	{r4, pc}

0800bc9e <__sclose>:
 800bc9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca2:	f000 bebf 	b.w	800ca24 <_close_r>

0800bca6 <sulp>:
 800bca6:	b570      	push	{r4, r5, r6, lr}
 800bca8:	4604      	mov	r4, r0
 800bcaa:	460d      	mov	r5, r1
 800bcac:	ec45 4b10 	vmov	d0, r4, r5
 800bcb0:	4616      	mov	r6, r2
 800bcb2:	f002 fd23 	bl	800e6fc <__ulp>
 800bcb6:	ec51 0b10 	vmov	r0, r1, d0
 800bcba:	b17e      	cbz	r6, 800bcdc <sulp+0x36>
 800bcbc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bcc0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	dd09      	ble.n	800bcdc <sulp+0x36>
 800bcc8:	051b      	lsls	r3, r3, #20
 800bcca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bcce:	2400      	movs	r4, #0
 800bcd0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bcd4:	4622      	mov	r2, r4
 800bcd6:	462b      	mov	r3, r5
 800bcd8:	f7f4 fc96 	bl	8000608 <__aeabi_dmul>
 800bcdc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bce0 <_strtod_l>:
 800bce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce4:	ed2d 8b02 	vpush	{d8}
 800bce8:	b09d      	sub	sp, #116	; 0x74
 800bcea:	461f      	mov	r7, r3
 800bcec:	2300      	movs	r3, #0
 800bcee:	9318      	str	r3, [sp, #96]	; 0x60
 800bcf0:	4ba2      	ldr	r3, [pc, #648]	; (800bf7c <_strtod_l+0x29c>)
 800bcf2:	9213      	str	r2, [sp, #76]	; 0x4c
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	9305      	str	r3, [sp, #20]
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	4688      	mov	r8, r1
 800bcfe:	f7f4 fa6f 	bl	80001e0 <strlen>
 800bd02:	f04f 0a00 	mov.w	sl, #0
 800bd06:	4605      	mov	r5, r0
 800bd08:	f04f 0b00 	mov.w	fp, #0
 800bd0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bd10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd12:	781a      	ldrb	r2, [r3, #0]
 800bd14:	2a2b      	cmp	r2, #43	; 0x2b
 800bd16:	d04e      	beq.n	800bdb6 <_strtod_l+0xd6>
 800bd18:	d83b      	bhi.n	800bd92 <_strtod_l+0xb2>
 800bd1a:	2a0d      	cmp	r2, #13
 800bd1c:	d834      	bhi.n	800bd88 <_strtod_l+0xa8>
 800bd1e:	2a08      	cmp	r2, #8
 800bd20:	d834      	bhi.n	800bd8c <_strtod_l+0xac>
 800bd22:	2a00      	cmp	r2, #0
 800bd24:	d03e      	beq.n	800bda4 <_strtod_l+0xc4>
 800bd26:	2300      	movs	r3, #0
 800bd28:	930a      	str	r3, [sp, #40]	; 0x28
 800bd2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bd2c:	7833      	ldrb	r3, [r6, #0]
 800bd2e:	2b30      	cmp	r3, #48	; 0x30
 800bd30:	f040 80b0 	bne.w	800be94 <_strtod_l+0x1b4>
 800bd34:	7873      	ldrb	r3, [r6, #1]
 800bd36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd3a:	2b58      	cmp	r3, #88	; 0x58
 800bd3c:	d168      	bne.n	800be10 <_strtod_l+0x130>
 800bd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd40:	9301      	str	r3, [sp, #4]
 800bd42:	ab18      	add	r3, sp, #96	; 0x60
 800bd44:	9702      	str	r7, [sp, #8]
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	4a8d      	ldr	r2, [pc, #564]	; (800bf80 <_strtod_l+0x2a0>)
 800bd4a:	ab19      	add	r3, sp, #100	; 0x64
 800bd4c:	a917      	add	r1, sp, #92	; 0x5c
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f001 fe1e 	bl	800d990 <__gethex>
 800bd54:	f010 0707 	ands.w	r7, r0, #7
 800bd58:	4605      	mov	r5, r0
 800bd5a:	d005      	beq.n	800bd68 <_strtod_l+0x88>
 800bd5c:	2f06      	cmp	r7, #6
 800bd5e:	d12c      	bne.n	800bdba <_strtod_l+0xda>
 800bd60:	3601      	adds	r6, #1
 800bd62:	2300      	movs	r3, #0
 800bd64:	9617      	str	r6, [sp, #92]	; 0x5c
 800bd66:	930a      	str	r3, [sp, #40]	; 0x28
 800bd68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f040 8590 	bne.w	800c890 <_strtod_l+0xbb0>
 800bd70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd72:	b1eb      	cbz	r3, 800bdb0 <_strtod_l+0xd0>
 800bd74:	4652      	mov	r2, sl
 800bd76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bd7a:	ec43 2b10 	vmov	d0, r2, r3
 800bd7e:	b01d      	add	sp, #116	; 0x74
 800bd80:	ecbd 8b02 	vpop	{d8}
 800bd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd88:	2a20      	cmp	r2, #32
 800bd8a:	d1cc      	bne.n	800bd26 <_strtod_l+0x46>
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd90:	e7be      	b.n	800bd10 <_strtod_l+0x30>
 800bd92:	2a2d      	cmp	r2, #45	; 0x2d
 800bd94:	d1c7      	bne.n	800bd26 <_strtod_l+0x46>
 800bd96:	2201      	movs	r2, #1
 800bd98:	920a      	str	r2, [sp, #40]	; 0x28
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800bd9e:	785b      	ldrb	r3, [r3, #1]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1c2      	bne.n	800bd2a <_strtod_l+0x4a>
 800bda4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bda6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f040 856e 	bne.w	800c88c <_strtod_l+0xbac>
 800bdb0:	4652      	mov	r2, sl
 800bdb2:	465b      	mov	r3, fp
 800bdb4:	e7e1      	b.n	800bd7a <_strtod_l+0x9a>
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	e7ee      	b.n	800bd98 <_strtod_l+0xb8>
 800bdba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bdbc:	b13a      	cbz	r2, 800bdce <_strtod_l+0xee>
 800bdbe:	2135      	movs	r1, #53	; 0x35
 800bdc0:	a81a      	add	r0, sp, #104	; 0x68
 800bdc2:	f002 fda6 	bl	800e912 <__copybits>
 800bdc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f002 f965 	bl	800e098 <_Bfree>
 800bdce:	3f01      	subs	r7, #1
 800bdd0:	2f04      	cmp	r7, #4
 800bdd2:	d806      	bhi.n	800bde2 <_strtod_l+0x102>
 800bdd4:	e8df f007 	tbb	[pc, r7]
 800bdd8:	1714030a 	.word	0x1714030a
 800bddc:	0a          	.byte	0x0a
 800bddd:	00          	.byte	0x00
 800bdde:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800bde2:	0728      	lsls	r0, r5, #28
 800bde4:	d5c0      	bpl.n	800bd68 <_strtod_l+0x88>
 800bde6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bdea:	e7bd      	b.n	800bd68 <_strtod_l+0x88>
 800bdec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800bdf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bdf2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bdf6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bdfa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bdfe:	e7f0      	b.n	800bde2 <_strtod_l+0x102>
 800be00:	f8df b180 	ldr.w	fp, [pc, #384]	; 800bf84 <_strtod_l+0x2a4>
 800be04:	e7ed      	b.n	800bde2 <_strtod_l+0x102>
 800be06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800be0a:	f04f 3aff 	mov.w	sl, #4294967295
 800be0e:	e7e8      	b.n	800bde2 <_strtod_l+0x102>
 800be10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be12:	1c5a      	adds	r2, r3, #1
 800be14:	9217      	str	r2, [sp, #92]	; 0x5c
 800be16:	785b      	ldrb	r3, [r3, #1]
 800be18:	2b30      	cmp	r3, #48	; 0x30
 800be1a:	d0f9      	beq.n	800be10 <_strtod_l+0x130>
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d0a3      	beq.n	800bd68 <_strtod_l+0x88>
 800be20:	2301      	movs	r3, #1
 800be22:	f04f 0900 	mov.w	r9, #0
 800be26:	9304      	str	r3, [sp, #16]
 800be28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be2a:	9308      	str	r3, [sp, #32]
 800be2c:	f8cd 901c 	str.w	r9, [sp, #28]
 800be30:	464f      	mov	r7, r9
 800be32:	220a      	movs	r2, #10
 800be34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800be36:	7806      	ldrb	r6, [r0, #0]
 800be38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800be3c:	b2d9      	uxtb	r1, r3
 800be3e:	2909      	cmp	r1, #9
 800be40:	d92a      	bls.n	800be98 <_strtod_l+0x1b8>
 800be42:	9905      	ldr	r1, [sp, #20]
 800be44:	462a      	mov	r2, r5
 800be46:	f002 ff83 	bl	800ed50 <strncmp>
 800be4a:	b398      	cbz	r0, 800beb4 <_strtod_l+0x1d4>
 800be4c:	2000      	movs	r0, #0
 800be4e:	4632      	mov	r2, r6
 800be50:	463d      	mov	r5, r7
 800be52:	9005      	str	r0, [sp, #20]
 800be54:	4603      	mov	r3, r0
 800be56:	2a65      	cmp	r2, #101	; 0x65
 800be58:	d001      	beq.n	800be5e <_strtod_l+0x17e>
 800be5a:	2a45      	cmp	r2, #69	; 0x45
 800be5c:	d118      	bne.n	800be90 <_strtod_l+0x1b0>
 800be5e:	b91d      	cbnz	r5, 800be68 <_strtod_l+0x188>
 800be60:	9a04      	ldr	r2, [sp, #16]
 800be62:	4302      	orrs	r2, r0
 800be64:	d09e      	beq.n	800bda4 <_strtod_l+0xc4>
 800be66:	2500      	movs	r5, #0
 800be68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800be6c:	f108 0201 	add.w	r2, r8, #1
 800be70:	9217      	str	r2, [sp, #92]	; 0x5c
 800be72:	f898 2001 	ldrb.w	r2, [r8, #1]
 800be76:	2a2b      	cmp	r2, #43	; 0x2b
 800be78:	d075      	beq.n	800bf66 <_strtod_l+0x286>
 800be7a:	2a2d      	cmp	r2, #45	; 0x2d
 800be7c:	d07b      	beq.n	800bf76 <_strtod_l+0x296>
 800be7e:	f04f 0c00 	mov.w	ip, #0
 800be82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800be86:	2909      	cmp	r1, #9
 800be88:	f240 8082 	bls.w	800bf90 <_strtod_l+0x2b0>
 800be8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800be90:	2600      	movs	r6, #0
 800be92:	e09d      	b.n	800bfd0 <_strtod_l+0x2f0>
 800be94:	2300      	movs	r3, #0
 800be96:	e7c4      	b.n	800be22 <_strtod_l+0x142>
 800be98:	2f08      	cmp	r7, #8
 800be9a:	bfd8      	it	le
 800be9c:	9907      	ldrle	r1, [sp, #28]
 800be9e:	f100 0001 	add.w	r0, r0, #1
 800bea2:	bfda      	itte	le
 800bea4:	fb02 3301 	mlale	r3, r2, r1, r3
 800bea8:	9307      	strle	r3, [sp, #28]
 800beaa:	fb02 3909 	mlagt	r9, r2, r9, r3
 800beae:	3701      	adds	r7, #1
 800beb0:	9017      	str	r0, [sp, #92]	; 0x5c
 800beb2:	e7bf      	b.n	800be34 <_strtod_l+0x154>
 800beb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800beb6:	195a      	adds	r2, r3, r5
 800beb8:	9217      	str	r2, [sp, #92]	; 0x5c
 800beba:	5d5a      	ldrb	r2, [r3, r5]
 800bebc:	2f00      	cmp	r7, #0
 800bebe:	d037      	beq.n	800bf30 <_strtod_l+0x250>
 800bec0:	9005      	str	r0, [sp, #20]
 800bec2:	463d      	mov	r5, r7
 800bec4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bec8:	2b09      	cmp	r3, #9
 800beca:	d912      	bls.n	800bef2 <_strtod_l+0x212>
 800becc:	2301      	movs	r3, #1
 800bece:	e7c2      	b.n	800be56 <_strtod_l+0x176>
 800bed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bed2:	1c5a      	adds	r2, r3, #1
 800bed4:	9217      	str	r2, [sp, #92]	; 0x5c
 800bed6:	785a      	ldrb	r2, [r3, #1]
 800bed8:	3001      	adds	r0, #1
 800beda:	2a30      	cmp	r2, #48	; 0x30
 800bedc:	d0f8      	beq.n	800bed0 <_strtod_l+0x1f0>
 800bede:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bee2:	2b08      	cmp	r3, #8
 800bee4:	f200 84d9 	bhi.w	800c89a <_strtod_l+0xbba>
 800bee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800beea:	9005      	str	r0, [sp, #20]
 800beec:	2000      	movs	r0, #0
 800beee:	9308      	str	r3, [sp, #32]
 800bef0:	4605      	mov	r5, r0
 800bef2:	3a30      	subs	r2, #48	; 0x30
 800bef4:	f100 0301 	add.w	r3, r0, #1
 800bef8:	d014      	beq.n	800bf24 <_strtod_l+0x244>
 800befa:	9905      	ldr	r1, [sp, #20]
 800befc:	4419      	add	r1, r3
 800befe:	9105      	str	r1, [sp, #20]
 800bf00:	462b      	mov	r3, r5
 800bf02:	eb00 0e05 	add.w	lr, r0, r5
 800bf06:	210a      	movs	r1, #10
 800bf08:	4573      	cmp	r3, lr
 800bf0a:	d113      	bne.n	800bf34 <_strtod_l+0x254>
 800bf0c:	182b      	adds	r3, r5, r0
 800bf0e:	2b08      	cmp	r3, #8
 800bf10:	f105 0501 	add.w	r5, r5, #1
 800bf14:	4405      	add	r5, r0
 800bf16:	dc1c      	bgt.n	800bf52 <_strtod_l+0x272>
 800bf18:	9907      	ldr	r1, [sp, #28]
 800bf1a:	230a      	movs	r3, #10
 800bf1c:	fb03 2301 	mla	r3, r3, r1, r2
 800bf20:	9307      	str	r3, [sp, #28]
 800bf22:	2300      	movs	r3, #0
 800bf24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bf26:	1c51      	adds	r1, r2, #1
 800bf28:	9117      	str	r1, [sp, #92]	; 0x5c
 800bf2a:	7852      	ldrb	r2, [r2, #1]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	e7c9      	b.n	800bec4 <_strtod_l+0x1e4>
 800bf30:	4638      	mov	r0, r7
 800bf32:	e7d2      	b.n	800beda <_strtod_l+0x1fa>
 800bf34:	2b08      	cmp	r3, #8
 800bf36:	dc04      	bgt.n	800bf42 <_strtod_l+0x262>
 800bf38:	9e07      	ldr	r6, [sp, #28]
 800bf3a:	434e      	muls	r6, r1
 800bf3c:	9607      	str	r6, [sp, #28]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	e7e2      	b.n	800bf08 <_strtod_l+0x228>
 800bf42:	f103 0c01 	add.w	ip, r3, #1
 800bf46:	f1bc 0f10 	cmp.w	ip, #16
 800bf4a:	bfd8      	it	le
 800bf4c:	fb01 f909 	mulle.w	r9, r1, r9
 800bf50:	e7f5      	b.n	800bf3e <_strtod_l+0x25e>
 800bf52:	2d10      	cmp	r5, #16
 800bf54:	bfdc      	itt	le
 800bf56:	230a      	movle	r3, #10
 800bf58:	fb03 2909 	mlale	r9, r3, r9, r2
 800bf5c:	e7e1      	b.n	800bf22 <_strtod_l+0x242>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	9305      	str	r3, [sp, #20]
 800bf62:	2301      	movs	r3, #1
 800bf64:	e77c      	b.n	800be60 <_strtod_l+0x180>
 800bf66:	f04f 0c00 	mov.w	ip, #0
 800bf6a:	f108 0202 	add.w	r2, r8, #2
 800bf6e:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf70:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bf74:	e785      	b.n	800be82 <_strtod_l+0x1a2>
 800bf76:	f04f 0c01 	mov.w	ip, #1
 800bf7a:	e7f6      	b.n	800bf6a <_strtod_l+0x28a>
 800bf7c:	08012050 	.word	0x08012050
 800bf80:	08011e08 	.word	0x08011e08
 800bf84:	7ff00000 	.word	0x7ff00000
 800bf88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bf8a:	1c51      	adds	r1, r2, #1
 800bf8c:	9117      	str	r1, [sp, #92]	; 0x5c
 800bf8e:	7852      	ldrb	r2, [r2, #1]
 800bf90:	2a30      	cmp	r2, #48	; 0x30
 800bf92:	d0f9      	beq.n	800bf88 <_strtod_l+0x2a8>
 800bf94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bf98:	2908      	cmp	r1, #8
 800bf9a:	f63f af79 	bhi.w	800be90 <_strtod_l+0x1b0>
 800bf9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bfa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bfa4:	9206      	str	r2, [sp, #24]
 800bfa6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bfa8:	1c51      	adds	r1, r2, #1
 800bfaa:	9117      	str	r1, [sp, #92]	; 0x5c
 800bfac:	7852      	ldrb	r2, [r2, #1]
 800bfae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bfb2:	2e09      	cmp	r6, #9
 800bfb4:	d937      	bls.n	800c026 <_strtod_l+0x346>
 800bfb6:	9e06      	ldr	r6, [sp, #24]
 800bfb8:	1b89      	subs	r1, r1, r6
 800bfba:	2908      	cmp	r1, #8
 800bfbc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bfc0:	dc02      	bgt.n	800bfc8 <_strtod_l+0x2e8>
 800bfc2:	4576      	cmp	r6, lr
 800bfc4:	bfa8      	it	ge
 800bfc6:	4676      	movge	r6, lr
 800bfc8:	f1bc 0f00 	cmp.w	ip, #0
 800bfcc:	d000      	beq.n	800bfd0 <_strtod_l+0x2f0>
 800bfce:	4276      	negs	r6, r6
 800bfd0:	2d00      	cmp	r5, #0
 800bfd2:	d14d      	bne.n	800c070 <_strtod_l+0x390>
 800bfd4:	9904      	ldr	r1, [sp, #16]
 800bfd6:	4301      	orrs	r1, r0
 800bfd8:	f47f aec6 	bne.w	800bd68 <_strtod_l+0x88>
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f47f aee1 	bne.w	800bda4 <_strtod_l+0xc4>
 800bfe2:	2a69      	cmp	r2, #105	; 0x69
 800bfe4:	d027      	beq.n	800c036 <_strtod_l+0x356>
 800bfe6:	dc24      	bgt.n	800c032 <_strtod_l+0x352>
 800bfe8:	2a49      	cmp	r2, #73	; 0x49
 800bfea:	d024      	beq.n	800c036 <_strtod_l+0x356>
 800bfec:	2a4e      	cmp	r2, #78	; 0x4e
 800bfee:	f47f aed9 	bne.w	800bda4 <_strtod_l+0xc4>
 800bff2:	499f      	ldr	r1, [pc, #636]	; (800c270 <_strtod_l+0x590>)
 800bff4:	a817      	add	r0, sp, #92	; 0x5c
 800bff6:	f001 ff23 	bl	800de40 <__match>
 800bffa:	2800      	cmp	r0, #0
 800bffc:	f43f aed2 	beq.w	800bda4 <_strtod_l+0xc4>
 800c000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	2b28      	cmp	r3, #40	; 0x28
 800c006:	d12d      	bne.n	800c064 <_strtod_l+0x384>
 800c008:	499a      	ldr	r1, [pc, #616]	; (800c274 <_strtod_l+0x594>)
 800c00a:	aa1a      	add	r2, sp, #104	; 0x68
 800c00c:	a817      	add	r0, sp, #92	; 0x5c
 800c00e:	f001 ff2b 	bl	800de68 <__hexnan>
 800c012:	2805      	cmp	r0, #5
 800c014:	d126      	bne.n	800c064 <_strtod_l+0x384>
 800c016:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c018:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c01c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c020:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c024:	e6a0      	b.n	800bd68 <_strtod_l+0x88>
 800c026:	210a      	movs	r1, #10
 800c028:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c02c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c030:	e7b9      	b.n	800bfa6 <_strtod_l+0x2c6>
 800c032:	2a6e      	cmp	r2, #110	; 0x6e
 800c034:	e7db      	b.n	800bfee <_strtod_l+0x30e>
 800c036:	4990      	ldr	r1, [pc, #576]	; (800c278 <_strtod_l+0x598>)
 800c038:	a817      	add	r0, sp, #92	; 0x5c
 800c03a:	f001 ff01 	bl	800de40 <__match>
 800c03e:	2800      	cmp	r0, #0
 800c040:	f43f aeb0 	beq.w	800bda4 <_strtod_l+0xc4>
 800c044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c046:	498d      	ldr	r1, [pc, #564]	; (800c27c <_strtod_l+0x59c>)
 800c048:	3b01      	subs	r3, #1
 800c04a:	a817      	add	r0, sp, #92	; 0x5c
 800c04c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c04e:	f001 fef7 	bl	800de40 <__match>
 800c052:	b910      	cbnz	r0, 800c05a <_strtod_l+0x37a>
 800c054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c056:	3301      	adds	r3, #1
 800c058:	9317      	str	r3, [sp, #92]	; 0x5c
 800c05a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c28c <_strtod_l+0x5ac>
 800c05e:	f04f 0a00 	mov.w	sl, #0
 800c062:	e681      	b.n	800bd68 <_strtod_l+0x88>
 800c064:	4886      	ldr	r0, [pc, #536]	; (800c280 <_strtod_l+0x5a0>)
 800c066:	f002 fe6b 	bl	800ed40 <nan>
 800c06a:	ec5b ab10 	vmov	sl, fp, d0
 800c06e:	e67b      	b.n	800bd68 <_strtod_l+0x88>
 800c070:	9b05      	ldr	r3, [sp, #20]
 800c072:	9807      	ldr	r0, [sp, #28]
 800c074:	1af3      	subs	r3, r6, r3
 800c076:	2f00      	cmp	r7, #0
 800c078:	bf08      	it	eq
 800c07a:	462f      	moveq	r7, r5
 800c07c:	2d10      	cmp	r5, #16
 800c07e:	9306      	str	r3, [sp, #24]
 800c080:	46a8      	mov	r8, r5
 800c082:	bfa8      	it	ge
 800c084:	f04f 0810 	movge.w	r8, #16
 800c088:	f7f4 fa44 	bl	8000514 <__aeabi_ui2d>
 800c08c:	2d09      	cmp	r5, #9
 800c08e:	4682      	mov	sl, r0
 800c090:	468b      	mov	fp, r1
 800c092:	dd13      	ble.n	800c0bc <_strtod_l+0x3dc>
 800c094:	4b7b      	ldr	r3, [pc, #492]	; (800c284 <_strtod_l+0x5a4>)
 800c096:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c09a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c09e:	f7f4 fab3 	bl	8000608 <__aeabi_dmul>
 800c0a2:	4682      	mov	sl, r0
 800c0a4:	4648      	mov	r0, r9
 800c0a6:	468b      	mov	fp, r1
 800c0a8:	f7f4 fa34 	bl	8000514 <__aeabi_ui2d>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	4650      	mov	r0, sl
 800c0b2:	4659      	mov	r1, fp
 800c0b4:	f7f4 f8f2 	bl	800029c <__adddf3>
 800c0b8:	4682      	mov	sl, r0
 800c0ba:	468b      	mov	fp, r1
 800c0bc:	2d0f      	cmp	r5, #15
 800c0be:	dc38      	bgt.n	800c132 <_strtod_l+0x452>
 800c0c0:	9b06      	ldr	r3, [sp, #24]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f43f ae50 	beq.w	800bd68 <_strtod_l+0x88>
 800c0c8:	dd24      	ble.n	800c114 <_strtod_l+0x434>
 800c0ca:	2b16      	cmp	r3, #22
 800c0cc:	dc0b      	bgt.n	800c0e6 <_strtod_l+0x406>
 800c0ce:	496d      	ldr	r1, [pc, #436]	; (800c284 <_strtod_l+0x5a4>)
 800c0d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c0d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0d8:	4652      	mov	r2, sl
 800c0da:	465b      	mov	r3, fp
 800c0dc:	f7f4 fa94 	bl	8000608 <__aeabi_dmul>
 800c0e0:	4682      	mov	sl, r0
 800c0e2:	468b      	mov	fp, r1
 800c0e4:	e640      	b.n	800bd68 <_strtod_l+0x88>
 800c0e6:	9a06      	ldr	r2, [sp, #24]
 800c0e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	db20      	blt.n	800c132 <_strtod_l+0x452>
 800c0f0:	4c64      	ldr	r4, [pc, #400]	; (800c284 <_strtod_l+0x5a4>)
 800c0f2:	f1c5 050f 	rsb	r5, r5, #15
 800c0f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c0fa:	4652      	mov	r2, sl
 800c0fc:	465b      	mov	r3, fp
 800c0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c102:	f7f4 fa81 	bl	8000608 <__aeabi_dmul>
 800c106:	9b06      	ldr	r3, [sp, #24]
 800c108:	1b5d      	subs	r5, r3, r5
 800c10a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c10e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c112:	e7e3      	b.n	800c0dc <_strtod_l+0x3fc>
 800c114:	9b06      	ldr	r3, [sp, #24]
 800c116:	3316      	adds	r3, #22
 800c118:	db0b      	blt.n	800c132 <_strtod_l+0x452>
 800c11a:	9b05      	ldr	r3, [sp, #20]
 800c11c:	1b9e      	subs	r6, r3, r6
 800c11e:	4b59      	ldr	r3, [pc, #356]	; (800c284 <_strtod_l+0x5a4>)
 800c120:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c124:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c128:	4650      	mov	r0, sl
 800c12a:	4659      	mov	r1, fp
 800c12c:	f7f4 fb96 	bl	800085c <__aeabi_ddiv>
 800c130:	e7d6      	b.n	800c0e0 <_strtod_l+0x400>
 800c132:	9b06      	ldr	r3, [sp, #24]
 800c134:	eba5 0808 	sub.w	r8, r5, r8
 800c138:	4498      	add	r8, r3
 800c13a:	f1b8 0f00 	cmp.w	r8, #0
 800c13e:	dd74      	ble.n	800c22a <_strtod_l+0x54a>
 800c140:	f018 030f 	ands.w	r3, r8, #15
 800c144:	d00a      	beq.n	800c15c <_strtod_l+0x47c>
 800c146:	494f      	ldr	r1, [pc, #316]	; (800c284 <_strtod_l+0x5a4>)
 800c148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c14c:	4652      	mov	r2, sl
 800c14e:	465b      	mov	r3, fp
 800c150:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c154:	f7f4 fa58 	bl	8000608 <__aeabi_dmul>
 800c158:	4682      	mov	sl, r0
 800c15a:	468b      	mov	fp, r1
 800c15c:	f038 080f 	bics.w	r8, r8, #15
 800c160:	d04f      	beq.n	800c202 <_strtod_l+0x522>
 800c162:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c166:	dd22      	ble.n	800c1ae <_strtod_l+0x4ce>
 800c168:	2500      	movs	r5, #0
 800c16a:	462e      	mov	r6, r5
 800c16c:	9507      	str	r5, [sp, #28]
 800c16e:	9505      	str	r5, [sp, #20]
 800c170:	2322      	movs	r3, #34	; 0x22
 800c172:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c28c <_strtod_l+0x5ac>
 800c176:	6023      	str	r3, [r4, #0]
 800c178:	f04f 0a00 	mov.w	sl, #0
 800c17c:	9b07      	ldr	r3, [sp, #28]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f43f adf2 	beq.w	800bd68 <_strtod_l+0x88>
 800c184:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c186:	4620      	mov	r0, r4
 800c188:	f001 ff86 	bl	800e098 <_Bfree>
 800c18c:	9905      	ldr	r1, [sp, #20]
 800c18e:	4620      	mov	r0, r4
 800c190:	f001 ff82 	bl	800e098 <_Bfree>
 800c194:	4631      	mov	r1, r6
 800c196:	4620      	mov	r0, r4
 800c198:	f001 ff7e 	bl	800e098 <_Bfree>
 800c19c:	9907      	ldr	r1, [sp, #28]
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f001 ff7a 	bl	800e098 <_Bfree>
 800c1a4:	4629      	mov	r1, r5
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f001 ff76 	bl	800e098 <_Bfree>
 800c1ac:	e5dc      	b.n	800bd68 <_strtod_l+0x88>
 800c1ae:	4b36      	ldr	r3, [pc, #216]	; (800c288 <_strtod_l+0x5a8>)
 800c1b0:	9304      	str	r3, [sp, #16]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c1b8:	4650      	mov	r0, sl
 800c1ba:	4659      	mov	r1, fp
 800c1bc:	4699      	mov	r9, r3
 800c1be:	f1b8 0f01 	cmp.w	r8, #1
 800c1c2:	dc21      	bgt.n	800c208 <_strtod_l+0x528>
 800c1c4:	b10b      	cbz	r3, 800c1ca <_strtod_l+0x4ea>
 800c1c6:	4682      	mov	sl, r0
 800c1c8:	468b      	mov	fp, r1
 800c1ca:	4b2f      	ldr	r3, [pc, #188]	; (800c288 <_strtod_l+0x5a8>)
 800c1cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c1d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c1d4:	4652      	mov	r2, sl
 800c1d6:	465b      	mov	r3, fp
 800c1d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c1dc:	f7f4 fa14 	bl	8000608 <__aeabi_dmul>
 800c1e0:	4b2a      	ldr	r3, [pc, #168]	; (800c28c <_strtod_l+0x5ac>)
 800c1e2:	460a      	mov	r2, r1
 800c1e4:	400b      	ands	r3, r1
 800c1e6:	492a      	ldr	r1, [pc, #168]	; (800c290 <_strtod_l+0x5b0>)
 800c1e8:	428b      	cmp	r3, r1
 800c1ea:	4682      	mov	sl, r0
 800c1ec:	d8bc      	bhi.n	800c168 <_strtod_l+0x488>
 800c1ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c1f2:	428b      	cmp	r3, r1
 800c1f4:	bf86      	itte	hi
 800c1f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c294 <_strtod_l+0x5b4>
 800c1fa:	f04f 3aff 	movhi.w	sl, #4294967295
 800c1fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c202:	2300      	movs	r3, #0
 800c204:	9304      	str	r3, [sp, #16]
 800c206:	e084      	b.n	800c312 <_strtod_l+0x632>
 800c208:	f018 0f01 	tst.w	r8, #1
 800c20c:	d005      	beq.n	800c21a <_strtod_l+0x53a>
 800c20e:	9b04      	ldr	r3, [sp, #16]
 800c210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c214:	f7f4 f9f8 	bl	8000608 <__aeabi_dmul>
 800c218:	2301      	movs	r3, #1
 800c21a:	9a04      	ldr	r2, [sp, #16]
 800c21c:	3208      	adds	r2, #8
 800c21e:	f109 0901 	add.w	r9, r9, #1
 800c222:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c226:	9204      	str	r2, [sp, #16]
 800c228:	e7c9      	b.n	800c1be <_strtod_l+0x4de>
 800c22a:	d0ea      	beq.n	800c202 <_strtod_l+0x522>
 800c22c:	f1c8 0800 	rsb	r8, r8, #0
 800c230:	f018 020f 	ands.w	r2, r8, #15
 800c234:	d00a      	beq.n	800c24c <_strtod_l+0x56c>
 800c236:	4b13      	ldr	r3, [pc, #76]	; (800c284 <_strtod_l+0x5a4>)
 800c238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c23c:	4650      	mov	r0, sl
 800c23e:	4659      	mov	r1, fp
 800c240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c244:	f7f4 fb0a 	bl	800085c <__aeabi_ddiv>
 800c248:	4682      	mov	sl, r0
 800c24a:	468b      	mov	fp, r1
 800c24c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c250:	d0d7      	beq.n	800c202 <_strtod_l+0x522>
 800c252:	f1b8 0f1f 	cmp.w	r8, #31
 800c256:	dd1f      	ble.n	800c298 <_strtod_l+0x5b8>
 800c258:	2500      	movs	r5, #0
 800c25a:	462e      	mov	r6, r5
 800c25c:	9507      	str	r5, [sp, #28]
 800c25e:	9505      	str	r5, [sp, #20]
 800c260:	2322      	movs	r3, #34	; 0x22
 800c262:	f04f 0a00 	mov.w	sl, #0
 800c266:	f04f 0b00 	mov.w	fp, #0
 800c26a:	6023      	str	r3, [r4, #0]
 800c26c:	e786      	b.n	800c17c <_strtod_l+0x49c>
 800c26e:	bf00      	nop
 800c270:	08011dd9 	.word	0x08011dd9
 800c274:	08011e1c 	.word	0x08011e1c
 800c278:	08011dd1 	.word	0x08011dd1
 800c27c:	08011f5c 	.word	0x08011f5c
 800c280:	08012208 	.word	0x08012208
 800c284:	080120e8 	.word	0x080120e8
 800c288:	080120c0 	.word	0x080120c0
 800c28c:	7ff00000 	.word	0x7ff00000
 800c290:	7ca00000 	.word	0x7ca00000
 800c294:	7fefffff 	.word	0x7fefffff
 800c298:	f018 0310 	ands.w	r3, r8, #16
 800c29c:	bf18      	it	ne
 800c29e:	236a      	movne	r3, #106	; 0x6a
 800c2a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c650 <_strtod_l+0x970>
 800c2a4:	9304      	str	r3, [sp, #16]
 800c2a6:	4650      	mov	r0, sl
 800c2a8:	4659      	mov	r1, fp
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	f018 0f01 	tst.w	r8, #1
 800c2b0:	d004      	beq.n	800c2bc <_strtod_l+0x5dc>
 800c2b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c2b6:	f7f4 f9a7 	bl	8000608 <__aeabi_dmul>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c2c0:	f109 0908 	add.w	r9, r9, #8
 800c2c4:	d1f2      	bne.n	800c2ac <_strtod_l+0x5cc>
 800c2c6:	b10b      	cbz	r3, 800c2cc <_strtod_l+0x5ec>
 800c2c8:	4682      	mov	sl, r0
 800c2ca:	468b      	mov	fp, r1
 800c2cc:	9b04      	ldr	r3, [sp, #16]
 800c2ce:	b1c3      	cbz	r3, 800c302 <_strtod_l+0x622>
 800c2d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c2d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	4659      	mov	r1, fp
 800c2dc:	dd11      	ble.n	800c302 <_strtod_l+0x622>
 800c2de:	2b1f      	cmp	r3, #31
 800c2e0:	f340 8124 	ble.w	800c52c <_strtod_l+0x84c>
 800c2e4:	2b34      	cmp	r3, #52	; 0x34
 800c2e6:	bfde      	ittt	le
 800c2e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c2ec:	f04f 33ff 	movle.w	r3, #4294967295
 800c2f0:	fa03 f202 	lslle.w	r2, r3, r2
 800c2f4:	f04f 0a00 	mov.w	sl, #0
 800c2f8:	bfcc      	ite	gt
 800c2fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c2fe:	ea02 0b01 	andle.w	fp, r2, r1
 800c302:	2200      	movs	r2, #0
 800c304:	2300      	movs	r3, #0
 800c306:	4650      	mov	r0, sl
 800c308:	4659      	mov	r1, fp
 800c30a:	f7f4 fbe5 	bl	8000ad8 <__aeabi_dcmpeq>
 800c30e:	2800      	cmp	r0, #0
 800c310:	d1a2      	bne.n	800c258 <_strtod_l+0x578>
 800c312:	9b07      	ldr	r3, [sp, #28]
 800c314:	9300      	str	r3, [sp, #0]
 800c316:	9908      	ldr	r1, [sp, #32]
 800c318:	462b      	mov	r3, r5
 800c31a:	463a      	mov	r2, r7
 800c31c:	4620      	mov	r0, r4
 800c31e:	f001 ff23 	bl	800e168 <__s2b>
 800c322:	9007      	str	r0, [sp, #28]
 800c324:	2800      	cmp	r0, #0
 800c326:	f43f af1f 	beq.w	800c168 <_strtod_l+0x488>
 800c32a:	9b05      	ldr	r3, [sp, #20]
 800c32c:	1b9e      	subs	r6, r3, r6
 800c32e:	9b06      	ldr	r3, [sp, #24]
 800c330:	2b00      	cmp	r3, #0
 800c332:	bfb4      	ite	lt
 800c334:	4633      	movlt	r3, r6
 800c336:	2300      	movge	r3, #0
 800c338:	930c      	str	r3, [sp, #48]	; 0x30
 800c33a:	9b06      	ldr	r3, [sp, #24]
 800c33c:	2500      	movs	r5, #0
 800c33e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c342:	9312      	str	r3, [sp, #72]	; 0x48
 800c344:	462e      	mov	r6, r5
 800c346:	9b07      	ldr	r3, [sp, #28]
 800c348:	4620      	mov	r0, r4
 800c34a:	6859      	ldr	r1, [r3, #4]
 800c34c:	f001 fe64 	bl	800e018 <_Balloc>
 800c350:	9005      	str	r0, [sp, #20]
 800c352:	2800      	cmp	r0, #0
 800c354:	f43f af0c 	beq.w	800c170 <_strtod_l+0x490>
 800c358:	9b07      	ldr	r3, [sp, #28]
 800c35a:	691a      	ldr	r2, [r3, #16]
 800c35c:	3202      	adds	r2, #2
 800c35e:	f103 010c 	add.w	r1, r3, #12
 800c362:	0092      	lsls	r2, r2, #2
 800c364:	300c      	adds	r0, #12
 800c366:	f7fe fc96 	bl	800ac96 <memcpy>
 800c36a:	ec4b ab10 	vmov	d0, sl, fp
 800c36e:	aa1a      	add	r2, sp, #104	; 0x68
 800c370:	a919      	add	r1, sp, #100	; 0x64
 800c372:	4620      	mov	r0, r4
 800c374:	f002 fa3e 	bl	800e7f4 <__d2b>
 800c378:	ec4b ab18 	vmov	d8, sl, fp
 800c37c:	9018      	str	r0, [sp, #96]	; 0x60
 800c37e:	2800      	cmp	r0, #0
 800c380:	f43f aef6 	beq.w	800c170 <_strtod_l+0x490>
 800c384:	2101      	movs	r1, #1
 800c386:	4620      	mov	r0, r4
 800c388:	f001 ff88 	bl	800e29c <__i2b>
 800c38c:	4606      	mov	r6, r0
 800c38e:	2800      	cmp	r0, #0
 800c390:	f43f aeee 	beq.w	800c170 <_strtod_l+0x490>
 800c394:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c396:	9904      	ldr	r1, [sp, #16]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	bfab      	itete	ge
 800c39c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c39e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c3a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c3a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c3a6:	bfac      	ite	ge
 800c3a8:	eb03 0902 	addge.w	r9, r3, r2
 800c3ac:	1ad7      	sublt	r7, r2, r3
 800c3ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c3b0:	eba3 0801 	sub.w	r8, r3, r1
 800c3b4:	4490      	add	r8, r2
 800c3b6:	4ba1      	ldr	r3, [pc, #644]	; (800c63c <_strtod_l+0x95c>)
 800c3b8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c3bc:	4598      	cmp	r8, r3
 800c3be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c3c2:	f280 80c7 	bge.w	800c554 <_strtod_l+0x874>
 800c3c6:	eba3 0308 	sub.w	r3, r3, r8
 800c3ca:	2b1f      	cmp	r3, #31
 800c3cc:	eba2 0203 	sub.w	r2, r2, r3
 800c3d0:	f04f 0101 	mov.w	r1, #1
 800c3d4:	f300 80b1 	bgt.w	800c53a <_strtod_l+0x85a>
 800c3d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c3dc:	930d      	str	r3, [sp, #52]	; 0x34
 800c3de:	2300      	movs	r3, #0
 800c3e0:	9308      	str	r3, [sp, #32]
 800c3e2:	eb09 0802 	add.w	r8, r9, r2
 800c3e6:	9b04      	ldr	r3, [sp, #16]
 800c3e8:	45c1      	cmp	r9, r8
 800c3ea:	4417      	add	r7, r2
 800c3ec:	441f      	add	r7, r3
 800c3ee:	464b      	mov	r3, r9
 800c3f0:	bfa8      	it	ge
 800c3f2:	4643      	movge	r3, r8
 800c3f4:	42bb      	cmp	r3, r7
 800c3f6:	bfa8      	it	ge
 800c3f8:	463b      	movge	r3, r7
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	bfc2      	ittt	gt
 800c3fe:	eba8 0803 	subgt.w	r8, r8, r3
 800c402:	1aff      	subgt	r7, r7, r3
 800c404:	eba9 0903 	subgt.w	r9, r9, r3
 800c408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	dd17      	ble.n	800c43e <_strtod_l+0x75e>
 800c40e:	4631      	mov	r1, r6
 800c410:	461a      	mov	r2, r3
 800c412:	4620      	mov	r0, r4
 800c414:	f002 f802 	bl	800e41c <__pow5mult>
 800c418:	4606      	mov	r6, r0
 800c41a:	2800      	cmp	r0, #0
 800c41c:	f43f aea8 	beq.w	800c170 <_strtod_l+0x490>
 800c420:	4601      	mov	r1, r0
 800c422:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c424:	4620      	mov	r0, r4
 800c426:	f001 ff4f 	bl	800e2c8 <__multiply>
 800c42a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c42c:	2800      	cmp	r0, #0
 800c42e:	f43f ae9f 	beq.w	800c170 <_strtod_l+0x490>
 800c432:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c434:	4620      	mov	r0, r4
 800c436:	f001 fe2f 	bl	800e098 <_Bfree>
 800c43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c43c:	9318      	str	r3, [sp, #96]	; 0x60
 800c43e:	f1b8 0f00 	cmp.w	r8, #0
 800c442:	f300 808c 	bgt.w	800c55e <_strtod_l+0x87e>
 800c446:	9b06      	ldr	r3, [sp, #24]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	dd08      	ble.n	800c45e <_strtod_l+0x77e>
 800c44c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c44e:	9905      	ldr	r1, [sp, #20]
 800c450:	4620      	mov	r0, r4
 800c452:	f001 ffe3 	bl	800e41c <__pow5mult>
 800c456:	9005      	str	r0, [sp, #20]
 800c458:	2800      	cmp	r0, #0
 800c45a:	f43f ae89 	beq.w	800c170 <_strtod_l+0x490>
 800c45e:	2f00      	cmp	r7, #0
 800c460:	dd08      	ble.n	800c474 <_strtod_l+0x794>
 800c462:	9905      	ldr	r1, [sp, #20]
 800c464:	463a      	mov	r2, r7
 800c466:	4620      	mov	r0, r4
 800c468:	f002 f832 	bl	800e4d0 <__lshift>
 800c46c:	9005      	str	r0, [sp, #20]
 800c46e:	2800      	cmp	r0, #0
 800c470:	f43f ae7e 	beq.w	800c170 <_strtod_l+0x490>
 800c474:	f1b9 0f00 	cmp.w	r9, #0
 800c478:	dd08      	ble.n	800c48c <_strtod_l+0x7ac>
 800c47a:	4631      	mov	r1, r6
 800c47c:	464a      	mov	r2, r9
 800c47e:	4620      	mov	r0, r4
 800c480:	f002 f826 	bl	800e4d0 <__lshift>
 800c484:	4606      	mov	r6, r0
 800c486:	2800      	cmp	r0, #0
 800c488:	f43f ae72 	beq.w	800c170 <_strtod_l+0x490>
 800c48c:	9a05      	ldr	r2, [sp, #20]
 800c48e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c490:	4620      	mov	r0, r4
 800c492:	f002 f8a9 	bl	800e5e8 <__mdiff>
 800c496:	4605      	mov	r5, r0
 800c498:	2800      	cmp	r0, #0
 800c49a:	f43f ae69 	beq.w	800c170 <_strtod_l+0x490>
 800c49e:	68c3      	ldr	r3, [r0, #12]
 800c4a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	60c3      	str	r3, [r0, #12]
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	f002 f882 	bl	800e5b0 <__mcmp>
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	da60      	bge.n	800c572 <_strtod_l+0x892>
 800c4b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4b2:	ea53 030a 	orrs.w	r3, r3, sl
 800c4b6:	f040 8082 	bne.w	800c5be <_strtod_l+0x8de>
 800c4ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d17d      	bne.n	800c5be <_strtod_l+0x8de>
 800c4c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c4c6:	0d1b      	lsrs	r3, r3, #20
 800c4c8:	051b      	lsls	r3, r3, #20
 800c4ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c4ce:	d976      	bls.n	800c5be <_strtod_l+0x8de>
 800c4d0:	696b      	ldr	r3, [r5, #20]
 800c4d2:	b913      	cbnz	r3, 800c4da <_strtod_l+0x7fa>
 800c4d4:	692b      	ldr	r3, [r5, #16]
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	dd71      	ble.n	800c5be <_strtod_l+0x8de>
 800c4da:	4629      	mov	r1, r5
 800c4dc:	2201      	movs	r2, #1
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f001 fff6 	bl	800e4d0 <__lshift>
 800c4e4:	4631      	mov	r1, r6
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	f002 f862 	bl	800e5b0 <__mcmp>
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	dd66      	ble.n	800c5be <_strtod_l+0x8de>
 800c4f0:	9904      	ldr	r1, [sp, #16]
 800c4f2:	4a53      	ldr	r2, [pc, #332]	; (800c640 <_strtod_l+0x960>)
 800c4f4:	465b      	mov	r3, fp
 800c4f6:	2900      	cmp	r1, #0
 800c4f8:	f000 8081 	beq.w	800c5fe <_strtod_l+0x91e>
 800c4fc:	ea02 010b 	and.w	r1, r2, fp
 800c500:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c504:	dc7b      	bgt.n	800c5fe <_strtod_l+0x91e>
 800c506:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c50a:	f77f aea9 	ble.w	800c260 <_strtod_l+0x580>
 800c50e:	4b4d      	ldr	r3, [pc, #308]	; (800c644 <_strtod_l+0x964>)
 800c510:	4650      	mov	r0, sl
 800c512:	4659      	mov	r1, fp
 800c514:	2200      	movs	r2, #0
 800c516:	f7f4 f877 	bl	8000608 <__aeabi_dmul>
 800c51a:	460b      	mov	r3, r1
 800c51c:	4303      	orrs	r3, r0
 800c51e:	bf08      	it	eq
 800c520:	2322      	moveq	r3, #34	; 0x22
 800c522:	4682      	mov	sl, r0
 800c524:	468b      	mov	fp, r1
 800c526:	bf08      	it	eq
 800c528:	6023      	streq	r3, [r4, #0]
 800c52a:	e62b      	b.n	800c184 <_strtod_l+0x4a4>
 800c52c:	f04f 32ff 	mov.w	r2, #4294967295
 800c530:	fa02 f303 	lsl.w	r3, r2, r3
 800c534:	ea03 0a0a 	and.w	sl, r3, sl
 800c538:	e6e3      	b.n	800c302 <_strtod_l+0x622>
 800c53a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c53e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c542:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c546:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c54a:	fa01 f308 	lsl.w	r3, r1, r8
 800c54e:	9308      	str	r3, [sp, #32]
 800c550:	910d      	str	r1, [sp, #52]	; 0x34
 800c552:	e746      	b.n	800c3e2 <_strtod_l+0x702>
 800c554:	2300      	movs	r3, #0
 800c556:	9308      	str	r3, [sp, #32]
 800c558:	2301      	movs	r3, #1
 800c55a:	930d      	str	r3, [sp, #52]	; 0x34
 800c55c:	e741      	b.n	800c3e2 <_strtod_l+0x702>
 800c55e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c560:	4642      	mov	r2, r8
 800c562:	4620      	mov	r0, r4
 800c564:	f001 ffb4 	bl	800e4d0 <__lshift>
 800c568:	9018      	str	r0, [sp, #96]	; 0x60
 800c56a:	2800      	cmp	r0, #0
 800c56c:	f47f af6b 	bne.w	800c446 <_strtod_l+0x766>
 800c570:	e5fe      	b.n	800c170 <_strtod_l+0x490>
 800c572:	465f      	mov	r7, fp
 800c574:	d16e      	bne.n	800c654 <_strtod_l+0x974>
 800c576:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c578:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c57c:	b342      	cbz	r2, 800c5d0 <_strtod_l+0x8f0>
 800c57e:	4a32      	ldr	r2, [pc, #200]	; (800c648 <_strtod_l+0x968>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d128      	bne.n	800c5d6 <_strtod_l+0x8f6>
 800c584:	9b04      	ldr	r3, [sp, #16]
 800c586:	4651      	mov	r1, sl
 800c588:	b1eb      	cbz	r3, 800c5c6 <_strtod_l+0x8e6>
 800c58a:	4b2d      	ldr	r3, [pc, #180]	; (800c640 <_strtod_l+0x960>)
 800c58c:	403b      	ands	r3, r7
 800c58e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c592:	f04f 32ff 	mov.w	r2, #4294967295
 800c596:	d819      	bhi.n	800c5cc <_strtod_l+0x8ec>
 800c598:	0d1b      	lsrs	r3, r3, #20
 800c59a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c59e:	fa02 f303 	lsl.w	r3, r2, r3
 800c5a2:	4299      	cmp	r1, r3
 800c5a4:	d117      	bne.n	800c5d6 <_strtod_l+0x8f6>
 800c5a6:	4b29      	ldr	r3, [pc, #164]	; (800c64c <_strtod_l+0x96c>)
 800c5a8:	429f      	cmp	r7, r3
 800c5aa:	d102      	bne.n	800c5b2 <_strtod_l+0x8d2>
 800c5ac:	3101      	adds	r1, #1
 800c5ae:	f43f addf 	beq.w	800c170 <_strtod_l+0x490>
 800c5b2:	4b23      	ldr	r3, [pc, #140]	; (800c640 <_strtod_l+0x960>)
 800c5b4:	403b      	ands	r3, r7
 800c5b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c5ba:	f04f 0a00 	mov.w	sl, #0
 800c5be:	9b04      	ldr	r3, [sp, #16]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d1a4      	bne.n	800c50e <_strtod_l+0x82e>
 800c5c4:	e5de      	b.n	800c184 <_strtod_l+0x4a4>
 800c5c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ca:	e7ea      	b.n	800c5a2 <_strtod_l+0x8c2>
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	e7e8      	b.n	800c5a2 <_strtod_l+0x8c2>
 800c5d0:	ea53 030a 	orrs.w	r3, r3, sl
 800c5d4:	d08c      	beq.n	800c4f0 <_strtod_l+0x810>
 800c5d6:	9b08      	ldr	r3, [sp, #32]
 800c5d8:	b1db      	cbz	r3, 800c612 <_strtod_l+0x932>
 800c5da:	423b      	tst	r3, r7
 800c5dc:	d0ef      	beq.n	800c5be <_strtod_l+0x8de>
 800c5de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5e0:	9a04      	ldr	r2, [sp, #16]
 800c5e2:	4650      	mov	r0, sl
 800c5e4:	4659      	mov	r1, fp
 800c5e6:	b1c3      	cbz	r3, 800c61a <_strtod_l+0x93a>
 800c5e8:	f7ff fb5d 	bl	800bca6 <sulp>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	ec51 0b18 	vmov	r0, r1, d8
 800c5f4:	f7f3 fe52 	bl	800029c <__adddf3>
 800c5f8:	4682      	mov	sl, r0
 800c5fa:	468b      	mov	fp, r1
 800c5fc:	e7df      	b.n	800c5be <_strtod_l+0x8de>
 800c5fe:	4013      	ands	r3, r2
 800c600:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c604:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c608:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c60c:	f04f 3aff 	mov.w	sl, #4294967295
 800c610:	e7d5      	b.n	800c5be <_strtod_l+0x8de>
 800c612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c614:	ea13 0f0a 	tst.w	r3, sl
 800c618:	e7e0      	b.n	800c5dc <_strtod_l+0x8fc>
 800c61a:	f7ff fb44 	bl	800bca6 <sulp>
 800c61e:	4602      	mov	r2, r0
 800c620:	460b      	mov	r3, r1
 800c622:	ec51 0b18 	vmov	r0, r1, d8
 800c626:	f7f3 fe37 	bl	8000298 <__aeabi_dsub>
 800c62a:	2200      	movs	r2, #0
 800c62c:	2300      	movs	r3, #0
 800c62e:	4682      	mov	sl, r0
 800c630:	468b      	mov	fp, r1
 800c632:	f7f4 fa51 	bl	8000ad8 <__aeabi_dcmpeq>
 800c636:	2800      	cmp	r0, #0
 800c638:	d0c1      	beq.n	800c5be <_strtod_l+0x8de>
 800c63a:	e611      	b.n	800c260 <_strtod_l+0x580>
 800c63c:	fffffc02 	.word	0xfffffc02
 800c640:	7ff00000 	.word	0x7ff00000
 800c644:	39500000 	.word	0x39500000
 800c648:	000fffff 	.word	0x000fffff
 800c64c:	7fefffff 	.word	0x7fefffff
 800c650:	08011e30 	.word	0x08011e30
 800c654:	4631      	mov	r1, r6
 800c656:	4628      	mov	r0, r5
 800c658:	f002 f928 	bl	800e8ac <__ratio>
 800c65c:	ec59 8b10 	vmov	r8, r9, d0
 800c660:	ee10 0a10 	vmov	r0, s0
 800c664:	2200      	movs	r2, #0
 800c666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c66a:	4649      	mov	r1, r9
 800c66c:	f7f4 fa48 	bl	8000b00 <__aeabi_dcmple>
 800c670:	2800      	cmp	r0, #0
 800c672:	d07a      	beq.n	800c76a <_strtod_l+0xa8a>
 800c674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c676:	2b00      	cmp	r3, #0
 800c678:	d04a      	beq.n	800c710 <_strtod_l+0xa30>
 800c67a:	4b95      	ldr	r3, [pc, #596]	; (800c8d0 <_strtod_l+0xbf0>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c682:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c8d0 <_strtod_l+0xbf0>
 800c686:	f04f 0800 	mov.w	r8, #0
 800c68a:	4b92      	ldr	r3, [pc, #584]	; (800c8d4 <_strtod_l+0xbf4>)
 800c68c:	403b      	ands	r3, r7
 800c68e:	930d      	str	r3, [sp, #52]	; 0x34
 800c690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c692:	4b91      	ldr	r3, [pc, #580]	; (800c8d8 <_strtod_l+0xbf8>)
 800c694:	429a      	cmp	r2, r3
 800c696:	f040 80b0 	bne.w	800c7fa <_strtod_l+0xb1a>
 800c69a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c69e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c6a2:	ec4b ab10 	vmov	d0, sl, fp
 800c6a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c6aa:	f002 f827 	bl	800e6fc <__ulp>
 800c6ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c6b2:	ec53 2b10 	vmov	r2, r3, d0
 800c6b6:	f7f3 ffa7 	bl	8000608 <__aeabi_dmul>
 800c6ba:	4652      	mov	r2, sl
 800c6bc:	465b      	mov	r3, fp
 800c6be:	f7f3 fded 	bl	800029c <__adddf3>
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	4983      	ldr	r1, [pc, #524]	; (800c8d4 <_strtod_l+0xbf4>)
 800c6c6:	4a85      	ldr	r2, [pc, #532]	; (800c8dc <_strtod_l+0xbfc>)
 800c6c8:	4019      	ands	r1, r3
 800c6ca:	4291      	cmp	r1, r2
 800c6cc:	4682      	mov	sl, r0
 800c6ce:	d960      	bls.n	800c792 <_strtod_l+0xab2>
 800c6d0:	ee18 3a90 	vmov	r3, s17
 800c6d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d104      	bne.n	800c6e6 <_strtod_l+0xa06>
 800c6dc:	ee18 3a10 	vmov	r3, s16
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	f43f ad45 	beq.w	800c170 <_strtod_l+0x490>
 800c6e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c8e8 <_strtod_l+0xc08>
 800c6ea:	f04f 3aff 	mov.w	sl, #4294967295
 800c6ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f001 fcd1 	bl	800e098 <_Bfree>
 800c6f6:	9905      	ldr	r1, [sp, #20]
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	f001 fccd 	bl	800e098 <_Bfree>
 800c6fe:	4631      	mov	r1, r6
 800c700:	4620      	mov	r0, r4
 800c702:	f001 fcc9 	bl	800e098 <_Bfree>
 800c706:	4629      	mov	r1, r5
 800c708:	4620      	mov	r0, r4
 800c70a:	f001 fcc5 	bl	800e098 <_Bfree>
 800c70e:	e61a      	b.n	800c346 <_strtod_l+0x666>
 800c710:	f1ba 0f00 	cmp.w	sl, #0
 800c714:	d11b      	bne.n	800c74e <_strtod_l+0xa6e>
 800c716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c71a:	b9f3      	cbnz	r3, 800c75a <_strtod_l+0xa7a>
 800c71c:	4b6c      	ldr	r3, [pc, #432]	; (800c8d0 <_strtod_l+0xbf0>)
 800c71e:	2200      	movs	r2, #0
 800c720:	4640      	mov	r0, r8
 800c722:	4649      	mov	r1, r9
 800c724:	f7f4 f9e2 	bl	8000aec <__aeabi_dcmplt>
 800c728:	b9d0      	cbnz	r0, 800c760 <_strtod_l+0xa80>
 800c72a:	4640      	mov	r0, r8
 800c72c:	4649      	mov	r1, r9
 800c72e:	4b6c      	ldr	r3, [pc, #432]	; (800c8e0 <_strtod_l+0xc00>)
 800c730:	2200      	movs	r2, #0
 800c732:	f7f3 ff69 	bl	8000608 <__aeabi_dmul>
 800c736:	4680      	mov	r8, r0
 800c738:	4689      	mov	r9, r1
 800c73a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c73e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c742:	9315      	str	r3, [sp, #84]	; 0x54
 800c744:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c748:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c74c:	e79d      	b.n	800c68a <_strtod_l+0x9aa>
 800c74e:	f1ba 0f01 	cmp.w	sl, #1
 800c752:	d102      	bne.n	800c75a <_strtod_l+0xa7a>
 800c754:	2f00      	cmp	r7, #0
 800c756:	f43f ad83 	beq.w	800c260 <_strtod_l+0x580>
 800c75a:	4b62      	ldr	r3, [pc, #392]	; (800c8e4 <_strtod_l+0xc04>)
 800c75c:	2200      	movs	r2, #0
 800c75e:	e78e      	b.n	800c67e <_strtod_l+0x99e>
 800c760:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c8e0 <_strtod_l+0xc00>
 800c764:	f04f 0800 	mov.w	r8, #0
 800c768:	e7e7      	b.n	800c73a <_strtod_l+0xa5a>
 800c76a:	4b5d      	ldr	r3, [pc, #372]	; (800c8e0 <_strtod_l+0xc00>)
 800c76c:	4640      	mov	r0, r8
 800c76e:	4649      	mov	r1, r9
 800c770:	2200      	movs	r2, #0
 800c772:	f7f3 ff49 	bl	8000608 <__aeabi_dmul>
 800c776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c778:	4680      	mov	r8, r0
 800c77a:	4689      	mov	r9, r1
 800c77c:	b933      	cbnz	r3, 800c78c <_strtod_l+0xaac>
 800c77e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c782:	900e      	str	r0, [sp, #56]	; 0x38
 800c784:	930f      	str	r3, [sp, #60]	; 0x3c
 800c786:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c78a:	e7dd      	b.n	800c748 <_strtod_l+0xa68>
 800c78c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c790:	e7f9      	b.n	800c786 <_strtod_l+0xaa6>
 800c792:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c796:	9b04      	ldr	r3, [sp, #16]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1a8      	bne.n	800c6ee <_strtod_l+0xa0e>
 800c79c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c7a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7a2:	0d1b      	lsrs	r3, r3, #20
 800c7a4:	051b      	lsls	r3, r3, #20
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d1a1      	bne.n	800c6ee <_strtod_l+0xa0e>
 800c7aa:	4640      	mov	r0, r8
 800c7ac:	4649      	mov	r1, r9
 800c7ae:	f7f4 fa8b 	bl	8000cc8 <__aeabi_d2lz>
 800c7b2:	f7f3 fefb 	bl	80005ac <__aeabi_l2d>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	4640      	mov	r0, r8
 800c7bc:	4649      	mov	r1, r9
 800c7be:	f7f3 fd6b 	bl	8000298 <__aeabi_dsub>
 800c7c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7c8:	ea43 030a 	orr.w	r3, r3, sl
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	4680      	mov	r8, r0
 800c7d0:	4689      	mov	r9, r1
 800c7d2:	d055      	beq.n	800c880 <_strtod_l+0xba0>
 800c7d4:	a336      	add	r3, pc, #216	; (adr r3, 800c8b0 <_strtod_l+0xbd0>)
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	f7f4 f987 	bl	8000aec <__aeabi_dcmplt>
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	f47f acd0 	bne.w	800c184 <_strtod_l+0x4a4>
 800c7e4:	a334      	add	r3, pc, #208	; (adr r3, 800c8b8 <_strtod_l+0xbd8>)
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	4640      	mov	r0, r8
 800c7ec:	4649      	mov	r1, r9
 800c7ee:	f7f4 f99b 	bl	8000b28 <__aeabi_dcmpgt>
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	f43f af7b 	beq.w	800c6ee <_strtod_l+0xa0e>
 800c7f8:	e4c4      	b.n	800c184 <_strtod_l+0x4a4>
 800c7fa:	9b04      	ldr	r3, [sp, #16]
 800c7fc:	b333      	cbz	r3, 800c84c <_strtod_l+0xb6c>
 800c7fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c800:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c804:	d822      	bhi.n	800c84c <_strtod_l+0xb6c>
 800c806:	a32e      	add	r3, pc, #184	; (adr r3, 800c8c0 <_strtod_l+0xbe0>)
 800c808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80c:	4640      	mov	r0, r8
 800c80e:	4649      	mov	r1, r9
 800c810:	f7f4 f976 	bl	8000b00 <__aeabi_dcmple>
 800c814:	b1a0      	cbz	r0, 800c840 <_strtod_l+0xb60>
 800c816:	4649      	mov	r1, r9
 800c818:	4640      	mov	r0, r8
 800c81a:	f7f4 f9cd 	bl	8000bb8 <__aeabi_d2uiz>
 800c81e:	2801      	cmp	r0, #1
 800c820:	bf38      	it	cc
 800c822:	2001      	movcc	r0, #1
 800c824:	f7f3 fe76 	bl	8000514 <__aeabi_ui2d>
 800c828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c82a:	4680      	mov	r8, r0
 800c82c:	4689      	mov	r9, r1
 800c82e:	bb23      	cbnz	r3, 800c87a <_strtod_l+0xb9a>
 800c830:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c834:	9010      	str	r0, [sp, #64]	; 0x40
 800c836:	9311      	str	r3, [sp, #68]	; 0x44
 800c838:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c83c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c842:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c844:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c848:	1a9b      	subs	r3, r3, r2
 800c84a:	9309      	str	r3, [sp, #36]	; 0x24
 800c84c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c850:	eeb0 0a48 	vmov.f32	s0, s16
 800c854:	eef0 0a68 	vmov.f32	s1, s17
 800c858:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c85c:	f001 ff4e 	bl	800e6fc <__ulp>
 800c860:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c864:	ec53 2b10 	vmov	r2, r3, d0
 800c868:	f7f3 fece 	bl	8000608 <__aeabi_dmul>
 800c86c:	ec53 2b18 	vmov	r2, r3, d8
 800c870:	f7f3 fd14 	bl	800029c <__adddf3>
 800c874:	4682      	mov	sl, r0
 800c876:	468b      	mov	fp, r1
 800c878:	e78d      	b.n	800c796 <_strtod_l+0xab6>
 800c87a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c87e:	e7db      	b.n	800c838 <_strtod_l+0xb58>
 800c880:	a311      	add	r3, pc, #68	; (adr r3, 800c8c8 <_strtod_l+0xbe8>)
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	f7f4 f931 	bl	8000aec <__aeabi_dcmplt>
 800c88a:	e7b2      	b.n	800c7f2 <_strtod_l+0xb12>
 800c88c:	2300      	movs	r3, #0
 800c88e:	930a      	str	r3, [sp, #40]	; 0x28
 800c890:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c892:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c894:	6013      	str	r3, [r2, #0]
 800c896:	f7ff ba6b 	b.w	800bd70 <_strtod_l+0x90>
 800c89a:	2a65      	cmp	r2, #101	; 0x65
 800c89c:	f43f ab5f 	beq.w	800bf5e <_strtod_l+0x27e>
 800c8a0:	2a45      	cmp	r2, #69	; 0x45
 800c8a2:	f43f ab5c 	beq.w	800bf5e <_strtod_l+0x27e>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	f7ff bb94 	b.w	800bfd4 <_strtod_l+0x2f4>
 800c8ac:	f3af 8000 	nop.w
 800c8b0:	94a03595 	.word	0x94a03595
 800c8b4:	3fdfffff 	.word	0x3fdfffff
 800c8b8:	35afe535 	.word	0x35afe535
 800c8bc:	3fe00000 	.word	0x3fe00000
 800c8c0:	ffc00000 	.word	0xffc00000
 800c8c4:	41dfffff 	.word	0x41dfffff
 800c8c8:	94a03595 	.word	0x94a03595
 800c8cc:	3fcfffff 	.word	0x3fcfffff
 800c8d0:	3ff00000 	.word	0x3ff00000
 800c8d4:	7ff00000 	.word	0x7ff00000
 800c8d8:	7fe00000 	.word	0x7fe00000
 800c8dc:	7c9fffff 	.word	0x7c9fffff
 800c8e0:	3fe00000 	.word	0x3fe00000
 800c8e4:	bff00000 	.word	0xbff00000
 800c8e8:	7fefffff 	.word	0x7fefffff

0800c8ec <_strtod_r>:
 800c8ec:	4b01      	ldr	r3, [pc, #4]	; (800c8f4 <_strtod_r+0x8>)
 800c8ee:	f7ff b9f7 	b.w	800bce0 <_strtod_l>
 800c8f2:	bf00      	nop
 800c8f4:	200000a0 	.word	0x200000a0

0800c8f8 <_strtol_l.constprop.0>:
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8fe:	d001      	beq.n	800c904 <_strtol_l.constprop.0+0xc>
 800c900:	2b24      	cmp	r3, #36	; 0x24
 800c902:	d906      	bls.n	800c912 <_strtol_l.constprop.0+0x1a>
 800c904:	f7fe f8a4 	bl	800aa50 <__errno>
 800c908:	2316      	movs	r3, #22
 800c90a:	6003      	str	r3, [r0, #0]
 800c90c:	2000      	movs	r0, #0
 800c90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c912:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c9f8 <_strtol_l.constprop.0+0x100>
 800c916:	460d      	mov	r5, r1
 800c918:	462e      	mov	r6, r5
 800c91a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c91e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c922:	f017 0708 	ands.w	r7, r7, #8
 800c926:	d1f7      	bne.n	800c918 <_strtol_l.constprop.0+0x20>
 800c928:	2c2d      	cmp	r4, #45	; 0x2d
 800c92a:	d132      	bne.n	800c992 <_strtol_l.constprop.0+0x9a>
 800c92c:	782c      	ldrb	r4, [r5, #0]
 800c92e:	2701      	movs	r7, #1
 800c930:	1cb5      	adds	r5, r6, #2
 800c932:	2b00      	cmp	r3, #0
 800c934:	d05b      	beq.n	800c9ee <_strtol_l.constprop.0+0xf6>
 800c936:	2b10      	cmp	r3, #16
 800c938:	d109      	bne.n	800c94e <_strtol_l.constprop.0+0x56>
 800c93a:	2c30      	cmp	r4, #48	; 0x30
 800c93c:	d107      	bne.n	800c94e <_strtol_l.constprop.0+0x56>
 800c93e:	782c      	ldrb	r4, [r5, #0]
 800c940:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c944:	2c58      	cmp	r4, #88	; 0x58
 800c946:	d14d      	bne.n	800c9e4 <_strtol_l.constprop.0+0xec>
 800c948:	786c      	ldrb	r4, [r5, #1]
 800c94a:	2310      	movs	r3, #16
 800c94c:	3502      	adds	r5, #2
 800c94e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c952:	f108 38ff 	add.w	r8, r8, #4294967295
 800c956:	f04f 0c00 	mov.w	ip, #0
 800c95a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c95e:	4666      	mov	r6, ip
 800c960:	fb03 8a19 	mls	sl, r3, r9, r8
 800c964:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c968:	f1be 0f09 	cmp.w	lr, #9
 800c96c:	d816      	bhi.n	800c99c <_strtol_l.constprop.0+0xa4>
 800c96e:	4674      	mov	r4, lr
 800c970:	42a3      	cmp	r3, r4
 800c972:	dd24      	ble.n	800c9be <_strtol_l.constprop.0+0xc6>
 800c974:	f1bc 0f00 	cmp.w	ip, #0
 800c978:	db1e      	blt.n	800c9b8 <_strtol_l.constprop.0+0xc0>
 800c97a:	45b1      	cmp	r9, r6
 800c97c:	d31c      	bcc.n	800c9b8 <_strtol_l.constprop.0+0xc0>
 800c97e:	d101      	bne.n	800c984 <_strtol_l.constprop.0+0x8c>
 800c980:	45a2      	cmp	sl, r4
 800c982:	db19      	blt.n	800c9b8 <_strtol_l.constprop.0+0xc0>
 800c984:	fb06 4603 	mla	r6, r6, r3, r4
 800c988:	f04f 0c01 	mov.w	ip, #1
 800c98c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c990:	e7e8      	b.n	800c964 <_strtol_l.constprop.0+0x6c>
 800c992:	2c2b      	cmp	r4, #43	; 0x2b
 800c994:	bf04      	itt	eq
 800c996:	782c      	ldrbeq	r4, [r5, #0]
 800c998:	1cb5      	addeq	r5, r6, #2
 800c99a:	e7ca      	b.n	800c932 <_strtol_l.constprop.0+0x3a>
 800c99c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c9a0:	f1be 0f19 	cmp.w	lr, #25
 800c9a4:	d801      	bhi.n	800c9aa <_strtol_l.constprop.0+0xb2>
 800c9a6:	3c37      	subs	r4, #55	; 0x37
 800c9a8:	e7e2      	b.n	800c970 <_strtol_l.constprop.0+0x78>
 800c9aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c9ae:	f1be 0f19 	cmp.w	lr, #25
 800c9b2:	d804      	bhi.n	800c9be <_strtol_l.constprop.0+0xc6>
 800c9b4:	3c57      	subs	r4, #87	; 0x57
 800c9b6:	e7db      	b.n	800c970 <_strtol_l.constprop.0+0x78>
 800c9b8:	f04f 3cff 	mov.w	ip, #4294967295
 800c9bc:	e7e6      	b.n	800c98c <_strtol_l.constprop.0+0x94>
 800c9be:	f1bc 0f00 	cmp.w	ip, #0
 800c9c2:	da05      	bge.n	800c9d0 <_strtol_l.constprop.0+0xd8>
 800c9c4:	2322      	movs	r3, #34	; 0x22
 800c9c6:	6003      	str	r3, [r0, #0]
 800c9c8:	4646      	mov	r6, r8
 800c9ca:	b942      	cbnz	r2, 800c9de <_strtol_l.constprop.0+0xe6>
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	e79e      	b.n	800c90e <_strtol_l.constprop.0+0x16>
 800c9d0:	b107      	cbz	r7, 800c9d4 <_strtol_l.constprop.0+0xdc>
 800c9d2:	4276      	negs	r6, r6
 800c9d4:	2a00      	cmp	r2, #0
 800c9d6:	d0f9      	beq.n	800c9cc <_strtol_l.constprop.0+0xd4>
 800c9d8:	f1bc 0f00 	cmp.w	ip, #0
 800c9dc:	d000      	beq.n	800c9e0 <_strtol_l.constprop.0+0xe8>
 800c9de:	1e69      	subs	r1, r5, #1
 800c9e0:	6011      	str	r1, [r2, #0]
 800c9e2:	e7f3      	b.n	800c9cc <_strtol_l.constprop.0+0xd4>
 800c9e4:	2430      	movs	r4, #48	; 0x30
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d1b1      	bne.n	800c94e <_strtol_l.constprop.0+0x56>
 800c9ea:	2308      	movs	r3, #8
 800c9ec:	e7af      	b.n	800c94e <_strtol_l.constprop.0+0x56>
 800c9ee:	2c30      	cmp	r4, #48	; 0x30
 800c9f0:	d0a5      	beq.n	800c93e <_strtol_l.constprop.0+0x46>
 800c9f2:	230a      	movs	r3, #10
 800c9f4:	e7ab      	b.n	800c94e <_strtol_l.constprop.0+0x56>
 800c9f6:	bf00      	nop
 800c9f8:	08011e59 	.word	0x08011e59

0800c9fc <_strtol_r>:
 800c9fc:	f7ff bf7c 	b.w	800c8f8 <_strtol_l.constprop.0>

0800ca00 <_write_r>:
 800ca00:	b538      	push	{r3, r4, r5, lr}
 800ca02:	4d07      	ldr	r5, [pc, #28]	; (800ca20 <_write_r+0x20>)
 800ca04:	4604      	mov	r4, r0
 800ca06:	4608      	mov	r0, r1
 800ca08:	4611      	mov	r1, r2
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	602a      	str	r2, [r5, #0]
 800ca0e:	461a      	mov	r2, r3
 800ca10:	f7f5 fb95 	bl	800213e <_write>
 800ca14:	1c43      	adds	r3, r0, #1
 800ca16:	d102      	bne.n	800ca1e <_write_r+0x1e>
 800ca18:	682b      	ldr	r3, [r5, #0]
 800ca1a:	b103      	cbz	r3, 800ca1e <_write_r+0x1e>
 800ca1c:	6023      	str	r3, [r4, #0]
 800ca1e:	bd38      	pop	{r3, r4, r5, pc}
 800ca20:	20004f44 	.word	0x20004f44

0800ca24 <_close_r>:
 800ca24:	b538      	push	{r3, r4, r5, lr}
 800ca26:	4d06      	ldr	r5, [pc, #24]	; (800ca40 <_close_r+0x1c>)
 800ca28:	2300      	movs	r3, #0
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	4608      	mov	r0, r1
 800ca2e:	602b      	str	r3, [r5, #0]
 800ca30:	f7f5 fba1 	bl	8002176 <_close>
 800ca34:	1c43      	adds	r3, r0, #1
 800ca36:	d102      	bne.n	800ca3e <_close_r+0x1a>
 800ca38:	682b      	ldr	r3, [r5, #0]
 800ca3a:	b103      	cbz	r3, 800ca3e <_close_r+0x1a>
 800ca3c:	6023      	str	r3, [r4, #0]
 800ca3e:	bd38      	pop	{r3, r4, r5, pc}
 800ca40:	20004f44 	.word	0x20004f44

0800ca44 <quorem>:
 800ca44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca48:	6903      	ldr	r3, [r0, #16]
 800ca4a:	690c      	ldr	r4, [r1, #16]
 800ca4c:	42a3      	cmp	r3, r4
 800ca4e:	4607      	mov	r7, r0
 800ca50:	f2c0 8081 	blt.w	800cb56 <quorem+0x112>
 800ca54:	3c01      	subs	r4, #1
 800ca56:	f101 0814 	add.w	r8, r1, #20
 800ca5a:	f100 0514 	add.w	r5, r0, #20
 800ca5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca62:	9301      	str	r3, [sp, #4]
 800ca64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ca74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca78:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca7c:	d331      	bcc.n	800cae2 <quorem+0x9e>
 800ca7e:	f04f 0e00 	mov.w	lr, #0
 800ca82:	4640      	mov	r0, r8
 800ca84:	46ac      	mov	ip, r5
 800ca86:	46f2      	mov	sl, lr
 800ca88:	f850 2b04 	ldr.w	r2, [r0], #4
 800ca8c:	b293      	uxth	r3, r2
 800ca8e:	fb06 e303 	mla	r3, r6, r3, lr
 800ca92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	ebaa 0303 	sub.w	r3, sl, r3
 800ca9c:	f8dc a000 	ldr.w	sl, [ip]
 800caa0:	0c12      	lsrs	r2, r2, #16
 800caa2:	fa13 f38a 	uxtah	r3, r3, sl
 800caa6:	fb06 e202 	mla	r2, r6, r2, lr
 800caaa:	9300      	str	r3, [sp, #0]
 800caac:	9b00      	ldr	r3, [sp, #0]
 800caae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cab2:	b292      	uxth	r2, r2
 800cab4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cabc:	f8bd 3000 	ldrh.w	r3, [sp]
 800cac0:	4581      	cmp	r9, r0
 800cac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cac6:	f84c 3b04 	str.w	r3, [ip], #4
 800caca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cace:	d2db      	bcs.n	800ca88 <quorem+0x44>
 800cad0:	f855 300b 	ldr.w	r3, [r5, fp]
 800cad4:	b92b      	cbnz	r3, 800cae2 <quorem+0x9e>
 800cad6:	9b01      	ldr	r3, [sp, #4]
 800cad8:	3b04      	subs	r3, #4
 800cada:	429d      	cmp	r5, r3
 800cadc:	461a      	mov	r2, r3
 800cade:	d32e      	bcc.n	800cb3e <quorem+0xfa>
 800cae0:	613c      	str	r4, [r7, #16]
 800cae2:	4638      	mov	r0, r7
 800cae4:	f001 fd64 	bl	800e5b0 <__mcmp>
 800cae8:	2800      	cmp	r0, #0
 800caea:	db24      	blt.n	800cb36 <quorem+0xf2>
 800caec:	3601      	adds	r6, #1
 800caee:	4628      	mov	r0, r5
 800caf0:	f04f 0c00 	mov.w	ip, #0
 800caf4:	f858 2b04 	ldr.w	r2, [r8], #4
 800caf8:	f8d0 e000 	ldr.w	lr, [r0]
 800cafc:	b293      	uxth	r3, r2
 800cafe:	ebac 0303 	sub.w	r3, ip, r3
 800cb02:	0c12      	lsrs	r2, r2, #16
 800cb04:	fa13 f38e 	uxtah	r3, r3, lr
 800cb08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cb0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb16:	45c1      	cmp	r9, r8
 800cb18:	f840 3b04 	str.w	r3, [r0], #4
 800cb1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cb20:	d2e8      	bcs.n	800caf4 <quorem+0xb0>
 800cb22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb2a:	b922      	cbnz	r2, 800cb36 <quorem+0xf2>
 800cb2c:	3b04      	subs	r3, #4
 800cb2e:	429d      	cmp	r5, r3
 800cb30:	461a      	mov	r2, r3
 800cb32:	d30a      	bcc.n	800cb4a <quorem+0x106>
 800cb34:	613c      	str	r4, [r7, #16]
 800cb36:	4630      	mov	r0, r6
 800cb38:	b003      	add	sp, #12
 800cb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb3e:	6812      	ldr	r2, [r2, #0]
 800cb40:	3b04      	subs	r3, #4
 800cb42:	2a00      	cmp	r2, #0
 800cb44:	d1cc      	bne.n	800cae0 <quorem+0x9c>
 800cb46:	3c01      	subs	r4, #1
 800cb48:	e7c7      	b.n	800cada <quorem+0x96>
 800cb4a:	6812      	ldr	r2, [r2, #0]
 800cb4c:	3b04      	subs	r3, #4
 800cb4e:	2a00      	cmp	r2, #0
 800cb50:	d1f0      	bne.n	800cb34 <quorem+0xf0>
 800cb52:	3c01      	subs	r4, #1
 800cb54:	e7eb      	b.n	800cb2e <quorem+0xea>
 800cb56:	2000      	movs	r0, #0
 800cb58:	e7ee      	b.n	800cb38 <quorem+0xf4>
 800cb5a:	0000      	movs	r0, r0
 800cb5c:	0000      	movs	r0, r0
	...

0800cb60 <_dtoa_r>:
 800cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	ed2d 8b04 	vpush	{d8-d9}
 800cb68:	ec57 6b10 	vmov	r6, r7, d0
 800cb6c:	b093      	sub	sp, #76	; 0x4c
 800cb6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cb70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cb74:	9106      	str	r1, [sp, #24]
 800cb76:	ee10 aa10 	vmov	sl, s0
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	9209      	str	r2, [sp, #36]	; 0x24
 800cb7e:	930c      	str	r3, [sp, #48]	; 0x30
 800cb80:	46bb      	mov	fp, r7
 800cb82:	b975      	cbnz	r5, 800cba2 <_dtoa_r+0x42>
 800cb84:	2010      	movs	r0, #16
 800cb86:	f001 fa21 	bl	800dfcc <malloc>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	6260      	str	r0, [r4, #36]	; 0x24
 800cb8e:	b920      	cbnz	r0, 800cb9a <_dtoa_r+0x3a>
 800cb90:	4ba7      	ldr	r3, [pc, #668]	; (800ce30 <_dtoa_r+0x2d0>)
 800cb92:	21ea      	movs	r1, #234	; 0xea
 800cb94:	48a7      	ldr	r0, [pc, #668]	; (800ce34 <_dtoa_r+0x2d4>)
 800cb96:	f002 f8fd 	bl	800ed94 <__assert_func>
 800cb9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb9e:	6005      	str	r5, [r0, #0]
 800cba0:	60c5      	str	r5, [r0, #12]
 800cba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cba4:	6819      	ldr	r1, [r3, #0]
 800cba6:	b151      	cbz	r1, 800cbbe <_dtoa_r+0x5e>
 800cba8:	685a      	ldr	r2, [r3, #4]
 800cbaa:	604a      	str	r2, [r1, #4]
 800cbac:	2301      	movs	r3, #1
 800cbae:	4093      	lsls	r3, r2
 800cbb0:	608b      	str	r3, [r1, #8]
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f001 fa70 	bl	800e098 <_Bfree>
 800cbb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbba:	2200      	movs	r2, #0
 800cbbc:	601a      	str	r2, [r3, #0]
 800cbbe:	1e3b      	subs	r3, r7, #0
 800cbc0:	bfaa      	itet	ge
 800cbc2:	2300      	movge	r3, #0
 800cbc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cbc8:	f8c8 3000 	strge.w	r3, [r8]
 800cbcc:	4b9a      	ldr	r3, [pc, #616]	; (800ce38 <_dtoa_r+0x2d8>)
 800cbce:	bfbc      	itt	lt
 800cbd0:	2201      	movlt	r2, #1
 800cbd2:	f8c8 2000 	strlt.w	r2, [r8]
 800cbd6:	ea33 030b 	bics.w	r3, r3, fp
 800cbda:	d11b      	bne.n	800cc14 <_dtoa_r+0xb4>
 800cbdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbde:	f242 730f 	movw	r3, #9999	; 0x270f
 800cbe2:	6013      	str	r3, [r2, #0]
 800cbe4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cbe8:	4333      	orrs	r3, r6
 800cbea:	f000 8592 	beq.w	800d712 <_dtoa_r+0xbb2>
 800cbee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbf0:	b963      	cbnz	r3, 800cc0c <_dtoa_r+0xac>
 800cbf2:	4b92      	ldr	r3, [pc, #584]	; (800ce3c <_dtoa_r+0x2dc>)
 800cbf4:	e022      	b.n	800cc3c <_dtoa_r+0xdc>
 800cbf6:	4b92      	ldr	r3, [pc, #584]	; (800ce40 <_dtoa_r+0x2e0>)
 800cbf8:	9301      	str	r3, [sp, #4]
 800cbfa:	3308      	adds	r3, #8
 800cbfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cbfe:	6013      	str	r3, [r2, #0]
 800cc00:	9801      	ldr	r0, [sp, #4]
 800cc02:	b013      	add	sp, #76	; 0x4c
 800cc04:	ecbd 8b04 	vpop	{d8-d9}
 800cc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc0c:	4b8b      	ldr	r3, [pc, #556]	; (800ce3c <_dtoa_r+0x2dc>)
 800cc0e:	9301      	str	r3, [sp, #4]
 800cc10:	3303      	adds	r3, #3
 800cc12:	e7f3      	b.n	800cbfc <_dtoa_r+0x9c>
 800cc14:	2200      	movs	r2, #0
 800cc16:	2300      	movs	r3, #0
 800cc18:	4650      	mov	r0, sl
 800cc1a:	4659      	mov	r1, fp
 800cc1c:	f7f3 ff5c 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc20:	ec4b ab19 	vmov	d9, sl, fp
 800cc24:	4680      	mov	r8, r0
 800cc26:	b158      	cbz	r0, 800cc40 <_dtoa_r+0xe0>
 800cc28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	6013      	str	r3, [r2, #0]
 800cc2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f000 856b 	beq.w	800d70c <_dtoa_r+0xbac>
 800cc36:	4883      	ldr	r0, [pc, #524]	; (800ce44 <_dtoa_r+0x2e4>)
 800cc38:	6018      	str	r0, [r3, #0]
 800cc3a:	1e43      	subs	r3, r0, #1
 800cc3c:	9301      	str	r3, [sp, #4]
 800cc3e:	e7df      	b.n	800cc00 <_dtoa_r+0xa0>
 800cc40:	ec4b ab10 	vmov	d0, sl, fp
 800cc44:	aa10      	add	r2, sp, #64	; 0x40
 800cc46:	a911      	add	r1, sp, #68	; 0x44
 800cc48:	4620      	mov	r0, r4
 800cc4a:	f001 fdd3 	bl	800e7f4 <__d2b>
 800cc4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cc52:	ee08 0a10 	vmov	s16, r0
 800cc56:	2d00      	cmp	r5, #0
 800cc58:	f000 8084 	beq.w	800cd64 <_dtoa_r+0x204>
 800cc5c:	ee19 3a90 	vmov	r3, s19
 800cc60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cc68:	4656      	mov	r6, sl
 800cc6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cc6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cc72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cc76:	4b74      	ldr	r3, [pc, #464]	; (800ce48 <_dtoa_r+0x2e8>)
 800cc78:	2200      	movs	r2, #0
 800cc7a:	4630      	mov	r0, r6
 800cc7c:	4639      	mov	r1, r7
 800cc7e:	f7f3 fb0b 	bl	8000298 <__aeabi_dsub>
 800cc82:	a365      	add	r3, pc, #404	; (adr r3, 800ce18 <_dtoa_r+0x2b8>)
 800cc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc88:	f7f3 fcbe 	bl	8000608 <__aeabi_dmul>
 800cc8c:	a364      	add	r3, pc, #400	; (adr r3, 800ce20 <_dtoa_r+0x2c0>)
 800cc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc92:	f7f3 fb03 	bl	800029c <__adddf3>
 800cc96:	4606      	mov	r6, r0
 800cc98:	4628      	mov	r0, r5
 800cc9a:	460f      	mov	r7, r1
 800cc9c:	f7f3 fc4a 	bl	8000534 <__aeabi_i2d>
 800cca0:	a361      	add	r3, pc, #388	; (adr r3, 800ce28 <_dtoa_r+0x2c8>)
 800cca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca6:	f7f3 fcaf 	bl	8000608 <__aeabi_dmul>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	4630      	mov	r0, r6
 800ccb0:	4639      	mov	r1, r7
 800ccb2:	f7f3 faf3 	bl	800029c <__adddf3>
 800ccb6:	4606      	mov	r6, r0
 800ccb8:	460f      	mov	r7, r1
 800ccba:	f7f3 ff55 	bl	8000b68 <__aeabi_d2iz>
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	9000      	str	r0, [sp, #0]
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	4639      	mov	r1, r7
 800ccc8:	f7f3 ff10 	bl	8000aec <__aeabi_dcmplt>
 800cccc:	b150      	cbz	r0, 800cce4 <_dtoa_r+0x184>
 800ccce:	9800      	ldr	r0, [sp, #0]
 800ccd0:	f7f3 fc30 	bl	8000534 <__aeabi_i2d>
 800ccd4:	4632      	mov	r2, r6
 800ccd6:	463b      	mov	r3, r7
 800ccd8:	f7f3 fefe 	bl	8000ad8 <__aeabi_dcmpeq>
 800ccdc:	b910      	cbnz	r0, 800cce4 <_dtoa_r+0x184>
 800ccde:	9b00      	ldr	r3, [sp, #0]
 800cce0:	3b01      	subs	r3, #1
 800cce2:	9300      	str	r3, [sp, #0]
 800cce4:	9b00      	ldr	r3, [sp, #0]
 800cce6:	2b16      	cmp	r3, #22
 800cce8:	d85a      	bhi.n	800cda0 <_dtoa_r+0x240>
 800ccea:	9a00      	ldr	r2, [sp, #0]
 800ccec:	4b57      	ldr	r3, [pc, #348]	; (800ce4c <_dtoa_r+0x2ec>)
 800ccee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf6:	ec51 0b19 	vmov	r0, r1, d9
 800ccfa:	f7f3 fef7 	bl	8000aec <__aeabi_dcmplt>
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	d050      	beq.n	800cda4 <_dtoa_r+0x244>
 800cd02:	9b00      	ldr	r3, [sp, #0]
 800cd04:	3b01      	subs	r3, #1
 800cd06:	9300      	str	r3, [sp, #0]
 800cd08:	2300      	movs	r3, #0
 800cd0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd0e:	1b5d      	subs	r5, r3, r5
 800cd10:	1e6b      	subs	r3, r5, #1
 800cd12:	9305      	str	r3, [sp, #20]
 800cd14:	bf45      	ittet	mi
 800cd16:	f1c5 0301 	rsbmi	r3, r5, #1
 800cd1a:	9304      	strmi	r3, [sp, #16]
 800cd1c:	2300      	movpl	r3, #0
 800cd1e:	2300      	movmi	r3, #0
 800cd20:	bf4c      	ite	mi
 800cd22:	9305      	strmi	r3, [sp, #20]
 800cd24:	9304      	strpl	r3, [sp, #16]
 800cd26:	9b00      	ldr	r3, [sp, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	db3d      	blt.n	800cda8 <_dtoa_r+0x248>
 800cd2c:	9b05      	ldr	r3, [sp, #20]
 800cd2e:	9a00      	ldr	r2, [sp, #0]
 800cd30:	920a      	str	r2, [sp, #40]	; 0x28
 800cd32:	4413      	add	r3, r2
 800cd34:	9305      	str	r3, [sp, #20]
 800cd36:	2300      	movs	r3, #0
 800cd38:	9307      	str	r3, [sp, #28]
 800cd3a:	9b06      	ldr	r3, [sp, #24]
 800cd3c:	2b09      	cmp	r3, #9
 800cd3e:	f200 8089 	bhi.w	800ce54 <_dtoa_r+0x2f4>
 800cd42:	2b05      	cmp	r3, #5
 800cd44:	bfc4      	itt	gt
 800cd46:	3b04      	subgt	r3, #4
 800cd48:	9306      	strgt	r3, [sp, #24]
 800cd4a:	9b06      	ldr	r3, [sp, #24]
 800cd4c:	f1a3 0302 	sub.w	r3, r3, #2
 800cd50:	bfcc      	ite	gt
 800cd52:	2500      	movgt	r5, #0
 800cd54:	2501      	movle	r5, #1
 800cd56:	2b03      	cmp	r3, #3
 800cd58:	f200 8087 	bhi.w	800ce6a <_dtoa_r+0x30a>
 800cd5c:	e8df f003 	tbb	[pc, r3]
 800cd60:	59383a2d 	.word	0x59383a2d
 800cd64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cd68:	441d      	add	r5, r3
 800cd6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cd6e:	2b20      	cmp	r3, #32
 800cd70:	bfc1      	itttt	gt
 800cd72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cd76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cd7a:	fa0b f303 	lslgt.w	r3, fp, r3
 800cd7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cd82:	bfda      	itte	le
 800cd84:	f1c3 0320 	rsble	r3, r3, #32
 800cd88:	fa06 f003 	lslle.w	r0, r6, r3
 800cd8c:	4318      	orrgt	r0, r3
 800cd8e:	f7f3 fbc1 	bl	8000514 <__aeabi_ui2d>
 800cd92:	2301      	movs	r3, #1
 800cd94:	4606      	mov	r6, r0
 800cd96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cd9a:	3d01      	subs	r5, #1
 800cd9c:	930e      	str	r3, [sp, #56]	; 0x38
 800cd9e:	e76a      	b.n	800cc76 <_dtoa_r+0x116>
 800cda0:	2301      	movs	r3, #1
 800cda2:	e7b2      	b.n	800cd0a <_dtoa_r+0x1aa>
 800cda4:	900b      	str	r0, [sp, #44]	; 0x2c
 800cda6:	e7b1      	b.n	800cd0c <_dtoa_r+0x1ac>
 800cda8:	9b04      	ldr	r3, [sp, #16]
 800cdaa:	9a00      	ldr	r2, [sp, #0]
 800cdac:	1a9b      	subs	r3, r3, r2
 800cdae:	9304      	str	r3, [sp, #16]
 800cdb0:	4253      	negs	r3, r2
 800cdb2:	9307      	str	r3, [sp, #28]
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	930a      	str	r3, [sp, #40]	; 0x28
 800cdb8:	e7bf      	b.n	800cd3a <_dtoa_r+0x1da>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	9308      	str	r3, [sp, #32]
 800cdbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	dc55      	bgt.n	800ce70 <_dtoa_r+0x310>
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cdca:	461a      	mov	r2, r3
 800cdcc:	9209      	str	r2, [sp, #36]	; 0x24
 800cdce:	e00c      	b.n	800cdea <_dtoa_r+0x28a>
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	e7f3      	b.n	800cdbc <_dtoa_r+0x25c>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdd8:	9308      	str	r3, [sp, #32]
 800cdda:	9b00      	ldr	r3, [sp, #0]
 800cddc:	4413      	add	r3, r2
 800cdde:	9302      	str	r3, [sp, #8]
 800cde0:	3301      	adds	r3, #1
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	9303      	str	r3, [sp, #12]
 800cde6:	bfb8      	it	lt
 800cde8:	2301      	movlt	r3, #1
 800cdea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cdec:	2200      	movs	r2, #0
 800cdee:	6042      	str	r2, [r0, #4]
 800cdf0:	2204      	movs	r2, #4
 800cdf2:	f102 0614 	add.w	r6, r2, #20
 800cdf6:	429e      	cmp	r6, r3
 800cdf8:	6841      	ldr	r1, [r0, #4]
 800cdfa:	d93d      	bls.n	800ce78 <_dtoa_r+0x318>
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f001 f90b 	bl	800e018 <_Balloc>
 800ce02:	9001      	str	r0, [sp, #4]
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d13b      	bne.n	800ce80 <_dtoa_r+0x320>
 800ce08:	4b11      	ldr	r3, [pc, #68]	; (800ce50 <_dtoa_r+0x2f0>)
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ce10:	e6c0      	b.n	800cb94 <_dtoa_r+0x34>
 800ce12:	2301      	movs	r3, #1
 800ce14:	e7df      	b.n	800cdd6 <_dtoa_r+0x276>
 800ce16:	bf00      	nop
 800ce18:	636f4361 	.word	0x636f4361
 800ce1c:	3fd287a7 	.word	0x3fd287a7
 800ce20:	8b60c8b3 	.word	0x8b60c8b3
 800ce24:	3fc68a28 	.word	0x3fc68a28
 800ce28:	509f79fb 	.word	0x509f79fb
 800ce2c:	3fd34413 	.word	0x3fd34413
 800ce30:	08011f66 	.word	0x08011f66
 800ce34:	08011f7d 	.word	0x08011f7d
 800ce38:	7ff00000 	.word	0x7ff00000
 800ce3c:	08011f62 	.word	0x08011f62
 800ce40:	08011f59 	.word	0x08011f59
 800ce44:	08011ddd 	.word	0x08011ddd
 800ce48:	3ff80000 	.word	0x3ff80000
 800ce4c:	080120e8 	.word	0x080120e8
 800ce50:	08011fd8 	.word	0x08011fd8
 800ce54:	2501      	movs	r5, #1
 800ce56:	2300      	movs	r3, #0
 800ce58:	9306      	str	r3, [sp, #24]
 800ce5a:	9508      	str	r5, [sp, #32]
 800ce5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce64:	2200      	movs	r2, #0
 800ce66:	2312      	movs	r3, #18
 800ce68:	e7b0      	b.n	800cdcc <_dtoa_r+0x26c>
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	9308      	str	r3, [sp, #32]
 800ce6e:	e7f5      	b.n	800ce5c <_dtoa_r+0x2fc>
 800ce70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce76:	e7b8      	b.n	800cdea <_dtoa_r+0x28a>
 800ce78:	3101      	adds	r1, #1
 800ce7a:	6041      	str	r1, [r0, #4]
 800ce7c:	0052      	lsls	r2, r2, #1
 800ce7e:	e7b8      	b.n	800cdf2 <_dtoa_r+0x292>
 800ce80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce82:	9a01      	ldr	r2, [sp, #4]
 800ce84:	601a      	str	r2, [r3, #0]
 800ce86:	9b03      	ldr	r3, [sp, #12]
 800ce88:	2b0e      	cmp	r3, #14
 800ce8a:	f200 809d 	bhi.w	800cfc8 <_dtoa_r+0x468>
 800ce8e:	2d00      	cmp	r5, #0
 800ce90:	f000 809a 	beq.w	800cfc8 <_dtoa_r+0x468>
 800ce94:	9b00      	ldr	r3, [sp, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	dd32      	ble.n	800cf00 <_dtoa_r+0x3a0>
 800ce9a:	4ab7      	ldr	r2, [pc, #732]	; (800d178 <_dtoa_r+0x618>)
 800ce9c:	f003 030f 	and.w	r3, r3, #15
 800cea0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cea4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cea8:	9b00      	ldr	r3, [sp, #0]
 800ceaa:	05d8      	lsls	r0, r3, #23
 800ceac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ceb0:	d516      	bpl.n	800cee0 <_dtoa_r+0x380>
 800ceb2:	4bb2      	ldr	r3, [pc, #712]	; (800d17c <_dtoa_r+0x61c>)
 800ceb4:	ec51 0b19 	vmov	r0, r1, d9
 800ceb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cebc:	f7f3 fcce 	bl	800085c <__aeabi_ddiv>
 800cec0:	f007 070f 	and.w	r7, r7, #15
 800cec4:	4682      	mov	sl, r0
 800cec6:	468b      	mov	fp, r1
 800cec8:	2503      	movs	r5, #3
 800ceca:	4eac      	ldr	r6, [pc, #688]	; (800d17c <_dtoa_r+0x61c>)
 800cecc:	b957      	cbnz	r7, 800cee4 <_dtoa_r+0x384>
 800cece:	4642      	mov	r2, r8
 800ced0:	464b      	mov	r3, r9
 800ced2:	4650      	mov	r0, sl
 800ced4:	4659      	mov	r1, fp
 800ced6:	f7f3 fcc1 	bl	800085c <__aeabi_ddiv>
 800ceda:	4682      	mov	sl, r0
 800cedc:	468b      	mov	fp, r1
 800cede:	e028      	b.n	800cf32 <_dtoa_r+0x3d2>
 800cee0:	2502      	movs	r5, #2
 800cee2:	e7f2      	b.n	800ceca <_dtoa_r+0x36a>
 800cee4:	07f9      	lsls	r1, r7, #31
 800cee6:	d508      	bpl.n	800cefa <_dtoa_r+0x39a>
 800cee8:	4640      	mov	r0, r8
 800ceea:	4649      	mov	r1, r9
 800ceec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cef0:	f7f3 fb8a 	bl	8000608 <__aeabi_dmul>
 800cef4:	3501      	adds	r5, #1
 800cef6:	4680      	mov	r8, r0
 800cef8:	4689      	mov	r9, r1
 800cefa:	107f      	asrs	r7, r7, #1
 800cefc:	3608      	adds	r6, #8
 800cefe:	e7e5      	b.n	800cecc <_dtoa_r+0x36c>
 800cf00:	f000 809b 	beq.w	800d03a <_dtoa_r+0x4da>
 800cf04:	9b00      	ldr	r3, [sp, #0]
 800cf06:	4f9d      	ldr	r7, [pc, #628]	; (800d17c <_dtoa_r+0x61c>)
 800cf08:	425e      	negs	r6, r3
 800cf0a:	4b9b      	ldr	r3, [pc, #620]	; (800d178 <_dtoa_r+0x618>)
 800cf0c:	f006 020f 	and.w	r2, r6, #15
 800cf10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf18:	ec51 0b19 	vmov	r0, r1, d9
 800cf1c:	f7f3 fb74 	bl	8000608 <__aeabi_dmul>
 800cf20:	1136      	asrs	r6, r6, #4
 800cf22:	4682      	mov	sl, r0
 800cf24:	468b      	mov	fp, r1
 800cf26:	2300      	movs	r3, #0
 800cf28:	2502      	movs	r5, #2
 800cf2a:	2e00      	cmp	r6, #0
 800cf2c:	d17a      	bne.n	800d024 <_dtoa_r+0x4c4>
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d1d3      	bne.n	800ceda <_dtoa_r+0x37a>
 800cf32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	f000 8082 	beq.w	800d03e <_dtoa_r+0x4de>
 800cf3a:	4b91      	ldr	r3, [pc, #580]	; (800d180 <_dtoa_r+0x620>)
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	4650      	mov	r0, sl
 800cf40:	4659      	mov	r1, fp
 800cf42:	f7f3 fdd3 	bl	8000aec <__aeabi_dcmplt>
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d079      	beq.n	800d03e <_dtoa_r+0x4de>
 800cf4a:	9b03      	ldr	r3, [sp, #12]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d076      	beq.n	800d03e <_dtoa_r+0x4de>
 800cf50:	9b02      	ldr	r3, [sp, #8]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	dd36      	ble.n	800cfc4 <_dtoa_r+0x464>
 800cf56:	9b00      	ldr	r3, [sp, #0]
 800cf58:	4650      	mov	r0, sl
 800cf5a:	4659      	mov	r1, fp
 800cf5c:	1e5f      	subs	r7, r3, #1
 800cf5e:	2200      	movs	r2, #0
 800cf60:	4b88      	ldr	r3, [pc, #544]	; (800d184 <_dtoa_r+0x624>)
 800cf62:	f7f3 fb51 	bl	8000608 <__aeabi_dmul>
 800cf66:	9e02      	ldr	r6, [sp, #8]
 800cf68:	4682      	mov	sl, r0
 800cf6a:	468b      	mov	fp, r1
 800cf6c:	3501      	adds	r5, #1
 800cf6e:	4628      	mov	r0, r5
 800cf70:	f7f3 fae0 	bl	8000534 <__aeabi_i2d>
 800cf74:	4652      	mov	r2, sl
 800cf76:	465b      	mov	r3, fp
 800cf78:	f7f3 fb46 	bl	8000608 <__aeabi_dmul>
 800cf7c:	4b82      	ldr	r3, [pc, #520]	; (800d188 <_dtoa_r+0x628>)
 800cf7e:	2200      	movs	r2, #0
 800cf80:	f7f3 f98c 	bl	800029c <__adddf3>
 800cf84:	46d0      	mov	r8, sl
 800cf86:	46d9      	mov	r9, fp
 800cf88:	4682      	mov	sl, r0
 800cf8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cf8e:	2e00      	cmp	r6, #0
 800cf90:	d158      	bne.n	800d044 <_dtoa_r+0x4e4>
 800cf92:	4b7e      	ldr	r3, [pc, #504]	; (800d18c <_dtoa_r+0x62c>)
 800cf94:	2200      	movs	r2, #0
 800cf96:	4640      	mov	r0, r8
 800cf98:	4649      	mov	r1, r9
 800cf9a:	f7f3 f97d 	bl	8000298 <__aeabi_dsub>
 800cf9e:	4652      	mov	r2, sl
 800cfa0:	465b      	mov	r3, fp
 800cfa2:	4680      	mov	r8, r0
 800cfa4:	4689      	mov	r9, r1
 800cfa6:	f7f3 fdbf 	bl	8000b28 <__aeabi_dcmpgt>
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	f040 8295 	bne.w	800d4da <_dtoa_r+0x97a>
 800cfb0:	4652      	mov	r2, sl
 800cfb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cfb6:	4640      	mov	r0, r8
 800cfb8:	4649      	mov	r1, r9
 800cfba:	f7f3 fd97 	bl	8000aec <__aeabi_dcmplt>
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	f040 8289 	bne.w	800d4d6 <_dtoa_r+0x976>
 800cfc4:	ec5b ab19 	vmov	sl, fp, d9
 800cfc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f2c0 8148 	blt.w	800d260 <_dtoa_r+0x700>
 800cfd0:	9a00      	ldr	r2, [sp, #0]
 800cfd2:	2a0e      	cmp	r2, #14
 800cfd4:	f300 8144 	bgt.w	800d260 <_dtoa_r+0x700>
 800cfd8:	4b67      	ldr	r3, [pc, #412]	; (800d178 <_dtoa_r+0x618>)
 800cfda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfde:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	f280 80d5 	bge.w	800d194 <_dtoa_r+0x634>
 800cfea:	9b03      	ldr	r3, [sp, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f300 80d1 	bgt.w	800d194 <_dtoa_r+0x634>
 800cff2:	f040 826f 	bne.w	800d4d4 <_dtoa_r+0x974>
 800cff6:	4b65      	ldr	r3, [pc, #404]	; (800d18c <_dtoa_r+0x62c>)
 800cff8:	2200      	movs	r2, #0
 800cffa:	4640      	mov	r0, r8
 800cffc:	4649      	mov	r1, r9
 800cffe:	f7f3 fb03 	bl	8000608 <__aeabi_dmul>
 800d002:	4652      	mov	r2, sl
 800d004:	465b      	mov	r3, fp
 800d006:	f7f3 fd85 	bl	8000b14 <__aeabi_dcmpge>
 800d00a:	9e03      	ldr	r6, [sp, #12]
 800d00c:	4637      	mov	r7, r6
 800d00e:	2800      	cmp	r0, #0
 800d010:	f040 8245 	bne.w	800d49e <_dtoa_r+0x93e>
 800d014:	9d01      	ldr	r5, [sp, #4]
 800d016:	2331      	movs	r3, #49	; 0x31
 800d018:	f805 3b01 	strb.w	r3, [r5], #1
 800d01c:	9b00      	ldr	r3, [sp, #0]
 800d01e:	3301      	adds	r3, #1
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	e240      	b.n	800d4a6 <_dtoa_r+0x946>
 800d024:	07f2      	lsls	r2, r6, #31
 800d026:	d505      	bpl.n	800d034 <_dtoa_r+0x4d4>
 800d028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d02c:	f7f3 faec 	bl	8000608 <__aeabi_dmul>
 800d030:	3501      	adds	r5, #1
 800d032:	2301      	movs	r3, #1
 800d034:	1076      	asrs	r6, r6, #1
 800d036:	3708      	adds	r7, #8
 800d038:	e777      	b.n	800cf2a <_dtoa_r+0x3ca>
 800d03a:	2502      	movs	r5, #2
 800d03c:	e779      	b.n	800cf32 <_dtoa_r+0x3d2>
 800d03e:	9f00      	ldr	r7, [sp, #0]
 800d040:	9e03      	ldr	r6, [sp, #12]
 800d042:	e794      	b.n	800cf6e <_dtoa_r+0x40e>
 800d044:	9901      	ldr	r1, [sp, #4]
 800d046:	4b4c      	ldr	r3, [pc, #304]	; (800d178 <_dtoa_r+0x618>)
 800d048:	4431      	add	r1, r6
 800d04a:	910d      	str	r1, [sp, #52]	; 0x34
 800d04c:	9908      	ldr	r1, [sp, #32]
 800d04e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d052:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d056:	2900      	cmp	r1, #0
 800d058:	d043      	beq.n	800d0e2 <_dtoa_r+0x582>
 800d05a:	494d      	ldr	r1, [pc, #308]	; (800d190 <_dtoa_r+0x630>)
 800d05c:	2000      	movs	r0, #0
 800d05e:	f7f3 fbfd 	bl	800085c <__aeabi_ddiv>
 800d062:	4652      	mov	r2, sl
 800d064:	465b      	mov	r3, fp
 800d066:	f7f3 f917 	bl	8000298 <__aeabi_dsub>
 800d06a:	9d01      	ldr	r5, [sp, #4]
 800d06c:	4682      	mov	sl, r0
 800d06e:	468b      	mov	fp, r1
 800d070:	4649      	mov	r1, r9
 800d072:	4640      	mov	r0, r8
 800d074:	f7f3 fd78 	bl	8000b68 <__aeabi_d2iz>
 800d078:	4606      	mov	r6, r0
 800d07a:	f7f3 fa5b 	bl	8000534 <__aeabi_i2d>
 800d07e:	4602      	mov	r2, r0
 800d080:	460b      	mov	r3, r1
 800d082:	4640      	mov	r0, r8
 800d084:	4649      	mov	r1, r9
 800d086:	f7f3 f907 	bl	8000298 <__aeabi_dsub>
 800d08a:	3630      	adds	r6, #48	; 0x30
 800d08c:	f805 6b01 	strb.w	r6, [r5], #1
 800d090:	4652      	mov	r2, sl
 800d092:	465b      	mov	r3, fp
 800d094:	4680      	mov	r8, r0
 800d096:	4689      	mov	r9, r1
 800d098:	f7f3 fd28 	bl	8000aec <__aeabi_dcmplt>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d163      	bne.n	800d168 <_dtoa_r+0x608>
 800d0a0:	4642      	mov	r2, r8
 800d0a2:	464b      	mov	r3, r9
 800d0a4:	4936      	ldr	r1, [pc, #216]	; (800d180 <_dtoa_r+0x620>)
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	f7f3 f8f6 	bl	8000298 <__aeabi_dsub>
 800d0ac:	4652      	mov	r2, sl
 800d0ae:	465b      	mov	r3, fp
 800d0b0:	f7f3 fd1c 	bl	8000aec <__aeabi_dcmplt>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	f040 80b5 	bne.w	800d224 <_dtoa_r+0x6c4>
 800d0ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0bc:	429d      	cmp	r5, r3
 800d0be:	d081      	beq.n	800cfc4 <_dtoa_r+0x464>
 800d0c0:	4b30      	ldr	r3, [pc, #192]	; (800d184 <_dtoa_r+0x624>)
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	4650      	mov	r0, sl
 800d0c6:	4659      	mov	r1, fp
 800d0c8:	f7f3 fa9e 	bl	8000608 <__aeabi_dmul>
 800d0cc:	4b2d      	ldr	r3, [pc, #180]	; (800d184 <_dtoa_r+0x624>)
 800d0ce:	4682      	mov	sl, r0
 800d0d0:	468b      	mov	fp, r1
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	4649      	mov	r1, r9
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f7f3 fa96 	bl	8000608 <__aeabi_dmul>
 800d0dc:	4680      	mov	r8, r0
 800d0de:	4689      	mov	r9, r1
 800d0e0:	e7c6      	b.n	800d070 <_dtoa_r+0x510>
 800d0e2:	4650      	mov	r0, sl
 800d0e4:	4659      	mov	r1, fp
 800d0e6:	f7f3 fa8f 	bl	8000608 <__aeabi_dmul>
 800d0ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0ec:	9d01      	ldr	r5, [sp, #4]
 800d0ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0f0:	4682      	mov	sl, r0
 800d0f2:	468b      	mov	fp, r1
 800d0f4:	4649      	mov	r1, r9
 800d0f6:	4640      	mov	r0, r8
 800d0f8:	f7f3 fd36 	bl	8000b68 <__aeabi_d2iz>
 800d0fc:	4606      	mov	r6, r0
 800d0fe:	f7f3 fa19 	bl	8000534 <__aeabi_i2d>
 800d102:	3630      	adds	r6, #48	; 0x30
 800d104:	4602      	mov	r2, r0
 800d106:	460b      	mov	r3, r1
 800d108:	4640      	mov	r0, r8
 800d10a:	4649      	mov	r1, r9
 800d10c:	f7f3 f8c4 	bl	8000298 <__aeabi_dsub>
 800d110:	f805 6b01 	strb.w	r6, [r5], #1
 800d114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d116:	429d      	cmp	r5, r3
 800d118:	4680      	mov	r8, r0
 800d11a:	4689      	mov	r9, r1
 800d11c:	f04f 0200 	mov.w	r2, #0
 800d120:	d124      	bne.n	800d16c <_dtoa_r+0x60c>
 800d122:	4b1b      	ldr	r3, [pc, #108]	; (800d190 <_dtoa_r+0x630>)
 800d124:	4650      	mov	r0, sl
 800d126:	4659      	mov	r1, fp
 800d128:	f7f3 f8b8 	bl	800029c <__adddf3>
 800d12c:	4602      	mov	r2, r0
 800d12e:	460b      	mov	r3, r1
 800d130:	4640      	mov	r0, r8
 800d132:	4649      	mov	r1, r9
 800d134:	f7f3 fcf8 	bl	8000b28 <__aeabi_dcmpgt>
 800d138:	2800      	cmp	r0, #0
 800d13a:	d173      	bne.n	800d224 <_dtoa_r+0x6c4>
 800d13c:	4652      	mov	r2, sl
 800d13e:	465b      	mov	r3, fp
 800d140:	4913      	ldr	r1, [pc, #76]	; (800d190 <_dtoa_r+0x630>)
 800d142:	2000      	movs	r0, #0
 800d144:	f7f3 f8a8 	bl	8000298 <__aeabi_dsub>
 800d148:	4602      	mov	r2, r0
 800d14a:	460b      	mov	r3, r1
 800d14c:	4640      	mov	r0, r8
 800d14e:	4649      	mov	r1, r9
 800d150:	f7f3 fccc 	bl	8000aec <__aeabi_dcmplt>
 800d154:	2800      	cmp	r0, #0
 800d156:	f43f af35 	beq.w	800cfc4 <_dtoa_r+0x464>
 800d15a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d15c:	1e6b      	subs	r3, r5, #1
 800d15e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d160:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d164:	2b30      	cmp	r3, #48	; 0x30
 800d166:	d0f8      	beq.n	800d15a <_dtoa_r+0x5fa>
 800d168:	9700      	str	r7, [sp, #0]
 800d16a:	e049      	b.n	800d200 <_dtoa_r+0x6a0>
 800d16c:	4b05      	ldr	r3, [pc, #20]	; (800d184 <_dtoa_r+0x624>)
 800d16e:	f7f3 fa4b 	bl	8000608 <__aeabi_dmul>
 800d172:	4680      	mov	r8, r0
 800d174:	4689      	mov	r9, r1
 800d176:	e7bd      	b.n	800d0f4 <_dtoa_r+0x594>
 800d178:	080120e8 	.word	0x080120e8
 800d17c:	080120c0 	.word	0x080120c0
 800d180:	3ff00000 	.word	0x3ff00000
 800d184:	40240000 	.word	0x40240000
 800d188:	401c0000 	.word	0x401c0000
 800d18c:	40140000 	.word	0x40140000
 800d190:	3fe00000 	.word	0x3fe00000
 800d194:	9d01      	ldr	r5, [sp, #4]
 800d196:	4656      	mov	r6, sl
 800d198:	465f      	mov	r7, fp
 800d19a:	4642      	mov	r2, r8
 800d19c:	464b      	mov	r3, r9
 800d19e:	4630      	mov	r0, r6
 800d1a0:	4639      	mov	r1, r7
 800d1a2:	f7f3 fb5b 	bl	800085c <__aeabi_ddiv>
 800d1a6:	f7f3 fcdf 	bl	8000b68 <__aeabi_d2iz>
 800d1aa:	4682      	mov	sl, r0
 800d1ac:	f7f3 f9c2 	bl	8000534 <__aeabi_i2d>
 800d1b0:	4642      	mov	r2, r8
 800d1b2:	464b      	mov	r3, r9
 800d1b4:	f7f3 fa28 	bl	8000608 <__aeabi_dmul>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4630      	mov	r0, r6
 800d1be:	4639      	mov	r1, r7
 800d1c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d1c4:	f7f3 f868 	bl	8000298 <__aeabi_dsub>
 800d1c8:	f805 6b01 	strb.w	r6, [r5], #1
 800d1cc:	9e01      	ldr	r6, [sp, #4]
 800d1ce:	9f03      	ldr	r7, [sp, #12]
 800d1d0:	1bae      	subs	r6, r5, r6
 800d1d2:	42b7      	cmp	r7, r6
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	d135      	bne.n	800d246 <_dtoa_r+0x6e6>
 800d1da:	f7f3 f85f 	bl	800029c <__adddf3>
 800d1de:	4642      	mov	r2, r8
 800d1e0:	464b      	mov	r3, r9
 800d1e2:	4606      	mov	r6, r0
 800d1e4:	460f      	mov	r7, r1
 800d1e6:	f7f3 fc9f 	bl	8000b28 <__aeabi_dcmpgt>
 800d1ea:	b9d0      	cbnz	r0, 800d222 <_dtoa_r+0x6c2>
 800d1ec:	4642      	mov	r2, r8
 800d1ee:	464b      	mov	r3, r9
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	4639      	mov	r1, r7
 800d1f4:	f7f3 fc70 	bl	8000ad8 <__aeabi_dcmpeq>
 800d1f8:	b110      	cbz	r0, 800d200 <_dtoa_r+0x6a0>
 800d1fa:	f01a 0f01 	tst.w	sl, #1
 800d1fe:	d110      	bne.n	800d222 <_dtoa_r+0x6c2>
 800d200:	4620      	mov	r0, r4
 800d202:	ee18 1a10 	vmov	r1, s16
 800d206:	f000 ff47 	bl	800e098 <_Bfree>
 800d20a:	2300      	movs	r3, #0
 800d20c:	9800      	ldr	r0, [sp, #0]
 800d20e:	702b      	strb	r3, [r5, #0]
 800d210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d212:	3001      	adds	r0, #1
 800d214:	6018      	str	r0, [r3, #0]
 800d216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d218:	2b00      	cmp	r3, #0
 800d21a:	f43f acf1 	beq.w	800cc00 <_dtoa_r+0xa0>
 800d21e:	601d      	str	r5, [r3, #0]
 800d220:	e4ee      	b.n	800cc00 <_dtoa_r+0xa0>
 800d222:	9f00      	ldr	r7, [sp, #0]
 800d224:	462b      	mov	r3, r5
 800d226:	461d      	mov	r5, r3
 800d228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d22c:	2a39      	cmp	r2, #57	; 0x39
 800d22e:	d106      	bne.n	800d23e <_dtoa_r+0x6de>
 800d230:	9a01      	ldr	r2, [sp, #4]
 800d232:	429a      	cmp	r2, r3
 800d234:	d1f7      	bne.n	800d226 <_dtoa_r+0x6c6>
 800d236:	9901      	ldr	r1, [sp, #4]
 800d238:	2230      	movs	r2, #48	; 0x30
 800d23a:	3701      	adds	r7, #1
 800d23c:	700a      	strb	r2, [r1, #0]
 800d23e:	781a      	ldrb	r2, [r3, #0]
 800d240:	3201      	adds	r2, #1
 800d242:	701a      	strb	r2, [r3, #0]
 800d244:	e790      	b.n	800d168 <_dtoa_r+0x608>
 800d246:	4ba6      	ldr	r3, [pc, #664]	; (800d4e0 <_dtoa_r+0x980>)
 800d248:	2200      	movs	r2, #0
 800d24a:	f7f3 f9dd 	bl	8000608 <__aeabi_dmul>
 800d24e:	2200      	movs	r2, #0
 800d250:	2300      	movs	r3, #0
 800d252:	4606      	mov	r6, r0
 800d254:	460f      	mov	r7, r1
 800d256:	f7f3 fc3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800d25a:	2800      	cmp	r0, #0
 800d25c:	d09d      	beq.n	800d19a <_dtoa_r+0x63a>
 800d25e:	e7cf      	b.n	800d200 <_dtoa_r+0x6a0>
 800d260:	9a08      	ldr	r2, [sp, #32]
 800d262:	2a00      	cmp	r2, #0
 800d264:	f000 80d7 	beq.w	800d416 <_dtoa_r+0x8b6>
 800d268:	9a06      	ldr	r2, [sp, #24]
 800d26a:	2a01      	cmp	r2, #1
 800d26c:	f300 80ba 	bgt.w	800d3e4 <_dtoa_r+0x884>
 800d270:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d272:	2a00      	cmp	r2, #0
 800d274:	f000 80b2 	beq.w	800d3dc <_dtoa_r+0x87c>
 800d278:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d27c:	9e07      	ldr	r6, [sp, #28]
 800d27e:	9d04      	ldr	r5, [sp, #16]
 800d280:	9a04      	ldr	r2, [sp, #16]
 800d282:	441a      	add	r2, r3
 800d284:	9204      	str	r2, [sp, #16]
 800d286:	9a05      	ldr	r2, [sp, #20]
 800d288:	2101      	movs	r1, #1
 800d28a:	441a      	add	r2, r3
 800d28c:	4620      	mov	r0, r4
 800d28e:	9205      	str	r2, [sp, #20]
 800d290:	f001 f804 	bl	800e29c <__i2b>
 800d294:	4607      	mov	r7, r0
 800d296:	2d00      	cmp	r5, #0
 800d298:	dd0c      	ble.n	800d2b4 <_dtoa_r+0x754>
 800d29a:	9b05      	ldr	r3, [sp, #20]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	dd09      	ble.n	800d2b4 <_dtoa_r+0x754>
 800d2a0:	42ab      	cmp	r3, r5
 800d2a2:	9a04      	ldr	r2, [sp, #16]
 800d2a4:	bfa8      	it	ge
 800d2a6:	462b      	movge	r3, r5
 800d2a8:	1ad2      	subs	r2, r2, r3
 800d2aa:	9204      	str	r2, [sp, #16]
 800d2ac:	9a05      	ldr	r2, [sp, #20]
 800d2ae:	1aed      	subs	r5, r5, r3
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	9305      	str	r3, [sp, #20]
 800d2b4:	9b07      	ldr	r3, [sp, #28]
 800d2b6:	b31b      	cbz	r3, 800d300 <_dtoa_r+0x7a0>
 800d2b8:	9b08      	ldr	r3, [sp, #32]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f000 80af 	beq.w	800d41e <_dtoa_r+0x8be>
 800d2c0:	2e00      	cmp	r6, #0
 800d2c2:	dd13      	ble.n	800d2ec <_dtoa_r+0x78c>
 800d2c4:	4639      	mov	r1, r7
 800d2c6:	4632      	mov	r2, r6
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f001 f8a7 	bl	800e41c <__pow5mult>
 800d2ce:	ee18 2a10 	vmov	r2, s16
 800d2d2:	4601      	mov	r1, r0
 800d2d4:	4607      	mov	r7, r0
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f000 fff6 	bl	800e2c8 <__multiply>
 800d2dc:	ee18 1a10 	vmov	r1, s16
 800d2e0:	4680      	mov	r8, r0
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f000 fed8 	bl	800e098 <_Bfree>
 800d2e8:	ee08 8a10 	vmov	s16, r8
 800d2ec:	9b07      	ldr	r3, [sp, #28]
 800d2ee:	1b9a      	subs	r2, r3, r6
 800d2f0:	d006      	beq.n	800d300 <_dtoa_r+0x7a0>
 800d2f2:	ee18 1a10 	vmov	r1, s16
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	f001 f890 	bl	800e41c <__pow5mult>
 800d2fc:	ee08 0a10 	vmov	s16, r0
 800d300:	2101      	movs	r1, #1
 800d302:	4620      	mov	r0, r4
 800d304:	f000 ffca 	bl	800e29c <__i2b>
 800d308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	4606      	mov	r6, r0
 800d30e:	f340 8088 	ble.w	800d422 <_dtoa_r+0x8c2>
 800d312:	461a      	mov	r2, r3
 800d314:	4601      	mov	r1, r0
 800d316:	4620      	mov	r0, r4
 800d318:	f001 f880 	bl	800e41c <__pow5mult>
 800d31c:	9b06      	ldr	r3, [sp, #24]
 800d31e:	2b01      	cmp	r3, #1
 800d320:	4606      	mov	r6, r0
 800d322:	f340 8081 	ble.w	800d428 <_dtoa_r+0x8c8>
 800d326:	f04f 0800 	mov.w	r8, #0
 800d32a:	6933      	ldr	r3, [r6, #16]
 800d32c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d330:	6918      	ldr	r0, [r3, #16]
 800d332:	f000 ff63 	bl	800e1fc <__hi0bits>
 800d336:	f1c0 0020 	rsb	r0, r0, #32
 800d33a:	9b05      	ldr	r3, [sp, #20]
 800d33c:	4418      	add	r0, r3
 800d33e:	f010 001f 	ands.w	r0, r0, #31
 800d342:	f000 8092 	beq.w	800d46a <_dtoa_r+0x90a>
 800d346:	f1c0 0320 	rsb	r3, r0, #32
 800d34a:	2b04      	cmp	r3, #4
 800d34c:	f340 808a 	ble.w	800d464 <_dtoa_r+0x904>
 800d350:	f1c0 001c 	rsb	r0, r0, #28
 800d354:	9b04      	ldr	r3, [sp, #16]
 800d356:	4403      	add	r3, r0
 800d358:	9304      	str	r3, [sp, #16]
 800d35a:	9b05      	ldr	r3, [sp, #20]
 800d35c:	4403      	add	r3, r0
 800d35e:	4405      	add	r5, r0
 800d360:	9305      	str	r3, [sp, #20]
 800d362:	9b04      	ldr	r3, [sp, #16]
 800d364:	2b00      	cmp	r3, #0
 800d366:	dd07      	ble.n	800d378 <_dtoa_r+0x818>
 800d368:	ee18 1a10 	vmov	r1, s16
 800d36c:	461a      	mov	r2, r3
 800d36e:	4620      	mov	r0, r4
 800d370:	f001 f8ae 	bl	800e4d0 <__lshift>
 800d374:	ee08 0a10 	vmov	s16, r0
 800d378:	9b05      	ldr	r3, [sp, #20]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	dd05      	ble.n	800d38a <_dtoa_r+0x82a>
 800d37e:	4631      	mov	r1, r6
 800d380:	461a      	mov	r2, r3
 800d382:	4620      	mov	r0, r4
 800d384:	f001 f8a4 	bl	800e4d0 <__lshift>
 800d388:	4606      	mov	r6, r0
 800d38a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d06e      	beq.n	800d46e <_dtoa_r+0x90e>
 800d390:	ee18 0a10 	vmov	r0, s16
 800d394:	4631      	mov	r1, r6
 800d396:	f001 f90b 	bl	800e5b0 <__mcmp>
 800d39a:	2800      	cmp	r0, #0
 800d39c:	da67      	bge.n	800d46e <_dtoa_r+0x90e>
 800d39e:	9b00      	ldr	r3, [sp, #0]
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	ee18 1a10 	vmov	r1, s16
 800d3a6:	9300      	str	r3, [sp, #0]
 800d3a8:	220a      	movs	r2, #10
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f000 fe95 	bl	800e0dc <__multadd>
 800d3b2:	9b08      	ldr	r3, [sp, #32]
 800d3b4:	ee08 0a10 	vmov	s16, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f000 81b1 	beq.w	800d720 <_dtoa_r+0xbc0>
 800d3be:	2300      	movs	r3, #0
 800d3c0:	4639      	mov	r1, r7
 800d3c2:	220a      	movs	r2, #10
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	f000 fe89 	bl	800e0dc <__multadd>
 800d3ca:	9b02      	ldr	r3, [sp, #8]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	4607      	mov	r7, r0
 800d3d0:	f300 808e 	bgt.w	800d4f0 <_dtoa_r+0x990>
 800d3d4:	9b06      	ldr	r3, [sp, #24]
 800d3d6:	2b02      	cmp	r3, #2
 800d3d8:	dc51      	bgt.n	800d47e <_dtoa_r+0x91e>
 800d3da:	e089      	b.n	800d4f0 <_dtoa_r+0x990>
 800d3dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d3e2:	e74b      	b.n	800d27c <_dtoa_r+0x71c>
 800d3e4:	9b03      	ldr	r3, [sp, #12]
 800d3e6:	1e5e      	subs	r6, r3, #1
 800d3e8:	9b07      	ldr	r3, [sp, #28]
 800d3ea:	42b3      	cmp	r3, r6
 800d3ec:	bfbf      	itttt	lt
 800d3ee:	9b07      	ldrlt	r3, [sp, #28]
 800d3f0:	9607      	strlt	r6, [sp, #28]
 800d3f2:	1af2      	sublt	r2, r6, r3
 800d3f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d3f6:	bfb6      	itet	lt
 800d3f8:	189b      	addlt	r3, r3, r2
 800d3fa:	1b9e      	subge	r6, r3, r6
 800d3fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d3fe:	9b03      	ldr	r3, [sp, #12]
 800d400:	bfb8      	it	lt
 800d402:	2600      	movlt	r6, #0
 800d404:	2b00      	cmp	r3, #0
 800d406:	bfb7      	itett	lt
 800d408:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d40c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d410:	1a9d      	sublt	r5, r3, r2
 800d412:	2300      	movlt	r3, #0
 800d414:	e734      	b.n	800d280 <_dtoa_r+0x720>
 800d416:	9e07      	ldr	r6, [sp, #28]
 800d418:	9d04      	ldr	r5, [sp, #16]
 800d41a:	9f08      	ldr	r7, [sp, #32]
 800d41c:	e73b      	b.n	800d296 <_dtoa_r+0x736>
 800d41e:	9a07      	ldr	r2, [sp, #28]
 800d420:	e767      	b.n	800d2f2 <_dtoa_r+0x792>
 800d422:	9b06      	ldr	r3, [sp, #24]
 800d424:	2b01      	cmp	r3, #1
 800d426:	dc18      	bgt.n	800d45a <_dtoa_r+0x8fa>
 800d428:	f1ba 0f00 	cmp.w	sl, #0
 800d42c:	d115      	bne.n	800d45a <_dtoa_r+0x8fa>
 800d42e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d432:	b993      	cbnz	r3, 800d45a <_dtoa_r+0x8fa>
 800d434:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d438:	0d1b      	lsrs	r3, r3, #20
 800d43a:	051b      	lsls	r3, r3, #20
 800d43c:	b183      	cbz	r3, 800d460 <_dtoa_r+0x900>
 800d43e:	9b04      	ldr	r3, [sp, #16]
 800d440:	3301      	adds	r3, #1
 800d442:	9304      	str	r3, [sp, #16]
 800d444:	9b05      	ldr	r3, [sp, #20]
 800d446:	3301      	adds	r3, #1
 800d448:	9305      	str	r3, [sp, #20]
 800d44a:	f04f 0801 	mov.w	r8, #1
 800d44e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d450:	2b00      	cmp	r3, #0
 800d452:	f47f af6a 	bne.w	800d32a <_dtoa_r+0x7ca>
 800d456:	2001      	movs	r0, #1
 800d458:	e76f      	b.n	800d33a <_dtoa_r+0x7da>
 800d45a:	f04f 0800 	mov.w	r8, #0
 800d45e:	e7f6      	b.n	800d44e <_dtoa_r+0x8ee>
 800d460:	4698      	mov	r8, r3
 800d462:	e7f4      	b.n	800d44e <_dtoa_r+0x8ee>
 800d464:	f43f af7d 	beq.w	800d362 <_dtoa_r+0x802>
 800d468:	4618      	mov	r0, r3
 800d46a:	301c      	adds	r0, #28
 800d46c:	e772      	b.n	800d354 <_dtoa_r+0x7f4>
 800d46e:	9b03      	ldr	r3, [sp, #12]
 800d470:	2b00      	cmp	r3, #0
 800d472:	dc37      	bgt.n	800d4e4 <_dtoa_r+0x984>
 800d474:	9b06      	ldr	r3, [sp, #24]
 800d476:	2b02      	cmp	r3, #2
 800d478:	dd34      	ble.n	800d4e4 <_dtoa_r+0x984>
 800d47a:	9b03      	ldr	r3, [sp, #12]
 800d47c:	9302      	str	r3, [sp, #8]
 800d47e:	9b02      	ldr	r3, [sp, #8]
 800d480:	b96b      	cbnz	r3, 800d49e <_dtoa_r+0x93e>
 800d482:	4631      	mov	r1, r6
 800d484:	2205      	movs	r2, #5
 800d486:	4620      	mov	r0, r4
 800d488:	f000 fe28 	bl	800e0dc <__multadd>
 800d48c:	4601      	mov	r1, r0
 800d48e:	4606      	mov	r6, r0
 800d490:	ee18 0a10 	vmov	r0, s16
 800d494:	f001 f88c 	bl	800e5b0 <__mcmp>
 800d498:	2800      	cmp	r0, #0
 800d49a:	f73f adbb 	bgt.w	800d014 <_dtoa_r+0x4b4>
 800d49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a0:	9d01      	ldr	r5, [sp, #4]
 800d4a2:	43db      	mvns	r3, r3
 800d4a4:	9300      	str	r3, [sp, #0]
 800d4a6:	f04f 0800 	mov.w	r8, #0
 800d4aa:	4631      	mov	r1, r6
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	f000 fdf3 	bl	800e098 <_Bfree>
 800d4b2:	2f00      	cmp	r7, #0
 800d4b4:	f43f aea4 	beq.w	800d200 <_dtoa_r+0x6a0>
 800d4b8:	f1b8 0f00 	cmp.w	r8, #0
 800d4bc:	d005      	beq.n	800d4ca <_dtoa_r+0x96a>
 800d4be:	45b8      	cmp	r8, r7
 800d4c0:	d003      	beq.n	800d4ca <_dtoa_r+0x96a>
 800d4c2:	4641      	mov	r1, r8
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f000 fde7 	bl	800e098 <_Bfree>
 800d4ca:	4639      	mov	r1, r7
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	f000 fde3 	bl	800e098 <_Bfree>
 800d4d2:	e695      	b.n	800d200 <_dtoa_r+0x6a0>
 800d4d4:	2600      	movs	r6, #0
 800d4d6:	4637      	mov	r7, r6
 800d4d8:	e7e1      	b.n	800d49e <_dtoa_r+0x93e>
 800d4da:	9700      	str	r7, [sp, #0]
 800d4dc:	4637      	mov	r7, r6
 800d4de:	e599      	b.n	800d014 <_dtoa_r+0x4b4>
 800d4e0:	40240000 	.word	0x40240000
 800d4e4:	9b08      	ldr	r3, [sp, #32]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f000 80ca 	beq.w	800d680 <_dtoa_r+0xb20>
 800d4ec:	9b03      	ldr	r3, [sp, #12]
 800d4ee:	9302      	str	r3, [sp, #8]
 800d4f0:	2d00      	cmp	r5, #0
 800d4f2:	dd05      	ble.n	800d500 <_dtoa_r+0x9a0>
 800d4f4:	4639      	mov	r1, r7
 800d4f6:	462a      	mov	r2, r5
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f000 ffe9 	bl	800e4d0 <__lshift>
 800d4fe:	4607      	mov	r7, r0
 800d500:	f1b8 0f00 	cmp.w	r8, #0
 800d504:	d05b      	beq.n	800d5be <_dtoa_r+0xa5e>
 800d506:	6879      	ldr	r1, [r7, #4]
 800d508:	4620      	mov	r0, r4
 800d50a:	f000 fd85 	bl	800e018 <_Balloc>
 800d50e:	4605      	mov	r5, r0
 800d510:	b928      	cbnz	r0, 800d51e <_dtoa_r+0x9be>
 800d512:	4b87      	ldr	r3, [pc, #540]	; (800d730 <_dtoa_r+0xbd0>)
 800d514:	4602      	mov	r2, r0
 800d516:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d51a:	f7ff bb3b 	b.w	800cb94 <_dtoa_r+0x34>
 800d51e:	693a      	ldr	r2, [r7, #16]
 800d520:	3202      	adds	r2, #2
 800d522:	0092      	lsls	r2, r2, #2
 800d524:	f107 010c 	add.w	r1, r7, #12
 800d528:	300c      	adds	r0, #12
 800d52a:	f7fd fbb4 	bl	800ac96 <memcpy>
 800d52e:	2201      	movs	r2, #1
 800d530:	4629      	mov	r1, r5
 800d532:	4620      	mov	r0, r4
 800d534:	f000 ffcc 	bl	800e4d0 <__lshift>
 800d538:	9b01      	ldr	r3, [sp, #4]
 800d53a:	f103 0901 	add.w	r9, r3, #1
 800d53e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d542:	4413      	add	r3, r2
 800d544:	9305      	str	r3, [sp, #20]
 800d546:	f00a 0301 	and.w	r3, sl, #1
 800d54a:	46b8      	mov	r8, r7
 800d54c:	9304      	str	r3, [sp, #16]
 800d54e:	4607      	mov	r7, r0
 800d550:	4631      	mov	r1, r6
 800d552:	ee18 0a10 	vmov	r0, s16
 800d556:	f7ff fa75 	bl	800ca44 <quorem>
 800d55a:	4641      	mov	r1, r8
 800d55c:	9002      	str	r0, [sp, #8]
 800d55e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d562:	ee18 0a10 	vmov	r0, s16
 800d566:	f001 f823 	bl	800e5b0 <__mcmp>
 800d56a:	463a      	mov	r2, r7
 800d56c:	9003      	str	r0, [sp, #12]
 800d56e:	4631      	mov	r1, r6
 800d570:	4620      	mov	r0, r4
 800d572:	f001 f839 	bl	800e5e8 <__mdiff>
 800d576:	68c2      	ldr	r2, [r0, #12]
 800d578:	f109 3bff 	add.w	fp, r9, #4294967295
 800d57c:	4605      	mov	r5, r0
 800d57e:	bb02      	cbnz	r2, 800d5c2 <_dtoa_r+0xa62>
 800d580:	4601      	mov	r1, r0
 800d582:	ee18 0a10 	vmov	r0, s16
 800d586:	f001 f813 	bl	800e5b0 <__mcmp>
 800d58a:	4602      	mov	r2, r0
 800d58c:	4629      	mov	r1, r5
 800d58e:	4620      	mov	r0, r4
 800d590:	9207      	str	r2, [sp, #28]
 800d592:	f000 fd81 	bl	800e098 <_Bfree>
 800d596:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d59a:	ea43 0102 	orr.w	r1, r3, r2
 800d59e:	9b04      	ldr	r3, [sp, #16]
 800d5a0:	430b      	orrs	r3, r1
 800d5a2:	464d      	mov	r5, r9
 800d5a4:	d10f      	bne.n	800d5c6 <_dtoa_r+0xa66>
 800d5a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d5aa:	d02a      	beq.n	800d602 <_dtoa_r+0xaa2>
 800d5ac:	9b03      	ldr	r3, [sp, #12]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	dd02      	ble.n	800d5b8 <_dtoa_r+0xa58>
 800d5b2:	9b02      	ldr	r3, [sp, #8]
 800d5b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d5b8:	f88b a000 	strb.w	sl, [fp]
 800d5bc:	e775      	b.n	800d4aa <_dtoa_r+0x94a>
 800d5be:	4638      	mov	r0, r7
 800d5c0:	e7ba      	b.n	800d538 <_dtoa_r+0x9d8>
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	e7e2      	b.n	800d58c <_dtoa_r+0xa2c>
 800d5c6:	9b03      	ldr	r3, [sp, #12]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	db04      	blt.n	800d5d6 <_dtoa_r+0xa76>
 800d5cc:	9906      	ldr	r1, [sp, #24]
 800d5ce:	430b      	orrs	r3, r1
 800d5d0:	9904      	ldr	r1, [sp, #16]
 800d5d2:	430b      	orrs	r3, r1
 800d5d4:	d122      	bne.n	800d61c <_dtoa_r+0xabc>
 800d5d6:	2a00      	cmp	r2, #0
 800d5d8:	ddee      	ble.n	800d5b8 <_dtoa_r+0xa58>
 800d5da:	ee18 1a10 	vmov	r1, s16
 800d5de:	2201      	movs	r2, #1
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f000 ff75 	bl	800e4d0 <__lshift>
 800d5e6:	4631      	mov	r1, r6
 800d5e8:	ee08 0a10 	vmov	s16, r0
 800d5ec:	f000 ffe0 	bl	800e5b0 <__mcmp>
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	dc03      	bgt.n	800d5fc <_dtoa_r+0xa9c>
 800d5f4:	d1e0      	bne.n	800d5b8 <_dtoa_r+0xa58>
 800d5f6:	f01a 0f01 	tst.w	sl, #1
 800d5fa:	d0dd      	beq.n	800d5b8 <_dtoa_r+0xa58>
 800d5fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d600:	d1d7      	bne.n	800d5b2 <_dtoa_r+0xa52>
 800d602:	2339      	movs	r3, #57	; 0x39
 800d604:	f88b 3000 	strb.w	r3, [fp]
 800d608:	462b      	mov	r3, r5
 800d60a:	461d      	mov	r5, r3
 800d60c:	3b01      	subs	r3, #1
 800d60e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d612:	2a39      	cmp	r2, #57	; 0x39
 800d614:	d071      	beq.n	800d6fa <_dtoa_r+0xb9a>
 800d616:	3201      	adds	r2, #1
 800d618:	701a      	strb	r2, [r3, #0]
 800d61a:	e746      	b.n	800d4aa <_dtoa_r+0x94a>
 800d61c:	2a00      	cmp	r2, #0
 800d61e:	dd07      	ble.n	800d630 <_dtoa_r+0xad0>
 800d620:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d624:	d0ed      	beq.n	800d602 <_dtoa_r+0xaa2>
 800d626:	f10a 0301 	add.w	r3, sl, #1
 800d62a:	f88b 3000 	strb.w	r3, [fp]
 800d62e:	e73c      	b.n	800d4aa <_dtoa_r+0x94a>
 800d630:	9b05      	ldr	r3, [sp, #20]
 800d632:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d636:	4599      	cmp	r9, r3
 800d638:	d047      	beq.n	800d6ca <_dtoa_r+0xb6a>
 800d63a:	ee18 1a10 	vmov	r1, s16
 800d63e:	2300      	movs	r3, #0
 800d640:	220a      	movs	r2, #10
 800d642:	4620      	mov	r0, r4
 800d644:	f000 fd4a 	bl	800e0dc <__multadd>
 800d648:	45b8      	cmp	r8, r7
 800d64a:	ee08 0a10 	vmov	s16, r0
 800d64e:	f04f 0300 	mov.w	r3, #0
 800d652:	f04f 020a 	mov.w	r2, #10
 800d656:	4641      	mov	r1, r8
 800d658:	4620      	mov	r0, r4
 800d65a:	d106      	bne.n	800d66a <_dtoa_r+0xb0a>
 800d65c:	f000 fd3e 	bl	800e0dc <__multadd>
 800d660:	4680      	mov	r8, r0
 800d662:	4607      	mov	r7, r0
 800d664:	f109 0901 	add.w	r9, r9, #1
 800d668:	e772      	b.n	800d550 <_dtoa_r+0x9f0>
 800d66a:	f000 fd37 	bl	800e0dc <__multadd>
 800d66e:	4639      	mov	r1, r7
 800d670:	4680      	mov	r8, r0
 800d672:	2300      	movs	r3, #0
 800d674:	220a      	movs	r2, #10
 800d676:	4620      	mov	r0, r4
 800d678:	f000 fd30 	bl	800e0dc <__multadd>
 800d67c:	4607      	mov	r7, r0
 800d67e:	e7f1      	b.n	800d664 <_dtoa_r+0xb04>
 800d680:	9b03      	ldr	r3, [sp, #12]
 800d682:	9302      	str	r3, [sp, #8]
 800d684:	9d01      	ldr	r5, [sp, #4]
 800d686:	ee18 0a10 	vmov	r0, s16
 800d68a:	4631      	mov	r1, r6
 800d68c:	f7ff f9da 	bl	800ca44 <quorem>
 800d690:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d694:	9b01      	ldr	r3, [sp, #4]
 800d696:	f805 ab01 	strb.w	sl, [r5], #1
 800d69a:	1aea      	subs	r2, r5, r3
 800d69c:	9b02      	ldr	r3, [sp, #8]
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	dd09      	ble.n	800d6b6 <_dtoa_r+0xb56>
 800d6a2:	ee18 1a10 	vmov	r1, s16
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	220a      	movs	r2, #10
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	f000 fd16 	bl	800e0dc <__multadd>
 800d6b0:	ee08 0a10 	vmov	s16, r0
 800d6b4:	e7e7      	b.n	800d686 <_dtoa_r+0xb26>
 800d6b6:	9b02      	ldr	r3, [sp, #8]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	bfc8      	it	gt
 800d6bc:	461d      	movgt	r5, r3
 800d6be:	9b01      	ldr	r3, [sp, #4]
 800d6c0:	bfd8      	it	le
 800d6c2:	2501      	movle	r5, #1
 800d6c4:	441d      	add	r5, r3
 800d6c6:	f04f 0800 	mov.w	r8, #0
 800d6ca:	ee18 1a10 	vmov	r1, s16
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f000 fefd 	bl	800e4d0 <__lshift>
 800d6d6:	4631      	mov	r1, r6
 800d6d8:	ee08 0a10 	vmov	s16, r0
 800d6dc:	f000 ff68 	bl	800e5b0 <__mcmp>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	dc91      	bgt.n	800d608 <_dtoa_r+0xaa8>
 800d6e4:	d102      	bne.n	800d6ec <_dtoa_r+0xb8c>
 800d6e6:	f01a 0f01 	tst.w	sl, #1
 800d6ea:	d18d      	bne.n	800d608 <_dtoa_r+0xaa8>
 800d6ec:	462b      	mov	r3, r5
 800d6ee:	461d      	mov	r5, r3
 800d6f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6f4:	2a30      	cmp	r2, #48	; 0x30
 800d6f6:	d0fa      	beq.n	800d6ee <_dtoa_r+0xb8e>
 800d6f8:	e6d7      	b.n	800d4aa <_dtoa_r+0x94a>
 800d6fa:	9a01      	ldr	r2, [sp, #4]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d184      	bne.n	800d60a <_dtoa_r+0xaaa>
 800d700:	9b00      	ldr	r3, [sp, #0]
 800d702:	3301      	adds	r3, #1
 800d704:	9300      	str	r3, [sp, #0]
 800d706:	2331      	movs	r3, #49	; 0x31
 800d708:	7013      	strb	r3, [r2, #0]
 800d70a:	e6ce      	b.n	800d4aa <_dtoa_r+0x94a>
 800d70c:	4b09      	ldr	r3, [pc, #36]	; (800d734 <_dtoa_r+0xbd4>)
 800d70e:	f7ff ba95 	b.w	800cc3c <_dtoa_r+0xdc>
 800d712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d714:	2b00      	cmp	r3, #0
 800d716:	f47f aa6e 	bne.w	800cbf6 <_dtoa_r+0x96>
 800d71a:	4b07      	ldr	r3, [pc, #28]	; (800d738 <_dtoa_r+0xbd8>)
 800d71c:	f7ff ba8e 	b.w	800cc3c <_dtoa_r+0xdc>
 800d720:	9b02      	ldr	r3, [sp, #8]
 800d722:	2b00      	cmp	r3, #0
 800d724:	dcae      	bgt.n	800d684 <_dtoa_r+0xb24>
 800d726:	9b06      	ldr	r3, [sp, #24]
 800d728:	2b02      	cmp	r3, #2
 800d72a:	f73f aea8 	bgt.w	800d47e <_dtoa_r+0x91e>
 800d72e:	e7a9      	b.n	800d684 <_dtoa_r+0xb24>
 800d730:	08011fd8 	.word	0x08011fd8
 800d734:	08011ddc 	.word	0x08011ddc
 800d738:	08011f59 	.word	0x08011f59

0800d73c <__sflush_r>:
 800d73c:	898a      	ldrh	r2, [r1, #12]
 800d73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d742:	4605      	mov	r5, r0
 800d744:	0710      	lsls	r0, r2, #28
 800d746:	460c      	mov	r4, r1
 800d748:	d458      	bmi.n	800d7fc <__sflush_r+0xc0>
 800d74a:	684b      	ldr	r3, [r1, #4]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	dc05      	bgt.n	800d75c <__sflush_r+0x20>
 800d750:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d752:	2b00      	cmp	r3, #0
 800d754:	dc02      	bgt.n	800d75c <__sflush_r+0x20>
 800d756:	2000      	movs	r0, #0
 800d758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d75c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d75e:	2e00      	cmp	r6, #0
 800d760:	d0f9      	beq.n	800d756 <__sflush_r+0x1a>
 800d762:	2300      	movs	r3, #0
 800d764:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d768:	682f      	ldr	r7, [r5, #0]
 800d76a:	602b      	str	r3, [r5, #0]
 800d76c:	d032      	beq.n	800d7d4 <__sflush_r+0x98>
 800d76e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d770:	89a3      	ldrh	r3, [r4, #12]
 800d772:	075a      	lsls	r2, r3, #29
 800d774:	d505      	bpl.n	800d782 <__sflush_r+0x46>
 800d776:	6863      	ldr	r3, [r4, #4]
 800d778:	1ac0      	subs	r0, r0, r3
 800d77a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d77c:	b10b      	cbz	r3, 800d782 <__sflush_r+0x46>
 800d77e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d780:	1ac0      	subs	r0, r0, r3
 800d782:	2300      	movs	r3, #0
 800d784:	4602      	mov	r2, r0
 800d786:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d788:	6a21      	ldr	r1, [r4, #32]
 800d78a:	4628      	mov	r0, r5
 800d78c:	47b0      	blx	r6
 800d78e:	1c43      	adds	r3, r0, #1
 800d790:	89a3      	ldrh	r3, [r4, #12]
 800d792:	d106      	bne.n	800d7a2 <__sflush_r+0x66>
 800d794:	6829      	ldr	r1, [r5, #0]
 800d796:	291d      	cmp	r1, #29
 800d798:	d82c      	bhi.n	800d7f4 <__sflush_r+0xb8>
 800d79a:	4a2a      	ldr	r2, [pc, #168]	; (800d844 <__sflush_r+0x108>)
 800d79c:	40ca      	lsrs	r2, r1
 800d79e:	07d6      	lsls	r6, r2, #31
 800d7a0:	d528      	bpl.n	800d7f4 <__sflush_r+0xb8>
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	6062      	str	r2, [r4, #4]
 800d7a6:	04d9      	lsls	r1, r3, #19
 800d7a8:	6922      	ldr	r2, [r4, #16]
 800d7aa:	6022      	str	r2, [r4, #0]
 800d7ac:	d504      	bpl.n	800d7b8 <__sflush_r+0x7c>
 800d7ae:	1c42      	adds	r2, r0, #1
 800d7b0:	d101      	bne.n	800d7b6 <__sflush_r+0x7a>
 800d7b2:	682b      	ldr	r3, [r5, #0]
 800d7b4:	b903      	cbnz	r3, 800d7b8 <__sflush_r+0x7c>
 800d7b6:	6560      	str	r0, [r4, #84]	; 0x54
 800d7b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7ba:	602f      	str	r7, [r5, #0]
 800d7bc:	2900      	cmp	r1, #0
 800d7be:	d0ca      	beq.n	800d756 <__sflush_r+0x1a>
 800d7c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7c4:	4299      	cmp	r1, r3
 800d7c6:	d002      	beq.n	800d7ce <__sflush_r+0x92>
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	f001 f8fd 	bl	800e9c8 <_free_r>
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	6360      	str	r0, [r4, #52]	; 0x34
 800d7d2:	e7c1      	b.n	800d758 <__sflush_r+0x1c>
 800d7d4:	6a21      	ldr	r1, [r4, #32]
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	4628      	mov	r0, r5
 800d7da:	47b0      	blx	r6
 800d7dc:	1c41      	adds	r1, r0, #1
 800d7de:	d1c7      	bne.n	800d770 <__sflush_r+0x34>
 800d7e0:	682b      	ldr	r3, [r5, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d0c4      	beq.n	800d770 <__sflush_r+0x34>
 800d7e6:	2b1d      	cmp	r3, #29
 800d7e8:	d001      	beq.n	800d7ee <__sflush_r+0xb2>
 800d7ea:	2b16      	cmp	r3, #22
 800d7ec:	d101      	bne.n	800d7f2 <__sflush_r+0xb6>
 800d7ee:	602f      	str	r7, [r5, #0]
 800d7f0:	e7b1      	b.n	800d756 <__sflush_r+0x1a>
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7f8:	81a3      	strh	r3, [r4, #12]
 800d7fa:	e7ad      	b.n	800d758 <__sflush_r+0x1c>
 800d7fc:	690f      	ldr	r7, [r1, #16]
 800d7fe:	2f00      	cmp	r7, #0
 800d800:	d0a9      	beq.n	800d756 <__sflush_r+0x1a>
 800d802:	0793      	lsls	r3, r2, #30
 800d804:	680e      	ldr	r6, [r1, #0]
 800d806:	bf08      	it	eq
 800d808:	694b      	ldreq	r3, [r1, #20]
 800d80a:	600f      	str	r7, [r1, #0]
 800d80c:	bf18      	it	ne
 800d80e:	2300      	movne	r3, #0
 800d810:	eba6 0807 	sub.w	r8, r6, r7
 800d814:	608b      	str	r3, [r1, #8]
 800d816:	f1b8 0f00 	cmp.w	r8, #0
 800d81a:	dd9c      	ble.n	800d756 <__sflush_r+0x1a>
 800d81c:	6a21      	ldr	r1, [r4, #32]
 800d81e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d820:	4643      	mov	r3, r8
 800d822:	463a      	mov	r2, r7
 800d824:	4628      	mov	r0, r5
 800d826:	47b0      	blx	r6
 800d828:	2800      	cmp	r0, #0
 800d82a:	dc06      	bgt.n	800d83a <__sflush_r+0xfe>
 800d82c:	89a3      	ldrh	r3, [r4, #12]
 800d82e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d832:	81a3      	strh	r3, [r4, #12]
 800d834:	f04f 30ff 	mov.w	r0, #4294967295
 800d838:	e78e      	b.n	800d758 <__sflush_r+0x1c>
 800d83a:	4407      	add	r7, r0
 800d83c:	eba8 0800 	sub.w	r8, r8, r0
 800d840:	e7e9      	b.n	800d816 <__sflush_r+0xda>
 800d842:	bf00      	nop
 800d844:	20400001 	.word	0x20400001

0800d848 <_fflush_r>:
 800d848:	b538      	push	{r3, r4, r5, lr}
 800d84a:	690b      	ldr	r3, [r1, #16]
 800d84c:	4605      	mov	r5, r0
 800d84e:	460c      	mov	r4, r1
 800d850:	b913      	cbnz	r3, 800d858 <_fflush_r+0x10>
 800d852:	2500      	movs	r5, #0
 800d854:	4628      	mov	r0, r5
 800d856:	bd38      	pop	{r3, r4, r5, pc}
 800d858:	b118      	cbz	r0, 800d862 <_fflush_r+0x1a>
 800d85a:	6983      	ldr	r3, [r0, #24]
 800d85c:	b90b      	cbnz	r3, 800d862 <_fflush_r+0x1a>
 800d85e:	f7fd f955 	bl	800ab0c <__sinit>
 800d862:	4b14      	ldr	r3, [pc, #80]	; (800d8b4 <_fflush_r+0x6c>)
 800d864:	429c      	cmp	r4, r3
 800d866:	d11b      	bne.n	800d8a0 <_fflush_r+0x58>
 800d868:	686c      	ldr	r4, [r5, #4]
 800d86a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d0ef      	beq.n	800d852 <_fflush_r+0xa>
 800d872:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d874:	07d0      	lsls	r0, r2, #31
 800d876:	d404      	bmi.n	800d882 <_fflush_r+0x3a>
 800d878:	0599      	lsls	r1, r3, #22
 800d87a:	d402      	bmi.n	800d882 <_fflush_r+0x3a>
 800d87c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d87e:	f7fd fa08 	bl	800ac92 <__retarget_lock_acquire_recursive>
 800d882:	4628      	mov	r0, r5
 800d884:	4621      	mov	r1, r4
 800d886:	f7ff ff59 	bl	800d73c <__sflush_r>
 800d88a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d88c:	07da      	lsls	r2, r3, #31
 800d88e:	4605      	mov	r5, r0
 800d890:	d4e0      	bmi.n	800d854 <_fflush_r+0xc>
 800d892:	89a3      	ldrh	r3, [r4, #12]
 800d894:	059b      	lsls	r3, r3, #22
 800d896:	d4dd      	bmi.n	800d854 <_fflush_r+0xc>
 800d898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d89a:	f7fd f9fb 	bl	800ac94 <__retarget_lock_release_recursive>
 800d89e:	e7d9      	b.n	800d854 <_fflush_r+0xc>
 800d8a0:	4b05      	ldr	r3, [pc, #20]	; (800d8b8 <_fflush_r+0x70>)
 800d8a2:	429c      	cmp	r4, r3
 800d8a4:	d101      	bne.n	800d8aa <_fflush_r+0x62>
 800d8a6:	68ac      	ldr	r4, [r5, #8]
 800d8a8:	e7df      	b.n	800d86a <_fflush_r+0x22>
 800d8aa:	4b04      	ldr	r3, [pc, #16]	; (800d8bc <_fflush_r+0x74>)
 800d8ac:	429c      	cmp	r4, r3
 800d8ae:	bf08      	it	eq
 800d8b0:	68ec      	ldreq	r4, [r5, #12]
 800d8b2:	e7da      	b.n	800d86a <_fflush_r+0x22>
 800d8b4:	08011d88 	.word	0x08011d88
 800d8b8:	08011da8 	.word	0x08011da8
 800d8bc:	08011d68 	.word	0x08011d68

0800d8c0 <rshift>:
 800d8c0:	6903      	ldr	r3, [r0, #16]
 800d8c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d8c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d8ce:	f100 0414 	add.w	r4, r0, #20
 800d8d2:	dd45      	ble.n	800d960 <rshift+0xa0>
 800d8d4:	f011 011f 	ands.w	r1, r1, #31
 800d8d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d8dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d8e0:	d10c      	bne.n	800d8fc <rshift+0x3c>
 800d8e2:	f100 0710 	add.w	r7, r0, #16
 800d8e6:	4629      	mov	r1, r5
 800d8e8:	42b1      	cmp	r1, r6
 800d8ea:	d334      	bcc.n	800d956 <rshift+0x96>
 800d8ec:	1a9b      	subs	r3, r3, r2
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	1eea      	subs	r2, r5, #3
 800d8f2:	4296      	cmp	r6, r2
 800d8f4:	bf38      	it	cc
 800d8f6:	2300      	movcc	r3, #0
 800d8f8:	4423      	add	r3, r4
 800d8fa:	e015      	b.n	800d928 <rshift+0x68>
 800d8fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d900:	f1c1 0820 	rsb	r8, r1, #32
 800d904:	40cf      	lsrs	r7, r1
 800d906:	f105 0e04 	add.w	lr, r5, #4
 800d90a:	46a1      	mov	r9, r4
 800d90c:	4576      	cmp	r6, lr
 800d90e:	46f4      	mov	ip, lr
 800d910:	d815      	bhi.n	800d93e <rshift+0x7e>
 800d912:	1a9a      	subs	r2, r3, r2
 800d914:	0092      	lsls	r2, r2, #2
 800d916:	3a04      	subs	r2, #4
 800d918:	3501      	adds	r5, #1
 800d91a:	42ae      	cmp	r6, r5
 800d91c:	bf38      	it	cc
 800d91e:	2200      	movcc	r2, #0
 800d920:	18a3      	adds	r3, r4, r2
 800d922:	50a7      	str	r7, [r4, r2]
 800d924:	b107      	cbz	r7, 800d928 <rshift+0x68>
 800d926:	3304      	adds	r3, #4
 800d928:	1b1a      	subs	r2, r3, r4
 800d92a:	42a3      	cmp	r3, r4
 800d92c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d930:	bf08      	it	eq
 800d932:	2300      	moveq	r3, #0
 800d934:	6102      	str	r2, [r0, #16]
 800d936:	bf08      	it	eq
 800d938:	6143      	streq	r3, [r0, #20]
 800d93a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d93e:	f8dc c000 	ldr.w	ip, [ip]
 800d942:	fa0c fc08 	lsl.w	ip, ip, r8
 800d946:	ea4c 0707 	orr.w	r7, ip, r7
 800d94a:	f849 7b04 	str.w	r7, [r9], #4
 800d94e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d952:	40cf      	lsrs	r7, r1
 800d954:	e7da      	b.n	800d90c <rshift+0x4c>
 800d956:	f851 cb04 	ldr.w	ip, [r1], #4
 800d95a:	f847 cf04 	str.w	ip, [r7, #4]!
 800d95e:	e7c3      	b.n	800d8e8 <rshift+0x28>
 800d960:	4623      	mov	r3, r4
 800d962:	e7e1      	b.n	800d928 <rshift+0x68>

0800d964 <__hexdig_fun>:
 800d964:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d968:	2b09      	cmp	r3, #9
 800d96a:	d802      	bhi.n	800d972 <__hexdig_fun+0xe>
 800d96c:	3820      	subs	r0, #32
 800d96e:	b2c0      	uxtb	r0, r0
 800d970:	4770      	bx	lr
 800d972:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d976:	2b05      	cmp	r3, #5
 800d978:	d801      	bhi.n	800d97e <__hexdig_fun+0x1a>
 800d97a:	3847      	subs	r0, #71	; 0x47
 800d97c:	e7f7      	b.n	800d96e <__hexdig_fun+0xa>
 800d97e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d982:	2b05      	cmp	r3, #5
 800d984:	d801      	bhi.n	800d98a <__hexdig_fun+0x26>
 800d986:	3827      	subs	r0, #39	; 0x27
 800d988:	e7f1      	b.n	800d96e <__hexdig_fun+0xa>
 800d98a:	2000      	movs	r0, #0
 800d98c:	4770      	bx	lr
	...

0800d990 <__gethex>:
 800d990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d994:	ed2d 8b02 	vpush	{d8}
 800d998:	b089      	sub	sp, #36	; 0x24
 800d99a:	ee08 0a10 	vmov	s16, r0
 800d99e:	9304      	str	r3, [sp, #16]
 800d9a0:	4bb4      	ldr	r3, [pc, #720]	; (800dc74 <__gethex+0x2e4>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	9301      	str	r3, [sp, #4]
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	468b      	mov	fp, r1
 800d9aa:	4690      	mov	r8, r2
 800d9ac:	f7f2 fc18 	bl	80001e0 <strlen>
 800d9b0:	9b01      	ldr	r3, [sp, #4]
 800d9b2:	f8db 2000 	ldr.w	r2, [fp]
 800d9b6:	4403      	add	r3, r0
 800d9b8:	4682      	mov	sl, r0
 800d9ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d9be:	9305      	str	r3, [sp, #20]
 800d9c0:	1c93      	adds	r3, r2, #2
 800d9c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d9c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d9ca:	32fe      	adds	r2, #254	; 0xfe
 800d9cc:	18d1      	adds	r1, r2, r3
 800d9ce:	461f      	mov	r7, r3
 800d9d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d9d4:	9100      	str	r1, [sp, #0]
 800d9d6:	2830      	cmp	r0, #48	; 0x30
 800d9d8:	d0f8      	beq.n	800d9cc <__gethex+0x3c>
 800d9da:	f7ff ffc3 	bl	800d964 <__hexdig_fun>
 800d9de:	4604      	mov	r4, r0
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	d13a      	bne.n	800da5a <__gethex+0xca>
 800d9e4:	9901      	ldr	r1, [sp, #4]
 800d9e6:	4652      	mov	r2, sl
 800d9e8:	4638      	mov	r0, r7
 800d9ea:	f001 f9b1 	bl	800ed50 <strncmp>
 800d9ee:	4605      	mov	r5, r0
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	d168      	bne.n	800dac6 <__gethex+0x136>
 800d9f4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d9f8:	eb07 060a 	add.w	r6, r7, sl
 800d9fc:	f7ff ffb2 	bl	800d964 <__hexdig_fun>
 800da00:	2800      	cmp	r0, #0
 800da02:	d062      	beq.n	800daca <__gethex+0x13a>
 800da04:	4633      	mov	r3, r6
 800da06:	7818      	ldrb	r0, [r3, #0]
 800da08:	2830      	cmp	r0, #48	; 0x30
 800da0a:	461f      	mov	r7, r3
 800da0c:	f103 0301 	add.w	r3, r3, #1
 800da10:	d0f9      	beq.n	800da06 <__gethex+0x76>
 800da12:	f7ff ffa7 	bl	800d964 <__hexdig_fun>
 800da16:	2301      	movs	r3, #1
 800da18:	fab0 f480 	clz	r4, r0
 800da1c:	0964      	lsrs	r4, r4, #5
 800da1e:	4635      	mov	r5, r6
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	463a      	mov	r2, r7
 800da24:	4616      	mov	r6, r2
 800da26:	3201      	adds	r2, #1
 800da28:	7830      	ldrb	r0, [r6, #0]
 800da2a:	f7ff ff9b 	bl	800d964 <__hexdig_fun>
 800da2e:	2800      	cmp	r0, #0
 800da30:	d1f8      	bne.n	800da24 <__gethex+0x94>
 800da32:	9901      	ldr	r1, [sp, #4]
 800da34:	4652      	mov	r2, sl
 800da36:	4630      	mov	r0, r6
 800da38:	f001 f98a 	bl	800ed50 <strncmp>
 800da3c:	b980      	cbnz	r0, 800da60 <__gethex+0xd0>
 800da3e:	b94d      	cbnz	r5, 800da54 <__gethex+0xc4>
 800da40:	eb06 050a 	add.w	r5, r6, sl
 800da44:	462a      	mov	r2, r5
 800da46:	4616      	mov	r6, r2
 800da48:	3201      	adds	r2, #1
 800da4a:	7830      	ldrb	r0, [r6, #0]
 800da4c:	f7ff ff8a 	bl	800d964 <__hexdig_fun>
 800da50:	2800      	cmp	r0, #0
 800da52:	d1f8      	bne.n	800da46 <__gethex+0xb6>
 800da54:	1bad      	subs	r5, r5, r6
 800da56:	00ad      	lsls	r5, r5, #2
 800da58:	e004      	b.n	800da64 <__gethex+0xd4>
 800da5a:	2400      	movs	r4, #0
 800da5c:	4625      	mov	r5, r4
 800da5e:	e7e0      	b.n	800da22 <__gethex+0x92>
 800da60:	2d00      	cmp	r5, #0
 800da62:	d1f7      	bne.n	800da54 <__gethex+0xc4>
 800da64:	7833      	ldrb	r3, [r6, #0]
 800da66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800da6a:	2b50      	cmp	r3, #80	; 0x50
 800da6c:	d13b      	bne.n	800dae6 <__gethex+0x156>
 800da6e:	7873      	ldrb	r3, [r6, #1]
 800da70:	2b2b      	cmp	r3, #43	; 0x2b
 800da72:	d02c      	beq.n	800dace <__gethex+0x13e>
 800da74:	2b2d      	cmp	r3, #45	; 0x2d
 800da76:	d02e      	beq.n	800dad6 <__gethex+0x146>
 800da78:	1c71      	adds	r1, r6, #1
 800da7a:	f04f 0900 	mov.w	r9, #0
 800da7e:	7808      	ldrb	r0, [r1, #0]
 800da80:	f7ff ff70 	bl	800d964 <__hexdig_fun>
 800da84:	1e43      	subs	r3, r0, #1
 800da86:	b2db      	uxtb	r3, r3
 800da88:	2b18      	cmp	r3, #24
 800da8a:	d82c      	bhi.n	800dae6 <__gethex+0x156>
 800da8c:	f1a0 0210 	sub.w	r2, r0, #16
 800da90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800da94:	f7ff ff66 	bl	800d964 <__hexdig_fun>
 800da98:	1e43      	subs	r3, r0, #1
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	2b18      	cmp	r3, #24
 800da9e:	d91d      	bls.n	800dadc <__gethex+0x14c>
 800daa0:	f1b9 0f00 	cmp.w	r9, #0
 800daa4:	d000      	beq.n	800daa8 <__gethex+0x118>
 800daa6:	4252      	negs	r2, r2
 800daa8:	4415      	add	r5, r2
 800daaa:	f8cb 1000 	str.w	r1, [fp]
 800daae:	b1e4      	cbz	r4, 800daea <__gethex+0x15a>
 800dab0:	9b00      	ldr	r3, [sp, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	bf14      	ite	ne
 800dab6:	2700      	movne	r7, #0
 800dab8:	2706      	moveq	r7, #6
 800daba:	4638      	mov	r0, r7
 800dabc:	b009      	add	sp, #36	; 0x24
 800dabe:	ecbd 8b02 	vpop	{d8}
 800dac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac6:	463e      	mov	r6, r7
 800dac8:	4625      	mov	r5, r4
 800daca:	2401      	movs	r4, #1
 800dacc:	e7ca      	b.n	800da64 <__gethex+0xd4>
 800dace:	f04f 0900 	mov.w	r9, #0
 800dad2:	1cb1      	adds	r1, r6, #2
 800dad4:	e7d3      	b.n	800da7e <__gethex+0xee>
 800dad6:	f04f 0901 	mov.w	r9, #1
 800dada:	e7fa      	b.n	800dad2 <__gethex+0x142>
 800dadc:	230a      	movs	r3, #10
 800dade:	fb03 0202 	mla	r2, r3, r2, r0
 800dae2:	3a10      	subs	r2, #16
 800dae4:	e7d4      	b.n	800da90 <__gethex+0x100>
 800dae6:	4631      	mov	r1, r6
 800dae8:	e7df      	b.n	800daaa <__gethex+0x11a>
 800daea:	1bf3      	subs	r3, r6, r7
 800daec:	3b01      	subs	r3, #1
 800daee:	4621      	mov	r1, r4
 800daf0:	2b07      	cmp	r3, #7
 800daf2:	dc0b      	bgt.n	800db0c <__gethex+0x17c>
 800daf4:	ee18 0a10 	vmov	r0, s16
 800daf8:	f000 fa8e 	bl	800e018 <_Balloc>
 800dafc:	4604      	mov	r4, r0
 800dafe:	b940      	cbnz	r0, 800db12 <__gethex+0x182>
 800db00:	4b5d      	ldr	r3, [pc, #372]	; (800dc78 <__gethex+0x2e8>)
 800db02:	4602      	mov	r2, r0
 800db04:	21de      	movs	r1, #222	; 0xde
 800db06:	485d      	ldr	r0, [pc, #372]	; (800dc7c <__gethex+0x2ec>)
 800db08:	f001 f944 	bl	800ed94 <__assert_func>
 800db0c:	3101      	adds	r1, #1
 800db0e:	105b      	asrs	r3, r3, #1
 800db10:	e7ee      	b.n	800daf0 <__gethex+0x160>
 800db12:	f100 0914 	add.w	r9, r0, #20
 800db16:	f04f 0b00 	mov.w	fp, #0
 800db1a:	f1ca 0301 	rsb	r3, sl, #1
 800db1e:	f8cd 9008 	str.w	r9, [sp, #8]
 800db22:	f8cd b000 	str.w	fp, [sp]
 800db26:	9306      	str	r3, [sp, #24]
 800db28:	42b7      	cmp	r7, r6
 800db2a:	d340      	bcc.n	800dbae <__gethex+0x21e>
 800db2c:	9802      	ldr	r0, [sp, #8]
 800db2e:	9b00      	ldr	r3, [sp, #0]
 800db30:	f840 3b04 	str.w	r3, [r0], #4
 800db34:	eba0 0009 	sub.w	r0, r0, r9
 800db38:	1080      	asrs	r0, r0, #2
 800db3a:	0146      	lsls	r6, r0, #5
 800db3c:	6120      	str	r0, [r4, #16]
 800db3e:	4618      	mov	r0, r3
 800db40:	f000 fb5c 	bl	800e1fc <__hi0bits>
 800db44:	1a30      	subs	r0, r6, r0
 800db46:	f8d8 6000 	ldr.w	r6, [r8]
 800db4a:	42b0      	cmp	r0, r6
 800db4c:	dd63      	ble.n	800dc16 <__gethex+0x286>
 800db4e:	1b87      	subs	r7, r0, r6
 800db50:	4639      	mov	r1, r7
 800db52:	4620      	mov	r0, r4
 800db54:	f000 ff00 	bl	800e958 <__any_on>
 800db58:	4682      	mov	sl, r0
 800db5a:	b1a8      	cbz	r0, 800db88 <__gethex+0x1f8>
 800db5c:	1e7b      	subs	r3, r7, #1
 800db5e:	1159      	asrs	r1, r3, #5
 800db60:	f003 021f 	and.w	r2, r3, #31
 800db64:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800db68:	f04f 0a01 	mov.w	sl, #1
 800db6c:	fa0a f202 	lsl.w	r2, sl, r2
 800db70:	420a      	tst	r2, r1
 800db72:	d009      	beq.n	800db88 <__gethex+0x1f8>
 800db74:	4553      	cmp	r3, sl
 800db76:	dd05      	ble.n	800db84 <__gethex+0x1f4>
 800db78:	1eb9      	subs	r1, r7, #2
 800db7a:	4620      	mov	r0, r4
 800db7c:	f000 feec 	bl	800e958 <__any_on>
 800db80:	2800      	cmp	r0, #0
 800db82:	d145      	bne.n	800dc10 <__gethex+0x280>
 800db84:	f04f 0a02 	mov.w	sl, #2
 800db88:	4639      	mov	r1, r7
 800db8a:	4620      	mov	r0, r4
 800db8c:	f7ff fe98 	bl	800d8c0 <rshift>
 800db90:	443d      	add	r5, r7
 800db92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db96:	42ab      	cmp	r3, r5
 800db98:	da4c      	bge.n	800dc34 <__gethex+0x2a4>
 800db9a:	ee18 0a10 	vmov	r0, s16
 800db9e:	4621      	mov	r1, r4
 800dba0:	f000 fa7a 	bl	800e098 <_Bfree>
 800dba4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dba6:	2300      	movs	r3, #0
 800dba8:	6013      	str	r3, [r2, #0]
 800dbaa:	27a3      	movs	r7, #163	; 0xa3
 800dbac:	e785      	b.n	800daba <__gethex+0x12a>
 800dbae:	1e73      	subs	r3, r6, #1
 800dbb0:	9a05      	ldr	r2, [sp, #20]
 800dbb2:	9303      	str	r3, [sp, #12]
 800dbb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d019      	beq.n	800dbf0 <__gethex+0x260>
 800dbbc:	f1bb 0f20 	cmp.w	fp, #32
 800dbc0:	d107      	bne.n	800dbd2 <__gethex+0x242>
 800dbc2:	9b02      	ldr	r3, [sp, #8]
 800dbc4:	9a00      	ldr	r2, [sp, #0]
 800dbc6:	f843 2b04 	str.w	r2, [r3], #4
 800dbca:	9302      	str	r3, [sp, #8]
 800dbcc:	2300      	movs	r3, #0
 800dbce:	9300      	str	r3, [sp, #0]
 800dbd0:	469b      	mov	fp, r3
 800dbd2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dbd6:	f7ff fec5 	bl	800d964 <__hexdig_fun>
 800dbda:	9b00      	ldr	r3, [sp, #0]
 800dbdc:	f000 000f 	and.w	r0, r0, #15
 800dbe0:	fa00 f00b 	lsl.w	r0, r0, fp
 800dbe4:	4303      	orrs	r3, r0
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	f10b 0b04 	add.w	fp, fp, #4
 800dbec:	9b03      	ldr	r3, [sp, #12]
 800dbee:	e00d      	b.n	800dc0c <__gethex+0x27c>
 800dbf0:	9b03      	ldr	r3, [sp, #12]
 800dbf2:	9a06      	ldr	r2, [sp, #24]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	42bb      	cmp	r3, r7
 800dbf8:	d3e0      	bcc.n	800dbbc <__gethex+0x22c>
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	9901      	ldr	r1, [sp, #4]
 800dbfe:	9307      	str	r3, [sp, #28]
 800dc00:	4652      	mov	r2, sl
 800dc02:	f001 f8a5 	bl	800ed50 <strncmp>
 800dc06:	9b07      	ldr	r3, [sp, #28]
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	d1d7      	bne.n	800dbbc <__gethex+0x22c>
 800dc0c:	461e      	mov	r6, r3
 800dc0e:	e78b      	b.n	800db28 <__gethex+0x198>
 800dc10:	f04f 0a03 	mov.w	sl, #3
 800dc14:	e7b8      	b.n	800db88 <__gethex+0x1f8>
 800dc16:	da0a      	bge.n	800dc2e <__gethex+0x29e>
 800dc18:	1a37      	subs	r7, r6, r0
 800dc1a:	4621      	mov	r1, r4
 800dc1c:	ee18 0a10 	vmov	r0, s16
 800dc20:	463a      	mov	r2, r7
 800dc22:	f000 fc55 	bl	800e4d0 <__lshift>
 800dc26:	1bed      	subs	r5, r5, r7
 800dc28:	4604      	mov	r4, r0
 800dc2a:	f100 0914 	add.w	r9, r0, #20
 800dc2e:	f04f 0a00 	mov.w	sl, #0
 800dc32:	e7ae      	b.n	800db92 <__gethex+0x202>
 800dc34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dc38:	42a8      	cmp	r0, r5
 800dc3a:	dd72      	ble.n	800dd22 <__gethex+0x392>
 800dc3c:	1b45      	subs	r5, r0, r5
 800dc3e:	42ae      	cmp	r6, r5
 800dc40:	dc36      	bgt.n	800dcb0 <__gethex+0x320>
 800dc42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc46:	2b02      	cmp	r3, #2
 800dc48:	d02a      	beq.n	800dca0 <__gethex+0x310>
 800dc4a:	2b03      	cmp	r3, #3
 800dc4c:	d02c      	beq.n	800dca8 <__gethex+0x318>
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d11c      	bne.n	800dc8c <__gethex+0x2fc>
 800dc52:	42ae      	cmp	r6, r5
 800dc54:	d11a      	bne.n	800dc8c <__gethex+0x2fc>
 800dc56:	2e01      	cmp	r6, #1
 800dc58:	d112      	bne.n	800dc80 <__gethex+0x2f0>
 800dc5a:	9a04      	ldr	r2, [sp, #16]
 800dc5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc60:	6013      	str	r3, [r2, #0]
 800dc62:	2301      	movs	r3, #1
 800dc64:	6123      	str	r3, [r4, #16]
 800dc66:	f8c9 3000 	str.w	r3, [r9]
 800dc6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc6c:	2762      	movs	r7, #98	; 0x62
 800dc6e:	601c      	str	r4, [r3, #0]
 800dc70:	e723      	b.n	800daba <__gethex+0x12a>
 800dc72:	bf00      	nop
 800dc74:	08012050 	.word	0x08012050
 800dc78:	08011fd8 	.word	0x08011fd8
 800dc7c:	08011fe9 	.word	0x08011fe9
 800dc80:	1e71      	subs	r1, r6, #1
 800dc82:	4620      	mov	r0, r4
 800dc84:	f000 fe68 	bl	800e958 <__any_on>
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	d1e6      	bne.n	800dc5a <__gethex+0x2ca>
 800dc8c:	ee18 0a10 	vmov	r0, s16
 800dc90:	4621      	mov	r1, r4
 800dc92:	f000 fa01 	bl	800e098 <_Bfree>
 800dc96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dc98:	2300      	movs	r3, #0
 800dc9a:	6013      	str	r3, [r2, #0]
 800dc9c:	2750      	movs	r7, #80	; 0x50
 800dc9e:	e70c      	b.n	800daba <__gethex+0x12a>
 800dca0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d1f2      	bne.n	800dc8c <__gethex+0x2fc>
 800dca6:	e7d8      	b.n	800dc5a <__gethex+0x2ca>
 800dca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d1d5      	bne.n	800dc5a <__gethex+0x2ca>
 800dcae:	e7ed      	b.n	800dc8c <__gethex+0x2fc>
 800dcb0:	1e6f      	subs	r7, r5, #1
 800dcb2:	f1ba 0f00 	cmp.w	sl, #0
 800dcb6:	d131      	bne.n	800dd1c <__gethex+0x38c>
 800dcb8:	b127      	cbz	r7, 800dcc4 <__gethex+0x334>
 800dcba:	4639      	mov	r1, r7
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	f000 fe4b 	bl	800e958 <__any_on>
 800dcc2:	4682      	mov	sl, r0
 800dcc4:	117b      	asrs	r3, r7, #5
 800dcc6:	2101      	movs	r1, #1
 800dcc8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dccc:	f007 071f 	and.w	r7, r7, #31
 800dcd0:	fa01 f707 	lsl.w	r7, r1, r7
 800dcd4:	421f      	tst	r7, r3
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	4620      	mov	r0, r4
 800dcda:	bf18      	it	ne
 800dcdc:	f04a 0a02 	orrne.w	sl, sl, #2
 800dce0:	1b76      	subs	r6, r6, r5
 800dce2:	f7ff fded 	bl	800d8c0 <rshift>
 800dce6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dcea:	2702      	movs	r7, #2
 800dcec:	f1ba 0f00 	cmp.w	sl, #0
 800dcf0:	d048      	beq.n	800dd84 <__gethex+0x3f4>
 800dcf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	d015      	beq.n	800dd26 <__gethex+0x396>
 800dcfa:	2b03      	cmp	r3, #3
 800dcfc:	d017      	beq.n	800dd2e <__gethex+0x39e>
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d109      	bne.n	800dd16 <__gethex+0x386>
 800dd02:	f01a 0f02 	tst.w	sl, #2
 800dd06:	d006      	beq.n	800dd16 <__gethex+0x386>
 800dd08:	f8d9 0000 	ldr.w	r0, [r9]
 800dd0c:	ea4a 0a00 	orr.w	sl, sl, r0
 800dd10:	f01a 0f01 	tst.w	sl, #1
 800dd14:	d10e      	bne.n	800dd34 <__gethex+0x3a4>
 800dd16:	f047 0710 	orr.w	r7, r7, #16
 800dd1a:	e033      	b.n	800dd84 <__gethex+0x3f4>
 800dd1c:	f04f 0a01 	mov.w	sl, #1
 800dd20:	e7d0      	b.n	800dcc4 <__gethex+0x334>
 800dd22:	2701      	movs	r7, #1
 800dd24:	e7e2      	b.n	800dcec <__gethex+0x35c>
 800dd26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd28:	f1c3 0301 	rsb	r3, r3, #1
 800dd2c:	9315      	str	r3, [sp, #84]	; 0x54
 800dd2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d0f0      	beq.n	800dd16 <__gethex+0x386>
 800dd34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dd38:	f104 0314 	add.w	r3, r4, #20
 800dd3c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dd40:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dd44:	f04f 0c00 	mov.w	ip, #0
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd4e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dd52:	d01c      	beq.n	800dd8e <__gethex+0x3fe>
 800dd54:	3201      	adds	r2, #1
 800dd56:	6002      	str	r2, [r0, #0]
 800dd58:	2f02      	cmp	r7, #2
 800dd5a:	f104 0314 	add.w	r3, r4, #20
 800dd5e:	d13f      	bne.n	800dde0 <__gethex+0x450>
 800dd60:	f8d8 2000 	ldr.w	r2, [r8]
 800dd64:	3a01      	subs	r2, #1
 800dd66:	42b2      	cmp	r2, r6
 800dd68:	d10a      	bne.n	800dd80 <__gethex+0x3f0>
 800dd6a:	1171      	asrs	r1, r6, #5
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd72:	f006 061f 	and.w	r6, r6, #31
 800dd76:	fa02 f606 	lsl.w	r6, r2, r6
 800dd7a:	421e      	tst	r6, r3
 800dd7c:	bf18      	it	ne
 800dd7e:	4617      	movne	r7, r2
 800dd80:	f047 0720 	orr.w	r7, r7, #32
 800dd84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dd86:	601c      	str	r4, [r3, #0]
 800dd88:	9b04      	ldr	r3, [sp, #16]
 800dd8a:	601d      	str	r5, [r3, #0]
 800dd8c:	e695      	b.n	800daba <__gethex+0x12a>
 800dd8e:	4299      	cmp	r1, r3
 800dd90:	f843 cc04 	str.w	ip, [r3, #-4]
 800dd94:	d8d8      	bhi.n	800dd48 <__gethex+0x3b8>
 800dd96:	68a3      	ldr	r3, [r4, #8]
 800dd98:	459b      	cmp	fp, r3
 800dd9a:	db19      	blt.n	800ddd0 <__gethex+0x440>
 800dd9c:	6861      	ldr	r1, [r4, #4]
 800dd9e:	ee18 0a10 	vmov	r0, s16
 800dda2:	3101      	adds	r1, #1
 800dda4:	f000 f938 	bl	800e018 <_Balloc>
 800dda8:	4681      	mov	r9, r0
 800ddaa:	b918      	cbnz	r0, 800ddb4 <__gethex+0x424>
 800ddac:	4b1a      	ldr	r3, [pc, #104]	; (800de18 <__gethex+0x488>)
 800ddae:	4602      	mov	r2, r0
 800ddb0:	2184      	movs	r1, #132	; 0x84
 800ddb2:	e6a8      	b.n	800db06 <__gethex+0x176>
 800ddb4:	6922      	ldr	r2, [r4, #16]
 800ddb6:	3202      	adds	r2, #2
 800ddb8:	f104 010c 	add.w	r1, r4, #12
 800ddbc:	0092      	lsls	r2, r2, #2
 800ddbe:	300c      	adds	r0, #12
 800ddc0:	f7fc ff69 	bl	800ac96 <memcpy>
 800ddc4:	4621      	mov	r1, r4
 800ddc6:	ee18 0a10 	vmov	r0, s16
 800ddca:	f000 f965 	bl	800e098 <_Bfree>
 800ddce:	464c      	mov	r4, r9
 800ddd0:	6923      	ldr	r3, [r4, #16]
 800ddd2:	1c5a      	adds	r2, r3, #1
 800ddd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ddd8:	6122      	str	r2, [r4, #16]
 800ddda:	2201      	movs	r2, #1
 800dddc:	615a      	str	r2, [r3, #20]
 800ddde:	e7bb      	b.n	800dd58 <__gethex+0x3c8>
 800dde0:	6922      	ldr	r2, [r4, #16]
 800dde2:	455a      	cmp	r2, fp
 800dde4:	dd0b      	ble.n	800ddfe <__gethex+0x46e>
 800dde6:	2101      	movs	r1, #1
 800dde8:	4620      	mov	r0, r4
 800ddea:	f7ff fd69 	bl	800d8c0 <rshift>
 800ddee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddf2:	3501      	adds	r5, #1
 800ddf4:	42ab      	cmp	r3, r5
 800ddf6:	f6ff aed0 	blt.w	800db9a <__gethex+0x20a>
 800ddfa:	2701      	movs	r7, #1
 800ddfc:	e7c0      	b.n	800dd80 <__gethex+0x3f0>
 800ddfe:	f016 061f 	ands.w	r6, r6, #31
 800de02:	d0fa      	beq.n	800ddfa <__gethex+0x46a>
 800de04:	4453      	add	r3, sl
 800de06:	f1c6 0620 	rsb	r6, r6, #32
 800de0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800de0e:	f000 f9f5 	bl	800e1fc <__hi0bits>
 800de12:	42b0      	cmp	r0, r6
 800de14:	dbe7      	blt.n	800dde6 <__gethex+0x456>
 800de16:	e7f0      	b.n	800ddfa <__gethex+0x46a>
 800de18:	08011fd8 	.word	0x08011fd8

0800de1c <L_shift>:
 800de1c:	f1c2 0208 	rsb	r2, r2, #8
 800de20:	0092      	lsls	r2, r2, #2
 800de22:	b570      	push	{r4, r5, r6, lr}
 800de24:	f1c2 0620 	rsb	r6, r2, #32
 800de28:	6843      	ldr	r3, [r0, #4]
 800de2a:	6804      	ldr	r4, [r0, #0]
 800de2c:	fa03 f506 	lsl.w	r5, r3, r6
 800de30:	432c      	orrs	r4, r5
 800de32:	40d3      	lsrs	r3, r2
 800de34:	6004      	str	r4, [r0, #0]
 800de36:	f840 3f04 	str.w	r3, [r0, #4]!
 800de3a:	4288      	cmp	r0, r1
 800de3c:	d3f4      	bcc.n	800de28 <L_shift+0xc>
 800de3e:	bd70      	pop	{r4, r5, r6, pc}

0800de40 <__match>:
 800de40:	b530      	push	{r4, r5, lr}
 800de42:	6803      	ldr	r3, [r0, #0]
 800de44:	3301      	adds	r3, #1
 800de46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de4a:	b914      	cbnz	r4, 800de52 <__match+0x12>
 800de4c:	6003      	str	r3, [r0, #0]
 800de4e:	2001      	movs	r0, #1
 800de50:	bd30      	pop	{r4, r5, pc}
 800de52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de56:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800de5a:	2d19      	cmp	r5, #25
 800de5c:	bf98      	it	ls
 800de5e:	3220      	addls	r2, #32
 800de60:	42a2      	cmp	r2, r4
 800de62:	d0f0      	beq.n	800de46 <__match+0x6>
 800de64:	2000      	movs	r0, #0
 800de66:	e7f3      	b.n	800de50 <__match+0x10>

0800de68 <__hexnan>:
 800de68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6c:	680b      	ldr	r3, [r1, #0]
 800de6e:	115e      	asrs	r6, r3, #5
 800de70:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800de74:	f013 031f 	ands.w	r3, r3, #31
 800de78:	b087      	sub	sp, #28
 800de7a:	bf18      	it	ne
 800de7c:	3604      	addne	r6, #4
 800de7e:	2500      	movs	r5, #0
 800de80:	1f37      	subs	r7, r6, #4
 800de82:	4690      	mov	r8, r2
 800de84:	6802      	ldr	r2, [r0, #0]
 800de86:	9301      	str	r3, [sp, #4]
 800de88:	4682      	mov	sl, r0
 800de8a:	f846 5c04 	str.w	r5, [r6, #-4]
 800de8e:	46b9      	mov	r9, r7
 800de90:	463c      	mov	r4, r7
 800de92:	9502      	str	r5, [sp, #8]
 800de94:	46ab      	mov	fp, r5
 800de96:	7851      	ldrb	r1, [r2, #1]
 800de98:	1c53      	adds	r3, r2, #1
 800de9a:	9303      	str	r3, [sp, #12]
 800de9c:	b341      	cbz	r1, 800def0 <__hexnan+0x88>
 800de9e:	4608      	mov	r0, r1
 800dea0:	9205      	str	r2, [sp, #20]
 800dea2:	9104      	str	r1, [sp, #16]
 800dea4:	f7ff fd5e 	bl	800d964 <__hexdig_fun>
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d14f      	bne.n	800df4c <__hexnan+0xe4>
 800deac:	9904      	ldr	r1, [sp, #16]
 800deae:	9a05      	ldr	r2, [sp, #20]
 800deb0:	2920      	cmp	r1, #32
 800deb2:	d818      	bhi.n	800dee6 <__hexnan+0x7e>
 800deb4:	9b02      	ldr	r3, [sp, #8]
 800deb6:	459b      	cmp	fp, r3
 800deb8:	dd13      	ble.n	800dee2 <__hexnan+0x7a>
 800deba:	454c      	cmp	r4, r9
 800debc:	d206      	bcs.n	800decc <__hexnan+0x64>
 800debe:	2d07      	cmp	r5, #7
 800dec0:	dc04      	bgt.n	800decc <__hexnan+0x64>
 800dec2:	462a      	mov	r2, r5
 800dec4:	4649      	mov	r1, r9
 800dec6:	4620      	mov	r0, r4
 800dec8:	f7ff ffa8 	bl	800de1c <L_shift>
 800decc:	4544      	cmp	r4, r8
 800dece:	d950      	bls.n	800df72 <__hexnan+0x10a>
 800ded0:	2300      	movs	r3, #0
 800ded2:	f1a4 0904 	sub.w	r9, r4, #4
 800ded6:	f844 3c04 	str.w	r3, [r4, #-4]
 800deda:	f8cd b008 	str.w	fp, [sp, #8]
 800dede:	464c      	mov	r4, r9
 800dee0:	461d      	mov	r5, r3
 800dee2:	9a03      	ldr	r2, [sp, #12]
 800dee4:	e7d7      	b.n	800de96 <__hexnan+0x2e>
 800dee6:	2929      	cmp	r1, #41	; 0x29
 800dee8:	d156      	bne.n	800df98 <__hexnan+0x130>
 800deea:	3202      	adds	r2, #2
 800deec:	f8ca 2000 	str.w	r2, [sl]
 800def0:	f1bb 0f00 	cmp.w	fp, #0
 800def4:	d050      	beq.n	800df98 <__hexnan+0x130>
 800def6:	454c      	cmp	r4, r9
 800def8:	d206      	bcs.n	800df08 <__hexnan+0xa0>
 800defa:	2d07      	cmp	r5, #7
 800defc:	dc04      	bgt.n	800df08 <__hexnan+0xa0>
 800defe:	462a      	mov	r2, r5
 800df00:	4649      	mov	r1, r9
 800df02:	4620      	mov	r0, r4
 800df04:	f7ff ff8a 	bl	800de1c <L_shift>
 800df08:	4544      	cmp	r4, r8
 800df0a:	d934      	bls.n	800df76 <__hexnan+0x10e>
 800df0c:	f1a8 0204 	sub.w	r2, r8, #4
 800df10:	4623      	mov	r3, r4
 800df12:	f853 1b04 	ldr.w	r1, [r3], #4
 800df16:	f842 1f04 	str.w	r1, [r2, #4]!
 800df1a:	429f      	cmp	r7, r3
 800df1c:	d2f9      	bcs.n	800df12 <__hexnan+0xaa>
 800df1e:	1b3b      	subs	r3, r7, r4
 800df20:	f023 0303 	bic.w	r3, r3, #3
 800df24:	3304      	adds	r3, #4
 800df26:	3401      	adds	r4, #1
 800df28:	3e03      	subs	r6, #3
 800df2a:	42b4      	cmp	r4, r6
 800df2c:	bf88      	it	hi
 800df2e:	2304      	movhi	r3, #4
 800df30:	4443      	add	r3, r8
 800df32:	2200      	movs	r2, #0
 800df34:	f843 2b04 	str.w	r2, [r3], #4
 800df38:	429f      	cmp	r7, r3
 800df3a:	d2fb      	bcs.n	800df34 <__hexnan+0xcc>
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	b91b      	cbnz	r3, 800df48 <__hexnan+0xe0>
 800df40:	4547      	cmp	r7, r8
 800df42:	d127      	bne.n	800df94 <__hexnan+0x12c>
 800df44:	2301      	movs	r3, #1
 800df46:	603b      	str	r3, [r7, #0]
 800df48:	2005      	movs	r0, #5
 800df4a:	e026      	b.n	800df9a <__hexnan+0x132>
 800df4c:	3501      	adds	r5, #1
 800df4e:	2d08      	cmp	r5, #8
 800df50:	f10b 0b01 	add.w	fp, fp, #1
 800df54:	dd06      	ble.n	800df64 <__hexnan+0xfc>
 800df56:	4544      	cmp	r4, r8
 800df58:	d9c3      	bls.n	800dee2 <__hexnan+0x7a>
 800df5a:	2300      	movs	r3, #0
 800df5c:	f844 3c04 	str.w	r3, [r4, #-4]
 800df60:	2501      	movs	r5, #1
 800df62:	3c04      	subs	r4, #4
 800df64:	6822      	ldr	r2, [r4, #0]
 800df66:	f000 000f 	and.w	r0, r0, #15
 800df6a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800df6e:	6022      	str	r2, [r4, #0]
 800df70:	e7b7      	b.n	800dee2 <__hexnan+0x7a>
 800df72:	2508      	movs	r5, #8
 800df74:	e7b5      	b.n	800dee2 <__hexnan+0x7a>
 800df76:	9b01      	ldr	r3, [sp, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d0df      	beq.n	800df3c <__hexnan+0xd4>
 800df7c:	f04f 32ff 	mov.w	r2, #4294967295
 800df80:	f1c3 0320 	rsb	r3, r3, #32
 800df84:	fa22 f303 	lsr.w	r3, r2, r3
 800df88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800df8c:	401a      	ands	r2, r3
 800df8e:	f846 2c04 	str.w	r2, [r6, #-4]
 800df92:	e7d3      	b.n	800df3c <__hexnan+0xd4>
 800df94:	3f04      	subs	r7, #4
 800df96:	e7d1      	b.n	800df3c <__hexnan+0xd4>
 800df98:	2004      	movs	r0, #4
 800df9a:	b007      	add	sp, #28
 800df9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfa0 <_localeconv_r>:
 800dfa0:	4800      	ldr	r0, [pc, #0]	; (800dfa4 <_localeconv_r+0x4>)
 800dfa2:	4770      	bx	lr
 800dfa4:	20000190 	.word	0x20000190

0800dfa8 <_lseek_r>:
 800dfa8:	b538      	push	{r3, r4, r5, lr}
 800dfaa:	4d07      	ldr	r5, [pc, #28]	; (800dfc8 <_lseek_r+0x20>)
 800dfac:	4604      	mov	r4, r0
 800dfae:	4608      	mov	r0, r1
 800dfb0:	4611      	mov	r1, r2
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	602a      	str	r2, [r5, #0]
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	f7f4 f904 	bl	80021c4 <_lseek>
 800dfbc:	1c43      	adds	r3, r0, #1
 800dfbe:	d102      	bne.n	800dfc6 <_lseek_r+0x1e>
 800dfc0:	682b      	ldr	r3, [r5, #0]
 800dfc2:	b103      	cbz	r3, 800dfc6 <_lseek_r+0x1e>
 800dfc4:	6023      	str	r3, [r4, #0]
 800dfc6:	bd38      	pop	{r3, r4, r5, pc}
 800dfc8:	20004f44 	.word	0x20004f44

0800dfcc <malloc>:
 800dfcc:	4b02      	ldr	r3, [pc, #8]	; (800dfd8 <malloc+0xc>)
 800dfce:	4601      	mov	r1, r0
 800dfd0:	6818      	ldr	r0, [r3, #0]
 800dfd2:	f7fc be97 	b.w	800ad04 <_malloc_r>
 800dfd6:	bf00      	nop
 800dfd8:	20000038 	.word	0x20000038

0800dfdc <__ascii_mbtowc>:
 800dfdc:	b082      	sub	sp, #8
 800dfde:	b901      	cbnz	r1, 800dfe2 <__ascii_mbtowc+0x6>
 800dfe0:	a901      	add	r1, sp, #4
 800dfe2:	b142      	cbz	r2, 800dff6 <__ascii_mbtowc+0x1a>
 800dfe4:	b14b      	cbz	r3, 800dffa <__ascii_mbtowc+0x1e>
 800dfe6:	7813      	ldrb	r3, [r2, #0]
 800dfe8:	600b      	str	r3, [r1, #0]
 800dfea:	7812      	ldrb	r2, [r2, #0]
 800dfec:	1e10      	subs	r0, r2, #0
 800dfee:	bf18      	it	ne
 800dff0:	2001      	movne	r0, #1
 800dff2:	b002      	add	sp, #8
 800dff4:	4770      	bx	lr
 800dff6:	4610      	mov	r0, r2
 800dff8:	e7fb      	b.n	800dff2 <__ascii_mbtowc+0x16>
 800dffa:	f06f 0001 	mvn.w	r0, #1
 800dffe:	e7f8      	b.n	800dff2 <__ascii_mbtowc+0x16>

0800e000 <__malloc_lock>:
 800e000:	4801      	ldr	r0, [pc, #4]	; (800e008 <__malloc_lock+0x8>)
 800e002:	f7fc be46 	b.w	800ac92 <__retarget_lock_acquire_recursive>
 800e006:	bf00      	nop
 800e008:	20004f38 	.word	0x20004f38

0800e00c <__malloc_unlock>:
 800e00c:	4801      	ldr	r0, [pc, #4]	; (800e014 <__malloc_unlock+0x8>)
 800e00e:	f7fc be41 	b.w	800ac94 <__retarget_lock_release_recursive>
 800e012:	bf00      	nop
 800e014:	20004f38 	.word	0x20004f38

0800e018 <_Balloc>:
 800e018:	b570      	push	{r4, r5, r6, lr}
 800e01a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e01c:	4604      	mov	r4, r0
 800e01e:	460d      	mov	r5, r1
 800e020:	b976      	cbnz	r6, 800e040 <_Balloc+0x28>
 800e022:	2010      	movs	r0, #16
 800e024:	f7ff ffd2 	bl	800dfcc <malloc>
 800e028:	4602      	mov	r2, r0
 800e02a:	6260      	str	r0, [r4, #36]	; 0x24
 800e02c:	b920      	cbnz	r0, 800e038 <_Balloc+0x20>
 800e02e:	4b18      	ldr	r3, [pc, #96]	; (800e090 <_Balloc+0x78>)
 800e030:	4818      	ldr	r0, [pc, #96]	; (800e094 <_Balloc+0x7c>)
 800e032:	2166      	movs	r1, #102	; 0x66
 800e034:	f000 feae 	bl	800ed94 <__assert_func>
 800e038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e03c:	6006      	str	r6, [r0, #0]
 800e03e:	60c6      	str	r6, [r0, #12]
 800e040:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e042:	68f3      	ldr	r3, [r6, #12]
 800e044:	b183      	cbz	r3, 800e068 <_Balloc+0x50>
 800e046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e04e:	b9b8      	cbnz	r0, 800e080 <_Balloc+0x68>
 800e050:	2101      	movs	r1, #1
 800e052:	fa01 f605 	lsl.w	r6, r1, r5
 800e056:	1d72      	adds	r2, r6, #5
 800e058:	0092      	lsls	r2, r2, #2
 800e05a:	4620      	mov	r0, r4
 800e05c:	f000 fc9d 	bl	800e99a <_calloc_r>
 800e060:	b160      	cbz	r0, 800e07c <_Balloc+0x64>
 800e062:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e066:	e00e      	b.n	800e086 <_Balloc+0x6e>
 800e068:	2221      	movs	r2, #33	; 0x21
 800e06a:	2104      	movs	r1, #4
 800e06c:	4620      	mov	r0, r4
 800e06e:	f000 fc94 	bl	800e99a <_calloc_r>
 800e072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e074:	60f0      	str	r0, [r6, #12]
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d1e4      	bne.n	800e046 <_Balloc+0x2e>
 800e07c:	2000      	movs	r0, #0
 800e07e:	bd70      	pop	{r4, r5, r6, pc}
 800e080:	6802      	ldr	r2, [r0, #0]
 800e082:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e086:	2300      	movs	r3, #0
 800e088:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e08c:	e7f7      	b.n	800e07e <_Balloc+0x66>
 800e08e:	bf00      	nop
 800e090:	08011f66 	.word	0x08011f66
 800e094:	08012064 	.word	0x08012064

0800e098 <_Bfree>:
 800e098:	b570      	push	{r4, r5, r6, lr}
 800e09a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e09c:	4605      	mov	r5, r0
 800e09e:	460c      	mov	r4, r1
 800e0a0:	b976      	cbnz	r6, 800e0c0 <_Bfree+0x28>
 800e0a2:	2010      	movs	r0, #16
 800e0a4:	f7ff ff92 	bl	800dfcc <malloc>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	6268      	str	r0, [r5, #36]	; 0x24
 800e0ac:	b920      	cbnz	r0, 800e0b8 <_Bfree+0x20>
 800e0ae:	4b09      	ldr	r3, [pc, #36]	; (800e0d4 <_Bfree+0x3c>)
 800e0b0:	4809      	ldr	r0, [pc, #36]	; (800e0d8 <_Bfree+0x40>)
 800e0b2:	218a      	movs	r1, #138	; 0x8a
 800e0b4:	f000 fe6e 	bl	800ed94 <__assert_func>
 800e0b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0bc:	6006      	str	r6, [r0, #0]
 800e0be:	60c6      	str	r6, [r0, #12]
 800e0c0:	b13c      	cbz	r4, 800e0d2 <_Bfree+0x3a>
 800e0c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e0c4:	6862      	ldr	r2, [r4, #4]
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e0cc:	6021      	str	r1, [r4, #0]
 800e0ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e0d2:	bd70      	pop	{r4, r5, r6, pc}
 800e0d4:	08011f66 	.word	0x08011f66
 800e0d8:	08012064 	.word	0x08012064

0800e0dc <__multadd>:
 800e0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e0:	690d      	ldr	r5, [r1, #16]
 800e0e2:	4607      	mov	r7, r0
 800e0e4:	460c      	mov	r4, r1
 800e0e6:	461e      	mov	r6, r3
 800e0e8:	f101 0c14 	add.w	ip, r1, #20
 800e0ec:	2000      	movs	r0, #0
 800e0ee:	f8dc 3000 	ldr.w	r3, [ip]
 800e0f2:	b299      	uxth	r1, r3
 800e0f4:	fb02 6101 	mla	r1, r2, r1, r6
 800e0f8:	0c1e      	lsrs	r6, r3, #16
 800e0fa:	0c0b      	lsrs	r3, r1, #16
 800e0fc:	fb02 3306 	mla	r3, r2, r6, r3
 800e100:	b289      	uxth	r1, r1
 800e102:	3001      	adds	r0, #1
 800e104:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e108:	4285      	cmp	r5, r0
 800e10a:	f84c 1b04 	str.w	r1, [ip], #4
 800e10e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e112:	dcec      	bgt.n	800e0ee <__multadd+0x12>
 800e114:	b30e      	cbz	r6, 800e15a <__multadd+0x7e>
 800e116:	68a3      	ldr	r3, [r4, #8]
 800e118:	42ab      	cmp	r3, r5
 800e11a:	dc19      	bgt.n	800e150 <__multadd+0x74>
 800e11c:	6861      	ldr	r1, [r4, #4]
 800e11e:	4638      	mov	r0, r7
 800e120:	3101      	adds	r1, #1
 800e122:	f7ff ff79 	bl	800e018 <_Balloc>
 800e126:	4680      	mov	r8, r0
 800e128:	b928      	cbnz	r0, 800e136 <__multadd+0x5a>
 800e12a:	4602      	mov	r2, r0
 800e12c:	4b0c      	ldr	r3, [pc, #48]	; (800e160 <__multadd+0x84>)
 800e12e:	480d      	ldr	r0, [pc, #52]	; (800e164 <__multadd+0x88>)
 800e130:	21b5      	movs	r1, #181	; 0xb5
 800e132:	f000 fe2f 	bl	800ed94 <__assert_func>
 800e136:	6922      	ldr	r2, [r4, #16]
 800e138:	3202      	adds	r2, #2
 800e13a:	f104 010c 	add.w	r1, r4, #12
 800e13e:	0092      	lsls	r2, r2, #2
 800e140:	300c      	adds	r0, #12
 800e142:	f7fc fda8 	bl	800ac96 <memcpy>
 800e146:	4621      	mov	r1, r4
 800e148:	4638      	mov	r0, r7
 800e14a:	f7ff ffa5 	bl	800e098 <_Bfree>
 800e14e:	4644      	mov	r4, r8
 800e150:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e154:	3501      	adds	r5, #1
 800e156:	615e      	str	r6, [r3, #20]
 800e158:	6125      	str	r5, [r4, #16]
 800e15a:	4620      	mov	r0, r4
 800e15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e160:	08011fd8 	.word	0x08011fd8
 800e164:	08012064 	.word	0x08012064

0800e168 <__s2b>:
 800e168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e16c:	460c      	mov	r4, r1
 800e16e:	4615      	mov	r5, r2
 800e170:	461f      	mov	r7, r3
 800e172:	2209      	movs	r2, #9
 800e174:	3308      	adds	r3, #8
 800e176:	4606      	mov	r6, r0
 800e178:	fb93 f3f2 	sdiv	r3, r3, r2
 800e17c:	2100      	movs	r1, #0
 800e17e:	2201      	movs	r2, #1
 800e180:	429a      	cmp	r2, r3
 800e182:	db09      	blt.n	800e198 <__s2b+0x30>
 800e184:	4630      	mov	r0, r6
 800e186:	f7ff ff47 	bl	800e018 <_Balloc>
 800e18a:	b940      	cbnz	r0, 800e19e <__s2b+0x36>
 800e18c:	4602      	mov	r2, r0
 800e18e:	4b19      	ldr	r3, [pc, #100]	; (800e1f4 <__s2b+0x8c>)
 800e190:	4819      	ldr	r0, [pc, #100]	; (800e1f8 <__s2b+0x90>)
 800e192:	21ce      	movs	r1, #206	; 0xce
 800e194:	f000 fdfe 	bl	800ed94 <__assert_func>
 800e198:	0052      	lsls	r2, r2, #1
 800e19a:	3101      	adds	r1, #1
 800e19c:	e7f0      	b.n	800e180 <__s2b+0x18>
 800e19e:	9b08      	ldr	r3, [sp, #32]
 800e1a0:	6143      	str	r3, [r0, #20]
 800e1a2:	2d09      	cmp	r5, #9
 800e1a4:	f04f 0301 	mov.w	r3, #1
 800e1a8:	6103      	str	r3, [r0, #16]
 800e1aa:	dd16      	ble.n	800e1da <__s2b+0x72>
 800e1ac:	f104 0909 	add.w	r9, r4, #9
 800e1b0:	46c8      	mov	r8, r9
 800e1b2:	442c      	add	r4, r5
 800e1b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e1b8:	4601      	mov	r1, r0
 800e1ba:	3b30      	subs	r3, #48	; 0x30
 800e1bc:	220a      	movs	r2, #10
 800e1be:	4630      	mov	r0, r6
 800e1c0:	f7ff ff8c 	bl	800e0dc <__multadd>
 800e1c4:	45a0      	cmp	r8, r4
 800e1c6:	d1f5      	bne.n	800e1b4 <__s2b+0x4c>
 800e1c8:	f1a5 0408 	sub.w	r4, r5, #8
 800e1cc:	444c      	add	r4, r9
 800e1ce:	1b2d      	subs	r5, r5, r4
 800e1d0:	1963      	adds	r3, r4, r5
 800e1d2:	42bb      	cmp	r3, r7
 800e1d4:	db04      	blt.n	800e1e0 <__s2b+0x78>
 800e1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1da:	340a      	adds	r4, #10
 800e1dc:	2509      	movs	r5, #9
 800e1de:	e7f6      	b.n	800e1ce <__s2b+0x66>
 800e1e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e1e4:	4601      	mov	r1, r0
 800e1e6:	3b30      	subs	r3, #48	; 0x30
 800e1e8:	220a      	movs	r2, #10
 800e1ea:	4630      	mov	r0, r6
 800e1ec:	f7ff ff76 	bl	800e0dc <__multadd>
 800e1f0:	e7ee      	b.n	800e1d0 <__s2b+0x68>
 800e1f2:	bf00      	nop
 800e1f4:	08011fd8 	.word	0x08011fd8
 800e1f8:	08012064 	.word	0x08012064

0800e1fc <__hi0bits>:
 800e1fc:	0c03      	lsrs	r3, r0, #16
 800e1fe:	041b      	lsls	r3, r3, #16
 800e200:	b9d3      	cbnz	r3, 800e238 <__hi0bits+0x3c>
 800e202:	0400      	lsls	r0, r0, #16
 800e204:	2310      	movs	r3, #16
 800e206:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e20a:	bf04      	itt	eq
 800e20c:	0200      	lsleq	r0, r0, #8
 800e20e:	3308      	addeq	r3, #8
 800e210:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e214:	bf04      	itt	eq
 800e216:	0100      	lsleq	r0, r0, #4
 800e218:	3304      	addeq	r3, #4
 800e21a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e21e:	bf04      	itt	eq
 800e220:	0080      	lsleq	r0, r0, #2
 800e222:	3302      	addeq	r3, #2
 800e224:	2800      	cmp	r0, #0
 800e226:	db05      	blt.n	800e234 <__hi0bits+0x38>
 800e228:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e22c:	f103 0301 	add.w	r3, r3, #1
 800e230:	bf08      	it	eq
 800e232:	2320      	moveq	r3, #32
 800e234:	4618      	mov	r0, r3
 800e236:	4770      	bx	lr
 800e238:	2300      	movs	r3, #0
 800e23a:	e7e4      	b.n	800e206 <__hi0bits+0xa>

0800e23c <__lo0bits>:
 800e23c:	6803      	ldr	r3, [r0, #0]
 800e23e:	f013 0207 	ands.w	r2, r3, #7
 800e242:	4601      	mov	r1, r0
 800e244:	d00b      	beq.n	800e25e <__lo0bits+0x22>
 800e246:	07da      	lsls	r2, r3, #31
 800e248:	d423      	bmi.n	800e292 <__lo0bits+0x56>
 800e24a:	0798      	lsls	r0, r3, #30
 800e24c:	bf49      	itett	mi
 800e24e:	085b      	lsrmi	r3, r3, #1
 800e250:	089b      	lsrpl	r3, r3, #2
 800e252:	2001      	movmi	r0, #1
 800e254:	600b      	strmi	r3, [r1, #0]
 800e256:	bf5c      	itt	pl
 800e258:	600b      	strpl	r3, [r1, #0]
 800e25a:	2002      	movpl	r0, #2
 800e25c:	4770      	bx	lr
 800e25e:	b298      	uxth	r0, r3
 800e260:	b9a8      	cbnz	r0, 800e28e <__lo0bits+0x52>
 800e262:	0c1b      	lsrs	r3, r3, #16
 800e264:	2010      	movs	r0, #16
 800e266:	b2da      	uxtb	r2, r3
 800e268:	b90a      	cbnz	r2, 800e26e <__lo0bits+0x32>
 800e26a:	3008      	adds	r0, #8
 800e26c:	0a1b      	lsrs	r3, r3, #8
 800e26e:	071a      	lsls	r2, r3, #28
 800e270:	bf04      	itt	eq
 800e272:	091b      	lsreq	r3, r3, #4
 800e274:	3004      	addeq	r0, #4
 800e276:	079a      	lsls	r2, r3, #30
 800e278:	bf04      	itt	eq
 800e27a:	089b      	lsreq	r3, r3, #2
 800e27c:	3002      	addeq	r0, #2
 800e27e:	07da      	lsls	r2, r3, #31
 800e280:	d403      	bmi.n	800e28a <__lo0bits+0x4e>
 800e282:	085b      	lsrs	r3, r3, #1
 800e284:	f100 0001 	add.w	r0, r0, #1
 800e288:	d005      	beq.n	800e296 <__lo0bits+0x5a>
 800e28a:	600b      	str	r3, [r1, #0]
 800e28c:	4770      	bx	lr
 800e28e:	4610      	mov	r0, r2
 800e290:	e7e9      	b.n	800e266 <__lo0bits+0x2a>
 800e292:	2000      	movs	r0, #0
 800e294:	4770      	bx	lr
 800e296:	2020      	movs	r0, #32
 800e298:	4770      	bx	lr
	...

0800e29c <__i2b>:
 800e29c:	b510      	push	{r4, lr}
 800e29e:	460c      	mov	r4, r1
 800e2a0:	2101      	movs	r1, #1
 800e2a2:	f7ff feb9 	bl	800e018 <_Balloc>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	b928      	cbnz	r0, 800e2b6 <__i2b+0x1a>
 800e2aa:	4b05      	ldr	r3, [pc, #20]	; (800e2c0 <__i2b+0x24>)
 800e2ac:	4805      	ldr	r0, [pc, #20]	; (800e2c4 <__i2b+0x28>)
 800e2ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e2b2:	f000 fd6f 	bl	800ed94 <__assert_func>
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	6144      	str	r4, [r0, #20]
 800e2ba:	6103      	str	r3, [r0, #16]
 800e2bc:	bd10      	pop	{r4, pc}
 800e2be:	bf00      	nop
 800e2c0:	08011fd8 	.word	0x08011fd8
 800e2c4:	08012064 	.word	0x08012064

0800e2c8 <__multiply>:
 800e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2cc:	4691      	mov	r9, r2
 800e2ce:	690a      	ldr	r2, [r1, #16]
 800e2d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	bfb8      	it	lt
 800e2d8:	460b      	movlt	r3, r1
 800e2da:	460c      	mov	r4, r1
 800e2dc:	bfbc      	itt	lt
 800e2de:	464c      	movlt	r4, r9
 800e2e0:	4699      	movlt	r9, r3
 800e2e2:	6927      	ldr	r7, [r4, #16]
 800e2e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e2e8:	68a3      	ldr	r3, [r4, #8]
 800e2ea:	6861      	ldr	r1, [r4, #4]
 800e2ec:	eb07 060a 	add.w	r6, r7, sl
 800e2f0:	42b3      	cmp	r3, r6
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	bfb8      	it	lt
 800e2f6:	3101      	addlt	r1, #1
 800e2f8:	f7ff fe8e 	bl	800e018 <_Balloc>
 800e2fc:	b930      	cbnz	r0, 800e30c <__multiply+0x44>
 800e2fe:	4602      	mov	r2, r0
 800e300:	4b44      	ldr	r3, [pc, #272]	; (800e414 <__multiply+0x14c>)
 800e302:	4845      	ldr	r0, [pc, #276]	; (800e418 <__multiply+0x150>)
 800e304:	f240 115d 	movw	r1, #349	; 0x15d
 800e308:	f000 fd44 	bl	800ed94 <__assert_func>
 800e30c:	f100 0514 	add.w	r5, r0, #20
 800e310:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e314:	462b      	mov	r3, r5
 800e316:	2200      	movs	r2, #0
 800e318:	4543      	cmp	r3, r8
 800e31a:	d321      	bcc.n	800e360 <__multiply+0x98>
 800e31c:	f104 0314 	add.w	r3, r4, #20
 800e320:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e324:	f109 0314 	add.w	r3, r9, #20
 800e328:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e32c:	9202      	str	r2, [sp, #8]
 800e32e:	1b3a      	subs	r2, r7, r4
 800e330:	3a15      	subs	r2, #21
 800e332:	f022 0203 	bic.w	r2, r2, #3
 800e336:	3204      	adds	r2, #4
 800e338:	f104 0115 	add.w	r1, r4, #21
 800e33c:	428f      	cmp	r7, r1
 800e33e:	bf38      	it	cc
 800e340:	2204      	movcc	r2, #4
 800e342:	9201      	str	r2, [sp, #4]
 800e344:	9a02      	ldr	r2, [sp, #8]
 800e346:	9303      	str	r3, [sp, #12]
 800e348:	429a      	cmp	r2, r3
 800e34a:	d80c      	bhi.n	800e366 <__multiply+0x9e>
 800e34c:	2e00      	cmp	r6, #0
 800e34e:	dd03      	ble.n	800e358 <__multiply+0x90>
 800e350:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e354:	2b00      	cmp	r3, #0
 800e356:	d05a      	beq.n	800e40e <__multiply+0x146>
 800e358:	6106      	str	r6, [r0, #16]
 800e35a:	b005      	add	sp, #20
 800e35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e360:	f843 2b04 	str.w	r2, [r3], #4
 800e364:	e7d8      	b.n	800e318 <__multiply+0x50>
 800e366:	f8b3 a000 	ldrh.w	sl, [r3]
 800e36a:	f1ba 0f00 	cmp.w	sl, #0
 800e36e:	d024      	beq.n	800e3ba <__multiply+0xf2>
 800e370:	f104 0e14 	add.w	lr, r4, #20
 800e374:	46a9      	mov	r9, r5
 800e376:	f04f 0c00 	mov.w	ip, #0
 800e37a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e37e:	f8d9 1000 	ldr.w	r1, [r9]
 800e382:	fa1f fb82 	uxth.w	fp, r2
 800e386:	b289      	uxth	r1, r1
 800e388:	fb0a 110b 	mla	r1, sl, fp, r1
 800e38c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e390:	f8d9 2000 	ldr.w	r2, [r9]
 800e394:	4461      	add	r1, ip
 800e396:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e39a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e39e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e3a2:	b289      	uxth	r1, r1
 800e3a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e3a8:	4577      	cmp	r7, lr
 800e3aa:	f849 1b04 	str.w	r1, [r9], #4
 800e3ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e3b2:	d8e2      	bhi.n	800e37a <__multiply+0xb2>
 800e3b4:	9a01      	ldr	r2, [sp, #4]
 800e3b6:	f845 c002 	str.w	ip, [r5, r2]
 800e3ba:	9a03      	ldr	r2, [sp, #12]
 800e3bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e3c0:	3304      	adds	r3, #4
 800e3c2:	f1b9 0f00 	cmp.w	r9, #0
 800e3c6:	d020      	beq.n	800e40a <__multiply+0x142>
 800e3c8:	6829      	ldr	r1, [r5, #0]
 800e3ca:	f104 0c14 	add.w	ip, r4, #20
 800e3ce:	46ae      	mov	lr, r5
 800e3d0:	f04f 0a00 	mov.w	sl, #0
 800e3d4:	f8bc b000 	ldrh.w	fp, [ip]
 800e3d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e3dc:	fb09 220b 	mla	r2, r9, fp, r2
 800e3e0:	4492      	add	sl, r2
 800e3e2:	b289      	uxth	r1, r1
 800e3e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e3e8:	f84e 1b04 	str.w	r1, [lr], #4
 800e3ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e3f0:	f8be 1000 	ldrh.w	r1, [lr]
 800e3f4:	0c12      	lsrs	r2, r2, #16
 800e3f6:	fb09 1102 	mla	r1, r9, r2, r1
 800e3fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e3fe:	4567      	cmp	r7, ip
 800e400:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e404:	d8e6      	bhi.n	800e3d4 <__multiply+0x10c>
 800e406:	9a01      	ldr	r2, [sp, #4]
 800e408:	50a9      	str	r1, [r5, r2]
 800e40a:	3504      	adds	r5, #4
 800e40c:	e79a      	b.n	800e344 <__multiply+0x7c>
 800e40e:	3e01      	subs	r6, #1
 800e410:	e79c      	b.n	800e34c <__multiply+0x84>
 800e412:	bf00      	nop
 800e414:	08011fd8 	.word	0x08011fd8
 800e418:	08012064 	.word	0x08012064

0800e41c <__pow5mult>:
 800e41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e420:	4615      	mov	r5, r2
 800e422:	f012 0203 	ands.w	r2, r2, #3
 800e426:	4606      	mov	r6, r0
 800e428:	460f      	mov	r7, r1
 800e42a:	d007      	beq.n	800e43c <__pow5mult+0x20>
 800e42c:	4c25      	ldr	r4, [pc, #148]	; (800e4c4 <__pow5mult+0xa8>)
 800e42e:	3a01      	subs	r2, #1
 800e430:	2300      	movs	r3, #0
 800e432:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e436:	f7ff fe51 	bl	800e0dc <__multadd>
 800e43a:	4607      	mov	r7, r0
 800e43c:	10ad      	asrs	r5, r5, #2
 800e43e:	d03d      	beq.n	800e4bc <__pow5mult+0xa0>
 800e440:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e442:	b97c      	cbnz	r4, 800e464 <__pow5mult+0x48>
 800e444:	2010      	movs	r0, #16
 800e446:	f7ff fdc1 	bl	800dfcc <malloc>
 800e44a:	4602      	mov	r2, r0
 800e44c:	6270      	str	r0, [r6, #36]	; 0x24
 800e44e:	b928      	cbnz	r0, 800e45c <__pow5mult+0x40>
 800e450:	4b1d      	ldr	r3, [pc, #116]	; (800e4c8 <__pow5mult+0xac>)
 800e452:	481e      	ldr	r0, [pc, #120]	; (800e4cc <__pow5mult+0xb0>)
 800e454:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e458:	f000 fc9c 	bl	800ed94 <__assert_func>
 800e45c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e460:	6004      	str	r4, [r0, #0]
 800e462:	60c4      	str	r4, [r0, #12]
 800e464:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e468:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e46c:	b94c      	cbnz	r4, 800e482 <__pow5mult+0x66>
 800e46e:	f240 2171 	movw	r1, #625	; 0x271
 800e472:	4630      	mov	r0, r6
 800e474:	f7ff ff12 	bl	800e29c <__i2b>
 800e478:	2300      	movs	r3, #0
 800e47a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e47e:	4604      	mov	r4, r0
 800e480:	6003      	str	r3, [r0, #0]
 800e482:	f04f 0900 	mov.w	r9, #0
 800e486:	07eb      	lsls	r3, r5, #31
 800e488:	d50a      	bpl.n	800e4a0 <__pow5mult+0x84>
 800e48a:	4639      	mov	r1, r7
 800e48c:	4622      	mov	r2, r4
 800e48e:	4630      	mov	r0, r6
 800e490:	f7ff ff1a 	bl	800e2c8 <__multiply>
 800e494:	4639      	mov	r1, r7
 800e496:	4680      	mov	r8, r0
 800e498:	4630      	mov	r0, r6
 800e49a:	f7ff fdfd 	bl	800e098 <_Bfree>
 800e49e:	4647      	mov	r7, r8
 800e4a0:	106d      	asrs	r5, r5, #1
 800e4a2:	d00b      	beq.n	800e4bc <__pow5mult+0xa0>
 800e4a4:	6820      	ldr	r0, [r4, #0]
 800e4a6:	b938      	cbnz	r0, 800e4b8 <__pow5mult+0x9c>
 800e4a8:	4622      	mov	r2, r4
 800e4aa:	4621      	mov	r1, r4
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	f7ff ff0b 	bl	800e2c8 <__multiply>
 800e4b2:	6020      	str	r0, [r4, #0]
 800e4b4:	f8c0 9000 	str.w	r9, [r0]
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	e7e4      	b.n	800e486 <__pow5mult+0x6a>
 800e4bc:	4638      	mov	r0, r7
 800e4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4c2:	bf00      	nop
 800e4c4:	080121b0 	.word	0x080121b0
 800e4c8:	08011f66 	.word	0x08011f66
 800e4cc:	08012064 	.word	0x08012064

0800e4d0 <__lshift>:
 800e4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d4:	460c      	mov	r4, r1
 800e4d6:	6849      	ldr	r1, [r1, #4]
 800e4d8:	6923      	ldr	r3, [r4, #16]
 800e4da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4de:	68a3      	ldr	r3, [r4, #8]
 800e4e0:	4607      	mov	r7, r0
 800e4e2:	4691      	mov	r9, r2
 800e4e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4e8:	f108 0601 	add.w	r6, r8, #1
 800e4ec:	42b3      	cmp	r3, r6
 800e4ee:	db0b      	blt.n	800e508 <__lshift+0x38>
 800e4f0:	4638      	mov	r0, r7
 800e4f2:	f7ff fd91 	bl	800e018 <_Balloc>
 800e4f6:	4605      	mov	r5, r0
 800e4f8:	b948      	cbnz	r0, 800e50e <__lshift+0x3e>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	4b2a      	ldr	r3, [pc, #168]	; (800e5a8 <__lshift+0xd8>)
 800e4fe:	482b      	ldr	r0, [pc, #172]	; (800e5ac <__lshift+0xdc>)
 800e500:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e504:	f000 fc46 	bl	800ed94 <__assert_func>
 800e508:	3101      	adds	r1, #1
 800e50a:	005b      	lsls	r3, r3, #1
 800e50c:	e7ee      	b.n	800e4ec <__lshift+0x1c>
 800e50e:	2300      	movs	r3, #0
 800e510:	f100 0114 	add.w	r1, r0, #20
 800e514:	f100 0210 	add.w	r2, r0, #16
 800e518:	4618      	mov	r0, r3
 800e51a:	4553      	cmp	r3, sl
 800e51c:	db37      	blt.n	800e58e <__lshift+0xbe>
 800e51e:	6920      	ldr	r0, [r4, #16]
 800e520:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e524:	f104 0314 	add.w	r3, r4, #20
 800e528:	f019 091f 	ands.w	r9, r9, #31
 800e52c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e530:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e534:	d02f      	beq.n	800e596 <__lshift+0xc6>
 800e536:	f1c9 0e20 	rsb	lr, r9, #32
 800e53a:	468a      	mov	sl, r1
 800e53c:	f04f 0c00 	mov.w	ip, #0
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	fa02 f209 	lsl.w	r2, r2, r9
 800e546:	ea42 020c 	orr.w	r2, r2, ip
 800e54a:	f84a 2b04 	str.w	r2, [sl], #4
 800e54e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e552:	4298      	cmp	r0, r3
 800e554:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e558:	d8f2      	bhi.n	800e540 <__lshift+0x70>
 800e55a:	1b03      	subs	r3, r0, r4
 800e55c:	3b15      	subs	r3, #21
 800e55e:	f023 0303 	bic.w	r3, r3, #3
 800e562:	3304      	adds	r3, #4
 800e564:	f104 0215 	add.w	r2, r4, #21
 800e568:	4290      	cmp	r0, r2
 800e56a:	bf38      	it	cc
 800e56c:	2304      	movcc	r3, #4
 800e56e:	f841 c003 	str.w	ip, [r1, r3]
 800e572:	f1bc 0f00 	cmp.w	ip, #0
 800e576:	d001      	beq.n	800e57c <__lshift+0xac>
 800e578:	f108 0602 	add.w	r6, r8, #2
 800e57c:	3e01      	subs	r6, #1
 800e57e:	4638      	mov	r0, r7
 800e580:	612e      	str	r6, [r5, #16]
 800e582:	4621      	mov	r1, r4
 800e584:	f7ff fd88 	bl	800e098 <_Bfree>
 800e588:	4628      	mov	r0, r5
 800e58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e58e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e592:	3301      	adds	r3, #1
 800e594:	e7c1      	b.n	800e51a <__lshift+0x4a>
 800e596:	3904      	subs	r1, #4
 800e598:	f853 2b04 	ldr.w	r2, [r3], #4
 800e59c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5a0:	4298      	cmp	r0, r3
 800e5a2:	d8f9      	bhi.n	800e598 <__lshift+0xc8>
 800e5a4:	e7ea      	b.n	800e57c <__lshift+0xac>
 800e5a6:	bf00      	nop
 800e5a8:	08011fd8 	.word	0x08011fd8
 800e5ac:	08012064 	.word	0x08012064

0800e5b0 <__mcmp>:
 800e5b0:	b530      	push	{r4, r5, lr}
 800e5b2:	6902      	ldr	r2, [r0, #16]
 800e5b4:	690c      	ldr	r4, [r1, #16]
 800e5b6:	1b12      	subs	r2, r2, r4
 800e5b8:	d10e      	bne.n	800e5d8 <__mcmp+0x28>
 800e5ba:	f100 0314 	add.w	r3, r0, #20
 800e5be:	3114      	adds	r1, #20
 800e5c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e5c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e5c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e5cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e5d0:	42a5      	cmp	r5, r4
 800e5d2:	d003      	beq.n	800e5dc <__mcmp+0x2c>
 800e5d4:	d305      	bcc.n	800e5e2 <__mcmp+0x32>
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	4610      	mov	r0, r2
 800e5da:	bd30      	pop	{r4, r5, pc}
 800e5dc:	4283      	cmp	r3, r0
 800e5de:	d3f3      	bcc.n	800e5c8 <__mcmp+0x18>
 800e5e0:	e7fa      	b.n	800e5d8 <__mcmp+0x28>
 800e5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5e6:	e7f7      	b.n	800e5d8 <__mcmp+0x28>

0800e5e8 <__mdiff>:
 800e5e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ec:	460c      	mov	r4, r1
 800e5ee:	4606      	mov	r6, r0
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	4690      	mov	r8, r2
 800e5f6:	f7ff ffdb 	bl	800e5b0 <__mcmp>
 800e5fa:	1e05      	subs	r5, r0, #0
 800e5fc:	d110      	bne.n	800e620 <__mdiff+0x38>
 800e5fe:	4629      	mov	r1, r5
 800e600:	4630      	mov	r0, r6
 800e602:	f7ff fd09 	bl	800e018 <_Balloc>
 800e606:	b930      	cbnz	r0, 800e616 <__mdiff+0x2e>
 800e608:	4b3a      	ldr	r3, [pc, #232]	; (800e6f4 <__mdiff+0x10c>)
 800e60a:	4602      	mov	r2, r0
 800e60c:	f240 2132 	movw	r1, #562	; 0x232
 800e610:	4839      	ldr	r0, [pc, #228]	; (800e6f8 <__mdiff+0x110>)
 800e612:	f000 fbbf 	bl	800ed94 <__assert_func>
 800e616:	2301      	movs	r3, #1
 800e618:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e61c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e620:	bfa4      	itt	ge
 800e622:	4643      	movge	r3, r8
 800e624:	46a0      	movge	r8, r4
 800e626:	4630      	mov	r0, r6
 800e628:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e62c:	bfa6      	itte	ge
 800e62e:	461c      	movge	r4, r3
 800e630:	2500      	movge	r5, #0
 800e632:	2501      	movlt	r5, #1
 800e634:	f7ff fcf0 	bl	800e018 <_Balloc>
 800e638:	b920      	cbnz	r0, 800e644 <__mdiff+0x5c>
 800e63a:	4b2e      	ldr	r3, [pc, #184]	; (800e6f4 <__mdiff+0x10c>)
 800e63c:	4602      	mov	r2, r0
 800e63e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e642:	e7e5      	b.n	800e610 <__mdiff+0x28>
 800e644:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e648:	6926      	ldr	r6, [r4, #16]
 800e64a:	60c5      	str	r5, [r0, #12]
 800e64c:	f104 0914 	add.w	r9, r4, #20
 800e650:	f108 0514 	add.w	r5, r8, #20
 800e654:	f100 0e14 	add.w	lr, r0, #20
 800e658:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e65c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e660:	f108 0210 	add.w	r2, r8, #16
 800e664:	46f2      	mov	sl, lr
 800e666:	2100      	movs	r1, #0
 800e668:	f859 3b04 	ldr.w	r3, [r9], #4
 800e66c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e670:	fa1f f883 	uxth.w	r8, r3
 800e674:	fa11 f18b 	uxtah	r1, r1, fp
 800e678:	0c1b      	lsrs	r3, r3, #16
 800e67a:	eba1 0808 	sub.w	r8, r1, r8
 800e67e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e682:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e686:	fa1f f888 	uxth.w	r8, r8
 800e68a:	1419      	asrs	r1, r3, #16
 800e68c:	454e      	cmp	r6, r9
 800e68e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e692:	f84a 3b04 	str.w	r3, [sl], #4
 800e696:	d8e7      	bhi.n	800e668 <__mdiff+0x80>
 800e698:	1b33      	subs	r3, r6, r4
 800e69a:	3b15      	subs	r3, #21
 800e69c:	f023 0303 	bic.w	r3, r3, #3
 800e6a0:	3304      	adds	r3, #4
 800e6a2:	3415      	adds	r4, #21
 800e6a4:	42a6      	cmp	r6, r4
 800e6a6:	bf38      	it	cc
 800e6a8:	2304      	movcc	r3, #4
 800e6aa:	441d      	add	r5, r3
 800e6ac:	4473      	add	r3, lr
 800e6ae:	469e      	mov	lr, r3
 800e6b0:	462e      	mov	r6, r5
 800e6b2:	4566      	cmp	r6, ip
 800e6b4:	d30e      	bcc.n	800e6d4 <__mdiff+0xec>
 800e6b6:	f10c 0203 	add.w	r2, ip, #3
 800e6ba:	1b52      	subs	r2, r2, r5
 800e6bc:	f022 0203 	bic.w	r2, r2, #3
 800e6c0:	3d03      	subs	r5, #3
 800e6c2:	45ac      	cmp	ip, r5
 800e6c4:	bf38      	it	cc
 800e6c6:	2200      	movcc	r2, #0
 800e6c8:	441a      	add	r2, r3
 800e6ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e6ce:	b17b      	cbz	r3, 800e6f0 <__mdiff+0x108>
 800e6d0:	6107      	str	r7, [r0, #16]
 800e6d2:	e7a3      	b.n	800e61c <__mdiff+0x34>
 800e6d4:	f856 8b04 	ldr.w	r8, [r6], #4
 800e6d8:	fa11 f288 	uxtah	r2, r1, r8
 800e6dc:	1414      	asrs	r4, r2, #16
 800e6de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e6e2:	b292      	uxth	r2, r2
 800e6e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e6e8:	f84e 2b04 	str.w	r2, [lr], #4
 800e6ec:	1421      	asrs	r1, r4, #16
 800e6ee:	e7e0      	b.n	800e6b2 <__mdiff+0xca>
 800e6f0:	3f01      	subs	r7, #1
 800e6f2:	e7ea      	b.n	800e6ca <__mdiff+0xe2>
 800e6f4:	08011fd8 	.word	0x08011fd8
 800e6f8:	08012064 	.word	0x08012064

0800e6fc <__ulp>:
 800e6fc:	b082      	sub	sp, #8
 800e6fe:	ed8d 0b00 	vstr	d0, [sp]
 800e702:	9b01      	ldr	r3, [sp, #4]
 800e704:	4912      	ldr	r1, [pc, #72]	; (800e750 <__ulp+0x54>)
 800e706:	4019      	ands	r1, r3
 800e708:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e70c:	2900      	cmp	r1, #0
 800e70e:	dd05      	ble.n	800e71c <__ulp+0x20>
 800e710:	2200      	movs	r2, #0
 800e712:	460b      	mov	r3, r1
 800e714:	ec43 2b10 	vmov	d0, r2, r3
 800e718:	b002      	add	sp, #8
 800e71a:	4770      	bx	lr
 800e71c:	4249      	negs	r1, r1
 800e71e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e722:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e726:	f04f 0200 	mov.w	r2, #0
 800e72a:	f04f 0300 	mov.w	r3, #0
 800e72e:	da04      	bge.n	800e73a <__ulp+0x3e>
 800e730:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e734:	fa41 f300 	asr.w	r3, r1, r0
 800e738:	e7ec      	b.n	800e714 <__ulp+0x18>
 800e73a:	f1a0 0114 	sub.w	r1, r0, #20
 800e73e:	291e      	cmp	r1, #30
 800e740:	bfda      	itte	le
 800e742:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e746:	fa20 f101 	lsrle.w	r1, r0, r1
 800e74a:	2101      	movgt	r1, #1
 800e74c:	460a      	mov	r2, r1
 800e74e:	e7e1      	b.n	800e714 <__ulp+0x18>
 800e750:	7ff00000 	.word	0x7ff00000

0800e754 <__b2d>:
 800e754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e756:	6905      	ldr	r5, [r0, #16]
 800e758:	f100 0714 	add.w	r7, r0, #20
 800e75c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e760:	1f2e      	subs	r6, r5, #4
 800e762:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e766:	4620      	mov	r0, r4
 800e768:	f7ff fd48 	bl	800e1fc <__hi0bits>
 800e76c:	f1c0 0320 	rsb	r3, r0, #32
 800e770:	280a      	cmp	r0, #10
 800e772:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e7f0 <__b2d+0x9c>
 800e776:	600b      	str	r3, [r1, #0]
 800e778:	dc14      	bgt.n	800e7a4 <__b2d+0x50>
 800e77a:	f1c0 0e0b 	rsb	lr, r0, #11
 800e77e:	fa24 f10e 	lsr.w	r1, r4, lr
 800e782:	42b7      	cmp	r7, r6
 800e784:	ea41 030c 	orr.w	r3, r1, ip
 800e788:	bf34      	ite	cc
 800e78a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e78e:	2100      	movcs	r1, #0
 800e790:	3015      	adds	r0, #21
 800e792:	fa04 f000 	lsl.w	r0, r4, r0
 800e796:	fa21 f10e 	lsr.w	r1, r1, lr
 800e79a:	ea40 0201 	orr.w	r2, r0, r1
 800e79e:	ec43 2b10 	vmov	d0, r2, r3
 800e7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7a4:	42b7      	cmp	r7, r6
 800e7a6:	bf3a      	itte	cc
 800e7a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e7ac:	f1a5 0608 	subcc.w	r6, r5, #8
 800e7b0:	2100      	movcs	r1, #0
 800e7b2:	380b      	subs	r0, #11
 800e7b4:	d017      	beq.n	800e7e6 <__b2d+0x92>
 800e7b6:	f1c0 0c20 	rsb	ip, r0, #32
 800e7ba:	fa04 f500 	lsl.w	r5, r4, r0
 800e7be:	42be      	cmp	r6, r7
 800e7c0:	fa21 f40c 	lsr.w	r4, r1, ip
 800e7c4:	ea45 0504 	orr.w	r5, r5, r4
 800e7c8:	bf8c      	ite	hi
 800e7ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e7ce:	2400      	movls	r4, #0
 800e7d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e7d4:	fa01 f000 	lsl.w	r0, r1, r0
 800e7d8:	fa24 f40c 	lsr.w	r4, r4, ip
 800e7dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e7e0:	ea40 0204 	orr.w	r2, r0, r4
 800e7e4:	e7db      	b.n	800e79e <__b2d+0x4a>
 800e7e6:	ea44 030c 	orr.w	r3, r4, ip
 800e7ea:	460a      	mov	r2, r1
 800e7ec:	e7d7      	b.n	800e79e <__b2d+0x4a>
 800e7ee:	bf00      	nop
 800e7f0:	3ff00000 	.word	0x3ff00000

0800e7f4 <__d2b>:
 800e7f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e7f8:	4689      	mov	r9, r1
 800e7fa:	2101      	movs	r1, #1
 800e7fc:	ec57 6b10 	vmov	r6, r7, d0
 800e800:	4690      	mov	r8, r2
 800e802:	f7ff fc09 	bl	800e018 <_Balloc>
 800e806:	4604      	mov	r4, r0
 800e808:	b930      	cbnz	r0, 800e818 <__d2b+0x24>
 800e80a:	4602      	mov	r2, r0
 800e80c:	4b25      	ldr	r3, [pc, #148]	; (800e8a4 <__d2b+0xb0>)
 800e80e:	4826      	ldr	r0, [pc, #152]	; (800e8a8 <__d2b+0xb4>)
 800e810:	f240 310a 	movw	r1, #778	; 0x30a
 800e814:	f000 fabe 	bl	800ed94 <__assert_func>
 800e818:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e81c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e820:	bb35      	cbnz	r5, 800e870 <__d2b+0x7c>
 800e822:	2e00      	cmp	r6, #0
 800e824:	9301      	str	r3, [sp, #4]
 800e826:	d028      	beq.n	800e87a <__d2b+0x86>
 800e828:	4668      	mov	r0, sp
 800e82a:	9600      	str	r6, [sp, #0]
 800e82c:	f7ff fd06 	bl	800e23c <__lo0bits>
 800e830:	9900      	ldr	r1, [sp, #0]
 800e832:	b300      	cbz	r0, 800e876 <__d2b+0x82>
 800e834:	9a01      	ldr	r2, [sp, #4]
 800e836:	f1c0 0320 	rsb	r3, r0, #32
 800e83a:	fa02 f303 	lsl.w	r3, r2, r3
 800e83e:	430b      	orrs	r3, r1
 800e840:	40c2      	lsrs	r2, r0
 800e842:	6163      	str	r3, [r4, #20]
 800e844:	9201      	str	r2, [sp, #4]
 800e846:	9b01      	ldr	r3, [sp, #4]
 800e848:	61a3      	str	r3, [r4, #24]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	bf14      	ite	ne
 800e84e:	2202      	movne	r2, #2
 800e850:	2201      	moveq	r2, #1
 800e852:	6122      	str	r2, [r4, #16]
 800e854:	b1d5      	cbz	r5, 800e88c <__d2b+0x98>
 800e856:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e85a:	4405      	add	r5, r0
 800e85c:	f8c9 5000 	str.w	r5, [r9]
 800e860:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e864:	f8c8 0000 	str.w	r0, [r8]
 800e868:	4620      	mov	r0, r4
 800e86a:	b003      	add	sp, #12
 800e86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e874:	e7d5      	b.n	800e822 <__d2b+0x2e>
 800e876:	6161      	str	r1, [r4, #20]
 800e878:	e7e5      	b.n	800e846 <__d2b+0x52>
 800e87a:	a801      	add	r0, sp, #4
 800e87c:	f7ff fcde 	bl	800e23c <__lo0bits>
 800e880:	9b01      	ldr	r3, [sp, #4]
 800e882:	6163      	str	r3, [r4, #20]
 800e884:	2201      	movs	r2, #1
 800e886:	6122      	str	r2, [r4, #16]
 800e888:	3020      	adds	r0, #32
 800e88a:	e7e3      	b.n	800e854 <__d2b+0x60>
 800e88c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e890:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e894:	f8c9 0000 	str.w	r0, [r9]
 800e898:	6918      	ldr	r0, [r3, #16]
 800e89a:	f7ff fcaf 	bl	800e1fc <__hi0bits>
 800e89e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e8a2:	e7df      	b.n	800e864 <__d2b+0x70>
 800e8a4:	08011fd8 	.word	0x08011fd8
 800e8a8:	08012064 	.word	0x08012064

0800e8ac <__ratio>:
 800e8ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8b0:	4688      	mov	r8, r1
 800e8b2:	4669      	mov	r1, sp
 800e8b4:	4681      	mov	r9, r0
 800e8b6:	f7ff ff4d 	bl	800e754 <__b2d>
 800e8ba:	a901      	add	r1, sp, #4
 800e8bc:	4640      	mov	r0, r8
 800e8be:	ec55 4b10 	vmov	r4, r5, d0
 800e8c2:	f7ff ff47 	bl	800e754 <__b2d>
 800e8c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e8ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e8ce:	eba3 0c02 	sub.w	ip, r3, r2
 800e8d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e8d6:	1a9b      	subs	r3, r3, r2
 800e8d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e8dc:	ec51 0b10 	vmov	r0, r1, d0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	bfd6      	itet	le
 800e8e4:	460a      	movle	r2, r1
 800e8e6:	462a      	movgt	r2, r5
 800e8e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e8ec:	468b      	mov	fp, r1
 800e8ee:	462f      	mov	r7, r5
 800e8f0:	bfd4      	ite	le
 800e8f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e8f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	ee10 2a10 	vmov	r2, s0
 800e900:	465b      	mov	r3, fp
 800e902:	4639      	mov	r1, r7
 800e904:	f7f1 ffaa 	bl	800085c <__aeabi_ddiv>
 800e908:	ec41 0b10 	vmov	d0, r0, r1
 800e90c:	b003      	add	sp, #12
 800e90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e912 <__copybits>:
 800e912:	3901      	subs	r1, #1
 800e914:	b570      	push	{r4, r5, r6, lr}
 800e916:	1149      	asrs	r1, r1, #5
 800e918:	6914      	ldr	r4, [r2, #16]
 800e91a:	3101      	adds	r1, #1
 800e91c:	f102 0314 	add.w	r3, r2, #20
 800e920:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e924:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e928:	1f05      	subs	r5, r0, #4
 800e92a:	42a3      	cmp	r3, r4
 800e92c:	d30c      	bcc.n	800e948 <__copybits+0x36>
 800e92e:	1aa3      	subs	r3, r4, r2
 800e930:	3b11      	subs	r3, #17
 800e932:	f023 0303 	bic.w	r3, r3, #3
 800e936:	3211      	adds	r2, #17
 800e938:	42a2      	cmp	r2, r4
 800e93a:	bf88      	it	hi
 800e93c:	2300      	movhi	r3, #0
 800e93e:	4418      	add	r0, r3
 800e940:	2300      	movs	r3, #0
 800e942:	4288      	cmp	r0, r1
 800e944:	d305      	bcc.n	800e952 <__copybits+0x40>
 800e946:	bd70      	pop	{r4, r5, r6, pc}
 800e948:	f853 6b04 	ldr.w	r6, [r3], #4
 800e94c:	f845 6f04 	str.w	r6, [r5, #4]!
 800e950:	e7eb      	b.n	800e92a <__copybits+0x18>
 800e952:	f840 3b04 	str.w	r3, [r0], #4
 800e956:	e7f4      	b.n	800e942 <__copybits+0x30>

0800e958 <__any_on>:
 800e958:	f100 0214 	add.w	r2, r0, #20
 800e95c:	6900      	ldr	r0, [r0, #16]
 800e95e:	114b      	asrs	r3, r1, #5
 800e960:	4298      	cmp	r0, r3
 800e962:	b510      	push	{r4, lr}
 800e964:	db11      	blt.n	800e98a <__any_on+0x32>
 800e966:	dd0a      	ble.n	800e97e <__any_on+0x26>
 800e968:	f011 011f 	ands.w	r1, r1, #31
 800e96c:	d007      	beq.n	800e97e <__any_on+0x26>
 800e96e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e972:	fa24 f001 	lsr.w	r0, r4, r1
 800e976:	fa00 f101 	lsl.w	r1, r0, r1
 800e97a:	428c      	cmp	r4, r1
 800e97c:	d10b      	bne.n	800e996 <__any_on+0x3e>
 800e97e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e982:	4293      	cmp	r3, r2
 800e984:	d803      	bhi.n	800e98e <__any_on+0x36>
 800e986:	2000      	movs	r0, #0
 800e988:	bd10      	pop	{r4, pc}
 800e98a:	4603      	mov	r3, r0
 800e98c:	e7f7      	b.n	800e97e <__any_on+0x26>
 800e98e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e992:	2900      	cmp	r1, #0
 800e994:	d0f5      	beq.n	800e982 <__any_on+0x2a>
 800e996:	2001      	movs	r0, #1
 800e998:	e7f6      	b.n	800e988 <__any_on+0x30>

0800e99a <_calloc_r>:
 800e99a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e99c:	fba1 2402 	umull	r2, r4, r1, r2
 800e9a0:	b94c      	cbnz	r4, 800e9b6 <_calloc_r+0x1c>
 800e9a2:	4611      	mov	r1, r2
 800e9a4:	9201      	str	r2, [sp, #4]
 800e9a6:	f7fc f9ad 	bl	800ad04 <_malloc_r>
 800e9aa:	9a01      	ldr	r2, [sp, #4]
 800e9ac:	4605      	mov	r5, r0
 800e9ae:	b930      	cbnz	r0, 800e9be <_calloc_r+0x24>
 800e9b0:	4628      	mov	r0, r5
 800e9b2:	b003      	add	sp, #12
 800e9b4:	bd30      	pop	{r4, r5, pc}
 800e9b6:	220c      	movs	r2, #12
 800e9b8:	6002      	str	r2, [r0, #0]
 800e9ba:	2500      	movs	r5, #0
 800e9bc:	e7f8      	b.n	800e9b0 <_calloc_r+0x16>
 800e9be:	4621      	mov	r1, r4
 800e9c0:	f7fc f977 	bl	800acb2 <memset>
 800e9c4:	e7f4      	b.n	800e9b0 <_calloc_r+0x16>
	...

0800e9c8 <_free_r>:
 800e9c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9ca:	2900      	cmp	r1, #0
 800e9cc:	d044      	beq.n	800ea58 <_free_r+0x90>
 800e9ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9d2:	9001      	str	r0, [sp, #4]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	f1a1 0404 	sub.w	r4, r1, #4
 800e9da:	bfb8      	it	lt
 800e9dc:	18e4      	addlt	r4, r4, r3
 800e9de:	f7ff fb0f 	bl	800e000 <__malloc_lock>
 800e9e2:	4a1e      	ldr	r2, [pc, #120]	; (800ea5c <_free_r+0x94>)
 800e9e4:	9801      	ldr	r0, [sp, #4]
 800e9e6:	6813      	ldr	r3, [r2, #0]
 800e9e8:	b933      	cbnz	r3, 800e9f8 <_free_r+0x30>
 800e9ea:	6063      	str	r3, [r4, #4]
 800e9ec:	6014      	str	r4, [r2, #0]
 800e9ee:	b003      	add	sp, #12
 800e9f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9f4:	f7ff bb0a 	b.w	800e00c <__malloc_unlock>
 800e9f8:	42a3      	cmp	r3, r4
 800e9fa:	d908      	bls.n	800ea0e <_free_r+0x46>
 800e9fc:	6825      	ldr	r5, [r4, #0]
 800e9fe:	1961      	adds	r1, r4, r5
 800ea00:	428b      	cmp	r3, r1
 800ea02:	bf01      	itttt	eq
 800ea04:	6819      	ldreq	r1, [r3, #0]
 800ea06:	685b      	ldreq	r3, [r3, #4]
 800ea08:	1949      	addeq	r1, r1, r5
 800ea0a:	6021      	streq	r1, [r4, #0]
 800ea0c:	e7ed      	b.n	800e9ea <_free_r+0x22>
 800ea0e:	461a      	mov	r2, r3
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	b10b      	cbz	r3, 800ea18 <_free_r+0x50>
 800ea14:	42a3      	cmp	r3, r4
 800ea16:	d9fa      	bls.n	800ea0e <_free_r+0x46>
 800ea18:	6811      	ldr	r1, [r2, #0]
 800ea1a:	1855      	adds	r5, r2, r1
 800ea1c:	42a5      	cmp	r5, r4
 800ea1e:	d10b      	bne.n	800ea38 <_free_r+0x70>
 800ea20:	6824      	ldr	r4, [r4, #0]
 800ea22:	4421      	add	r1, r4
 800ea24:	1854      	adds	r4, r2, r1
 800ea26:	42a3      	cmp	r3, r4
 800ea28:	6011      	str	r1, [r2, #0]
 800ea2a:	d1e0      	bne.n	800e9ee <_free_r+0x26>
 800ea2c:	681c      	ldr	r4, [r3, #0]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	6053      	str	r3, [r2, #4]
 800ea32:	4421      	add	r1, r4
 800ea34:	6011      	str	r1, [r2, #0]
 800ea36:	e7da      	b.n	800e9ee <_free_r+0x26>
 800ea38:	d902      	bls.n	800ea40 <_free_r+0x78>
 800ea3a:	230c      	movs	r3, #12
 800ea3c:	6003      	str	r3, [r0, #0]
 800ea3e:	e7d6      	b.n	800e9ee <_free_r+0x26>
 800ea40:	6825      	ldr	r5, [r4, #0]
 800ea42:	1961      	adds	r1, r4, r5
 800ea44:	428b      	cmp	r3, r1
 800ea46:	bf04      	itt	eq
 800ea48:	6819      	ldreq	r1, [r3, #0]
 800ea4a:	685b      	ldreq	r3, [r3, #4]
 800ea4c:	6063      	str	r3, [r4, #4]
 800ea4e:	bf04      	itt	eq
 800ea50:	1949      	addeq	r1, r1, r5
 800ea52:	6021      	streq	r1, [r4, #0]
 800ea54:	6054      	str	r4, [r2, #4]
 800ea56:	e7ca      	b.n	800e9ee <_free_r+0x26>
 800ea58:	b003      	add	sp, #12
 800ea5a:	bd30      	pop	{r4, r5, pc}
 800ea5c:	20004f3c 	.word	0x20004f3c

0800ea60 <__ssputs_r>:
 800ea60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea64:	688e      	ldr	r6, [r1, #8]
 800ea66:	429e      	cmp	r6, r3
 800ea68:	4682      	mov	sl, r0
 800ea6a:	460c      	mov	r4, r1
 800ea6c:	4690      	mov	r8, r2
 800ea6e:	461f      	mov	r7, r3
 800ea70:	d838      	bhi.n	800eae4 <__ssputs_r+0x84>
 800ea72:	898a      	ldrh	r2, [r1, #12]
 800ea74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea78:	d032      	beq.n	800eae0 <__ssputs_r+0x80>
 800ea7a:	6825      	ldr	r5, [r4, #0]
 800ea7c:	6909      	ldr	r1, [r1, #16]
 800ea7e:	eba5 0901 	sub.w	r9, r5, r1
 800ea82:	6965      	ldr	r5, [r4, #20]
 800ea84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	444b      	add	r3, r9
 800ea90:	106d      	asrs	r5, r5, #1
 800ea92:	429d      	cmp	r5, r3
 800ea94:	bf38      	it	cc
 800ea96:	461d      	movcc	r5, r3
 800ea98:	0553      	lsls	r3, r2, #21
 800ea9a:	d531      	bpl.n	800eb00 <__ssputs_r+0xa0>
 800ea9c:	4629      	mov	r1, r5
 800ea9e:	f7fc f931 	bl	800ad04 <_malloc_r>
 800eaa2:	4606      	mov	r6, r0
 800eaa4:	b950      	cbnz	r0, 800eabc <__ssputs_r+0x5c>
 800eaa6:	230c      	movs	r3, #12
 800eaa8:	f8ca 3000 	str.w	r3, [sl]
 800eaac:	89a3      	ldrh	r3, [r4, #12]
 800eaae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eab2:	81a3      	strh	r3, [r4, #12]
 800eab4:	f04f 30ff 	mov.w	r0, #4294967295
 800eab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eabc:	6921      	ldr	r1, [r4, #16]
 800eabe:	464a      	mov	r2, r9
 800eac0:	f7fc f8e9 	bl	800ac96 <memcpy>
 800eac4:	89a3      	ldrh	r3, [r4, #12]
 800eac6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eaca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eace:	81a3      	strh	r3, [r4, #12]
 800ead0:	6126      	str	r6, [r4, #16]
 800ead2:	6165      	str	r5, [r4, #20]
 800ead4:	444e      	add	r6, r9
 800ead6:	eba5 0509 	sub.w	r5, r5, r9
 800eada:	6026      	str	r6, [r4, #0]
 800eadc:	60a5      	str	r5, [r4, #8]
 800eade:	463e      	mov	r6, r7
 800eae0:	42be      	cmp	r6, r7
 800eae2:	d900      	bls.n	800eae6 <__ssputs_r+0x86>
 800eae4:	463e      	mov	r6, r7
 800eae6:	6820      	ldr	r0, [r4, #0]
 800eae8:	4632      	mov	r2, r6
 800eaea:	4641      	mov	r1, r8
 800eaec:	f000 f982 	bl	800edf4 <memmove>
 800eaf0:	68a3      	ldr	r3, [r4, #8]
 800eaf2:	1b9b      	subs	r3, r3, r6
 800eaf4:	60a3      	str	r3, [r4, #8]
 800eaf6:	6823      	ldr	r3, [r4, #0]
 800eaf8:	4433      	add	r3, r6
 800eafa:	6023      	str	r3, [r4, #0]
 800eafc:	2000      	movs	r0, #0
 800eafe:	e7db      	b.n	800eab8 <__ssputs_r+0x58>
 800eb00:	462a      	mov	r2, r5
 800eb02:	f000 f991 	bl	800ee28 <_realloc_r>
 800eb06:	4606      	mov	r6, r0
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	d1e1      	bne.n	800ead0 <__ssputs_r+0x70>
 800eb0c:	6921      	ldr	r1, [r4, #16]
 800eb0e:	4650      	mov	r0, sl
 800eb10:	f7ff ff5a 	bl	800e9c8 <_free_r>
 800eb14:	e7c7      	b.n	800eaa6 <__ssputs_r+0x46>
	...

0800eb18 <_svfiprintf_r>:
 800eb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb1c:	4698      	mov	r8, r3
 800eb1e:	898b      	ldrh	r3, [r1, #12]
 800eb20:	061b      	lsls	r3, r3, #24
 800eb22:	b09d      	sub	sp, #116	; 0x74
 800eb24:	4607      	mov	r7, r0
 800eb26:	460d      	mov	r5, r1
 800eb28:	4614      	mov	r4, r2
 800eb2a:	d50e      	bpl.n	800eb4a <_svfiprintf_r+0x32>
 800eb2c:	690b      	ldr	r3, [r1, #16]
 800eb2e:	b963      	cbnz	r3, 800eb4a <_svfiprintf_r+0x32>
 800eb30:	2140      	movs	r1, #64	; 0x40
 800eb32:	f7fc f8e7 	bl	800ad04 <_malloc_r>
 800eb36:	6028      	str	r0, [r5, #0]
 800eb38:	6128      	str	r0, [r5, #16]
 800eb3a:	b920      	cbnz	r0, 800eb46 <_svfiprintf_r+0x2e>
 800eb3c:	230c      	movs	r3, #12
 800eb3e:	603b      	str	r3, [r7, #0]
 800eb40:	f04f 30ff 	mov.w	r0, #4294967295
 800eb44:	e0d1      	b.n	800ecea <_svfiprintf_r+0x1d2>
 800eb46:	2340      	movs	r3, #64	; 0x40
 800eb48:	616b      	str	r3, [r5, #20]
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	9309      	str	r3, [sp, #36]	; 0x24
 800eb4e:	2320      	movs	r3, #32
 800eb50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb54:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb58:	2330      	movs	r3, #48	; 0x30
 800eb5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ed04 <_svfiprintf_r+0x1ec>
 800eb5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb62:	f04f 0901 	mov.w	r9, #1
 800eb66:	4623      	mov	r3, r4
 800eb68:	469a      	mov	sl, r3
 800eb6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb6e:	b10a      	cbz	r2, 800eb74 <_svfiprintf_r+0x5c>
 800eb70:	2a25      	cmp	r2, #37	; 0x25
 800eb72:	d1f9      	bne.n	800eb68 <_svfiprintf_r+0x50>
 800eb74:	ebba 0b04 	subs.w	fp, sl, r4
 800eb78:	d00b      	beq.n	800eb92 <_svfiprintf_r+0x7a>
 800eb7a:	465b      	mov	r3, fp
 800eb7c:	4622      	mov	r2, r4
 800eb7e:	4629      	mov	r1, r5
 800eb80:	4638      	mov	r0, r7
 800eb82:	f7ff ff6d 	bl	800ea60 <__ssputs_r>
 800eb86:	3001      	adds	r0, #1
 800eb88:	f000 80aa 	beq.w	800ece0 <_svfiprintf_r+0x1c8>
 800eb8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb8e:	445a      	add	r2, fp
 800eb90:	9209      	str	r2, [sp, #36]	; 0x24
 800eb92:	f89a 3000 	ldrb.w	r3, [sl]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	f000 80a2 	beq.w	800ece0 <_svfiprintf_r+0x1c8>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	f04f 32ff 	mov.w	r2, #4294967295
 800eba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eba6:	f10a 0a01 	add.w	sl, sl, #1
 800ebaa:	9304      	str	r3, [sp, #16]
 800ebac:	9307      	str	r3, [sp, #28]
 800ebae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebb2:	931a      	str	r3, [sp, #104]	; 0x68
 800ebb4:	4654      	mov	r4, sl
 800ebb6:	2205      	movs	r2, #5
 800ebb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebbc:	4851      	ldr	r0, [pc, #324]	; (800ed04 <_svfiprintf_r+0x1ec>)
 800ebbe:	f7f1 fb17 	bl	80001f0 <memchr>
 800ebc2:	9a04      	ldr	r2, [sp, #16]
 800ebc4:	b9d8      	cbnz	r0, 800ebfe <_svfiprintf_r+0xe6>
 800ebc6:	06d0      	lsls	r0, r2, #27
 800ebc8:	bf44      	itt	mi
 800ebca:	2320      	movmi	r3, #32
 800ebcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebd0:	0711      	lsls	r1, r2, #28
 800ebd2:	bf44      	itt	mi
 800ebd4:	232b      	movmi	r3, #43	; 0x2b
 800ebd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebda:	f89a 3000 	ldrb.w	r3, [sl]
 800ebde:	2b2a      	cmp	r3, #42	; 0x2a
 800ebe0:	d015      	beq.n	800ec0e <_svfiprintf_r+0xf6>
 800ebe2:	9a07      	ldr	r2, [sp, #28]
 800ebe4:	4654      	mov	r4, sl
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	f04f 0c0a 	mov.w	ip, #10
 800ebec:	4621      	mov	r1, r4
 800ebee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebf2:	3b30      	subs	r3, #48	; 0x30
 800ebf4:	2b09      	cmp	r3, #9
 800ebf6:	d94e      	bls.n	800ec96 <_svfiprintf_r+0x17e>
 800ebf8:	b1b0      	cbz	r0, 800ec28 <_svfiprintf_r+0x110>
 800ebfa:	9207      	str	r2, [sp, #28]
 800ebfc:	e014      	b.n	800ec28 <_svfiprintf_r+0x110>
 800ebfe:	eba0 0308 	sub.w	r3, r0, r8
 800ec02:	fa09 f303 	lsl.w	r3, r9, r3
 800ec06:	4313      	orrs	r3, r2
 800ec08:	9304      	str	r3, [sp, #16]
 800ec0a:	46a2      	mov	sl, r4
 800ec0c:	e7d2      	b.n	800ebb4 <_svfiprintf_r+0x9c>
 800ec0e:	9b03      	ldr	r3, [sp, #12]
 800ec10:	1d19      	adds	r1, r3, #4
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	9103      	str	r1, [sp, #12]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	bfbb      	ittet	lt
 800ec1a:	425b      	neglt	r3, r3
 800ec1c:	f042 0202 	orrlt.w	r2, r2, #2
 800ec20:	9307      	strge	r3, [sp, #28]
 800ec22:	9307      	strlt	r3, [sp, #28]
 800ec24:	bfb8      	it	lt
 800ec26:	9204      	strlt	r2, [sp, #16]
 800ec28:	7823      	ldrb	r3, [r4, #0]
 800ec2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ec2c:	d10c      	bne.n	800ec48 <_svfiprintf_r+0x130>
 800ec2e:	7863      	ldrb	r3, [r4, #1]
 800ec30:	2b2a      	cmp	r3, #42	; 0x2a
 800ec32:	d135      	bne.n	800eca0 <_svfiprintf_r+0x188>
 800ec34:	9b03      	ldr	r3, [sp, #12]
 800ec36:	1d1a      	adds	r2, r3, #4
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	9203      	str	r2, [sp, #12]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	bfb8      	it	lt
 800ec40:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec44:	3402      	adds	r4, #2
 800ec46:	9305      	str	r3, [sp, #20]
 800ec48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ed14 <_svfiprintf_r+0x1fc>
 800ec4c:	7821      	ldrb	r1, [r4, #0]
 800ec4e:	2203      	movs	r2, #3
 800ec50:	4650      	mov	r0, sl
 800ec52:	f7f1 facd 	bl	80001f0 <memchr>
 800ec56:	b140      	cbz	r0, 800ec6a <_svfiprintf_r+0x152>
 800ec58:	2340      	movs	r3, #64	; 0x40
 800ec5a:	eba0 000a 	sub.w	r0, r0, sl
 800ec5e:	fa03 f000 	lsl.w	r0, r3, r0
 800ec62:	9b04      	ldr	r3, [sp, #16]
 800ec64:	4303      	orrs	r3, r0
 800ec66:	3401      	adds	r4, #1
 800ec68:	9304      	str	r3, [sp, #16]
 800ec6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec6e:	4826      	ldr	r0, [pc, #152]	; (800ed08 <_svfiprintf_r+0x1f0>)
 800ec70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec74:	2206      	movs	r2, #6
 800ec76:	f7f1 fabb 	bl	80001f0 <memchr>
 800ec7a:	2800      	cmp	r0, #0
 800ec7c:	d038      	beq.n	800ecf0 <_svfiprintf_r+0x1d8>
 800ec7e:	4b23      	ldr	r3, [pc, #140]	; (800ed0c <_svfiprintf_r+0x1f4>)
 800ec80:	bb1b      	cbnz	r3, 800ecca <_svfiprintf_r+0x1b2>
 800ec82:	9b03      	ldr	r3, [sp, #12]
 800ec84:	3307      	adds	r3, #7
 800ec86:	f023 0307 	bic.w	r3, r3, #7
 800ec8a:	3308      	adds	r3, #8
 800ec8c:	9303      	str	r3, [sp, #12]
 800ec8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec90:	4433      	add	r3, r6
 800ec92:	9309      	str	r3, [sp, #36]	; 0x24
 800ec94:	e767      	b.n	800eb66 <_svfiprintf_r+0x4e>
 800ec96:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec9a:	460c      	mov	r4, r1
 800ec9c:	2001      	movs	r0, #1
 800ec9e:	e7a5      	b.n	800ebec <_svfiprintf_r+0xd4>
 800eca0:	2300      	movs	r3, #0
 800eca2:	3401      	adds	r4, #1
 800eca4:	9305      	str	r3, [sp, #20]
 800eca6:	4619      	mov	r1, r3
 800eca8:	f04f 0c0a 	mov.w	ip, #10
 800ecac:	4620      	mov	r0, r4
 800ecae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecb2:	3a30      	subs	r2, #48	; 0x30
 800ecb4:	2a09      	cmp	r2, #9
 800ecb6:	d903      	bls.n	800ecc0 <_svfiprintf_r+0x1a8>
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d0c5      	beq.n	800ec48 <_svfiprintf_r+0x130>
 800ecbc:	9105      	str	r1, [sp, #20]
 800ecbe:	e7c3      	b.n	800ec48 <_svfiprintf_r+0x130>
 800ecc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ecc4:	4604      	mov	r4, r0
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	e7f0      	b.n	800ecac <_svfiprintf_r+0x194>
 800ecca:	ab03      	add	r3, sp, #12
 800eccc:	9300      	str	r3, [sp, #0]
 800ecce:	462a      	mov	r2, r5
 800ecd0:	4b0f      	ldr	r3, [pc, #60]	; (800ed10 <_svfiprintf_r+0x1f8>)
 800ecd2:	a904      	add	r1, sp, #16
 800ecd4:	4638      	mov	r0, r7
 800ecd6:	f7fc f929 	bl	800af2c <_printf_float>
 800ecda:	1c42      	adds	r2, r0, #1
 800ecdc:	4606      	mov	r6, r0
 800ecde:	d1d6      	bne.n	800ec8e <_svfiprintf_r+0x176>
 800ece0:	89ab      	ldrh	r3, [r5, #12]
 800ece2:	065b      	lsls	r3, r3, #25
 800ece4:	f53f af2c 	bmi.w	800eb40 <_svfiprintf_r+0x28>
 800ece8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecea:	b01d      	add	sp, #116	; 0x74
 800ecec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecf0:	ab03      	add	r3, sp, #12
 800ecf2:	9300      	str	r3, [sp, #0]
 800ecf4:	462a      	mov	r2, r5
 800ecf6:	4b06      	ldr	r3, [pc, #24]	; (800ed10 <_svfiprintf_r+0x1f8>)
 800ecf8:	a904      	add	r1, sp, #16
 800ecfa:	4638      	mov	r0, r7
 800ecfc:	f7fc fbba 	bl	800b474 <_printf_i>
 800ed00:	e7eb      	b.n	800ecda <_svfiprintf_r+0x1c2>
 800ed02:	bf00      	nop
 800ed04:	080121bc 	.word	0x080121bc
 800ed08:	080121c6 	.word	0x080121c6
 800ed0c:	0800af2d 	.word	0x0800af2d
 800ed10:	0800ea61 	.word	0x0800ea61
 800ed14:	080121c2 	.word	0x080121c2

0800ed18 <_read_r>:
 800ed18:	b538      	push	{r3, r4, r5, lr}
 800ed1a:	4d07      	ldr	r5, [pc, #28]	; (800ed38 <_read_r+0x20>)
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	4608      	mov	r0, r1
 800ed20:	4611      	mov	r1, r2
 800ed22:	2200      	movs	r2, #0
 800ed24:	602a      	str	r2, [r5, #0]
 800ed26:	461a      	mov	r2, r3
 800ed28:	f7f3 f9ec 	bl	8002104 <_read>
 800ed2c:	1c43      	adds	r3, r0, #1
 800ed2e:	d102      	bne.n	800ed36 <_read_r+0x1e>
 800ed30:	682b      	ldr	r3, [r5, #0]
 800ed32:	b103      	cbz	r3, 800ed36 <_read_r+0x1e>
 800ed34:	6023      	str	r3, [r4, #0]
 800ed36:	bd38      	pop	{r3, r4, r5, pc}
 800ed38:	20004f44 	.word	0x20004f44
 800ed3c:	00000000 	.word	0x00000000

0800ed40 <nan>:
 800ed40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ed48 <nan+0x8>
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop
 800ed48:	00000000 	.word	0x00000000
 800ed4c:	7ff80000 	.word	0x7ff80000

0800ed50 <strncmp>:
 800ed50:	b510      	push	{r4, lr}
 800ed52:	b17a      	cbz	r2, 800ed74 <strncmp+0x24>
 800ed54:	4603      	mov	r3, r0
 800ed56:	3901      	subs	r1, #1
 800ed58:	1884      	adds	r4, r0, r2
 800ed5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ed5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ed62:	4290      	cmp	r0, r2
 800ed64:	d101      	bne.n	800ed6a <strncmp+0x1a>
 800ed66:	42a3      	cmp	r3, r4
 800ed68:	d101      	bne.n	800ed6e <strncmp+0x1e>
 800ed6a:	1a80      	subs	r0, r0, r2
 800ed6c:	bd10      	pop	{r4, pc}
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d1f3      	bne.n	800ed5a <strncmp+0xa>
 800ed72:	e7fa      	b.n	800ed6a <strncmp+0x1a>
 800ed74:	4610      	mov	r0, r2
 800ed76:	e7f9      	b.n	800ed6c <strncmp+0x1c>

0800ed78 <__ascii_wctomb>:
 800ed78:	b149      	cbz	r1, 800ed8e <__ascii_wctomb+0x16>
 800ed7a:	2aff      	cmp	r2, #255	; 0xff
 800ed7c:	bf85      	ittet	hi
 800ed7e:	238a      	movhi	r3, #138	; 0x8a
 800ed80:	6003      	strhi	r3, [r0, #0]
 800ed82:	700a      	strbls	r2, [r1, #0]
 800ed84:	f04f 30ff 	movhi.w	r0, #4294967295
 800ed88:	bf98      	it	ls
 800ed8a:	2001      	movls	r0, #1
 800ed8c:	4770      	bx	lr
 800ed8e:	4608      	mov	r0, r1
 800ed90:	4770      	bx	lr
	...

0800ed94 <__assert_func>:
 800ed94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed96:	4614      	mov	r4, r2
 800ed98:	461a      	mov	r2, r3
 800ed9a:	4b09      	ldr	r3, [pc, #36]	; (800edc0 <__assert_func+0x2c>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	4605      	mov	r5, r0
 800eda0:	68d8      	ldr	r0, [r3, #12]
 800eda2:	b14c      	cbz	r4, 800edb8 <__assert_func+0x24>
 800eda4:	4b07      	ldr	r3, [pc, #28]	; (800edc4 <__assert_func+0x30>)
 800eda6:	9100      	str	r1, [sp, #0]
 800eda8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800edac:	4906      	ldr	r1, [pc, #24]	; (800edc8 <__assert_func+0x34>)
 800edae:	462b      	mov	r3, r5
 800edb0:	f000 f80e 	bl	800edd0 <fiprintf>
 800edb4:	f000 fa80 	bl	800f2b8 <abort>
 800edb8:	4b04      	ldr	r3, [pc, #16]	; (800edcc <__assert_func+0x38>)
 800edba:	461c      	mov	r4, r3
 800edbc:	e7f3      	b.n	800eda6 <__assert_func+0x12>
 800edbe:	bf00      	nop
 800edc0:	20000038 	.word	0x20000038
 800edc4:	080121cd 	.word	0x080121cd
 800edc8:	080121da 	.word	0x080121da
 800edcc:	08012208 	.word	0x08012208

0800edd0 <fiprintf>:
 800edd0:	b40e      	push	{r1, r2, r3}
 800edd2:	b503      	push	{r0, r1, lr}
 800edd4:	4601      	mov	r1, r0
 800edd6:	ab03      	add	r3, sp, #12
 800edd8:	4805      	ldr	r0, [pc, #20]	; (800edf0 <fiprintf+0x20>)
 800edda:	f853 2b04 	ldr.w	r2, [r3], #4
 800edde:	6800      	ldr	r0, [r0, #0]
 800ede0:	9301      	str	r3, [sp, #4]
 800ede2:	f000 f879 	bl	800eed8 <_vfiprintf_r>
 800ede6:	b002      	add	sp, #8
 800ede8:	f85d eb04 	ldr.w	lr, [sp], #4
 800edec:	b003      	add	sp, #12
 800edee:	4770      	bx	lr
 800edf0:	20000038 	.word	0x20000038

0800edf4 <memmove>:
 800edf4:	4288      	cmp	r0, r1
 800edf6:	b510      	push	{r4, lr}
 800edf8:	eb01 0402 	add.w	r4, r1, r2
 800edfc:	d902      	bls.n	800ee04 <memmove+0x10>
 800edfe:	4284      	cmp	r4, r0
 800ee00:	4623      	mov	r3, r4
 800ee02:	d807      	bhi.n	800ee14 <memmove+0x20>
 800ee04:	1e43      	subs	r3, r0, #1
 800ee06:	42a1      	cmp	r1, r4
 800ee08:	d008      	beq.n	800ee1c <memmove+0x28>
 800ee0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee12:	e7f8      	b.n	800ee06 <memmove+0x12>
 800ee14:	4402      	add	r2, r0
 800ee16:	4601      	mov	r1, r0
 800ee18:	428a      	cmp	r2, r1
 800ee1a:	d100      	bne.n	800ee1e <memmove+0x2a>
 800ee1c:	bd10      	pop	{r4, pc}
 800ee1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee26:	e7f7      	b.n	800ee18 <memmove+0x24>

0800ee28 <_realloc_r>:
 800ee28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee2c:	4680      	mov	r8, r0
 800ee2e:	4614      	mov	r4, r2
 800ee30:	460e      	mov	r6, r1
 800ee32:	b921      	cbnz	r1, 800ee3e <_realloc_r+0x16>
 800ee34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee38:	4611      	mov	r1, r2
 800ee3a:	f7fb bf63 	b.w	800ad04 <_malloc_r>
 800ee3e:	b92a      	cbnz	r2, 800ee4c <_realloc_r+0x24>
 800ee40:	f7ff fdc2 	bl	800e9c8 <_free_r>
 800ee44:	4625      	mov	r5, r4
 800ee46:	4628      	mov	r0, r5
 800ee48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee4c:	f000 faa0 	bl	800f390 <_malloc_usable_size_r>
 800ee50:	4284      	cmp	r4, r0
 800ee52:	4607      	mov	r7, r0
 800ee54:	d802      	bhi.n	800ee5c <_realloc_r+0x34>
 800ee56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ee5a:	d812      	bhi.n	800ee82 <_realloc_r+0x5a>
 800ee5c:	4621      	mov	r1, r4
 800ee5e:	4640      	mov	r0, r8
 800ee60:	f7fb ff50 	bl	800ad04 <_malloc_r>
 800ee64:	4605      	mov	r5, r0
 800ee66:	2800      	cmp	r0, #0
 800ee68:	d0ed      	beq.n	800ee46 <_realloc_r+0x1e>
 800ee6a:	42bc      	cmp	r4, r7
 800ee6c:	4622      	mov	r2, r4
 800ee6e:	4631      	mov	r1, r6
 800ee70:	bf28      	it	cs
 800ee72:	463a      	movcs	r2, r7
 800ee74:	f7fb ff0f 	bl	800ac96 <memcpy>
 800ee78:	4631      	mov	r1, r6
 800ee7a:	4640      	mov	r0, r8
 800ee7c:	f7ff fda4 	bl	800e9c8 <_free_r>
 800ee80:	e7e1      	b.n	800ee46 <_realloc_r+0x1e>
 800ee82:	4635      	mov	r5, r6
 800ee84:	e7df      	b.n	800ee46 <_realloc_r+0x1e>

0800ee86 <__sfputc_r>:
 800ee86:	6893      	ldr	r3, [r2, #8]
 800ee88:	3b01      	subs	r3, #1
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	b410      	push	{r4}
 800ee8e:	6093      	str	r3, [r2, #8]
 800ee90:	da08      	bge.n	800eea4 <__sfputc_r+0x1e>
 800ee92:	6994      	ldr	r4, [r2, #24]
 800ee94:	42a3      	cmp	r3, r4
 800ee96:	db01      	blt.n	800ee9c <__sfputc_r+0x16>
 800ee98:	290a      	cmp	r1, #10
 800ee9a:	d103      	bne.n	800eea4 <__sfputc_r+0x1e>
 800ee9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eea0:	f000 b94a 	b.w	800f138 <__swbuf_r>
 800eea4:	6813      	ldr	r3, [r2, #0]
 800eea6:	1c58      	adds	r0, r3, #1
 800eea8:	6010      	str	r0, [r2, #0]
 800eeaa:	7019      	strb	r1, [r3, #0]
 800eeac:	4608      	mov	r0, r1
 800eeae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eeb2:	4770      	bx	lr

0800eeb4 <__sfputs_r>:
 800eeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeb6:	4606      	mov	r6, r0
 800eeb8:	460f      	mov	r7, r1
 800eeba:	4614      	mov	r4, r2
 800eebc:	18d5      	adds	r5, r2, r3
 800eebe:	42ac      	cmp	r4, r5
 800eec0:	d101      	bne.n	800eec6 <__sfputs_r+0x12>
 800eec2:	2000      	movs	r0, #0
 800eec4:	e007      	b.n	800eed6 <__sfputs_r+0x22>
 800eec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeca:	463a      	mov	r2, r7
 800eecc:	4630      	mov	r0, r6
 800eece:	f7ff ffda 	bl	800ee86 <__sfputc_r>
 800eed2:	1c43      	adds	r3, r0, #1
 800eed4:	d1f3      	bne.n	800eebe <__sfputs_r+0xa>
 800eed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eed8 <_vfiprintf_r>:
 800eed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eedc:	460d      	mov	r5, r1
 800eede:	b09d      	sub	sp, #116	; 0x74
 800eee0:	4614      	mov	r4, r2
 800eee2:	4698      	mov	r8, r3
 800eee4:	4606      	mov	r6, r0
 800eee6:	b118      	cbz	r0, 800eef0 <_vfiprintf_r+0x18>
 800eee8:	6983      	ldr	r3, [r0, #24]
 800eeea:	b90b      	cbnz	r3, 800eef0 <_vfiprintf_r+0x18>
 800eeec:	f7fb fe0e 	bl	800ab0c <__sinit>
 800eef0:	4b89      	ldr	r3, [pc, #548]	; (800f118 <_vfiprintf_r+0x240>)
 800eef2:	429d      	cmp	r5, r3
 800eef4:	d11b      	bne.n	800ef2e <_vfiprintf_r+0x56>
 800eef6:	6875      	ldr	r5, [r6, #4]
 800eef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eefa:	07d9      	lsls	r1, r3, #31
 800eefc:	d405      	bmi.n	800ef0a <_vfiprintf_r+0x32>
 800eefe:	89ab      	ldrh	r3, [r5, #12]
 800ef00:	059a      	lsls	r2, r3, #22
 800ef02:	d402      	bmi.n	800ef0a <_vfiprintf_r+0x32>
 800ef04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef06:	f7fb fec4 	bl	800ac92 <__retarget_lock_acquire_recursive>
 800ef0a:	89ab      	ldrh	r3, [r5, #12]
 800ef0c:	071b      	lsls	r3, r3, #28
 800ef0e:	d501      	bpl.n	800ef14 <_vfiprintf_r+0x3c>
 800ef10:	692b      	ldr	r3, [r5, #16]
 800ef12:	b9eb      	cbnz	r3, 800ef50 <_vfiprintf_r+0x78>
 800ef14:	4629      	mov	r1, r5
 800ef16:	4630      	mov	r0, r6
 800ef18:	f000 f960 	bl	800f1dc <__swsetup_r>
 800ef1c:	b1c0      	cbz	r0, 800ef50 <_vfiprintf_r+0x78>
 800ef1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef20:	07dc      	lsls	r4, r3, #31
 800ef22:	d50e      	bpl.n	800ef42 <_vfiprintf_r+0x6a>
 800ef24:	f04f 30ff 	mov.w	r0, #4294967295
 800ef28:	b01d      	add	sp, #116	; 0x74
 800ef2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef2e:	4b7b      	ldr	r3, [pc, #492]	; (800f11c <_vfiprintf_r+0x244>)
 800ef30:	429d      	cmp	r5, r3
 800ef32:	d101      	bne.n	800ef38 <_vfiprintf_r+0x60>
 800ef34:	68b5      	ldr	r5, [r6, #8]
 800ef36:	e7df      	b.n	800eef8 <_vfiprintf_r+0x20>
 800ef38:	4b79      	ldr	r3, [pc, #484]	; (800f120 <_vfiprintf_r+0x248>)
 800ef3a:	429d      	cmp	r5, r3
 800ef3c:	bf08      	it	eq
 800ef3e:	68f5      	ldreq	r5, [r6, #12]
 800ef40:	e7da      	b.n	800eef8 <_vfiprintf_r+0x20>
 800ef42:	89ab      	ldrh	r3, [r5, #12]
 800ef44:	0598      	lsls	r0, r3, #22
 800ef46:	d4ed      	bmi.n	800ef24 <_vfiprintf_r+0x4c>
 800ef48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef4a:	f7fb fea3 	bl	800ac94 <__retarget_lock_release_recursive>
 800ef4e:	e7e9      	b.n	800ef24 <_vfiprintf_r+0x4c>
 800ef50:	2300      	movs	r3, #0
 800ef52:	9309      	str	r3, [sp, #36]	; 0x24
 800ef54:	2320      	movs	r3, #32
 800ef56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef5e:	2330      	movs	r3, #48	; 0x30
 800ef60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f124 <_vfiprintf_r+0x24c>
 800ef64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef68:	f04f 0901 	mov.w	r9, #1
 800ef6c:	4623      	mov	r3, r4
 800ef6e:	469a      	mov	sl, r3
 800ef70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef74:	b10a      	cbz	r2, 800ef7a <_vfiprintf_r+0xa2>
 800ef76:	2a25      	cmp	r2, #37	; 0x25
 800ef78:	d1f9      	bne.n	800ef6e <_vfiprintf_r+0x96>
 800ef7a:	ebba 0b04 	subs.w	fp, sl, r4
 800ef7e:	d00b      	beq.n	800ef98 <_vfiprintf_r+0xc0>
 800ef80:	465b      	mov	r3, fp
 800ef82:	4622      	mov	r2, r4
 800ef84:	4629      	mov	r1, r5
 800ef86:	4630      	mov	r0, r6
 800ef88:	f7ff ff94 	bl	800eeb4 <__sfputs_r>
 800ef8c:	3001      	adds	r0, #1
 800ef8e:	f000 80aa 	beq.w	800f0e6 <_vfiprintf_r+0x20e>
 800ef92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef94:	445a      	add	r2, fp
 800ef96:	9209      	str	r2, [sp, #36]	; 0x24
 800ef98:	f89a 3000 	ldrb.w	r3, [sl]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	f000 80a2 	beq.w	800f0e6 <_vfiprintf_r+0x20e>
 800efa2:	2300      	movs	r3, #0
 800efa4:	f04f 32ff 	mov.w	r2, #4294967295
 800efa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efac:	f10a 0a01 	add.w	sl, sl, #1
 800efb0:	9304      	str	r3, [sp, #16]
 800efb2:	9307      	str	r3, [sp, #28]
 800efb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efb8:	931a      	str	r3, [sp, #104]	; 0x68
 800efba:	4654      	mov	r4, sl
 800efbc:	2205      	movs	r2, #5
 800efbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efc2:	4858      	ldr	r0, [pc, #352]	; (800f124 <_vfiprintf_r+0x24c>)
 800efc4:	f7f1 f914 	bl	80001f0 <memchr>
 800efc8:	9a04      	ldr	r2, [sp, #16]
 800efca:	b9d8      	cbnz	r0, 800f004 <_vfiprintf_r+0x12c>
 800efcc:	06d1      	lsls	r1, r2, #27
 800efce:	bf44      	itt	mi
 800efd0:	2320      	movmi	r3, #32
 800efd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efd6:	0713      	lsls	r3, r2, #28
 800efd8:	bf44      	itt	mi
 800efda:	232b      	movmi	r3, #43	; 0x2b
 800efdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efe0:	f89a 3000 	ldrb.w	r3, [sl]
 800efe4:	2b2a      	cmp	r3, #42	; 0x2a
 800efe6:	d015      	beq.n	800f014 <_vfiprintf_r+0x13c>
 800efe8:	9a07      	ldr	r2, [sp, #28]
 800efea:	4654      	mov	r4, sl
 800efec:	2000      	movs	r0, #0
 800efee:	f04f 0c0a 	mov.w	ip, #10
 800eff2:	4621      	mov	r1, r4
 800eff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eff8:	3b30      	subs	r3, #48	; 0x30
 800effa:	2b09      	cmp	r3, #9
 800effc:	d94e      	bls.n	800f09c <_vfiprintf_r+0x1c4>
 800effe:	b1b0      	cbz	r0, 800f02e <_vfiprintf_r+0x156>
 800f000:	9207      	str	r2, [sp, #28]
 800f002:	e014      	b.n	800f02e <_vfiprintf_r+0x156>
 800f004:	eba0 0308 	sub.w	r3, r0, r8
 800f008:	fa09 f303 	lsl.w	r3, r9, r3
 800f00c:	4313      	orrs	r3, r2
 800f00e:	9304      	str	r3, [sp, #16]
 800f010:	46a2      	mov	sl, r4
 800f012:	e7d2      	b.n	800efba <_vfiprintf_r+0xe2>
 800f014:	9b03      	ldr	r3, [sp, #12]
 800f016:	1d19      	adds	r1, r3, #4
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	9103      	str	r1, [sp, #12]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	bfbb      	ittet	lt
 800f020:	425b      	neglt	r3, r3
 800f022:	f042 0202 	orrlt.w	r2, r2, #2
 800f026:	9307      	strge	r3, [sp, #28]
 800f028:	9307      	strlt	r3, [sp, #28]
 800f02a:	bfb8      	it	lt
 800f02c:	9204      	strlt	r2, [sp, #16]
 800f02e:	7823      	ldrb	r3, [r4, #0]
 800f030:	2b2e      	cmp	r3, #46	; 0x2e
 800f032:	d10c      	bne.n	800f04e <_vfiprintf_r+0x176>
 800f034:	7863      	ldrb	r3, [r4, #1]
 800f036:	2b2a      	cmp	r3, #42	; 0x2a
 800f038:	d135      	bne.n	800f0a6 <_vfiprintf_r+0x1ce>
 800f03a:	9b03      	ldr	r3, [sp, #12]
 800f03c:	1d1a      	adds	r2, r3, #4
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	9203      	str	r2, [sp, #12]
 800f042:	2b00      	cmp	r3, #0
 800f044:	bfb8      	it	lt
 800f046:	f04f 33ff 	movlt.w	r3, #4294967295
 800f04a:	3402      	adds	r4, #2
 800f04c:	9305      	str	r3, [sp, #20]
 800f04e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f134 <_vfiprintf_r+0x25c>
 800f052:	7821      	ldrb	r1, [r4, #0]
 800f054:	2203      	movs	r2, #3
 800f056:	4650      	mov	r0, sl
 800f058:	f7f1 f8ca 	bl	80001f0 <memchr>
 800f05c:	b140      	cbz	r0, 800f070 <_vfiprintf_r+0x198>
 800f05e:	2340      	movs	r3, #64	; 0x40
 800f060:	eba0 000a 	sub.w	r0, r0, sl
 800f064:	fa03 f000 	lsl.w	r0, r3, r0
 800f068:	9b04      	ldr	r3, [sp, #16]
 800f06a:	4303      	orrs	r3, r0
 800f06c:	3401      	adds	r4, #1
 800f06e:	9304      	str	r3, [sp, #16]
 800f070:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f074:	482c      	ldr	r0, [pc, #176]	; (800f128 <_vfiprintf_r+0x250>)
 800f076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f07a:	2206      	movs	r2, #6
 800f07c:	f7f1 f8b8 	bl	80001f0 <memchr>
 800f080:	2800      	cmp	r0, #0
 800f082:	d03f      	beq.n	800f104 <_vfiprintf_r+0x22c>
 800f084:	4b29      	ldr	r3, [pc, #164]	; (800f12c <_vfiprintf_r+0x254>)
 800f086:	bb1b      	cbnz	r3, 800f0d0 <_vfiprintf_r+0x1f8>
 800f088:	9b03      	ldr	r3, [sp, #12]
 800f08a:	3307      	adds	r3, #7
 800f08c:	f023 0307 	bic.w	r3, r3, #7
 800f090:	3308      	adds	r3, #8
 800f092:	9303      	str	r3, [sp, #12]
 800f094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f096:	443b      	add	r3, r7
 800f098:	9309      	str	r3, [sp, #36]	; 0x24
 800f09a:	e767      	b.n	800ef6c <_vfiprintf_r+0x94>
 800f09c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0a0:	460c      	mov	r4, r1
 800f0a2:	2001      	movs	r0, #1
 800f0a4:	e7a5      	b.n	800eff2 <_vfiprintf_r+0x11a>
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	3401      	adds	r4, #1
 800f0aa:	9305      	str	r3, [sp, #20]
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	f04f 0c0a 	mov.w	ip, #10
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0b8:	3a30      	subs	r2, #48	; 0x30
 800f0ba:	2a09      	cmp	r2, #9
 800f0bc:	d903      	bls.n	800f0c6 <_vfiprintf_r+0x1ee>
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d0c5      	beq.n	800f04e <_vfiprintf_r+0x176>
 800f0c2:	9105      	str	r1, [sp, #20]
 800f0c4:	e7c3      	b.n	800f04e <_vfiprintf_r+0x176>
 800f0c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	e7f0      	b.n	800f0b2 <_vfiprintf_r+0x1da>
 800f0d0:	ab03      	add	r3, sp, #12
 800f0d2:	9300      	str	r3, [sp, #0]
 800f0d4:	462a      	mov	r2, r5
 800f0d6:	4b16      	ldr	r3, [pc, #88]	; (800f130 <_vfiprintf_r+0x258>)
 800f0d8:	a904      	add	r1, sp, #16
 800f0da:	4630      	mov	r0, r6
 800f0dc:	f7fb ff26 	bl	800af2c <_printf_float>
 800f0e0:	4607      	mov	r7, r0
 800f0e2:	1c78      	adds	r0, r7, #1
 800f0e4:	d1d6      	bne.n	800f094 <_vfiprintf_r+0x1bc>
 800f0e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0e8:	07d9      	lsls	r1, r3, #31
 800f0ea:	d405      	bmi.n	800f0f8 <_vfiprintf_r+0x220>
 800f0ec:	89ab      	ldrh	r3, [r5, #12]
 800f0ee:	059a      	lsls	r2, r3, #22
 800f0f0:	d402      	bmi.n	800f0f8 <_vfiprintf_r+0x220>
 800f0f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0f4:	f7fb fdce 	bl	800ac94 <__retarget_lock_release_recursive>
 800f0f8:	89ab      	ldrh	r3, [r5, #12]
 800f0fa:	065b      	lsls	r3, r3, #25
 800f0fc:	f53f af12 	bmi.w	800ef24 <_vfiprintf_r+0x4c>
 800f100:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f102:	e711      	b.n	800ef28 <_vfiprintf_r+0x50>
 800f104:	ab03      	add	r3, sp, #12
 800f106:	9300      	str	r3, [sp, #0]
 800f108:	462a      	mov	r2, r5
 800f10a:	4b09      	ldr	r3, [pc, #36]	; (800f130 <_vfiprintf_r+0x258>)
 800f10c:	a904      	add	r1, sp, #16
 800f10e:	4630      	mov	r0, r6
 800f110:	f7fc f9b0 	bl	800b474 <_printf_i>
 800f114:	e7e4      	b.n	800f0e0 <_vfiprintf_r+0x208>
 800f116:	bf00      	nop
 800f118:	08011d88 	.word	0x08011d88
 800f11c:	08011da8 	.word	0x08011da8
 800f120:	08011d68 	.word	0x08011d68
 800f124:	080121bc 	.word	0x080121bc
 800f128:	080121c6 	.word	0x080121c6
 800f12c:	0800af2d 	.word	0x0800af2d
 800f130:	0800eeb5 	.word	0x0800eeb5
 800f134:	080121c2 	.word	0x080121c2

0800f138 <__swbuf_r>:
 800f138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f13a:	460e      	mov	r6, r1
 800f13c:	4614      	mov	r4, r2
 800f13e:	4605      	mov	r5, r0
 800f140:	b118      	cbz	r0, 800f14a <__swbuf_r+0x12>
 800f142:	6983      	ldr	r3, [r0, #24]
 800f144:	b90b      	cbnz	r3, 800f14a <__swbuf_r+0x12>
 800f146:	f7fb fce1 	bl	800ab0c <__sinit>
 800f14a:	4b21      	ldr	r3, [pc, #132]	; (800f1d0 <__swbuf_r+0x98>)
 800f14c:	429c      	cmp	r4, r3
 800f14e:	d12b      	bne.n	800f1a8 <__swbuf_r+0x70>
 800f150:	686c      	ldr	r4, [r5, #4]
 800f152:	69a3      	ldr	r3, [r4, #24]
 800f154:	60a3      	str	r3, [r4, #8]
 800f156:	89a3      	ldrh	r3, [r4, #12]
 800f158:	071a      	lsls	r2, r3, #28
 800f15a:	d52f      	bpl.n	800f1bc <__swbuf_r+0x84>
 800f15c:	6923      	ldr	r3, [r4, #16]
 800f15e:	b36b      	cbz	r3, 800f1bc <__swbuf_r+0x84>
 800f160:	6923      	ldr	r3, [r4, #16]
 800f162:	6820      	ldr	r0, [r4, #0]
 800f164:	1ac0      	subs	r0, r0, r3
 800f166:	6963      	ldr	r3, [r4, #20]
 800f168:	b2f6      	uxtb	r6, r6
 800f16a:	4283      	cmp	r3, r0
 800f16c:	4637      	mov	r7, r6
 800f16e:	dc04      	bgt.n	800f17a <__swbuf_r+0x42>
 800f170:	4621      	mov	r1, r4
 800f172:	4628      	mov	r0, r5
 800f174:	f7fe fb68 	bl	800d848 <_fflush_r>
 800f178:	bb30      	cbnz	r0, 800f1c8 <__swbuf_r+0x90>
 800f17a:	68a3      	ldr	r3, [r4, #8]
 800f17c:	3b01      	subs	r3, #1
 800f17e:	60a3      	str	r3, [r4, #8]
 800f180:	6823      	ldr	r3, [r4, #0]
 800f182:	1c5a      	adds	r2, r3, #1
 800f184:	6022      	str	r2, [r4, #0]
 800f186:	701e      	strb	r6, [r3, #0]
 800f188:	6963      	ldr	r3, [r4, #20]
 800f18a:	3001      	adds	r0, #1
 800f18c:	4283      	cmp	r3, r0
 800f18e:	d004      	beq.n	800f19a <__swbuf_r+0x62>
 800f190:	89a3      	ldrh	r3, [r4, #12]
 800f192:	07db      	lsls	r3, r3, #31
 800f194:	d506      	bpl.n	800f1a4 <__swbuf_r+0x6c>
 800f196:	2e0a      	cmp	r6, #10
 800f198:	d104      	bne.n	800f1a4 <__swbuf_r+0x6c>
 800f19a:	4621      	mov	r1, r4
 800f19c:	4628      	mov	r0, r5
 800f19e:	f7fe fb53 	bl	800d848 <_fflush_r>
 800f1a2:	b988      	cbnz	r0, 800f1c8 <__swbuf_r+0x90>
 800f1a4:	4638      	mov	r0, r7
 800f1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1a8:	4b0a      	ldr	r3, [pc, #40]	; (800f1d4 <__swbuf_r+0x9c>)
 800f1aa:	429c      	cmp	r4, r3
 800f1ac:	d101      	bne.n	800f1b2 <__swbuf_r+0x7a>
 800f1ae:	68ac      	ldr	r4, [r5, #8]
 800f1b0:	e7cf      	b.n	800f152 <__swbuf_r+0x1a>
 800f1b2:	4b09      	ldr	r3, [pc, #36]	; (800f1d8 <__swbuf_r+0xa0>)
 800f1b4:	429c      	cmp	r4, r3
 800f1b6:	bf08      	it	eq
 800f1b8:	68ec      	ldreq	r4, [r5, #12]
 800f1ba:	e7ca      	b.n	800f152 <__swbuf_r+0x1a>
 800f1bc:	4621      	mov	r1, r4
 800f1be:	4628      	mov	r0, r5
 800f1c0:	f000 f80c 	bl	800f1dc <__swsetup_r>
 800f1c4:	2800      	cmp	r0, #0
 800f1c6:	d0cb      	beq.n	800f160 <__swbuf_r+0x28>
 800f1c8:	f04f 37ff 	mov.w	r7, #4294967295
 800f1cc:	e7ea      	b.n	800f1a4 <__swbuf_r+0x6c>
 800f1ce:	bf00      	nop
 800f1d0:	08011d88 	.word	0x08011d88
 800f1d4:	08011da8 	.word	0x08011da8
 800f1d8:	08011d68 	.word	0x08011d68

0800f1dc <__swsetup_r>:
 800f1dc:	4b32      	ldr	r3, [pc, #200]	; (800f2a8 <__swsetup_r+0xcc>)
 800f1de:	b570      	push	{r4, r5, r6, lr}
 800f1e0:	681d      	ldr	r5, [r3, #0]
 800f1e2:	4606      	mov	r6, r0
 800f1e4:	460c      	mov	r4, r1
 800f1e6:	b125      	cbz	r5, 800f1f2 <__swsetup_r+0x16>
 800f1e8:	69ab      	ldr	r3, [r5, #24]
 800f1ea:	b913      	cbnz	r3, 800f1f2 <__swsetup_r+0x16>
 800f1ec:	4628      	mov	r0, r5
 800f1ee:	f7fb fc8d 	bl	800ab0c <__sinit>
 800f1f2:	4b2e      	ldr	r3, [pc, #184]	; (800f2ac <__swsetup_r+0xd0>)
 800f1f4:	429c      	cmp	r4, r3
 800f1f6:	d10f      	bne.n	800f218 <__swsetup_r+0x3c>
 800f1f8:	686c      	ldr	r4, [r5, #4]
 800f1fa:	89a3      	ldrh	r3, [r4, #12]
 800f1fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f200:	0719      	lsls	r1, r3, #28
 800f202:	d42c      	bmi.n	800f25e <__swsetup_r+0x82>
 800f204:	06dd      	lsls	r5, r3, #27
 800f206:	d411      	bmi.n	800f22c <__swsetup_r+0x50>
 800f208:	2309      	movs	r3, #9
 800f20a:	6033      	str	r3, [r6, #0]
 800f20c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f210:	81a3      	strh	r3, [r4, #12]
 800f212:	f04f 30ff 	mov.w	r0, #4294967295
 800f216:	e03e      	b.n	800f296 <__swsetup_r+0xba>
 800f218:	4b25      	ldr	r3, [pc, #148]	; (800f2b0 <__swsetup_r+0xd4>)
 800f21a:	429c      	cmp	r4, r3
 800f21c:	d101      	bne.n	800f222 <__swsetup_r+0x46>
 800f21e:	68ac      	ldr	r4, [r5, #8]
 800f220:	e7eb      	b.n	800f1fa <__swsetup_r+0x1e>
 800f222:	4b24      	ldr	r3, [pc, #144]	; (800f2b4 <__swsetup_r+0xd8>)
 800f224:	429c      	cmp	r4, r3
 800f226:	bf08      	it	eq
 800f228:	68ec      	ldreq	r4, [r5, #12]
 800f22a:	e7e6      	b.n	800f1fa <__swsetup_r+0x1e>
 800f22c:	0758      	lsls	r0, r3, #29
 800f22e:	d512      	bpl.n	800f256 <__swsetup_r+0x7a>
 800f230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f232:	b141      	cbz	r1, 800f246 <__swsetup_r+0x6a>
 800f234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f238:	4299      	cmp	r1, r3
 800f23a:	d002      	beq.n	800f242 <__swsetup_r+0x66>
 800f23c:	4630      	mov	r0, r6
 800f23e:	f7ff fbc3 	bl	800e9c8 <_free_r>
 800f242:	2300      	movs	r3, #0
 800f244:	6363      	str	r3, [r4, #52]	; 0x34
 800f246:	89a3      	ldrh	r3, [r4, #12]
 800f248:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f24c:	81a3      	strh	r3, [r4, #12]
 800f24e:	2300      	movs	r3, #0
 800f250:	6063      	str	r3, [r4, #4]
 800f252:	6923      	ldr	r3, [r4, #16]
 800f254:	6023      	str	r3, [r4, #0]
 800f256:	89a3      	ldrh	r3, [r4, #12]
 800f258:	f043 0308 	orr.w	r3, r3, #8
 800f25c:	81a3      	strh	r3, [r4, #12]
 800f25e:	6923      	ldr	r3, [r4, #16]
 800f260:	b94b      	cbnz	r3, 800f276 <__swsetup_r+0x9a>
 800f262:	89a3      	ldrh	r3, [r4, #12]
 800f264:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f26c:	d003      	beq.n	800f276 <__swsetup_r+0x9a>
 800f26e:	4621      	mov	r1, r4
 800f270:	4630      	mov	r0, r6
 800f272:	f000 f84d 	bl	800f310 <__smakebuf_r>
 800f276:	89a0      	ldrh	r0, [r4, #12]
 800f278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f27c:	f010 0301 	ands.w	r3, r0, #1
 800f280:	d00a      	beq.n	800f298 <__swsetup_r+0xbc>
 800f282:	2300      	movs	r3, #0
 800f284:	60a3      	str	r3, [r4, #8]
 800f286:	6963      	ldr	r3, [r4, #20]
 800f288:	425b      	negs	r3, r3
 800f28a:	61a3      	str	r3, [r4, #24]
 800f28c:	6923      	ldr	r3, [r4, #16]
 800f28e:	b943      	cbnz	r3, 800f2a2 <__swsetup_r+0xc6>
 800f290:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f294:	d1ba      	bne.n	800f20c <__swsetup_r+0x30>
 800f296:	bd70      	pop	{r4, r5, r6, pc}
 800f298:	0781      	lsls	r1, r0, #30
 800f29a:	bf58      	it	pl
 800f29c:	6963      	ldrpl	r3, [r4, #20]
 800f29e:	60a3      	str	r3, [r4, #8]
 800f2a0:	e7f4      	b.n	800f28c <__swsetup_r+0xb0>
 800f2a2:	2000      	movs	r0, #0
 800f2a4:	e7f7      	b.n	800f296 <__swsetup_r+0xba>
 800f2a6:	bf00      	nop
 800f2a8:	20000038 	.word	0x20000038
 800f2ac:	08011d88 	.word	0x08011d88
 800f2b0:	08011da8 	.word	0x08011da8
 800f2b4:	08011d68 	.word	0x08011d68

0800f2b8 <abort>:
 800f2b8:	b508      	push	{r3, lr}
 800f2ba:	2006      	movs	r0, #6
 800f2bc:	f000 f898 	bl	800f3f0 <raise>
 800f2c0:	2001      	movs	r0, #1
 800f2c2:	f7f2 ff15 	bl	80020f0 <_exit>

0800f2c6 <__swhatbuf_r>:
 800f2c6:	b570      	push	{r4, r5, r6, lr}
 800f2c8:	460e      	mov	r6, r1
 800f2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2ce:	2900      	cmp	r1, #0
 800f2d0:	b096      	sub	sp, #88	; 0x58
 800f2d2:	4614      	mov	r4, r2
 800f2d4:	461d      	mov	r5, r3
 800f2d6:	da08      	bge.n	800f2ea <__swhatbuf_r+0x24>
 800f2d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f2dc:	2200      	movs	r2, #0
 800f2de:	602a      	str	r2, [r5, #0]
 800f2e0:	061a      	lsls	r2, r3, #24
 800f2e2:	d410      	bmi.n	800f306 <__swhatbuf_r+0x40>
 800f2e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2e8:	e00e      	b.n	800f308 <__swhatbuf_r+0x42>
 800f2ea:	466a      	mov	r2, sp
 800f2ec:	f000 f89c 	bl	800f428 <_fstat_r>
 800f2f0:	2800      	cmp	r0, #0
 800f2f2:	dbf1      	blt.n	800f2d8 <__swhatbuf_r+0x12>
 800f2f4:	9a01      	ldr	r2, [sp, #4]
 800f2f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f2fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f2fe:	425a      	negs	r2, r3
 800f300:	415a      	adcs	r2, r3
 800f302:	602a      	str	r2, [r5, #0]
 800f304:	e7ee      	b.n	800f2e4 <__swhatbuf_r+0x1e>
 800f306:	2340      	movs	r3, #64	; 0x40
 800f308:	2000      	movs	r0, #0
 800f30a:	6023      	str	r3, [r4, #0]
 800f30c:	b016      	add	sp, #88	; 0x58
 800f30e:	bd70      	pop	{r4, r5, r6, pc}

0800f310 <__smakebuf_r>:
 800f310:	898b      	ldrh	r3, [r1, #12]
 800f312:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f314:	079d      	lsls	r5, r3, #30
 800f316:	4606      	mov	r6, r0
 800f318:	460c      	mov	r4, r1
 800f31a:	d507      	bpl.n	800f32c <__smakebuf_r+0x1c>
 800f31c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f320:	6023      	str	r3, [r4, #0]
 800f322:	6123      	str	r3, [r4, #16]
 800f324:	2301      	movs	r3, #1
 800f326:	6163      	str	r3, [r4, #20]
 800f328:	b002      	add	sp, #8
 800f32a:	bd70      	pop	{r4, r5, r6, pc}
 800f32c:	ab01      	add	r3, sp, #4
 800f32e:	466a      	mov	r2, sp
 800f330:	f7ff ffc9 	bl	800f2c6 <__swhatbuf_r>
 800f334:	9900      	ldr	r1, [sp, #0]
 800f336:	4605      	mov	r5, r0
 800f338:	4630      	mov	r0, r6
 800f33a:	f7fb fce3 	bl	800ad04 <_malloc_r>
 800f33e:	b948      	cbnz	r0, 800f354 <__smakebuf_r+0x44>
 800f340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f344:	059a      	lsls	r2, r3, #22
 800f346:	d4ef      	bmi.n	800f328 <__smakebuf_r+0x18>
 800f348:	f023 0303 	bic.w	r3, r3, #3
 800f34c:	f043 0302 	orr.w	r3, r3, #2
 800f350:	81a3      	strh	r3, [r4, #12]
 800f352:	e7e3      	b.n	800f31c <__smakebuf_r+0xc>
 800f354:	4b0d      	ldr	r3, [pc, #52]	; (800f38c <__smakebuf_r+0x7c>)
 800f356:	62b3      	str	r3, [r6, #40]	; 0x28
 800f358:	89a3      	ldrh	r3, [r4, #12]
 800f35a:	6020      	str	r0, [r4, #0]
 800f35c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f360:	81a3      	strh	r3, [r4, #12]
 800f362:	9b00      	ldr	r3, [sp, #0]
 800f364:	6163      	str	r3, [r4, #20]
 800f366:	9b01      	ldr	r3, [sp, #4]
 800f368:	6120      	str	r0, [r4, #16]
 800f36a:	b15b      	cbz	r3, 800f384 <__smakebuf_r+0x74>
 800f36c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f370:	4630      	mov	r0, r6
 800f372:	f000 f86b 	bl	800f44c <_isatty_r>
 800f376:	b128      	cbz	r0, 800f384 <__smakebuf_r+0x74>
 800f378:	89a3      	ldrh	r3, [r4, #12]
 800f37a:	f023 0303 	bic.w	r3, r3, #3
 800f37e:	f043 0301 	orr.w	r3, r3, #1
 800f382:	81a3      	strh	r3, [r4, #12]
 800f384:	89a0      	ldrh	r0, [r4, #12]
 800f386:	4305      	orrs	r5, r0
 800f388:	81a5      	strh	r5, [r4, #12]
 800f38a:	e7cd      	b.n	800f328 <__smakebuf_r+0x18>
 800f38c:	0800aaa5 	.word	0x0800aaa5

0800f390 <_malloc_usable_size_r>:
 800f390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f394:	1f18      	subs	r0, r3, #4
 800f396:	2b00      	cmp	r3, #0
 800f398:	bfbc      	itt	lt
 800f39a:	580b      	ldrlt	r3, [r1, r0]
 800f39c:	18c0      	addlt	r0, r0, r3
 800f39e:	4770      	bx	lr

0800f3a0 <_raise_r>:
 800f3a0:	291f      	cmp	r1, #31
 800f3a2:	b538      	push	{r3, r4, r5, lr}
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	460d      	mov	r5, r1
 800f3a8:	d904      	bls.n	800f3b4 <_raise_r+0x14>
 800f3aa:	2316      	movs	r3, #22
 800f3ac:	6003      	str	r3, [r0, #0]
 800f3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f3b2:	bd38      	pop	{r3, r4, r5, pc}
 800f3b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f3b6:	b112      	cbz	r2, 800f3be <_raise_r+0x1e>
 800f3b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f3bc:	b94b      	cbnz	r3, 800f3d2 <_raise_r+0x32>
 800f3be:	4620      	mov	r0, r4
 800f3c0:	f000 f830 	bl	800f424 <_getpid_r>
 800f3c4:	462a      	mov	r2, r5
 800f3c6:	4601      	mov	r1, r0
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3ce:	f000 b817 	b.w	800f400 <_kill_r>
 800f3d2:	2b01      	cmp	r3, #1
 800f3d4:	d00a      	beq.n	800f3ec <_raise_r+0x4c>
 800f3d6:	1c59      	adds	r1, r3, #1
 800f3d8:	d103      	bne.n	800f3e2 <_raise_r+0x42>
 800f3da:	2316      	movs	r3, #22
 800f3dc:	6003      	str	r3, [r0, #0]
 800f3de:	2001      	movs	r0, #1
 800f3e0:	e7e7      	b.n	800f3b2 <_raise_r+0x12>
 800f3e2:	2400      	movs	r4, #0
 800f3e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f3e8:	4628      	mov	r0, r5
 800f3ea:	4798      	blx	r3
 800f3ec:	2000      	movs	r0, #0
 800f3ee:	e7e0      	b.n	800f3b2 <_raise_r+0x12>

0800f3f0 <raise>:
 800f3f0:	4b02      	ldr	r3, [pc, #8]	; (800f3fc <raise+0xc>)
 800f3f2:	4601      	mov	r1, r0
 800f3f4:	6818      	ldr	r0, [r3, #0]
 800f3f6:	f7ff bfd3 	b.w	800f3a0 <_raise_r>
 800f3fa:	bf00      	nop
 800f3fc:	20000038 	.word	0x20000038

0800f400 <_kill_r>:
 800f400:	b538      	push	{r3, r4, r5, lr}
 800f402:	4d07      	ldr	r5, [pc, #28]	; (800f420 <_kill_r+0x20>)
 800f404:	2300      	movs	r3, #0
 800f406:	4604      	mov	r4, r0
 800f408:	4608      	mov	r0, r1
 800f40a:	4611      	mov	r1, r2
 800f40c:	602b      	str	r3, [r5, #0]
 800f40e:	f7f2 fe5f 	bl	80020d0 <_kill>
 800f412:	1c43      	adds	r3, r0, #1
 800f414:	d102      	bne.n	800f41c <_kill_r+0x1c>
 800f416:	682b      	ldr	r3, [r5, #0]
 800f418:	b103      	cbz	r3, 800f41c <_kill_r+0x1c>
 800f41a:	6023      	str	r3, [r4, #0]
 800f41c:	bd38      	pop	{r3, r4, r5, pc}
 800f41e:	bf00      	nop
 800f420:	20004f44 	.word	0x20004f44

0800f424 <_getpid_r>:
 800f424:	f7f2 be4c 	b.w	80020c0 <_getpid>

0800f428 <_fstat_r>:
 800f428:	b538      	push	{r3, r4, r5, lr}
 800f42a:	4d07      	ldr	r5, [pc, #28]	; (800f448 <_fstat_r+0x20>)
 800f42c:	2300      	movs	r3, #0
 800f42e:	4604      	mov	r4, r0
 800f430:	4608      	mov	r0, r1
 800f432:	4611      	mov	r1, r2
 800f434:	602b      	str	r3, [r5, #0]
 800f436:	f7f2 feaa 	bl	800218e <_fstat>
 800f43a:	1c43      	adds	r3, r0, #1
 800f43c:	d102      	bne.n	800f444 <_fstat_r+0x1c>
 800f43e:	682b      	ldr	r3, [r5, #0]
 800f440:	b103      	cbz	r3, 800f444 <_fstat_r+0x1c>
 800f442:	6023      	str	r3, [r4, #0]
 800f444:	bd38      	pop	{r3, r4, r5, pc}
 800f446:	bf00      	nop
 800f448:	20004f44 	.word	0x20004f44

0800f44c <_isatty_r>:
 800f44c:	b538      	push	{r3, r4, r5, lr}
 800f44e:	4d06      	ldr	r5, [pc, #24]	; (800f468 <_isatty_r+0x1c>)
 800f450:	2300      	movs	r3, #0
 800f452:	4604      	mov	r4, r0
 800f454:	4608      	mov	r0, r1
 800f456:	602b      	str	r3, [r5, #0]
 800f458:	f7f2 fea9 	bl	80021ae <_isatty>
 800f45c:	1c43      	adds	r3, r0, #1
 800f45e:	d102      	bne.n	800f466 <_isatty_r+0x1a>
 800f460:	682b      	ldr	r3, [r5, #0]
 800f462:	b103      	cbz	r3, 800f466 <_isatty_r+0x1a>
 800f464:	6023      	str	r3, [r4, #0]
 800f466:	bd38      	pop	{r3, r4, r5, pc}
 800f468:	20004f44 	.word	0x20004f44

0800f46c <pow>:
 800f46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f46e:	ed2d 8b02 	vpush	{d8}
 800f472:	eeb0 8a40 	vmov.f32	s16, s0
 800f476:	eef0 8a60 	vmov.f32	s17, s1
 800f47a:	ec55 4b11 	vmov	r4, r5, d1
 800f47e:	f000 f867 	bl	800f550 <__ieee754_pow>
 800f482:	4622      	mov	r2, r4
 800f484:	462b      	mov	r3, r5
 800f486:	4620      	mov	r0, r4
 800f488:	4629      	mov	r1, r5
 800f48a:	ec57 6b10 	vmov	r6, r7, d0
 800f48e:	f7f1 fb55 	bl	8000b3c <__aeabi_dcmpun>
 800f492:	2800      	cmp	r0, #0
 800f494:	d13b      	bne.n	800f50e <pow+0xa2>
 800f496:	ec51 0b18 	vmov	r0, r1, d8
 800f49a:	2200      	movs	r2, #0
 800f49c:	2300      	movs	r3, #0
 800f49e:	f7f1 fb1b 	bl	8000ad8 <__aeabi_dcmpeq>
 800f4a2:	b1b8      	cbz	r0, 800f4d4 <pow+0x68>
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	4629      	mov	r1, r5
 800f4ac:	f7f1 fb14 	bl	8000ad8 <__aeabi_dcmpeq>
 800f4b0:	2800      	cmp	r0, #0
 800f4b2:	d146      	bne.n	800f542 <pow+0xd6>
 800f4b4:	ec45 4b10 	vmov	d0, r4, r5
 800f4b8:	f000 fe63 	bl	8010182 <finite>
 800f4bc:	b338      	cbz	r0, 800f50e <pow+0xa2>
 800f4be:	2200      	movs	r2, #0
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	4629      	mov	r1, r5
 800f4c6:	f7f1 fb11 	bl	8000aec <__aeabi_dcmplt>
 800f4ca:	b300      	cbz	r0, 800f50e <pow+0xa2>
 800f4cc:	f7fb fac0 	bl	800aa50 <__errno>
 800f4d0:	2322      	movs	r3, #34	; 0x22
 800f4d2:	e01b      	b.n	800f50c <pow+0xa0>
 800f4d4:	ec47 6b10 	vmov	d0, r6, r7
 800f4d8:	f000 fe53 	bl	8010182 <finite>
 800f4dc:	b9e0      	cbnz	r0, 800f518 <pow+0xac>
 800f4de:	eeb0 0a48 	vmov.f32	s0, s16
 800f4e2:	eef0 0a68 	vmov.f32	s1, s17
 800f4e6:	f000 fe4c 	bl	8010182 <finite>
 800f4ea:	b1a8      	cbz	r0, 800f518 <pow+0xac>
 800f4ec:	ec45 4b10 	vmov	d0, r4, r5
 800f4f0:	f000 fe47 	bl	8010182 <finite>
 800f4f4:	b180      	cbz	r0, 800f518 <pow+0xac>
 800f4f6:	4632      	mov	r2, r6
 800f4f8:	463b      	mov	r3, r7
 800f4fa:	4630      	mov	r0, r6
 800f4fc:	4639      	mov	r1, r7
 800f4fe:	f7f1 fb1d 	bl	8000b3c <__aeabi_dcmpun>
 800f502:	2800      	cmp	r0, #0
 800f504:	d0e2      	beq.n	800f4cc <pow+0x60>
 800f506:	f7fb faa3 	bl	800aa50 <__errno>
 800f50a:	2321      	movs	r3, #33	; 0x21
 800f50c:	6003      	str	r3, [r0, #0]
 800f50e:	ecbd 8b02 	vpop	{d8}
 800f512:	ec47 6b10 	vmov	d0, r6, r7
 800f516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f518:	2200      	movs	r2, #0
 800f51a:	2300      	movs	r3, #0
 800f51c:	4630      	mov	r0, r6
 800f51e:	4639      	mov	r1, r7
 800f520:	f7f1 fada 	bl	8000ad8 <__aeabi_dcmpeq>
 800f524:	2800      	cmp	r0, #0
 800f526:	d0f2      	beq.n	800f50e <pow+0xa2>
 800f528:	eeb0 0a48 	vmov.f32	s0, s16
 800f52c:	eef0 0a68 	vmov.f32	s1, s17
 800f530:	f000 fe27 	bl	8010182 <finite>
 800f534:	2800      	cmp	r0, #0
 800f536:	d0ea      	beq.n	800f50e <pow+0xa2>
 800f538:	ec45 4b10 	vmov	d0, r4, r5
 800f53c:	f000 fe21 	bl	8010182 <finite>
 800f540:	e7c3      	b.n	800f4ca <pow+0x5e>
 800f542:	4f01      	ldr	r7, [pc, #4]	; (800f548 <pow+0xdc>)
 800f544:	2600      	movs	r6, #0
 800f546:	e7e2      	b.n	800f50e <pow+0xa2>
 800f548:	3ff00000 	.word	0x3ff00000
 800f54c:	00000000 	.word	0x00000000

0800f550 <__ieee754_pow>:
 800f550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f554:	ed2d 8b06 	vpush	{d8-d10}
 800f558:	b089      	sub	sp, #36	; 0x24
 800f55a:	ed8d 1b00 	vstr	d1, [sp]
 800f55e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f562:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f566:	ea58 0102 	orrs.w	r1, r8, r2
 800f56a:	ec57 6b10 	vmov	r6, r7, d0
 800f56e:	d115      	bne.n	800f59c <__ieee754_pow+0x4c>
 800f570:	19b3      	adds	r3, r6, r6
 800f572:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f576:	4152      	adcs	r2, r2
 800f578:	4299      	cmp	r1, r3
 800f57a:	4b89      	ldr	r3, [pc, #548]	; (800f7a0 <__ieee754_pow+0x250>)
 800f57c:	4193      	sbcs	r3, r2
 800f57e:	f080 84d2 	bcs.w	800ff26 <__ieee754_pow+0x9d6>
 800f582:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f586:	4630      	mov	r0, r6
 800f588:	4639      	mov	r1, r7
 800f58a:	f7f0 fe87 	bl	800029c <__adddf3>
 800f58e:	ec41 0b10 	vmov	d0, r0, r1
 800f592:	b009      	add	sp, #36	; 0x24
 800f594:	ecbd 8b06 	vpop	{d8-d10}
 800f598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f59c:	4b81      	ldr	r3, [pc, #516]	; (800f7a4 <__ieee754_pow+0x254>)
 800f59e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f5a2:	429c      	cmp	r4, r3
 800f5a4:	ee10 aa10 	vmov	sl, s0
 800f5a8:	463d      	mov	r5, r7
 800f5aa:	dc06      	bgt.n	800f5ba <__ieee754_pow+0x6a>
 800f5ac:	d101      	bne.n	800f5b2 <__ieee754_pow+0x62>
 800f5ae:	2e00      	cmp	r6, #0
 800f5b0:	d1e7      	bne.n	800f582 <__ieee754_pow+0x32>
 800f5b2:	4598      	cmp	r8, r3
 800f5b4:	dc01      	bgt.n	800f5ba <__ieee754_pow+0x6a>
 800f5b6:	d10f      	bne.n	800f5d8 <__ieee754_pow+0x88>
 800f5b8:	b172      	cbz	r2, 800f5d8 <__ieee754_pow+0x88>
 800f5ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f5be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f5c2:	ea55 050a 	orrs.w	r5, r5, sl
 800f5c6:	d1dc      	bne.n	800f582 <__ieee754_pow+0x32>
 800f5c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f5cc:	18db      	adds	r3, r3, r3
 800f5ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f5d2:	4152      	adcs	r2, r2
 800f5d4:	429d      	cmp	r5, r3
 800f5d6:	e7d0      	b.n	800f57a <__ieee754_pow+0x2a>
 800f5d8:	2d00      	cmp	r5, #0
 800f5da:	da3b      	bge.n	800f654 <__ieee754_pow+0x104>
 800f5dc:	4b72      	ldr	r3, [pc, #456]	; (800f7a8 <__ieee754_pow+0x258>)
 800f5de:	4598      	cmp	r8, r3
 800f5e0:	dc51      	bgt.n	800f686 <__ieee754_pow+0x136>
 800f5e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f5e6:	4598      	cmp	r8, r3
 800f5e8:	f340 84ac 	ble.w	800ff44 <__ieee754_pow+0x9f4>
 800f5ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f5f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f5f4:	2b14      	cmp	r3, #20
 800f5f6:	dd0f      	ble.n	800f618 <__ieee754_pow+0xc8>
 800f5f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f5fc:	fa22 f103 	lsr.w	r1, r2, r3
 800f600:	fa01 f303 	lsl.w	r3, r1, r3
 800f604:	4293      	cmp	r3, r2
 800f606:	f040 849d 	bne.w	800ff44 <__ieee754_pow+0x9f4>
 800f60a:	f001 0101 	and.w	r1, r1, #1
 800f60e:	f1c1 0302 	rsb	r3, r1, #2
 800f612:	9304      	str	r3, [sp, #16]
 800f614:	b182      	cbz	r2, 800f638 <__ieee754_pow+0xe8>
 800f616:	e05f      	b.n	800f6d8 <__ieee754_pow+0x188>
 800f618:	2a00      	cmp	r2, #0
 800f61a:	d15b      	bne.n	800f6d4 <__ieee754_pow+0x184>
 800f61c:	f1c3 0314 	rsb	r3, r3, #20
 800f620:	fa48 f103 	asr.w	r1, r8, r3
 800f624:	fa01 f303 	lsl.w	r3, r1, r3
 800f628:	4543      	cmp	r3, r8
 800f62a:	f040 8488 	bne.w	800ff3e <__ieee754_pow+0x9ee>
 800f62e:	f001 0101 	and.w	r1, r1, #1
 800f632:	f1c1 0302 	rsb	r3, r1, #2
 800f636:	9304      	str	r3, [sp, #16]
 800f638:	4b5c      	ldr	r3, [pc, #368]	; (800f7ac <__ieee754_pow+0x25c>)
 800f63a:	4598      	cmp	r8, r3
 800f63c:	d132      	bne.n	800f6a4 <__ieee754_pow+0x154>
 800f63e:	f1b9 0f00 	cmp.w	r9, #0
 800f642:	f280 8478 	bge.w	800ff36 <__ieee754_pow+0x9e6>
 800f646:	4959      	ldr	r1, [pc, #356]	; (800f7ac <__ieee754_pow+0x25c>)
 800f648:	4632      	mov	r2, r6
 800f64a:	463b      	mov	r3, r7
 800f64c:	2000      	movs	r0, #0
 800f64e:	f7f1 f905 	bl	800085c <__aeabi_ddiv>
 800f652:	e79c      	b.n	800f58e <__ieee754_pow+0x3e>
 800f654:	2300      	movs	r3, #0
 800f656:	9304      	str	r3, [sp, #16]
 800f658:	2a00      	cmp	r2, #0
 800f65a:	d13d      	bne.n	800f6d8 <__ieee754_pow+0x188>
 800f65c:	4b51      	ldr	r3, [pc, #324]	; (800f7a4 <__ieee754_pow+0x254>)
 800f65e:	4598      	cmp	r8, r3
 800f660:	d1ea      	bne.n	800f638 <__ieee754_pow+0xe8>
 800f662:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f666:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f66a:	ea53 030a 	orrs.w	r3, r3, sl
 800f66e:	f000 845a 	beq.w	800ff26 <__ieee754_pow+0x9d6>
 800f672:	4b4f      	ldr	r3, [pc, #316]	; (800f7b0 <__ieee754_pow+0x260>)
 800f674:	429c      	cmp	r4, r3
 800f676:	dd08      	ble.n	800f68a <__ieee754_pow+0x13a>
 800f678:	f1b9 0f00 	cmp.w	r9, #0
 800f67c:	f2c0 8457 	blt.w	800ff2e <__ieee754_pow+0x9de>
 800f680:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f684:	e783      	b.n	800f58e <__ieee754_pow+0x3e>
 800f686:	2302      	movs	r3, #2
 800f688:	e7e5      	b.n	800f656 <__ieee754_pow+0x106>
 800f68a:	f1b9 0f00 	cmp.w	r9, #0
 800f68e:	f04f 0000 	mov.w	r0, #0
 800f692:	f04f 0100 	mov.w	r1, #0
 800f696:	f6bf af7a 	bge.w	800f58e <__ieee754_pow+0x3e>
 800f69a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f69e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f6a2:	e774      	b.n	800f58e <__ieee754_pow+0x3e>
 800f6a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f6a8:	d106      	bne.n	800f6b8 <__ieee754_pow+0x168>
 800f6aa:	4632      	mov	r2, r6
 800f6ac:	463b      	mov	r3, r7
 800f6ae:	4630      	mov	r0, r6
 800f6b0:	4639      	mov	r1, r7
 800f6b2:	f7f0 ffa9 	bl	8000608 <__aeabi_dmul>
 800f6b6:	e76a      	b.n	800f58e <__ieee754_pow+0x3e>
 800f6b8:	4b3e      	ldr	r3, [pc, #248]	; (800f7b4 <__ieee754_pow+0x264>)
 800f6ba:	4599      	cmp	r9, r3
 800f6bc:	d10c      	bne.n	800f6d8 <__ieee754_pow+0x188>
 800f6be:	2d00      	cmp	r5, #0
 800f6c0:	db0a      	blt.n	800f6d8 <__ieee754_pow+0x188>
 800f6c2:	ec47 6b10 	vmov	d0, r6, r7
 800f6c6:	b009      	add	sp, #36	; 0x24
 800f6c8:	ecbd 8b06 	vpop	{d8-d10}
 800f6cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d0:	f000 bc6c 	b.w	800ffac <__ieee754_sqrt>
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	9304      	str	r3, [sp, #16]
 800f6d8:	ec47 6b10 	vmov	d0, r6, r7
 800f6dc:	f000 fd48 	bl	8010170 <fabs>
 800f6e0:	ec51 0b10 	vmov	r0, r1, d0
 800f6e4:	f1ba 0f00 	cmp.w	sl, #0
 800f6e8:	d129      	bne.n	800f73e <__ieee754_pow+0x1ee>
 800f6ea:	b124      	cbz	r4, 800f6f6 <__ieee754_pow+0x1a6>
 800f6ec:	4b2f      	ldr	r3, [pc, #188]	; (800f7ac <__ieee754_pow+0x25c>)
 800f6ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d123      	bne.n	800f73e <__ieee754_pow+0x1ee>
 800f6f6:	f1b9 0f00 	cmp.w	r9, #0
 800f6fa:	da05      	bge.n	800f708 <__ieee754_pow+0x1b8>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	460b      	mov	r3, r1
 800f700:	2000      	movs	r0, #0
 800f702:	492a      	ldr	r1, [pc, #168]	; (800f7ac <__ieee754_pow+0x25c>)
 800f704:	f7f1 f8aa 	bl	800085c <__aeabi_ddiv>
 800f708:	2d00      	cmp	r5, #0
 800f70a:	f6bf af40 	bge.w	800f58e <__ieee754_pow+0x3e>
 800f70e:	9b04      	ldr	r3, [sp, #16]
 800f710:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f714:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f718:	4323      	orrs	r3, r4
 800f71a:	d108      	bne.n	800f72e <__ieee754_pow+0x1de>
 800f71c:	4602      	mov	r2, r0
 800f71e:	460b      	mov	r3, r1
 800f720:	4610      	mov	r0, r2
 800f722:	4619      	mov	r1, r3
 800f724:	f7f0 fdb8 	bl	8000298 <__aeabi_dsub>
 800f728:	4602      	mov	r2, r0
 800f72a:	460b      	mov	r3, r1
 800f72c:	e78f      	b.n	800f64e <__ieee754_pow+0xfe>
 800f72e:	9b04      	ldr	r3, [sp, #16]
 800f730:	2b01      	cmp	r3, #1
 800f732:	f47f af2c 	bne.w	800f58e <__ieee754_pow+0x3e>
 800f736:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f73a:	4619      	mov	r1, r3
 800f73c:	e727      	b.n	800f58e <__ieee754_pow+0x3e>
 800f73e:	0feb      	lsrs	r3, r5, #31
 800f740:	3b01      	subs	r3, #1
 800f742:	9306      	str	r3, [sp, #24]
 800f744:	9a06      	ldr	r2, [sp, #24]
 800f746:	9b04      	ldr	r3, [sp, #16]
 800f748:	4313      	orrs	r3, r2
 800f74a:	d102      	bne.n	800f752 <__ieee754_pow+0x202>
 800f74c:	4632      	mov	r2, r6
 800f74e:	463b      	mov	r3, r7
 800f750:	e7e6      	b.n	800f720 <__ieee754_pow+0x1d0>
 800f752:	4b19      	ldr	r3, [pc, #100]	; (800f7b8 <__ieee754_pow+0x268>)
 800f754:	4598      	cmp	r8, r3
 800f756:	f340 80fb 	ble.w	800f950 <__ieee754_pow+0x400>
 800f75a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f75e:	4598      	cmp	r8, r3
 800f760:	4b13      	ldr	r3, [pc, #76]	; (800f7b0 <__ieee754_pow+0x260>)
 800f762:	dd0c      	ble.n	800f77e <__ieee754_pow+0x22e>
 800f764:	429c      	cmp	r4, r3
 800f766:	dc0f      	bgt.n	800f788 <__ieee754_pow+0x238>
 800f768:	f1b9 0f00 	cmp.w	r9, #0
 800f76c:	da0f      	bge.n	800f78e <__ieee754_pow+0x23e>
 800f76e:	2000      	movs	r0, #0
 800f770:	b009      	add	sp, #36	; 0x24
 800f772:	ecbd 8b06 	vpop	{d8-d10}
 800f776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f77a:	f000 bcf0 	b.w	801015e <__math_oflow>
 800f77e:	429c      	cmp	r4, r3
 800f780:	dbf2      	blt.n	800f768 <__ieee754_pow+0x218>
 800f782:	4b0a      	ldr	r3, [pc, #40]	; (800f7ac <__ieee754_pow+0x25c>)
 800f784:	429c      	cmp	r4, r3
 800f786:	dd19      	ble.n	800f7bc <__ieee754_pow+0x26c>
 800f788:	f1b9 0f00 	cmp.w	r9, #0
 800f78c:	dcef      	bgt.n	800f76e <__ieee754_pow+0x21e>
 800f78e:	2000      	movs	r0, #0
 800f790:	b009      	add	sp, #36	; 0x24
 800f792:	ecbd 8b06 	vpop	{d8-d10}
 800f796:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f79a:	f000 bcd7 	b.w	801014c <__math_uflow>
 800f79e:	bf00      	nop
 800f7a0:	fff00000 	.word	0xfff00000
 800f7a4:	7ff00000 	.word	0x7ff00000
 800f7a8:	433fffff 	.word	0x433fffff
 800f7ac:	3ff00000 	.word	0x3ff00000
 800f7b0:	3fefffff 	.word	0x3fefffff
 800f7b4:	3fe00000 	.word	0x3fe00000
 800f7b8:	41e00000 	.word	0x41e00000
 800f7bc:	4b60      	ldr	r3, [pc, #384]	; (800f940 <__ieee754_pow+0x3f0>)
 800f7be:	2200      	movs	r2, #0
 800f7c0:	f7f0 fd6a 	bl	8000298 <__aeabi_dsub>
 800f7c4:	a354      	add	r3, pc, #336	; (adr r3, 800f918 <__ieee754_pow+0x3c8>)
 800f7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ca:	4604      	mov	r4, r0
 800f7cc:	460d      	mov	r5, r1
 800f7ce:	f7f0 ff1b 	bl	8000608 <__aeabi_dmul>
 800f7d2:	a353      	add	r3, pc, #332	; (adr r3, 800f920 <__ieee754_pow+0x3d0>)
 800f7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d8:	4606      	mov	r6, r0
 800f7da:	460f      	mov	r7, r1
 800f7dc:	4620      	mov	r0, r4
 800f7de:	4629      	mov	r1, r5
 800f7e0:	f7f0 ff12 	bl	8000608 <__aeabi_dmul>
 800f7e4:	4b57      	ldr	r3, [pc, #348]	; (800f944 <__ieee754_pow+0x3f4>)
 800f7e6:	4682      	mov	sl, r0
 800f7e8:	468b      	mov	fp, r1
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	4629      	mov	r1, r5
 800f7f0:	f7f0 ff0a 	bl	8000608 <__aeabi_dmul>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	a14b      	add	r1, pc, #300	; (adr r1, 800f928 <__ieee754_pow+0x3d8>)
 800f7fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7fe:	f7f0 fd4b 	bl	8000298 <__aeabi_dsub>
 800f802:	4622      	mov	r2, r4
 800f804:	462b      	mov	r3, r5
 800f806:	f7f0 feff 	bl	8000608 <__aeabi_dmul>
 800f80a:	4602      	mov	r2, r0
 800f80c:	460b      	mov	r3, r1
 800f80e:	2000      	movs	r0, #0
 800f810:	494d      	ldr	r1, [pc, #308]	; (800f948 <__ieee754_pow+0x3f8>)
 800f812:	f7f0 fd41 	bl	8000298 <__aeabi_dsub>
 800f816:	4622      	mov	r2, r4
 800f818:	4680      	mov	r8, r0
 800f81a:	4689      	mov	r9, r1
 800f81c:	462b      	mov	r3, r5
 800f81e:	4620      	mov	r0, r4
 800f820:	4629      	mov	r1, r5
 800f822:	f7f0 fef1 	bl	8000608 <__aeabi_dmul>
 800f826:	4602      	mov	r2, r0
 800f828:	460b      	mov	r3, r1
 800f82a:	4640      	mov	r0, r8
 800f82c:	4649      	mov	r1, r9
 800f82e:	f7f0 feeb 	bl	8000608 <__aeabi_dmul>
 800f832:	a33f      	add	r3, pc, #252	; (adr r3, 800f930 <__ieee754_pow+0x3e0>)
 800f834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f838:	f7f0 fee6 	bl	8000608 <__aeabi_dmul>
 800f83c:	4602      	mov	r2, r0
 800f83e:	460b      	mov	r3, r1
 800f840:	4650      	mov	r0, sl
 800f842:	4659      	mov	r1, fp
 800f844:	f7f0 fd28 	bl	8000298 <__aeabi_dsub>
 800f848:	4602      	mov	r2, r0
 800f84a:	460b      	mov	r3, r1
 800f84c:	4680      	mov	r8, r0
 800f84e:	4689      	mov	r9, r1
 800f850:	4630      	mov	r0, r6
 800f852:	4639      	mov	r1, r7
 800f854:	f7f0 fd22 	bl	800029c <__adddf3>
 800f858:	2000      	movs	r0, #0
 800f85a:	4632      	mov	r2, r6
 800f85c:	463b      	mov	r3, r7
 800f85e:	4604      	mov	r4, r0
 800f860:	460d      	mov	r5, r1
 800f862:	f7f0 fd19 	bl	8000298 <__aeabi_dsub>
 800f866:	4602      	mov	r2, r0
 800f868:	460b      	mov	r3, r1
 800f86a:	4640      	mov	r0, r8
 800f86c:	4649      	mov	r1, r9
 800f86e:	f7f0 fd13 	bl	8000298 <__aeabi_dsub>
 800f872:	9b04      	ldr	r3, [sp, #16]
 800f874:	9a06      	ldr	r2, [sp, #24]
 800f876:	3b01      	subs	r3, #1
 800f878:	4313      	orrs	r3, r2
 800f87a:	4682      	mov	sl, r0
 800f87c:	468b      	mov	fp, r1
 800f87e:	f040 81e7 	bne.w	800fc50 <__ieee754_pow+0x700>
 800f882:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800f938 <__ieee754_pow+0x3e8>
 800f886:	eeb0 8a47 	vmov.f32	s16, s14
 800f88a:	eef0 8a67 	vmov.f32	s17, s15
 800f88e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f892:	2600      	movs	r6, #0
 800f894:	4632      	mov	r2, r6
 800f896:	463b      	mov	r3, r7
 800f898:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f89c:	f7f0 fcfc 	bl	8000298 <__aeabi_dsub>
 800f8a0:	4622      	mov	r2, r4
 800f8a2:	462b      	mov	r3, r5
 800f8a4:	f7f0 feb0 	bl	8000608 <__aeabi_dmul>
 800f8a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8ac:	4680      	mov	r8, r0
 800f8ae:	4689      	mov	r9, r1
 800f8b0:	4650      	mov	r0, sl
 800f8b2:	4659      	mov	r1, fp
 800f8b4:	f7f0 fea8 	bl	8000608 <__aeabi_dmul>
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	4640      	mov	r0, r8
 800f8be:	4649      	mov	r1, r9
 800f8c0:	f7f0 fcec 	bl	800029c <__adddf3>
 800f8c4:	4632      	mov	r2, r6
 800f8c6:	463b      	mov	r3, r7
 800f8c8:	4680      	mov	r8, r0
 800f8ca:	4689      	mov	r9, r1
 800f8cc:	4620      	mov	r0, r4
 800f8ce:	4629      	mov	r1, r5
 800f8d0:	f7f0 fe9a 	bl	8000608 <__aeabi_dmul>
 800f8d4:	460b      	mov	r3, r1
 800f8d6:	4604      	mov	r4, r0
 800f8d8:	460d      	mov	r5, r1
 800f8da:	4602      	mov	r2, r0
 800f8dc:	4649      	mov	r1, r9
 800f8de:	4640      	mov	r0, r8
 800f8e0:	f7f0 fcdc 	bl	800029c <__adddf3>
 800f8e4:	4b19      	ldr	r3, [pc, #100]	; (800f94c <__ieee754_pow+0x3fc>)
 800f8e6:	4299      	cmp	r1, r3
 800f8e8:	ec45 4b19 	vmov	d9, r4, r5
 800f8ec:	4606      	mov	r6, r0
 800f8ee:	460f      	mov	r7, r1
 800f8f0:	468b      	mov	fp, r1
 800f8f2:	f340 82f1 	ble.w	800fed8 <__ieee754_pow+0x988>
 800f8f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f8fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f8fe:	4303      	orrs	r3, r0
 800f900:	f000 81e4 	beq.w	800fccc <__ieee754_pow+0x77c>
 800f904:	ec51 0b18 	vmov	r0, r1, d8
 800f908:	2200      	movs	r2, #0
 800f90a:	2300      	movs	r3, #0
 800f90c:	f7f1 f8ee 	bl	8000aec <__aeabi_dcmplt>
 800f910:	3800      	subs	r0, #0
 800f912:	bf18      	it	ne
 800f914:	2001      	movne	r0, #1
 800f916:	e72b      	b.n	800f770 <__ieee754_pow+0x220>
 800f918:	60000000 	.word	0x60000000
 800f91c:	3ff71547 	.word	0x3ff71547
 800f920:	f85ddf44 	.word	0xf85ddf44
 800f924:	3e54ae0b 	.word	0x3e54ae0b
 800f928:	55555555 	.word	0x55555555
 800f92c:	3fd55555 	.word	0x3fd55555
 800f930:	652b82fe 	.word	0x652b82fe
 800f934:	3ff71547 	.word	0x3ff71547
 800f938:	00000000 	.word	0x00000000
 800f93c:	bff00000 	.word	0xbff00000
 800f940:	3ff00000 	.word	0x3ff00000
 800f944:	3fd00000 	.word	0x3fd00000
 800f948:	3fe00000 	.word	0x3fe00000
 800f94c:	408fffff 	.word	0x408fffff
 800f950:	4bd5      	ldr	r3, [pc, #852]	; (800fca8 <__ieee754_pow+0x758>)
 800f952:	402b      	ands	r3, r5
 800f954:	2200      	movs	r2, #0
 800f956:	b92b      	cbnz	r3, 800f964 <__ieee754_pow+0x414>
 800f958:	4bd4      	ldr	r3, [pc, #848]	; (800fcac <__ieee754_pow+0x75c>)
 800f95a:	f7f0 fe55 	bl	8000608 <__aeabi_dmul>
 800f95e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f962:	460c      	mov	r4, r1
 800f964:	1523      	asrs	r3, r4, #20
 800f966:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f96a:	4413      	add	r3, r2
 800f96c:	9305      	str	r3, [sp, #20]
 800f96e:	4bd0      	ldr	r3, [pc, #832]	; (800fcb0 <__ieee754_pow+0x760>)
 800f970:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f974:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f978:	429c      	cmp	r4, r3
 800f97a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f97e:	dd08      	ble.n	800f992 <__ieee754_pow+0x442>
 800f980:	4bcc      	ldr	r3, [pc, #816]	; (800fcb4 <__ieee754_pow+0x764>)
 800f982:	429c      	cmp	r4, r3
 800f984:	f340 8162 	ble.w	800fc4c <__ieee754_pow+0x6fc>
 800f988:	9b05      	ldr	r3, [sp, #20]
 800f98a:	3301      	adds	r3, #1
 800f98c:	9305      	str	r3, [sp, #20]
 800f98e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f992:	2400      	movs	r4, #0
 800f994:	00e3      	lsls	r3, r4, #3
 800f996:	9307      	str	r3, [sp, #28]
 800f998:	4bc7      	ldr	r3, [pc, #796]	; (800fcb8 <__ieee754_pow+0x768>)
 800f99a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f99e:	ed93 7b00 	vldr	d7, [r3]
 800f9a2:	4629      	mov	r1, r5
 800f9a4:	ec53 2b17 	vmov	r2, r3, d7
 800f9a8:	eeb0 9a47 	vmov.f32	s18, s14
 800f9ac:	eef0 9a67 	vmov.f32	s19, s15
 800f9b0:	4682      	mov	sl, r0
 800f9b2:	f7f0 fc71 	bl	8000298 <__aeabi_dsub>
 800f9b6:	4652      	mov	r2, sl
 800f9b8:	4606      	mov	r6, r0
 800f9ba:	460f      	mov	r7, r1
 800f9bc:	462b      	mov	r3, r5
 800f9be:	ec51 0b19 	vmov	r0, r1, d9
 800f9c2:	f7f0 fc6b 	bl	800029c <__adddf3>
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	460b      	mov	r3, r1
 800f9ca:	2000      	movs	r0, #0
 800f9cc:	49bb      	ldr	r1, [pc, #748]	; (800fcbc <__ieee754_pow+0x76c>)
 800f9ce:	f7f0 ff45 	bl	800085c <__aeabi_ddiv>
 800f9d2:	ec41 0b1a 	vmov	d10, r0, r1
 800f9d6:	4602      	mov	r2, r0
 800f9d8:	460b      	mov	r3, r1
 800f9da:	4630      	mov	r0, r6
 800f9dc:	4639      	mov	r1, r7
 800f9de:	f7f0 fe13 	bl	8000608 <__aeabi_dmul>
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9e8:	9302      	str	r3, [sp, #8]
 800f9ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f9ee:	46ab      	mov	fp, r5
 800f9f0:	106d      	asrs	r5, r5, #1
 800f9f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f9f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f9fa:	ec41 0b18 	vmov	d8, r0, r1
 800f9fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fa02:	2200      	movs	r2, #0
 800fa04:	4640      	mov	r0, r8
 800fa06:	4649      	mov	r1, r9
 800fa08:	4614      	mov	r4, r2
 800fa0a:	461d      	mov	r5, r3
 800fa0c:	f7f0 fdfc 	bl	8000608 <__aeabi_dmul>
 800fa10:	4602      	mov	r2, r0
 800fa12:	460b      	mov	r3, r1
 800fa14:	4630      	mov	r0, r6
 800fa16:	4639      	mov	r1, r7
 800fa18:	f7f0 fc3e 	bl	8000298 <__aeabi_dsub>
 800fa1c:	ec53 2b19 	vmov	r2, r3, d9
 800fa20:	4606      	mov	r6, r0
 800fa22:	460f      	mov	r7, r1
 800fa24:	4620      	mov	r0, r4
 800fa26:	4629      	mov	r1, r5
 800fa28:	f7f0 fc36 	bl	8000298 <__aeabi_dsub>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	460b      	mov	r3, r1
 800fa30:	4650      	mov	r0, sl
 800fa32:	4659      	mov	r1, fp
 800fa34:	f7f0 fc30 	bl	8000298 <__aeabi_dsub>
 800fa38:	4642      	mov	r2, r8
 800fa3a:	464b      	mov	r3, r9
 800fa3c:	f7f0 fde4 	bl	8000608 <__aeabi_dmul>
 800fa40:	4602      	mov	r2, r0
 800fa42:	460b      	mov	r3, r1
 800fa44:	4630      	mov	r0, r6
 800fa46:	4639      	mov	r1, r7
 800fa48:	f7f0 fc26 	bl	8000298 <__aeabi_dsub>
 800fa4c:	ec53 2b1a 	vmov	r2, r3, d10
 800fa50:	f7f0 fdda 	bl	8000608 <__aeabi_dmul>
 800fa54:	ec53 2b18 	vmov	r2, r3, d8
 800fa58:	ec41 0b19 	vmov	d9, r0, r1
 800fa5c:	ec51 0b18 	vmov	r0, r1, d8
 800fa60:	f7f0 fdd2 	bl	8000608 <__aeabi_dmul>
 800fa64:	a37c      	add	r3, pc, #496	; (adr r3, 800fc58 <__ieee754_pow+0x708>)
 800fa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6a:	4604      	mov	r4, r0
 800fa6c:	460d      	mov	r5, r1
 800fa6e:	f7f0 fdcb 	bl	8000608 <__aeabi_dmul>
 800fa72:	a37b      	add	r3, pc, #492	; (adr r3, 800fc60 <__ieee754_pow+0x710>)
 800fa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa78:	f7f0 fc10 	bl	800029c <__adddf3>
 800fa7c:	4622      	mov	r2, r4
 800fa7e:	462b      	mov	r3, r5
 800fa80:	f7f0 fdc2 	bl	8000608 <__aeabi_dmul>
 800fa84:	a378      	add	r3, pc, #480	; (adr r3, 800fc68 <__ieee754_pow+0x718>)
 800fa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa8a:	f7f0 fc07 	bl	800029c <__adddf3>
 800fa8e:	4622      	mov	r2, r4
 800fa90:	462b      	mov	r3, r5
 800fa92:	f7f0 fdb9 	bl	8000608 <__aeabi_dmul>
 800fa96:	a376      	add	r3, pc, #472	; (adr r3, 800fc70 <__ieee754_pow+0x720>)
 800fa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9c:	f7f0 fbfe 	bl	800029c <__adddf3>
 800faa0:	4622      	mov	r2, r4
 800faa2:	462b      	mov	r3, r5
 800faa4:	f7f0 fdb0 	bl	8000608 <__aeabi_dmul>
 800faa8:	a373      	add	r3, pc, #460	; (adr r3, 800fc78 <__ieee754_pow+0x728>)
 800faaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faae:	f7f0 fbf5 	bl	800029c <__adddf3>
 800fab2:	4622      	mov	r2, r4
 800fab4:	462b      	mov	r3, r5
 800fab6:	f7f0 fda7 	bl	8000608 <__aeabi_dmul>
 800faba:	a371      	add	r3, pc, #452	; (adr r3, 800fc80 <__ieee754_pow+0x730>)
 800fabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac0:	f7f0 fbec 	bl	800029c <__adddf3>
 800fac4:	4622      	mov	r2, r4
 800fac6:	4606      	mov	r6, r0
 800fac8:	460f      	mov	r7, r1
 800faca:	462b      	mov	r3, r5
 800facc:	4620      	mov	r0, r4
 800face:	4629      	mov	r1, r5
 800fad0:	f7f0 fd9a 	bl	8000608 <__aeabi_dmul>
 800fad4:	4602      	mov	r2, r0
 800fad6:	460b      	mov	r3, r1
 800fad8:	4630      	mov	r0, r6
 800fada:	4639      	mov	r1, r7
 800fadc:	f7f0 fd94 	bl	8000608 <__aeabi_dmul>
 800fae0:	4642      	mov	r2, r8
 800fae2:	4604      	mov	r4, r0
 800fae4:	460d      	mov	r5, r1
 800fae6:	464b      	mov	r3, r9
 800fae8:	ec51 0b18 	vmov	r0, r1, d8
 800faec:	f7f0 fbd6 	bl	800029c <__adddf3>
 800faf0:	ec53 2b19 	vmov	r2, r3, d9
 800faf4:	f7f0 fd88 	bl	8000608 <__aeabi_dmul>
 800faf8:	4622      	mov	r2, r4
 800fafa:	462b      	mov	r3, r5
 800fafc:	f7f0 fbce 	bl	800029c <__adddf3>
 800fb00:	4642      	mov	r2, r8
 800fb02:	4682      	mov	sl, r0
 800fb04:	468b      	mov	fp, r1
 800fb06:	464b      	mov	r3, r9
 800fb08:	4640      	mov	r0, r8
 800fb0a:	4649      	mov	r1, r9
 800fb0c:	f7f0 fd7c 	bl	8000608 <__aeabi_dmul>
 800fb10:	4b6b      	ldr	r3, [pc, #428]	; (800fcc0 <__ieee754_pow+0x770>)
 800fb12:	2200      	movs	r2, #0
 800fb14:	4606      	mov	r6, r0
 800fb16:	460f      	mov	r7, r1
 800fb18:	f7f0 fbc0 	bl	800029c <__adddf3>
 800fb1c:	4652      	mov	r2, sl
 800fb1e:	465b      	mov	r3, fp
 800fb20:	f7f0 fbbc 	bl	800029c <__adddf3>
 800fb24:	2000      	movs	r0, #0
 800fb26:	4604      	mov	r4, r0
 800fb28:	460d      	mov	r5, r1
 800fb2a:	4602      	mov	r2, r0
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	4640      	mov	r0, r8
 800fb30:	4649      	mov	r1, r9
 800fb32:	f7f0 fd69 	bl	8000608 <__aeabi_dmul>
 800fb36:	4b62      	ldr	r3, [pc, #392]	; (800fcc0 <__ieee754_pow+0x770>)
 800fb38:	4680      	mov	r8, r0
 800fb3a:	4689      	mov	r9, r1
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	4620      	mov	r0, r4
 800fb40:	4629      	mov	r1, r5
 800fb42:	f7f0 fba9 	bl	8000298 <__aeabi_dsub>
 800fb46:	4632      	mov	r2, r6
 800fb48:	463b      	mov	r3, r7
 800fb4a:	f7f0 fba5 	bl	8000298 <__aeabi_dsub>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	460b      	mov	r3, r1
 800fb52:	4650      	mov	r0, sl
 800fb54:	4659      	mov	r1, fp
 800fb56:	f7f0 fb9f 	bl	8000298 <__aeabi_dsub>
 800fb5a:	ec53 2b18 	vmov	r2, r3, d8
 800fb5e:	f7f0 fd53 	bl	8000608 <__aeabi_dmul>
 800fb62:	4622      	mov	r2, r4
 800fb64:	4606      	mov	r6, r0
 800fb66:	460f      	mov	r7, r1
 800fb68:	462b      	mov	r3, r5
 800fb6a:	ec51 0b19 	vmov	r0, r1, d9
 800fb6e:	f7f0 fd4b 	bl	8000608 <__aeabi_dmul>
 800fb72:	4602      	mov	r2, r0
 800fb74:	460b      	mov	r3, r1
 800fb76:	4630      	mov	r0, r6
 800fb78:	4639      	mov	r1, r7
 800fb7a:	f7f0 fb8f 	bl	800029c <__adddf3>
 800fb7e:	4606      	mov	r6, r0
 800fb80:	460f      	mov	r7, r1
 800fb82:	4602      	mov	r2, r0
 800fb84:	460b      	mov	r3, r1
 800fb86:	4640      	mov	r0, r8
 800fb88:	4649      	mov	r1, r9
 800fb8a:	f7f0 fb87 	bl	800029c <__adddf3>
 800fb8e:	a33e      	add	r3, pc, #248	; (adr r3, 800fc88 <__ieee754_pow+0x738>)
 800fb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb94:	2000      	movs	r0, #0
 800fb96:	4604      	mov	r4, r0
 800fb98:	460d      	mov	r5, r1
 800fb9a:	f7f0 fd35 	bl	8000608 <__aeabi_dmul>
 800fb9e:	4642      	mov	r2, r8
 800fba0:	ec41 0b18 	vmov	d8, r0, r1
 800fba4:	464b      	mov	r3, r9
 800fba6:	4620      	mov	r0, r4
 800fba8:	4629      	mov	r1, r5
 800fbaa:	f7f0 fb75 	bl	8000298 <__aeabi_dsub>
 800fbae:	4602      	mov	r2, r0
 800fbb0:	460b      	mov	r3, r1
 800fbb2:	4630      	mov	r0, r6
 800fbb4:	4639      	mov	r1, r7
 800fbb6:	f7f0 fb6f 	bl	8000298 <__aeabi_dsub>
 800fbba:	a335      	add	r3, pc, #212	; (adr r3, 800fc90 <__ieee754_pow+0x740>)
 800fbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc0:	f7f0 fd22 	bl	8000608 <__aeabi_dmul>
 800fbc4:	a334      	add	r3, pc, #208	; (adr r3, 800fc98 <__ieee754_pow+0x748>)
 800fbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbca:	4606      	mov	r6, r0
 800fbcc:	460f      	mov	r7, r1
 800fbce:	4620      	mov	r0, r4
 800fbd0:	4629      	mov	r1, r5
 800fbd2:	f7f0 fd19 	bl	8000608 <__aeabi_dmul>
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	460b      	mov	r3, r1
 800fbda:	4630      	mov	r0, r6
 800fbdc:	4639      	mov	r1, r7
 800fbde:	f7f0 fb5d 	bl	800029c <__adddf3>
 800fbe2:	9a07      	ldr	r2, [sp, #28]
 800fbe4:	4b37      	ldr	r3, [pc, #220]	; (800fcc4 <__ieee754_pow+0x774>)
 800fbe6:	4413      	add	r3, r2
 800fbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbec:	f7f0 fb56 	bl	800029c <__adddf3>
 800fbf0:	4682      	mov	sl, r0
 800fbf2:	9805      	ldr	r0, [sp, #20]
 800fbf4:	468b      	mov	fp, r1
 800fbf6:	f7f0 fc9d 	bl	8000534 <__aeabi_i2d>
 800fbfa:	9a07      	ldr	r2, [sp, #28]
 800fbfc:	4b32      	ldr	r3, [pc, #200]	; (800fcc8 <__ieee754_pow+0x778>)
 800fbfe:	4413      	add	r3, r2
 800fc00:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fc04:	4606      	mov	r6, r0
 800fc06:	460f      	mov	r7, r1
 800fc08:	4652      	mov	r2, sl
 800fc0a:	465b      	mov	r3, fp
 800fc0c:	ec51 0b18 	vmov	r0, r1, d8
 800fc10:	f7f0 fb44 	bl	800029c <__adddf3>
 800fc14:	4642      	mov	r2, r8
 800fc16:	464b      	mov	r3, r9
 800fc18:	f7f0 fb40 	bl	800029c <__adddf3>
 800fc1c:	4632      	mov	r2, r6
 800fc1e:	463b      	mov	r3, r7
 800fc20:	f7f0 fb3c 	bl	800029c <__adddf3>
 800fc24:	2000      	movs	r0, #0
 800fc26:	4632      	mov	r2, r6
 800fc28:	463b      	mov	r3, r7
 800fc2a:	4604      	mov	r4, r0
 800fc2c:	460d      	mov	r5, r1
 800fc2e:	f7f0 fb33 	bl	8000298 <__aeabi_dsub>
 800fc32:	4642      	mov	r2, r8
 800fc34:	464b      	mov	r3, r9
 800fc36:	f7f0 fb2f 	bl	8000298 <__aeabi_dsub>
 800fc3a:	ec53 2b18 	vmov	r2, r3, d8
 800fc3e:	f7f0 fb2b 	bl	8000298 <__aeabi_dsub>
 800fc42:	4602      	mov	r2, r0
 800fc44:	460b      	mov	r3, r1
 800fc46:	4650      	mov	r0, sl
 800fc48:	4659      	mov	r1, fp
 800fc4a:	e610      	b.n	800f86e <__ieee754_pow+0x31e>
 800fc4c:	2401      	movs	r4, #1
 800fc4e:	e6a1      	b.n	800f994 <__ieee754_pow+0x444>
 800fc50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800fca0 <__ieee754_pow+0x750>
 800fc54:	e617      	b.n	800f886 <__ieee754_pow+0x336>
 800fc56:	bf00      	nop
 800fc58:	4a454eef 	.word	0x4a454eef
 800fc5c:	3fca7e28 	.word	0x3fca7e28
 800fc60:	93c9db65 	.word	0x93c9db65
 800fc64:	3fcd864a 	.word	0x3fcd864a
 800fc68:	a91d4101 	.word	0xa91d4101
 800fc6c:	3fd17460 	.word	0x3fd17460
 800fc70:	518f264d 	.word	0x518f264d
 800fc74:	3fd55555 	.word	0x3fd55555
 800fc78:	db6fabff 	.word	0xdb6fabff
 800fc7c:	3fdb6db6 	.word	0x3fdb6db6
 800fc80:	33333303 	.word	0x33333303
 800fc84:	3fe33333 	.word	0x3fe33333
 800fc88:	e0000000 	.word	0xe0000000
 800fc8c:	3feec709 	.word	0x3feec709
 800fc90:	dc3a03fd 	.word	0xdc3a03fd
 800fc94:	3feec709 	.word	0x3feec709
 800fc98:	145b01f5 	.word	0x145b01f5
 800fc9c:	be3e2fe0 	.word	0xbe3e2fe0
 800fca0:	00000000 	.word	0x00000000
 800fca4:	3ff00000 	.word	0x3ff00000
 800fca8:	7ff00000 	.word	0x7ff00000
 800fcac:	43400000 	.word	0x43400000
 800fcb0:	0003988e 	.word	0x0003988e
 800fcb4:	000bb679 	.word	0x000bb679
 800fcb8:	08012210 	.word	0x08012210
 800fcbc:	3ff00000 	.word	0x3ff00000
 800fcc0:	40080000 	.word	0x40080000
 800fcc4:	08012230 	.word	0x08012230
 800fcc8:	08012220 	.word	0x08012220
 800fccc:	a3b5      	add	r3, pc, #724	; (adr r3, 800ffa4 <__ieee754_pow+0xa54>)
 800fcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd2:	4640      	mov	r0, r8
 800fcd4:	4649      	mov	r1, r9
 800fcd6:	f7f0 fae1 	bl	800029c <__adddf3>
 800fcda:	4622      	mov	r2, r4
 800fcdc:	ec41 0b1a 	vmov	d10, r0, r1
 800fce0:	462b      	mov	r3, r5
 800fce2:	4630      	mov	r0, r6
 800fce4:	4639      	mov	r1, r7
 800fce6:	f7f0 fad7 	bl	8000298 <__aeabi_dsub>
 800fcea:	4602      	mov	r2, r0
 800fcec:	460b      	mov	r3, r1
 800fcee:	ec51 0b1a 	vmov	r0, r1, d10
 800fcf2:	f7f0 ff19 	bl	8000b28 <__aeabi_dcmpgt>
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	f47f ae04 	bne.w	800f904 <__ieee754_pow+0x3b4>
 800fcfc:	4aa4      	ldr	r2, [pc, #656]	; (800ff90 <__ieee754_pow+0xa40>)
 800fcfe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fd02:	4293      	cmp	r3, r2
 800fd04:	f340 8108 	ble.w	800ff18 <__ieee754_pow+0x9c8>
 800fd08:	151b      	asrs	r3, r3, #20
 800fd0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fd0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fd12:	fa4a f303 	asr.w	r3, sl, r3
 800fd16:	445b      	add	r3, fp
 800fd18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800fd1c:	4e9d      	ldr	r6, [pc, #628]	; (800ff94 <__ieee754_pow+0xa44>)
 800fd1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800fd22:	4116      	asrs	r6, r2
 800fd24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800fd28:	2000      	movs	r0, #0
 800fd2a:	ea23 0106 	bic.w	r1, r3, r6
 800fd2e:	f1c2 0214 	rsb	r2, r2, #20
 800fd32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800fd36:	fa4a fa02 	asr.w	sl, sl, r2
 800fd3a:	f1bb 0f00 	cmp.w	fp, #0
 800fd3e:	4602      	mov	r2, r0
 800fd40:	460b      	mov	r3, r1
 800fd42:	4620      	mov	r0, r4
 800fd44:	4629      	mov	r1, r5
 800fd46:	bfb8      	it	lt
 800fd48:	f1ca 0a00 	rsblt	sl, sl, #0
 800fd4c:	f7f0 faa4 	bl	8000298 <__aeabi_dsub>
 800fd50:	ec41 0b19 	vmov	d9, r0, r1
 800fd54:	4642      	mov	r2, r8
 800fd56:	464b      	mov	r3, r9
 800fd58:	ec51 0b19 	vmov	r0, r1, d9
 800fd5c:	f7f0 fa9e 	bl	800029c <__adddf3>
 800fd60:	a37b      	add	r3, pc, #492	; (adr r3, 800ff50 <__ieee754_pow+0xa00>)
 800fd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd66:	2000      	movs	r0, #0
 800fd68:	4604      	mov	r4, r0
 800fd6a:	460d      	mov	r5, r1
 800fd6c:	f7f0 fc4c 	bl	8000608 <__aeabi_dmul>
 800fd70:	ec53 2b19 	vmov	r2, r3, d9
 800fd74:	4606      	mov	r6, r0
 800fd76:	460f      	mov	r7, r1
 800fd78:	4620      	mov	r0, r4
 800fd7a:	4629      	mov	r1, r5
 800fd7c:	f7f0 fa8c 	bl	8000298 <__aeabi_dsub>
 800fd80:	4602      	mov	r2, r0
 800fd82:	460b      	mov	r3, r1
 800fd84:	4640      	mov	r0, r8
 800fd86:	4649      	mov	r1, r9
 800fd88:	f7f0 fa86 	bl	8000298 <__aeabi_dsub>
 800fd8c:	a372      	add	r3, pc, #456	; (adr r3, 800ff58 <__ieee754_pow+0xa08>)
 800fd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd92:	f7f0 fc39 	bl	8000608 <__aeabi_dmul>
 800fd96:	a372      	add	r3, pc, #456	; (adr r3, 800ff60 <__ieee754_pow+0xa10>)
 800fd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd9c:	4680      	mov	r8, r0
 800fd9e:	4689      	mov	r9, r1
 800fda0:	4620      	mov	r0, r4
 800fda2:	4629      	mov	r1, r5
 800fda4:	f7f0 fc30 	bl	8000608 <__aeabi_dmul>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	460b      	mov	r3, r1
 800fdac:	4640      	mov	r0, r8
 800fdae:	4649      	mov	r1, r9
 800fdb0:	f7f0 fa74 	bl	800029c <__adddf3>
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	460d      	mov	r5, r1
 800fdb8:	4602      	mov	r2, r0
 800fdba:	460b      	mov	r3, r1
 800fdbc:	4630      	mov	r0, r6
 800fdbe:	4639      	mov	r1, r7
 800fdc0:	f7f0 fa6c 	bl	800029c <__adddf3>
 800fdc4:	4632      	mov	r2, r6
 800fdc6:	463b      	mov	r3, r7
 800fdc8:	4680      	mov	r8, r0
 800fdca:	4689      	mov	r9, r1
 800fdcc:	f7f0 fa64 	bl	8000298 <__aeabi_dsub>
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	4629      	mov	r1, r5
 800fdd8:	f7f0 fa5e 	bl	8000298 <__aeabi_dsub>
 800fddc:	4642      	mov	r2, r8
 800fdde:	4606      	mov	r6, r0
 800fde0:	460f      	mov	r7, r1
 800fde2:	464b      	mov	r3, r9
 800fde4:	4640      	mov	r0, r8
 800fde6:	4649      	mov	r1, r9
 800fde8:	f7f0 fc0e 	bl	8000608 <__aeabi_dmul>
 800fdec:	a35e      	add	r3, pc, #376	; (adr r3, 800ff68 <__ieee754_pow+0xa18>)
 800fdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	460d      	mov	r5, r1
 800fdf6:	f7f0 fc07 	bl	8000608 <__aeabi_dmul>
 800fdfa:	a35d      	add	r3, pc, #372	; (adr r3, 800ff70 <__ieee754_pow+0xa20>)
 800fdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe00:	f7f0 fa4a 	bl	8000298 <__aeabi_dsub>
 800fe04:	4622      	mov	r2, r4
 800fe06:	462b      	mov	r3, r5
 800fe08:	f7f0 fbfe 	bl	8000608 <__aeabi_dmul>
 800fe0c:	a35a      	add	r3, pc, #360	; (adr r3, 800ff78 <__ieee754_pow+0xa28>)
 800fe0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe12:	f7f0 fa43 	bl	800029c <__adddf3>
 800fe16:	4622      	mov	r2, r4
 800fe18:	462b      	mov	r3, r5
 800fe1a:	f7f0 fbf5 	bl	8000608 <__aeabi_dmul>
 800fe1e:	a358      	add	r3, pc, #352	; (adr r3, 800ff80 <__ieee754_pow+0xa30>)
 800fe20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe24:	f7f0 fa38 	bl	8000298 <__aeabi_dsub>
 800fe28:	4622      	mov	r2, r4
 800fe2a:	462b      	mov	r3, r5
 800fe2c:	f7f0 fbec 	bl	8000608 <__aeabi_dmul>
 800fe30:	a355      	add	r3, pc, #340	; (adr r3, 800ff88 <__ieee754_pow+0xa38>)
 800fe32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe36:	f7f0 fa31 	bl	800029c <__adddf3>
 800fe3a:	4622      	mov	r2, r4
 800fe3c:	462b      	mov	r3, r5
 800fe3e:	f7f0 fbe3 	bl	8000608 <__aeabi_dmul>
 800fe42:	4602      	mov	r2, r0
 800fe44:	460b      	mov	r3, r1
 800fe46:	4640      	mov	r0, r8
 800fe48:	4649      	mov	r1, r9
 800fe4a:	f7f0 fa25 	bl	8000298 <__aeabi_dsub>
 800fe4e:	4604      	mov	r4, r0
 800fe50:	460d      	mov	r5, r1
 800fe52:	4602      	mov	r2, r0
 800fe54:	460b      	mov	r3, r1
 800fe56:	4640      	mov	r0, r8
 800fe58:	4649      	mov	r1, r9
 800fe5a:	f7f0 fbd5 	bl	8000608 <__aeabi_dmul>
 800fe5e:	2200      	movs	r2, #0
 800fe60:	ec41 0b19 	vmov	d9, r0, r1
 800fe64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fe68:	4620      	mov	r0, r4
 800fe6a:	4629      	mov	r1, r5
 800fe6c:	f7f0 fa14 	bl	8000298 <__aeabi_dsub>
 800fe70:	4602      	mov	r2, r0
 800fe72:	460b      	mov	r3, r1
 800fe74:	ec51 0b19 	vmov	r0, r1, d9
 800fe78:	f7f0 fcf0 	bl	800085c <__aeabi_ddiv>
 800fe7c:	4632      	mov	r2, r6
 800fe7e:	4604      	mov	r4, r0
 800fe80:	460d      	mov	r5, r1
 800fe82:	463b      	mov	r3, r7
 800fe84:	4640      	mov	r0, r8
 800fe86:	4649      	mov	r1, r9
 800fe88:	f7f0 fbbe 	bl	8000608 <__aeabi_dmul>
 800fe8c:	4632      	mov	r2, r6
 800fe8e:	463b      	mov	r3, r7
 800fe90:	f7f0 fa04 	bl	800029c <__adddf3>
 800fe94:	4602      	mov	r2, r0
 800fe96:	460b      	mov	r3, r1
 800fe98:	4620      	mov	r0, r4
 800fe9a:	4629      	mov	r1, r5
 800fe9c:	f7f0 f9fc 	bl	8000298 <__aeabi_dsub>
 800fea0:	4642      	mov	r2, r8
 800fea2:	464b      	mov	r3, r9
 800fea4:	f7f0 f9f8 	bl	8000298 <__aeabi_dsub>
 800fea8:	460b      	mov	r3, r1
 800feaa:	4602      	mov	r2, r0
 800feac:	493a      	ldr	r1, [pc, #232]	; (800ff98 <__ieee754_pow+0xa48>)
 800feae:	2000      	movs	r0, #0
 800feb0:	f7f0 f9f2 	bl	8000298 <__aeabi_dsub>
 800feb4:	ec41 0b10 	vmov	d0, r0, r1
 800feb8:	ee10 3a90 	vmov	r3, s1
 800febc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fec4:	da2b      	bge.n	800ff1e <__ieee754_pow+0x9ce>
 800fec6:	4650      	mov	r0, sl
 800fec8:	f000 f966 	bl	8010198 <scalbn>
 800fecc:	ec51 0b10 	vmov	r0, r1, d0
 800fed0:	ec53 2b18 	vmov	r2, r3, d8
 800fed4:	f7ff bbed 	b.w	800f6b2 <__ieee754_pow+0x162>
 800fed8:	4b30      	ldr	r3, [pc, #192]	; (800ff9c <__ieee754_pow+0xa4c>)
 800feda:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800fede:	429e      	cmp	r6, r3
 800fee0:	f77f af0c 	ble.w	800fcfc <__ieee754_pow+0x7ac>
 800fee4:	4b2e      	ldr	r3, [pc, #184]	; (800ffa0 <__ieee754_pow+0xa50>)
 800fee6:	440b      	add	r3, r1
 800fee8:	4303      	orrs	r3, r0
 800feea:	d009      	beq.n	800ff00 <__ieee754_pow+0x9b0>
 800feec:	ec51 0b18 	vmov	r0, r1, d8
 800fef0:	2200      	movs	r2, #0
 800fef2:	2300      	movs	r3, #0
 800fef4:	f7f0 fdfa 	bl	8000aec <__aeabi_dcmplt>
 800fef8:	3800      	subs	r0, #0
 800fefa:	bf18      	it	ne
 800fefc:	2001      	movne	r0, #1
 800fefe:	e447      	b.n	800f790 <__ieee754_pow+0x240>
 800ff00:	4622      	mov	r2, r4
 800ff02:	462b      	mov	r3, r5
 800ff04:	f7f0 f9c8 	bl	8000298 <__aeabi_dsub>
 800ff08:	4642      	mov	r2, r8
 800ff0a:	464b      	mov	r3, r9
 800ff0c:	f7f0 fe02 	bl	8000b14 <__aeabi_dcmpge>
 800ff10:	2800      	cmp	r0, #0
 800ff12:	f43f aef3 	beq.w	800fcfc <__ieee754_pow+0x7ac>
 800ff16:	e7e9      	b.n	800feec <__ieee754_pow+0x99c>
 800ff18:	f04f 0a00 	mov.w	sl, #0
 800ff1c:	e71a      	b.n	800fd54 <__ieee754_pow+0x804>
 800ff1e:	ec51 0b10 	vmov	r0, r1, d0
 800ff22:	4619      	mov	r1, r3
 800ff24:	e7d4      	b.n	800fed0 <__ieee754_pow+0x980>
 800ff26:	491c      	ldr	r1, [pc, #112]	; (800ff98 <__ieee754_pow+0xa48>)
 800ff28:	2000      	movs	r0, #0
 800ff2a:	f7ff bb30 	b.w	800f58e <__ieee754_pow+0x3e>
 800ff2e:	2000      	movs	r0, #0
 800ff30:	2100      	movs	r1, #0
 800ff32:	f7ff bb2c 	b.w	800f58e <__ieee754_pow+0x3e>
 800ff36:	4630      	mov	r0, r6
 800ff38:	4639      	mov	r1, r7
 800ff3a:	f7ff bb28 	b.w	800f58e <__ieee754_pow+0x3e>
 800ff3e:	9204      	str	r2, [sp, #16]
 800ff40:	f7ff bb7a 	b.w	800f638 <__ieee754_pow+0xe8>
 800ff44:	2300      	movs	r3, #0
 800ff46:	f7ff bb64 	b.w	800f612 <__ieee754_pow+0xc2>
 800ff4a:	bf00      	nop
 800ff4c:	f3af 8000 	nop.w
 800ff50:	00000000 	.word	0x00000000
 800ff54:	3fe62e43 	.word	0x3fe62e43
 800ff58:	fefa39ef 	.word	0xfefa39ef
 800ff5c:	3fe62e42 	.word	0x3fe62e42
 800ff60:	0ca86c39 	.word	0x0ca86c39
 800ff64:	be205c61 	.word	0xbe205c61
 800ff68:	72bea4d0 	.word	0x72bea4d0
 800ff6c:	3e663769 	.word	0x3e663769
 800ff70:	c5d26bf1 	.word	0xc5d26bf1
 800ff74:	3ebbbd41 	.word	0x3ebbbd41
 800ff78:	af25de2c 	.word	0xaf25de2c
 800ff7c:	3f11566a 	.word	0x3f11566a
 800ff80:	16bebd93 	.word	0x16bebd93
 800ff84:	3f66c16c 	.word	0x3f66c16c
 800ff88:	5555553e 	.word	0x5555553e
 800ff8c:	3fc55555 	.word	0x3fc55555
 800ff90:	3fe00000 	.word	0x3fe00000
 800ff94:	000fffff 	.word	0x000fffff
 800ff98:	3ff00000 	.word	0x3ff00000
 800ff9c:	4090cbff 	.word	0x4090cbff
 800ffa0:	3f6f3400 	.word	0x3f6f3400
 800ffa4:	652b82fe 	.word	0x652b82fe
 800ffa8:	3c971547 	.word	0x3c971547

0800ffac <__ieee754_sqrt>:
 800ffac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb0:	ec55 4b10 	vmov	r4, r5, d0
 800ffb4:	4e55      	ldr	r6, [pc, #340]	; (801010c <__ieee754_sqrt+0x160>)
 800ffb6:	43ae      	bics	r6, r5
 800ffb8:	ee10 0a10 	vmov	r0, s0
 800ffbc:	ee10 3a10 	vmov	r3, s0
 800ffc0:	462a      	mov	r2, r5
 800ffc2:	4629      	mov	r1, r5
 800ffc4:	d110      	bne.n	800ffe8 <__ieee754_sqrt+0x3c>
 800ffc6:	ee10 2a10 	vmov	r2, s0
 800ffca:	462b      	mov	r3, r5
 800ffcc:	f7f0 fb1c 	bl	8000608 <__aeabi_dmul>
 800ffd0:	4602      	mov	r2, r0
 800ffd2:	460b      	mov	r3, r1
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	4629      	mov	r1, r5
 800ffd8:	f7f0 f960 	bl	800029c <__adddf3>
 800ffdc:	4604      	mov	r4, r0
 800ffde:	460d      	mov	r5, r1
 800ffe0:	ec45 4b10 	vmov	d0, r4, r5
 800ffe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffe8:	2d00      	cmp	r5, #0
 800ffea:	dc10      	bgt.n	801000e <__ieee754_sqrt+0x62>
 800ffec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fff0:	4330      	orrs	r0, r6
 800fff2:	d0f5      	beq.n	800ffe0 <__ieee754_sqrt+0x34>
 800fff4:	b15d      	cbz	r5, 801000e <__ieee754_sqrt+0x62>
 800fff6:	ee10 2a10 	vmov	r2, s0
 800fffa:	462b      	mov	r3, r5
 800fffc:	ee10 0a10 	vmov	r0, s0
 8010000:	f7f0 f94a 	bl	8000298 <__aeabi_dsub>
 8010004:	4602      	mov	r2, r0
 8010006:	460b      	mov	r3, r1
 8010008:	f7f0 fc28 	bl	800085c <__aeabi_ddiv>
 801000c:	e7e6      	b.n	800ffdc <__ieee754_sqrt+0x30>
 801000e:	1512      	asrs	r2, r2, #20
 8010010:	d074      	beq.n	80100fc <__ieee754_sqrt+0x150>
 8010012:	07d4      	lsls	r4, r2, #31
 8010014:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010018:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801001c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010020:	bf5e      	ittt	pl
 8010022:	0fda      	lsrpl	r2, r3, #31
 8010024:	005b      	lslpl	r3, r3, #1
 8010026:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801002a:	2400      	movs	r4, #0
 801002c:	0fda      	lsrs	r2, r3, #31
 801002e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010032:	107f      	asrs	r7, r7, #1
 8010034:	005b      	lsls	r3, r3, #1
 8010036:	2516      	movs	r5, #22
 8010038:	4620      	mov	r0, r4
 801003a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801003e:	1886      	adds	r6, r0, r2
 8010040:	428e      	cmp	r6, r1
 8010042:	bfde      	ittt	le
 8010044:	1b89      	suble	r1, r1, r6
 8010046:	18b0      	addle	r0, r6, r2
 8010048:	18a4      	addle	r4, r4, r2
 801004a:	0049      	lsls	r1, r1, #1
 801004c:	3d01      	subs	r5, #1
 801004e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010052:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010056:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801005a:	d1f0      	bne.n	801003e <__ieee754_sqrt+0x92>
 801005c:	462a      	mov	r2, r5
 801005e:	f04f 0e20 	mov.w	lr, #32
 8010062:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010066:	4281      	cmp	r1, r0
 8010068:	eb06 0c05 	add.w	ip, r6, r5
 801006c:	dc02      	bgt.n	8010074 <__ieee754_sqrt+0xc8>
 801006e:	d113      	bne.n	8010098 <__ieee754_sqrt+0xec>
 8010070:	459c      	cmp	ip, r3
 8010072:	d811      	bhi.n	8010098 <__ieee754_sqrt+0xec>
 8010074:	f1bc 0f00 	cmp.w	ip, #0
 8010078:	eb0c 0506 	add.w	r5, ip, r6
 801007c:	da43      	bge.n	8010106 <__ieee754_sqrt+0x15a>
 801007e:	2d00      	cmp	r5, #0
 8010080:	db41      	blt.n	8010106 <__ieee754_sqrt+0x15a>
 8010082:	f100 0801 	add.w	r8, r0, #1
 8010086:	1a09      	subs	r1, r1, r0
 8010088:	459c      	cmp	ip, r3
 801008a:	bf88      	it	hi
 801008c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010090:	eba3 030c 	sub.w	r3, r3, ip
 8010094:	4432      	add	r2, r6
 8010096:	4640      	mov	r0, r8
 8010098:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801009c:	f1be 0e01 	subs.w	lr, lr, #1
 80100a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80100a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80100a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80100ac:	d1db      	bne.n	8010066 <__ieee754_sqrt+0xba>
 80100ae:	430b      	orrs	r3, r1
 80100b0:	d006      	beq.n	80100c0 <__ieee754_sqrt+0x114>
 80100b2:	1c50      	adds	r0, r2, #1
 80100b4:	bf13      	iteet	ne
 80100b6:	3201      	addne	r2, #1
 80100b8:	3401      	addeq	r4, #1
 80100ba:	4672      	moveq	r2, lr
 80100bc:	f022 0201 	bicne.w	r2, r2, #1
 80100c0:	1063      	asrs	r3, r4, #1
 80100c2:	0852      	lsrs	r2, r2, #1
 80100c4:	07e1      	lsls	r1, r4, #31
 80100c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80100ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80100ce:	bf48      	it	mi
 80100d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80100d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80100d8:	4614      	mov	r4, r2
 80100da:	e781      	b.n	800ffe0 <__ieee754_sqrt+0x34>
 80100dc:	0ad9      	lsrs	r1, r3, #11
 80100de:	3815      	subs	r0, #21
 80100e0:	055b      	lsls	r3, r3, #21
 80100e2:	2900      	cmp	r1, #0
 80100e4:	d0fa      	beq.n	80100dc <__ieee754_sqrt+0x130>
 80100e6:	02cd      	lsls	r5, r1, #11
 80100e8:	d50a      	bpl.n	8010100 <__ieee754_sqrt+0x154>
 80100ea:	f1c2 0420 	rsb	r4, r2, #32
 80100ee:	fa23 f404 	lsr.w	r4, r3, r4
 80100f2:	1e55      	subs	r5, r2, #1
 80100f4:	4093      	lsls	r3, r2
 80100f6:	4321      	orrs	r1, r4
 80100f8:	1b42      	subs	r2, r0, r5
 80100fa:	e78a      	b.n	8010012 <__ieee754_sqrt+0x66>
 80100fc:	4610      	mov	r0, r2
 80100fe:	e7f0      	b.n	80100e2 <__ieee754_sqrt+0x136>
 8010100:	0049      	lsls	r1, r1, #1
 8010102:	3201      	adds	r2, #1
 8010104:	e7ef      	b.n	80100e6 <__ieee754_sqrt+0x13a>
 8010106:	4680      	mov	r8, r0
 8010108:	e7bd      	b.n	8010086 <__ieee754_sqrt+0xda>
 801010a:	bf00      	nop
 801010c:	7ff00000 	.word	0x7ff00000

08010110 <with_errno>:
 8010110:	b570      	push	{r4, r5, r6, lr}
 8010112:	4604      	mov	r4, r0
 8010114:	460d      	mov	r5, r1
 8010116:	4616      	mov	r6, r2
 8010118:	f7fa fc9a 	bl	800aa50 <__errno>
 801011c:	4629      	mov	r1, r5
 801011e:	6006      	str	r6, [r0, #0]
 8010120:	4620      	mov	r0, r4
 8010122:	bd70      	pop	{r4, r5, r6, pc}

08010124 <xflow>:
 8010124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010126:	4614      	mov	r4, r2
 8010128:	461d      	mov	r5, r3
 801012a:	b108      	cbz	r0, 8010130 <xflow+0xc>
 801012c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010130:	e9cd 2300 	strd	r2, r3, [sp]
 8010134:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010138:	4620      	mov	r0, r4
 801013a:	4629      	mov	r1, r5
 801013c:	f7f0 fa64 	bl	8000608 <__aeabi_dmul>
 8010140:	2222      	movs	r2, #34	; 0x22
 8010142:	b003      	add	sp, #12
 8010144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010148:	f7ff bfe2 	b.w	8010110 <with_errno>

0801014c <__math_uflow>:
 801014c:	b508      	push	{r3, lr}
 801014e:	2200      	movs	r2, #0
 8010150:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010154:	f7ff ffe6 	bl	8010124 <xflow>
 8010158:	ec41 0b10 	vmov	d0, r0, r1
 801015c:	bd08      	pop	{r3, pc}

0801015e <__math_oflow>:
 801015e:	b508      	push	{r3, lr}
 8010160:	2200      	movs	r2, #0
 8010162:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010166:	f7ff ffdd 	bl	8010124 <xflow>
 801016a:	ec41 0b10 	vmov	d0, r0, r1
 801016e:	bd08      	pop	{r3, pc}

08010170 <fabs>:
 8010170:	ec51 0b10 	vmov	r0, r1, d0
 8010174:	ee10 2a10 	vmov	r2, s0
 8010178:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801017c:	ec43 2b10 	vmov	d0, r2, r3
 8010180:	4770      	bx	lr

08010182 <finite>:
 8010182:	b082      	sub	sp, #8
 8010184:	ed8d 0b00 	vstr	d0, [sp]
 8010188:	9801      	ldr	r0, [sp, #4]
 801018a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801018e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010192:	0fc0      	lsrs	r0, r0, #31
 8010194:	b002      	add	sp, #8
 8010196:	4770      	bx	lr

08010198 <scalbn>:
 8010198:	b570      	push	{r4, r5, r6, lr}
 801019a:	ec55 4b10 	vmov	r4, r5, d0
 801019e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80101a2:	4606      	mov	r6, r0
 80101a4:	462b      	mov	r3, r5
 80101a6:	b99a      	cbnz	r2, 80101d0 <scalbn+0x38>
 80101a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80101ac:	4323      	orrs	r3, r4
 80101ae:	d036      	beq.n	801021e <scalbn+0x86>
 80101b0:	4b39      	ldr	r3, [pc, #228]	; (8010298 <scalbn+0x100>)
 80101b2:	4629      	mov	r1, r5
 80101b4:	ee10 0a10 	vmov	r0, s0
 80101b8:	2200      	movs	r2, #0
 80101ba:	f7f0 fa25 	bl	8000608 <__aeabi_dmul>
 80101be:	4b37      	ldr	r3, [pc, #220]	; (801029c <scalbn+0x104>)
 80101c0:	429e      	cmp	r6, r3
 80101c2:	4604      	mov	r4, r0
 80101c4:	460d      	mov	r5, r1
 80101c6:	da10      	bge.n	80101ea <scalbn+0x52>
 80101c8:	a32b      	add	r3, pc, #172	; (adr r3, 8010278 <scalbn+0xe0>)
 80101ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ce:	e03a      	b.n	8010246 <scalbn+0xae>
 80101d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80101d4:	428a      	cmp	r2, r1
 80101d6:	d10c      	bne.n	80101f2 <scalbn+0x5a>
 80101d8:	ee10 2a10 	vmov	r2, s0
 80101dc:	4620      	mov	r0, r4
 80101de:	4629      	mov	r1, r5
 80101e0:	f7f0 f85c 	bl	800029c <__adddf3>
 80101e4:	4604      	mov	r4, r0
 80101e6:	460d      	mov	r5, r1
 80101e8:	e019      	b.n	801021e <scalbn+0x86>
 80101ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80101ee:	460b      	mov	r3, r1
 80101f0:	3a36      	subs	r2, #54	; 0x36
 80101f2:	4432      	add	r2, r6
 80101f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80101f8:	428a      	cmp	r2, r1
 80101fa:	dd08      	ble.n	801020e <scalbn+0x76>
 80101fc:	2d00      	cmp	r5, #0
 80101fe:	a120      	add	r1, pc, #128	; (adr r1, 8010280 <scalbn+0xe8>)
 8010200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010204:	da1c      	bge.n	8010240 <scalbn+0xa8>
 8010206:	a120      	add	r1, pc, #128	; (adr r1, 8010288 <scalbn+0xf0>)
 8010208:	e9d1 0100 	ldrd	r0, r1, [r1]
 801020c:	e018      	b.n	8010240 <scalbn+0xa8>
 801020e:	2a00      	cmp	r2, #0
 8010210:	dd08      	ble.n	8010224 <scalbn+0x8c>
 8010212:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010216:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801021a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801021e:	ec45 4b10 	vmov	d0, r4, r5
 8010222:	bd70      	pop	{r4, r5, r6, pc}
 8010224:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010228:	da19      	bge.n	801025e <scalbn+0xc6>
 801022a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801022e:	429e      	cmp	r6, r3
 8010230:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010234:	dd0a      	ble.n	801024c <scalbn+0xb4>
 8010236:	a112      	add	r1, pc, #72	; (adr r1, 8010280 <scalbn+0xe8>)
 8010238:	e9d1 0100 	ldrd	r0, r1, [r1]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d1e2      	bne.n	8010206 <scalbn+0x6e>
 8010240:	a30f      	add	r3, pc, #60	; (adr r3, 8010280 <scalbn+0xe8>)
 8010242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010246:	f7f0 f9df 	bl	8000608 <__aeabi_dmul>
 801024a:	e7cb      	b.n	80101e4 <scalbn+0x4c>
 801024c:	a10a      	add	r1, pc, #40	; (adr r1, 8010278 <scalbn+0xe0>)
 801024e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d0b8      	beq.n	80101c8 <scalbn+0x30>
 8010256:	a10e      	add	r1, pc, #56	; (adr r1, 8010290 <scalbn+0xf8>)
 8010258:	e9d1 0100 	ldrd	r0, r1, [r1]
 801025c:	e7b4      	b.n	80101c8 <scalbn+0x30>
 801025e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010262:	3236      	adds	r2, #54	; 0x36
 8010264:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010268:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801026c:	4620      	mov	r0, r4
 801026e:	4b0c      	ldr	r3, [pc, #48]	; (80102a0 <scalbn+0x108>)
 8010270:	2200      	movs	r2, #0
 8010272:	e7e8      	b.n	8010246 <scalbn+0xae>
 8010274:	f3af 8000 	nop.w
 8010278:	c2f8f359 	.word	0xc2f8f359
 801027c:	01a56e1f 	.word	0x01a56e1f
 8010280:	8800759c 	.word	0x8800759c
 8010284:	7e37e43c 	.word	0x7e37e43c
 8010288:	8800759c 	.word	0x8800759c
 801028c:	fe37e43c 	.word	0xfe37e43c
 8010290:	c2f8f359 	.word	0xc2f8f359
 8010294:	81a56e1f 	.word	0x81a56e1f
 8010298:	43500000 	.word	0x43500000
 801029c:	ffff3cb0 	.word	0xffff3cb0
 80102a0:	3c900000 	.word	0x3c900000

080102a4 <_init>:
 80102a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102a6:	bf00      	nop
 80102a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102aa:	bc08      	pop	{r3}
 80102ac:	469e      	mov	lr, r3
 80102ae:	4770      	bx	lr

080102b0 <_fini>:
 80102b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102b2:	bf00      	nop
 80102b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102b6:	bc08      	pop	{r3}
 80102b8:	469e      	mov	lr, r3
 80102ba:	4770      	bx	lr
