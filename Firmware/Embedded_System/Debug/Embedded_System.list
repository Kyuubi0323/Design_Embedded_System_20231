
Embedded_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b744  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  0800b8e8  0800b8e8  0001b8e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3d0  0800d3d0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3d0  0800d3d0  0001d3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3d8  0800d3d8  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3d8  0800d3d8  0001d3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3dc  0800d3dc  0001d3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800d3e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d04  200000b0  0800d490  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004db4  0800d490  00024db4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002447d  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ea6  00000000  00000000  0004455d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c50  00000000  00000000  00049408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a98  00000000  00000000  0004b058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4a7  00000000  00000000  0004caf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027ab7  00000000  00000000  00067f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e418  00000000  00000000  0008fa4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012de66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dc0  00000000  00000000  0012deb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b0 	.word	0x200000b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b8cc 	.word	0x0800b8cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	0800b8cc 	.word	0x0800b8cc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Touch_binary */
  Touch_binaryHandle = osSemaphoreNew(1, 1, &Touch_binary_attributes);
 8000f00:	4a2a      	ldr	r2, [pc, #168]	; (8000fac <MX_FREERTOS_Init+0xb0>)
 8000f02:	2101      	movs	r1, #1
 8000f04:	2001      	movs	r0, #1
 8000f06:	f006 f8a6 	bl	8007056 <osSemaphoreNew>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a28      	ldr	r2, [pc, #160]	; (8000fb0 <MX_FREERTOS_Init+0xb4>)
 8000f0e:	6013      	str	r3, [r2, #0]

  /* creation of Uart_binary */
  Uart_binaryHandle = osSemaphoreNew(1, 1, &Uart_binary_attributes);
 8000f10:	4a28      	ldr	r2, [pc, #160]	; (8000fb4 <MX_FREERTOS_Init+0xb8>)
 8000f12:	2101      	movs	r1, #1
 8000f14:	2001      	movs	r0, #1
 8000f16:	f006 f89e 	bl	8007056 <osSemaphoreNew>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <MX_FREERTOS_Init+0xbc>)
 8000f1e:	6013      	str	r3, [r2, #0]

  /* creation of PcSema */
  PcSemaHandle = osSemaphoreNew(4, 4, &PcSema_attributes);
 8000f20:	4a26      	ldr	r2, [pc, #152]	; (8000fbc <MX_FREERTOS_Init+0xc0>)
 8000f22:	2104      	movs	r1, #4
 8000f24:	2004      	movs	r0, #4
 8000f26:	f006 f896 	bl	8007056 <osSemaphoreNew>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4a24      	ldr	r2, [pc, #144]	; (8000fc0 <MX_FREERTOS_Init+0xc4>)
 8000f2e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Timer01 */
  Timer01Handle = osTimerNew(Action_Timer, osTimerPeriodic, NULL, &Timer01_attributes);
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <MX_FREERTOS_Init+0xc8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	2101      	movs	r1, #1
 8000f36:	4824      	ldr	r0, [pc, #144]	; (8000fc8 <MX_FREERTOS_Init+0xcc>)
 8000f38:	f005 ffac 	bl	8006e94 <osTimerNew>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a23      	ldr	r2, [pc, #140]	; (8000fcc <MX_FREERTOS_Init+0xd0>)
 8000f40:	6013      	str	r3, [r2, #0]

  /* creation of Timer02 */
  Timer02Handle = osTimerNew(LCD_Timeout, osTimerOnce, NULL, &Timer02_attributes);
 8000f42:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <MX_FREERTOS_Init+0xd4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <MX_FREERTOS_Init+0xd8>)
 8000f4a:	f005 ffa3 	bl	8006e94 <osTimerNew>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <MX_FREERTOS_Init+0xdc>)
 8000f52:	6013      	str	r3, [r2, #0]

  /* creation of Timer03 */
  Timer03Handle = osTimerNew(Measure_Timer, osTimerPeriodic, NULL, &Timer03_attributes);
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <MX_FREERTOS_Init+0xe0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4821      	ldr	r0, [pc, #132]	; (8000fe0 <MX_FREERTOS_Init+0xe4>)
 8000f5c:	f005 ff9a 	bl	8006e94 <osTimerNew>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a20      	ldr	r2, [pc, #128]	; (8000fe4 <MX_FREERTOS_Init+0xe8>)
 8000f64:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SuperQueue */
  SuperQueueHandle = osMessageQueueNew (64, sizeof(uint16_t), &SuperQueue_attributes);
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <MX_FREERTOS_Init+0xec>)
 8000f68:	2102      	movs	r1, #2
 8000f6a:	2040      	movs	r0, #64	; 0x40
 8000f6c:	f006 f992 	bl	8007294 <osMessageQueueNew>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a1e      	ldr	r2, [pc, #120]	; (8000fec <MX_FREERTOS_Init+0xf0>)
 8000f74:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LCD */
  LCDHandle = osThreadNew(LCD_task, NULL, &LCD_attributes);
 8000f76:	4a1e      	ldr	r2, [pc, #120]	; (8000ff0 <MX_FREERTOS_Init+0xf4>)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	481e      	ldr	r0, [pc, #120]	; (8000ff4 <MX_FREERTOS_Init+0xf8>)
 8000f7c:	f005 fe86 	bl	8006c8c <osThreadNew>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <MX_FREERTOS_Init+0xfc>)
 8000f84:	6013      	str	r3, [r2, #0]

  /* creation of IRQ */
  IRQHandle = osThreadNew(IRQ_task, NULL, &IRQ_attributes);
 8000f86:	4a1d      	ldr	r2, [pc, #116]	; (8000ffc <MX_FREERTOS_Init+0x100>)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	481d      	ldr	r0, [pc, #116]	; (8001000 <MX_FREERTOS_Init+0x104>)
 8000f8c:	f005 fe7e 	bl	8006c8c <osThreadNew>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <MX_FREERTOS_Init+0x108>)
 8000f94:	6013      	str	r3, [r2, #0]

  /* creation of Uart_user */
  Uart_userHandle = osThreadNew(Uart_task, NULL, &Uart_user_attributes);
 8000f96:	4a1c      	ldr	r2, [pc, #112]	; (8001008 <MX_FREERTOS_Init+0x10c>)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	481c      	ldr	r0, [pc, #112]	; (800100c <MX_FREERTOS_Init+0x110>)
 8000f9c:	f005 fe76 	bl	8006c8c <osThreadNew>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <MX_FREERTOS_Init+0x114>)
 8000fa4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	0800be30 	.word	0x0800be30
 8000fb0:	20000118 	.word	0x20000118
 8000fb4:	0800be40 	.word	0x0800be40
 8000fb8:	2000011c 	.word	0x2000011c
 8000fbc:	0800be50 	.word	0x0800be50
 8000fc0:	20000120 	.word	0x20000120
 8000fc4:	0800be00 	.word	0x0800be00
 8000fc8:	080016bd 	.word	0x080016bd
 8000fcc:	2000010c 	.word	0x2000010c
 8000fd0:	0800be10 	.word	0x0800be10
 8000fd4:	080016d1 	.word	0x080016d1
 8000fd8:	20000110 	.word	0x20000110
 8000fdc:	0800be20 	.word	0x0800be20
 8000fe0:	08001709 	.word	0x08001709
 8000fe4:	20000114 	.word	0x20000114
 8000fe8:	0800bde8 	.word	0x0800bde8
 8000fec:	20000108 	.word	0x20000108
 8000ff0:	0800bd7c 	.word	0x0800bd7c
 8000ff4:	08001015 	.word	0x08001015
 8000ff8:	200000fc 	.word	0x200000fc
 8000ffc:	0800bda0 	.word	0x0800bda0
 8001000:	080014e5 	.word	0x080014e5
 8001004:	20000100 	.word	0x20000100
 8001008:	0800bdc4 	.word	0x0800bdc4
 800100c:	080015c5 	.word	0x080015c5
 8001010:	20000104 	.word	0x20000104

08001014 <LCD_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LCD_task */
void LCD_task(void *argument)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b08d      	sub	sp, #52	; 0x34
 8001018:	af04      	add	r7, sp, #16
 800101a:	6078      	str	r0, [r7, #4]
	char StrgTemp[6];
	char StrgHumd[3];
	char Strgbpm[4] ;
	char Strgspo2[4];
	//Display
	ILI9341_Unselect();
 800101c:	f001 f98a 	bl	8002334 <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 8001020:	f001 fe72 	bl	8002d08 <ILI9341_TouchUnselect>
	ILI9341_Init();
 8001024:	f001 fa38 	bl	8002498 <ILI9341_Init>
	ILI9341_FillScreen(ILI9341_BLACK);
 8001028:	2000      	movs	r0, #0
 800102a:	f001 fd51 	bl	8002ad0 <ILI9341_FillScreen>
	//Background
	ILI9341_WriteString(10, 10, "Embedded Design System 20231", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 800102e:	4bb8      	ldr	r3, [pc, #736]	; (8001310 <LCD_task+0x2fc>)
 8001030:	2200      	movs	r2, #0
 8001032:	9202      	str	r2, [sp, #8]
 8001034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001038:	9201      	str	r2, [sp, #4]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	9200      	str	r2, [sp, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4ab4      	ldr	r2, [pc, #720]	; (8001314 <LCD_task+0x300>)
 8001042:	210a      	movs	r1, #10
 8001044:	200a      	movs	r0, #10
 8001046:	f001 fc88 	bl	800295a <ILI9341_WriteString>
	ILI9341_WriteString(30, 40, "20202647", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 800104a:	4bb3      	ldr	r3, [pc, #716]	; (8001318 <LCD_task+0x304>)
 800104c:	2200      	movs	r2, #0
 800104e:	9202      	str	r2, [sp, #8]
 8001050:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001054:	9201      	str	r2, [sp, #4]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4aaf      	ldr	r2, [pc, #700]	; (800131c <LCD_task+0x308>)
 800105e:	2128      	movs	r1, #40	; 0x28
 8001060:	201e      	movs	r0, #30
 8001062:	f001 fc7a 	bl	800295a <ILI9341_WriteString>
	ILI9341_WriteString(235, 40, "20202543", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8001066:	4bac      	ldr	r3, [pc, #688]	; (8001318 <LCD_task+0x304>)
 8001068:	2200      	movs	r2, #0
 800106a:	9202      	str	r2, [sp, #8]
 800106c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001070:	9201      	str	r2, [sp, #4]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	9200      	str	r2, [sp, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4aa9      	ldr	r2, [pc, #676]	; (8001320 <LCD_task+0x30c>)
 800107a:	2128      	movs	r1, #40	; 0x28
 800107c:	20eb      	movs	r0, #235	; 0xeb
 800107e:	f001 fc6c 	bl	800295a <ILI9341_WriteString>
	ILI9341_DrawLine(0, 50, 320, 50, ILI9341_WHITE);
 8001082:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2332      	movs	r3, #50	; 0x32
 800108a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800108e:	2132      	movs	r1, #50	; 0x32
 8001090:	2000      	movs	r0, #0
 8001092:	f001 fb68 	bl	8002766 <ILI9341_DrawLine>
	ILI9341_DrawLine(0, 200, 320, 200, ILI9341_WHITE);
 8001096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	23c8      	movs	r3, #200	; 0xc8
 800109e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010a2:	21c8      	movs	r1, #200	; 0xc8
 80010a4:	2000      	movs	r0, #0
 80010a6:	f001 fb5e 	bl	8002766 <ILI9341_DrawLine>
	ILI9341_WriteString(100, 210, "MANDEVICES", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 80010aa:	4b99      	ldr	r3, [pc, #612]	; (8001310 <LCD_task+0x2fc>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	9202      	str	r2, [sp, #8]
 80010b0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80010b4:	9201      	str	r2, [sp, #4]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	9200      	str	r2, [sp, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a99      	ldr	r2, [pc, #612]	; (8001324 <LCD_task+0x310>)
 80010be:	21d2      	movs	r1, #210	; 0xd2
 80010c0:	2064      	movs	r0, #100	; 0x64
 80010c2:	f001 fc4a 	bl	800295a <ILI9341_WriteString>

	//Data
	ILI9341_WriteString(10, 60, "Temperature:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80010c6:	4b92      	ldr	r3, [pc, #584]	; (8001310 <LCD_task+0x2fc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	9202      	str	r2, [sp, #8]
 80010cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d0:	9201      	str	r2, [sp, #4]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	9200      	str	r2, [sp, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a93      	ldr	r2, [pc, #588]	; (8001328 <LCD_task+0x314>)
 80010da:	213c      	movs	r1, #60	; 0x3c
 80010dc:	200a      	movs	r0, #10
 80010de:	f001 fc3c 	bl	800295a <ILI9341_WriteString>
	ftoa(Node_1.Temperature, StrgTemp, 2);
 80010e2:	4b92      	ldr	r3, [pc, #584]	; (800132c <LCD_task+0x318>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	2102      	movs	r1, #2
 80010ee:	4618      	mov	r0, r3
 80010f0:	eeb0 0a67 	vmov.f32	s0, s15
 80010f4:	f001 f834 	bl	8002160 <ftoa>
	ILI9341_WriteString(150, 60, StrgTemp, Font_11x18, ILI9341_ORANGE, ILI9341_BLACK);
 80010f8:	4b85      	ldr	r3, [pc, #532]	; (8001310 <LCD_task+0x2fc>)
 80010fa:	f107 0118 	add.w	r1, r7, #24
 80010fe:	2200      	movs	r2, #0
 8001100:	9202      	str	r2, [sp, #8]
 8001102:	f64f 5220 	movw	r2, #64800	; 0xfd20
 8001106:	9201      	str	r2, [sp, #4]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	9200      	str	r2, [sp, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	460a      	mov	r2, r1
 8001110:	213c      	movs	r1, #60	; 0x3c
 8001112:	2096      	movs	r0, #150	; 0x96
 8001114:	f001 fc21 	bl	800295a <ILI9341_WriteString>

	ILI9341_WriteString(10, 80, "Humidity:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001118:	4b7d      	ldr	r3, [pc, #500]	; (8001310 <LCD_task+0x2fc>)
 800111a:	2200      	movs	r2, #0
 800111c:	9202      	str	r2, [sp, #8]
 800111e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001122:	9201      	str	r2, [sp, #4]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	9200      	str	r2, [sp, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a81      	ldr	r2, [pc, #516]	; (8001330 <LCD_task+0x31c>)
 800112c:	2150      	movs	r1, #80	; 0x50
 800112e:	200a      	movs	r0, #10
 8001130:	f001 fc13 	bl	800295a <ILI9341_WriteString>
	intToStr((int)Node_1.Humidity, StrgHumd, 2);
 8001134:	4b7d      	ldr	r3, [pc, #500]	; (800132c <LCD_task+0x318>)
 8001136:	edd3 7a01 	vldr	s15, [r3, #4]
 800113a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	2202      	movs	r2, #2
 8001144:	4619      	mov	r1, r3
 8001146:	ee17 0a90 	vmov	r0, s15
 800114a:	f001 f865 	bl	8002218 <intToStr>
	ILI9341_WriteString(150, 80, StrgHumd, Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 800114e:	4b70      	ldr	r3, [pc, #448]	; (8001310 <LCD_task+0x2fc>)
 8001150:	f107 0114 	add.w	r1, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	9202      	str	r2, [sp, #8]
 8001158:	221f      	movs	r2, #31
 800115a:	9201      	str	r2, [sp, #4]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	9200      	str	r2, [sp, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	460a      	mov	r2, r1
 8001164:	2150      	movs	r1, #80	; 0x50
 8001166:	2096      	movs	r0, #150	; 0x96
 8001168:	f001 fbf7 	bl	800295a <ILI9341_WriteString>
	ILI9341_WriteString(180, 80, "%", Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 800116c:	4b68      	ldr	r3, [pc, #416]	; (8001310 <LCD_task+0x2fc>)
 800116e:	2200      	movs	r2, #0
 8001170:	9202      	str	r2, [sp, #8]
 8001172:	221f      	movs	r2, #31
 8001174:	9201      	str	r2, [sp, #4]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	9200      	str	r2, [sp, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a6d      	ldr	r2, [pc, #436]	; (8001334 <LCD_task+0x320>)
 800117e:	2150      	movs	r1, #80	; 0x50
 8001180:	20b4      	movs	r0, #180	; 0xb4
 8001182:	f001 fbea 	bl	800295a <ILI9341_WriteString>

	ILI9341_WriteString(10, 100, "BPM:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001186:	4b62      	ldr	r3, [pc, #392]	; (8001310 <LCD_task+0x2fc>)
 8001188:	2200      	movs	r2, #0
 800118a:	9202      	str	r2, [sp, #8]
 800118c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001190:	9201      	str	r2, [sp, #4]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	9200      	str	r2, [sp, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a67      	ldr	r2, [pc, #412]	; (8001338 <LCD_task+0x324>)
 800119a:	2164      	movs	r1, #100	; 0x64
 800119c:	200a      	movs	r0, #10
 800119e:	f001 fbdc 	bl	800295a <ILI9341_WriteString>
	intToStr(Node_1.bpm, Strgbpm, 2);
 80011a2:	4b62      	ldr	r3, [pc, #392]	; (800132c <LCD_task+0x318>)
 80011a4:	7a1b      	ldrb	r3, [r3, #8]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	2202      	movs	r2, #2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f001 f832 	bl	8002218 <intToStr>
	ILI9341_WriteString(150, 100, Strgbpm, Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 80011b4:	4b56      	ldr	r3, [pc, #344]	; (8001310 <LCD_task+0x2fc>)
 80011b6:	f107 0110 	add.w	r1, r7, #16
 80011ba:	2200      	movs	r2, #0
 80011bc:	9202      	str	r2, [sp, #8]
 80011be:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80011c2:	9201      	str	r2, [sp, #4]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	9200      	str	r2, [sp, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	460a      	mov	r2, r1
 80011cc:	2164      	movs	r1, #100	; 0x64
 80011ce:	2096      	movs	r0, #150	; 0x96
 80011d0:	f001 fbc3 	bl	800295a <ILI9341_WriteString>

	ILI9341_WriteString(10, 120, "Spo2:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80011d4:	4b4e      	ldr	r3, [pc, #312]	; (8001310 <LCD_task+0x2fc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	9202      	str	r2, [sp, #8]
 80011da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011de:	9201      	str	r2, [sp, #4]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	9200      	str	r2, [sp, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a55      	ldr	r2, [pc, #340]	; (800133c <LCD_task+0x328>)
 80011e8:	2178      	movs	r1, #120	; 0x78
 80011ea:	200a      	movs	r0, #10
 80011ec:	f001 fbb5 	bl	800295a <ILI9341_WriteString>
	intToStr(Node_1.spo2, Strgspo2, 2);
 80011f0:	4b4e      	ldr	r3, [pc, #312]	; (800132c <LCD_task+0x318>)
 80011f2:	7a5b      	ldrb	r3, [r3, #9]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	2202      	movs	r2, #2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f001 f80b 	bl	8002218 <intToStr>
	ILI9341_WriteString(150, 120, Strgspo2, Font_11x18, ILI9341_PINK, ILI9341_BLACK);
 8001202:	4b43      	ldr	r3, [pc, #268]	; (8001310 <LCD_task+0x2fc>)
 8001204:	f107 010c 	add.w	r1, r7, #12
 8001208:	2200      	movs	r2, #0
 800120a:	9202      	str	r2, [sp, #8]
 800120c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001210:	9201      	str	r2, [sp, #4]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	9200      	str	r2, [sp, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	460a      	mov	r2, r1
 800121a:	2178      	movs	r1, #120	; 0x78
 800121c:	2096      	movs	r0, #150	; 0x96
 800121e:	f001 fb9c 	bl	800295a <ILI9341_WriteString>

	//button
	ILI9341_DrawCircle(Button_1.pos_x, Button_1.pos_y, Button_1.shape_r, ILI9341_LIGHTBLUE);
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <LCD_task+0x32c>)
 8001224:	8818      	ldrh	r0, [r3, #0]
 8001226:	4b46      	ldr	r3, [pc, #280]	; (8001340 <LCD_task+0x32c>)
 8001228:	8859      	ldrh	r1, [r3, #2]
 800122a:	4b45      	ldr	r3, [pc, #276]	; (8001340 <LCD_task+0x32c>)
 800122c:	889a      	ldrh	r2, [r3, #4]
 800122e:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001232:	f001 fca9 	bl	8002b88 <ILI9341_DrawCircle>
	ILI9341_DrawCircle(Button_1.pos_x, Button_1.pos_y, Button_1.shape_r/4, ILI9341_LIGHTBLUE);
 8001236:	4b42      	ldr	r3, [pc, #264]	; (8001340 <LCD_task+0x32c>)
 8001238:	8818      	ldrh	r0, [r3, #0]
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <LCD_task+0x32c>)
 800123c:	8859      	ldrh	r1, [r3, #2]
 800123e:	4b40      	ldr	r3, [pc, #256]	; (8001340 <LCD_task+0x32c>)
 8001240:	889b      	ldrh	r3, [r3, #4]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	b29a      	uxth	r2, r3
 8001246:	f647 537c 	movw	r3, #32124	; 0x7d7c
 800124a:	f001 fc9d 	bl	8002b88 <ILI9341_DrawCircle>
	ILI9341_DrawCircle(Button_2.pos_x, Button_2.pos_y, Button_2.shape_r, ILI9341_LIGHTBLUE);
 800124e:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <LCD_task+0x330>)
 8001250:	8818      	ldrh	r0, [r3, #0]
 8001252:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <LCD_task+0x330>)
 8001254:	8859      	ldrh	r1, [r3, #2]
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <LCD_task+0x330>)
 8001258:	889a      	ldrh	r2, [r3, #4]
 800125a:	f647 537c 	movw	r3, #32124	; 0x7d7c
 800125e:	f001 fc93 	bl	8002b88 <ILI9341_DrawCircle>
	ILI9341_DrawCircle(Button_2.pos_x, Button_2.pos_y, Button_2.shape_r/4, ILI9341_LIGHTBLUE);
 8001262:	4b38      	ldr	r3, [pc, #224]	; (8001344 <LCD_task+0x330>)
 8001264:	8818      	ldrh	r0, [r3, #0]
 8001266:	4b37      	ldr	r3, [pc, #220]	; (8001344 <LCD_task+0x330>)
 8001268:	8859      	ldrh	r1, [r3, #2]
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <LCD_task+0x330>)
 800126c:	889b      	ldrh	r3, [r3, #4]
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	b29a      	uxth	r2, r3
 8001272:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001276:	f001 fc87 	bl	8002b88 <ILI9341_DrawCircle>

	//start timer and softimer
	osTimerStart(Timer01Handle, ActionPeriod);
 800127a:	4b33      	ldr	r3, [pc, #204]	; (8001348 <LCD_task+0x334>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f643 2198 	movw	r1, #15000	; 0x3a98
 8001282:	4618      	mov	r0, r3
 8001284:	f005 fe82 	bl	8006f8c <osTimerStart>
	osTimerStart(Timer02Handle, Timeout);
 8001288:	4b30      	ldr	r3, [pc, #192]	; (800134c <LCD_task+0x338>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001290:	4618      	mov	r0, r3
 8001292:	f005 fe7b 	bl	8006f8c <osTimerStart>
	osTimerStart(Timer03Handle, MeasurePeriod);
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <LCD_task+0x33c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800129e:	4618      	mov	r0, r3
 80012a0:	f005 fe74 	bl	8006f8c <osTimerStart>
	//ILI9341_WriteString(150, 180, "Start Timer", Font_11x18, ILI9341_PINK, ILI9341_BLACK);

	HAL_TIM_Base_Start_IT(&htim11);
 80012a4:	482b      	ldr	r0, [pc, #172]	; (8001354 <LCD_task+0x340>)
 80012a6:	f004 f94b 	bl	8005540 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	osThreadSuspend(LCDHandle);
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <LCD_task+0x344>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f005 fd7e 	bl	8006db0 <osThreadSuspend>
	Time_keeper.LCD_Time[0] = HAL_GetTick();
 80012b4:	f001 ff16 	bl	80030e4 <HAL_GetTick>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a28      	ldr	r2, [pc, #160]	; (800135c <LCD_task+0x348>)
 80012bc:	6013      	str	r3, [r2, #0]
	//Update

	ftoa(Node_1.Temperature, StrgTemp, 2);
 80012be:	4b1b      	ldr	r3, [pc, #108]	; (800132c <LCD_task+0x318>)
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	f107 0318 	add.w	r3, r7, #24
 80012c8:	2102      	movs	r1, #2
 80012ca:	4618      	mov	r0, r3
 80012cc:	eeb0 0a67 	vmov.f32	s0, s15
 80012d0:	f000 ff46 	bl	8002160 <ftoa>
	ILI9341_WriteString(150, 60, StrgTemp, Font_11x18, ILI9341_ORANGE, ILI9341_BLACK);
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <LCD_task+0x2fc>)
 80012d6:	f107 0118 	add.w	r1, r7, #24
 80012da:	2200      	movs	r2, #0
 80012dc:	9202      	str	r2, [sp, #8]
 80012de:	f64f 5220 	movw	r2, #64800	; 0xfd20
 80012e2:	9201      	str	r2, [sp, #4]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	9200      	str	r2, [sp, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	460a      	mov	r2, r1
 80012ec:	213c      	movs	r1, #60	; 0x3c
 80012ee:	2096      	movs	r0, #150	; 0x96
 80012f0:	f001 fb33 	bl	800295a <ILI9341_WriteString>

	intToStr((int)Node_1.Humidity, StrgHumd, 2);
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <LCD_task+0x318>)
 80012f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2202      	movs	r2, #2
 8001304:	4619      	mov	r1, r3
 8001306:	ee17 0a90 	vmov	r0, s15
 800130a:	f000 ff85 	bl	8002218 <intToStr>
 800130e:	e027      	b.n	8001360 <LCD_task+0x34c>
 8001310:	20000038 	.word	0x20000038
 8001314:	0800b94c 	.word	0x0800b94c
 8001318:	20000030 	.word	0x20000030
 800131c:	0800b96c 	.word	0x0800b96c
 8001320:	0800b978 	.word	0x0800b978
 8001324:	0800b984 	.word	0x0800b984
 8001328:	0800b990 	.word	0x0800b990
 800132c:	200000cc 	.word	0x200000cc
 8001330:	0800b9a0 	.word	0x0800b9a0
 8001334:	0800b9ac 	.word	0x0800b9ac
 8001338:	0800b9b0 	.word	0x0800b9b0
 800133c:	0800b9b8 	.word	0x0800b9b8
 8001340:	20000004 	.word	0x20000004
 8001344:	20000018 	.word	0x20000018
 8001348:	2000010c 	.word	0x2000010c
 800134c:	20000110 	.word	0x20000110
 8001350:	20000114 	.word	0x20000114
 8001354:	20000270 	.word	0x20000270
 8001358:	200000fc 	.word	0x200000fc
 800135c:	200000d8 	.word	0x200000d8
	ILI9341_WriteString(150, 80, StrgHumd, Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 8001360:	4b57      	ldr	r3, [pc, #348]	; (80014c0 <LCD_task+0x4ac>)
 8001362:	f107 0114 	add.w	r1, r7, #20
 8001366:	2200      	movs	r2, #0
 8001368:	9202      	str	r2, [sp, #8]
 800136a:	221f      	movs	r2, #31
 800136c:	9201      	str	r2, [sp, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	9200      	str	r2, [sp, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	460a      	mov	r2, r1
 8001376:	2150      	movs	r1, #80	; 0x50
 8001378:	2096      	movs	r0, #150	; 0x96
 800137a:	f001 faee 	bl	800295a <ILI9341_WriteString>
	ILI9341_WriteString(180, 80, "%", Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 800137e:	4b50      	ldr	r3, [pc, #320]	; (80014c0 <LCD_task+0x4ac>)
 8001380:	2200      	movs	r2, #0
 8001382:	9202      	str	r2, [sp, #8]
 8001384:	221f      	movs	r2, #31
 8001386:	9201      	str	r2, [sp, #4]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	9200      	str	r2, [sp, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a4d      	ldr	r2, [pc, #308]	; (80014c4 <LCD_task+0x4b0>)
 8001390:	2150      	movs	r1, #80	; 0x50
 8001392:	20b4      	movs	r0, #180	; 0xb4
 8001394:	f001 fae1 	bl	800295a <ILI9341_WriteString>

	intToStr(Node_1.bpm, Strgbpm, 2);
 8001398:	4b4b      	ldr	r3, [pc, #300]	; (80014c8 <LCD_task+0x4b4>)
 800139a:	7a1b      	ldrb	r3, [r3, #8]
 800139c:	4618      	mov	r0, r3
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	2202      	movs	r2, #2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f000 ff37 	bl	8002218 <intToStr>
	ILI9341_WriteString(150, 100, Strgbpm, Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 80013aa:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <LCD_task+0x4ac>)
 80013ac:	f107 0110 	add.w	r1, r7, #16
 80013b0:	2200      	movs	r2, #0
 80013b2:	9202      	str	r2, [sp, #8]
 80013b4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80013b8:	9201      	str	r2, [sp, #4]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	9200      	str	r2, [sp, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	460a      	mov	r2, r1
 80013c2:	2164      	movs	r1, #100	; 0x64
 80013c4:	2096      	movs	r0, #150	; 0x96
 80013c6:	f001 fac8 	bl	800295a <ILI9341_WriteString>

	intToStr(Node_1.spo2, Strgspo2, 2);
 80013ca:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <LCD_task+0x4b4>)
 80013cc:	7a5b      	ldrb	r3, [r3, #9]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2202      	movs	r2, #2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f000 ff1e 	bl	8002218 <intToStr>
	ILI9341_WriteString(150, 120, Strgspo2, Font_11x18, ILI9341_PINK, ILI9341_BLACK);
 80013dc:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <LCD_task+0x4ac>)
 80013de:	f107 010c 	add.w	r1, r7, #12
 80013e2:	2200      	movs	r2, #0
 80013e4:	9202      	str	r2, [sp, #8]
 80013e6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80013ea:	9201      	str	r2, [sp, #4]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	9200      	str	r2, [sp, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	460a      	mov	r2, r1
 80013f4:	2178      	movs	r1, #120	; 0x78
 80013f6:	2096      	movs	r0, #150	; 0x96
 80013f8:	f001 faaf 	bl	800295a <ILI9341_WriteString>
	//check button state
	if (Button_1.state == 1)
 80013fc:	4b33      	ldr	r3, [pc, #204]	; (80014cc <LCD_task+0x4b8>)
 80013fe:	7b1b      	ldrb	r3, [r3, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d026      	beq.n	8001452 <LCD_task+0x43e>
	{
		ILI9341_FillCircle(Button_1.pos_x, Button_1.pos_y + 0.5, Button_1.shape_r, ILI9341_BLUE);
 8001404:	4b31      	ldr	r3, [pc, #196]	; (80014cc <LCD_task+0x4b8>)
 8001406:	881c      	ldrh	r4, [r3, #0]
 8001408:	4b30      	ldr	r3, [pc, #192]	; (80014cc <LCD_task+0x4b8>)
 800140a:	885b      	ldrh	r3, [r3, #2]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f841 	bl	8000494 <__aeabi_i2d>
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <LCD_task+0x4bc>)
 8001418:	f7fe fef0 	bl	80001fc <__adddf3>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fb78 	bl	8000b18 <__aeabi_d2uiz>
 8001428:	4603      	mov	r3, r0
 800142a:	b299      	uxth	r1, r3
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <LCD_task+0x4b8>)
 800142e:	889a      	ldrh	r2, [r3, #4]
 8001430:	231f      	movs	r3, #31
 8001432:	4620      	mov	r0, r4
 8001434:	f001 fc17 	bl	8002c66 <ILI9341_FillCircle>
		ILI9341_DrawCircle(Button_1.pos_x, Button_1.pos_y, Button_1.shape_r/4, ILI9341_GREEN);
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <LCD_task+0x4b8>)
 800143a:	8818      	ldrh	r0, [r3, #0]
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <LCD_task+0x4b8>)
 800143e:	8859      	ldrh	r1, [r3, #2]
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <LCD_task+0x4b8>)
 8001442:	889b      	ldrh	r3, [r3, #4]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	b29a      	uxth	r2, r3
 8001448:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800144c:	f001 fb9c 	bl	8002b88 <ILI9341_DrawCircle>
 8001450:	e023      	b.n	800149a <LCD_task+0x486>
	}
	else
	{
		ILI9341_WriteString(200, 100, "nOK", Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <LCD_task+0x4ac>)
 8001454:	2200      	movs	r2, #0
 8001456:	9202      	str	r2, [sp, #8]
 8001458:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800145c:	9201      	str	r2, [sp, #4]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	9200      	str	r2, [sp, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <LCD_task+0x4c0>)
 8001466:	2164      	movs	r1, #100	; 0x64
 8001468:	20c8      	movs	r0, #200	; 0xc8
 800146a:	f001 fa76 	bl	800295a <ILI9341_WriteString>
		ILI9341_DrawCircle(Button_1.pos_x, Button_1.pos_y, Button_1.shape_r, ILI9341_LIGHTBLUE);
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <LCD_task+0x4b8>)
 8001470:	8818      	ldrh	r0, [r3, #0]
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <LCD_task+0x4b8>)
 8001474:	8859      	ldrh	r1, [r3, #2]
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <LCD_task+0x4b8>)
 8001478:	889a      	ldrh	r2, [r3, #4]
 800147a:	f647 537c 	movw	r3, #32124	; 0x7d7c
 800147e:	f001 fb83 	bl	8002b88 <ILI9341_DrawCircle>
		ILI9341_DrawCircle(Button_1.pos_x, Button_1.pos_y, Button_1.shape_r/4, ILI9341_LIGHTBLUE);
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <LCD_task+0x4b8>)
 8001484:	8818      	ldrh	r0, [r3, #0]
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <LCD_task+0x4b8>)
 8001488:	8859      	ldrh	r1, [r3, #2]
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <LCD_task+0x4b8>)
 800148c:	889b      	ldrh	r3, [r3, #4]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	b29a      	uxth	r2, r3
 8001492:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001496:	f001 fb77 	bl	8002b88 <ILI9341_DrawCircle>
	}
	HAL_UART_Transmit(&huart2, (uint8_t *) "Le\r\n", 3, 50);
 800149a:	2332      	movs	r3, #50	; 0x32
 800149c:	2203      	movs	r2, #3
 800149e:	490e      	ldr	r1, [pc, #56]	; (80014d8 <LCD_task+0x4c4>)
 80014a0:	480e      	ldr	r0, [pc, #56]	; (80014dc <LCD_task+0x4c8>)
 80014a2:	f004 fb59 	bl	8005b58 <HAL_UART_Transmit>

	Time_keeper.LCD_Time[1] = HAL_GetTick();
 80014a6:	f001 fe1d 	bl	80030e4 <HAL_GetTick>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <LCD_task+0x4cc>)
 80014ae:	6053      	str	r3, [r2, #4]
	Time_keeper.LCD_Time[2] = Time_keeper.LCD_Time[1] - Time_keeper.LCD_Time[0];
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <LCD_task+0x4cc>)
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <LCD_task+0x4cc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <LCD_task+0x4cc>)
 80014bc:	6093      	str	r3, [r2, #8]
	osThreadSuspend(LCDHandle);
 80014be:	e6f4      	b.n	80012aa <LCD_task+0x296>
 80014c0:	20000038 	.word	0x20000038
 80014c4:	0800b9ac 	.word	0x0800b9ac
 80014c8:	200000cc 	.word	0x200000cc
 80014cc:	20000004 	.word	0x20000004
 80014d0:	3fe00000 	.word	0x3fe00000
 80014d4:	0800b9c0 	.word	0x0800b9c0
 80014d8:	0800b9c4 	.word	0x0800b9c4
 80014dc:	200002b8 	.word	0x200002b8
 80014e0:	200000d8 	.word	0x200000d8

080014e4 <IRQ_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IRQ_task */
void IRQ_task(void *argument)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IRQ_task */
	uint32_t currentTick = 0, lastTick = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
	uint16_t x, y;
  /* Infinite loop */
  for(;;)
  {
	if (osSemaphoreAcquire(Touch_binaryHandle, portMAX_DELAY) == osOK)
 80014f4:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <IRQ_task+0xc4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	4618      	mov	r0, r3
 80014fe:	f005 fe33 	bl	8007168 <osSemaphoreAcquire>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f5      	bne.n	80014f4 <IRQ_task+0x10>
	{
		Time_keeper.IRQ_Time[0] = HAL_GetTick();
 8001508:	f001 fdec 	bl	80030e4 <HAL_GetTick>
 800150c:	4603      	mov	r3, r0
 800150e:	4a27      	ldr	r2, [pc, #156]	; (80015ac <IRQ_task+0xc8>)
 8001510:	60d3      	str	r3, [r2, #12]
		osDelay(100);
 8001512:	2064      	movs	r0, #100	; 0x64
 8001514:	f005 fc8e 	bl	8006e34 <osDelay>
		//debounce irq touch
		currentTick = HAL_GetTick();
 8001518:	f001 fde4 	bl	80030e4 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
		osThreadResume(LCDHandle);
 800151e:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <IRQ_task+0xcc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f005 fc65 	bl	8006df2 <osThreadResume>
		if ((HAL_GPIO_ReadPin(T_IRQ_GPIO_Port, T_IRQ_Pin) == 0) && (currentTick - lastTick > 500))
 8001528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800152c:	4821      	ldr	r0, [pc, #132]	; (80015b4 <IRQ_task+0xd0>)
 800152e:	f002 fa41 	bl	80039b4 <HAL_GPIO_ReadPin>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1dd      	bne.n	80014f4 <IRQ_task+0x10>
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001542:	d9d7      	bls.n	80014f4 <IRQ_task+0x10>
		{
			lastTick = currentTick;
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	60fb      	str	r3, [r7, #12]
//			ILI9341_WriteString(x, y, "touch", Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
//			HAL_SPI_DeInit(&hspi2);
//			hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
//			HAL_SPI_Init(&hspi2);
			//reset Timeout Timer
			osTimerStop(Timer02Handle);
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <IRQ_task+0xd4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f005 fd4b 	bl	8006fe8 <osTimerStop>
			osTimerStart(Timer02Handle, 100);
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <IRQ_task+0xd4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2164      	movs	r1, #100	; 0x64
 8001558:	4618      	mov	r0, r3
 800155a:	f005 fd17 	bl	8006f8c <osTimerStart>

			//Handle touch
			if (Mode == SLEEP)
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <IRQ_task+0xd8>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10c      	bne.n	8001580 <IRQ_task+0x9c>
			{
				Mode = ACTIVE;
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <IRQ_task+0xd8>)
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, 1);
 800156c:	2201      	movs	r2, #1
 800156e:	2102      	movs	r1, #2
 8001570:	4813      	ldr	r0, [pc, #76]	; (80015c0 <IRQ_task+0xdc>)
 8001572:	f002 fa45 	bl	8003a00 <HAL_GPIO_WritePin>
//				ILI9341_WriteString(140, 170, "Wake", Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
				osThreadResume(LCDHandle);
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <IRQ_task+0xcc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f005 fc39 	bl	8006df2 <osThreadResume>
//						Button_1.state = false;
//						ILI9341_WriteString(180, 190, "deooke", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
//					}
//				}
			}
			osTimerStart(Timer02Handle, Timeout);
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <IRQ_task+0xd4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001588:	4618      	mov	r0, r3
 800158a:	f005 fcff 	bl	8006f8c <osTimerStart>
			Time_keeper.IRQ_Time[1] = HAL_GetTick();
 800158e:	f001 fda9 	bl	80030e4 <HAL_GetTick>
 8001592:	4603      	mov	r3, r0
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <IRQ_task+0xc8>)
 8001596:	6113      	str	r3, [r2, #16]
			Time_keeper.IRQ_Time[2] = Time_keeper.IRQ_Time[1] - Time_keeper.IRQ_Time[0];
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <IRQ_task+0xc8>)
 800159a:	691a      	ldr	r2, [r3, #16]
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <IRQ_task+0xc8>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	4a02      	ldr	r2, [pc, #8]	; (80015ac <IRQ_task+0xc8>)
 80015a4:	6153      	str	r3, [r2, #20]
	if (osSemaphoreAcquire(Touch_binaryHandle, portMAX_DELAY) == osOK)
 80015a6:	e7a5      	b.n	80014f4 <IRQ_task+0x10>
 80015a8:	20000118 	.word	0x20000118
 80015ac:	200000d8 	.word	0x200000d8
 80015b0:	200000fc 	.word	0x200000fc
 80015b4:	40020000 	.word	0x40020000
 80015b8:	20000110 	.word	0x20000110
 80015bc:	20000000 	.word	0x20000000
 80015c0:	40020400 	.word	0x40020400

080015c4 <Uart_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Uart_task */
void Uart_task(void *argument)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0b8      	sub	sp, #224	; 0xe0
 80015c8:	af04      	add	r7, sp, #16
 80015ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Uart_task */
	#define BUFFER_ACTION 50
	Ringbuf_init();
 80015cc:	f001 fba8 	bl	8002d20 <Ringbuf_init>
	char* action[BUFFER_ACTION];
	osThreadSuspend(Uart_userHandle);
 80015d0:	4b31      	ldr	r3, [pc, #196]	; (8001698 <Uart_task+0xd4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f005 fbeb 	bl	8006db0 <osThreadSuspend>
	osSemaphoreAcquire(Uart_binaryHandle, portMAX_DELAY);
 80015da:	4b30      	ldr	r3, [pc, #192]	; (800169c <Uart_task+0xd8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f04f 31ff 	mov.w	r1, #4294967295
 80015e2:	4618      	mov	r0, r3
 80015e4:	f005 fdc0 	bl	8007168 <osSemaphoreAcquire>
	ILI9341_WriteString(180, 190, "Rx mode", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 80015e8:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <Uart_task+0xdc>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	9202      	str	r2, [sp, #8]
 80015ee:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80015f2:	9201      	str	r2, [sp, #4]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	9200      	str	r2, [sp, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a2a      	ldr	r2, [pc, #168]	; (80016a4 <Uart_task+0xe0>)
 80015fc:	21be      	movs	r1, #190	; 0xbe
 80015fe:	20b4      	movs	r0, #180	; 0xb4
 8001600:	f001 f9ab 	bl	800295a <ILI9341_WriteString>
	osSemaphoreRelease(Uart_binaryHandle);
 8001604:	4b25      	ldr	r3, [pc, #148]	; (800169c <Uart_task+0xd8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f005 fdff 	bl	800720c <osSemaphoreRelease>
	//osSemaphoreRelease(Uart_binaryHandle);
  /* Infinite loop */
  for(;;)
  {
	  if(Wait_for("action"))
 800160e:	4826      	ldr	r0, [pc, #152]	; (80016a8 <Uart_task+0xe4>)
 8001610:	f001 fc86 	bl	8002f20 <Wait_for>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d024      	beq.n	8001664 <Uart_task+0xa0>
	  {
		  Get_after("action", 10, action);
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	461a      	mov	r2, r3
 8001620:	210a      	movs	r1, #10
 8001622:	4821      	ldr	r0, [pc, #132]	; (80016a8 <Uart_task+0xe4>)
 8001624:	f001 fc48 	bl	8002eb8 <Get_after>
		  ILI9341_WriteString(180, 190, "Receive", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <Uart_task+0xdc>)
 800162a:	2200      	movs	r2, #0
 800162c:	9202      	str	r2, [sp, #8]
 800162e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001632:	9201      	str	r2, [sp, #4]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	9200      	str	r2, [sp, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a1c      	ldr	r2, [pc, #112]	; (80016ac <Uart_task+0xe8>)
 800163c:	21be      	movs	r1, #190	; 0xbe
 800163e:	20b4      	movs	r0, #180	; 0xb4
 8001640:	f001 f98b 	bl	800295a <ILI9341_WriteString>
		  Uart_sendstring(action);
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4618      	mov	r0, r3
 800164a:	f001 fc05 	bl	8002e58 <Uart_sendstring>
		  osThreadResume(LCDHandle);
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <Uart_task+0xec>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f005 fbcd 	bl	8006df2 <osThreadResume>
		  osThreadResume(IRQHandle);
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <Uart_task+0xf0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f005 fbc8 	bl	8006df2 <osThreadResume>
 8001662:	e7d4      	b.n	800160e <Uart_task+0x4a>
	  }
	  else
	  {
		  ILI9341_WriteString(180, 190, "Not_Receive", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <Uart_task+0xdc>)
 8001666:	2200      	movs	r2, #0
 8001668:	9202      	str	r2, [sp, #8]
 800166a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800166e:	9201      	str	r2, [sp, #4]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	9200      	str	r2, [sp, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <Uart_task+0xf4>)
 8001678:	21be      	movs	r1, #190	; 0xbe
 800167a:	20b4      	movs	r0, #180	; 0xb4
 800167c:	f001 f96d 	bl	800295a <ILI9341_WriteString>
		  osThreadResume(LCDHandle);
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <Uart_task+0xec>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f005 fbb4 	bl	8006df2 <osThreadResume>
		  osThreadResume(IRQHandle);
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <Uart_task+0xf0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f005 fbaf 	bl	8006df2 <osThreadResume>
	  if(Wait_for("action"))
 8001694:	e7bb      	b.n	800160e <Uart_task+0x4a>
 8001696:	bf00      	nop
 8001698:	20000104 	.word	0x20000104
 800169c:	2000011c 	.word	0x2000011c
 80016a0:	20000038 	.word	0x20000038
 80016a4:	0800b9cc 	.word	0x0800b9cc
 80016a8:	0800b9d4 	.word	0x0800b9d4
 80016ac:	0800b9dc 	.word	0x0800b9dc
 80016b0:	200000fc 	.word	0x200000fc
 80016b4:	20000100 	.word	0x20000100
 80016b8:	0800b9e4 	.word	0x0800b9e4

080016bc <Action_Timer>:
  /* USER CODE END Uart_task */
}

/* Action_Timer function */
void Action_Timer(void *argument)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Action_Timer */

  /* USER CODE END Action_Timer */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LCD_Timeout>:

/* LCD_Timeout function */
void LCD_Timeout(void *argument)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCD_Timeout */
	HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2102      	movs	r1, #2
 80016dc:	4807      	ldr	r0, [pc, #28]	; (80016fc <LCD_Timeout+0x2c>)
 80016de:	f002 f98f 	bl	8003a00 <HAL_GPIO_WritePin>
	Mode = SLEEP;
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <LCD_Timeout+0x30>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
	osThreadSuspend(LCDHandle);
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <LCD_Timeout+0x34>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f005 fb5f 	bl	8006db0 <osThreadSuspend>
  /* USER CODE END LCD_Timeout */
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40020400 	.word	0x40020400
 8001700:	20000000 	.word	0x20000000
 8001704:	200000fc 	.word	0x200000fc

08001708 <Measure_Timer>:

/* Measure_Timer function */
void Measure_Timer(void *argument)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af04      	add	r7, sp, #16
 800170e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Measure_Timer */
	ILI9341_WriteString(180, 190, "measure", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <Measure_Timer+0x6c>)
 8001712:	2200      	movs	r2, #0
 8001714:	9202      	str	r2, [sp, #8]
 8001716:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800171a:	9201      	str	r2, [sp, #4]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	9200      	str	r2, [sp, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a15      	ldr	r2, [pc, #84]	; (8001778 <Measure_Timer+0x70>)
 8001724:	21be      	movs	r1, #190	; 0xbe
 8001726:	20b4      	movs	r0, #180	; 0xb4
 8001728:	f001 f917 	bl	800295a <ILI9341_WriteString>
	Time_keeper.Measure_Time[0] = HAL_GetTick();
 800172c:	f001 fcda 	bl	80030e4 <HAL_GetTick>
 8001730:	4603      	mov	r3, r0
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <Measure_Timer+0x74>)
 8001734:	6193      	str	r3, [r2, #24]

	Time_keeper.Measure_Time[1] = HAL_GetTick();
 8001736:	f001 fcd5 	bl	80030e4 <HAL_GetTick>
 800173a:	4603      	mov	r3, r0
 800173c:	4a0f      	ldr	r2, [pc, #60]	; (800177c <Measure_Timer+0x74>)
 800173e:	61d3      	str	r3, [r2, #28]
	Time_keeper.Measure_Time[2] = Time_keeper.Measure_Time[1] - Time_keeper.Measure_Time[0];
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <Measure_Timer+0x74>)
 8001742:	69da      	ldr	r2, [r3, #28]
 8001744:	4b0d      	ldr	r3, [pc, #52]	; (800177c <Measure_Timer+0x74>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	4a0c      	ldr	r2, [pc, #48]	; (800177c <Measure_Timer+0x74>)
 800174c:	6213      	str	r3, [r2, #32]

	osSemaphoreRelease(PcSemaHandle);
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <Measure_Timer+0x78>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f005 fd5a 	bl	800720c <osSemaphoreRelease>

	if (Mode == ACTIVE)
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <Measure_Timer+0x7c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d104      	bne.n	800176a <Measure_Timer+0x62>
		osThreadResume(LCDHandle);
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <Measure_Timer+0x80>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f005 fb44 	bl	8006df2 <osThreadResume>
  /* USER CODE END Measure_Timer */
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000038 	.word	0x20000038
 8001778:	0800b9f0 	.word	0x0800b9f0
 800177c:	200000d8 	.word	0x200000d8
 8001780:	20000120 	.word	0x20000120
 8001784:	20000000 	.word	0x20000000
 8001788:	200000fc 	.word	0x200000fc

0800178c <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == T_IRQ_Pin)
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800179c:	d113      	bne.n	80017c6 <HAL_GPIO_EXTI_Callback+0x3a>
  {
	  	Button_1.state = !Button_1.state;
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_GPIO_EXTI_Callback+0x44>)
 80017a0:	7b1b      	ldrb	r3, [r3, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf14      	ite	ne
 80017a6:	2301      	movne	r3, #1
 80017a8:	2300      	moveq	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f083 0301 	eor.w	r3, r3, #1
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_GPIO_EXTI_Callback+0x44>)
 80017ba:	731a      	strb	r2, [r3, #12]
		osSemaphoreRelease(Touch_binaryHandle);
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_GPIO_EXTI_Callback+0x48>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f005 fd23 	bl	800720c <osSemaphoreRelease>
  }
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000004 	.word	0x20000004
 80017d4:	20000118 	.word	0x20000118

080017d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b56      	ldr	r3, [pc, #344]	; (800194c <MX_GPIO_Init+0x174>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a55      	ldr	r2, [pc, #340]	; (800194c <MX_GPIO_Init+0x174>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b53      	ldr	r3, [pc, #332]	; (800194c <MX_GPIO_Init+0x174>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b4f      	ldr	r3, [pc, #316]	; (800194c <MX_GPIO_Init+0x174>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a4e      	ldr	r2, [pc, #312]	; (800194c <MX_GPIO_Init+0x174>)
 8001814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b4c      	ldr	r3, [pc, #304]	; (800194c <MX_GPIO_Init+0x174>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b48      	ldr	r3, [pc, #288]	; (800194c <MX_GPIO_Init+0x174>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a47      	ldr	r2, [pc, #284]	; (800194c <MX_GPIO_Init+0x174>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b45      	ldr	r3, [pc, #276]	; (800194c <MX_GPIO_Init+0x174>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b41      	ldr	r3, [pc, #260]	; (800194c <MX_GPIO_Init+0x174>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a40      	ldr	r2, [pc, #256]	; (800194c <MX_GPIO_Init+0x174>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b3e      	ldr	r3, [pc, #248]	; (800194c <MX_GPIO_Init+0x174>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|DHT_Pin, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001864:	483a      	ldr	r0, [pc, #232]	; (8001950 <MX_GPIO_Init+0x178>)
 8001866:	f002 f8cb 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_LED_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	f240 3102 	movw	r1, #770	; 0x302
 8001870:	4838      	ldr	r0, [pc, #224]	; (8001954 <MX_GPIO_Init+0x17c>)
 8001872:	f002 f8c5 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800187c:	4836      	ldr	r0, [pc, #216]	; (8001958 <MX_GPIO_Init+0x180>)
 800187e:	f002 f8bf 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	482d      	ldr	r0, [pc, #180]	; (8001950 <MX_GPIO_Init+0x178>)
 800189c:	f001 fdf6 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT_Pin;
 80018a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	4825      	ldr	r0, [pc, #148]	; (8001950 <MX_GPIO_Init+0x178>)
 80018ba:	f001 fde7 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 80018be:	2302      	movs	r3, #2
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	481f      	ldr	r0, [pc, #124]	; (8001954 <MX_GPIO_Init+0x17c>)
 80018d6:	f001 fdd9 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80018da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4819      	ldr	r0, [pc, #100]	; (8001958 <MX_GPIO_Init+0x180>)
 80018f2:	f001 fdcb 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin;
 80018f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	4812      	ldr	r0, [pc, #72]	; (8001958 <MX_GPIO_Init+0x180>)
 8001910:	f001 fdbc 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 8001914:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191e:	2301      	movs	r3, #1
 8001920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4809      	ldr	r0, [pc, #36]	; (8001954 <MX_GPIO_Init+0x17c>)
 800192e:	f001 fdad 	bl	800348c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2105      	movs	r1, #5
 8001936:	2017      	movs	r0, #23
 8001938:	f001 fcd2 	bl	80032e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800193c:	2017      	movs	r0, #23
 800193e:	f001 fcfb 	bl	8003338 <HAL_NVIC_EnableIRQ>

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	; 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40020800 	.word	0x40020800
 8001954:	40020400 	.word	0x40020400
 8001958:	40020000 	.word	0x40020000

0800195c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <MX_I2C1_Init+0x50>)
 8001962:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <MX_I2C1_Init+0x54>)
 8001964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <MX_I2C1_Init+0x50>)
 8001968:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <MX_I2C1_Init+0x58>)
 800196a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <MX_I2C1_Init+0x50>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <MX_I2C1_Init+0x50>)
 8001974:	2200      	movs	r2, #0
 8001976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_I2C1_Init+0x50>)
 800197a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800197e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <MX_I2C1_Init+0x50>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_I2C1_Init+0x50>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <MX_I2C1_Init+0x50>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_I2C1_Init+0x50>)
 8001994:	2200      	movs	r2, #0
 8001996:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <MX_I2C1_Init+0x50>)
 800199a:	f002 f87b 	bl	8003a94 <HAL_I2C_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019a4:	f000 f8e6 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000124 	.word	0x20000124
 80019b0:	40005400 	.word	0x40005400
 80019b4:	000186a0 	.word	0x000186a0

080019b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a19      	ldr	r2, [pc, #100]	; (8001a3c <HAL_I2C_MspInit+0x84>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d12b      	bne.n	8001a32 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_I2C_MspInit+0x88>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <HAL_I2C_MspInit+0x88>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_I2C_MspInit+0x88>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019f6:	23c0      	movs	r3, #192	; 0xc0
 80019f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019fa:	2312      	movs	r3, #18
 80019fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a06:	2304      	movs	r3, #4
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480c      	ldr	r0, [pc, #48]	; (8001a44 <HAL_I2C_MspInit+0x8c>)
 8001a12:	f001 fd3b 	bl	800348c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_I2C_MspInit+0x88>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <HAL_I2C_MspInit+0x88>)
 8001a20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_I2C_MspInit+0x88>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	; 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40005400 	.word	0x40005400
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020400 	.word	0x40020400

08001a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a4c:	f001 fb14 	bl	8003078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a50:	f000 f814 	bl	8001a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a54:	f7ff fec0 	bl	80017d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a58:	f7ff ff80 	bl	800195c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001a5c:	f000 f89a 	bl	8001b94 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001a60:	f000 fb04 	bl	800206c <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8001a64:	f000 fab6 	bl	8001fd4 <MX_TIM11_Init>
  MX_SPI2_Init();
 8001a68:	f000 f8ca 	bl	8001c00 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001a6c:	f005 f8c4 	bl	8006bf8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001a70:	f7ff fa44 	bl	8000efc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001a74:	f005 f8e4 	bl	8006c40 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <main+0x30>
	...

08001a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b094      	sub	sp, #80	; 0x50
 8001a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a82:	f107 0320 	add.w	r3, r7, #32
 8001a86:	2230      	movs	r2, #48	; 0x30
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f008 ff3a 	bl	800a904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <SystemClock_Config+0xcc>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	4a27      	ldr	r2, [pc, #156]	; (8001b48 <SystemClock_Config+0xcc>)
 8001aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aae:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab0:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <SystemClock_Config+0xcc>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <SystemClock_Config+0xd0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ac8:	4a20      	ldr	r2, [pc, #128]	; (8001b4c <SystemClock_Config+0xd0>)
 8001aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <SystemClock_Config+0xd0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001adc:	2302      	movs	r3, #2
 8001ade:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae4:	2310      	movs	r3, #16
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001af0:	2308      	movs	r3, #8
 8001af2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001af4:	2354      	movs	r3, #84	; 0x54
 8001af6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001af8:	2302      	movs	r3, #2
 8001afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001afc:	2304      	movs	r3, #4
 8001afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b00:	f107 0320 	add.w	r3, r7, #32
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 f9ab 	bl	8003e60 <HAL_RCC_OscConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b10:	f000 f830 	bl	8001b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b14:	230f      	movs	r3, #15
 8001b16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	2102      	movs	r1, #2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 fcbd 	bl	80044b0 <HAL_RCC_ClockConfig>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b3c:	f000 f81a 	bl	8001b74 <Error_Handler>
  }
}
 8001b40:	bf00      	nop
 8001b42:	3750      	adds	r7, #80	; 0x50
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40007000 	.word	0x40007000

08001b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b62:	f001 faab 	bl	80030bc <HAL_IncTick>
  {
//	  HAL_TIM_Base_Stop_IT(htim);
//	  if (Button_1.state == false)
  }
  /* USER CODE END Callback 1 */
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40014400 	.word	0x40014400

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <Error_Handler+0x8>

08001b7e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <MX_SPI1_Init+0x64>)
 8001b9a:	4a18      	ldr	r2, [pc, #96]	; (8001bfc <MX_SPI1_Init+0x68>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <MX_SPI1_Init+0x64>)
 8001ba0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ba4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <MX_SPI1_Init+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <MX_SPI1_Init+0x64>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_SPI1_Init+0x64>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <MX_SPI1_Init+0x64>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_SPI1_Init+0x64>)
 8001bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_SPI1_Init+0x64>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <MX_SPI1_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_SPI1_Init+0x64>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <MX_SPI1_Init+0x64>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_SPI1_Init+0x64>)
 8001be0:	220a      	movs	r2, #10
 8001be2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001be4:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <MX_SPI1_Init+0x64>)
 8001be6:	f002 ff1d 	bl	8004a24 <HAL_SPI_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bf0:	f7ff ffc0 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000178 	.word	0x20000178
 8001bfc:	40013000 	.word	0x40013000

08001c00 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <MX_SPI2_Init+0x64>)
 8001c06:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <MX_SPI2_Init+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <MX_SPI2_Init+0x64>)
 8001c0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <MX_SPI2_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <MX_SPI2_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_SPI2_Init+0x64>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <MX_SPI2_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <MX_SPI2_Init+0x64>)
 8001c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c30:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <MX_SPI2_Init+0x64>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <MX_SPI2_Init+0x64>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <MX_SPI2_Init+0x64>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <MX_SPI2_Init+0x64>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <MX_SPI2_Init+0x64>)
 8001c4c:	220a      	movs	r2, #10
 8001c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c50:	4804      	ldr	r0, [pc, #16]	; (8001c64 <MX_SPI2_Init+0x64>)
 8001c52:	f002 fee7 	bl	8004a24 <HAL_SPI_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c5c:	f7ff ff8a 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	200001d0 	.word	0x200001d0
 8001c68:	40003800 	.word	0x40003800

08001c6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08c      	sub	sp, #48	; 0x30
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a45      	ldr	r2, [pc, #276]	; (8001da0 <HAL_SPI_MspInit+0x134>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d152      	bne.n	8001d34 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	4b44      	ldr	r3, [pc, #272]	; (8001da4 <HAL_SPI_MspInit+0x138>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a43      	ldr	r2, [pc, #268]	; (8001da4 <HAL_SPI_MspInit+0x138>)
 8001c98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b41      	ldr	r3, [pc, #260]	; (8001da4 <HAL_SPI_MspInit+0x138>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <HAL_SPI_MspInit+0x138>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a3c      	ldr	r2, [pc, #240]	; (8001da4 <HAL_SPI_MspInit+0x138>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <HAL_SPI_MspInit+0x138>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <HAL_SPI_MspInit+0x138>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a35      	ldr	r2, [pc, #212]	; (8001da4 <HAL_SPI_MspInit+0x138>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <HAL_SPI_MspInit+0x138>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	482a      	ldr	r0, [pc, #168]	; (8001da8 <HAL_SPI_MspInit+0x13c>)
 8001cfe:	f001 fbc5 	bl	800348c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d02:	2330      	movs	r3, #48	; 0x30
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d12:	2305      	movs	r3, #5
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4823      	ldr	r0, [pc, #140]	; (8001dac <HAL_SPI_MspInit+0x140>)
 8001d1e:	f001 fbb5 	bl	800348c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2105      	movs	r1, #5
 8001d26:	2023      	movs	r0, #35	; 0x23
 8001d28:	f001 fada 	bl	80032e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d2c:	2023      	movs	r0, #35	; 0x23
 8001d2e:	f001 fb03 	bl	8003338 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d32:	e031      	b.n	8001d98 <HAL_SPI_MspInit+0x12c>
  else if(spiHandle->Instance==SPI2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <HAL_SPI_MspInit+0x144>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d12c      	bne.n	8001d98 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <HAL_SPI_MspInit+0x138>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <HAL_SPI_MspInit+0x138>)
 8001d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <HAL_SPI_MspInit+0x138>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_SPI_MspInit+0x138>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <HAL_SPI_MspInit+0x138>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_SPI_MspInit+0x138>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001d76:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d88:	2305      	movs	r3, #5
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	4619      	mov	r1, r3
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <HAL_SPI_MspInit+0x140>)
 8001d94:	f001 fb7a 	bl	800348c <HAL_GPIO_Init>
}
 8001d98:	bf00      	nop
 8001d9a:	3730      	adds	r7, #48	; 0x30
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40013000 	.word	0x40013000
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40003800 	.word	0x40003800

08001db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <HAL_MspInit+0x64>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a15      	ldr	r2, [pc, #84]	; (8001e18 <HAL_MspInit+0x64>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <HAL_MspInit+0x64>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <HAL_MspInit+0x64>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <HAL_MspInit+0x64>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <HAL_MspInit+0x64>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	210f      	movs	r1, #15
 8001df6:	f06f 0001 	mvn.w	r0, #1
 8001dfa:	f001 fa71 	bl	80032e0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2105      	movs	r1, #5
 8001e02:	2001      	movs	r0, #1
 8001e04:	f001 fa6c 	bl	80032e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f001 fa95 	bl	8003338 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800

08001e1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08c      	sub	sp, #48	; 0x30
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <HAL_InitTick+0xd0>)
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	4a2d      	ldr	r2, [pc, #180]	; (8001eec <HAL_InitTick+0xd0>)
 8001e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_InitTick+0xd0>)
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e48:	f107 020c 	add.w	r2, r7, #12
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f002 fdb4 	bl	80049c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e58:	f002 fd9e 	bl	8004998 <HAL_RCC_GetPCLK2Freq>
 8001e5c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e60:	4a23      	ldr	r2, [pc, #140]	; (8001ef0 <HAL_InitTick+0xd4>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	0c9b      	lsrs	r3, r3, #18
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001e6c:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <HAL_InitTick+0xd8>)
 8001e6e:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <HAL_InitTick+0xdc>)
 8001e70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <HAL_InitTick+0xd8>)
 8001e74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e78:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001e7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ef4 <HAL_InitTick+0xd8>)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001e80:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <HAL_InitTick+0xd8>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_InitTick+0xd8>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8c:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_InitTick+0xd8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001e92:	4818      	ldr	r0, [pc, #96]	; (8001ef4 <HAL_InitTick+0xd8>)
 8001e94:	f003 fa8e 	bl	80053b4 <HAL_TIM_Base_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d11b      	bne.n	8001ede <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001ea6:	4813      	ldr	r0, [pc, #76]	; (8001ef4 <HAL_InitTick+0xd8>)
 8001ea8:	f003 fb4a 	bl	8005540 <HAL_TIM_Base_Start_IT>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d111      	bne.n	8001ede <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001eba:	2019      	movs	r0, #25
 8001ebc:	f001 fa3c 	bl	8003338 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	d808      	bhi.n	8001ed8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	2019      	movs	r0, #25
 8001ecc:	f001 fa08 	bl	80032e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <HAL_InitTick+0xe0>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e002      	b.n	8001ede <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3730      	adds	r7, #48	; 0x30
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	431bde83 	.word	0x431bde83
 8001ef4:	20000228 	.word	0x20000228
 8001ef8:	40014400 	.word	0x40014400
 8001efc:	20000040 	.word	0x20000040

08001f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <NMI_Handler+0x4>

08001f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <HardFault_Handler+0x4>

08001f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <MemManage_Handler+0x4>

08001f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <BusFault_Handler+0x4>

08001f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <UsageFault_Handler+0x4>

08001f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001f30:	f001 ff7c 	bl	8003e2c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 8001f3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f40:	f001 fd90 	bl	8003a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(timeout > 0)
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <TIM1_UP_TIM10_IRQHandler+0x24>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <TIM1_UP_TIM10_IRQHandler+0x18>
		timeout--;
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <TIM1_UP_TIM10_IRQHandler+0x24>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <TIM1_UP_TIM10_IRQHandler+0x24>)
 8001f5e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f60:	4803      	ldr	r0, [pc, #12]	; (8001f70 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8001f62:	f003 fb7f 	bl	8005664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200002fc 	.word	0x200002fc
 8001f70:	20000228 	.word	0x20000228

08001f74 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001f7a:	f003 fb73 	bl	8005664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000270 	.word	0x20000270

08001f88 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <SPI1_IRQHandler+0x10>)
 8001f8e:	f003 f829 	bl	8004fe4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000178 	.word	0x20000178

08001f9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <USART2_IRQHandler+0x10>)
 8001fa2:	f003 fe6b 	bl	8005c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200002b8 	.word	0x200002b8

08001fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <SystemInit+0x20>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <SystemInit+0x20>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_TIM11_Init+0x40>)
 8001fda:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <MX_TIM11_Init+0x44>)
 8001fdc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 839;
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <MX_TIM11_Init+0x40>)
 8001fe0:	f240 3247 	movw	r2, #839	; 0x347
 8001fe4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_TIM11_Init+0x40>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_TIM11_Init+0x40>)
 8001fee:	2263      	movs	r2, #99	; 0x63
 8001ff0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MX_TIM11_Init+0x40>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_TIM11_Init+0x40>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_TIM11_Init+0x40>)
 8002000:	f003 f9d8 	bl	80053b4 <HAL_TIM_Base_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800200a:	f7ff fdb3 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000270 	.word	0x20000270
 8002018:	40014800 	.word	0x40014800

0800201c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0e      	ldr	r2, [pc, #56]	; (8002064 <HAL_TIM_Base_MspInit+0x48>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d115      	bne.n	800205a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_TIM_Base_MspInit+0x4c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	4a0c      	ldr	r2, [pc, #48]	; (8002068 <HAL_TIM_Base_MspInit+0x4c>)
 8002038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800203c:	6453      	str	r3, [r2, #68]	; 0x44
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_TIM_Base_MspInit+0x4c>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2105      	movs	r1, #5
 800204e:	201a      	movs	r0, #26
 8002050:	f001 f946 	bl	80032e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002054:	201a      	movs	r0, #26
 8002056:	f001 f96f 	bl	8003338 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40014800 	.word	0x40014800
 8002068:	40023800 	.word	0x40023800

0800206c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <MX_USART2_UART_Init+0x50>)
 8002074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800207c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002092:	220c      	movs	r2, #12
 8002094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 80020a4:	f003 fca2 	bl	80059ec <HAL_UART_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ae:	f7ff fd61 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200002b8 	.word	0x200002b8
 80020bc:	40004400 	.word	0x40004400

080020c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <HAL_UART_MspInit+0x94>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d133      	bne.n	800214a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_UART_MspInit+0x98>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a1b      	ldr	r2, [pc, #108]	; (8002158 <HAL_UART_MspInit+0x98>)
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_UART_MspInit+0x98>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_UART_MspInit+0x98>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a14      	ldr	r2, [pc, #80]	; (8002158 <HAL_UART_MspInit+0x98>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_UART_MspInit+0x98>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800211a:	230c      	movs	r3, #12
 800211c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800212a:	2307      	movs	r3, #7
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	4809      	ldr	r0, [pc, #36]	; (800215c <HAL_UART_MspInit+0x9c>)
 8002136:	f001 f9a9 	bl	800348c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2105      	movs	r1, #5
 800213e:	2026      	movs	r0, #38	; 0x26
 8002140:	f001 f8ce 	bl	80032e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002144:	2026      	movs	r0, #38	; 0x26
 8002146:	f001 f8f7 	bl	8003338 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800214a:	bf00      	nop
 800214c:	3728      	adds	r7, #40	; 0x28
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40004400 	.word	0x40004400
 8002158:	40023800 	.word	0x40023800
 800215c:	40020000 	.word	0x40020000

08002160 <ftoa>:
#include "common.h"
#include <math.h>
#include <stdio.h>
// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 8002160:	b5b0      	push	{r4, r5, r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	ed87 0a03 	vstr	s0, [r7, #12]
 800216a:	60b8      	str	r0, [r7, #8]
 800216c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 800216e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002176:	ee17 3a90 	vmov	r3, s15
 800217a:	61fb      	str	r3, [r7, #28]
    // Extract floating part
    float fpart = n - (float)ipart;
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002186:	ed97 7a03 	vldr	s14, [r7, #12]
 800218a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800218e:	edc7 7a06 	vstr	s15, [r7, #24]
    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	69f8      	ldr	r0, [r7, #28]
 8002198:	f000 f83e 	bl	8002218 <intToStr>
 800219c:	6178      	str	r0, [r7, #20]
    // check for display option after point
    if (afterpoint != 0)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d030      	beq.n	8002206 <ftoa+0xa6>
    {
        res[i] = '.'; // add dot
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	4413      	add	r3, r2
 80021aa:	222e      	movs	r2, #46	; 0x2e
 80021ac:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 80021ae:	69b8      	ldr	r0, [r7, #24]
 80021b0:	f7fe f982 	bl	80004b8 <__aeabi_f2d>
 80021b4:	4604      	mov	r4, r0
 80021b6:	460d      	mov	r5, r1
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7fe f96b 	bl	8000494 <__aeabi_i2d>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	ec43 2b11 	vmov	d1, r2, r3
 80021c6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002210 <ftoa+0xb0>
 80021ca:	f008 fc65 	bl	800aa98 <pow>
 80021ce:	ec53 2b10 	vmov	r2, r3, d0
 80021d2:	4620      	mov	r0, r4
 80021d4:	4629      	mov	r1, r5
 80021d6:	f7fe f9c7 	bl	8000568 <__aeabi_dmul>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	f7fe fcb9 	bl	8000b58 <__aeabi_d2f>
 80021e6:	4603      	mov	r3, r0
 80021e8:	61bb      	str	r3, [r7, #24]
        intToStr((int)fpart, res + i + 1, afterpoint);
 80021ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80021ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3301      	adds	r3, #1
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	4413      	add	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4619      	mov	r1, r3
 80021fe:	ee17 0a90 	vmov	r0, s15
 8002202:	f000 f809 	bl	8002218 <intToStr>
    }
}
 8002206:	bf00      	nop
 8002208:	3720      	adds	r7, #32
 800220a:	46bd      	mov	sp, r7
 800220c:	bdb0      	pop	{r4, r5, r7, pc}
 800220e:	bf00      	nop
 8002210:	00000000 	.word	0x00000000
 8002214:	40240000 	.word	0x40240000

08002218 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
    int i = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
    if (x == 0)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d126      	bne.n	800227c <intToStr+0x64>
    {
        str[i++] = '0';
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	617a      	str	r2, [r7, #20]
 8002234:	461a      	mov	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	4413      	add	r3, r2
 800223a:	2230      	movs	r2, #48	; 0x30
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	e029      	b.n	8002294 <intToStr+0x7c>
    }
    else
    {
        while (x)
        {
            str[i++] = (x % 10) + '0';
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <intToStr+0xa0>)
 8002244:	fb83 1302 	smull	r1, r3, r3, r2
 8002248:	1099      	asrs	r1, r3, #2
 800224a:	17d3      	asrs	r3, r2, #31
 800224c:	1ac9      	subs	r1, r1, r3
 800224e:	460b      	mov	r3, r1
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	1ad1      	subs	r1, r2, r3
 8002258:	b2ca      	uxtb	r2, r1
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	1c59      	adds	r1, r3, #1
 800225e:	6179      	str	r1, [r7, #20]
 8002260:	4619      	mov	r1, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	440b      	add	r3, r1
 8002266:	3230      	adds	r2, #48	; 0x30
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	701a      	strb	r2, [r3, #0]
            x = x / 10;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <intToStr+0xa0>)
 8002270:	fb82 1203 	smull	r1, r2, r2, r3
 8002274:	1092      	asrs	r2, r2, #2
 8002276:	17db      	asrs	r3, r3, #31
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	60fb      	str	r3, [r7, #12]
        while (x)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1de      	bne.n	8002240 <intToStr+0x28>
        }
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8002282:	e007      	b.n	8002294 <intToStr+0x7c>
        str[i++] = '0';
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	617a      	str	r2, [r7, #20]
 800228a:	461a      	mov	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4413      	add	r3, r2
 8002290:	2230      	movs	r2, #48	; 0x30
 8002292:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	dbf3      	blt.n	8002284 <intToStr+0x6c>

    reverse(str, i);
 800229c:	6979      	ldr	r1, [r7, #20]
 800229e:	68b8      	ldr	r0, [r7, #8]
 80022a0:	f000 f80c 	bl	80022bc <reverse>
    str[i] = '\0';
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	4413      	add	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
    return i;
 80022ae:	697b      	ldr	r3, [r7, #20]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	66666667 	.word	0x66666667

080022bc <reverse>:

void reverse(char* str, int len)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	613b      	str	r3, [r7, #16]
    while (i < j)
 80022d0:	e018      	b.n	8002304 <reverse+0x48>
    {
        temp = str[i];
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4413      	add	r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	441a      	add	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	440b      	add	r3, r1
 80022e8:	7812      	ldrb	r2, [r2, #0]
 80022ea:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	701a      	strb	r2, [r3, #0]
        i++;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	3301      	adds	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
        j--;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	3b01      	subs	r3, #1
 8002302:	613b      	str	r3, [r7, #16]
    while (i < j)
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	429a      	cmp	r2, r3
 800230a:	dbe2      	blt.n	80022d2 <reverse+0x16>
    }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	371c      	adds	r7, #28
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <ILI9341_Select>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"


static void ILI9341_Select()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002326:	4802      	ldr	r0, [pc, #8]	; (8002330 <ILI9341_Select+0x14>)
 8002328:	f001 fb6a 	bl	8003a00 <HAL_GPIO_WritePin>

}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40020000 	.word	0x40020000

08002334 <ILI9341_Unselect>:

void ILI9341_Unselect()
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8002338:	2201      	movs	r2, #1
 800233a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800233e:	4802      	ldr	r0, [pc, #8]	; (8002348 <ILI9341_Unselect+0x14>)
 8002340:	f001 fb5e 	bl	8003a00 <HAL_GPIO_WritePin>
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40020000 	.word	0x40020000

0800234c <ILI9341_Reset>:

static void ILI9341_Reset()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002356:	4807      	ldr	r0, [pc, #28]	; (8002374 <ILI9341_Reset+0x28>)
 8002358:	f001 fb52 	bl	8003a00 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800235c:	200a      	movs	r0, #10
 800235e:	f000 fecd 	bl	80030fc <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8002362:	2201      	movs	r2, #1
 8002364:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <ILI9341_Reset+0x28>)
 800236a:	f001 fb49 	bl	8003a00 <HAL_GPIO_WritePin>
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40020400 	.word	0x40020400

08002378 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8002382:	2200      	movs	r2, #0
 8002384:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002388:	4806      	ldr	r0, [pc, #24]	; (80023a4 <ILI9341_WriteCommand+0x2c>)
 800238a:	f001 fb39 	bl	8003a00 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800238e:	1df9      	adds	r1, r7, #7
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
 8002394:	2201      	movs	r2, #1
 8002396:	4804      	ldr	r0, [pc, #16]	; (80023a8 <ILI9341_WriteCommand+0x30>)
 8002398:	f002 fcd8 	bl	8004d4c <HAL_SPI_Transmit>
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40020400 	.word	0x40020400
 80023a8:	20000178 	.word	0x20000178

080023ac <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80023b6:	2201      	movs	r2, #1
 80023b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023bc:	4810      	ldr	r0, [pc, #64]	; (8002400 <ILI9341_WriteData+0x54>)
 80023be:	f001 fb1f 	bl	8003a00 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80023c2:	e015      	b.n	80023f0 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ca:	bf28      	it	cs
 80023cc:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80023d0:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80023d2:	89fa      	ldrh	r2, [r7, #14]
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	480a      	ldr	r0, [pc, #40]	; (8002404 <ILI9341_WriteData+0x58>)
 80023dc:	f002 fcb6 	bl	8004d4c <HAL_SPI_Transmit>
        buff += chunk_size;
 80023e0:	89fb      	ldrh	r3, [r7, #14]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80023e8:	89fb      	ldrh	r3, [r7, #14]
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1e6      	bne.n	80023c4 <ILI9341_WriteData+0x18>
    }
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40020400 	.word	0x40020400
 8002404:	20000178 	.word	0x20000178

08002408 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	4604      	mov	r4, r0
 8002410:	4608      	mov	r0, r1
 8002412:	4611      	mov	r1, r2
 8002414:	461a      	mov	r2, r3
 8002416:	4623      	mov	r3, r4
 8002418:	80fb      	strh	r3, [r7, #6]
 800241a:	4603      	mov	r3, r0
 800241c:	80bb      	strh	r3, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	807b      	strh	r3, [r7, #2]
 8002422:	4613      	mov	r3, r2
 8002424:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8002426:	202a      	movs	r0, #42	; 0x2a
 8002428:	f7ff ffa6 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	b29b      	uxth	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	733b      	strb	r3, [r7, #12]
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	737b      	strb	r3, [r7, #13]
 800243c:	887b      	ldrh	r3, [r7, #2]
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	b29b      	uxth	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	73bb      	strb	r3, [r7, #14]
 8002446:	887b      	ldrh	r3, [r7, #2]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	2104      	movs	r1, #4
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ffaa 	bl	80023ac <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8002458:	202b      	movs	r0, #43	; 0x2b
 800245a:	f7ff ff8d 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800245e:	88bb      	ldrh	r3, [r7, #4]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	b29b      	uxth	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	723b      	strb	r3, [r7, #8]
 8002468:	88bb      	ldrh	r3, [r7, #4]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	727b      	strb	r3, [r7, #9]
 800246e:	883b      	ldrh	r3, [r7, #0]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	b29b      	uxth	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	72bb      	strb	r3, [r7, #10]
 8002478:	883b      	ldrh	r3, [r7, #0]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800247e:	f107 0308 	add.w	r3, r7, #8
 8002482:	2104      	movs	r1, #4
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff91 	bl	80023ac <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800248a:	202c      	movs	r0, #44	; 0x2c
 800248c:	f7ff ff74 	bl	8002378 <ILI9341_WriteCommand>
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	bd90      	pop	{r4, r7, pc}

08002498 <ILI9341_Init>:

void ILI9341_Init()
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b09b      	sub	sp, #108	; 0x6c
 800249c:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800249e:	f7ff ff3d 	bl	800231c <ILI9341_Select>
    ILI9341_Reset();
 80024a2:	f7ff ff53 	bl	800234c <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f7ff ff66 	bl	8002378 <ILI9341_WriteCommand>
    HAL_Delay(500);
 80024ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024b0:	f000 fe24 	bl	80030fc <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80024b4:	20cb      	movs	r0, #203	; 0xcb
 80024b6:	f7ff ff5f 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80024ba:	4a8a      	ldr	r2, [pc, #552]	; (80026e4 <ILI9341_Init+0x24c>)
 80024bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024c4:	6018      	str	r0, [r3, #0]
 80024c6:	3304      	adds	r3, #4
 80024c8:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80024ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024ce:	2105      	movs	r1, #5
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff6b 	bl	80023ac <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80024d6:	20cf      	movs	r0, #207	; 0xcf
 80024d8:	f7ff ff4e 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80024dc:	4a82      	ldr	r2, [pc, #520]	; (80026e8 <ILI9341_Init+0x250>)
 80024de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	4611      	mov	r1, r2
 80024e6:	8019      	strh	r1, [r3, #0]
 80024e8:	3302      	adds	r3, #2
 80024ea:	0c12      	lsrs	r2, r2, #16
 80024ec:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80024ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024f2:	2103      	movs	r1, #3
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff59 	bl	80023ac <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80024fa:	20e8      	movs	r0, #232	; 0xe8
 80024fc:	f7ff ff3c 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8002500:	4a7a      	ldr	r2, [pc, #488]	; (80026ec <ILI9341_Init+0x254>)
 8002502:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	4611      	mov	r1, r2
 800250a:	8019      	strh	r1, [r3, #0]
 800250c:	3302      	adds	r3, #2
 800250e:	0c12      	lsrs	r2, r2, #16
 8002510:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002512:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002516:	2103      	movs	r1, #3
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff47 	bl	80023ac <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 800251e:	20ea      	movs	r0, #234	; 0xea
 8002520:	f7ff ff2a 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8002524:	2300      	movs	r3, #0
 8002526:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 800252a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800252e:	2102      	movs	r1, #2
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff3b 	bl	80023ac <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8002536:	20ed      	movs	r0, #237	; 0xed
 8002538:	f7ff ff1e 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 800253c:	4b6c      	ldr	r3, [pc, #432]	; (80026f0 <ILI9341_Init+0x258>)
 800253e:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 8002540:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002544:	2104      	movs	r1, #4
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff30 	bl	80023ac <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 800254c:	20f7      	movs	r0, #247	; 0xf7
 800254e:	f7ff ff13 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8002552:	2320      	movs	r3, #32
 8002554:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8002558:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800255c:	2101      	movs	r1, #1
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ff24 	bl	80023ac <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8002564:	20c0      	movs	r0, #192	; 0xc0
 8002566:	f7ff ff07 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800256a:	2323      	movs	r3, #35	; 0x23
 800256c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8002570:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002574:	2101      	movs	r1, #1
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ff18 	bl	80023ac <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 800257c:	20c1      	movs	r0, #193	; 0xc1
 800257e:	f7ff fefb 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8002582:	2310      	movs	r3, #16
 8002584:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8002588:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800258c:	2101      	movs	r1, #1
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ff0c 	bl	80023ac <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8002594:	20c5      	movs	r0, #197	; 0xc5
 8002596:	f7ff feef 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800259a:	f642 033e 	movw	r3, #10302	; 0x283e
 800259e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 80025a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025a6:	2102      	movs	r1, #2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff feff 	bl	80023ac <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80025ae:	20c7      	movs	r0, #199	; 0xc7
 80025b0:	f7ff fee2 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80025b4:	2386      	movs	r3, #134	; 0x86
 80025b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80025ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025be:	2101      	movs	r1, #1
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fef3 	bl	80023ac <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80025c6:	2036      	movs	r0, #54	; 0x36
 80025c8:	f7ff fed6 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80025cc:	2348      	movs	r3, #72	; 0x48
 80025ce:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 80025d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025d6:	2101      	movs	r1, #1
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fee7 	bl	80023ac <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80025de:	203a      	movs	r0, #58	; 0x3a
 80025e0:	f7ff feca 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80025e4:	2355      	movs	r3, #85	; 0x55
 80025e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 80025ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025ee:	2101      	movs	r1, #1
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fedb 	bl	80023ac <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80025f6:	20b1      	movs	r0, #177	; 0xb1
 80025f8:	f7ff febe 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80025fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002600:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 8002602:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002606:	2102      	movs	r1, #2
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fecf 	bl	80023ac <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 800260e:	20b6      	movs	r0, #182	; 0xb6
 8002610:	f7ff feb2 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8002614:	4a37      	ldr	r2, [pc, #220]	; (80026f4 <ILI9341_Init+0x25c>)
 8002616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	4611      	mov	r1, r2
 800261e:	8019      	strh	r1, [r3, #0]
 8002620:	3302      	adds	r3, #2
 8002622:	0c12      	lsrs	r2, r2, #16
 8002624:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800262a:	2103      	movs	r1, #3
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff febd 	bl	80023ac <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8002632:	20f2      	movs	r0, #242	; 0xf2
 8002634:	f7ff fea0 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8002638:	2300      	movs	r3, #0
 800263a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 800263e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002642:	2101      	movs	r1, #1
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff feb1 	bl	80023ac <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800264a:	2026      	movs	r0, #38	; 0x26
 800264c:	f7ff fe94 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8002650:	2301      	movs	r3, #1
 8002652:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 8002656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265a:	2101      	movs	r1, #1
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fea5 	bl	80023ac <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8002662:	20e0      	movs	r0, #224	; 0xe0
 8002664:	f7ff fe88 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8002668:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <ILI9341_Init+0x260>)
 800266a:	f107 0414 	add.w	r4, r7, #20
 800266e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002670:	c407      	stmia	r4!, {r0, r1, r2}
 8002672:	8023      	strh	r3, [r4, #0]
 8002674:	3402      	adds	r4, #2
 8002676:	0c1b      	lsrs	r3, r3, #16
 8002678:	7023      	strb	r3, [r4, #0]
                            0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	210f      	movs	r1, #15
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fe93 	bl	80023ac <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8002686:	20e1      	movs	r0, #225	; 0xe1
 8002688:	f7ff fe76 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <ILI9341_Init+0x264>)
 800268e:	1d3c      	adds	r4, r7, #4
 8002690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002692:	c407      	stmia	r4!, {r0, r1, r2}
 8002694:	8023      	strh	r3, [r4, #0]
 8002696:	3402      	adds	r4, #2
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	7023      	strb	r3, [r4, #0]
                            0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	210f      	movs	r1, #15
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fe83 	bl	80023ac <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80026a6:	2011      	movs	r0, #17
 80026a8:	f7ff fe66 	bl	8002378 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80026ac:	2078      	movs	r0, #120	; 0x78
 80026ae:	f000 fd25 	bl	80030fc <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80026b2:	2029      	movs	r0, #41	; 0x29
 80026b4:	f7ff fe60 	bl	8002378 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80026b8:	2036      	movs	r0, #54	; 0x36
 80026ba:	f7ff fe5d 	bl	8002378 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80026be:	23e8      	movs	r3, #232	; 0xe8
 80026c0:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80026c2:	463b      	mov	r3, r7
 80026c4:	2101      	movs	r1, #1
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fe70 	bl	80023ac <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80026cc:	f7ff fe32 	bl	8002334 <ILI9341_Unselect>

    HAL_GPIO_WritePin(ILI9341_LED_GPIO_Port, ILI9341_LED_Pin, SET);
 80026d0:	2201      	movs	r2, #1
 80026d2:	2102      	movs	r1, #2
 80026d4:	480a      	ldr	r0, [pc, #40]	; (8002700 <ILI9341_Init+0x268>)
 80026d6:	f001 f993 	bl	8003a00 <HAL_GPIO_WritePin>
}
 80026da:	bf00      	nop
 80026dc:	376c      	adds	r7, #108	; 0x6c
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd90      	pop	{r4, r7, pc}
 80026e2:	bf00      	nop
 80026e4:	0800ba04 	.word	0x0800ba04
 80026e8:	0800ba0c 	.word	0x0800ba0c
 80026ec:	0800ba10 	.word	0x0800ba10
 80026f0:	81120364 	.word	0x81120364
 80026f4:	0800ba14 	.word	0x0800ba14
 80026f8:	0800ba18 	.word	0x0800ba18
 80026fc:	0800ba28 	.word	0x0800ba28
 8002700:	40020400 	.word	0x40020400

08002704 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	80fb      	strh	r3, [r7, #6]
 800270e:	460b      	mov	r3, r1
 8002710:	80bb      	strh	r3, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800271c:	d21f      	bcs.n	800275e <ILI9341_DrawPixel+0x5a>
 800271e:	88bb      	ldrh	r3, [r7, #4]
 8002720:	2bef      	cmp	r3, #239	; 0xef
 8002722:	d81c      	bhi.n	800275e <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 8002724:	f7ff fdfa 	bl	800231c <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	3301      	adds	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	88bb      	ldrh	r3, [r7, #4]
 8002730:	3301      	adds	r3, #1
 8002732:	b29b      	uxth	r3, r3
 8002734:	88b9      	ldrh	r1, [r7, #4]
 8002736:	88f8      	ldrh	r0, [r7, #6]
 8002738:	f7ff fe66 	bl	8002408 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800273c:	887b      	ldrh	r3, [r7, #2]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	b29b      	uxth	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	733b      	strb	r3, [r7, #12]
 8002746:	887b      	ldrh	r3, [r7, #2]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	2102      	movs	r1, #2
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fe2a 	bl	80023ac <ILI9341_WriteData>

    ILI9341_Unselect();
 8002758:	f7ff fdec 	bl	8002334 <ILI9341_Unselect>
 800275c:	e000      	b.n	8002760 <ILI9341_DrawPixel+0x5c>
        return;
 800275e:	bf00      	nop
}
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <ILI9341_DrawLine>:

void ILI9341_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8002766:	b590      	push	{r4, r7, lr}
 8002768:	b08d      	sub	sp, #52	; 0x34
 800276a:	af00      	add	r7, sp, #0
 800276c:	4604      	mov	r4, r0
 800276e:	4608      	mov	r0, r1
 8002770:	4611      	mov	r1, r2
 8002772:	461a      	mov	r2, r3
 8002774:	4623      	mov	r3, r4
 8002776:	80fb      	strh	r3, [r7, #6]
 8002778:	4603      	mov	r3, r0
 800277a:	80bb      	strh	r3, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	803b      	strh	r3, [r7, #0]
    uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8002784:	2300      	movs	r3, #0
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;

	delta_x = x2 - x1;
 800278c:	887a      	ldrh	r2, [r7, #2]
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8002794:	883a      	ldrh	r2, [r7, #0]
 8002796:	88bb      	ldrh	r3, [r7, #4]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 80027a0:	88bb      	ldrh	r3, [r7, #4]
 80027a2:	60bb      	str	r3, [r7, #8]

	if (delta_x > 0)
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	dd02      	ble.n	80027b0 <ILI9341_DrawLine+0x4a>
        incx = 1;
 80027aa:	2301      	movs	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e00b      	b.n	80027c8 <ILI9341_DrawLine+0x62>
	else if (delta_x == 0)
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d102      	bne.n	80027bc <ILI9341_DrawLine+0x56>
        incx = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	e005      	b.n	80027c8 <ILI9341_DrawLine+0x62>
	else
    {
        incx = -1;
 80027bc:	f04f 33ff 	mov.w	r3, #4294967295
 80027c0:	617b      	str	r3, [r7, #20]
        delta_x = -delta_x;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	425b      	negs	r3, r3
 80027c6:	623b      	str	r3, [r7, #32]
    }

    if (delta_y > 0)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	dd02      	ble.n	80027d4 <ILI9341_DrawLine+0x6e>
        incy = 1;
 80027ce:	2301      	movs	r3, #1
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	e00b      	b.n	80027ec <ILI9341_DrawLine+0x86>
	else if (delta_y==0)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <ILI9341_DrawLine+0x7a>
        incy = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	e005      	b.n	80027ec <ILI9341_DrawLine+0x86>
	else
    {
        incy = -1;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
 80027e4:	613b      	str	r3, [r7, #16]
        delta_y = -delta_y;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	425b      	negs	r3, r3
 80027ea:	61fb      	str	r3, [r7, #28]
    }

	if (delta_x > delta_y)
 80027ec:	6a3a      	ldr	r2, [r7, #32]
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	dd02      	ble.n	80027fa <ILI9341_DrawLine+0x94>
        distance = delta_x;
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	61bb      	str	r3, [r7, #24]
 80027f8:	e001      	b.n	80027fe <ILI9341_DrawLine+0x98>
	else
        distance = delta_y;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	61bb      	str	r3, [r7, #24]

	for(t = 0; t <= distance + 1; t++)
 80027fe:	2300      	movs	r3, #0
 8002800:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002802:	e02b      	b.n	800285c <ILI9341_DrawLine+0xf6>
	{
		ILI9341_DrawPixel(uRow, uCol, color);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	b29b      	uxth	r3, r3
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	b291      	uxth	r1, r2
 800280c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff77 	bl	8002704 <ILI9341_DrawPixel>

		xerr += delta_x;
 8002816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	4413      	add	r3, r2
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 800281e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	4413      	add	r3, r2
 8002824:	627b      	str	r3, [r7, #36]	; 0x24

		if (xerr > distance)
 8002826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	429a      	cmp	r2, r3
 800282c:	dd07      	ble.n	800283e <ILI9341_DrawLine+0xd8>
		{
			xerr -= distance;
 800282e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance)
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	429a      	cmp	r2, r3
 8002844:	dd07      	ble.n	8002856 <ILI9341_DrawLine+0xf0>
		{
			yerr -= distance;
 8002846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	60bb      	str	r3, [r7, #8]
	for(t = 0; t <= distance + 1; t++)
 8002856:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002858:	3301      	adds	r3, #1
 800285a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800285c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	3301      	adds	r3, #1
 8002862:	429a      	cmp	r2, r3
 8002864:	ddce      	ble.n	8002804 <ILI9341_DrawLine+0x9e>
		}
	}
}
 8002866:	bf00      	nop
 8002868:	bf00      	nop
 800286a:	3734      	adds	r7, #52	; 0x34
 800286c:	46bd      	mov	sp, r7
 800286e:	bd90      	pop	{r4, r7, pc}

08002870 <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002870:	b082      	sub	sp, #8
 8002872:	b590      	push	{r4, r7, lr}
 8002874:	b089      	sub	sp, #36	; 0x24
 8002876:	af00      	add	r7, sp, #0
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
 800287a:	4603      	mov	r3, r0
 800287c:	80fb      	strh	r3, [r7, #6]
 800287e:	460b      	mov	r3, r1
 8002880:	80bb      	strh	r3, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002886:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800288a:	b29a      	uxth	r2, r3
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	4413      	add	r3, r2
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29c      	uxth	r4, r3
 8002896:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800289a:	b29a      	uxth	r2, r3
 800289c:	88bb      	ldrh	r3, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	88b9      	ldrh	r1, [r7, #4]
 80028a8:	88f8      	ldrh	r0, [r7, #6]
 80028aa:	4622      	mov	r2, r4
 80028ac:	f7ff fdac 	bl	8002408 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	e043      	b.n	800293e <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 80028b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	3b20      	subs	r3, #32
 80028bc:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4619      	mov	r1, r3
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	440b      	add	r3, r1
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	e029      	b.n	800292c <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00e      	beq.n	8002906 <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80028e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	743b      	strb	r3, [r7, #16]
 80028f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 80028f8:	f107 0310 	add.w	r3, r7, #16
 80028fc:	2102      	movs	r1, #2
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fd54 	bl	80023ac <ILI9341_WriteData>
 8002904:	e00f      	b.n	8002926 <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002906:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	b29b      	uxth	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	733b      	strb	r3, [r7, #12]
 8002912:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002916:	b2db      	uxtb	r3, r3
 8002918:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 800291a:	f107 030c 	add.w	r3, r7, #12
 800291e:	2102      	movs	r1, #2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fd43 	bl	80023ac <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	3301      	adds	r3, #1
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002930:	461a      	mov	r2, r3
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	4293      	cmp	r3, r2
 8002936:	d3cf      	bcc.n	80028d8 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	3301      	adds	r3, #1
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002942:	461a      	mov	r2, r3
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	4293      	cmp	r3, r2
 8002948:	d3b5      	bcc.n	80028b6 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 800294a:	bf00      	nop
 800294c:	bf00      	nop
 800294e:	3724      	adds	r7, #36	; 0x24
 8002950:	46bd      	mov	sp, r7
 8002952:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002956:	b002      	add	sp, #8
 8002958:	4770      	bx	lr

0800295a <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800295a:	b082      	sub	sp, #8
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af04      	add	r7, sp, #16
 8002962:	603a      	str	r2, [r7, #0]
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]
 800296a:	460b      	mov	r3, r1
 800296c:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 800296e:	f7ff fcd5 	bl	800231c <ILI9341_Select>

    while(*str) {
 8002972:	e02e      	b.n	80029d2 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	7d3a      	ldrb	r2, [r7, #20]
 8002978:	4413      	add	r3, r2
 800297a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800297e:	db13      	blt.n	80029a8 <ILI9341_WriteString+0x4e>
            x = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002984:	7d7b      	ldrb	r3, [r7, #21]
 8002986:	b29a      	uxth	r2, r3
 8002988:	88bb      	ldrh	r3, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 800298e:	88bb      	ldrh	r3, [r7, #4]
 8002990:	7d7a      	ldrb	r2, [r7, #21]
 8002992:	4413      	add	r3, r2
 8002994:	2bef      	cmp	r3, #239	; 0xef
 8002996:	dc21      	bgt.n	80029dc <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b20      	cmp	r3, #32
 800299e:	d103      	bne.n	80029a8 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	3301      	adds	r3, #1
 80029a4:	603b      	str	r3, [r7, #0]
                continue;
 80029a6:	e014      	b.n	80029d2 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	781a      	ldrb	r2, [r3, #0]
 80029ac:	88b9      	ldrh	r1, [r7, #4]
 80029ae:	88f8      	ldrh	r0, [r7, #6]
 80029b0:	8c3b      	ldrh	r3, [r7, #32]
 80029b2:	9302      	str	r3, [sp, #8]
 80029b4:	8bbb      	ldrh	r3, [r7, #28]
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f7ff ff57 	bl	8002870 <ILI9341_WriteChar>
        x += font.width;
 80029c2:	7d3b      	ldrb	r3, [r7, #20]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	4413      	add	r3, r2
 80029ca:	80fb      	strh	r3, [r7, #6]
        str++;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	3301      	adds	r3, #1
 80029d0:	603b      	str	r3, [r7, #0]
    while(*str) {
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1cc      	bne.n	8002974 <ILI9341_WriteString+0x1a>
 80029da:	e000      	b.n	80029de <ILI9341_WriteString+0x84>
                break;
 80029dc:	bf00      	nop
    }

    ILI9341_Unselect();
 80029de:	f7ff fca9 	bl	8002334 <ILI9341_Unselect>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029ec:	b002      	add	sp, #8
 80029ee:	4770      	bx	lr

080029f0 <ILI9341_FillRectangle>:
    ILI9341_DrawLine(x, y, x, y + h, color);
    ILI9341_DrawLine(x, y + h, x + w, y + h, color);
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4604      	mov	r4, r0
 80029f8:	4608      	mov	r0, r1
 80029fa:	4611      	mov	r1, r2
 80029fc:	461a      	mov	r2, r3
 80029fe:	4623      	mov	r3, r4
 8002a00:	80fb      	strh	r3, [r7, #6]
 8002a02:	4603      	mov	r3, r0
 8002a04:	80bb      	strh	r3, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	807b      	strh	r3, [r7, #2]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a14:	d253      	bcs.n	8002abe <ILI9341_FillRectangle+0xce>
 8002a16:	88bb      	ldrh	r3, [r7, #4]
 8002a18:	2bef      	cmp	r3, #239	; 0xef
 8002a1a:	d850      	bhi.n	8002abe <ILI9341_FillRectangle+0xce>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8002a1c:	88fa      	ldrh	r2, [r7, #6]
 8002a1e:	887b      	ldrh	r3, [r7, #2]
 8002a20:	4413      	add	r3, r2
 8002a22:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a26:	dd03      	ble.n	8002a30 <ILI9341_FillRectangle+0x40>
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002a2e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8002a30:	88ba      	ldrh	r2, [r7, #4]
 8002a32:	883b      	ldrh	r3, [r7, #0]
 8002a34:	4413      	add	r3, r2
 8002a36:	2bf0      	cmp	r3, #240	; 0xf0
 8002a38:	dd03      	ble.n	8002a42 <ILI9341_FillRectangle+0x52>
 8002a3a:	88bb      	ldrh	r3, [r7, #4]
 8002a3c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002a40:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8002a42:	f7ff fc6b 	bl	800231c <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002a46:	88fa      	ldrh	r2, [r7, #6]
 8002a48:	887b      	ldrh	r3, [r7, #2]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29c      	uxth	r4, r3
 8002a52:	88ba      	ldrh	r2, [r7, #4]
 8002a54:	883b      	ldrh	r3, [r7, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	88b9      	ldrh	r1, [r7, #4]
 8002a60:	88f8      	ldrh	r0, [r7, #6]
 8002a62:	4622      	mov	r2, r4
 8002a64:	f7ff fcd0 	bl	8002408 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002a68:	8c3b      	ldrh	r3, [r7, #32]
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	733b      	strb	r3, [r7, #12]
 8002a72:	8c3b      	ldrh	r3, [r7, #32]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a7e:	4812      	ldr	r0, [pc, #72]	; (8002ac8 <ILI9341_FillRectangle+0xd8>)
 8002a80:	f000 ffbe 	bl	8003a00 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002a84:	883b      	ldrh	r3, [r7, #0]
 8002a86:	80bb      	strh	r3, [r7, #4]
 8002a88:	e013      	b.n	8002ab2 <ILI9341_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	80fb      	strh	r3, [r7, #6]
 8002a8e:	e00a      	b.n	8002aa6 <ILI9341_FillRectangle+0xb6>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002a90:	f107 010c 	add.w	r1, r7, #12
 8002a94:	f04f 33ff 	mov.w	r3, #4294967295
 8002a98:	2202      	movs	r2, #2
 8002a9a:	480c      	ldr	r0, [pc, #48]	; (8002acc <ILI9341_FillRectangle+0xdc>)
 8002a9c:	f002 f956 	bl	8004d4c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	80fb      	strh	r3, [r7, #6]
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f1      	bne.n	8002a90 <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8002aac:	88bb      	ldrh	r3, [r7, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	80bb      	strh	r3, [r7, #4]
 8002ab2:	88bb      	ldrh	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1e8      	bne.n	8002a8a <ILI9341_FillRectangle+0x9a>
        }
    }

    ILI9341_Unselect();
 8002ab8:	f7ff fc3c 	bl	8002334 <ILI9341_Unselect>
 8002abc:	e000      	b.n	8002ac0 <ILI9341_FillRectangle+0xd0>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8002abe:	bf00      	nop
}
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd90      	pop	{r4, r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40020400 	.word	0x40020400
 8002acc:	20000178 	.word	0x20000178

08002ad0 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	23f0      	movs	r3, #240	; 0xf0
 8002ae0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7ff ff82 	bl	80029f0 <ILI9341_FillRectangle>
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <sqrt_t>:
		ILI9341_FillRectangle(a, y, b - a + 1, y - y + 1, color);
	}
}

static int sqrt_t(int x)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
    if (x == 0)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <sqrt_t+0x12>
        return 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e03a      	b.n	8002b7c <sqrt_t+0x88>
    double last = 0;
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double res = 1;
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <sqrt_t+0x90>)
 8002b18:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while (res != last)
 8002b1c:	e020      	b.n	8002b60 <sqrt_t+0x6c>
    {
        last = res;
 8002b1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b22:	e9c7 2304 	strd	r2, r3, [r7, #16]
        res = (res + x / res) / 2;
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fd fcb4 	bl	8000494 <__aeabi_i2d>
 8002b2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b30:	f7fd fe44 	bl	80007bc <__aeabi_ddiv>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b40:	f7fd fb5c 	bl	80001fc <__adddf3>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b54:	f7fd fe32 	bl	80007bc <__aeabi_ddiv>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while (res != last)
 8002b60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b68:	f7fd ff66 	bl	8000a38 <__aeabi_dcmpeq>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0d5      	beq.n	8002b1e <sqrt_t+0x2a>
    }
    return (int)res;
 8002b72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b76:	f7fd ffa7 	bl	8000ac8 <__aeabi_d2iz>
 8002b7a:	4603      	mov	r3, r0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	3ff00000 	.word	0x3ff00000

08002b88 <ILI9341_DrawCircle>:

void ILI9341_DrawCircle(uint16_t x, uint16_t y, uint16_t r, uint16_t color)
{
 8002b88:	b590      	push	{r4, r7, lr}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	4604      	mov	r4, r0
 8002b90:	4608      	mov	r0, r1
 8002b92:	4611      	mov	r1, r2
 8002b94:	461a      	mov	r2, r3
 8002b96:	4623      	mov	r3, r4
 8002b98:	80fb      	strh	r3, [r7, #6]
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80bb      	strh	r3, [r7, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	807b      	strh	r3, [r7, #2]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	803b      	strh	r3, [r7, #0]
    int a, b, pre_b;
    a = r-1;
 8002ba6:	887b      	ldrh	r3, [r7, #2]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	617b      	str	r3, [r7, #20]
    b = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
    pre_b = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]

    for(; a >= -r; a--)
 8002bb4:	e04d      	b.n	8002c52 <ILI9341_DrawCircle+0xca>
    {
        b = sqrt_t(r*r - a*a);
 8002bb6:	887b      	ldrh	r3, [r7, #2]
 8002bb8:	887a      	ldrh	r2, [r7, #2]
 8002bba:	fb03 f202 	mul.w	r2, r3, r2
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	fb03 f303 	mul.w	r3, r3, r3
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ff94 	bl	8002af4 <sqrt_t>
 8002bcc:	60f8      	str	r0, [r7, #12]
        b = (b > (r-1))? (r-1) : b;
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	db02      	blt.n	8002bdc <ILI9341_DrawCircle+0x54>
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	e000      	b.n	8002bde <ILI9341_DrawCircle+0x56>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	60fb      	str	r3, [r7, #12]
        ILI9341_DrawLine(x + b, y - a, x + pre_b, y - a, color);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	4413      	add	r3, r2
 8002be8:	b298      	uxth	r0, r3
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	88ba      	ldrh	r2, [r7, #4]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	b299      	uxth	r1, r3
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	b29c      	uxth	r4, r3
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	88ba      	ldrh	r2, [r7, #4]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	883b      	ldrh	r3, [r7, #0]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	4622      	mov	r2, r4
 8002c10:	f7ff fda9 	bl	8002766 <ILI9341_DrawLine>
        ILI9341_DrawLine(x - b, y - a, x - pre_b, y - a, color);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	88fa      	ldrh	r2, [r7, #6]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	b298      	uxth	r0, r3
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	88ba      	ldrh	r2, [r7, #4]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	b299      	uxth	r1, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	88fa      	ldrh	r2, [r7, #6]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	b29c      	uxth	r4, r3
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	88ba      	ldrh	r2, [r7, #4]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	883b      	ldrh	r3, [r7, #0]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	4622      	mov	r2, r4
 8002c44:	f7ff fd8f 	bl	8002766 <ILI9341_DrawLine>
        pre_b = b;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	613b      	str	r3, [r7, #16]
    for(; a >= -r; a--)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	887b      	ldrh	r3, [r7, #2]
 8002c54:	425b      	negs	r3, r3
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	daac      	bge.n	8002bb6 <ILI9341_DrawCircle+0x2e>
    }
}
 8002c5c:	bf00      	nop
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd90      	pop	{r4, r7, pc}

08002c66 <ILI9341_FillCircle>:

void ILI9341_FillCircle(uint16_t x, uint16_t y, uint16_t r, uint16_t color)
{
 8002c66:	b590      	push	{r4, r7, lr}
 8002c68:	b087      	sub	sp, #28
 8002c6a:	af02      	add	r7, sp, #8
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	4608      	mov	r0, r1
 8002c70:	4611      	mov	r1, r2
 8002c72:	461a      	mov	r2, r3
 8002c74:	4623      	mov	r3, r4
 8002c76:	80fb      	strh	r3, [r7, #6]
 8002c78:	4603      	mov	r3, r0
 8002c7a:	80bb      	strh	r3, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	803b      	strh	r3, [r7, #0]
    int a, b;
    a = r-1;
 8002c84:	887b      	ldrh	r3, [r7, #2]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	60fb      	str	r3, [r7, #12]
    b = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]

    for(; a > -r; a--)
 8002c8e:	e031      	b.n	8002cf4 <ILI9341_FillCircle+0x8e>
    {
        b = sqrt_t(r*r - a*a);
 8002c90:	887b      	ldrh	r3, [r7, #2]
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	fb03 f202 	mul.w	r2, r3, r2
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	fb03 f303 	mul.w	r3, r3, r3
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff27 	bl	8002af4 <sqrt_t>
 8002ca6:	60b8      	str	r0, [r7, #8]
        b = (b > (r-1))? (r-1) : b;
 8002ca8:	887b      	ldrh	r3, [r7, #2]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	db02      	blt.n	8002cb6 <ILI9341_FillCircle+0x50>
 8002cb0:	887b      	ldrh	r3, [r7, #2]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <ILI9341_FillCircle+0x52>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	60bb      	str	r3, [r7, #8]
        ILI9341_DrawLine(x + b, y - a, x - b, y - a, color);
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	b298      	uxth	r0, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	88ba      	ldrh	r2, [r7, #4]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	b299      	uxth	r1, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	88fa      	ldrh	r2, [r7, #6]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	b29c      	uxth	r4, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	88ba      	ldrh	r2, [r7, #4]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	883b      	ldrh	r3, [r7, #0]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	4622      	mov	r2, r4
 8002cea:	f7ff fd3c 	bl	8002766 <ILI9341_DrawLine>
    for(; a > -r; a--)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	887b      	ldrh	r3, [r7, #2]
 8002cf6:	425b      	negs	r3, r3
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	dcc8      	bgt.n	8002c90 <ILI9341_FillCircle+0x2a>
    }
}
 8002cfe:	bf00      	nop
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd90      	pop	{r4, r7, pc}

08002d08 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d12:	4802      	ldr	r0, [pc, #8]	; (8002d1c <ILI9341_TouchUnselect+0x14>)
 8002d14:	f000 fe74 	bl	8003a00 <HAL_GPIO_WritePin>
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40020000 	.word	0x40020000

08002d20 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8002d24:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <Ringbuf_init+0x3c>)
 8002d26:	4a0e      	ldr	r2, [pc, #56]	; (8002d60 <Ringbuf_init+0x40>)
 8002d28:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <Ringbuf_init+0x44>)
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <Ringbuf_init+0x48>)
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002d30:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <Ringbuf_init+0x4c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <Ringbuf_init+0x4c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002d40:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <Ringbuf_init+0x4c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <Ringbuf_init+0x4c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0220 	orr.w	r2, r2, #32
 8002d4e:	60da      	str	r2, [r3, #12]
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000390 	.word	0x20000390
 8002d60:	20000300 	.word	0x20000300
 8002d64:	20000394 	.word	0x20000394
 8002d68:	20000348 	.word	0x20000348
 8002d6c:	200002b8 	.word	0x200002b8

08002d70 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <Uart_read+0x4c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <Uart_read+0x4c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d102      	bne.n	8002d8c <Uart_read+0x1c>
  {
    return -1;
 8002d86:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8a:	e010      	b.n	8002dae <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <Uart_read+0x4c>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <Uart_read+0x4c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	5cd3      	ldrb	r3, [r2, r3]
 8002d98:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <Uart_read+0x4c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <Uart_read+0x4c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002daa:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8002dac:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000390 	.word	0x20000390

08002dc0 <Uart_write>:

/* writes a single character to the uart and increments head
 */
void Uart_write(int c)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	db21      	blt.n	8002e12 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8002dce:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <Uart_write+0x60>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dda:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 8002ddc:	bf00      	nop
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <Uart_write+0x60>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d0f9      	beq.n	8002dde <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8002dea:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <Uart_write+0x60>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <Uart_write+0x60>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	b2c9      	uxtb	r1, r1
 8002df8:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <Uart_write+0x60>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <Uart_write+0x64>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <Uart_write+0x64>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e10:	60da      	str	r2, [r3, #12]
	}
}
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000394 	.word	0x20000394
 8002e24:	200002b8 	.word	0x200002b8

08002e28 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <IsDataAvailable+0x2c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <IsDataAvailable+0x2c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3340      	adds	r3, #64	; 0x40
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000390 	.word	0x20000390

08002e58 <Uart_sendstring>:

/* sends the string to the uart
 */
void Uart_sendstring (const char *s)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8002e60:	e006      	b.n	8002e70 <Uart_sendstring+0x18>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ffa8 	bl	8002dc0 <Uart_write>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f4      	bne.n	8002e62 <Uart_sendstring+0xa>
}
 8002e78:	bf00      	nop
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002e88:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <Uart_peek+0x30>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <Uart_peek+0x30>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d102      	bne.n	8002e9e <Uart_peek+0x1a>
  {
    return -1;
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9c:	e005      	b.n	8002eaa <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <Uart_peek+0x30>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <Uart_peek+0x30>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea8:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	20000390 	.word	0x20000390

08002eb8 <Get_after>:

/* must be used after wait_for function
 * get the entered number of characters after the entered string
 */
int Get_after (char *string, uint8_t numberofchars, char *buffertosave)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	72fb      	strb	r3, [r7, #11]
	for (int indx=0; indx<numberofchars; indx++)
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e01e      	b.n	8002f0a <Get_after+0x52>
	{
		timeout = TIMEOUT_DEF;
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <Get_after+0x64>)
 8002ece:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ed2:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);  // wait until some data is available
 8002ed4:	bf00      	nop
 8002ed6:	f7ff ffa7 	bl	8002e28 <IsDataAvailable>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d103      	bne.n	8002ee8 <Get_after+0x30>
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <Get_after+0x64>)
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1f6      	bne.n	8002ed6 <Get_after+0x1e>
		if (timeout == 0) return 0;  // if data isn't available within time, then return 0
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <Get_after+0x64>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <Get_after+0x3c>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e00f      	b.n	8002f14 <Get_after+0x5c>
		buffertosave[indx] = Uart_read();  // save the data into the buffer... increments the tail
 8002ef4:	f7ff ff3c 	bl	8002d70 <Uart_read>
 8002ef8:	4601      	mov	r1, r0
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	4413      	add	r3, r2
 8002f00:	b2ca      	uxtb	r2, r1
 8002f02:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3301      	adds	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	7afb      	ldrb	r3, [r7, #11]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	dbdc      	blt.n	8002ecc <Get_after+0x14>
	}
	return 1;
 8002f12:	2301      	movs	r3, #1
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	200002fc 	.word	0x200002fc

08002f20 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7fd f957 	bl	80001e0 <strlen>
 8002f32:	4603      	mov	r3, r0
 8002f34:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002f36:	4b39      	ldr	r3, [pc, #228]	; (800301c <Wait_for+0xfc>)
 8002f38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002f3c:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8002f3e:	bf00      	nop
 8002f40:	f7ff ff72 	bl	8002e28 <IsDataAvailable>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d103      	bne.n	8002f52 <Wait_for+0x32>
 8002f4a:	4b34      	ldr	r3, [pc, #208]	; (800301c <Wait_for+0xfc>)
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f6      	bne.n	8002f40 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8002f52:	4b32      	ldr	r3, [pc, #200]	; (800301c <Wait_for+0xfc>)
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d115      	bne.n	8002f86 <Wait_for+0x66>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e05a      	b.n	8003014 <Wait_for+0xf4>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8002f5e:	4b30      	ldr	r3, [pc, #192]	; (8003020 <Wait_for+0x100>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f64:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <Wait_for+0x100>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d009      	beq.n	8002f82 <Wait_for+0x62>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002f6e:	4b2c      	ldr	r3, [pc, #176]	; (8003020 <Wait_for+0x100>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <Wait_for+0x100>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002f7e:	645a      	str	r2, [r3, #68]	; 0x44
 8002f80:	e001      	b.n	8002f86 <Wait_for+0x66>
		}

		else
		{
			return 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e046      	b.n	8003014 <Wait_for+0xf4>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8002f86:	f7ff ff7d 	bl	8002e84 <Uart_peek>
 8002f8a:	4601      	mov	r1, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	4299      	cmp	r1, r3
 8002f96:	d1e2      	bne.n	8002f5e <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002f98:	e025      	b.n	8002fe6 <Wait_for+0xc6>
	{
		// now we will peek for the other letters too
		so_far++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002fa0:	4b1f      	ldr	r3, [pc, #124]	; (8003020 <Wait_for+0x100>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <Wait_for+0x100>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002fb0:	645a      	str	r2, [r3, #68]	; 0x44
		if (so_far == len) return 1;
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d101      	bne.n	8002fbe <Wait_for+0x9e>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e02a      	b.n	8003014 <Wait_for+0xf4>
		timeout = TIMEOUT_DEF;
 8002fbe:	4b17      	ldr	r3, [pc, #92]	; (800301c <Wait_for+0xfc>)
 8002fc0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002fc4:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002fc6:	bf00      	nop
 8002fc8:	f7ff ff2e 	bl	8002e28 <IsDataAvailable>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d103      	bne.n	8002fda <Wait_for+0xba>
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <Wait_for+0xfc>)
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f6      	bne.n	8002fc8 <Wait_for+0xa8>
		if (timeout == 0) return 0;
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <Wait_for+0xfc>)
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <Wait_for+0xc6>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e016      	b.n	8003014 <Wait_for+0xf4>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002fe6:	f7ff ff4d 	bl	8002e84 <Uart_peek>
 8002fea:	4601      	mov	r1, r0
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	4299      	cmp	r1, r3
 8002ff6:	d0d0      	beq.n	8002f9a <Wait_for+0x7a>
	}

	if (so_far != len)
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d002      	beq.n	8003006 <Wait_for+0xe6>
	{
		so_far = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]
		goto again;
 8003004:	e797      	b.n	8002f36 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	429a      	cmp	r2, r3
 800300c:	d101      	bne.n	8003012 <Wait_for+0xf2>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <Wait_for+0xf4>
	else return 0;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	200002fc 	.word	0x200002fc
 8003020:	20000390 	.word	0x20000390

08003024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800305c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003028:	480d      	ldr	r0, [pc, #52]	; (8003060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800302a:	490e      	ldr	r1, [pc, #56]	; (8003064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800302c:	4a0e      	ldr	r2, [pc, #56]	; (8003068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003030:	e002      	b.n	8003038 <LoopCopyDataInit>

08003032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003036:	3304      	adds	r3, #4

08003038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800303a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800303c:	d3f9      	bcc.n	8003032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303e:	4a0b      	ldr	r2, [pc, #44]	; (800306c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003040:	4c0b      	ldr	r4, [pc, #44]	; (8003070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003044:	e001      	b.n	800304a <LoopFillZerobss>

08003046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003048:	3204      	adds	r2, #4

0800304a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800304a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800304c:	d3fb      	bcc.n	8003046 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800304e:	f7fe ffaf 	bl	8001fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003052:	f007 fc23 	bl	800a89c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003056:	f7fe fcf7 	bl	8001a48 <main>
  bx  lr    
 800305a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800305c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003064:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8003068:	0800d3e0 	.word	0x0800d3e0
  ldr r2, =_sbss
 800306c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8003070:	20004db4 	.word	0x20004db4

08003074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003074:	e7fe      	b.n	8003074 <ADC_IRQHandler>
	...

08003078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800307c:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <HAL_Init+0x40>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <HAL_Init+0x40>)
 8003082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_Init+0x40>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <HAL_Init+0x40>)
 800308e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_Init+0x40>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <HAL_Init+0x40>)
 800309a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a0:	2003      	movs	r0, #3
 80030a2:	f000 f8fd 	bl	80032a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030a6:	2005      	movs	r0, #5
 80030a8:	f7fe feb8 	bl	8001e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030ac:	f7fe fe82 	bl	8001db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40023c00 	.word	0x40023c00

080030bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_IncTick+0x20>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_IncTick+0x24>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <HAL_IncTick+0x24>)
 80030ce:	6013      	str	r3, [r2, #0]
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000044 	.word	0x20000044
 80030e0:	20000398 	.word	0x20000398

080030e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return uwTick;
 80030e8:	4b03      	ldr	r3, [pc, #12]	; (80030f8 <HAL_GetTick+0x14>)
 80030ea:	681b      	ldr	r3, [r3, #0]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000398 	.word	0x20000398

080030fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003104:	f7ff ffee 	bl	80030e4 <HAL_GetTick>
 8003108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d005      	beq.n	8003122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_Delay+0x44>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003122:	bf00      	nop
 8003124:	f7ff ffde 	bl	80030e4 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	429a      	cmp	r2, r3
 8003132:	d8f7      	bhi.n	8003124 <HAL_Delay+0x28>
  {
  }
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000044 	.word	0x20000044

08003144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <__NVIC_SetPriorityGrouping+0x44>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003160:	4013      	ands	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800316c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003176:	4a04      	ldr	r2, [pc, #16]	; (8003188 <__NVIC_SetPriorityGrouping+0x44>)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	60d3      	str	r3, [r2, #12]
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	f003 0307 	and.w	r3, r3, #7
}
 800319a:	4618      	mov	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	db0b      	blt.n	80031d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	f003 021f 	and.w	r2, r3, #31
 80031c0:	4907      	ldr	r1, [pc, #28]	; (80031e0 <__NVIC_EnableIRQ+0x38>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2001      	movs	r0, #1
 80031ca:	fa00 f202 	lsl.w	r2, r0, r2
 80031ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000e100 	.word	0xe000e100

080031e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	6039      	str	r1, [r7, #0]
 80031ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	db0a      	blt.n	800320e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	490c      	ldr	r1, [pc, #48]	; (8003230 <__NVIC_SetPriority+0x4c>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	0112      	lsls	r2, r2, #4
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	440b      	add	r3, r1
 8003208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800320c:	e00a      	b.n	8003224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	4908      	ldr	r1, [pc, #32]	; (8003234 <__NVIC_SetPriority+0x50>)
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	3b04      	subs	r3, #4
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	440b      	add	r3, r1
 8003222:	761a      	strb	r2, [r3, #24]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000e100 	.word	0xe000e100
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	; 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f1c3 0307 	rsb	r3, r3, #7
 8003252:	2b04      	cmp	r3, #4
 8003254:	bf28      	it	cs
 8003256:	2304      	movcs	r3, #4
 8003258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3304      	adds	r3, #4
 800325e:	2b06      	cmp	r3, #6
 8003260:	d902      	bls.n	8003268 <NVIC_EncodePriority+0x30>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3b03      	subs	r3, #3
 8003266:	e000      	b.n	800326a <NVIC_EncodePriority+0x32>
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	f04f 32ff 	mov.w	r2, #4294967295
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	401a      	ands	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003280:	f04f 31ff 	mov.w	r1, #4294967295
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43d9      	mvns	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	4313      	orrs	r3, r2
         );
}
 8003292:	4618      	mov	r0, r3
 8003294:	3724      	adds	r7, #36	; 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b07      	cmp	r3, #7
 80032ac:	d00f      	beq.n	80032ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b06      	cmp	r3, #6
 80032b2:	d00c      	beq.n	80032ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d009      	beq.n	80032ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d006      	beq.n	80032ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d003      	beq.n	80032ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 80032c6:	2190      	movs	r1, #144	; 0x90
 80032c8:	4804      	ldr	r0, [pc, #16]	; (80032dc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80032ca:	f7fe fc58 	bl	8001b7e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ff38 	bl	8003144 <__NVIC_SetPriorityGrouping>
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	0800ba38 	.word	0x0800ba38

080032e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b0f      	cmp	r3, #15
 80032f6:	d903      	bls.n	8003300 <HAL_NVIC_SetPriority+0x20>
 80032f8:	21a8      	movs	r1, #168	; 0xa8
 80032fa:	480e      	ldr	r0, [pc, #56]	; (8003334 <HAL_NVIC_SetPriority+0x54>)
 80032fc:	f7fe fc3f 	bl	8001b7e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	d903      	bls.n	800330e <HAL_NVIC_SetPriority+0x2e>
 8003306:	21a9      	movs	r1, #169	; 0xa9
 8003308:	480a      	ldr	r0, [pc, #40]	; (8003334 <HAL_NVIC_SetPriority+0x54>)
 800330a:	f7fe fc38 	bl	8001b7e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800330e:	f7ff ff3d 	bl	800318c <__NVIC_GetPriorityGrouping>
 8003312:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	6978      	ldr	r0, [r7, #20]
 800331a:	f7ff ff8d 	bl	8003238 <NVIC_EncodePriority>
 800331e:	4602      	mov	r2, r0
 8003320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff ff5c 	bl	80031e4 <__NVIC_SetPriority>
}
 800332c:	bf00      	nop
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	0800ba38 	.word	0x0800ba38

08003338 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	2b00      	cmp	r3, #0
 8003348:	da03      	bge.n	8003352 <HAL_NVIC_EnableIRQ+0x1a>
 800334a:	21bc      	movs	r1, #188	; 0xbc
 800334c:	4805      	ldr	r0, [pc, #20]	; (8003364 <HAL_NVIC_EnableIRQ+0x2c>)
 800334e:	f7fe fc16 	bl	8001b7e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ff26 	bl	80031a8 <__NVIC_EnableIRQ>
}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	0800ba38 	.word	0x0800ba38

08003368 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003376:	f7ff feb5 	bl	80030e4 <HAL_GetTick>
 800337a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d008      	beq.n	800339a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2280      	movs	r2, #128	; 0x80
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e052      	b.n	8003440 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0216 	bic.w	r2, r2, #22
 80033a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <HAL_DMA_Abort+0x62>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d007      	beq.n	80033da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0208 	bic.w	r2, r2, #8
 80033d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033ea:	e013      	b.n	8003414 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033ec:	f7ff fe7a 	bl	80030e4 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b05      	cmp	r3, #5
 80033f8:	d90c      	bls.n	8003414 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2203      	movs	r2, #3
 8003404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e015      	b.n	8003440 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1e4      	bne.n	80033ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003426:	223f      	movs	r2, #63	; 0x3f
 8003428:	409a      	lsls	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d004      	beq.n	8003466 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2280      	movs	r2, #128	; 0x80
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e00c      	b.n	8003480 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2205      	movs	r2, #5
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a33      	ldr	r2, [pc, #204]	; (8003574 <HAL_GPIO_Init+0xe8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d017      	beq.n	80034da <HAL_GPIO_Init+0x4e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a32      	ldr	r2, [pc, #200]	; (8003578 <HAL_GPIO_Init+0xec>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <HAL_GPIO_Init+0x4e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a31      	ldr	r2, [pc, #196]	; (800357c <HAL_GPIO_Init+0xf0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00f      	beq.n	80034da <HAL_GPIO_Init+0x4e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a30      	ldr	r2, [pc, #192]	; (8003580 <HAL_GPIO_Init+0xf4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00b      	beq.n	80034da <HAL_GPIO_Init+0x4e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a2f      	ldr	r2, [pc, #188]	; (8003584 <HAL_GPIO_Init+0xf8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <HAL_GPIO_Init+0x4e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a2e      	ldr	r2, [pc, #184]	; (8003588 <HAL_GPIO_Init+0xfc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x4e>
 80034d2:	21ac      	movs	r1, #172	; 0xac
 80034d4:	482d      	ldr	r0, [pc, #180]	; (800358c <HAL_GPIO_Init+0x100>)
 80034d6:	f7fe fb52 	bl	8001b7e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_GPIO_Init+0x64>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	041b      	lsls	r3, r3, #16
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x6c>
 80034f0:	21ad      	movs	r1, #173	; 0xad
 80034f2:	4826      	ldr	r0, [pc, #152]	; (800358c <HAL_GPIO_Init+0x100>)
 80034f4:	f7fe fb43 	bl	8001b7e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d035      	beq.n	800356c <HAL_GPIO_Init+0xe0>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d031      	beq.n	800356c <HAL_GPIO_Init+0xe0>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b11      	cmp	r3, #17
 800350e:	d02d      	beq.n	800356c <HAL_GPIO_Init+0xe0>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d029      	beq.n	800356c <HAL_GPIO_Init+0xe0>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b12      	cmp	r3, #18
 800351e:	d025      	beq.n	800356c <HAL_GPIO_Init+0xe0>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003528:	d020      	beq.n	800356c <HAL_GPIO_Init+0xe0>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003532:	d01b      	beq.n	800356c <HAL_GPIO_Init+0xe0>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800353c:	d016      	beq.n	800356c <HAL_GPIO_Init+0xe0>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003546:	d011      	beq.n	800356c <HAL_GPIO_Init+0xe0>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003550:	d00c      	beq.n	800356c <HAL_GPIO_Init+0xe0>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800355a:	d007      	beq.n	800356c <HAL_GPIO_Init+0xe0>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0xe0>
 8003564:	21ae      	movs	r1, #174	; 0xae
 8003566:	4809      	ldr	r0, [pc, #36]	; (800358c <HAL_GPIO_Init+0x100>)
 8003568:	f7fe fb09 	bl	8001b7e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	e206      	b.n	8003980 <HAL_GPIO_Init+0x4f4>
 8003572:	bf00      	nop
 8003574:	40020000 	.word	0x40020000
 8003578:	40020400 	.word	0x40020400
 800357c:	40020800 	.word	0x40020800
 8003580:	40020c00 	.word	0x40020c00
 8003584:	40021000 	.word	0x40021000
 8003588:	40021c00 	.word	0x40021c00
 800358c:	0800baac 	.word	0x0800baac
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003590:	2201      	movs	r2, #1
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	f040 81e6 	bne.w	800397a <HAL_GPIO_Init+0x4ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d005      	beq.n	80035c6 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d144      	bne.n	8003650 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00f      	beq.n	80035ee <HAL_GPIO_Init+0x162>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d00b      	beq.n	80035ee <HAL_GPIO_Init+0x162>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d007      	beq.n	80035ee <HAL_GPIO_Init+0x162>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x162>
 80035e6:	21c0      	movs	r1, #192	; 0xc0
 80035e8:	4894      	ldr	r0, [pc, #592]	; (800383c <HAL_GPIO_Init+0x3b0>)
 80035ea:	f7fe fac8 	bl	8001b7e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	2203      	movs	r2, #3
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003624:	2201      	movs	r2, #1
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 0201 	and.w	r2, r3, #1
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b03      	cmp	r3, #3
 800365a:	d027      	beq.n	80036ac <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00b      	beq.n	800367c <HAL_GPIO_Init+0x1f0>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d007      	beq.n	800367c <HAL_GPIO_Init+0x1f0>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d003      	beq.n	800367c <HAL_GPIO_Init+0x1f0>
 8003674:	21d1      	movs	r1, #209	; 0xd1
 8003676:	4871      	ldr	r0, [pc, #452]	; (800383c <HAL_GPIO_Init+0x3b0>)
 8003678:	f7fe fa81 	bl	8001b7e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	2203      	movs	r2, #3
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	f040 8098 	bne.w	80037ea <HAL_GPIO_Init+0x35e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d06f      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b0c      	cmp	r3, #12
 80036c8:	d06b      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d067      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d063      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d05f      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d05b      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d057      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d053      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d04f      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d04b      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d047      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b03      	cmp	r3, #3
 8003718:	d043      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d03f      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b03      	cmp	r3, #3
 8003728:	d03b      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	2b04      	cmp	r3, #4
 8003730:	d037      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b04      	cmp	r3, #4
 8003738:	d033      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b04      	cmp	r3, #4
 8003740:	d02f      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b05      	cmp	r3, #5
 8003748:	d02b      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b05      	cmp	r3, #5
 8003750:	d027      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b05      	cmp	r3, #5
 8003758:	d023      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b06      	cmp	r3, #6
 8003760:	d01f      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b07      	cmp	r3, #7
 8003768:	d01b      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b07      	cmp	r3, #7
 8003770:	d017      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b08      	cmp	r3, #8
 8003778:	d013      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b09      	cmp	r3, #9
 8003780:	d00f      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b09      	cmp	r3, #9
 8003788:	d00b      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b0a      	cmp	r3, #10
 8003790:	d007      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b0f      	cmp	r3, #15
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_Init+0x316>
 800379a:	21de      	movs	r1, #222	; 0xde
 800379c:	4827      	ldr	r0, [pc, #156]	; (800383c <HAL_GPIO_Init+0x3b0>)
 800379e:	f7fe f9ee 	bl	8001b7e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	08da      	lsrs	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3208      	adds	r2, #8
 80037aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	220f      	movs	r2, #15
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	08da      	lsrs	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3208      	adds	r2, #8
 80037e4:	69b9      	ldr	r1, [r7, #24]
 80037e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	2203      	movs	r2, #3
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 0203 	and.w	r2, r3, #3
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80a7 	beq.w	800397a <HAL_GPIO_Init+0x4ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_GPIO_Init+0x3b4>)
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	4a02      	ldr	r2, [pc, #8]	; (8003840 <HAL_GPIO_Init+0x3b4>)
 8003836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800383a:	e003      	b.n	8003844 <HAL_GPIO_Init+0x3b8>
 800383c:	0800baac 	.word	0x0800baac
 8003840:	40023800 	.word	0x40023800
 8003844:	6453      	str	r3, [r2, #68]	; 0x44
 8003846:	4b53      	ldr	r3, [pc, #332]	; (8003994 <HAL_GPIO_Init+0x508>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003852:	4a51      	ldr	r2, [pc, #324]	; (8003998 <HAL_GPIO_Init+0x50c>)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	3302      	adds	r3, #2
 800385a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	220f      	movs	r2, #15
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a48      	ldr	r2, [pc, #288]	; (800399c <HAL_GPIO_Init+0x510>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d019      	beq.n	80038b2 <HAL_GPIO_Init+0x426>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a47      	ldr	r2, [pc, #284]	; (80039a0 <HAL_GPIO_Init+0x514>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <HAL_GPIO_Init+0x422>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a46      	ldr	r2, [pc, #280]	; (80039a4 <HAL_GPIO_Init+0x518>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00d      	beq.n	80038aa <HAL_GPIO_Init+0x41e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a45      	ldr	r2, [pc, #276]	; (80039a8 <HAL_GPIO_Init+0x51c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d007      	beq.n	80038a6 <HAL_GPIO_Init+0x41a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a44      	ldr	r2, [pc, #272]	; (80039ac <HAL_GPIO_Init+0x520>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d101      	bne.n	80038a2 <HAL_GPIO_Init+0x416>
 800389e:	2304      	movs	r3, #4
 80038a0:	e008      	b.n	80038b4 <HAL_GPIO_Init+0x428>
 80038a2:	2307      	movs	r3, #7
 80038a4:	e006      	b.n	80038b4 <HAL_GPIO_Init+0x428>
 80038a6:	2303      	movs	r3, #3
 80038a8:	e004      	b.n	80038b4 <HAL_GPIO_Init+0x428>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e002      	b.n	80038b4 <HAL_GPIO_Init+0x428>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_GPIO_Init+0x428>
 80038b2:	2300      	movs	r3, #0
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	f002 0203 	and.w	r2, r2, #3
 80038ba:	0092      	lsls	r2, r2, #2
 80038bc:	4093      	lsls	r3, r2
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038c4:	4934      	ldr	r1, [pc, #208]	; (8003998 <HAL_GPIO_Init+0x50c>)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	089b      	lsrs	r3, r3, #2
 80038ca:	3302      	adds	r3, #2
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038d2:	4b37      	ldr	r3, [pc, #220]	; (80039b0 <HAL_GPIO_Init+0x524>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x46a>
        {
          temp |= iocurrent;
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038f6:	4a2e      	ldr	r2, [pc, #184]	; (80039b0 <HAL_GPIO_Init+0x524>)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038fc:	4b2c      	ldr	r3, [pc, #176]	; (80039b0 <HAL_GPIO_Init+0x524>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x494>
        {
          temp |= iocurrent;
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003920:	4a23      	ldr	r2, [pc, #140]	; (80039b0 <HAL_GPIO_Init+0x524>)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_GPIO_Init+0x524>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x4be>
        {
          temp |= iocurrent;
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800394a:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <HAL_GPIO_Init+0x524>)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003950:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <HAL_GPIO_Init+0x524>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x4e8>
        {
          temp |= iocurrent;
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003974:	4a0e      	ldr	r2, [pc, #56]	; (80039b0 <HAL_GPIO_Init+0x524>)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3301      	adds	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b0f      	cmp	r3, #15
 8003984:	f67f ae04 	bls.w	8003590 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	40013800 	.word	0x40013800
 800399c:	40020000 	.word	0x40020000
 80039a0:	40020400 	.word	0x40020400
 80039a4:	40020800 	.word	0x40020800
 80039a8:	40020c00 	.word	0x40020c00
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40013c00 	.word	0x40013c00

080039b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80039c0:	887b      	ldrh	r3, [r7, #2]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d004      	beq.n	80039d0 <HAL_GPIO_ReadPin+0x1c>
 80039c6:	887b      	ldrh	r3, [r7, #2]
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	041b      	lsls	r3, r3, #16
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d004      	beq.n	80039da <HAL_GPIO_ReadPin+0x26>
 80039d0:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80039d4:	4809      	ldr	r0, [pc, #36]	; (80039fc <HAL_GPIO_ReadPin+0x48>)
 80039d6:	f7fe f8d2 	bl	8001b7e <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	887b      	ldrh	r3, [r7, #2]
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
 80039ea:	e001      	b.n	80039f0 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039ec:	2300      	movs	r3, #0
 80039ee:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	0800baac 	.word	0x0800baac

08003a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003a10:	887b      	ldrh	r3, [r7, #2]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <HAL_GPIO_WritePin+0x20>
 8003a16:	887b      	ldrh	r3, [r7, #2]
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	041b      	lsls	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <HAL_GPIO_WritePin+0x2a>
 8003a20:	f240 119d 	movw	r1, #413	; 0x19d
 8003a24:	480e      	ldr	r0, [pc, #56]	; (8003a60 <HAL_GPIO_WritePin+0x60>)
 8003a26:	f7fe f8aa 	bl	8001b7e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003a2a:	787b      	ldrb	r3, [r7, #1]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <HAL_GPIO_WritePin+0x40>
 8003a30:	787b      	ldrb	r3, [r7, #1]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d004      	beq.n	8003a40 <HAL_GPIO_WritePin+0x40>
 8003a36:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003a3a:	4809      	ldr	r0, [pc, #36]	; (8003a60 <HAL_GPIO_WritePin+0x60>)
 8003a3c:	f7fe f89f 	bl	8001b7e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003a40:	787b      	ldrb	r3, [r7, #1]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a46:	887a      	ldrh	r2, [r7, #2]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a4c:	e003      	b.n	8003a56 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a4e:	887b      	ldrh	r3, [r7, #2]
 8003a50:	041a      	lsls	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	619a      	str	r2, [r3, #24]
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	0800baac 	.word	0x0800baac

08003a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d006      	beq.n	8003a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a7a:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fd fe82 	bl	800178c <HAL_GPIO_EXTI_Callback>
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40013c00 	.word	0x40013c00

08003a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e1bd      	b.n	8003e22 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a93      	ldr	r2, [pc, #588]	; (8003cf8 <HAL_I2C_Init+0x264>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00e      	beq.n	8003ace <HAL_I2C_Init+0x3a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a91      	ldr	r2, [pc, #580]	; (8003cfc <HAL_I2C_Init+0x268>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d009      	beq.n	8003ace <HAL_I2C_Init+0x3a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a90      	ldr	r2, [pc, #576]	; (8003d00 <HAL_I2C_Init+0x26c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d004      	beq.n	8003ace <HAL_I2C_Init+0x3a>
 8003ac4:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8003ac8:	488e      	ldr	r0, [pc, #568]	; (8003d04 <HAL_I2C_Init+0x270>)
 8003aca:	f7fe f858 	bl	8001b7e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d004      	beq.n	8003ae0 <HAL_I2C_Init+0x4c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4a8b      	ldr	r2, [pc, #556]	; (8003d08 <HAL_I2C_Init+0x274>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d904      	bls.n	8003aea <HAL_I2C_Init+0x56>
 8003ae0:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003ae4:	4887      	ldr	r0, [pc, #540]	; (8003d04 <HAL_I2C_Init+0x270>)
 8003ae6:	f7fe f84a 	bl	8001b7e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <HAL_I2C_Init+0x72>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003afa:	d004      	beq.n	8003b06 <HAL_I2C_Init+0x72>
 8003afc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003b00:	4880      	ldr	r0, [pc, #512]	; (8003d04 <HAL_I2C_Init+0x270>)
 8003b02:	f7fe f83c 	bl	8001b7e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b0e:	f023 0303 	bic.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <HAL_I2C_Init+0x8c>
 8003b16:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003b1a:	487a      	ldr	r0, [pc, #488]	; (8003d04 <HAL_I2C_Init+0x270>)
 8003b1c:	f7fe f82f 	bl	8001b7e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b28:	d009      	beq.n	8003b3e <HAL_I2C_Init+0xaa>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b32:	d004      	beq.n	8003b3e <HAL_I2C_Init+0xaa>
 8003b34:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003b38:	4872      	ldr	r0, [pc, #456]	; (8003d04 <HAL_I2C_Init+0x270>)
 8003b3a:	f7fe f820 	bl	8001b7e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_I2C_Init+0xc4>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d004      	beq.n	8003b58 <HAL_I2C_Init+0xc4>
 8003b4e:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003b52:	486c      	ldr	r0, [pc, #432]	; (8003d04 <HAL_I2C_Init+0x270>)
 8003b54:	f7fe f813 	bl	8001b7e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d004      	beq.n	8003b6e <HAL_I2C_Init+0xda>
 8003b64:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003b68:	4866      	ldr	r0, [pc, #408]	; (8003d04 <HAL_I2C_Init+0x270>)
 8003b6a:	f7fe f808 	bl	8001b7e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d008      	beq.n	8003b88 <HAL_I2C_Init+0xf4>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	2b40      	cmp	r3, #64	; 0x40
 8003b7c:	d004      	beq.n	8003b88 <HAL_I2C_Init+0xf4>
 8003b7e:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003b82:	4860      	ldr	r0, [pc, #384]	; (8003d04 <HAL_I2C_Init+0x270>)
 8003b84:	f7fd fffb 	bl	8001b7e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_I2C_Init+0x10e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	2b80      	cmp	r3, #128	; 0x80
 8003b96:	d004      	beq.n	8003ba2 <HAL_I2C_Init+0x10e>
 8003b98:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003b9c:	4859      	ldr	r0, [pc, #356]	; (8003d04 <HAL_I2C_Init+0x270>)
 8003b9e:	f7fd ffee 	bl	8001b7e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd fefe 	bl	80019b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2224      	movs	r2, #36	; 0x24
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0201 	bic.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003be2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bf4:	f000 febc 	bl	8004970 <HAL_RCC_GetPCLK1Freq>
 8003bf8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4a43      	ldr	r2, [pc, #268]	; (8003d0c <HAL_I2C_Init+0x278>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d807      	bhi.n	8003c14 <HAL_I2C_Init+0x180>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a42      	ldr	r2, [pc, #264]	; (8003d10 <HAL_I2C_Init+0x27c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	bf94      	ite	ls
 8003c0c:	2301      	movls	r3, #1
 8003c0e:	2300      	movhi	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e006      	b.n	8003c22 <HAL_I2C_Init+0x18e>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a3f      	ldr	r2, [pc, #252]	; (8003d14 <HAL_I2C_Init+0x280>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bf94      	ite	ls
 8003c1c:	2301      	movls	r3, #1
 8003c1e:	2300      	movhi	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e0fb      	b.n	8003e22 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4a3a      	ldr	r2, [pc, #232]	; (8003d18 <HAL_I2C_Init+0x284>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	0c9b      	lsrs	r3, r3, #18
 8003c34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a2c      	ldr	r2, [pc, #176]	; (8003d0c <HAL_I2C_Init+0x278>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d802      	bhi.n	8003c64 <HAL_I2C_Init+0x1d0>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	3301      	adds	r3, #1
 8003c62:	e009      	b.n	8003c78 <HAL_I2C_Init+0x1e4>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	4a2b      	ldr	r2, [pc, #172]	; (8003d1c <HAL_I2C_Init+0x288>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	099b      	lsrs	r3, r3, #6
 8003c76:	3301      	adds	r3, #1
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	491e      	ldr	r1, [pc, #120]	; (8003d0c <HAL_I2C_Init+0x278>)
 8003c94:	428b      	cmp	r3, r1
 8003c96:	d819      	bhi.n	8003ccc <HAL_I2C_Init+0x238>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	1e59      	subs	r1, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ca6:	1c59      	adds	r1, r3, #1
 8003ca8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cac:	400b      	ands	r3, r1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_I2C_Init+0x234>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1e59      	subs	r1, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc6:	e065      	b.n	8003d94 <HAL_I2C_Init+0x300>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	e063      	b.n	8003d94 <HAL_I2C_Init+0x300>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d125      	bne.n	8003d20 <HAL_I2C_Init+0x28c>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1e58      	subs	r0, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	440b      	add	r3, r1
 8003ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	e026      	b.n	8003d46 <HAL_I2C_Init+0x2b2>
 8003cf8:	40005400 	.word	0x40005400
 8003cfc:	40005800 	.word	0x40005800
 8003d00:	40005c00 	.word	0x40005c00
 8003d04:	0800bb20 	.word	0x0800bb20
 8003d08:	00061a80 	.word	0x00061a80
 8003d0c:	000186a0 	.word	0x000186a0
 8003d10:	001e847f 	.word	0x001e847f
 8003d14:	003d08ff 	.word	0x003d08ff
 8003d18:	431bde83 	.word	0x431bde83
 8003d1c:	10624dd3 	.word	0x10624dd3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1e58      	subs	r0, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6859      	ldr	r1, [r3, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	0099      	lsls	r1, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d36:	3301      	adds	r3, #1
 8003d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_I2C_Init+0x2ba>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e022      	b.n	8003d94 <HAL_I2C_Init+0x300>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10e      	bne.n	8003d74 <HAL_I2C_Init+0x2e0>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1e58      	subs	r0, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	440b      	add	r3, r1
 8003d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d72:	e00f      	b.n	8003d94 <HAL_I2C_Init+0x300>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1e58      	subs	r0, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	0099      	lsls	r1, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	6809      	ldr	r1, [r1, #0]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69da      	ldr	r2, [r3, #28]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6911      	ldr	r1, [r2, #16]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68d2      	ldr	r2, [r2, #12]
 8003dce:	4311      	orrs	r1, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695a      	ldr	r2, [r3, #20]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop

08003e2c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_PWR_PVD_IRQHandler+0x20>)
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003e3c:	f000 f808 	bl	8003e50 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003e40:	4b02      	ldr	r3, [pc, #8]	; (8003e4c <HAL_PWR_PVD_IRQHandler+0x20>)
 8003e42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e46:	615a      	str	r2, [r3, #20]
  }
}
 8003e48:	bf00      	nop
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40013c00 	.word	0x40013c00

08003e50 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8003e54:	bf00      	nop
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e314      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b0f      	cmp	r3, #15
 8003e78:	d903      	bls.n	8003e82 <HAL_RCC_OscConfig+0x22>
 8003e7a:	21e6      	movs	r1, #230	; 0xe6
 8003e7c:	4897      	ldr	r0, [pc, #604]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003e7e:	f7fd fe7e 	bl	8001b7e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8088 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00d      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x54>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea0:	d008      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x54>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eaa:	d003      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x54>
 8003eac:	21eb      	movs	r1, #235	; 0xeb
 8003eae:	488b      	ldr	r0, [pc, #556]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003eb0:	f7fd fe65 	bl	8001b7e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eb4:	4b8a      	ldr	r3, [pc, #552]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d00c      	beq.n	8003eda <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ec0:	4b87      	ldr	r3, [pc, #540]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d112      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ecc:	4b84      	ldr	r3, [pc, #528]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eda:	4b81      	ldr	r3, [pc, #516]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d05b      	beq.n	8003f9e <HAL_RCC_OscConfig+0x13e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d157      	bne.n	8003f9e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e2d4      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efa:	d106      	bne.n	8003f0a <HAL_RCC_OscConfig+0xaa>
 8003efc:	4b78      	ldr	r3, [pc, #480]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a77      	ldr	r2, [pc, #476]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	e01d      	b.n	8003f46 <HAL_RCC_OscConfig+0xe6>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f12:	d10c      	bne.n	8003f2e <HAL_RCC_OscConfig+0xce>
 8003f14:	4b72      	ldr	r3, [pc, #456]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a71      	ldr	r2, [pc, #452]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4b6f      	ldr	r3, [pc, #444]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a6e      	ldr	r2, [pc, #440]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	e00b      	b.n	8003f46 <HAL_RCC_OscConfig+0xe6>
 8003f2e:	4b6c      	ldr	r3, [pc, #432]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a6b      	ldr	r2, [pc, #428]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b69      	ldr	r3, [pc, #420]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a68      	ldr	r2, [pc, #416]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d013      	beq.n	8003f76 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7ff f8c9 	bl	80030e4 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f56:	f7ff f8c5 	bl	80030e4 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b64      	cmp	r3, #100	; 0x64
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e299      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f68:	4b5d      	ldr	r3, [pc, #372]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0xf6>
 8003f74:	e014      	b.n	8003fa0 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f76:	f7ff f8b5 	bl	80030e4 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f7e:	f7ff f8b1 	bl	80030e4 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b64      	cmp	r3, #100	; 0x64
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e285      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f90:	4b53      	ldr	r3, [pc, #332]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f0      	bne.n	8003f7e <HAL_RCC_OscConfig+0x11e>
 8003f9c:	e000      	b.n	8003fa0 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d079      	beq.n	80040a0 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x166>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d004      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x166>
 8003fbc:	f240 111d 	movw	r1, #285	; 0x11d
 8003fc0:	4846      	ldr	r0, [pc, #280]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003fc2:	f7fd fddc 	bl	8001b7e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b1f      	cmp	r3, #31
 8003fcc:	d904      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x178>
 8003fce:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003fd2:	4842      	ldr	r0, [pc, #264]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003fd4:	f7fd fdd3 	bl	8001b7e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fd8:	4b41      	ldr	r3, [pc, #260]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 030c 	and.w	r3, r3, #12
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fe4:	4b3e      	ldr	r3, [pc, #248]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d11c      	bne.n	800402a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff0:	4b3b      	ldr	r3, [pc, #236]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d116      	bne.n	800402a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffc:	4b38      	ldr	r3, [pc, #224]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_OscConfig+0x1b4>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d001      	beq.n	8004014 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e243      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004014:	4b32      	ldr	r3, [pc, #200]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	492f      	ldr	r1, [pc, #188]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004028:	e03a      	b.n	80040a0 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d020      	beq.n	8004074 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004032:	4b2c      	ldr	r3, [pc, #176]	; (80040e4 <HAL_RCC_OscConfig+0x284>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7ff f854 	bl	80030e4 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004040:	f7ff f850 	bl	80030e4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e224      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004052:	4b23      	ldr	r3, [pc, #140]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405e:	4b20      	ldr	r3, [pc, #128]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	491c      	ldr	r1, [pc, #112]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]
 8004072:	e015      	b.n	80040a0 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004074:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <HAL_RCC_OscConfig+0x284>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407a:	f7ff f833 	bl	80030e4 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004082:	f7ff f82f 	bl	80030e4 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e203      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004094:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f0      	bne.n	8004082 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d045      	beq.n	8004138 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_RCC_OscConfig+0x266>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d004      	beq.n	80040c6 <HAL_RCC_OscConfig+0x266>
 80040bc:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80040c0:	4806      	ldr	r0, [pc, #24]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 80040c2:	f7fd fd5c 	bl	8001b7e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d01e      	beq.n	800410c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_RCC_OscConfig+0x288>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d4:	f7ff f806 	bl	80030e4 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040da:	e010      	b.n	80040fe <HAL_RCC_OscConfig+0x29e>
 80040dc:	0800bb94 	.word	0x0800bb94
 80040e0:	40023800 	.word	0x40023800
 80040e4:	42470000 	.word	0x42470000
 80040e8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ec:	f7fe fffa 	bl	80030e4 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e1ce      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fe:	4b5e      	ldr	r3, [pc, #376]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 8004100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0x28c>
 800410a:	e015      	b.n	8004138 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800410c:	4b5b      	ldr	r3, [pc, #364]	; (800427c <HAL_RCC_OscConfig+0x41c>)
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004112:	f7fe ffe7 	bl	80030e4 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800411a:	f7fe ffe3 	bl	80030e4 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e1b7      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412c:	4b52      	ldr	r3, [pc, #328]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 800412e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1f0      	bne.n	800411a <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 80b0 	beq.w	80042a6 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00c      	beq.n	800416c <HAL_RCC_OscConfig+0x30c>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d008      	beq.n	800416c <HAL_RCC_OscConfig+0x30c>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b05      	cmp	r3, #5
 8004160:	d004      	beq.n	800416c <HAL_RCC_OscConfig+0x30c>
 8004162:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004166:	4846      	ldr	r0, [pc, #280]	; (8004280 <HAL_RCC_OscConfig+0x420>)
 8004168:	f7fd fd09 	bl	8001b7e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416c:	4b42      	ldr	r3, [pc, #264]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10f      	bne.n	8004198 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004178:	2300      	movs	r3, #0
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	4b3e      	ldr	r3, [pc, #248]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	4a3d      	ldr	r2, [pc, #244]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 8004182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004186:	6413      	str	r3, [r2, #64]	; 0x40
 8004188:	4b3b      	ldr	r3, [pc, #236]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004194:	2301      	movs	r3, #1
 8004196:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004198:	4b3a      	ldr	r3, [pc, #232]	; (8004284 <HAL_RCC_OscConfig+0x424>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d118      	bne.n	80041d6 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a4:	4b37      	ldr	r3, [pc, #220]	; (8004284 <HAL_RCC_OscConfig+0x424>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a36      	ldr	r2, [pc, #216]	; (8004284 <HAL_RCC_OscConfig+0x424>)
 80041aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b0:	f7fe ff98 	bl	80030e4 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b8:	f7fe ff94 	bl	80030e4 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e168      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ca:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <HAL_RCC_OscConfig+0x424>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d106      	bne.n	80041ec <HAL_RCC_OscConfig+0x38c>
 80041de:	4b26      	ldr	r3, [pc, #152]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	4a25      	ldr	r2, [pc, #148]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ea:	e01c      	b.n	8004226 <HAL_RCC_OscConfig+0x3c6>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	d10c      	bne.n	800420e <HAL_RCC_OscConfig+0x3ae>
 80041f4:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	4a1f      	ldr	r2, [pc, #124]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 80041fa:	f043 0304 	orr.w	r3, r3, #4
 80041fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004200:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	4a1c      	ldr	r2, [pc, #112]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	6713      	str	r3, [r2, #112]	; 0x70
 800420c:	e00b      	b.n	8004226 <HAL_RCC_OscConfig+0x3c6>
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	4a19      	ldr	r2, [pc, #100]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	6713      	str	r3, [r2, #112]	; 0x70
 800421a:	4b17      	ldr	r3, [pc, #92]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	4a16      	ldr	r2, [pc, #88]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 8004220:	f023 0304 	bic.w	r3, r3, #4
 8004224:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d015      	beq.n	800425a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422e:	f7fe ff59 	bl	80030e4 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004234:	e00a      	b.n	800424c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004236:	f7fe ff55 	bl	80030e4 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3288 	movw	r2, #5000	; 0x1388
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e127      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <HAL_RCC_OscConfig+0x418>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0ee      	beq.n	8004236 <HAL_RCC_OscConfig+0x3d6>
 8004258:	e01c      	b.n	8004294 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425a:	f7fe ff43 	bl	80030e4 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004260:	e012      	b.n	8004288 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f7fe ff3f 	bl	80030e4 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004270:	4293      	cmp	r3, r2
 8004272:	d909      	bls.n	8004288 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e111      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
 8004278:	40023800 	.word	0x40023800
 800427c:	42470e80 	.word	0x42470e80
 8004280:	0800bb94 	.word	0x0800bb94
 8004284:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004288:	4b86      	ldr	r3, [pc, #536]	; (80044a4 <HAL_RCC_OscConfig+0x644>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e6      	bne.n	8004262 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d105      	bne.n	80042a6 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429a:	4b82      	ldr	r3, [pc, #520]	; (80044a4 <HAL_RCC_OscConfig+0x644>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	4a81      	ldr	r2, [pc, #516]	; (80044a4 <HAL_RCC_OscConfig+0x644>)
 80042a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00c      	beq.n	80042c8 <HAL_RCC_OscConfig+0x468>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d008      	beq.n	80042c8 <HAL_RCC_OscConfig+0x468>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d004      	beq.n	80042c8 <HAL_RCC_OscConfig+0x468>
 80042be:	f240 11cd 	movw	r1, #461	; 0x1cd
 80042c2:	4879      	ldr	r0, [pc, #484]	; (80044a8 <HAL_RCC_OscConfig+0x648>)
 80042c4:	f7fd fc5b 	bl	8001b7e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80e4 	beq.w	800449a <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042d2:	4b74      	ldr	r3, [pc, #464]	; (80044a4 <HAL_RCC_OscConfig+0x644>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b08      	cmp	r3, #8
 80042dc:	f000 80a5 	beq.w	800442a <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	f040 8089 	bne.w	80043fc <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_RCC_OscConfig+0x4a6>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fa:	d004      	beq.n	8004306 <HAL_RCC_OscConfig+0x4a6>
 80042fc:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004300:	4869      	ldr	r0, [pc, #420]	; (80044a8 <HAL_RCC_OscConfig+0x648>)
 8004302:	f7fd fc3c 	bl	8001b7e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	2b3f      	cmp	r3, #63	; 0x3f
 800430c:	d904      	bls.n	8004318 <HAL_RCC_OscConfig+0x4b8>
 800430e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004312:	4865      	ldr	r0, [pc, #404]	; (80044a8 <HAL_RCC_OscConfig+0x648>)
 8004314:	f7fd fc33 	bl	8001b7e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	2b31      	cmp	r3, #49	; 0x31
 800431e:	d904      	bls.n	800432a <HAL_RCC_OscConfig+0x4ca>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004328:	d904      	bls.n	8004334 <HAL_RCC_OscConfig+0x4d4>
 800432a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800432e:	485e      	ldr	r0, [pc, #376]	; (80044a8 <HAL_RCC_OscConfig+0x648>)
 8004330:	f7fd fc25 	bl	8001b7e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	2b02      	cmp	r3, #2
 800433a:	d010      	beq.n	800435e <HAL_RCC_OscConfig+0x4fe>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	2b04      	cmp	r3, #4
 8004342:	d00c      	beq.n	800435e <HAL_RCC_OscConfig+0x4fe>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	2b06      	cmp	r3, #6
 800434a:	d008      	beq.n	800435e <HAL_RCC_OscConfig+0x4fe>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	2b08      	cmp	r3, #8
 8004352:	d004      	beq.n	800435e <HAL_RCC_OscConfig+0x4fe>
 8004354:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004358:	4853      	ldr	r0, [pc, #332]	; (80044a8 <HAL_RCC_OscConfig+0x648>)
 800435a:	f7fd fc10 	bl	8001b7e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	2b01      	cmp	r3, #1
 8004364:	d903      	bls.n	800436e <HAL_RCC_OscConfig+0x50e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	2b0f      	cmp	r3, #15
 800436c:	d904      	bls.n	8004378 <HAL_RCC_OscConfig+0x518>
 800436e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004372:	484d      	ldr	r0, [pc, #308]	; (80044a8 <HAL_RCC_OscConfig+0x648>)
 8004374:	f7fd fc03 	bl	8001b7e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004378:	4b4c      	ldr	r3, [pc, #304]	; (80044ac <HAL_RCC_OscConfig+0x64c>)
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437e:	f7fe feb1 	bl	80030e4 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004386:	f7fe fead 	bl	80030e4 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e081      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004398:	4b42      	ldr	r3, [pc, #264]	; (80044a4 <HAL_RCC_OscConfig+0x644>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1f0      	bne.n	8004386 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	019b      	lsls	r3, r3, #6
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	085b      	lsrs	r3, r3, #1
 80043bc:	3b01      	subs	r3, #1
 80043be:	041b      	lsls	r3, r3, #16
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	061b      	lsls	r3, r3, #24
 80043c8:	4936      	ldr	r1, [pc, #216]	; (80044a4 <HAL_RCC_OscConfig+0x644>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043ce:	4b37      	ldr	r3, [pc, #220]	; (80044ac <HAL_RCC_OscConfig+0x64c>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d4:	f7fe fe86 	bl	80030e4 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043dc:	f7fe fe82 	bl	80030e4 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e056      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ee:	4b2d      	ldr	r3, [pc, #180]	; (80044a4 <HAL_RCC_OscConfig+0x644>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x57c>
 80043fa:	e04e      	b.n	800449a <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fc:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <HAL_RCC_OscConfig+0x64c>)
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004402:	f7fe fe6f 	bl	80030e4 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800440a:	f7fe fe6b 	bl	80030e4 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e03f      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441c:	4b21      	ldr	r3, [pc, #132]	; (80044a4 <HAL_RCC_OscConfig+0x644>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f0      	bne.n	800440a <HAL_RCC_OscConfig+0x5aa>
 8004428:	e037      	b.n	800449a <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e032      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004436:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <HAL_RCC_OscConfig+0x644>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d028      	beq.n	8004496 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d121      	bne.n	8004496 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d11a      	bne.n	8004496 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004466:	4013      	ands	r3, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800446c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800446e:	4293      	cmp	r3, r2
 8004470:	d111      	bne.n	8004496 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	3b01      	subs	r3, #1
 8004480:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d107      	bne.n	8004496 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004492:	429a      	cmp	r2, r3
 8004494:	d001      	beq.n	800449a <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40023800 	.word	0x40023800
 80044a8:	0800bb94 	.word	0x0800bb94
 80044ac:	42470060 	.word	0x42470060

080044b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e174      	b.n	80047ae <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x24>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b0f      	cmp	r3, #15
 80044d2:	d904      	bls.n	80044de <HAL_RCC_ClockConfig+0x2e>
 80044d4:	f240 215a 	movw	r1, #602	; 0x25a
 80044d8:	487b      	ldr	r0, [pc, #492]	; (80046c8 <HAL_RCC_ClockConfig+0x218>)
 80044da:	f7fd fb50 	bl	8001b7e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d019      	beq.n	8004518 <HAL_RCC_ClockConfig+0x68>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d016      	beq.n	8004518 <HAL_RCC_ClockConfig+0x68>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d013      	beq.n	8004518 <HAL_RCC_ClockConfig+0x68>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d010      	beq.n	8004518 <HAL_RCC_ClockConfig+0x68>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d00d      	beq.n	8004518 <HAL_RCC_ClockConfig+0x68>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b05      	cmp	r3, #5
 8004500:	d00a      	beq.n	8004518 <HAL_RCC_ClockConfig+0x68>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b06      	cmp	r3, #6
 8004506:	d007      	beq.n	8004518 <HAL_RCC_ClockConfig+0x68>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b07      	cmp	r3, #7
 800450c:	d004      	beq.n	8004518 <HAL_RCC_ClockConfig+0x68>
 800450e:	f240 215b 	movw	r1, #603	; 0x25b
 8004512:	486d      	ldr	r0, [pc, #436]	; (80046c8 <HAL_RCC_ClockConfig+0x218>)
 8004514:	f7fd fb33 	bl	8001b7e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004518:	4b6c      	ldr	r3, [pc, #432]	; (80046cc <HAL_RCC_ClockConfig+0x21c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d90c      	bls.n	8004540 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b69      	ldr	r3, [pc, #420]	; (80046cc <HAL_RCC_ClockConfig+0x21c>)
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b67      	ldr	r3, [pc, #412]	; (80046cc <HAL_RCC_ClockConfig+0x21c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e136      	b.n	80047ae <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d049      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004558:	4b5d      	ldr	r3, [pc, #372]	; (80046d0 <HAL_RCC_ClockConfig+0x220>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4a5c      	ldr	r2, [pc, #368]	; (80046d0 <HAL_RCC_ClockConfig+0x220>)
 800455e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004562:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004570:	4b57      	ldr	r3, [pc, #348]	; (80046d0 <HAL_RCC_ClockConfig+0x220>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	4a56      	ldr	r2, [pc, #344]	; (80046d0 <HAL_RCC_ClockConfig+0x220>)
 8004576:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800457a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d024      	beq.n	80045ce <HAL_RCC_ClockConfig+0x11e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b80      	cmp	r3, #128	; 0x80
 800458a:	d020      	beq.n	80045ce <HAL_RCC_ClockConfig+0x11e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2b90      	cmp	r3, #144	; 0x90
 8004592:	d01c      	beq.n	80045ce <HAL_RCC_ClockConfig+0x11e>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2ba0      	cmp	r3, #160	; 0xa0
 800459a:	d018      	beq.n	80045ce <HAL_RCC_ClockConfig+0x11e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2bb0      	cmp	r3, #176	; 0xb0
 80045a2:	d014      	beq.n	80045ce <HAL_RCC_ClockConfig+0x11e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2bc0      	cmp	r3, #192	; 0xc0
 80045aa:	d010      	beq.n	80045ce <HAL_RCC_ClockConfig+0x11e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2bd0      	cmp	r3, #208	; 0xd0
 80045b2:	d00c      	beq.n	80045ce <HAL_RCC_ClockConfig+0x11e>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2be0      	cmp	r3, #224	; 0xe0
 80045ba:	d008      	beq.n	80045ce <HAL_RCC_ClockConfig+0x11e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2bf0      	cmp	r3, #240	; 0xf0
 80045c2:	d004      	beq.n	80045ce <HAL_RCC_ClockConfig+0x11e>
 80045c4:	f240 217e 	movw	r1, #638	; 0x27e
 80045c8:	483f      	ldr	r0, [pc, #252]	; (80046c8 <HAL_RCC_ClockConfig+0x218>)
 80045ca:	f7fd fad8 	bl	8001b7e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ce:	4b40      	ldr	r3, [pc, #256]	; (80046d0 <HAL_RCC_ClockConfig+0x220>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	493d      	ldr	r1, [pc, #244]	; (80046d0 <HAL_RCC_ClockConfig+0x220>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d059      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d010      	beq.n	8004616 <HAL_RCC_ClockConfig+0x166>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d00c      	beq.n	8004616 <HAL_RCC_ClockConfig+0x166>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d008      	beq.n	8004616 <HAL_RCC_ClockConfig+0x166>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b03      	cmp	r3, #3
 800460a:	d004      	beq.n	8004616 <HAL_RCC_ClockConfig+0x166>
 800460c:	f240 2185 	movw	r1, #645	; 0x285
 8004610:	482d      	ldr	r0, [pc, #180]	; (80046c8 <HAL_RCC_ClockConfig+0x218>)
 8004612:	f7fd fab4 	bl	8001b7e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461e:	4b2c      	ldr	r3, [pc, #176]	; (80046d0 <HAL_RCC_ClockConfig+0x220>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d119      	bne.n	800465e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e0bf      	b.n	80047ae <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d003      	beq.n	800463e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800463a:	2b03      	cmp	r3, #3
 800463c:	d107      	bne.n	800464e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800463e:	4b24      	ldr	r3, [pc, #144]	; (80046d0 <HAL_RCC_ClockConfig+0x220>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e0af      	b.n	80047ae <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464e:	4b20      	ldr	r3, [pc, #128]	; (80046d0 <HAL_RCC_ClockConfig+0x220>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e0a7      	b.n	80047ae <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800465e:	4b1c      	ldr	r3, [pc, #112]	; (80046d0 <HAL_RCC_ClockConfig+0x220>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f023 0203 	bic.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4919      	ldr	r1, [pc, #100]	; (80046d0 <HAL_RCC_ClockConfig+0x220>)
 800466c:	4313      	orrs	r3, r2
 800466e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004670:	f7fe fd38 	bl	80030e4 <HAL_GetTick>
 8004674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	e00a      	b.n	800468e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004678:	f7fe fd34 	bl	80030e4 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e08f      	b.n	80047ae <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468e:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <HAL_RCC_ClockConfig+0x220>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 020c 	and.w	r2, r3, #12
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	429a      	cmp	r2, r3
 800469e:	d1eb      	bne.n	8004678 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a0:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <HAL_RCC_ClockConfig+0x21c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d212      	bcs.n	80046d4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b07      	ldr	r3, [pc, #28]	; (80046cc <HAL_RCC_ClockConfig+0x21c>)
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <HAL_RCC_ClockConfig+0x21c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d007      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e072      	b.n	80047ae <HAL_RCC_ClockConfig+0x2fe>
 80046c8:	0800bb94 	.word	0x0800bb94
 80046cc:	40023c00 	.word	0x40023c00
 80046d0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d025      	beq.n	800472c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d018      	beq.n	800471a <HAL_RCC_ClockConfig+0x26a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f0:	d013      	beq.n	800471a <HAL_RCC_ClockConfig+0x26a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046fa:	d00e      	beq.n	800471a <HAL_RCC_ClockConfig+0x26a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004704:	d009      	beq.n	800471a <HAL_RCC_ClockConfig+0x26a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800470e:	d004      	beq.n	800471a <HAL_RCC_ClockConfig+0x26a>
 8004710:	f240 21c3 	movw	r1, #707	; 0x2c3
 8004714:	4828      	ldr	r0, [pc, #160]	; (80047b8 <HAL_RCC_ClockConfig+0x308>)
 8004716:	f7fd fa32 	bl	8001b7e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800471a:	4b28      	ldr	r3, [pc, #160]	; (80047bc <HAL_RCC_ClockConfig+0x30c>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	4925      	ldr	r1, [pc, #148]	; (80047bc <HAL_RCC_ClockConfig+0x30c>)
 8004728:	4313      	orrs	r3, r2
 800472a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d026      	beq.n	8004786 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d018      	beq.n	8004772 <HAL_RCC_ClockConfig+0x2c2>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004748:	d013      	beq.n	8004772 <HAL_RCC_ClockConfig+0x2c2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004752:	d00e      	beq.n	8004772 <HAL_RCC_ClockConfig+0x2c2>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800475c:	d009      	beq.n	8004772 <HAL_RCC_ClockConfig+0x2c2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004766:	d004      	beq.n	8004772 <HAL_RCC_ClockConfig+0x2c2>
 8004768:	f240 21ca 	movw	r1, #714	; 0x2ca
 800476c:	4812      	ldr	r0, [pc, #72]	; (80047b8 <HAL_RCC_ClockConfig+0x308>)
 800476e:	f7fd fa06 	bl	8001b7e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004772:	4b12      	ldr	r3, [pc, #72]	; (80047bc <HAL_RCC_ClockConfig+0x30c>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	490e      	ldr	r1, [pc, #56]	; (80047bc <HAL_RCC_ClockConfig+0x30c>)
 8004782:	4313      	orrs	r3, r2
 8004784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004786:	f000 f821 	bl	80047cc <HAL_RCC_GetSysClockFreq>
 800478a:	4602      	mov	r2, r0
 800478c:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <HAL_RCC_ClockConfig+0x30c>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	490a      	ldr	r1, [pc, #40]	; (80047c0 <HAL_RCC_ClockConfig+0x310>)
 8004798:	5ccb      	ldrb	r3, [r1, r3]
 800479a:	fa22 f303 	lsr.w	r3, r2, r3
 800479e:	4a09      	ldr	r2, [pc, #36]	; (80047c4 <HAL_RCC_ClockConfig+0x314>)
 80047a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047a2:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <HAL_RCC_ClockConfig+0x318>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fd fb38 	bl	8001e1c <HAL_InitTick>

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	0800bb94 	.word	0x0800bb94
 80047bc:	40023800 	.word	0x40023800
 80047c0:	0800be60 	.word	0x0800be60
 80047c4:	2000002c 	.word	0x2000002c
 80047c8:	20000040 	.word	0x20000040

080047cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d0:	b090      	sub	sp, #64	; 0x40
 80047d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	637b      	str	r3, [r7, #52]	; 0x34
 80047d8:	2300      	movs	r3, #0
 80047da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047dc:	2300      	movs	r3, #0
 80047de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047e4:	4b59      	ldr	r3, [pc, #356]	; (800494c <HAL_RCC_GetSysClockFreq+0x180>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 030c 	and.w	r3, r3, #12
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d00d      	beq.n	800480c <HAL_RCC_GetSysClockFreq+0x40>
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	f200 80a1 	bhi.w	8004938 <HAL_RCC_GetSysClockFreq+0x16c>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <HAL_RCC_GetSysClockFreq+0x34>
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d003      	beq.n	8004806 <HAL_RCC_GetSysClockFreq+0x3a>
 80047fe:	e09b      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004800:	4b53      	ldr	r3, [pc, #332]	; (8004950 <HAL_RCC_GetSysClockFreq+0x184>)
 8004802:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004804:	e09b      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004806:	4b53      	ldr	r3, [pc, #332]	; (8004954 <HAL_RCC_GetSysClockFreq+0x188>)
 8004808:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800480a:	e098      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800480c:	4b4f      	ldr	r3, [pc, #316]	; (800494c <HAL_RCC_GetSysClockFreq+0x180>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004816:	4b4d      	ldr	r3, [pc, #308]	; (800494c <HAL_RCC_GetSysClockFreq+0x180>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d028      	beq.n	8004874 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004822:	4b4a      	ldr	r3, [pc, #296]	; (800494c <HAL_RCC_GetSysClockFreq+0x180>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	099b      	lsrs	r3, r3, #6
 8004828:	2200      	movs	r2, #0
 800482a:	623b      	str	r3, [r7, #32]
 800482c:	627a      	str	r2, [r7, #36]	; 0x24
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004834:	2100      	movs	r1, #0
 8004836:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_RCC_GetSysClockFreq+0x188>)
 8004838:	fb03 f201 	mul.w	r2, r3, r1
 800483c:	2300      	movs	r3, #0
 800483e:	fb00 f303 	mul.w	r3, r0, r3
 8004842:	4413      	add	r3, r2
 8004844:	4a43      	ldr	r2, [pc, #268]	; (8004954 <HAL_RCC_GetSysClockFreq+0x188>)
 8004846:	fba0 1202 	umull	r1, r2, r0, r2
 800484a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800484c:	460a      	mov	r2, r1
 800484e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004852:	4413      	add	r3, r2
 8004854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004858:	2200      	movs	r2, #0
 800485a:	61bb      	str	r3, [r7, #24]
 800485c:	61fa      	str	r2, [r7, #28]
 800485e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004862:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004866:	f7fc f9c7 	bl	8000bf8 <__aeabi_uldivmod>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4613      	mov	r3, r2
 8004870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004872:	e053      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004874:	4b35      	ldr	r3, [pc, #212]	; (800494c <HAL_RCC_GetSysClockFreq+0x180>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	099b      	lsrs	r3, r3, #6
 800487a:	2200      	movs	r2, #0
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	617a      	str	r2, [r7, #20]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004886:	f04f 0b00 	mov.w	fp, #0
 800488a:	4652      	mov	r2, sl
 800488c:	465b      	mov	r3, fp
 800488e:	f04f 0000 	mov.w	r0, #0
 8004892:	f04f 0100 	mov.w	r1, #0
 8004896:	0159      	lsls	r1, r3, #5
 8004898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800489c:	0150      	lsls	r0, r2, #5
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	ebb2 080a 	subs.w	r8, r2, sl
 80048a6:	eb63 090b 	sbc.w	r9, r3, fp
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80048be:	ebb2 0408 	subs.w	r4, r2, r8
 80048c2:	eb63 0509 	sbc.w	r5, r3, r9
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	00eb      	lsls	r3, r5, #3
 80048d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048d4:	00e2      	lsls	r2, r4, #3
 80048d6:	4614      	mov	r4, r2
 80048d8:	461d      	mov	r5, r3
 80048da:	eb14 030a 	adds.w	r3, r4, sl
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	eb45 030b 	adc.w	r3, r5, fp
 80048e4:	607b      	str	r3, [r7, #4]
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048f2:	4629      	mov	r1, r5
 80048f4:	028b      	lsls	r3, r1, #10
 80048f6:	4621      	mov	r1, r4
 80048f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048fc:	4621      	mov	r1, r4
 80048fe:	028a      	lsls	r2, r1, #10
 8004900:	4610      	mov	r0, r2
 8004902:	4619      	mov	r1, r3
 8004904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004906:	2200      	movs	r2, #0
 8004908:	60bb      	str	r3, [r7, #8]
 800490a:	60fa      	str	r2, [r7, #12]
 800490c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004910:	f7fc f972 	bl	8000bf8 <__aeabi_uldivmod>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4613      	mov	r3, r2
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800491c:	4b0b      	ldr	r3, [pc, #44]	; (800494c <HAL_RCC_GetSysClockFreq+0x180>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	0c1b      	lsrs	r3, r3, #16
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	3301      	adds	r3, #1
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800492c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	fbb2 f3f3 	udiv	r3, r2, r3
 8004934:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004936:	e002      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCC_GetSysClockFreq+0x184>)
 800493a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800493c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800493e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004940:	4618      	mov	r0, r3
 8004942:	3740      	adds	r7, #64	; 0x40
 8004944:	46bd      	mov	sp, r7
 8004946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800494a:	bf00      	nop
 800494c:	40023800 	.word	0x40023800
 8004950:	00f42400 	.word	0x00f42400
 8004954:	017d7840 	.word	0x017d7840

08004958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800495c:	4b03      	ldr	r3, [pc, #12]	; (800496c <HAL_RCC_GetHCLKFreq+0x14>)
 800495e:	681b      	ldr	r3, [r3, #0]
}
 8004960:	4618      	mov	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	2000002c 	.word	0x2000002c

08004970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004974:	f7ff fff0 	bl	8004958 <HAL_RCC_GetHCLKFreq>
 8004978:	4602      	mov	r2, r0
 800497a:	4b05      	ldr	r3, [pc, #20]	; (8004990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	0a9b      	lsrs	r3, r3, #10
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	4903      	ldr	r1, [pc, #12]	; (8004994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004986:	5ccb      	ldrb	r3, [r1, r3]
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40023800 	.word	0x40023800
 8004994:	0800be70 	.word	0x0800be70

08004998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800499c:	f7ff ffdc 	bl	8004958 <HAL_RCC_GetHCLKFreq>
 80049a0:	4602      	mov	r2, r0
 80049a2:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	0b5b      	lsrs	r3, r3, #13
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	4903      	ldr	r1, [pc, #12]	; (80049bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ae:	5ccb      	ldrb	r3, [r1, r3]
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40023800 	.word	0x40023800
 80049bc:	0800be70 	.word	0x0800be70

080049c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	220f      	movs	r2, #15
 80049ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049d0:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <HAL_RCC_GetClockConfig+0x5c>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 0203 	and.w	r2, r3, #3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049dc:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <HAL_RCC_GetClockConfig+0x5c>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <HAL_RCC_GetClockConfig+0x5c>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049f4:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <HAL_RCC_GetClockConfig+0x5c>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	08db      	lsrs	r3, r3, #3
 80049fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a02:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <HAL_RCC_GetClockConfig+0x60>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0207 	and.w	r2, r3, #7
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	601a      	str	r2, [r3, #0]
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	40023c00 	.word	0x40023c00

08004a24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e184      	b.n	8004d40 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a72      	ldr	r2, [pc, #456]	; (8004c04 <HAL_SPI_Init+0x1e0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d013      	beq.n	8004a68 <HAL_SPI_Init+0x44>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a70      	ldr	r2, [pc, #448]	; (8004c08 <HAL_SPI_Init+0x1e4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00e      	beq.n	8004a68 <HAL_SPI_Init+0x44>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a6f      	ldr	r2, [pc, #444]	; (8004c0c <HAL_SPI_Init+0x1e8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d009      	beq.n	8004a68 <HAL_SPI_Init+0x44>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a6d      	ldr	r2, [pc, #436]	; (8004c10 <HAL_SPI_Init+0x1ec>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <HAL_SPI_Init+0x44>
 8004a5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004a62:	486c      	ldr	r0, [pc, #432]	; (8004c14 <HAL_SPI_Init+0x1f0>)
 8004a64:	f7fd f88b 	bl	8001b7e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d009      	beq.n	8004a84 <HAL_SPI_Init+0x60>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a78:	d004      	beq.n	8004a84 <HAL_SPI_Init+0x60>
 8004a7a:	f240 1141 	movw	r1, #321	; 0x141
 8004a7e:	4865      	ldr	r0, [pc, #404]	; (8004c14 <HAL_SPI_Init+0x1f0>)
 8004a80:	f7fd f87d 	bl	8001b7e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00e      	beq.n	8004aaa <HAL_SPI_Init+0x86>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a94:	d009      	beq.n	8004aaa <HAL_SPI_Init+0x86>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a9e:	d004      	beq.n	8004aaa <HAL_SPI_Init+0x86>
 8004aa0:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004aa4:	485b      	ldr	r0, [pc, #364]	; (8004c14 <HAL_SPI_Init+0x1f0>)
 8004aa6:	f7fd f86a 	bl	8001b7e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab2:	d008      	beq.n	8004ac6 <HAL_SPI_Init+0xa2>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d004      	beq.n	8004ac6 <HAL_SPI_Init+0xa2>
 8004abc:	f240 1143 	movw	r1, #323	; 0x143
 8004ac0:	4854      	ldr	r0, [pc, #336]	; (8004c14 <HAL_SPI_Init+0x1f0>)
 8004ac2:	f7fd f85c 	bl	8001b7e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ace:	d00d      	beq.n	8004aec <HAL_SPI_Init+0xc8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d009      	beq.n	8004aec <HAL_SPI_Init+0xc8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ae0:	d004      	beq.n	8004aec <HAL_SPI_Init+0xc8>
 8004ae2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004ae6:	484b      	ldr	r0, [pc, #300]	; (8004c14 <HAL_SPI_Init+0x1f0>)
 8004ae8:	f7fd f849 	bl	8001b7e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d020      	beq.n	8004b36 <HAL_SPI_Init+0x112>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d01c      	beq.n	8004b36 <HAL_SPI_Init+0x112>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d018      	beq.n	8004b36 <HAL_SPI_Init+0x112>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	2b18      	cmp	r3, #24
 8004b0a:	d014      	beq.n	8004b36 <HAL_SPI_Init+0x112>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d010      	beq.n	8004b36 <HAL_SPI_Init+0x112>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	2b28      	cmp	r3, #40	; 0x28
 8004b1a:	d00c      	beq.n	8004b36 <HAL_SPI_Init+0x112>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	2b30      	cmp	r3, #48	; 0x30
 8004b22:	d008      	beq.n	8004b36 <HAL_SPI_Init+0x112>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	2b38      	cmp	r3, #56	; 0x38
 8004b2a:	d004      	beq.n	8004b36 <HAL_SPI_Init+0x112>
 8004b2c:	f240 1145 	movw	r1, #325	; 0x145
 8004b30:	4838      	ldr	r0, [pc, #224]	; (8004c14 <HAL_SPI_Init+0x1f0>)
 8004b32:	f7fd f824 	bl	8001b7e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d008      	beq.n	8004b50 <HAL_SPI_Init+0x12c>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	2b80      	cmp	r3, #128	; 0x80
 8004b44:	d004      	beq.n	8004b50 <HAL_SPI_Init+0x12c>
 8004b46:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004b4a:	4832      	ldr	r0, [pc, #200]	; (8004c14 <HAL_SPI_Init+0x1f0>)
 8004b4c:	f7fd f817 	bl	8001b7e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_SPI_Init+0x146>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d004      	beq.n	8004b6a <HAL_SPI_Init+0x146>
 8004b60:	f240 1147 	movw	r1, #327	; 0x147
 8004b64:	482b      	ldr	r0, [pc, #172]	; (8004c14 <HAL_SPI_Init+0x1f0>)
 8004b66:	f7fd f80a 	bl	8001b7e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d152      	bne.n	8004c18 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d008      	beq.n	8004b8c <HAL_SPI_Init+0x168>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d004      	beq.n	8004b8c <HAL_SPI_Init+0x168>
 8004b82:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004b86:	4823      	ldr	r0, [pc, #140]	; (8004c14 <HAL_SPI_Init+0x1f0>)
 8004b88:	f7fc fff9 	bl	8001b7e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <HAL_SPI_Init+0x182>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d004      	beq.n	8004ba6 <HAL_SPI_Init+0x182>
 8004b9c:	f240 114b 	movw	r1, #331	; 0x14b
 8004ba0:	481c      	ldr	r0, [pc, #112]	; (8004c14 <HAL_SPI_Init+0x1f0>)
 8004ba2:	f7fc ffec 	bl	8001b7e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bae:	d125      	bne.n	8004bfc <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d05a      	beq.n	8004c6e <HAL_SPI_Init+0x24a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d056      	beq.n	8004c6e <HAL_SPI_Init+0x24a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	2b10      	cmp	r3, #16
 8004bc6:	d052      	beq.n	8004c6e <HAL_SPI_Init+0x24a>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	2b18      	cmp	r3, #24
 8004bce:	d04e      	beq.n	8004c6e <HAL_SPI_Init+0x24a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d04a      	beq.n	8004c6e <HAL_SPI_Init+0x24a>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	2b28      	cmp	r3, #40	; 0x28
 8004bde:	d046      	beq.n	8004c6e <HAL_SPI_Init+0x24a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	2b30      	cmp	r3, #48	; 0x30
 8004be6:	d042      	beq.n	8004c6e <HAL_SPI_Init+0x24a>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	2b38      	cmp	r3, #56	; 0x38
 8004bee:	d03e      	beq.n	8004c6e <HAL_SPI_Init+0x24a>
 8004bf0:	f240 114f 	movw	r1, #335	; 0x14f
 8004bf4:	4807      	ldr	r0, [pc, #28]	; (8004c14 <HAL_SPI_Init+0x1f0>)
 8004bf6:	f7fc ffc2 	bl	8001b7e <assert_failed>
 8004bfa:	e038      	b.n	8004c6e <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	61da      	str	r2, [r3, #28]
 8004c02:	e034      	b.n	8004c6e <HAL_SPI_Init+0x24a>
 8004c04:	40013000 	.word	0x40013000
 8004c08:	40003800 	.word	0x40003800
 8004c0c:	40003c00 	.word	0x40003c00
 8004c10:	40013400 	.word	0x40013400
 8004c14:	0800bc08 	.word	0x0800bc08
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d020      	beq.n	8004c62 <HAL_SPI_Init+0x23e>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d01c      	beq.n	8004c62 <HAL_SPI_Init+0x23e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	d018      	beq.n	8004c62 <HAL_SPI_Init+0x23e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	2b18      	cmp	r3, #24
 8004c36:	d014      	beq.n	8004c62 <HAL_SPI_Init+0x23e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d010      	beq.n	8004c62 <HAL_SPI_Init+0x23e>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	2b28      	cmp	r3, #40	; 0x28
 8004c46:	d00c      	beq.n	8004c62 <HAL_SPI_Init+0x23e>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	2b30      	cmp	r3, #48	; 0x30
 8004c4e:	d008      	beq.n	8004c62 <HAL_SPI_Init+0x23e>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	2b38      	cmp	r3, #56	; 0x38
 8004c56:	d004      	beq.n	8004c62 <HAL_SPI_Init+0x23e>
 8004c58:	f240 1159 	movw	r1, #345	; 0x159
 8004c5c:	483a      	ldr	r0, [pc, #232]	; (8004d48 <HAL_SPI_Init+0x324>)
 8004c5e:	f7fc ff8e 	bl	8001b7e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7fc ffef 	bl	8001c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2202      	movs	r2, #2
 8004c92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf2:	ea42 0103 	orr.w	r1, r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	0c1b      	lsrs	r3, r3, #16
 8004d0c:	f003 0104 	and.w	r1, r3, #4
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	f003 0210 	and.w	r2, r3, #16
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69da      	ldr	r2, [r3, #28]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	0800bc08 	.word	0x0800bc08

08004d4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d009      	beq.n	8004d7c <HAL_SPI_Transmit+0x30>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d70:	d004      	beq.n	8004d7c <HAL_SPI_Transmit+0x30>
 8004d72:	f44f 7142 	mov.w	r1, #776	; 0x308
 8004d76:	4880      	ldr	r0, [pc, #512]	; (8004f78 <HAL_SPI_Transmit+0x22c>)
 8004d78:	f7fc ff01 	bl	8001b7e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_SPI_Transmit+0x3e>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e128      	b.n	8004fdc <HAL_SPI_Transmit+0x290>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d92:	f7fe f9a7 	bl	80030e4 <HAL_GetTick>
 8004d96:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d98:	88fb      	ldrh	r3, [r7, #6]
 8004d9a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d002      	beq.n	8004dae <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8004da8:	2302      	movs	r3, #2
 8004daa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dac:	e10d      	b.n	8004fca <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_SPI_Transmit+0x6e>
 8004db4:	88fb      	ldrh	r3, [r7, #6]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d102      	bne.n	8004dc0 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dbe:	e104      	b.n	8004fca <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	88fa      	ldrh	r2, [r7, #6]
 8004dd8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	88fa      	ldrh	r2, [r7, #6]
 8004dde:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e06:	d10f      	bne.n	8004e28 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	d007      	beq.n	8004e46 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e4e:	d14b      	bne.n	8004ee8 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <HAL_SPI_Transmit+0x112>
 8004e58:	8afb      	ldrh	r3, [r7, #22]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d13e      	bne.n	8004edc <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	881a      	ldrh	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	1c9a      	adds	r2, r3, #2
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e82:	e02b      	b.n	8004edc <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d112      	bne.n	8004eb8 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	881a      	ldrh	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	1c9a      	adds	r2, r3, #2
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004eb6:	e011      	b.n	8004edc <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eb8:	f7fe f914 	bl	80030e4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d803      	bhi.n	8004ed0 <HAL_SPI_Transmit+0x184>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d102      	bne.n	8004ed6 <HAL_SPI_Transmit+0x18a>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d102      	bne.n	8004edc <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004eda:	e076      	b.n	8004fca <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1ce      	bne.n	8004e84 <HAL_SPI_Transmit+0x138>
 8004ee6:	e04e      	b.n	8004f86 <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_SPI_Transmit+0x1aa>
 8004ef0:	8afb      	ldrh	r3, [r7, #22]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d142      	bne.n	8004f7c <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	330c      	adds	r3, #12
 8004f00:	7812      	ldrb	r2, [r2, #0]
 8004f02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f1c:	e02e      	b.n	8004f7c <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d113      	bne.n	8004f54 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	330c      	adds	r3, #12
 8004f36:	7812      	ldrb	r2, [r2, #0]
 8004f38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f52:	e013      	b.n	8004f7c <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f54:	f7fe f8c6 	bl	80030e4 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d803      	bhi.n	8004f6c <HAL_SPI_Transmit+0x220>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6a:	d102      	bne.n	8004f72 <HAL_SPI_Transmit+0x226>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d104      	bne.n	8004f7c <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f76:	e028      	b.n	8004fca <HAL_SPI_Transmit+0x27e>
 8004f78:	0800bc08 	.word	0x0800bc08
    while (hspi->TxXferCount > 0U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1cb      	bne.n	8004f1e <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	6839      	ldr	r1, [r7, #0]
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f9d0 	bl	8005330 <SPI_EndRxTxTransaction>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10a      	bne.n	8004fba <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	77fb      	strb	r3, [r7, #31]
 8004fc6:	e000      	b.n	8004fca <HAL_SPI_Transmit+0x27e>
  }

error:
 8004fc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fda:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	099b      	lsrs	r3, r3, #6
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10f      	bne.n	8005028 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	099b      	lsrs	r3, r3, #6
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d004      	beq.n	8005028 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	4798      	blx	r3
    return;
 8005026:	e0d7      	b.n	80051d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	085b      	lsrs	r3, r3, #1
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <HAL_SPI_IRQHandler+0x66>
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	09db      	lsrs	r3, r3, #7
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d004      	beq.n	800504a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	4798      	blx	r3
    return;
 8005048:	e0c6      	b.n	80051d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10c      	bne.n	8005070 <HAL_SPI_IRQHandler+0x8c>
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	099b      	lsrs	r3, r3, #6
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	0a1b      	lsrs	r3, r3, #8
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 80b4 	beq.w	80051d8 <HAL_SPI_IRQHandler+0x1f4>
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80ad 	beq.w	80051d8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	099b      	lsrs	r3, r3, #6
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d023      	beq.n	80050d2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b03      	cmp	r3, #3
 8005094:	d011      	beq.n	80050ba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	f043 0204 	orr.w	r2, r3, #4
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	e00b      	b.n	80050d2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	693b      	ldr	r3, [r7, #16]
        return;
 80050d0:	e082      	b.n	80051d8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d014      	beq.n	8005108 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e2:	f043 0201 	orr.w	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	0a1b      	lsrs	r3, r3, #8
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00c      	beq.n	800512e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	f043 0208 	orr.w	r2, r3, #8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005120:	2300      	movs	r3, #0
 8005122:	60bb      	str	r3, [r7, #8]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	60bb      	str	r3, [r7, #8]
 800512c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005132:	2b00      	cmp	r3, #0
 8005134:	d04f      	beq.n	80051d6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005144:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d104      	bne.n	8005162 <HAL_SPI_IRQHandler+0x17e>
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d034      	beq.n	80051cc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0203 	bic.w	r2, r2, #3
 8005170:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d011      	beq.n	800519e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517e:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_SPI_IRQHandler+0x1fc>)
 8005180:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005186:	4618      	mov	r0, r3
 8005188:	f7fe f95e 	bl	8003448 <HAL_DMA_Abort_IT>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d005      	beq.n	800519e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d016      	beq.n	80051d4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051aa:	4a0d      	ldr	r2, [pc, #52]	; (80051e0 <HAL_SPI_IRQHandler+0x1fc>)
 80051ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe f948 	bl	8003448 <HAL_DMA_Abort_IT>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80051ca:	e003      	b.n	80051d4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f809 	bl	80051e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80051d2:	e000      	b.n	80051d6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80051d4:	bf00      	nop
    return;
 80051d6:	bf00      	nop
  }
}
 80051d8:	3720      	adds	r7, #32
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	080051f9 	.word	0x080051f9

080051e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f7ff ffe6 	bl	80051e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005218:	bf00      	nop
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	4613      	mov	r3, r2
 800522e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005230:	f7fd ff58 	bl	80030e4 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	4413      	add	r3, r2
 800523e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005240:	f7fd ff50 	bl	80030e4 <HAL_GetTick>
 8005244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005246:	4b39      	ldr	r3, [pc, #228]	; (800532c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	015b      	lsls	r3, r3, #5
 800524c:	0d1b      	lsrs	r3, r3, #20
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	fb02 f303 	mul.w	r3, r2, r3
 8005254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005256:	e054      	b.n	8005302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525e:	d050      	beq.n	8005302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005260:	f7fd ff40 	bl	80030e4 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	429a      	cmp	r2, r3
 800526e:	d902      	bls.n	8005276 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d13d      	bne.n	80052f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800528e:	d111      	bne.n	80052b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005298:	d004      	beq.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a2:	d107      	bne.n	80052b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052bc:	d10f      	bne.n	80052de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e017      	b.n	8005322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	3b01      	subs	r3, #1
 8005300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4013      	ands	r3, r2
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	429a      	cmp	r2, r3
 8005310:	bf0c      	ite	eq
 8005312:	2301      	moveq	r3, #1
 8005314:	2300      	movne	r3, #0
 8005316:	b2db      	uxtb	r3, r3
 8005318:	461a      	mov	r2, r3
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	429a      	cmp	r2, r3
 800531e:	d19b      	bne.n	8005258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	2000002c 	.word	0x2000002c

08005330 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af02      	add	r7, sp, #8
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800533c:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <SPI_EndRxTxTransaction+0x7c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1b      	ldr	r2, [pc, #108]	; (80053b0 <SPI_EndRxTxTransaction+0x80>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	0d5b      	lsrs	r3, r3, #21
 8005348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800534c:	fb02 f303 	mul.w	r3, r2, r3
 8005350:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800535a:	d112      	bne.n	8005382 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2200      	movs	r2, #0
 8005364:	2180      	movs	r1, #128	; 0x80
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f7ff ff5a 	bl	8005220 <SPI_WaitFlagStateUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d016      	beq.n	80053a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005376:	f043 0220 	orr.w	r2, r3, #32
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e00f      	b.n	80053a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	3b01      	subs	r3, #1
 800538c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005398:	2b80      	cmp	r3, #128	; 0x80
 800539a:	d0f2      	beq.n	8005382 <SPI_EndRxTxTransaction+0x52>
 800539c:	e000      	b.n	80053a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800539e:	bf00      	nop
  }

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	2000002c 	.word	0x2000002c
 80053b0:	165e9f81 	.word	0x165e9f81

080053b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e0a7      	b.n	8005516 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a55      	ldr	r2, [pc, #340]	; (8005520 <HAL_TIM_Base_Init+0x16c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d027      	beq.n	8005420 <HAL_TIM_Base_Init+0x6c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d8:	d022      	beq.n	8005420 <HAL_TIM_Base_Init+0x6c>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a51      	ldr	r2, [pc, #324]	; (8005524 <HAL_TIM_Base_Init+0x170>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d01d      	beq.n	8005420 <HAL_TIM_Base_Init+0x6c>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a4f      	ldr	r2, [pc, #316]	; (8005528 <HAL_TIM_Base_Init+0x174>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d018      	beq.n	8005420 <HAL_TIM_Base_Init+0x6c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a4e      	ldr	r2, [pc, #312]	; (800552c <HAL_TIM_Base_Init+0x178>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <HAL_TIM_Base_Init+0x6c>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a4c      	ldr	r2, [pc, #304]	; (8005530 <HAL_TIM_Base_Init+0x17c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00e      	beq.n	8005420 <HAL_TIM_Base_Init+0x6c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a4b      	ldr	r2, [pc, #300]	; (8005534 <HAL_TIM_Base_Init+0x180>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d009      	beq.n	8005420 <HAL_TIM_Base_Init+0x6c>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a49      	ldr	r2, [pc, #292]	; (8005538 <HAL_TIM_Base_Init+0x184>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_TIM_Base_Init+0x6c>
 8005416:	f240 1113 	movw	r1, #275	; 0x113
 800541a:	4848      	ldr	r0, [pc, #288]	; (800553c <HAL_TIM_Base_Init+0x188>)
 800541c:	f7fc fbaf 	bl	8001b7e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d014      	beq.n	8005452 <HAL_TIM_Base_Init+0x9e>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b10      	cmp	r3, #16
 800542e:	d010      	beq.n	8005452 <HAL_TIM_Base_Init+0x9e>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	2b20      	cmp	r3, #32
 8005436:	d00c      	beq.n	8005452 <HAL_TIM_Base_Init+0x9e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b40      	cmp	r3, #64	; 0x40
 800543e:	d008      	beq.n	8005452 <HAL_TIM_Base_Init+0x9e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	2b60      	cmp	r3, #96	; 0x60
 8005446:	d004      	beq.n	8005452 <HAL_TIM_Base_Init+0x9e>
 8005448:	f44f 718a 	mov.w	r1, #276	; 0x114
 800544c:	483b      	ldr	r0, [pc, #236]	; (800553c <HAL_TIM_Base_Init+0x188>)
 800544e:	f7fc fb96 	bl	8001b7e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00e      	beq.n	8005478 <HAL_TIM_Base_Init+0xc4>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005462:	d009      	beq.n	8005478 <HAL_TIM_Base_Init+0xc4>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800546c:	d004      	beq.n	8005478 <HAL_TIM_Base_Init+0xc4>
 800546e:	f240 1115 	movw	r1, #277	; 0x115
 8005472:	4832      	ldr	r0, [pc, #200]	; (800553c <HAL_TIM_Base_Init+0x188>)
 8005474:	f7fc fb83 	bl	8001b7e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d008      	beq.n	8005492 <HAL_TIM_Base_Init+0xde>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d004      	beq.n	8005492 <HAL_TIM_Base_Init+0xde>
 8005488:	f44f 718b 	mov.w	r1, #278	; 0x116
 800548c:	482b      	ldr	r0, [pc, #172]	; (800553c <HAL_TIM_Base_Init+0x188>)
 800548e:	f7fc fb76 	bl	8001b7e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fc fdb8 	bl	800201c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4619      	mov	r1, r3
 80054be:	4610      	mov	r0, r2
 80054c0:	f000 fa00 	bl	80058c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40010000 	.word	0x40010000
 8005524:	40000400 	.word	0x40000400
 8005528:	40000800 	.word	0x40000800
 800552c:	40000c00 	.word	0x40000c00
 8005530:	40014000 	.word	0x40014000
 8005534:	40014400 	.word	0x40014400
 8005538:	40014800 	.word	0x40014800
 800553c:	0800bc7c 	.word	0x0800bc7c

08005540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a3d      	ldr	r2, [pc, #244]	; (8005644 <HAL_TIM_Base_Start_IT+0x104>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d027      	beq.n	80055a2 <HAL_TIM_Base_Start_IT+0x62>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555a:	d022      	beq.n	80055a2 <HAL_TIM_Base_Start_IT+0x62>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a39      	ldr	r2, [pc, #228]	; (8005648 <HAL_TIM_Base_Start_IT+0x108>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d01d      	beq.n	80055a2 <HAL_TIM_Base_Start_IT+0x62>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a38      	ldr	r2, [pc, #224]	; (800564c <HAL_TIM_Base_Start_IT+0x10c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d018      	beq.n	80055a2 <HAL_TIM_Base_Start_IT+0x62>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a36      	ldr	r2, [pc, #216]	; (8005650 <HAL_TIM_Base_Start_IT+0x110>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d013      	beq.n	80055a2 <HAL_TIM_Base_Start_IT+0x62>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a35      	ldr	r2, [pc, #212]	; (8005654 <HAL_TIM_Base_Start_IT+0x114>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00e      	beq.n	80055a2 <HAL_TIM_Base_Start_IT+0x62>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a33      	ldr	r2, [pc, #204]	; (8005658 <HAL_TIM_Base_Start_IT+0x118>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d009      	beq.n	80055a2 <HAL_TIM_Base_Start_IT+0x62>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a32      	ldr	r2, [pc, #200]	; (800565c <HAL_TIM_Base_Start_IT+0x11c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d004      	beq.n	80055a2 <HAL_TIM_Base_Start_IT+0x62>
 8005598:	f240 11cf 	movw	r1, #463	; 0x1cf
 800559c:	4830      	ldr	r0, [pc, #192]	; (8005660 <HAL_TIM_Base_Start_IT+0x120>)
 800559e:	f7fc faee 	bl	8001b7e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d001      	beq.n	80055b2 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e044      	b.n	800563c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2202      	movs	r2, #2
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0201 	orr.w	r2, r2, #1
 80055c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1d      	ldr	r2, [pc, #116]	; (8005644 <HAL_TIM_Base_Start_IT+0x104>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d018      	beq.n	8005606 <HAL_TIM_Base_Start_IT+0xc6>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055dc:	d013      	beq.n	8005606 <HAL_TIM_Base_Start_IT+0xc6>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a19      	ldr	r2, [pc, #100]	; (8005648 <HAL_TIM_Base_Start_IT+0x108>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00e      	beq.n	8005606 <HAL_TIM_Base_Start_IT+0xc6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a17      	ldr	r2, [pc, #92]	; (800564c <HAL_TIM_Base_Start_IT+0x10c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_TIM_Base_Start_IT+0xc6>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a16      	ldr	r2, [pc, #88]	; (8005650 <HAL_TIM_Base_Start_IT+0x110>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_TIM_Base_Start_IT+0xc6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a14      	ldr	r2, [pc, #80]	; (8005654 <HAL_TIM_Base_Start_IT+0x114>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d111      	bne.n	800562a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b06      	cmp	r3, #6
 8005616:	d010      	beq.n	800563a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005628:	e007      	b.n	800563a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0201 	orr.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40010000 	.word	0x40010000
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40000c00 	.word	0x40000c00
 8005654:	40014000 	.word	0x40014000
 8005658:	40014400 	.word	0x40014400
 800565c:	40014800 	.word	0x40014800
 8005660:	0800bc7c 	.word	0x0800bc7c

08005664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b02      	cmp	r3, #2
 8005678:	d122      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b02      	cmp	r3, #2
 8005686:	d11b      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0202 	mvn.w	r2, #2
 8005690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f8ee 	bl	8005888 <HAL_TIM_IC_CaptureCallback>
 80056ac:	e005      	b.n	80056ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f8e0 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f8f1 	bl	800589c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0304 	and.w	r3, r3, #4
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d122      	bne.n	8005714 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d11b      	bne.n	8005714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0204 	mvn.w	r2, #4
 80056e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2202      	movs	r2, #2
 80056ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f8c4 	bl	8005888 <HAL_TIM_IC_CaptureCallback>
 8005700:	e005      	b.n	800570e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f8b6 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f8c7 	bl	800589c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b08      	cmp	r3, #8
 8005720:	d122      	bne.n	8005768 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0308 	and.w	r3, r3, #8
 800572c:	2b08      	cmp	r3, #8
 800572e:	d11b      	bne.n	8005768 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0208 	mvn.w	r2, #8
 8005738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2204      	movs	r2, #4
 800573e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f89a 	bl	8005888 <HAL_TIM_IC_CaptureCallback>
 8005754:	e005      	b.n	8005762 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f88c 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f89d 	bl	800589c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b10      	cmp	r3, #16
 8005774:	d122      	bne.n	80057bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0310 	and.w	r3, r3, #16
 8005780:	2b10      	cmp	r3, #16
 8005782:	d11b      	bne.n	80057bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0210 	mvn.w	r2, #16
 800578c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2208      	movs	r2, #8
 8005792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f870 	bl	8005888 <HAL_TIM_IC_CaptureCallback>
 80057a8:	e005      	b.n	80057b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f862 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f873 	bl	800589c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d10e      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d107      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0201 	mvn.w	r2, #1
 80057e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fc f9b4 	bl	8001b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f2:	2b80      	cmp	r3, #128	; 0x80
 80057f4:	d10e      	bne.n	8005814 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005800:	2b80      	cmp	r3, #128	; 0x80
 8005802:	d107      	bne.n	8005814 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800580c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f8e2 	bl	80059d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581e:	2b40      	cmp	r3, #64	; 0x40
 8005820:	d10e      	bne.n	8005840 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d107      	bne.n	8005840 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f838 	bl	80058b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b20      	cmp	r3, #32
 800584c:	d10e      	bne.n	800586c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 0320 	and.w	r3, r3, #32
 8005858:	2b20      	cmp	r3, #32
 800585a:	d107      	bne.n	800586c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0220 	mvn.w	r2, #32
 8005864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f8ac 	bl	80059c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800586c:	bf00      	nop
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a34      	ldr	r2, [pc, #208]	; (80059a8 <TIM_Base_SetConfig+0xe4>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d00f      	beq.n	80058fc <TIM_Base_SetConfig+0x38>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e2:	d00b      	beq.n	80058fc <TIM_Base_SetConfig+0x38>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a31      	ldr	r2, [pc, #196]	; (80059ac <TIM_Base_SetConfig+0xe8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d007      	beq.n	80058fc <TIM_Base_SetConfig+0x38>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a30      	ldr	r2, [pc, #192]	; (80059b0 <TIM_Base_SetConfig+0xec>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_Base_SetConfig+0x38>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a2f      	ldr	r2, [pc, #188]	; (80059b4 <TIM_Base_SetConfig+0xf0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d108      	bne.n	800590e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a25      	ldr	r2, [pc, #148]	; (80059a8 <TIM_Base_SetConfig+0xe4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d01b      	beq.n	800594e <TIM_Base_SetConfig+0x8a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591c:	d017      	beq.n	800594e <TIM_Base_SetConfig+0x8a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a22      	ldr	r2, [pc, #136]	; (80059ac <TIM_Base_SetConfig+0xe8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d013      	beq.n	800594e <TIM_Base_SetConfig+0x8a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a21      	ldr	r2, [pc, #132]	; (80059b0 <TIM_Base_SetConfig+0xec>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00f      	beq.n	800594e <TIM_Base_SetConfig+0x8a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a20      	ldr	r2, [pc, #128]	; (80059b4 <TIM_Base_SetConfig+0xf0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00b      	beq.n	800594e <TIM_Base_SetConfig+0x8a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <TIM_Base_SetConfig+0xf4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d007      	beq.n	800594e <TIM_Base_SetConfig+0x8a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <TIM_Base_SetConfig+0xf8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d003      	beq.n	800594e <TIM_Base_SetConfig+0x8a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <TIM_Base_SetConfig+0xfc>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d108      	bne.n	8005960 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a08      	ldr	r2, [pc, #32]	; (80059a8 <TIM_Base_SetConfig+0xe4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d103      	bne.n	8005994 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	615a      	str	r2, [r3, #20]
}
 800599a:	bf00      	nop
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40010000 	.word	0x40010000
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800
 80059b4:	40000c00 	.word	0x40000c00
 80059b8:	40014000 	.word	0x40014000
 80059bc:	40014400 	.word	0x40014400
 80059c0:	40014800 	.word	0x40014800

080059c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e0a0      	b.n	8005b40 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d02c      	beq.n	8005a60 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a4f      	ldr	r2, [pc, #316]	; (8005b48 <HAL_UART_Init+0x15c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00e      	beq.n	8005a2e <HAL_UART_Init+0x42>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a4d      	ldr	r2, [pc, #308]	; (8005b4c <HAL_UART_Init+0x160>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d009      	beq.n	8005a2e <HAL_UART_Init+0x42>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a4c      	ldr	r2, [pc, #304]	; (8005b50 <HAL_UART_Init+0x164>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d004      	beq.n	8005a2e <HAL_UART_Init+0x42>
 8005a24:	f240 1173 	movw	r1, #371	; 0x173
 8005a28:	484a      	ldr	r0, [pc, #296]	; (8005b54 <HAL_UART_Init+0x168>)
 8005a2a:	f7fc f8a8 	bl	8001b7e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d028      	beq.n	8005a88 <HAL_UART_Init+0x9c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a3e:	d023      	beq.n	8005a88 <HAL_UART_Init+0x9c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a48:	d01e      	beq.n	8005a88 <HAL_UART_Init+0x9c>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a52:	d019      	beq.n	8005a88 <HAL_UART_Init+0x9c>
 8005a54:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8005a58:	483e      	ldr	r0, [pc, #248]	; (8005b54 <HAL_UART_Init+0x168>)
 8005a5a:	f7fc f890 	bl	8001b7e <assert_failed>
 8005a5e:	e013      	b.n	8005a88 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a38      	ldr	r2, [pc, #224]	; (8005b48 <HAL_UART_Init+0x15c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00e      	beq.n	8005a88 <HAL_UART_Init+0x9c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a37      	ldr	r2, [pc, #220]	; (8005b4c <HAL_UART_Init+0x160>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d009      	beq.n	8005a88 <HAL_UART_Init+0x9c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a35      	ldr	r2, [pc, #212]	; (8005b50 <HAL_UART_Init+0x164>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d004      	beq.n	8005a88 <HAL_UART_Init+0x9c>
 8005a7e:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8005a82:	4834      	ldr	r0, [pc, #208]	; (8005b54 <HAL_UART_Init+0x168>)
 8005a84:	f7fc f87b 	bl	8001b7e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d009      	beq.n	8005aa4 <HAL_UART_Init+0xb8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a98:	d004      	beq.n	8005aa4 <HAL_UART_Init+0xb8>
 8005a9a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8005a9e:	482d      	ldr	r0, [pc, #180]	; (8005b54 <HAL_UART_Init+0x168>)
 8005aa0:	f7fc f86d 	bl	8001b7e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d009      	beq.n	8005ac0 <HAL_UART_Init+0xd4>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab4:	d004      	beq.n	8005ac0 <HAL_UART_Init+0xd4>
 8005ab6:	f240 117b 	movw	r1, #379	; 0x17b
 8005aba:	4826      	ldr	r0, [pc, #152]	; (8005b54 <HAL_UART_Init+0x168>)
 8005abc:	f7fc f85f 	bl	8001b7e <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d106      	bne.n	8005ada <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7fc faf3 	bl	80020c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2224      	movs	r2, #36	; 0x24
 8005ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005af0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fd82 	bl	80065fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b06:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695a      	ldr	r2, [r3, #20]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b16:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b26:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	40011000 	.word	0x40011000
 8005b4c:	40004400 	.word	0x40004400
 8005b50:	40011400 	.word	0x40011400
 8005b54:	0800bcf0 	.word	0x0800bcf0

08005b58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08a      	sub	sp, #40	; 0x28
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	4613      	mov	r3, r2
 8005b66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	d17c      	bne.n	8005c72 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <HAL_UART_Transmit+0x2c>
 8005b7e:	88fb      	ldrh	r3, [r7, #6]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e075      	b.n	8005c74 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_UART_Transmit+0x3e>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e06e      	b.n	8005c74 <HAL_UART_Transmit+0x11c>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2221      	movs	r2, #33	; 0x21
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bac:	f7fd fa9a 	bl	80030e4 <HAL_GetTick>
 8005bb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc6:	d108      	bne.n	8005bda <HAL_UART_Transmit+0x82>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d104      	bne.n	8005bda <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	e003      	b.n	8005be2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005bea:	e02a      	b.n	8005c42 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	2180      	movs	r1, #128	; 0x80
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 faf8 	bl	80061ec <UART_WaitOnFlagUntilTimeout>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e036      	b.n	8005c74 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10b      	bne.n	8005c24 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	461a      	mov	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c1a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	3302      	adds	r3, #2
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	e007      	b.n	8005c34 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	781a      	ldrb	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	3301      	adds	r3, #1
 8005c32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1cf      	bne.n	8005bec <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2200      	movs	r2, #0
 8005c54:	2140      	movs	r1, #64	; 0x40
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 fac8 	bl	80061ec <UART_WaitOnFlagUntilTimeout>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e006      	b.n	8005c74 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e000      	b.n	8005c74 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c72:	2302      	movs	r3, #2
  }
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3720      	adds	r7, #32
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b0ba      	sub	sp, #232	; 0xe8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10f      	bne.n	8005ce2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x66>
 8005cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fbd3 	bl	8006486 <UART_Receive_IT>
      return;
 8005ce0:	e256      	b.n	8006190 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 80de 	beq.w	8005ea8 <HAL_UART_IRQHandler+0x22c>
 8005cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d106      	bne.n	8005d06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 80d1 	beq.w	8005ea8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00b      	beq.n	8005d2a <HAL_UART_IRQHandler+0xae>
 8005d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d005      	beq.n	8005d2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f043 0201 	orr.w	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00b      	beq.n	8005d4e <HAL_UART_IRQHandler+0xd2>
 8005d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d005      	beq.n	8005d4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	f043 0202 	orr.w	r2, r3, #2
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00b      	beq.n	8005d72 <HAL_UART_IRQHandler+0xf6>
 8005d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	f043 0204 	orr.w	r2, r3, #4
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d011      	beq.n	8005da2 <HAL_UART_IRQHandler+0x126>
 8005d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d105      	bne.n	8005d96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f043 0208 	orr.w	r2, r3, #8
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 81ed 	beq.w	8006186 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d008      	beq.n	8005dca <HAL_UART_IRQHandler+0x14e>
 8005db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fb5e 	bl	8006486 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b40      	cmp	r3, #64	; 0x40
 8005dd6:	bf0c      	ite	eq
 8005dd8:	2301      	moveq	r3, #1
 8005dda:	2300      	movne	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d103      	bne.n	8005df6 <HAL_UART_IRQHandler+0x17a>
 8005dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d04f      	beq.n	8005e96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fa66 	bl	80062c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e06:	2b40      	cmp	r3, #64	; 0x40
 8005e08:	d141      	bne.n	8005e8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3314      	adds	r3, #20
 8005e10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3314      	adds	r3, #20
 8005e32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1d9      	bne.n	8005e0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d013      	beq.n	8005e86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	4a7d      	ldr	r2, [pc, #500]	; (8006058 <HAL_UART_IRQHandler+0x3dc>)
 8005e64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fd faec 	bl	8003448 <HAL_DMA_Abort_IT>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d016      	beq.n	8005ea4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e80:	4610      	mov	r0, r2
 8005e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e84:	e00e      	b.n	8005ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f99a 	bl	80061c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8c:	e00a      	b.n	8005ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f996 	bl	80061c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e94:	e006      	b.n	8005ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f992 	bl	80061c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ea2:	e170      	b.n	8006186 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea4:	bf00      	nop
    return;
 8005ea6:	e16e      	b.n	8006186 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	f040 814a 	bne.w	8006146 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb6:	f003 0310 	and.w	r3, r3, #16
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 8143 	beq.w	8006146 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 813c 	beq.w	8006146 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60bb      	str	r3, [r7, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60bb      	str	r3, [r7, #8]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eee:	2b40      	cmp	r3, #64	; 0x40
 8005ef0:	f040 80b4 	bne.w	800605c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 8140 	beq.w	800618a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f12:	429a      	cmp	r2, r3
 8005f14:	f080 8139 	bcs.w	800618a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f2a:	f000 8088 	beq.w	800603e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	330c      	adds	r3, #12
 8005f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	330c      	adds	r3, #12
 8005f56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1d9      	bne.n	8005f2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3314      	adds	r3, #20
 8005f80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f8c:	f023 0301 	bic.w	r3, r3, #1
 8005f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3314      	adds	r3, #20
 8005f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fa2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e1      	bne.n	8005f7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3314      	adds	r3, #20
 8005fbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3314      	adds	r3, #20
 8005fd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005fda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005fdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fe0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e3      	bne.n	8005fb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	330c      	adds	r3, #12
 8006002:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800600c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800600e:	f023 0310 	bic.w	r3, r3, #16
 8006012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	330c      	adds	r3, #12
 800601c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006020:	65ba      	str	r2, [r7, #88]	; 0x58
 8006022:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800602e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e3      	bne.n	8005ffc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	4618      	mov	r0, r3
 800603a:	f7fd f995 	bl	8003368 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006046:	b29b      	uxth	r3, r3
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	b29b      	uxth	r3, r3
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f8c0 	bl	80061d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006054:	e099      	b.n	800618a <HAL_UART_IRQHandler+0x50e>
 8006056:	bf00      	nop
 8006058:	0800638f 	.word	0x0800638f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006064:	b29b      	uxth	r3, r3
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 808b 	beq.w	800618e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8086 	beq.w	800618e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	330c      	adds	r3, #12
 8006088:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	330c      	adds	r3, #12
 80060a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80060a6:	647a      	str	r2, [r7, #68]	; 0x44
 80060a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e3      	bne.n	8006082 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3314      	adds	r3, #20
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	623b      	str	r3, [r7, #32]
   return(result);
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	f023 0301 	bic.w	r3, r3, #1
 80060d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3314      	adds	r3, #20
 80060da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060de:	633a      	str	r2, [r7, #48]	; 0x30
 80060e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e3      	bne.n	80060ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	330c      	adds	r3, #12
 8006106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	e853 3f00 	ldrex	r3, [r3]
 800610e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0310 	bic.w	r3, r3, #16
 8006116:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	330c      	adds	r3, #12
 8006120:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006124:	61fa      	str	r2, [r7, #28]
 8006126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	69b9      	ldr	r1, [r7, #24]
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	617b      	str	r3, [r7, #20]
   return(result);
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e3      	bne.n	8006100 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f848 	bl	80061d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006144:	e023      	b.n	800618e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <HAL_UART_IRQHandler+0x4ea>
 8006152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f929 	bl	80063b6 <UART_Transmit_IT>
    return;
 8006164:	e014      	b.n	8006190 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00e      	beq.n	8006190 <HAL_UART_IRQHandler+0x514>
 8006172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d008      	beq.n	8006190 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f969 	bl	8006456 <UART_EndTransmit_IT>
    return;
 8006184:	e004      	b.n	8006190 <HAL_UART_IRQHandler+0x514>
    return;
 8006186:	bf00      	nop
 8006188:	e002      	b.n	8006190 <HAL_UART_IRQHandler+0x514>
      return;
 800618a:	bf00      	nop
 800618c:	e000      	b.n	8006190 <HAL_UART_IRQHandler+0x514>
      return;
 800618e:	bf00      	nop
  }
}
 8006190:	37e8      	adds	r7, #232	; 0xe8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop

08006198 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b090      	sub	sp, #64	; 0x40
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	4613      	mov	r3, r2
 80061fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061fc:	e050      	b.n	80062a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d04c      	beq.n	80062a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <UART_WaitOnFlagUntilTimeout+0x30>
 800620c:	f7fc ff6a 	bl	80030e4 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006218:	429a      	cmp	r2, r3
 800621a:	d241      	bcs.n	80062a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800623c:	637a      	str	r2, [r7, #52]	; 0x34
 800623e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e5      	bne.n	800621c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3314      	adds	r3, #20
 8006256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	613b      	str	r3, [r7, #16]
   return(result);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f023 0301 	bic.w	r3, r3, #1
 8006266:	63bb      	str	r3, [r7, #56]	; 0x38
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3314      	adds	r3, #20
 800626e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006270:	623a      	str	r2, [r7, #32]
 8006272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	69f9      	ldr	r1, [r7, #28]
 8006276:	6a3a      	ldr	r2, [r7, #32]
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	61bb      	str	r3, [r7, #24]
   return(result);
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e5      	bne.n	8006250 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2220      	movs	r2, #32
 8006290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e00f      	b.n	80062c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	4013      	ands	r3, r2
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	bf0c      	ite	eq
 80062b0:	2301      	moveq	r3, #1
 80062b2:	2300      	movne	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	79fb      	ldrb	r3, [r7, #7]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d09f      	beq.n	80061fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3740      	adds	r7, #64	; 0x40
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b095      	sub	sp, #84	; 0x54
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	330c      	adds	r3, #12
 80062d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	330c      	adds	r3, #12
 80062ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062f0:	643a      	str	r2, [r7, #64]	; 0x40
 80062f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e5      	bne.n	80062d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3314      	adds	r3, #20
 800630a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	61fb      	str	r3, [r7, #28]
   return(result);
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	f023 0301 	bic.w	r3, r3, #1
 800631a:	64bb      	str	r3, [r7, #72]	; 0x48
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3314      	adds	r3, #20
 8006322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006324:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800632a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e5      	bne.n	8006304 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633c:	2b01      	cmp	r3, #1
 800633e:	d119      	bne.n	8006374 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	330c      	adds	r3, #12
 8006346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f023 0310 	bic.w	r3, r3, #16
 8006356:	647b      	str	r3, [r7, #68]	; 0x44
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	330c      	adds	r3, #12
 800635e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006360:	61ba      	str	r2, [r7, #24]
 8006362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	6979      	ldr	r1, [r7, #20]
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	613b      	str	r3, [r7, #16]
   return(result);
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e5      	bne.n	8006340 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006382:	bf00      	nop
 8006384:	3754      	adds	r7, #84	; 0x54
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f7ff ff09 	bl	80061c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b085      	sub	sp, #20
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b21      	cmp	r3, #33	; 0x21
 80063c8:	d13e      	bne.n	8006448 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d2:	d114      	bne.n	80063fe <UART_Transmit_IT+0x48>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d110      	bne.n	80063fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	1c9a      	adds	r2, r3, #2
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	621a      	str	r2, [r3, #32]
 80063fc:	e008      	b.n	8006410 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	1c59      	adds	r1, r3, #1
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6211      	str	r1, [r2, #32]
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29b      	uxth	r3, r3
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	4619      	mov	r1, r3
 800641e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10f      	bne.n	8006444 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006432:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006442:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006444:	2300      	movs	r3, #0
 8006446:	e000      	b.n	800644a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006448:	2302      	movs	r3, #2
  }
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800646c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2220      	movs	r2, #32
 8006472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff fe8e 	bl	8006198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b08c      	sub	sp, #48	; 0x30
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b22      	cmp	r3, #34	; 0x22
 8006498:	f040 80ab 	bne.w	80065f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a4:	d117      	bne.n	80064d6 <UART_Receive_IT+0x50>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d113      	bne.n	80064d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ce:	1c9a      	adds	r2, r3, #2
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	629a      	str	r2, [r3, #40]	; 0x28
 80064d4:	e026      	b.n	8006524 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80064dc:	2300      	movs	r3, #0
 80064de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e8:	d007      	beq.n	80064fa <UART_Receive_IT+0x74>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <UART_Receive_IT+0x82>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	b2da      	uxtb	r2, r3
 8006502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	e008      	b.n	800651a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006514:	b2da      	uxtb	r2, r3
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29b      	uxth	r3, r3
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	4619      	mov	r1, r3
 8006532:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006534:	2b00      	cmp	r3, #0
 8006536:	d15a      	bne.n	80065ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0220 	bic.w	r2, r2, #32
 8006546:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006556:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695a      	ldr	r2, [r3, #20]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006574:	2b01      	cmp	r3, #1
 8006576:	d135      	bne.n	80065e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	330c      	adds	r3, #12
 8006584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	613b      	str	r3, [r7, #16]
   return(result);
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f023 0310 	bic.w	r3, r3, #16
 8006594:	627b      	str	r3, [r7, #36]	; 0x24
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659e:	623a      	str	r2, [r7, #32]
 80065a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	69f9      	ldr	r1, [r7, #28]
 80065a4:	6a3a      	ldr	r2, [r7, #32]
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e5      	bne.n	800657e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	2b10      	cmp	r3, #16
 80065be:	d10a      	bne.n	80065d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff fdf9 	bl	80061d4 <HAL_UARTEx_RxEventCallback>
 80065e2:	e002      	b.n	80065ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff fde1 	bl	80061ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	e002      	b.n	80065f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	e000      	b.n	80065f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80065f2:	2302      	movs	r3, #2
  }
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3730      	adds	r7, #48	; 0x30
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006600:	b0c0      	sub	sp, #256	; 0x100
 8006602:	af00      	add	r7, sp, #0
 8006604:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	4bcf      	ldr	r3, [pc, #828]	; (800694c <UART_SetConfig+0x350>)
 8006610:	429a      	cmp	r2, r3
 8006612:	d904      	bls.n	800661e <UART_SetConfig+0x22>
 8006614:	f640 6161 	movw	r1, #3681	; 0xe61
 8006618:	48cd      	ldr	r0, [pc, #820]	; (8006950 <UART_SetConfig+0x354>)
 800661a:	f7fb fab0 	bl	8001b7e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800661e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00a      	beq.n	800663e <UART_SetConfig+0x42>
 8006628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006632:	d004      	beq.n	800663e <UART_SetConfig+0x42>
 8006634:	f640 6162 	movw	r1, #3682	; 0xe62
 8006638:	48c5      	ldr	r0, [pc, #788]	; (8006950 <UART_SetConfig+0x354>)
 800663a:	f7fb faa0 	bl	8001b7e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800663e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d010      	beq.n	800666a <UART_SetConfig+0x6e>
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006652:	d00a      	beq.n	800666a <UART_SetConfig+0x6e>
 8006654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800665e:	d004      	beq.n	800666a <UART_SetConfig+0x6e>
 8006660:	f640 6163 	movw	r1, #3683	; 0xe63
 8006664:	48ba      	ldr	r0, [pc, #744]	; (8006950 <UART_SetConfig+0x354>)
 8006666:	f7fb fa8a 	bl	8001b7e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800666a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666e:	695a      	ldr	r2, [r3, #20]
 8006670:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8006674:	4013      	ands	r3, r2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d104      	bne.n	8006684 <UART_SetConfig+0x88>
 800667a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <UART_SetConfig+0x92>
 8006684:	f640 6164 	movw	r1, #3684	; 0xe64
 8006688:	48b1      	ldr	r0, [pc, #708]	; (8006950 <UART_SetConfig+0x354>)
 800668a:	f7fb fa78 	bl	8001b7e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800668e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800669a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669e:	68d9      	ldr	r1, [r3, #12]
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	ea40 0301 	orr.w	r3, r0, r1
 80066aa:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	431a      	orrs	r2, r3
 80066ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	431a      	orrs	r2, r3
 80066c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066da:	f021 010c 	bic.w	r1, r1, #12
 80066de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066e8:	430b      	orrs	r3, r1
 80066ea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fc:	6999      	ldr	r1, [r3, #24]
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	ea40 0301 	orr.w	r3, r0, r1
 8006708:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800670a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4b90      	ldr	r3, [pc, #576]	; (8006954 <UART_SetConfig+0x358>)
 8006712:	429a      	cmp	r2, r3
 8006714:	d005      	beq.n	8006722 <UART_SetConfig+0x126>
 8006716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	4b8e      	ldr	r3, [pc, #568]	; (8006958 <UART_SetConfig+0x35c>)
 800671e:	429a      	cmp	r2, r3
 8006720:	d104      	bne.n	800672c <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006722:	f7fe f939 	bl	8004998 <HAL_RCC_GetPCLK2Freq>
 8006726:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800672a:	e003      	b.n	8006734 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800672c:	f7fe f920 	bl	8004970 <HAL_RCC_GetPCLK1Freq>
 8006730:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800673e:	f040 810f 	bne.w	8006960 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006746:	2200      	movs	r2, #0
 8006748:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800674c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006750:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006754:	4622      	mov	r2, r4
 8006756:	462b      	mov	r3, r5
 8006758:	1891      	adds	r1, r2, r2
 800675a:	65b9      	str	r1, [r7, #88]	; 0x58
 800675c:	415b      	adcs	r3, r3
 800675e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006760:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006764:	4621      	mov	r1, r4
 8006766:	eb12 0801 	adds.w	r8, r2, r1
 800676a:	4629      	mov	r1, r5
 800676c:	eb43 0901 	adc.w	r9, r3, r1
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800677c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006780:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006784:	4690      	mov	r8, r2
 8006786:	4699      	mov	r9, r3
 8006788:	4623      	mov	r3, r4
 800678a:	eb18 0303 	adds.w	r3, r8, r3
 800678e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006792:	462b      	mov	r3, r5
 8006794:	eb49 0303 	adc.w	r3, r9, r3
 8006798:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800679c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067a8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067ac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067b0:	460b      	mov	r3, r1
 80067b2:	18db      	adds	r3, r3, r3
 80067b4:	653b      	str	r3, [r7, #80]	; 0x50
 80067b6:	4613      	mov	r3, r2
 80067b8:	eb42 0303 	adc.w	r3, r2, r3
 80067bc:	657b      	str	r3, [r7, #84]	; 0x54
 80067be:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067c2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067c6:	f7fa fa17 	bl	8000bf8 <__aeabi_uldivmod>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	4b63      	ldr	r3, [pc, #396]	; (800695c <UART_SetConfig+0x360>)
 80067d0:	fba3 2302 	umull	r2, r3, r3, r2
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	011c      	lsls	r4, r3, #4
 80067d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067dc:	2200      	movs	r2, #0
 80067de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067e2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067e6:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067ea:	4642      	mov	r2, r8
 80067ec:	464b      	mov	r3, r9
 80067ee:	1891      	adds	r1, r2, r2
 80067f0:	64b9      	str	r1, [r7, #72]	; 0x48
 80067f2:	415b      	adcs	r3, r3
 80067f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067fa:	4641      	mov	r1, r8
 80067fc:	eb12 0a01 	adds.w	sl, r2, r1
 8006800:	4649      	mov	r1, r9
 8006802:	eb43 0b01 	adc.w	fp, r3, r1
 8006806:	f04f 0200 	mov.w	r2, #0
 800680a:	f04f 0300 	mov.w	r3, #0
 800680e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006812:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006816:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800681a:	4692      	mov	sl, r2
 800681c:	469b      	mov	fp, r3
 800681e:	4643      	mov	r3, r8
 8006820:	eb1a 0303 	adds.w	r3, sl, r3
 8006824:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006828:	464b      	mov	r3, r9
 800682a:	eb4b 0303 	adc.w	r3, fp, r3
 800682e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800683e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006842:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006846:	460b      	mov	r3, r1
 8006848:	18db      	adds	r3, r3, r3
 800684a:	643b      	str	r3, [r7, #64]	; 0x40
 800684c:	4613      	mov	r3, r2
 800684e:	eb42 0303 	adc.w	r3, r2, r3
 8006852:	647b      	str	r3, [r7, #68]	; 0x44
 8006854:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006858:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800685c:	f7fa f9cc 	bl	8000bf8 <__aeabi_uldivmod>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4611      	mov	r1, r2
 8006866:	4b3d      	ldr	r3, [pc, #244]	; (800695c <UART_SetConfig+0x360>)
 8006868:	fba3 2301 	umull	r2, r3, r3, r1
 800686c:	095b      	lsrs	r3, r3, #5
 800686e:	2264      	movs	r2, #100	; 0x64
 8006870:	fb02 f303 	mul.w	r3, r2, r3
 8006874:	1acb      	subs	r3, r1, r3
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800687c:	4b37      	ldr	r3, [pc, #220]	; (800695c <UART_SetConfig+0x360>)
 800687e:	fba3 2302 	umull	r2, r3, r3, r2
 8006882:	095b      	lsrs	r3, r3, #5
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800688a:	441c      	add	r4, r3
 800688c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006890:	2200      	movs	r2, #0
 8006892:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006896:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800689a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800689e:	4642      	mov	r2, r8
 80068a0:	464b      	mov	r3, r9
 80068a2:	1891      	adds	r1, r2, r2
 80068a4:	63b9      	str	r1, [r7, #56]	; 0x38
 80068a6:	415b      	adcs	r3, r3
 80068a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068ae:	4641      	mov	r1, r8
 80068b0:	1851      	adds	r1, r2, r1
 80068b2:	6339      	str	r1, [r7, #48]	; 0x30
 80068b4:	4649      	mov	r1, r9
 80068b6:	414b      	adcs	r3, r1
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ba:	f04f 0200 	mov.w	r2, #0
 80068be:	f04f 0300 	mov.w	r3, #0
 80068c2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068c6:	4659      	mov	r1, fp
 80068c8:	00cb      	lsls	r3, r1, #3
 80068ca:	4651      	mov	r1, sl
 80068cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068d0:	4651      	mov	r1, sl
 80068d2:	00ca      	lsls	r2, r1, #3
 80068d4:	4610      	mov	r0, r2
 80068d6:	4619      	mov	r1, r3
 80068d8:	4603      	mov	r3, r0
 80068da:	4642      	mov	r2, r8
 80068dc:	189b      	adds	r3, r3, r2
 80068de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068e2:	464b      	mov	r3, r9
 80068e4:	460a      	mov	r2, r1
 80068e6:	eb42 0303 	adc.w	r3, r2, r3
 80068ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068fa:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068fe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006902:	460b      	mov	r3, r1
 8006904:	18db      	adds	r3, r3, r3
 8006906:	62bb      	str	r3, [r7, #40]	; 0x28
 8006908:	4613      	mov	r3, r2
 800690a:	eb42 0303 	adc.w	r3, r2, r3
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006910:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006914:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006918:	f7fa f96e 	bl	8000bf8 <__aeabi_uldivmod>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	4b0e      	ldr	r3, [pc, #56]	; (800695c <UART_SetConfig+0x360>)
 8006922:	fba3 1302 	umull	r1, r3, r3, r2
 8006926:	095b      	lsrs	r3, r3, #5
 8006928:	2164      	movs	r1, #100	; 0x64
 800692a:	fb01 f303 	mul.w	r3, r1, r3
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	3332      	adds	r3, #50	; 0x32
 8006934:	4a09      	ldr	r2, [pc, #36]	; (800695c <UART_SetConfig+0x360>)
 8006936:	fba2 2303 	umull	r2, r3, r2, r3
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	f003 0207 	and.w	r2, r3, #7
 8006940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4422      	add	r2, r4
 8006948:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800694a:	e108      	b.n	8006b5e <UART_SetConfig+0x562>
 800694c:	00a037a0 	.word	0x00a037a0
 8006950:	0800bcf0 	.word	0x0800bcf0
 8006954:	40011000 	.word	0x40011000
 8006958:	40011400 	.word	0x40011400
 800695c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006964:	2200      	movs	r2, #0
 8006966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800696a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800696e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006972:	4642      	mov	r2, r8
 8006974:	464b      	mov	r3, r9
 8006976:	1891      	adds	r1, r2, r2
 8006978:	6239      	str	r1, [r7, #32]
 800697a:	415b      	adcs	r3, r3
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
 800697e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006982:	4641      	mov	r1, r8
 8006984:	1854      	adds	r4, r2, r1
 8006986:	4649      	mov	r1, r9
 8006988:	eb43 0501 	adc.w	r5, r3, r1
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	00eb      	lsls	r3, r5, #3
 8006996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800699a:	00e2      	lsls	r2, r4, #3
 800699c:	4614      	mov	r4, r2
 800699e:	461d      	mov	r5, r3
 80069a0:	4643      	mov	r3, r8
 80069a2:	18e3      	adds	r3, r4, r3
 80069a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069a8:	464b      	mov	r3, r9
 80069aa:	eb45 0303 	adc.w	r3, r5, r3
 80069ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069c2:	f04f 0200 	mov.w	r2, #0
 80069c6:	f04f 0300 	mov.w	r3, #0
 80069ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069ce:	4629      	mov	r1, r5
 80069d0:	008b      	lsls	r3, r1, #2
 80069d2:	4621      	mov	r1, r4
 80069d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069d8:	4621      	mov	r1, r4
 80069da:	008a      	lsls	r2, r1, #2
 80069dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069e0:	f7fa f90a 	bl	8000bf8 <__aeabi_uldivmod>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4b60      	ldr	r3, [pc, #384]	; (8006b6c <UART_SetConfig+0x570>)
 80069ea:	fba3 2302 	umull	r2, r3, r3, r2
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	011c      	lsls	r4, r3, #4
 80069f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a04:	4642      	mov	r2, r8
 8006a06:	464b      	mov	r3, r9
 8006a08:	1891      	adds	r1, r2, r2
 8006a0a:	61b9      	str	r1, [r7, #24]
 8006a0c:	415b      	adcs	r3, r3
 8006a0e:	61fb      	str	r3, [r7, #28]
 8006a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a14:	4641      	mov	r1, r8
 8006a16:	1851      	adds	r1, r2, r1
 8006a18:	6139      	str	r1, [r7, #16]
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	414b      	adcs	r3, r1
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	00cb      	lsls	r3, r1, #3
 8006a30:	4651      	mov	r1, sl
 8006a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a36:	4651      	mov	r1, sl
 8006a38:	00ca      	lsls	r2, r1, #3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	4642      	mov	r2, r8
 8006a42:	189b      	adds	r3, r3, r2
 8006a44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a48:	464b      	mov	r3, r9
 8006a4a:	460a      	mov	r2, r1
 8006a4c:	eb42 0303 	adc.w	r3, r2, r3
 8006a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a60:	f04f 0200 	mov.w	r2, #0
 8006a64:	f04f 0300 	mov.w	r3, #0
 8006a68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a6c:	4649      	mov	r1, r9
 8006a6e:	008b      	lsls	r3, r1, #2
 8006a70:	4641      	mov	r1, r8
 8006a72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a76:	4641      	mov	r1, r8
 8006a78:	008a      	lsls	r2, r1, #2
 8006a7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a7e:	f7fa f8bb 	bl	8000bf8 <__aeabi_uldivmod>
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	4b39      	ldr	r3, [pc, #228]	; (8006b6c <UART_SetConfig+0x570>)
 8006a88:	fba3 1302 	umull	r1, r3, r3, r2
 8006a8c:	095b      	lsrs	r3, r3, #5
 8006a8e:	2164      	movs	r1, #100	; 0x64
 8006a90:	fb01 f303 	mul.w	r3, r1, r3
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	3332      	adds	r3, #50	; 0x32
 8006a9a:	4a34      	ldr	r2, [pc, #208]	; (8006b6c <UART_SetConfig+0x570>)
 8006a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa0:	095b      	lsrs	r3, r3, #5
 8006aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aa6:	441c      	add	r4, r3
 8006aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aac:	2200      	movs	r2, #0
 8006aae:	673b      	str	r3, [r7, #112]	; 0x70
 8006ab0:	677a      	str	r2, [r7, #116]	; 0x74
 8006ab2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ab6:	4642      	mov	r2, r8
 8006ab8:	464b      	mov	r3, r9
 8006aba:	1891      	adds	r1, r2, r2
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	415b      	adcs	r3, r3
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ac6:	4641      	mov	r1, r8
 8006ac8:	1851      	adds	r1, r2, r1
 8006aca:	6039      	str	r1, [r7, #0]
 8006acc:	4649      	mov	r1, r9
 8006ace:	414b      	adcs	r3, r1
 8006ad0:	607b      	str	r3, [r7, #4]
 8006ad2:	f04f 0200 	mov.w	r2, #0
 8006ad6:	f04f 0300 	mov.w	r3, #0
 8006ada:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ade:	4659      	mov	r1, fp
 8006ae0:	00cb      	lsls	r3, r1, #3
 8006ae2:	4651      	mov	r1, sl
 8006ae4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ae8:	4651      	mov	r1, sl
 8006aea:	00ca      	lsls	r2, r1, #3
 8006aec:	4610      	mov	r0, r2
 8006aee:	4619      	mov	r1, r3
 8006af0:	4603      	mov	r3, r0
 8006af2:	4642      	mov	r2, r8
 8006af4:	189b      	adds	r3, r3, r2
 8006af6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006af8:	464b      	mov	r3, r9
 8006afa:	460a      	mov	r2, r1
 8006afc:	eb42 0303 	adc.w	r3, r2, r3
 8006b00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	663b      	str	r3, [r7, #96]	; 0x60
 8006b0c:	667a      	str	r2, [r7, #100]	; 0x64
 8006b0e:	f04f 0200 	mov.w	r2, #0
 8006b12:	f04f 0300 	mov.w	r3, #0
 8006b16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	008b      	lsls	r3, r1, #2
 8006b1e:	4641      	mov	r1, r8
 8006b20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b24:	4641      	mov	r1, r8
 8006b26:	008a      	lsls	r2, r1, #2
 8006b28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b2c:	f7fa f864 	bl	8000bf8 <__aeabi_uldivmod>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <UART_SetConfig+0x570>)
 8006b36:	fba3 1302 	umull	r1, r3, r3, r2
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	2164      	movs	r1, #100	; 0x64
 8006b3e:	fb01 f303 	mul.w	r3, r1, r3
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	3332      	adds	r3, #50	; 0x32
 8006b48:	4a08      	ldr	r2, [pc, #32]	; (8006b6c <UART_SetConfig+0x570>)
 8006b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4e:	095b      	lsrs	r3, r3, #5
 8006b50:	f003 020f 	and.w	r2, r3, #15
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4422      	add	r2, r4
 8006b5c:	609a      	str	r2, [r3, #8]
}
 8006b5e:	bf00      	nop
 8006b60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b64:	46bd      	mov	sp, r7
 8006b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b6a:	bf00      	nop
 8006b6c:	51eb851f 	.word	0x51eb851f

08006b70 <__NVIC_SetPriority>:
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	4603      	mov	r3, r0
 8006b78:	6039      	str	r1, [r7, #0]
 8006b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	db0a      	blt.n	8006b9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	490c      	ldr	r1, [pc, #48]	; (8006bbc <__NVIC_SetPriority+0x4c>)
 8006b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b8e:	0112      	lsls	r2, r2, #4
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	440b      	add	r3, r1
 8006b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006b98:	e00a      	b.n	8006bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	4908      	ldr	r1, [pc, #32]	; (8006bc0 <__NVIC_SetPriority+0x50>)
 8006ba0:	79fb      	ldrb	r3, [r7, #7]
 8006ba2:	f003 030f 	and.w	r3, r3, #15
 8006ba6:	3b04      	subs	r3, #4
 8006ba8:	0112      	lsls	r2, r2, #4
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	440b      	add	r3, r1
 8006bae:	761a      	strb	r2, [r3, #24]
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	e000e100 	.word	0xe000e100
 8006bc0:	e000ed00 	.word	0xe000ed00

08006bc4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <SysTick_Handler+0x1c>)
 8006bca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006bcc:	f003 f850 	bl	8009c70 <xTaskGetSchedulerState>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d001      	beq.n	8006bda <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006bd6:	f001 f85f 	bl	8007c98 <xPortSysTickHandler>
  }
}
 8006bda:	bf00      	nop
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	e000e010 	.word	0xe000e010

08006be4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006be8:	2100      	movs	r1, #0
 8006bea:	f06f 0004 	mvn.w	r0, #4
 8006bee:	f7ff ffbf 	bl	8006b70 <__NVIC_SetPriority>
#endif
}
 8006bf2:	bf00      	nop
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bfe:	f3ef 8305 	mrs	r3, IPSR
 8006c02:	603b      	str	r3, [r7, #0]
  return(result);
 8006c04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006c0a:	f06f 0305 	mvn.w	r3, #5
 8006c0e:	607b      	str	r3, [r7, #4]
 8006c10:	e00c      	b.n	8006c2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c12:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <osKernelInitialize+0x44>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d105      	bne.n	8006c26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c1a:	4b08      	ldr	r3, [pc, #32]	; (8006c3c <osKernelInitialize+0x44>)
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	607b      	str	r3, [r7, #4]
 8006c24:	e002      	b.n	8006c2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006c26:	f04f 33ff 	mov.w	r3, #4294967295
 8006c2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c2c:	687b      	ldr	r3, [r7, #4]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	2000039c 	.word	0x2000039c

08006c40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c46:	f3ef 8305 	mrs	r3, IPSR
 8006c4a:	603b      	str	r3, [r7, #0]
  return(result);
 8006c4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006c52:	f06f 0305 	mvn.w	r3, #5
 8006c56:	607b      	str	r3, [r7, #4]
 8006c58:	e010      	b.n	8006c7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c5a:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <osKernelStart+0x48>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d109      	bne.n	8006c76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006c62:	f7ff ffbf 	bl	8006be4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006c66:	4b08      	ldr	r3, [pc, #32]	; (8006c88 <osKernelStart+0x48>)
 8006c68:	2202      	movs	r2, #2
 8006c6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006c6c:	f002 fba4 	bl	80093b8 <vTaskStartScheduler>
      stat = osOK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	607b      	str	r3, [r7, #4]
 8006c74:	e002      	b.n	8006c7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006c76:	f04f 33ff 	mov.w	r3, #4294967295
 8006c7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c7c:	687b      	ldr	r3, [r7, #4]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	2000039c 	.word	0x2000039c

08006c8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08e      	sub	sp, #56	; 0x38
 8006c90:	af04      	add	r7, sp, #16
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c9c:	f3ef 8305 	mrs	r3, IPSR
 8006ca0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ca2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d17e      	bne.n	8006da6 <osThreadNew+0x11a>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d07b      	beq.n	8006da6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006cae:	2380      	movs	r3, #128	; 0x80
 8006cb0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006cb2:	2318      	movs	r3, #24
 8006cb4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006cba:	f04f 33ff 	mov.w	r3, #4294967295
 8006cbe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d045      	beq.n	8006d52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <osThreadNew+0x48>
        name = attr->name;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <osThreadNew+0x6e>
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	2b38      	cmp	r3, #56	; 0x38
 8006cec:	d805      	bhi.n	8006cfa <osThreadNew+0x6e>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <osThreadNew+0x72>
        return (NULL);
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e054      	b.n	8006da8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	089b      	lsrs	r3, r3, #2
 8006d0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00e      	beq.n	8006d34 <osThreadNew+0xa8>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	2bbb      	cmp	r3, #187	; 0xbb
 8006d1c:	d90a      	bls.n	8006d34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d006      	beq.n	8006d34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <osThreadNew+0xa8>
        mem = 1;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	61bb      	str	r3, [r7, #24]
 8006d32:	e010      	b.n	8006d56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10c      	bne.n	8006d56 <osThreadNew+0xca>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d108      	bne.n	8006d56 <osThreadNew+0xca>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <osThreadNew+0xca>
          mem = 0;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	61bb      	str	r3, [r7, #24]
 8006d50:	e001      	b.n	8006d56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d110      	bne.n	8006d7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d64:	9202      	str	r2, [sp, #8]
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	6a3a      	ldr	r2, [r7, #32]
 8006d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f002 f82e 	bl	8008dd4 <xTaskCreateStatic>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	613b      	str	r3, [r7, #16]
 8006d7c:	e013      	b.n	8006da6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d110      	bne.n	8006da6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	f107 0310 	add.w	r3, r7, #16
 8006d8c:	9301      	str	r3, [sp, #4]
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f002 f879 	bl	8008e8e <xTaskCreate>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d001      	beq.n	8006da6 <osThreadNew+0x11a>
            hTask = NULL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006da6:	693b      	ldr	r3, [r7, #16]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3728      	adds	r7, #40	; 0x28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dbc:	f3ef 8305 	mrs	r3, IPSR
 8006dc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8006dc8:	f06f 0305 	mvn.w	r3, #5
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	e00b      	b.n	8006de8 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d103      	bne.n	8006dde <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8006dd6:	f06f 0303 	mvn.w	r3, #3
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	e004      	b.n	8006de8 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8006de2:	6938      	ldr	r0, [r7, #16]
 8006de4:	f002 f9e2 	bl	80091ac <vTaskSuspend>
  }

  return (stat);
 8006de8:	697b      	ldr	r3, [r7, #20]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b086      	sub	sp, #24
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dfe:	f3ef 8305 	mrs	r3, IPSR
 8006e02:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e04:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <osThreadResume+0x20>
    stat = osErrorISR;
 8006e0a:	f06f 0305 	mvn.w	r3, #5
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e00b      	b.n	8006e2a <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d103      	bne.n	8006e20 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8006e18:	f06f 0303 	mvn.w	r3, #3
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	e004      	b.n	8006e2a <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8006e24:	6938      	ldr	r0, [r7, #16]
 8006e26:	f002 fa69 	bl	80092fc <vTaskResume>
  }

  return (stat);
 8006e2a:	697b      	ldr	r3, [r7, #20]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e3c:	f3ef 8305 	mrs	r3, IPSR
 8006e40:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e42:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <osDelay+0x1c>
    stat = osErrorISR;
 8006e48:	f06f 0305 	mvn.w	r3, #5
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	e007      	b.n	8006e60 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f002 f972 	bl	8009144 <vTaskDelay>
    }
  }

  return (stat);
 8006e60:	68fb      	ldr	r3, [r7, #12]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f003 fceb 	bl	800a84e <pvTimerGetTimerID>
 8006e78:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d005      	beq.n	8006e8c <TimerCallback+0x22>
    callb->func (callb->arg);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	6852      	ldr	r2, [r2, #4]
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
  }
}
 8006e8c:	bf00      	nop
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08c      	sub	sp, #48	; 0x30
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	607a      	str	r2, [r7, #4]
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ea8:	f3ef 8305 	mrs	r3, IPSR
 8006eac:	613b      	str	r3, [r7, #16]
  return(result);
 8006eae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d163      	bne.n	8006f7c <osTimerNew+0xe8>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d060      	beq.n	8006f7c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006eba:	2008      	movs	r0, #8
 8006ebc:	f000 fa92 	bl	80073e4 <pvPortMalloc>
 8006ec0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d059      	beq.n	8006f7c <osTimerNew+0xe8>
      callb->func = func;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006ed4:	7afb      	ldrb	r3, [r7, #11]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d102      	bne.n	8006ee0 <osTimerNew+0x4c>
        reload = pdFALSE;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
 8006ede:	e001      	b.n	8006ee4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8006ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d01c      	beq.n	8006f2e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <osTimerNew+0x6e>
          name = attr->name;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d006      	beq.n	8006f18 <osTimerNew+0x84>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	2b2b      	cmp	r3, #43	; 0x2b
 8006f10:	d902      	bls.n	8006f18 <osTimerNew+0x84>
          mem = 1;
 8006f12:	2301      	movs	r3, #1
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	e00c      	b.n	8006f32 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d108      	bne.n	8006f32 <osTimerNew+0x9e>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <osTimerNew+0x9e>
            mem = 0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	61bb      	str	r3, [r7, #24]
 8006f2c:	e001      	b.n	8006f32 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d10c      	bne.n	8006f52 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <osTimerNew+0xf4>)
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	69fa      	ldr	r2, [r7, #28]
 8006f46:	2101      	movs	r1, #1
 8006f48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f4a:	f003 f8d8 	bl	800a0fe <xTimerCreateStatic>
 8006f4e:	6238      	str	r0, [r7, #32]
 8006f50:	e00b      	b.n	8006f6a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d108      	bne.n	8006f6a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006f58:	4b0b      	ldr	r3, [pc, #44]	; (8006f88 <osTimerNew+0xf4>)
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	2101      	movs	r1, #1
 8006f62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f64:	f003 f8aa 	bl	800a0bc <xTimerCreate>
 8006f68:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d105      	bne.n	8006f7c <osTimerNew+0xe8>
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <osTimerNew+0xe8>
        vPortFree (callb);
 8006f76:	6978      	ldr	r0, [r7, #20]
 8006f78:	f000 fb00 	bl	800757c <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3728      	adds	r7, #40	; 0x28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	08006e6b 	.word	0x08006e6b

08006f8c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b088      	sub	sp, #32
 8006f90:	af02      	add	r7, sp, #8
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f9a:	f3ef 8305 	mrs	r3, IPSR
 8006f9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <osTimerStart+0x22>
    stat = osErrorISR;
 8006fa6:	f06f 0305 	mvn.w	r3, #5
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	e017      	b.n	8006fde <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d103      	bne.n	8006fbc <osTimerStart+0x30>
    stat = osErrorParameter;
 8006fb4:	f06f 0303 	mvn.w	r3, #3
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	e010      	b.n	8006fde <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	2104      	movs	r1, #4
 8006fc6:	6938      	ldr	r0, [r7, #16]
 8006fc8:	f003 f912 	bl	800a1f0 <xTimerGenericCommand>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d102      	bne.n	8006fd8 <osTimerStart+0x4c>
      stat = osOK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	e002      	b.n	8006fde <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8006fd8:	f06f 0302 	mvn.w	r3, #2
 8006fdc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006fde:	697b      	ldr	r3, [r7, #20]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ff4:	f3ef 8305 	mrs	r3, IPSR
 8006ff8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <osTimerStop+0x20>
    stat = osErrorISR;
 8007000:	f06f 0305 	mvn.w	r3, #5
 8007004:	617b      	str	r3, [r7, #20]
 8007006:	e021      	b.n	800704c <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d103      	bne.n	8007016 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800700e:	f06f 0303 	mvn.w	r3, #3
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	e01a      	b.n	800704c <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8007016:	6938      	ldr	r0, [r7, #16]
 8007018:	f003 fbf0 	bl	800a7fc <xTimerIsTimerActive>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d103      	bne.n	800702a <osTimerStop+0x42>
      stat = osErrorResource;
 8007022:	f06f 0302 	mvn.w	r3, #2
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	e010      	b.n	800704c <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800702a:	2300      	movs	r3, #0
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	2300      	movs	r3, #0
 8007030:	2200      	movs	r2, #0
 8007032:	2103      	movs	r1, #3
 8007034:	6938      	ldr	r0, [r7, #16]
 8007036:	f003 f8db 	bl	800a1f0 <xTimerGenericCommand>
 800703a:	4603      	mov	r3, r0
 800703c:	2b01      	cmp	r3, #1
 800703e:	d102      	bne.n	8007046 <osTimerStop+0x5e>
        stat = osOK;
 8007040:	2300      	movs	r3, #0
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	e002      	b.n	800704c <osTimerStop+0x64>
      } else {
        stat = osError;
 8007046:	f04f 33ff 	mov.w	r3, #4294967295
 800704a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800704c:	697b      	ldr	r3, [r7, #20]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007056:	b580      	push	{r7, lr}
 8007058:	b08a      	sub	sp, #40	; 0x28
 800705a:	af02      	add	r7, sp, #8
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007062:	2300      	movs	r3, #0
 8007064:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007066:	f3ef 8305 	mrs	r3, IPSR
 800706a:	613b      	str	r3, [r7, #16]
  return(result);
 800706c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800706e:	2b00      	cmp	r3, #0
 8007070:	d175      	bne.n	800715e <osSemaphoreNew+0x108>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d072      	beq.n	800715e <osSemaphoreNew+0x108>
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	429a      	cmp	r2, r3
 800707e:	d86e      	bhi.n	800715e <osSemaphoreNew+0x108>
    mem = -1;
 8007080:	f04f 33ff 	mov.w	r3, #4294967295
 8007084:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d015      	beq.n	80070b8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d006      	beq.n	80070a2 <osSemaphoreNew+0x4c>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	2b4f      	cmp	r3, #79	; 0x4f
 800709a:	d902      	bls.n	80070a2 <osSemaphoreNew+0x4c>
        mem = 1;
 800709c:	2301      	movs	r3, #1
 800709e:	61bb      	str	r3, [r7, #24]
 80070a0:	e00c      	b.n	80070bc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d108      	bne.n	80070bc <osSemaphoreNew+0x66>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d104      	bne.n	80070bc <osSemaphoreNew+0x66>
          mem = 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	e001      	b.n	80070bc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80070b8:	2300      	movs	r3, #0
 80070ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c2:	d04c      	beq.n	800715e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d128      	bne.n	800711c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d10a      	bne.n	80070e6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	2203      	movs	r2, #3
 80070d6:	9200      	str	r2, [sp, #0]
 80070d8:	2200      	movs	r2, #0
 80070da:	2100      	movs	r1, #0
 80070dc:	2001      	movs	r0, #1
 80070de:	f000 fed3 	bl	8007e88 <xQueueGenericCreateStatic>
 80070e2:	61f8      	str	r0, [r7, #28]
 80070e4:	e005      	b.n	80070f2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80070e6:	2203      	movs	r2, #3
 80070e8:	2100      	movs	r1, #0
 80070ea:	2001      	movs	r0, #1
 80070ec:	f000 ff44 	bl	8007f78 <xQueueGenericCreate>
 80070f0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d022      	beq.n	800713e <osSemaphoreNew+0xe8>
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d01f      	beq.n	800713e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80070fe:	2300      	movs	r3, #0
 8007100:	2200      	movs	r2, #0
 8007102:	2100      	movs	r1, #0
 8007104:	69f8      	ldr	r0, [r7, #28]
 8007106:	f000 ffff 	bl	8008108 <xQueueGenericSend>
 800710a:	4603      	mov	r3, r0
 800710c:	2b01      	cmp	r3, #1
 800710e:	d016      	beq.n	800713e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007110:	69f8      	ldr	r0, [r7, #28]
 8007112:	f001 fc8b 	bl	8008a2c <vQueueDelete>
            hSemaphore = NULL;
 8007116:	2300      	movs	r3, #0
 8007118:	61fb      	str	r3, [r7, #28]
 800711a:	e010      	b.n	800713e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d108      	bne.n	8007134 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	461a      	mov	r2, r3
 8007128:	68b9      	ldr	r1, [r7, #8]
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 ff81 	bl	8008032 <xQueueCreateCountingSemaphoreStatic>
 8007130:	61f8      	str	r0, [r7, #28]
 8007132:	e004      	b.n	800713e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007134:	68b9      	ldr	r1, [r7, #8]
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 ffb2 	bl	80080a0 <xQueueCreateCountingSemaphore>
 800713c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00c      	beq.n	800715e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <osSemaphoreNew+0xfc>
          name = attr->name;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	e001      	b.n	8007156 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007156:	6979      	ldr	r1, [r7, #20]
 8007158:	69f8      	ldr	r0, [r7, #28]
 800715a:	f001 fdb3 	bl	8008cc4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800715e:	69fb      	ldr	r3, [r7, #28]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3720      	adds	r7, #32
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007176:	2300      	movs	r3, #0
 8007178:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d103      	bne.n	8007188 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007180:	f06f 0303 	mvn.w	r3, #3
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	e039      	b.n	80071fc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007188:	f3ef 8305 	mrs	r3, IPSR
 800718c:	60fb      	str	r3, [r7, #12]
  return(result);
 800718e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007190:	2b00      	cmp	r3, #0
 8007192:	d022      	beq.n	80071da <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800719a:	f06f 0303 	mvn.w	r3, #3
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	e02c      	b.n	80071fc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80071a2:	2300      	movs	r3, #0
 80071a4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80071a6:	f107 0308 	add.w	r3, r7, #8
 80071aa:	461a      	mov	r2, r3
 80071ac:	2100      	movs	r1, #0
 80071ae:	6938      	ldr	r0, [r7, #16]
 80071b0:	f001 fbbc 	bl	800892c <xQueueReceiveFromISR>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d003      	beq.n	80071c2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80071ba:	f06f 0302 	mvn.w	r3, #2
 80071be:	617b      	str	r3, [r7, #20]
 80071c0:	e01c      	b.n	80071fc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d019      	beq.n	80071fc <osSemaphoreAcquire+0x94>
 80071c8:	4b0f      	ldr	r3, [pc, #60]	; (8007208 <osSemaphoreAcquire+0xa0>)
 80071ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	e010      	b.n	80071fc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6938      	ldr	r0, [r7, #16]
 80071de:	f001 fa99 	bl	8008714 <xQueueSemaphoreTake>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d009      	beq.n	80071fc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80071ee:	f06f 0301 	mvn.w	r3, #1
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	e002      	b.n	80071fc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80071f6:	f06f 0302 	mvn.w	r3, #2
 80071fa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80071fc:	697b      	ldr	r3, [r7, #20]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	e000ed04 	.word	0xe000ed04

0800720c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007218:	2300      	movs	r3, #0
 800721a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d103      	bne.n	800722a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007222:	f06f 0303 	mvn.w	r3, #3
 8007226:	617b      	str	r3, [r7, #20]
 8007228:	e02c      	b.n	8007284 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800722a:	f3ef 8305 	mrs	r3, IPSR
 800722e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007230:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007232:	2b00      	cmp	r3, #0
 8007234:	d01a      	beq.n	800726c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007236:	2300      	movs	r3, #0
 8007238:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800723a:	f107 0308 	add.w	r3, r7, #8
 800723e:	4619      	mov	r1, r3
 8007240:	6938      	ldr	r0, [r7, #16]
 8007242:	f001 f8fa 	bl	800843a <xQueueGiveFromISR>
 8007246:	4603      	mov	r3, r0
 8007248:	2b01      	cmp	r3, #1
 800724a:	d003      	beq.n	8007254 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800724c:	f06f 0302 	mvn.w	r3, #2
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	e017      	b.n	8007284 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d014      	beq.n	8007284 <osSemaphoreRelease+0x78>
 800725a:	4b0d      	ldr	r3, [pc, #52]	; (8007290 <osSemaphoreRelease+0x84>)
 800725c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	e00b      	b.n	8007284 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800726c:	2300      	movs	r3, #0
 800726e:	2200      	movs	r2, #0
 8007270:	2100      	movs	r1, #0
 8007272:	6938      	ldr	r0, [r7, #16]
 8007274:	f000 ff48 	bl	8008108 <xQueueGenericSend>
 8007278:	4603      	mov	r3, r0
 800727a:	2b01      	cmp	r3, #1
 800727c:	d002      	beq.n	8007284 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800727e:	f06f 0302 	mvn.w	r3, #2
 8007282:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007284:	697b      	ldr	r3, [r7, #20]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	e000ed04 	.word	0xe000ed04

08007294 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007294:	b580      	push	{r7, lr}
 8007296:	b08a      	sub	sp, #40	; 0x28
 8007298:	af02      	add	r7, sp, #8
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072a4:	f3ef 8305 	mrs	r3, IPSR
 80072a8:	613b      	str	r3, [r7, #16]
  return(result);
 80072aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d15f      	bne.n	8007370 <osMessageQueueNew+0xdc>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d05c      	beq.n	8007370 <osMessageQueueNew+0xdc>
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d059      	beq.n	8007370 <osMessageQueueNew+0xdc>
    mem = -1;
 80072bc:	f04f 33ff 	mov.w	r3, #4294967295
 80072c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d029      	beq.n	800731c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d012      	beq.n	80072f6 <osMessageQueueNew+0x62>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	2b4f      	cmp	r3, #79	; 0x4f
 80072d6:	d90e      	bls.n	80072f6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00a      	beq.n	80072f6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	695a      	ldr	r2, [r3, #20]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	68b9      	ldr	r1, [r7, #8]
 80072e8:	fb01 f303 	mul.w	r3, r1, r3
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d302      	bcc.n	80072f6 <osMessageQueueNew+0x62>
        mem = 1;
 80072f0:	2301      	movs	r3, #1
 80072f2:	61bb      	str	r3, [r7, #24]
 80072f4:	e014      	b.n	8007320 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d110      	bne.n	8007320 <osMessageQueueNew+0x8c>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10c      	bne.n	8007320 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800730a:	2b00      	cmp	r3, #0
 800730c:	d108      	bne.n	8007320 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d104      	bne.n	8007320 <osMessageQueueNew+0x8c>
          mem = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	61bb      	str	r3, [r7, #24]
 800731a:	e001      	b.n	8007320 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d10b      	bne.n	800733e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	691a      	ldr	r2, [r3, #16]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	2100      	movs	r1, #0
 8007330:	9100      	str	r1, [sp, #0]
 8007332:	68b9      	ldr	r1, [r7, #8]
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 fda7 	bl	8007e88 <xQueueGenericCreateStatic>
 800733a:	61f8      	str	r0, [r7, #28]
 800733c:	e008      	b.n	8007350 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d105      	bne.n	8007350 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007344:	2200      	movs	r2, #0
 8007346:	68b9      	ldr	r1, [r7, #8]
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 fe15 	bl	8007f78 <xQueueGenericCreate>
 800734e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00c      	beq.n	8007370 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <osMessageQueueNew+0xd0>
        name = attr->name;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	617b      	str	r3, [r7, #20]
 8007362:	e001      	b.n	8007368 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007364:	2300      	movs	r3, #0
 8007366:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007368:	6979      	ldr	r1, [r7, #20]
 800736a:	69f8      	ldr	r0, [r7, #28]
 800736c:	f001 fcaa 	bl	8008cc4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007370:	69fb      	ldr	r3, [r7, #28]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3720      	adds	r7, #32
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4a07      	ldr	r2, [pc, #28]	; (80073a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800738c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	4a06      	ldr	r2, [pc, #24]	; (80073ac <vApplicationGetIdleTaskMemory+0x30>)
 8007392:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2280      	movs	r2, #128	; 0x80
 8007398:	601a      	str	r2, [r3, #0]
}
 800739a:	bf00      	nop
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	200003a0 	.word	0x200003a0
 80073ac:	2000045c 	.word	0x2000045c

080073b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4a07      	ldr	r2, [pc, #28]	; (80073dc <vApplicationGetTimerTaskMemory+0x2c>)
 80073c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	4a06      	ldr	r2, [pc, #24]	; (80073e0 <vApplicationGetTimerTaskMemory+0x30>)
 80073c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073ce:	601a      	str	r2, [r3, #0]
}
 80073d0:	bf00      	nop
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	2000065c 	.word	0x2000065c
 80073e0:	20000718 	.word	0x20000718

080073e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b08a      	sub	sp, #40	; 0x28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073ec:	2300      	movs	r3, #0
 80073ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073f0:	f002 f852 	bl	8009498 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073f4:	4b5b      	ldr	r3, [pc, #364]	; (8007564 <pvPortMalloc+0x180>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073fc:	f000 f920 	bl	8007640 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007400:	4b59      	ldr	r3, [pc, #356]	; (8007568 <pvPortMalloc+0x184>)
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4013      	ands	r3, r2
 8007408:	2b00      	cmp	r3, #0
 800740a:	f040 8093 	bne.w	8007534 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d01d      	beq.n	8007450 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007414:	2208      	movs	r2, #8
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4413      	add	r3, r2
 800741a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	2b00      	cmp	r3, #0
 8007424:	d014      	beq.n	8007450 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f023 0307 	bic.w	r3, r3, #7
 800742c:	3308      	adds	r3, #8
 800742e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800744c:	bf00      	nop
 800744e:	e7fe      	b.n	800744e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d06e      	beq.n	8007534 <pvPortMalloc+0x150>
 8007456:	4b45      	ldr	r3, [pc, #276]	; (800756c <pvPortMalloc+0x188>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	429a      	cmp	r2, r3
 800745e:	d869      	bhi.n	8007534 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007460:	4b43      	ldr	r3, [pc, #268]	; (8007570 <pvPortMalloc+0x18c>)
 8007462:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007464:	4b42      	ldr	r3, [pc, #264]	; (8007570 <pvPortMalloc+0x18c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800746a:	e004      	b.n	8007476 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	429a      	cmp	r2, r3
 800747e:	d903      	bls.n	8007488 <pvPortMalloc+0xa4>
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1f1      	bne.n	800746c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007488:	4b36      	ldr	r3, [pc, #216]	; (8007564 <pvPortMalloc+0x180>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800748e:	429a      	cmp	r2, r3
 8007490:	d050      	beq.n	8007534 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2208      	movs	r2, #8
 8007498:	4413      	add	r3, r2
 800749a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	1ad2      	subs	r2, r2, r3
 80074ac:	2308      	movs	r3, #8
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d91f      	bls.n	80074f4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4413      	add	r3, r2
 80074ba:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <pvPortMalloc+0xf8>
	__asm volatile
 80074c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	613b      	str	r3, [r7, #16]
}
 80074d8:	bf00      	nop
 80074da:	e7fe      	b.n	80074da <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	1ad2      	subs	r2, r2, r3
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074ee:	69b8      	ldr	r0, [r7, #24]
 80074f0:	f000 f908 	bl	8007704 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074f4:	4b1d      	ldr	r3, [pc, #116]	; (800756c <pvPortMalloc+0x188>)
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	4a1b      	ldr	r2, [pc, #108]	; (800756c <pvPortMalloc+0x188>)
 8007500:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007502:	4b1a      	ldr	r3, [pc, #104]	; (800756c <pvPortMalloc+0x188>)
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	4b1b      	ldr	r3, [pc, #108]	; (8007574 <pvPortMalloc+0x190>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	429a      	cmp	r2, r3
 800750c:	d203      	bcs.n	8007516 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800750e:	4b17      	ldr	r3, [pc, #92]	; (800756c <pvPortMalloc+0x188>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a18      	ldr	r2, [pc, #96]	; (8007574 <pvPortMalloc+0x190>)
 8007514:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	4b13      	ldr	r3, [pc, #76]	; (8007568 <pvPortMalloc+0x184>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	431a      	orrs	r2, r3
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	2200      	movs	r2, #0
 8007528:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800752a:	4b13      	ldr	r3, [pc, #76]	; (8007578 <pvPortMalloc+0x194>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3301      	adds	r3, #1
 8007530:	4a11      	ldr	r2, [pc, #68]	; (8007578 <pvPortMalloc+0x194>)
 8007532:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007534:	f001 ffbe 	bl	80094b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	f003 0307 	and.w	r3, r3, #7
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <pvPortMalloc+0x174>
	__asm volatile
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	60fb      	str	r3, [r7, #12]
}
 8007554:	bf00      	nop
 8007556:	e7fe      	b.n	8007556 <pvPortMalloc+0x172>
	return pvReturn;
 8007558:	69fb      	ldr	r3, [r7, #28]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3728      	adds	r7, #40	; 0x28
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20004720 	.word	0x20004720
 8007568:	20004734 	.word	0x20004734
 800756c:	20004724 	.word	0x20004724
 8007570:	20004718 	.word	0x20004718
 8007574:	20004728 	.word	0x20004728
 8007578:	2000472c 	.word	0x2000472c

0800757c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d04d      	beq.n	800762a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800758e:	2308      	movs	r3, #8
 8007590:	425b      	negs	r3, r3
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	4413      	add	r3, r2
 8007596:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	4b24      	ldr	r3, [pc, #144]	; (8007634 <vPortFree+0xb8>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4013      	ands	r3, r2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10a      	bne.n	80075c0 <vPortFree+0x44>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	60fb      	str	r3, [r7, #12]
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <vPortFree+0x62>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	60bb      	str	r3, [r7, #8]
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	4b14      	ldr	r3, [pc, #80]	; (8007634 <vPortFree+0xb8>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4013      	ands	r3, r2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01e      	beq.n	800762a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d11a      	bne.n	800762a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	4b0e      	ldr	r3, [pc, #56]	; (8007634 <vPortFree+0xb8>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	43db      	mvns	r3, r3
 80075fe:	401a      	ands	r2, r3
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007604:	f001 ff48 	bl	8009498 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	4b0a      	ldr	r3, [pc, #40]	; (8007638 <vPortFree+0xbc>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4413      	add	r3, r2
 8007612:	4a09      	ldr	r2, [pc, #36]	; (8007638 <vPortFree+0xbc>)
 8007614:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007616:	6938      	ldr	r0, [r7, #16]
 8007618:	f000 f874 	bl	8007704 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800761c:	4b07      	ldr	r3, [pc, #28]	; (800763c <vPortFree+0xc0>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3301      	adds	r3, #1
 8007622:	4a06      	ldr	r2, [pc, #24]	; (800763c <vPortFree+0xc0>)
 8007624:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007626:	f001 ff45 	bl	80094b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800762a:	bf00      	nop
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20004734 	.word	0x20004734
 8007638:	20004724 	.word	0x20004724
 800763c:	20004730 	.word	0x20004730

08007640 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007646:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800764a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800764c:	4b27      	ldr	r3, [pc, #156]	; (80076ec <prvHeapInit+0xac>)
 800764e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00c      	beq.n	8007674 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3307      	adds	r3, #7
 800765e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0307 	bic.w	r3, r3, #7
 8007666:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	4a1f      	ldr	r2, [pc, #124]	; (80076ec <prvHeapInit+0xac>)
 8007670:	4413      	add	r3, r2
 8007672:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007678:	4a1d      	ldr	r2, [pc, #116]	; (80076f0 <prvHeapInit+0xb0>)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800767e:	4b1c      	ldr	r3, [pc, #112]	; (80076f0 <prvHeapInit+0xb0>)
 8007680:	2200      	movs	r2, #0
 8007682:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	4413      	add	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800768c:	2208      	movs	r2, #8
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1a9b      	subs	r3, r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0307 	bic.w	r3, r3, #7
 800769a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4a15      	ldr	r2, [pc, #84]	; (80076f4 <prvHeapInit+0xb4>)
 80076a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076a2:	4b14      	ldr	r3, [pc, #80]	; (80076f4 <prvHeapInit+0xb4>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2200      	movs	r2, #0
 80076a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076aa:	4b12      	ldr	r3, [pc, #72]	; (80076f4 <prvHeapInit+0xb4>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2200      	movs	r2, #0
 80076b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	1ad2      	subs	r2, r2, r3
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076c0:	4b0c      	ldr	r3, [pc, #48]	; (80076f4 <prvHeapInit+0xb4>)
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	4a0a      	ldr	r2, [pc, #40]	; (80076f8 <prvHeapInit+0xb8>)
 80076ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	4a09      	ldr	r2, [pc, #36]	; (80076fc <prvHeapInit+0xbc>)
 80076d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076d8:	4b09      	ldr	r3, [pc, #36]	; (8007700 <prvHeapInit+0xc0>)
 80076da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076de:	601a      	str	r2, [r3, #0]
}
 80076e0:	bf00      	nop
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	20000b18 	.word	0x20000b18
 80076f0:	20004718 	.word	0x20004718
 80076f4:	20004720 	.word	0x20004720
 80076f8:	20004728 	.word	0x20004728
 80076fc:	20004724 	.word	0x20004724
 8007700:	20004734 	.word	0x20004734

08007704 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800770c:	4b28      	ldr	r3, [pc, #160]	; (80077b0 <prvInsertBlockIntoFreeList+0xac>)
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e002      	b.n	8007718 <prvInsertBlockIntoFreeList+0x14>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	429a      	cmp	r2, r3
 8007720:	d8f7      	bhi.n	8007712 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	4413      	add	r3, r2
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	429a      	cmp	r2, r3
 8007732:	d108      	bne.n	8007746 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	441a      	add	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	441a      	add	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d118      	bne.n	800778c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	4b15      	ldr	r3, [pc, #84]	; (80077b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d00d      	beq.n	8007782 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	441a      	add	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	e008      	b.n	8007794 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007782:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	e003      	b.n	8007794 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	429a      	cmp	r2, r3
 800779a:	d002      	beq.n	80077a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	20004718 	.word	0x20004718
 80077b4:	20004720 	.word	0x20004720

080077b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f103 0208 	add.w	r2, r3, #8
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f04f 32ff 	mov.w	r2, #4294967295
 80077d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f103 0208 	add.w	r2, r3, #8
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f103 0208 	add.w	r2, r3, #8
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007812:	b480      	push	{r7}
 8007814:	b085      	sub	sp, #20
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	689a      	ldr	r2, [r3, #8]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	601a      	str	r2, [r3, #0]
}
 800784e:	bf00      	nop
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800785a:	b480      	push	{r7}
 800785c:	b085      	sub	sp, #20
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007870:	d103      	bne.n	800787a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e00c      	b.n	8007894 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3308      	adds	r3, #8
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	e002      	b.n	8007888 <vListInsert+0x2e>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	429a      	cmp	r2, r3
 8007892:	d2f6      	bcs.n	8007882 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	601a      	str	r2, [r3, #0]
}
 80078c0:	bf00      	nop
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	6892      	ldr	r2, [r2, #8]
 80078e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	6852      	ldr	r2, [r2, #4]
 80078ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d103      	bne.n	8007900 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689a      	ldr	r2, [r3, #8]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	1e5a      	subs	r2, r3, #1
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3b04      	subs	r3, #4
 8007930:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3b04      	subs	r3, #4
 800793e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f023 0201 	bic.w	r2, r3, #1
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3b04      	subs	r3, #4
 800794e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007950:	4a0c      	ldr	r2, [pc, #48]	; (8007984 <pxPortInitialiseStack+0x64>)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3b14      	subs	r3, #20
 800795a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3b04      	subs	r3, #4
 8007966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f06f 0202 	mvn.w	r2, #2
 800796e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3b20      	subs	r3, #32
 8007974:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007976:	68fb      	ldr	r3, [r7, #12]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	08007989 	.word	0x08007989

08007988 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007992:	4b12      	ldr	r3, [pc, #72]	; (80079dc <prvTaskExitError+0x54>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799a:	d00a      	beq.n	80079b2 <prvTaskExitError+0x2a>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	60fb      	str	r3, [r7, #12]
}
 80079ae:	bf00      	nop
 80079b0:	e7fe      	b.n	80079b0 <prvTaskExitError+0x28>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	60bb      	str	r3, [r7, #8]
}
 80079c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079c6:	bf00      	nop
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0fc      	beq.n	80079c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079ce:	bf00      	nop
 80079d0:	bf00      	nop
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	20000048 	.word	0x20000048

080079e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079e0:	4b07      	ldr	r3, [pc, #28]	; (8007a00 <pxCurrentTCBConst2>)
 80079e2:	6819      	ldr	r1, [r3, #0]
 80079e4:	6808      	ldr	r0, [r1, #0]
 80079e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ea:	f380 8809 	msr	PSP, r0
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f04f 0000 	mov.w	r0, #0
 80079f6:	f380 8811 	msr	BASEPRI, r0
 80079fa:	4770      	bx	lr
 80079fc:	f3af 8000 	nop.w

08007a00 <pxCurrentTCBConst2>:
 8007a00:	20004780 	.word	0x20004780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop

08007a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a08:	4808      	ldr	r0, [pc, #32]	; (8007a2c <prvPortStartFirstTask+0x24>)
 8007a0a:	6800      	ldr	r0, [r0, #0]
 8007a0c:	6800      	ldr	r0, [r0, #0]
 8007a0e:	f380 8808 	msr	MSP, r0
 8007a12:	f04f 0000 	mov.w	r0, #0
 8007a16:	f380 8814 	msr	CONTROL, r0
 8007a1a:	b662      	cpsie	i
 8007a1c:	b661      	cpsie	f
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	df00      	svc	0
 8007a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a2a:	bf00      	nop
 8007a2c:	e000ed08 	.word	0xe000ed08

08007a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a36:	4b46      	ldr	r3, [pc, #280]	; (8007b50 <xPortStartScheduler+0x120>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a46      	ldr	r2, [pc, #280]	; (8007b54 <xPortStartScheduler+0x124>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d10a      	bne.n	8007a56 <xPortStartScheduler+0x26>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	613b      	str	r3, [r7, #16]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a56:	4b3e      	ldr	r3, [pc, #248]	; (8007b50 <xPortStartScheduler+0x120>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a3f      	ldr	r2, [pc, #252]	; (8007b58 <xPortStartScheduler+0x128>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d10a      	bne.n	8007a76 <xPortStartScheduler+0x46>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	60fb      	str	r3, [r7, #12]
}
 8007a72:	bf00      	nop
 8007a74:	e7fe      	b.n	8007a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a76:	4b39      	ldr	r3, [pc, #228]	; (8007b5c <xPortStartScheduler+0x12c>)
 8007a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	22ff      	movs	r2, #255	; 0xff
 8007a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	4b31      	ldr	r3, [pc, #196]	; (8007b60 <xPortStartScheduler+0x130>)
 8007a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a9e:	4b31      	ldr	r3, [pc, #196]	; (8007b64 <xPortStartScheduler+0x134>)
 8007aa0:	2207      	movs	r2, #7
 8007aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aa4:	e009      	b.n	8007aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007aa6:	4b2f      	ldr	r3, [pc, #188]	; (8007b64 <xPortStartScheduler+0x134>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	4a2d      	ldr	r2, [pc, #180]	; (8007b64 <xPortStartScheduler+0x134>)
 8007aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aba:	78fb      	ldrb	r3, [r7, #3]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac2:	2b80      	cmp	r3, #128	; 0x80
 8007ac4:	d0ef      	beq.n	8007aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ac6:	4b27      	ldr	r3, [pc, #156]	; (8007b64 <xPortStartScheduler+0x134>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f1c3 0307 	rsb	r3, r3, #7
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d00a      	beq.n	8007ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	60bb      	str	r3, [r7, #8]
}
 8007ae4:	bf00      	nop
 8007ae6:	e7fe      	b.n	8007ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ae8:	4b1e      	ldr	r3, [pc, #120]	; (8007b64 <xPortStartScheduler+0x134>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	021b      	lsls	r3, r3, #8
 8007aee:	4a1d      	ldr	r2, [pc, #116]	; (8007b64 <xPortStartScheduler+0x134>)
 8007af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007af2:	4b1c      	ldr	r3, [pc, #112]	; (8007b64 <xPortStartScheduler+0x134>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007afa:	4a1a      	ldr	r2, [pc, #104]	; (8007b64 <xPortStartScheduler+0x134>)
 8007afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b06:	4b18      	ldr	r3, [pc, #96]	; (8007b68 <xPortStartScheduler+0x138>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a17      	ldr	r2, [pc, #92]	; (8007b68 <xPortStartScheduler+0x138>)
 8007b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b12:	4b15      	ldr	r3, [pc, #84]	; (8007b68 <xPortStartScheduler+0x138>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a14      	ldr	r2, [pc, #80]	; (8007b68 <xPortStartScheduler+0x138>)
 8007b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b1e:	f000 f8dd 	bl	8007cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b22:	4b12      	ldr	r3, [pc, #72]	; (8007b6c <xPortStartScheduler+0x13c>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b28:	f000 f8fc 	bl	8007d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b2c:	4b10      	ldr	r3, [pc, #64]	; (8007b70 <xPortStartScheduler+0x140>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a0f      	ldr	r2, [pc, #60]	; (8007b70 <xPortStartScheduler+0x140>)
 8007b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b38:	f7ff ff66 	bl	8007a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b3c:	f001 fe22 	bl	8009784 <vTaskSwitchContext>
	prvTaskExitError();
 8007b40:	f7ff ff22 	bl	8007988 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	e000ed00 	.word	0xe000ed00
 8007b54:	410fc271 	.word	0x410fc271
 8007b58:	410fc270 	.word	0x410fc270
 8007b5c:	e000e400 	.word	0xe000e400
 8007b60:	20004738 	.word	0x20004738
 8007b64:	2000473c 	.word	0x2000473c
 8007b68:	e000ed20 	.word	0xe000ed20
 8007b6c:	20000048 	.word	0x20000048
 8007b70:	e000ef34 	.word	0xe000ef34

08007b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
	__asm volatile
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	607b      	str	r3, [r7, #4]
}
 8007b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b8e:	4b0f      	ldr	r3, [pc, #60]	; (8007bcc <vPortEnterCritical+0x58>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	4a0d      	ldr	r2, [pc, #52]	; (8007bcc <vPortEnterCritical+0x58>)
 8007b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b98:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <vPortEnterCritical+0x58>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d10f      	bne.n	8007bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ba0:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <vPortEnterCritical+0x5c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	603b      	str	r3, [r7, #0]
}
 8007bbc:	bf00      	nop
 8007bbe:	e7fe      	b.n	8007bbe <vPortEnterCritical+0x4a>
	}
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	20000048 	.word	0x20000048
 8007bd0:	e000ed04 	.word	0xe000ed04

08007bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bda:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <vPortExitCritical+0x50>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10a      	bne.n	8007bf8 <vPortExitCritical+0x24>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	607b      	str	r3, [r7, #4]
}
 8007bf4:	bf00      	nop
 8007bf6:	e7fe      	b.n	8007bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007bf8:	4b0a      	ldr	r3, [pc, #40]	; (8007c24 <vPortExitCritical+0x50>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <vPortExitCritical+0x50>)
 8007c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c02:	4b08      	ldr	r3, [pc, #32]	; (8007c24 <vPortExitCritical+0x50>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d105      	bne.n	8007c16 <vPortExitCritical+0x42>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	20000048 	.word	0x20000048
	...

08007c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c30:	f3ef 8009 	mrs	r0, PSP
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	4b15      	ldr	r3, [pc, #84]	; (8007c90 <pxCurrentTCBConst>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	f01e 0f10 	tst.w	lr, #16
 8007c40:	bf08      	it	eq
 8007c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4a:	6010      	str	r0, [r2, #0]
 8007c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c54:	f380 8811 	msr	BASEPRI, r0
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f001 fd90 	bl	8009784 <vTaskSwitchContext>
 8007c64:	f04f 0000 	mov.w	r0, #0
 8007c68:	f380 8811 	msr	BASEPRI, r0
 8007c6c:	bc09      	pop	{r0, r3}
 8007c6e:	6819      	ldr	r1, [r3, #0]
 8007c70:	6808      	ldr	r0, [r1, #0]
 8007c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c76:	f01e 0f10 	tst.w	lr, #16
 8007c7a:	bf08      	it	eq
 8007c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c80:	f380 8809 	msr	PSP, r0
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	f3af 8000 	nop.w

08007c90 <pxCurrentTCBConst>:
 8007c90:	20004780 	.word	0x20004780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c94:	bf00      	nop
 8007c96:	bf00      	nop

08007c98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	607b      	str	r3, [r7, #4]
}
 8007cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cb2:	f001 fcad 	bl	8009610 <xTaskIncrementTick>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d003      	beq.n	8007cc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cbc:	4b06      	ldr	r3, [pc, #24]	; (8007cd8 <xPortSysTickHandler+0x40>)
 8007cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	f383 8811 	msr	BASEPRI, r3
}
 8007cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	e000ed04 	.word	0xe000ed04

08007cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <vPortSetupTimerInterrupt+0x34>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ce6:	4b0b      	ldr	r3, [pc, #44]	; (8007d14 <vPortSetupTimerInterrupt+0x38>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cec:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <vPortSetupTimerInterrupt+0x3c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a0a      	ldr	r2, [pc, #40]	; (8007d1c <vPortSetupTimerInterrupt+0x40>)
 8007cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf6:	099b      	lsrs	r3, r3, #6
 8007cf8:	4a09      	ldr	r2, [pc, #36]	; (8007d20 <vPortSetupTimerInterrupt+0x44>)
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cfe:	4b04      	ldr	r3, [pc, #16]	; (8007d10 <vPortSetupTimerInterrupt+0x34>)
 8007d00:	2207      	movs	r2, #7
 8007d02:	601a      	str	r2, [r3, #0]
}
 8007d04:	bf00      	nop
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	e000e010 	.word	0xe000e010
 8007d14:	e000e018 	.word	0xe000e018
 8007d18:	2000002c 	.word	0x2000002c
 8007d1c:	10624dd3 	.word	0x10624dd3
 8007d20:	e000e014 	.word	0xe000e014

08007d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d34 <vPortEnableVFP+0x10>
 8007d28:	6801      	ldr	r1, [r0, #0]
 8007d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d2e:	6001      	str	r1, [r0, #0]
 8007d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d32:	bf00      	nop
 8007d34:	e000ed88 	.word	0xe000ed88

08007d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d3e:	f3ef 8305 	mrs	r3, IPSR
 8007d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b0f      	cmp	r3, #15
 8007d48:	d914      	bls.n	8007d74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d4a:	4a17      	ldr	r2, [pc, #92]	; (8007da8 <vPortValidateInterruptPriority+0x70>)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4413      	add	r3, r2
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d54:	4b15      	ldr	r3, [pc, #84]	; (8007dac <vPortValidateInterruptPriority+0x74>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	7afa      	ldrb	r2, [r7, #11]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d20a      	bcs.n	8007d74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	607b      	str	r3, [r7, #4]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d74:	4b0e      	ldr	r3, [pc, #56]	; (8007db0 <vPortValidateInterruptPriority+0x78>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d7c:	4b0d      	ldr	r3, [pc, #52]	; (8007db4 <vPortValidateInterruptPriority+0x7c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d90a      	bls.n	8007d9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	603b      	str	r3, [r7, #0]
}
 8007d96:	bf00      	nop
 8007d98:	e7fe      	b.n	8007d98 <vPortValidateInterruptPriority+0x60>
	}
 8007d9a:	bf00      	nop
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	e000e3f0 	.word	0xe000e3f0
 8007dac:	20004738 	.word	0x20004738
 8007db0:	e000ed0c 	.word	0xe000ed0c
 8007db4:	2000473c 	.word	0x2000473c

08007db8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <xQueueGenericReset+0x2a>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	60bb      	str	r3, [r7, #8]
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007de2:	f7ff fec7 	bl	8007b74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dee:	68f9      	ldr	r1, [r7, #12]
 8007df0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007df2:	fb01 f303 	mul.w	r3, r1, r3
 8007df6:	441a      	add	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e12:	3b01      	subs	r3, #1
 8007e14:	68f9      	ldr	r1, [r7, #12]
 8007e16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e18:	fb01 f303 	mul.w	r3, r1, r3
 8007e1c:	441a      	add	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	22ff      	movs	r2, #255	; 0xff
 8007e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	22ff      	movs	r2, #255	; 0xff
 8007e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d114      	bne.n	8007e62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01a      	beq.n	8007e76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3310      	adds	r3, #16
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 fd51 	bl	80098ec <xTaskRemoveFromEventList>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d012      	beq.n	8007e76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e50:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <xQueueGenericReset+0xcc>)
 8007e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e56:	601a      	str	r2, [r3, #0]
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	e009      	b.n	8007e76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3310      	adds	r3, #16
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff fca6 	bl	80077b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3324      	adds	r3, #36	; 0x24
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff fca1 	bl	80077b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e76:	f7ff fead 	bl	8007bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e7a:	2301      	movs	r3, #1
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	e000ed04 	.word	0xe000ed04

08007e88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08e      	sub	sp, #56	; 0x38
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10a      	bne.n	8007eb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007eae:	bf00      	nop
 8007eb0:	e7fe      	b.n	8007eb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10a      	bne.n	8007ece <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007eca:	bf00      	nop
 8007ecc:	e7fe      	b.n	8007ecc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <xQueueGenericCreateStatic+0x52>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <xQueueGenericCreateStatic+0x56>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e000      	b.n	8007ee0 <xQueueGenericCreateStatic+0x58>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10a      	bne.n	8007efa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	623b      	str	r3, [r7, #32]
}
 8007ef6:	bf00      	nop
 8007ef8:	e7fe      	b.n	8007ef8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d102      	bne.n	8007f06 <xQueueGenericCreateStatic+0x7e>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <xQueueGenericCreateStatic+0x82>
 8007f06:	2301      	movs	r3, #1
 8007f08:	e000      	b.n	8007f0c <xQueueGenericCreateStatic+0x84>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10a      	bne.n	8007f26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	61fb      	str	r3, [r7, #28]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f26:	2350      	movs	r3, #80	; 0x50
 8007f28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2b50      	cmp	r3, #80	; 0x50
 8007f2e:	d00a      	beq.n	8007f46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	61bb      	str	r3, [r7, #24]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00d      	beq.n	8007f6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	4613      	mov	r3, r2
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	68b9      	ldr	r1, [r7, #8]
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 f83f 	bl	8007fec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3730      	adds	r7, #48	; 0x30
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08a      	sub	sp, #40	; 0x28
 8007f7c:	af02      	add	r7, sp, #8
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	4613      	mov	r3, r2
 8007f84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10a      	bne.n	8007fa2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	613b      	str	r3, [r7, #16]
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	fb02 f303 	mul.w	r3, r2, r3
 8007faa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	3350      	adds	r3, #80	; 0x50
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7ff fa17 	bl	80073e4 <pvPortMalloc>
 8007fb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d011      	beq.n	8007fe2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	3350      	adds	r3, #80	; 0x50
 8007fc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fd0:	79fa      	ldrb	r2, [r7, #7]
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 f805 	bl	8007fec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007fe2:	69bb      	ldr	r3, [r7, #24]
	}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3720      	adds	r7, #32
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
 8007ff8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d103      	bne.n	8008008 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	e002      	b.n	800800e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800801a:	2101      	movs	r1, #1
 800801c:	69b8      	ldr	r0, [r7, #24]
 800801e:	f7ff fecb 	bl	8007db8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	78fa      	ldrb	r2, [r7, #3]
 8008026:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800802a:	bf00      	nop
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008032:	b580      	push	{r7, lr}
 8008034:	b08a      	sub	sp, #40	; 0x28
 8008036:	af02      	add	r7, sp, #8
 8008038:	60f8      	str	r0, [r7, #12]
 800803a:	60b9      	str	r1, [r7, #8]
 800803c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	61bb      	str	r3, [r7, #24]
}
 8008056:	bf00      	nop
 8008058:	e7fe      	b.n	8008058 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	429a      	cmp	r2, r3
 8008060:	d90a      	bls.n	8008078 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	617b      	str	r3, [r7, #20]
}
 8008074:	bf00      	nop
 8008076:	e7fe      	b.n	8008076 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008078:	2302      	movs	r3, #2
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	2100      	movs	r1, #0
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff ff00 	bl	8007e88 <xQueueGenericCreateStatic>
 8008088:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008096:	69fb      	ldr	r3, [r7, #28]
	}
 8008098:	4618      	mov	r0, r3
 800809a:	3720      	adds	r7, #32
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10a      	bne.n	80080c6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	613b      	str	r3, [r7, #16]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d90a      	bls.n	80080e4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	60fb      	str	r3, [r7, #12]
}
 80080e0:	bf00      	nop
 80080e2:	e7fe      	b.n	80080e2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80080e4:	2202      	movs	r2, #2
 80080e6:	2100      	movs	r1, #0
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff ff45 	bl	8007f78 <xQueueGenericCreate>
 80080ee:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80080fc:	697b      	ldr	r3, [r7, #20]
	}
 80080fe:	4618      	mov	r0, r3
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b08e      	sub	sp, #56	; 0x38
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008116:	2300      	movs	r3, #0
 8008118:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10a      	bne.n	800813a <xQueueGenericSend+0x32>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008136:	bf00      	nop
 8008138:	e7fe      	b.n	8008138 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d103      	bne.n	8008148 <xQueueGenericSend+0x40>
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <xQueueGenericSend+0x44>
 8008148:	2301      	movs	r3, #1
 800814a:	e000      	b.n	800814e <xQueueGenericSend+0x46>
 800814c:	2300      	movs	r3, #0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <xQueueGenericSend+0x60>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008164:	bf00      	nop
 8008166:	e7fe      	b.n	8008166 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2b02      	cmp	r3, #2
 800816c:	d103      	bne.n	8008176 <xQueueGenericSend+0x6e>
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008172:	2b01      	cmp	r3, #1
 8008174:	d101      	bne.n	800817a <xQueueGenericSend+0x72>
 8008176:	2301      	movs	r3, #1
 8008178:	e000      	b.n	800817c <xQueueGenericSend+0x74>
 800817a:	2300      	movs	r3, #0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10a      	bne.n	8008196 <xQueueGenericSend+0x8e>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	623b      	str	r3, [r7, #32]
}
 8008192:	bf00      	nop
 8008194:	e7fe      	b.n	8008194 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008196:	f001 fd6b 	bl	8009c70 <xTaskGetSchedulerState>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d102      	bne.n	80081a6 <xQueueGenericSend+0x9e>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <xQueueGenericSend+0xa2>
 80081a6:	2301      	movs	r3, #1
 80081a8:	e000      	b.n	80081ac <xQueueGenericSend+0xa4>
 80081aa:	2300      	movs	r3, #0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10a      	bne.n	80081c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	61fb      	str	r3, [r7, #28]
}
 80081c2:	bf00      	nop
 80081c4:	e7fe      	b.n	80081c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081c6:	f7ff fcd5 	bl	8007b74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d302      	bcc.n	80081dc <xQueueGenericSend+0xd4>
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d129      	bne.n	8008230 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	68b9      	ldr	r1, [r7, #8]
 80081e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081e2:	f000 fc5e 	bl	8008aa2 <prvCopyDataToQueue>
 80081e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d010      	beq.n	8008212 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	3324      	adds	r3, #36	; 0x24
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 fb79 	bl	80098ec <xTaskRemoveFromEventList>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d013      	beq.n	8008228 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008200:	4b3f      	ldr	r3, [pc, #252]	; (8008300 <xQueueGenericSend+0x1f8>)
 8008202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	e00a      	b.n	8008228 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	2b00      	cmp	r3, #0
 8008216:	d007      	beq.n	8008228 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008218:	4b39      	ldr	r3, [pc, #228]	; (8008300 <xQueueGenericSend+0x1f8>)
 800821a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008228:	f7ff fcd4 	bl	8007bd4 <vPortExitCritical>
				return pdPASS;
 800822c:	2301      	movs	r3, #1
 800822e:	e063      	b.n	80082f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d103      	bne.n	800823e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008236:	f7ff fccd 	bl	8007bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800823a:	2300      	movs	r3, #0
 800823c:	e05c      	b.n	80082f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800823e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008240:	2b00      	cmp	r3, #0
 8008242:	d106      	bne.n	8008252 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008244:	f107 0314 	add.w	r3, r7, #20
 8008248:	4618      	mov	r0, r3
 800824a:	f001 fbb3 	bl	80099b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800824e:	2301      	movs	r3, #1
 8008250:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008252:	f7ff fcbf 	bl	8007bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008256:	f001 f91f 	bl	8009498 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800825a:	f7ff fc8b 	bl	8007b74 <vPortEnterCritical>
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008264:	b25b      	sxtb	r3, r3
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826a:	d103      	bne.n	8008274 <xQueueGenericSend+0x16c>
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800827a:	b25b      	sxtb	r3, r3
 800827c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008280:	d103      	bne.n	800828a <xQueueGenericSend+0x182>
 8008282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800828a:	f7ff fca3 	bl	8007bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800828e:	1d3a      	adds	r2, r7, #4
 8008290:	f107 0314 	add.w	r3, r7, #20
 8008294:	4611      	mov	r1, r2
 8008296:	4618      	mov	r0, r3
 8008298:	f001 fba2 	bl	80099e0 <xTaskCheckForTimeOut>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d124      	bne.n	80082ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082a4:	f000 fcf5 	bl	8008c92 <prvIsQueueFull>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d018      	beq.n	80082e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	3310      	adds	r3, #16
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	4611      	mov	r1, r2
 80082b6:	4618      	mov	r0, r3
 80082b8:	f001 fac8 	bl	800984c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082be:	f000 fc80 	bl	8008bc2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082c2:	f001 f8f7 	bl	80094b4 <xTaskResumeAll>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f47f af7c 	bne.w	80081c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80082ce:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <xQueueGenericSend+0x1f8>)
 80082d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	e772      	b.n	80081c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082e2:	f000 fc6e 	bl	8008bc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082e6:	f001 f8e5 	bl	80094b4 <xTaskResumeAll>
 80082ea:	e76c      	b.n	80081c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ee:	f000 fc68 	bl	8008bc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082f2:	f001 f8df 	bl	80094b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3738      	adds	r7, #56	; 0x38
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	e000ed04 	.word	0xe000ed04

08008304 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b090      	sub	sp, #64	; 0x40
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10a      	bne.n	8008332 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008320:	f383 8811 	msr	BASEPRI, r3
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800832e:	bf00      	nop
 8008330:	e7fe      	b.n	8008330 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d103      	bne.n	8008340 <xQueueGenericSendFromISR+0x3c>
 8008338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <xQueueGenericSendFromISR+0x40>
 8008340:	2301      	movs	r3, #1
 8008342:	e000      	b.n	8008346 <xQueueGenericSendFromISR+0x42>
 8008344:	2300      	movs	r3, #0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10a      	bne.n	8008360 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800835c:	bf00      	nop
 800835e:	e7fe      	b.n	800835e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d103      	bne.n	800836e <xQueueGenericSendFromISR+0x6a>
 8008366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836a:	2b01      	cmp	r3, #1
 800836c:	d101      	bne.n	8008372 <xQueueGenericSendFromISR+0x6e>
 800836e:	2301      	movs	r3, #1
 8008370:	e000      	b.n	8008374 <xQueueGenericSendFromISR+0x70>
 8008372:	2300      	movs	r3, #0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	623b      	str	r3, [r7, #32]
}
 800838a:	bf00      	nop
 800838c:	e7fe      	b.n	800838c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800838e:	f7ff fcd3 	bl	8007d38 <vPortValidateInterruptPriority>
	__asm volatile
 8008392:	f3ef 8211 	mrs	r2, BASEPRI
 8008396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839a:	f383 8811 	msr	BASEPRI, r3
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f3bf 8f4f 	dsb	sy
 80083a6:	61fa      	str	r2, [r7, #28]
 80083a8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80083aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d302      	bcc.n	80083c0 <xQueueGenericSendFromISR+0xbc>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d12f      	bne.n	8008420 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	68b9      	ldr	r1, [r7, #8]
 80083d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083d6:	f000 fb64 	bl	8008aa2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80083de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e2:	d112      	bne.n	800840a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d016      	beq.n	800841a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	3324      	adds	r3, #36	; 0x24
 80083f0:	4618      	mov	r0, r3
 80083f2:	f001 fa7b 	bl	80098ec <xTaskRemoveFromEventList>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00e      	beq.n	800841a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00b      	beq.n	800841a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	e007      	b.n	800841a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800840a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800840e:	3301      	adds	r3, #1
 8008410:	b2db      	uxtb	r3, r3
 8008412:	b25a      	sxtb	r2, r3
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800841a:	2301      	movs	r3, #1
 800841c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800841e:	e001      	b.n	8008424 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008420:	2300      	movs	r3, #0
 8008422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008426:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f383 8811 	msr	BASEPRI, r3
}
 800842e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008432:	4618      	mov	r0, r3
 8008434:	3740      	adds	r7, #64	; 0x40
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b08e      	sub	sp, #56	; 0x38
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10a      	bne.n	8008464 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	623b      	str	r3, [r7, #32]
}
 8008460:	bf00      	nop
 8008462:	e7fe      	b.n	8008462 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00a      	beq.n	8008482 <xQueueGiveFromISR+0x48>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	61fb      	str	r3, [r7, #28]
}
 800847e:	bf00      	nop
 8008480:	e7fe      	b.n	8008480 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d103      	bne.n	8008492 <xQueueGiveFromISR+0x58>
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <xQueueGiveFromISR+0x5c>
 8008492:	2301      	movs	r3, #1
 8008494:	e000      	b.n	8008498 <xQueueGiveFromISR+0x5e>
 8008496:	2300      	movs	r3, #0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10a      	bne.n	80084b2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800849c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a0:	f383 8811 	msr	BASEPRI, r3
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	61bb      	str	r3, [r7, #24]
}
 80084ae:	bf00      	nop
 80084b0:	e7fe      	b.n	80084b0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084b2:	f7ff fc41 	bl	8007d38 <vPortValidateInterruptPriority>
	__asm volatile
 80084b6:	f3ef 8211 	mrs	r2, BASEPRI
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	617a      	str	r2, [r7, #20]
 80084cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80084ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084de:	429a      	cmp	r2, r3
 80084e0:	d22b      	bcs.n	800853a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fc:	d112      	bne.n	8008524 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	2b00      	cmp	r3, #0
 8008504:	d016      	beq.n	8008534 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	3324      	adds	r3, #36	; 0x24
 800850a:	4618      	mov	r0, r3
 800850c:	f001 f9ee 	bl	80098ec <xTaskRemoveFromEventList>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00e      	beq.n	8008534 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00b      	beq.n	8008534 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2201      	movs	r2, #1
 8008520:	601a      	str	r2, [r3, #0]
 8008522:	e007      	b.n	8008534 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008528:	3301      	adds	r3, #1
 800852a:	b2db      	uxtb	r3, r3
 800852c:	b25a      	sxtb	r2, r3
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008534:	2301      	movs	r3, #1
 8008536:	637b      	str	r3, [r7, #52]	; 0x34
 8008538:	e001      	b.n	800853e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800853a:	2300      	movs	r3, #0
 800853c:	637b      	str	r3, [r7, #52]	; 0x34
 800853e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008540:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f383 8811 	msr	BASEPRI, r3
}
 8008548:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800854a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800854c:	4618      	mov	r0, r3
 800854e:	3738      	adds	r7, #56	; 0x38
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b08c      	sub	sp, #48	; 0x30
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008560:	2300      	movs	r3, #0
 8008562:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10a      	bne.n	8008584 <xQueueReceive+0x30>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	623b      	str	r3, [r7, #32]
}
 8008580:	bf00      	nop
 8008582:	e7fe      	b.n	8008582 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d103      	bne.n	8008592 <xQueueReceive+0x3e>
 800858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <xQueueReceive+0x42>
 8008592:	2301      	movs	r3, #1
 8008594:	e000      	b.n	8008598 <xQueueReceive+0x44>
 8008596:	2300      	movs	r3, #0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10a      	bne.n	80085b2 <xQueueReceive+0x5e>
	__asm volatile
 800859c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a0:	f383 8811 	msr	BASEPRI, r3
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	61fb      	str	r3, [r7, #28]
}
 80085ae:	bf00      	nop
 80085b0:	e7fe      	b.n	80085b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085b2:	f001 fb5d 	bl	8009c70 <xTaskGetSchedulerState>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d102      	bne.n	80085c2 <xQueueReceive+0x6e>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <xQueueReceive+0x72>
 80085c2:	2301      	movs	r3, #1
 80085c4:	e000      	b.n	80085c8 <xQueueReceive+0x74>
 80085c6:	2300      	movs	r3, #0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10a      	bne.n	80085e2 <xQueueReceive+0x8e>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	61bb      	str	r3, [r7, #24]
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085e2:	f7ff fac7 	bl	8007b74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d01f      	beq.n	8008632 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085f2:	68b9      	ldr	r1, [r7, #8]
 80085f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085f6:	f000 fabe 	bl	8008b76 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	1e5a      	subs	r2, r3, #1
 80085fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008600:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00f      	beq.n	800862a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800860a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860c:	3310      	adds	r3, #16
 800860e:	4618      	mov	r0, r3
 8008610:	f001 f96c 	bl	80098ec <xTaskRemoveFromEventList>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800861a:	4b3d      	ldr	r3, [pc, #244]	; (8008710 <xQueueReceive+0x1bc>)
 800861c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800862a:	f7ff fad3 	bl	8007bd4 <vPortExitCritical>
				return pdPASS;
 800862e:	2301      	movs	r3, #1
 8008630:	e069      	b.n	8008706 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d103      	bne.n	8008640 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008638:	f7ff facc 	bl	8007bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800863c:	2300      	movs	r3, #0
 800863e:	e062      	b.n	8008706 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008642:	2b00      	cmp	r3, #0
 8008644:	d106      	bne.n	8008654 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008646:	f107 0310 	add.w	r3, r7, #16
 800864a:	4618      	mov	r0, r3
 800864c:	f001 f9b2 	bl	80099b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008650:	2301      	movs	r3, #1
 8008652:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008654:	f7ff fabe 	bl	8007bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008658:	f000 ff1e 	bl	8009498 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800865c:	f7ff fa8a 	bl	8007b74 <vPortEnterCritical>
 8008660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008666:	b25b      	sxtb	r3, r3
 8008668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800866c:	d103      	bne.n	8008676 <xQueueReceive+0x122>
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800867c:	b25b      	sxtb	r3, r3
 800867e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008682:	d103      	bne.n	800868c <xQueueReceive+0x138>
 8008684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800868c:	f7ff faa2 	bl	8007bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008690:	1d3a      	adds	r2, r7, #4
 8008692:	f107 0310 	add.w	r3, r7, #16
 8008696:	4611      	mov	r1, r2
 8008698:	4618      	mov	r0, r3
 800869a:	f001 f9a1 	bl	80099e0 <xTaskCheckForTimeOut>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d123      	bne.n	80086ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086a6:	f000 fade 	bl	8008c66 <prvIsQueueEmpty>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d017      	beq.n	80086e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	3324      	adds	r3, #36	; 0x24
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	4611      	mov	r1, r2
 80086b8:	4618      	mov	r0, r3
 80086ba:	f001 f8c7 	bl	800984c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086c0:	f000 fa7f 	bl	8008bc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086c4:	f000 fef6 	bl	80094b4 <xTaskResumeAll>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d189      	bne.n	80085e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80086ce:	4b10      	ldr	r3, [pc, #64]	; (8008710 <xQueueReceive+0x1bc>)
 80086d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	e780      	b.n	80085e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80086e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086e2:	f000 fa6e 	bl	8008bc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086e6:	f000 fee5 	bl	80094b4 <xTaskResumeAll>
 80086ea:	e77a      	b.n	80085e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80086ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086ee:	f000 fa68 	bl	8008bc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086f2:	f000 fedf 	bl	80094b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086f8:	f000 fab5 	bl	8008c66 <prvIsQueueEmpty>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f43f af6f 	beq.w	80085e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008704:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008706:	4618      	mov	r0, r3
 8008708:	3730      	adds	r7, #48	; 0x30
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	e000ed04 	.word	0xe000ed04

08008714 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b08e      	sub	sp, #56	; 0x38
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800871e:	2300      	movs	r3, #0
 8008720:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008726:	2300      	movs	r3, #0
 8008728:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800872a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10a      	bne.n	8008746 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	623b      	str	r3, [r7, #32]
}
 8008742:	bf00      	nop
 8008744:	e7fe      	b.n	8008744 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00a      	beq.n	8008764 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	61fb      	str	r3, [r7, #28]
}
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008764:	f001 fa84 	bl	8009c70 <xTaskGetSchedulerState>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d102      	bne.n	8008774 <xQueueSemaphoreTake+0x60>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d101      	bne.n	8008778 <xQueueSemaphoreTake+0x64>
 8008774:	2301      	movs	r3, #1
 8008776:	e000      	b.n	800877a <xQueueSemaphoreTake+0x66>
 8008778:	2300      	movs	r3, #0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10a      	bne.n	8008794 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	61bb      	str	r3, [r7, #24]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008794:	f7ff f9ee 	bl	8007b74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800879e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d024      	beq.n	80087ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	1e5a      	subs	r2, r3, #1
 80087a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d104      	bne.n	80087be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80087b4:	f001 fbd2 	bl	8009f5c <pvTaskIncrementMutexHeldCount>
 80087b8:	4602      	mov	r2, r0
 80087ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00f      	beq.n	80087e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c8:	3310      	adds	r3, #16
 80087ca:	4618      	mov	r0, r3
 80087cc:	f001 f88e 	bl	80098ec <xTaskRemoveFromEventList>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d007      	beq.n	80087e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087d6:	4b54      	ldr	r3, [pc, #336]	; (8008928 <xQueueSemaphoreTake+0x214>)
 80087d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087e6:	f7ff f9f5 	bl	8007bd4 <vPortExitCritical>
				return pdPASS;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e097      	b.n	800891e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d111      	bne.n	8008818 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80087f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00a      	beq.n	8008810 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	617b      	str	r3, [r7, #20]
}
 800880c:	bf00      	nop
 800880e:	e7fe      	b.n	800880e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008810:	f7ff f9e0 	bl	8007bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008814:	2300      	movs	r3, #0
 8008816:	e082      	b.n	800891e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881a:	2b00      	cmp	r3, #0
 800881c:	d106      	bne.n	800882c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800881e:	f107 030c 	add.w	r3, r7, #12
 8008822:	4618      	mov	r0, r3
 8008824:	f001 f8c6 	bl	80099b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008828:	2301      	movs	r3, #1
 800882a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800882c:	f7ff f9d2 	bl	8007bd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008830:	f000 fe32 	bl	8009498 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008834:	f7ff f99e 	bl	8007b74 <vPortEnterCritical>
 8008838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800883e:	b25b      	sxtb	r3, r3
 8008840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008844:	d103      	bne.n	800884e <xQueueSemaphoreTake+0x13a>
 8008846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008848:	2200      	movs	r2, #0
 800884a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008854:	b25b      	sxtb	r3, r3
 8008856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885a:	d103      	bne.n	8008864 <xQueueSemaphoreTake+0x150>
 800885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885e:	2200      	movs	r2, #0
 8008860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008864:	f7ff f9b6 	bl	8007bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008868:	463a      	mov	r2, r7
 800886a:	f107 030c 	add.w	r3, r7, #12
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f001 f8b5 	bl	80099e0 <xTaskCheckForTimeOut>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d132      	bne.n	80088e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800887c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800887e:	f000 f9f2 	bl	8008c66 <prvIsQueueEmpty>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d026      	beq.n	80088d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d109      	bne.n	80088a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008890:	f7ff f970 	bl	8007b74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	4618      	mov	r0, r3
 800889a:	f001 fa07 	bl	8009cac <xTaskPriorityInherit>
 800889e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80088a0:	f7ff f998 	bl	8007bd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a6:	3324      	adds	r3, #36	; 0x24
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	4611      	mov	r1, r2
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 ffcd 	bl	800984c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088b4:	f000 f985 	bl	8008bc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088b8:	f000 fdfc 	bl	80094b4 <xTaskResumeAll>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f47f af68 	bne.w	8008794 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80088c4:	4b18      	ldr	r3, [pc, #96]	; (8008928 <xQueueSemaphoreTake+0x214>)
 80088c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	e75e      	b.n	8008794 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80088d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088d8:	f000 f973 	bl	8008bc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088dc:	f000 fdea 	bl	80094b4 <xTaskResumeAll>
 80088e0:	e758      	b.n	8008794 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80088e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088e4:	f000 f96d 	bl	8008bc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088e8:	f000 fde4 	bl	80094b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088ee:	f000 f9ba 	bl	8008c66 <prvIsQueueEmpty>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f43f af4d 	beq.w	8008794 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00d      	beq.n	800891c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008900:	f7ff f938 	bl	8007b74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008904:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008906:	f000 f8b4 	bl	8008a72 <prvGetDisinheritPriorityAfterTimeout>
 800890a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008912:	4618      	mov	r0, r3
 8008914:	f001 faa0 	bl	8009e58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008918:	f7ff f95c 	bl	8007bd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800891c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800891e:	4618      	mov	r0, r3
 8008920:	3738      	adds	r7, #56	; 0x38
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	e000ed04 	.word	0xe000ed04

0800892c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b08e      	sub	sp, #56	; 0x38
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800893c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10a      	bne.n	8008958 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	623b      	str	r3, [r7, #32]
}
 8008954:	bf00      	nop
 8008956:	e7fe      	b.n	8008956 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d103      	bne.n	8008966 <xQueueReceiveFromISR+0x3a>
 800895e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <xQueueReceiveFromISR+0x3e>
 8008966:	2301      	movs	r3, #1
 8008968:	e000      	b.n	800896c <xQueueReceiveFromISR+0x40>
 800896a:	2300      	movs	r3, #0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10a      	bne.n	8008986 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	61fb      	str	r3, [r7, #28]
}
 8008982:	bf00      	nop
 8008984:	e7fe      	b.n	8008984 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008986:	f7ff f9d7 	bl	8007d38 <vPortValidateInterruptPriority>
	__asm volatile
 800898a:	f3ef 8211 	mrs	r2, BASEPRI
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	61ba      	str	r2, [r7, #24]
 80089a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80089a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d02f      	beq.n	8008a12 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80089b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089c0:	f000 f8d9 	bl	8008b76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c6:	1e5a      	subs	r2, r3, #1
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80089cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d4:	d112      	bne.n	80089fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d016      	beq.n	8008a0c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e0:	3310      	adds	r3, #16
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 ff82 	bl	80098ec <xTaskRemoveFromEventList>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00e      	beq.n	8008a0c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	e007      	b.n	8008a0c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80089fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a00:	3301      	adds	r3, #1
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	b25a      	sxtb	r2, r3
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a10:	e001      	b.n	8008a16 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	637b      	str	r3, [r7, #52]	; 0x34
 8008a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a18:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	f383 8811 	msr	BASEPRI, r3
}
 8008a20:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3738      	adds	r7, #56	; 0x38
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10a      	bne.n	8008a54 <vQueueDelete+0x28>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	60bb      	str	r3, [r7, #8]
}
 8008a50:	bf00      	nop
 8008a52:	e7fe      	b.n	8008a52 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 f95f 	bl	8008d18 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d102      	bne.n	8008a6a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f7fe fd89 	bl	800757c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008a6a:	bf00      	nop
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008a72:	b480      	push	{r7}
 8008a74:	b085      	sub	sp, #20
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d006      	beq.n	8008a90 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008a8c:	60fb      	str	r3, [r7, #12]
 8008a8e:	e001      	b.n	8008a94 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008a90:	2300      	movs	r3, #0
 8008a92:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008a94:	68fb      	ldr	r3, [r7, #12]
	}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b086      	sub	sp, #24
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10d      	bne.n	8008adc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d14d      	bne.n	8008b64 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f001 f955 	bl	8009d7c <xTaskPriorityDisinherit>
 8008ad2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	609a      	str	r2, [r3, #8]
 8008ada:	e043      	b.n	8008b64 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d119      	bne.n	8008b16 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6858      	ldr	r0, [r3, #4]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aea:	461a      	mov	r2, r3
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	f001 fefb 	bl	800a8e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afa:	441a      	add	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d32b      	bcc.n	8008b64 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	605a      	str	r2, [r3, #4]
 8008b14:	e026      	b.n	8008b64 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	68d8      	ldr	r0, [r3, #12]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1e:	461a      	mov	r2, r3
 8008b20:	68b9      	ldr	r1, [r7, #8]
 8008b22:	f001 fee1 	bl	800a8e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	68da      	ldr	r2, [r3, #12]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2e:	425b      	negs	r3, r3
 8008b30:	441a      	add	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	68da      	ldr	r2, [r3, #12]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d207      	bcs.n	8008b52 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	689a      	ldr	r2, [r3, #8]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	425b      	negs	r3, r3
 8008b4c:	441a      	add	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d105      	bne.n	8008b64 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b6c:	697b      	ldr	r3, [r7, #20]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b082      	sub	sp, #8
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d018      	beq.n	8008bba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	68da      	ldr	r2, [r3, #12]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b90:	441a      	add	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d303      	bcc.n	8008baa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68d9      	ldr	r1, [r3, #12]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	6838      	ldr	r0, [r7, #0]
 8008bb6:	f001 fe97 	bl	800a8e8 <memcpy>
	}
}
 8008bba:	bf00      	nop
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008bca:	f7fe ffd3 	bl	8007b74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bd4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bd6:	e011      	b.n	8008bfc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d012      	beq.n	8008c06 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	3324      	adds	r3, #36	; 0x24
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 fe81 	bl	80098ec <xTaskRemoveFromEventList>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008bf0:	f000 ff58 	bl	8009aa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	dce9      	bgt.n	8008bd8 <prvUnlockQueue+0x16>
 8008c04:	e000      	b.n	8008c08 <prvUnlockQueue+0x46>
					break;
 8008c06:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	22ff      	movs	r2, #255	; 0xff
 8008c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008c10:	f7fe ffe0 	bl	8007bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c14:	f7fe ffae 	bl	8007b74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c1e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c20:	e011      	b.n	8008c46 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d012      	beq.n	8008c50 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	3310      	adds	r3, #16
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 fe5c 	bl	80098ec <xTaskRemoveFromEventList>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c3a:	f000 ff33 	bl	8009aa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	dce9      	bgt.n	8008c22 <prvUnlockQueue+0x60>
 8008c4e:	e000      	b.n	8008c52 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c50:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	22ff      	movs	r2, #255	; 0xff
 8008c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c5a:	f7fe ffbb 	bl	8007bd4 <vPortExitCritical>
}
 8008c5e:	bf00      	nop
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c6e:	f7fe ff81 	bl	8007b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d102      	bne.n	8008c80 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	e001      	b.n	8008c84 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c80:	2300      	movs	r3, #0
 8008c82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c84:	f7fe ffa6 	bl	8007bd4 <vPortExitCritical>

	return xReturn;
 8008c88:	68fb      	ldr	r3, [r7, #12]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c9a:	f7fe ff6b 	bl	8007b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d102      	bne.n	8008cb0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008caa:	2301      	movs	r3, #1
 8008cac:	60fb      	str	r3, [r7, #12]
 8008cae:	e001      	b.n	8008cb4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cb4:	f7fe ff8e 	bl	8007bd4 <vPortExitCritical>

	return xReturn;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
	...

08008cc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cce:	2300      	movs	r3, #0
 8008cd0:	60fb      	str	r3, [r7, #12]
 8008cd2:	e014      	b.n	8008cfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008cd4:	4a0f      	ldr	r2, [pc, #60]	; (8008d14 <vQueueAddToRegistry+0x50>)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10b      	bne.n	8008cf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ce0:	490c      	ldr	r1, [pc, #48]	; (8008d14 <vQueueAddToRegistry+0x50>)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008cea:	4a0a      	ldr	r2, [pc, #40]	; (8008d14 <vQueueAddToRegistry+0x50>)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	00db      	lsls	r3, r3, #3
 8008cf0:	4413      	add	r3, r2
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008cf6:	e006      	b.n	8008d06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	60fb      	str	r3, [r7, #12]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b07      	cmp	r3, #7
 8008d02:	d9e7      	bls.n	8008cd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	20004740 	.word	0x20004740

08008d18 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d20:	2300      	movs	r3, #0
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	e016      	b.n	8008d54 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008d26:	4a10      	ldr	r2, [pc, #64]	; (8008d68 <vQueueUnregisterQueue+0x50>)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	00db      	lsls	r3, r3, #3
 8008d2c:	4413      	add	r3, r2
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d10b      	bne.n	8008d4e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008d36:	4a0c      	ldr	r2, [pc, #48]	; (8008d68 <vQueueUnregisterQueue+0x50>)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008d40:	4a09      	ldr	r2, [pc, #36]	; (8008d68 <vQueueUnregisterQueue+0x50>)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	00db      	lsls	r3, r3, #3
 8008d46:	4413      	add	r3, r2
 8008d48:	2200      	movs	r2, #0
 8008d4a:	605a      	str	r2, [r3, #4]
				break;
 8008d4c:	e006      	b.n	8008d5c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	3301      	adds	r3, #1
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b07      	cmp	r3, #7
 8008d58:	d9e5      	bls.n	8008d26 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008d5a:	bf00      	nop
 8008d5c:	bf00      	nop
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	20004740 	.word	0x20004740

08008d6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d7c:	f7fe fefa 	bl	8007b74 <vPortEnterCritical>
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d86:	b25b      	sxtb	r3, r3
 8008d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8c:	d103      	bne.n	8008d96 <vQueueWaitForMessageRestricted+0x2a>
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d9c:	b25b      	sxtb	r3, r3
 8008d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da2:	d103      	bne.n	8008dac <vQueueWaitForMessageRestricted+0x40>
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dac:	f7fe ff12 	bl	8007bd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d106      	bne.n	8008dc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	3324      	adds	r3, #36	; 0x24
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	68b9      	ldr	r1, [r7, #8]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 fd67 	bl	8009894 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008dc6:	6978      	ldr	r0, [r7, #20]
 8008dc8:	f7ff fefb 	bl	8008bc2 <prvUnlockQueue>
	}
 8008dcc:	bf00      	nop
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08e      	sub	sp, #56	; 0x38
 8008dd8:	af04      	add	r7, sp, #16
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
 8008de0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10a      	bne.n	8008dfe <xTaskCreateStatic+0x2a>
	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	623b      	str	r3, [r7, #32]
}
 8008dfa:	bf00      	nop
 8008dfc:	e7fe      	b.n	8008dfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10a      	bne.n	8008e1a <xTaskCreateStatic+0x46>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	61fb      	str	r3, [r7, #28]
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e1a:	23bc      	movs	r3, #188	; 0xbc
 8008e1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	2bbc      	cmp	r3, #188	; 0xbc
 8008e22:	d00a      	beq.n	8008e3a <xTaskCreateStatic+0x66>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	61bb      	str	r3, [r7, #24]
}
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d01e      	beq.n	8008e80 <xTaskCreateStatic+0xac>
 8008e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d01b      	beq.n	8008e80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	2202      	movs	r2, #2
 8008e56:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	9303      	str	r3, [sp, #12]
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	9302      	str	r3, [sp, #8]
 8008e62:	f107 0314 	add.w	r3, r7, #20
 8008e66:	9301      	str	r3, [sp, #4]
 8008e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	68b9      	ldr	r1, [r7, #8]
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 f850 	bl	8008f18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e7a:	f000 f8f3 	bl	8009064 <prvAddNewTaskToReadyList>
 8008e7e:	e001      	b.n	8008e84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008e80:	2300      	movs	r3, #0
 8008e82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e84:	697b      	ldr	r3, [r7, #20]
	}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3728      	adds	r7, #40	; 0x28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b08c      	sub	sp, #48	; 0x30
 8008e92:	af04      	add	r7, sp, #16
 8008e94:	60f8      	str	r0, [r7, #12]
 8008e96:	60b9      	str	r1, [r7, #8]
 8008e98:	603b      	str	r3, [r7, #0]
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e9e:	88fb      	ldrh	r3, [r7, #6]
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fe fa9e 	bl	80073e4 <pvPortMalloc>
 8008ea8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00e      	beq.n	8008ece <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008eb0:	20bc      	movs	r0, #188	; 0xbc
 8008eb2:	f7fe fa97 	bl	80073e4 <pvPortMalloc>
 8008eb6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d003      	beq.n	8008ec6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8008ec4:	e005      	b.n	8008ed2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ec6:	6978      	ldr	r0, [r7, #20]
 8008ec8:	f7fe fb58 	bl	800757c <vPortFree>
 8008ecc:	e001      	b.n	8008ed2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d017      	beq.n	8008f08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ee0:	88fa      	ldrh	r2, [r7, #6]
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	9303      	str	r3, [sp, #12]
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	9302      	str	r3, [sp, #8]
 8008eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eec:	9301      	str	r3, [sp, #4]
 8008eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	68b9      	ldr	r1, [r7, #8]
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 f80e 	bl	8008f18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008efc:	69f8      	ldr	r0, [r7, #28]
 8008efe:	f000 f8b1 	bl	8009064 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f02:	2301      	movs	r3, #1
 8008f04:	61bb      	str	r3, [r7, #24]
 8008f06:	e002      	b.n	8008f0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f08:	f04f 33ff 	mov.w	r3, #4294967295
 8008f0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f0e:	69bb      	ldr	r3, [r7, #24]
	}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3720      	adds	r7, #32
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	461a      	mov	r2, r3
 8008f30:	21a5      	movs	r1, #165	; 0xa5
 8008f32:	f001 fce7 	bl	800a904 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f40:	3b01      	subs	r3, #1
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4413      	add	r3, r2
 8008f46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	f023 0307 	bic.w	r3, r3, #7
 8008f4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	f003 0307 	and.w	r3, r3, #7
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00a      	beq.n	8008f70 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	617b      	str	r3, [r7, #20]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d01f      	beq.n	8008fb6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f76:	2300      	movs	r3, #0
 8008f78:	61fb      	str	r3, [r7, #28]
 8008f7a:	e012      	b.n	8008fa2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	4413      	add	r3, r2
 8008f82:	7819      	ldrb	r1, [r3, #0]
 8008f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	4413      	add	r3, r2
 8008f8a:	3334      	adds	r3, #52	; 0x34
 8008f8c:	460a      	mov	r2, r1
 8008f8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	4413      	add	r3, r2
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d006      	beq.n	8008faa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	61fb      	str	r3, [r7, #28]
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	2b0f      	cmp	r3, #15
 8008fa6:	d9e9      	bls.n	8008f7c <prvInitialiseNewTask+0x64>
 8008fa8:	e000      	b.n	8008fac <prvInitialiseNewTask+0x94>
			{
				break;
 8008faa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fb4:	e003      	b.n	8008fbe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc0:	2b37      	cmp	r3, #55	; 0x37
 8008fc2:	d901      	bls.n	8008fc8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fc4:	2337      	movs	r3, #55	; 0x37
 8008fc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	3304      	adds	r3, #4
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fe fc0a 	bl	80077f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	3318      	adds	r3, #24
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fe fc05 	bl	80077f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ff2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009002:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	2200      	movs	r2, #0
 8009008:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800900c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900e:	2200      	movs	r2, #0
 8009010:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	3354      	adds	r3, #84	; 0x54
 8009018:	2260      	movs	r2, #96	; 0x60
 800901a:	2100      	movs	r1, #0
 800901c:	4618      	mov	r0, r3
 800901e:	f001 fc71 	bl	800a904 <memset>
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	4a0c      	ldr	r2, [pc, #48]	; (8009058 <prvInitialiseNewTask+0x140>)
 8009026:	659a      	str	r2, [r3, #88]	; 0x58
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	4a0c      	ldr	r2, [pc, #48]	; (800905c <prvInitialiseNewTask+0x144>)
 800902c:	65da      	str	r2, [r3, #92]	; 0x5c
 800902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009030:	4a0b      	ldr	r2, [pc, #44]	; (8009060 <prvInitialiseNewTask+0x148>)
 8009032:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	68f9      	ldr	r1, [r7, #12]
 8009038:	69b8      	ldr	r0, [r7, #24]
 800903a:	f7fe fc71 	bl	8007920 <pxPortInitialiseStack>
 800903e:	4602      	mov	r2, r0
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d002      	beq.n	8009050 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800904e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009050:	bf00      	nop
 8009052:	3720      	adds	r7, #32
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	0800d360 	.word	0x0800d360
 800905c:	0800d380 	.word	0x0800d380
 8009060:	0800d340 	.word	0x0800d340

08009064 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800906c:	f7fe fd82 	bl	8007b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009070:	4b2d      	ldr	r3, [pc, #180]	; (8009128 <prvAddNewTaskToReadyList+0xc4>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3301      	adds	r3, #1
 8009076:	4a2c      	ldr	r2, [pc, #176]	; (8009128 <prvAddNewTaskToReadyList+0xc4>)
 8009078:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800907a:	4b2c      	ldr	r3, [pc, #176]	; (800912c <prvAddNewTaskToReadyList+0xc8>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d109      	bne.n	8009096 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009082:	4a2a      	ldr	r2, [pc, #168]	; (800912c <prvAddNewTaskToReadyList+0xc8>)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009088:	4b27      	ldr	r3, [pc, #156]	; (8009128 <prvAddNewTaskToReadyList+0xc4>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d110      	bne.n	80090b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009090:	f000 fd2c 	bl	8009aec <prvInitialiseTaskLists>
 8009094:	e00d      	b.n	80090b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009096:	4b26      	ldr	r3, [pc, #152]	; (8009130 <prvAddNewTaskToReadyList+0xcc>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d109      	bne.n	80090b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800909e:	4b23      	ldr	r3, [pc, #140]	; (800912c <prvAddNewTaskToReadyList+0xc8>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d802      	bhi.n	80090b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090ac:	4a1f      	ldr	r2, [pc, #124]	; (800912c <prvAddNewTaskToReadyList+0xc8>)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090b2:	4b20      	ldr	r3, [pc, #128]	; (8009134 <prvAddNewTaskToReadyList+0xd0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3301      	adds	r3, #1
 80090b8:	4a1e      	ldr	r2, [pc, #120]	; (8009134 <prvAddNewTaskToReadyList+0xd0>)
 80090ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090bc:	4b1d      	ldr	r3, [pc, #116]	; (8009134 <prvAddNewTaskToReadyList+0xd0>)
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c8:	4b1b      	ldr	r3, [pc, #108]	; (8009138 <prvAddNewTaskToReadyList+0xd4>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d903      	bls.n	80090d8 <prvAddNewTaskToReadyList+0x74>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d4:	4a18      	ldr	r2, [pc, #96]	; (8009138 <prvAddNewTaskToReadyList+0xd4>)
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090dc:	4613      	mov	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4a15      	ldr	r2, [pc, #84]	; (800913c <prvAddNewTaskToReadyList+0xd8>)
 80090e6:	441a      	add	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4619      	mov	r1, r3
 80090ee:	4610      	mov	r0, r2
 80090f0:	f7fe fb8f 	bl	8007812 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80090f4:	f7fe fd6e 	bl	8007bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80090f8:	4b0d      	ldr	r3, [pc, #52]	; (8009130 <prvAddNewTaskToReadyList+0xcc>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00e      	beq.n	800911e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009100:	4b0a      	ldr	r3, [pc, #40]	; (800912c <prvAddNewTaskToReadyList+0xc8>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910a:	429a      	cmp	r2, r3
 800910c:	d207      	bcs.n	800911e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800910e:	4b0c      	ldr	r3, [pc, #48]	; (8009140 <prvAddNewTaskToReadyList+0xdc>)
 8009110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009114:	601a      	str	r2, [r3, #0]
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800911e:	bf00      	nop
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20004c54 	.word	0x20004c54
 800912c:	20004780 	.word	0x20004780
 8009130:	20004c60 	.word	0x20004c60
 8009134:	20004c70 	.word	0x20004c70
 8009138:	20004c5c 	.word	0x20004c5c
 800913c:	20004784 	.word	0x20004784
 8009140:	e000ed04 	.word	0xe000ed04

08009144 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800914c:	2300      	movs	r3, #0
 800914e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d017      	beq.n	8009186 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009156:	4b13      	ldr	r3, [pc, #76]	; (80091a4 <vTaskDelay+0x60>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00a      	beq.n	8009174 <vTaskDelay+0x30>
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009162:	f383 8811 	msr	BASEPRI, r3
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	60bb      	str	r3, [r7, #8]
}
 8009170:	bf00      	nop
 8009172:	e7fe      	b.n	8009172 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009174:	f000 f990 	bl	8009498 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009178:	2100      	movs	r1, #0
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 ff02 	bl	8009f84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009180:	f000 f998 	bl	80094b4 <xTaskResumeAll>
 8009184:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d107      	bne.n	800919c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800918c:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <vTaskDelay+0x64>)
 800918e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800919c:	bf00      	nop
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	20004c7c 	.word	0x20004c7c
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80091b4:	f7fe fcde 	bl	8007b74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d102      	bne.n	80091c4 <vTaskSuspend+0x18>
 80091be:	4b30      	ldr	r3, [pc, #192]	; (8009280 <vTaskSuspend+0xd4>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	e000      	b.n	80091c6 <vTaskSuspend+0x1a>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3304      	adds	r3, #4
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fe fb7d 	bl	80078cc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d004      	beq.n	80091e4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3318      	adds	r3, #24
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fe fb74 	bl	80078cc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	3304      	adds	r3, #4
 80091e8:	4619      	mov	r1, r3
 80091ea:	4826      	ldr	r0, [pc, #152]	; (8009284 <vTaskSuspend+0xd8>)
 80091ec:	f7fe fb11 	bl	8007812 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d103      	bne.n	8009204 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009204:	f7fe fce6 	bl	8007bd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009208:	4b1f      	ldr	r3, [pc, #124]	; (8009288 <vTaskSuspend+0xdc>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d005      	beq.n	800921c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009210:	f7fe fcb0 	bl	8007b74 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009214:	f000 fd0c 	bl	8009c30 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009218:	f7fe fcdc 	bl	8007bd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800921c:	4b18      	ldr	r3, [pc, #96]	; (8009280 <vTaskSuspend+0xd4>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	429a      	cmp	r2, r3
 8009224:	d127      	bne.n	8009276 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8009226:	4b18      	ldr	r3, [pc, #96]	; (8009288 <vTaskSuspend+0xdc>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d017      	beq.n	800925e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800922e:	4b17      	ldr	r3, [pc, #92]	; (800928c <vTaskSuspend+0xe0>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00a      	beq.n	800924c <vTaskSuspend+0xa0>
	__asm volatile
 8009236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	60bb      	str	r3, [r7, #8]
}
 8009248:	bf00      	nop
 800924a:	e7fe      	b.n	800924a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800924c:	4b10      	ldr	r3, [pc, #64]	; (8009290 <vTaskSuspend+0xe4>)
 800924e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800925c:	e00b      	b.n	8009276 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800925e:	4b09      	ldr	r3, [pc, #36]	; (8009284 <vTaskSuspend+0xd8>)
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	4b0c      	ldr	r3, [pc, #48]	; (8009294 <vTaskSuspend+0xe8>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	429a      	cmp	r2, r3
 8009268:	d103      	bne.n	8009272 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800926a:	4b05      	ldr	r3, [pc, #20]	; (8009280 <vTaskSuspend+0xd4>)
 800926c:	2200      	movs	r2, #0
 800926e:	601a      	str	r2, [r3, #0]
	}
 8009270:	e001      	b.n	8009276 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8009272:	f000 fa87 	bl	8009784 <vTaskSwitchContext>
	}
 8009276:	bf00      	nop
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	20004780 	.word	0x20004780
 8009284:	20004c40 	.word	0x20004c40
 8009288:	20004c60 	.word	0x20004c60
 800928c:	20004c7c 	.word	0x20004c7c
 8009290:	e000ed04 	.word	0xe000ed04
 8009294:	20004c54 	.word	0x20004c54

08009298 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80092a0:	2300      	movs	r3, #0
 80092a2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10a      	bne.n	80092c4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	60fb      	str	r3, [r7, #12]
}
 80092c0:	bf00      	nop
 80092c2:	e7fe      	b.n	80092c2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	4a0a      	ldr	r2, [pc, #40]	; (80092f4 <prvTaskIsTaskSuspended+0x5c>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d10a      	bne.n	80092e4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d2:	4a09      	ldr	r2, [pc, #36]	; (80092f8 <prvTaskIsTaskSuspended+0x60>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d005      	beq.n	80092e4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80092e0:	2301      	movs	r3, #1
 80092e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092e4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80092e6:	4618      	mov	r0, r3
 80092e8:	371c      	adds	r7, #28
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	20004c40 	.word	0x20004c40
 80092f8:	20004c14 	.word	0x20004c14

080092fc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10a      	bne.n	8009324 <vTaskResume+0x28>
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	60bb      	str	r3, [r7, #8]
}
 8009320:	bf00      	nop
 8009322:	e7fe      	b.n	8009322 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009324:	4b20      	ldr	r3, [pc, #128]	; (80093a8 <vTaskResume+0xac>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	429a      	cmp	r2, r3
 800932c:	d038      	beq.n	80093a0 <vTaskResume+0xa4>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d035      	beq.n	80093a0 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8009334:	f7fe fc1e 	bl	8007b74 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f7ff ffad 	bl	8009298 <prvTaskIsTaskSuspended>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d02b      	beq.n	800939c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3304      	adds	r3, #4
 8009348:	4618      	mov	r0, r3
 800934a:	f7fe fabf 	bl	80078cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009352:	4b16      	ldr	r3, [pc, #88]	; (80093ac <vTaskResume+0xb0>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	429a      	cmp	r2, r3
 8009358:	d903      	bls.n	8009362 <vTaskResume+0x66>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935e:	4a13      	ldr	r2, [pc, #76]	; (80093ac <vTaskResume+0xb0>)
 8009360:	6013      	str	r3, [r2, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009366:	4613      	mov	r3, r2
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4a10      	ldr	r2, [pc, #64]	; (80093b0 <vTaskResume+0xb4>)
 8009370:	441a      	add	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3304      	adds	r3, #4
 8009376:	4619      	mov	r1, r3
 8009378:	4610      	mov	r0, r2
 800937a:	f7fe fa4a 	bl	8007812 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009382:	4b09      	ldr	r3, [pc, #36]	; (80093a8 <vTaskResume+0xac>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009388:	429a      	cmp	r2, r3
 800938a:	d307      	bcc.n	800939c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800938c:	4b09      	ldr	r3, [pc, #36]	; (80093b4 <vTaskResume+0xb8>)
 800938e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800939c:	f7fe fc1a 	bl	8007bd4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093a0:	bf00      	nop
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	20004780 	.word	0x20004780
 80093ac:	20004c5c 	.word	0x20004c5c
 80093b0:	20004784 	.word	0x20004784
 80093b4:	e000ed04 	.word	0xe000ed04

080093b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b08a      	sub	sp, #40	; 0x28
 80093bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093be:	2300      	movs	r3, #0
 80093c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093c2:	2300      	movs	r3, #0
 80093c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80093c6:	463a      	mov	r2, r7
 80093c8:	1d39      	adds	r1, r7, #4
 80093ca:	f107 0308 	add.w	r3, r7, #8
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fd ffd4 	bl	800737c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	9202      	str	r2, [sp, #8]
 80093dc:	9301      	str	r3, [sp, #4]
 80093de:	2300      	movs	r3, #0
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	2300      	movs	r3, #0
 80093e4:	460a      	mov	r2, r1
 80093e6:	4924      	ldr	r1, [pc, #144]	; (8009478 <vTaskStartScheduler+0xc0>)
 80093e8:	4824      	ldr	r0, [pc, #144]	; (800947c <vTaskStartScheduler+0xc4>)
 80093ea:	f7ff fcf3 	bl	8008dd4 <xTaskCreateStatic>
 80093ee:	4603      	mov	r3, r0
 80093f0:	4a23      	ldr	r2, [pc, #140]	; (8009480 <vTaskStartScheduler+0xc8>)
 80093f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80093f4:	4b22      	ldr	r3, [pc, #136]	; (8009480 <vTaskStartScheduler+0xc8>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d002      	beq.n	8009402 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80093fc:	2301      	movs	r3, #1
 80093fe:	617b      	str	r3, [r7, #20]
 8009400:	e001      	b.n	8009406 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009402:	2300      	movs	r3, #0
 8009404:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d102      	bne.n	8009412 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800940c:	f000 fe0e 	bl	800a02c <xTimerCreateTimerTask>
 8009410:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d11b      	bne.n	8009450 <vTaskStartScheduler+0x98>
	__asm volatile
 8009418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941c:	f383 8811 	msr	BASEPRI, r3
 8009420:	f3bf 8f6f 	isb	sy
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	613b      	str	r3, [r7, #16]
}
 800942a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800942c:	4b15      	ldr	r3, [pc, #84]	; (8009484 <vTaskStartScheduler+0xcc>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3354      	adds	r3, #84	; 0x54
 8009432:	4a15      	ldr	r2, [pc, #84]	; (8009488 <vTaskStartScheduler+0xd0>)
 8009434:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009436:	4b15      	ldr	r3, [pc, #84]	; (800948c <vTaskStartScheduler+0xd4>)
 8009438:	f04f 32ff 	mov.w	r2, #4294967295
 800943c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800943e:	4b14      	ldr	r3, [pc, #80]	; (8009490 <vTaskStartScheduler+0xd8>)
 8009440:	2201      	movs	r2, #1
 8009442:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009444:	4b13      	ldr	r3, [pc, #76]	; (8009494 <vTaskStartScheduler+0xdc>)
 8009446:	2200      	movs	r2, #0
 8009448:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800944a:	f7fe faf1 	bl	8007a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800944e:	e00e      	b.n	800946e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009456:	d10a      	bne.n	800946e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	60fb      	str	r3, [r7, #12]
}
 800946a:	bf00      	nop
 800946c:	e7fe      	b.n	800946c <vTaskStartScheduler+0xb4>
}
 800946e:	bf00      	nop
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	0800bd64 	.word	0x0800bd64
 800947c:	08009abd 	.word	0x08009abd
 8009480:	20004c78 	.word	0x20004c78
 8009484:	20004780 	.word	0x20004780
 8009488:	2000004c 	.word	0x2000004c
 800948c:	20004c74 	.word	0x20004c74
 8009490:	20004c60 	.word	0x20004c60
 8009494:	20004c58 	.word	0x20004c58

08009498 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009498:	b480      	push	{r7}
 800949a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800949c:	4b04      	ldr	r3, [pc, #16]	; (80094b0 <vTaskSuspendAll+0x18>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	3301      	adds	r3, #1
 80094a2:	4a03      	ldr	r2, [pc, #12]	; (80094b0 <vTaskSuspendAll+0x18>)
 80094a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80094a6:	bf00      	nop
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	20004c7c 	.word	0x20004c7c

080094b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094ba:	2300      	movs	r3, #0
 80094bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80094be:	2300      	movs	r3, #0
 80094c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80094c2:	4b42      	ldr	r3, [pc, #264]	; (80095cc <xTaskResumeAll+0x118>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10a      	bne.n	80094e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80094ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	603b      	str	r3, [r7, #0]
}
 80094dc:	bf00      	nop
 80094de:	e7fe      	b.n	80094de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80094e0:	f7fe fb48 	bl	8007b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80094e4:	4b39      	ldr	r3, [pc, #228]	; (80095cc <xTaskResumeAll+0x118>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	4a38      	ldr	r2, [pc, #224]	; (80095cc <xTaskResumeAll+0x118>)
 80094ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094ee:	4b37      	ldr	r3, [pc, #220]	; (80095cc <xTaskResumeAll+0x118>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d162      	bne.n	80095bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80094f6:	4b36      	ldr	r3, [pc, #216]	; (80095d0 <xTaskResumeAll+0x11c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d05e      	beq.n	80095bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094fe:	e02f      	b.n	8009560 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009500:	4b34      	ldr	r3, [pc, #208]	; (80095d4 <xTaskResumeAll+0x120>)
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	3318      	adds	r3, #24
 800950c:	4618      	mov	r0, r3
 800950e:	f7fe f9dd 	bl	80078cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	3304      	adds	r3, #4
 8009516:	4618      	mov	r0, r3
 8009518:	f7fe f9d8 	bl	80078cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009520:	4b2d      	ldr	r3, [pc, #180]	; (80095d8 <xTaskResumeAll+0x124>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	429a      	cmp	r2, r3
 8009526:	d903      	bls.n	8009530 <xTaskResumeAll+0x7c>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952c:	4a2a      	ldr	r2, [pc, #168]	; (80095d8 <xTaskResumeAll+0x124>)
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009534:	4613      	mov	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4a27      	ldr	r2, [pc, #156]	; (80095dc <xTaskResumeAll+0x128>)
 800953e:	441a      	add	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3304      	adds	r3, #4
 8009544:	4619      	mov	r1, r3
 8009546:	4610      	mov	r0, r2
 8009548:	f7fe f963 	bl	8007812 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009550:	4b23      	ldr	r3, [pc, #140]	; (80095e0 <xTaskResumeAll+0x12c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009556:	429a      	cmp	r2, r3
 8009558:	d302      	bcc.n	8009560 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800955a:	4b22      	ldr	r3, [pc, #136]	; (80095e4 <xTaskResumeAll+0x130>)
 800955c:	2201      	movs	r2, #1
 800955e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009560:	4b1c      	ldr	r3, [pc, #112]	; (80095d4 <xTaskResumeAll+0x120>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1cb      	bne.n	8009500 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800956e:	f000 fb5f 	bl	8009c30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009572:	4b1d      	ldr	r3, [pc, #116]	; (80095e8 <xTaskResumeAll+0x134>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d010      	beq.n	80095a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800957e:	f000 f847 	bl	8009610 <xTaskIncrementTick>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d002      	beq.n	800958e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009588:	4b16      	ldr	r3, [pc, #88]	; (80095e4 <xTaskResumeAll+0x130>)
 800958a:	2201      	movs	r2, #1
 800958c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	3b01      	subs	r3, #1
 8009592:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1f1      	bne.n	800957e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800959a:	4b13      	ldr	r3, [pc, #76]	; (80095e8 <xTaskResumeAll+0x134>)
 800959c:	2200      	movs	r2, #0
 800959e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80095a0:	4b10      	ldr	r3, [pc, #64]	; (80095e4 <xTaskResumeAll+0x130>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d009      	beq.n	80095bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80095a8:	2301      	movs	r3, #1
 80095aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80095ac:	4b0f      	ldr	r3, [pc, #60]	; (80095ec <xTaskResumeAll+0x138>)
 80095ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095bc:	f7fe fb0a 	bl	8007bd4 <vPortExitCritical>

	return xAlreadyYielded;
 80095c0:	68bb      	ldr	r3, [r7, #8]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20004c7c 	.word	0x20004c7c
 80095d0:	20004c54 	.word	0x20004c54
 80095d4:	20004c14 	.word	0x20004c14
 80095d8:	20004c5c 	.word	0x20004c5c
 80095dc:	20004784 	.word	0x20004784
 80095e0:	20004780 	.word	0x20004780
 80095e4:	20004c68 	.word	0x20004c68
 80095e8:	20004c64 	.word	0x20004c64
 80095ec:	e000ed04 	.word	0xe000ed04

080095f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80095f6:	4b05      	ldr	r3, [pc, #20]	; (800960c <xTaskGetTickCount+0x1c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80095fc:	687b      	ldr	r3, [r7, #4]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	20004c58 	.word	0x20004c58

08009610 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009616:	2300      	movs	r3, #0
 8009618:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800961a:	4b4f      	ldr	r3, [pc, #316]	; (8009758 <xTaskIncrementTick+0x148>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	f040 808f 	bne.w	8009742 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009624:	4b4d      	ldr	r3, [pc, #308]	; (800975c <xTaskIncrementTick+0x14c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	3301      	adds	r3, #1
 800962a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800962c:	4a4b      	ldr	r2, [pc, #300]	; (800975c <xTaskIncrementTick+0x14c>)
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d120      	bne.n	800967a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009638:	4b49      	ldr	r3, [pc, #292]	; (8009760 <xTaskIncrementTick+0x150>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00a      	beq.n	8009658 <xTaskIncrementTick+0x48>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	603b      	str	r3, [r7, #0]
}
 8009654:	bf00      	nop
 8009656:	e7fe      	b.n	8009656 <xTaskIncrementTick+0x46>
 8009658:	4b41      	ldr	r3, [pc, #260]	; (8009760 <xTaskIncrementTick+0x150>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	60fb      	str	r3, [r7, #12]
 800965e:	4b41      	ldr	r3, [pc, #260]	; (8009764 <xTaskIncrementTick+0x154>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a3f      	ldr	r2, [pc, #252]	; (8009760 <xTaskIncrementTick+0x150>)
 8009664:	6013      	str	r3, [r2, #0]
 8009666:	4a3f      	ldr	r2, [pc, #252]	; (8009764 <xTaskIncrementTick+0x154>)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6013      	str	r3, [r2, #0]
 800966c:	4b3e      	ldr	r3, [pc, #248]	; (8009768 <xTaskIncrementTick+0x158>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3301      	adds	r3, #1
 8009672:	4a3d      	ldr	r2, [pc, #244]	; (8009768 <xTaskIncrementTick+0x158>)
 8009674:	6013      	str	r3, [r2, #0]
 8009676:	f000 fadb 	bl	8009c30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800967a:	4b3c      	ldr	r3, [pc, #240]	; (800976c <xTaskIncrementTick+0x15c>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	429a      	cmp	r2, r3
 8009682:	d349      	bcc.n	8009718 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009684:	4b36      	ldr	r3, [pc, #216]	; (8009760 <xTaskIncrementTick+0x150>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d104      	bne.n	8009698 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800968e:	4b37      	ldr	r3, [pc, #220]	; (800976c <xTaskIncrementTick+0x15c>)
 8009690:	f04f 32ff 	mov.w	r2, #4294967295
 8009694:	601a      	str	r2, [r3, #0]
					break;
 8009696:	e03f      	b.n	8009718 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009698:	4b31      	ldr	r3, [pc, #196]	; (8009760 <xTaskIncrementTick+0x150>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d203      	bcs.n	80096b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096b0:	4a2e      	ldr	r2, [pc, #184]	; (800976c <xTaskIncrementTick+0x15c>)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096b6:	e02f      	b.n	8009718 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	3304      	adds	r3, #4
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fe f905 	bl	80078cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	3318      	adds	r3, #24
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe f8fc 	bl	80078cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d8:	4b25      	ldr	r3, [pc, #148]	; (8009770 <xTaskIncrementTick+0x160>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d903      	bls.n	80096e8 <xTaskIncrementTick+0xd8>
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e4:	4a22      	ldr	r2, [pc, #136]	; (8009770 <xTaskIncrementTick+0x160>)
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ec:	4613      	mov	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4a1f      	ldr	r2, [pc, #124]	; (8009774 <xTaskIncrementTick+0x164>)
 80096f6:	441a      	add	r2, r3
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	3304      	adds	r3, #4
 80096fc:	4619      	mov	r1, r3
 80096fe:	4610      	mov	r0, r2
 8009700:	f7fe f887 	bl	8007812 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009708:	4b1b      	ldr	r3, [pc, #108]	; (8009778 <xTaskIncrementTick+0x168>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970e:	429a      	cmp	r2, r3
 8009710:	d3b8      	bcc.n	8009684 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009712:	2301      	movs	r3, #1
 8009714:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009716:	e7b5      	b.n	8009684 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009718:	4b17      	ldr	r3, [pc, #92]	; (8009778 <xTaskIncrementTick+0x168>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971e:	4915      	ldr	r1, [pc, #84]	; (8009774 <xTaskIncrementTick+0x164>)
 8009720:	4613      	mov	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	440b      	add	r3, r1
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d901      	bls.n	8009734 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009730:	2301      	movs	r3, #1
 8009732:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009734:	4b11      	ldr	r3, [pc, #68]	; (800977c <xTaskIncrementTick+0x16c>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d007      	beq.n	800974c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800973c:	2301      	movs	r3, #1
 800973e:	617b      	str	r3, [r7, #20]
 8009740:	e004      	b.n	800974c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009742:	4b0f      	ldr	r3, [pc, #60]	; (8009780 <xTaskIncrementTick+0x170>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3301      	adds	r3, #1
 8009748:	4a0d      	ldr	r2, [pc, #52]	; (8009780 <xTaskIncrementTick+0x170>)
 800974a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800974c:	697b      	ldr	r3, [r7, #20]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20004c7c 	.word	0x20004c7c
 800975c:	20004c58 	.word	0x20004c58
 8009760:	20004c0c 	.word	0x20004c0c
 8009764:	20004c10 	.word	0x20004c10
 8009768:	20004c6c 	.word	0x20004c6c
 800976c:	20004c74 	.word	0x20004c74
 8009770:	20004c5c 	.word	0x20004c5c
 8009774:	20004784 	.word	0x20004784
 8009778:	20004780 	.word	0x20004780
 800977c:	20004c68 	.word	0x20004c68
 8009780:	20004c64 	.word	0x20004c64

08009784 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800978a:	4b2a      	ldr	r3, [pc, #168]	; (8009834 <vTaskSwitchContext+0xb0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009792:	4b29      	ldr	r3, [pc, #164]	; (8009838 <vTaskSwitchContext+0xb4>)
 8009794:	2201      	movs	r2, #1
 8009796:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009798:	e046      	b.n	8009828 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800979a:	4b27      	ldr	r3, [pc, #156]	; (8009838 <vTaskSwitchContext+0xb4>)
 800979c:	2200      	movs	r2, #0
 800979e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097a0:	4b26      	ldr	r3, [pc, #152]	; (800983c <vTaskSwitchContext+0xb8>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	60fb      	str	r3, [r7, #12]
 80097a6:	e010      	b.n	80097ca <vTaskSwitchContext+0x46>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	607b      	str	r3, [r7, #4]
}
 80097c0:	bf00      	nop
 80097c2:	e7fe      	b.n	80097c2 <vTaskSwitchContext+0x3e>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	491d      	ldr	r1, [pc, #116]	; (8009840 <vTaskSwitchContext+0xbc>)
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	4613      	mov	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	440b      	add	r3, r1
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0e4      	beq.n	80097a8 <vTaskSwitchContext+0x24>
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	4613      	mov	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4a15      	ldr	r2, [pc, #84]	; (8009840 <vTaskSwitchContext+0xbc>)
 80097ea:	4413      	add	r3, r2
 80097ec:	60bb      	str	r3, [r7, #8]
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	605a      	str	r2, [r3, #4]
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	3308      	adds	r3, #8
 8009800:	429a      	cmp	r2, r3
 8009802:	d104      	bne.n	800980e <vTaskSwitchContext+0x8a>
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	685a      	ldr	r2, [r3, #4]
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	605a      	str	r2, [r3, #4]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	4a0b      	ldr	r2, [pc, #44]	; (8009844 <vTaskSwitchContext+0xc0>)
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	4a08      	ldr	r2, [pc, #32]	; (800983c <vTaskSwitchContext+0xb8>)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800981e:	4b09      	ldr	r3, [pc, #36]	; (8009844 <vTaskSwitchContext+0xc0>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	3354      	adds	r3, #84	; 0x54
 8009824:	4a08      	ldr	r2, [pc, #32]	; (8009848 <vTaskSwitchContext+0xc4>)
 8009826:	6013      	str	r3, [r2, #0]
}
 8009828:	bf00      	nop
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	20004c7c 	.word	0x20004c7c
 8009838:	20004c68 	.word	0x20004c68
 800983c:	20004c5c 	.word	0x20004c5c
 8009840:	20004784 	.word	0x20004784
 8009844:	20004780 	.word	0x20004780
 8009848:	2000004c 	.word	0x2000004c

0800984c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10a      	bne.n	8009872 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	60fb      	str	r3, [r7, #12]
}
 800986e:	bf00      	nop
 8009870:	e7fe      	b.n	8009870 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009872:	4b07      	ldr	r3, [pc, #28]	; (8009890 <vTaskPlaceOnEventList+0x44>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3318      	adds	r3, #24
 8009878:	4619      	mov	r1, r3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7fd ffed 	bl	800785a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009880:	2101      	movs	r1, #1
 8009882:	6838      	ldr	r0, [r7, #0]
 8009884:	f000 fb7e 	bl	8009f84 <prvAddCurrentTaskToDelayedList>
}
 8009888:	bf00      	nop
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	20004780 	.word	0x20004780

08009894 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10a      	bne.n	80098bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	617b      	str	r3, [r7, #20]
}
 80098b8:	bf00      	nop
 80098ba:	e7fe      	b.n	80098ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098bc:	4b0a      	ldr	r3, [pc, #40]	; (80098e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3318      	adds	r3, #24
 80098c2:	4619      	mov	r1, r3
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f7fd ffa4 	bl	8007812 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80098d0:	f04f 33ff 	mov.w	r3, #4294967295
 80098d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80098d6:	6879      	ldr	r1, [r7, #4]
 80098d8:	68b8      	ldr	r0, [r7, #8]
 80098da:	f000 fb53 	bl	8009f84 <prvAddCurrentTaskToDelayedList>
	}
 80098de:	bf00      	nop
 80098e0:	3718      	adds	r7, #24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	20004780 	.word	0x20004780

080098ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10a      	bne.n	8009918 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	60fb      	str	r3, [r7, #12]
}
 8009914:	bf00      	nop
 8009916:	e7fe      	b.n	8009916 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	3318      	adds	r3, #24
 800991c:	4618      	mov	r0, r3
 800991e:	f7fd ffd5 	bl	80078cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009922:	4b1e      	ldr	r3, [pc, #120]	; (800999c <xTaskRemoveFromEventList+0xb0>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d11d      	bne.n	8009966 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	3304      	adds	r3, #4
 800992e:	4618      	mov	r0, r3
 8009930:	f7fd ffcc 	bl	80078cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009938:	4b19      	ldr	r3, [pc, #100]	; (80099a0 <xTaskRemoveFromEventList+0xb4>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	429a      	cmp	r2, r3
 800993e:	d903      	bls.n	8009948 <xTaskRemoveFromEventList+0x5c>
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009944:	4a16      	ldr	r2, [pc, #88]	; (80099a0 <xTaskRemoveFromEventList+0xb4>)
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800994c:	4613      	mov	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	4a13      	ldr	r2, [pc, #76]	; (80099a4 <xTaskRemoveFromEventList+0xb8>)
 8009956:	441a      	add	r2, r3
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	3304      	adds	r3, #4
 800995c:	4619      	mov	r1, r3
 800995e:	4610      	mov	r0, r2
 8009960:	f7fd ff57 	bl	8007812 <vListInsertEnd>
 8009964:	e005      	b.n	8009972 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	3318      	adds	r3, #24
 800996a:	4619      	mov	r1, r3
 800996c:	480e      	ldr	r0, [pc, #56]	; (80099a8 <xTaskRemoveFromEventList+0xbc>)
 800996e:	f7fd ff50 	bl	8007812 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009976:	4b0d      	ldr	r3, [pc, #52]	; (80099ac <xTaskRemoveFromEventList+0xc0>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997c:	429a      	cmp	r2, r3
 800997e:	d905      	bls.n	800998c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009980:	2301      	movs	r3, #1
 8009982:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009984:	4b0a      	ldr	r3, [pc, #40]	; (80099b0 <xTaskRemoveFromEventList+0xc4>)
 8009986:	2201      	movs	r2, #1
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	e001      	b.n	8009990 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800998c:	2300      	movs	r3, #0
 800998e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009990:	697b      	ldr	r3, [r7, #20]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20004c7c 	.word	0x20004c7c
 80099a0:	20004c5c 	.word	0x20004c5c
 80099a4:	20004784 	.word	0x20004784
 80099a8:	20004c14 	.word	0x20004c14
 80099ac:	20004780 	.word	0x20004780
 80099b0:	20004c68 	.word	0x20004c68

080099b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099bc:	4b06      	ldr	r3, [pc, #24]	; (80099d8 <vTaskInternalSetTimeOutState+0x24>)
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099c4:	4b05      	ldr	r3, [pc, #20]	; (80099dc <vTaskInternalSetTimeOutState+0x28>)
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	605a      	str	r2, [r3, #4]
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	20004c6c 	.word	0x20004c6c
 80099dc:	20004c58 	.word	0x20004c58

080099e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10a      	bne.n	8009a06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	613b      	str	r3, [r7, #16]
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10a      	bne.n	8009a22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	60fb      	str	r3, [r7, #12]
}
 8009a1e:	bf00      	nop
 8009a20:	e7fe      	b.n	8009a20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009a22:	f7fe f8a7 	bl	8007b74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a26:	4b1d      	ldr	r3, [pc, #116]	; (8009a9c <xTaskCheckForTimeOut+0xbc>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3e:	d102      	bne.n	8009a46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a40:	2300      	movs	r3, #0
 8009a42:	61fb      	str	r3, [r7, #28]
 8009a44:	e023      	b.n	8009a8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	4b15      	ldr	r3, [pc, #84]	; (8009aa0 <xTaskCheckForTimeOut+0xc0>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d007      	beq.n	8009a62 <xTaskCheckForTimeOut+0x82>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	69ba      	ldr	r2, [r7, #24]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d302      	bcc.n	8009a62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	61fb      	str	r3, [r7, #28]
 8009a60:	e015      	b.n	8009a8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d20b      	bcs.n	8009a84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	1ad2      	subs	r2, r2, r3
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff ff9b 	bl	80099b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	61fb      	str	r3, [r7, #28]
 8009a82:	e004      	b.n	8009a8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2200      	movs	r2, #0
 8009a88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a8e:	f7fe f8a1 	bl	8007bd4 <vPortExitCritical>

	return xReturn;
 8009a92:	69fb      	ldr	r3, [r7, #28]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3720      	adds	r7, #32
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20004c58 	.word	0x20004c58
 8009aa0:	20004c6c 	.word	0x20004c6c

08009aa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009aa8:	4b03      	ldr	r3, [pc, #12]	; (8009ab8 <vTaskMissedYield+0x14>)
 8009aaa:	2201      	movs	r2, #1
 8009aac:	601a      	str	r2, [r3, #0]
}
 8009aae:	bf00      	nop
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	20004c68 	.word	0x20004c68

08009abc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ac4:	f000 f852 	bl	8009b6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ac8:	4b06      	ldr	r3, [pc, #24]	; (8009ae4 <prvIdleTask+0x28>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d9f9      	bls.n	8009ac4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ad0:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <prvIdleTask+0x2c>)
 8009ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ae0:	e7f0      	b.n	8009ac4 <prvIdleTask+0x8>
 8009ae2:	bf00      	nop
 8009ae4:	20004784 	.word	0x20004784
 8009ae8:	e000ed04 	.word	0xe000ed04

08009aec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009af2:	2300      	movs	r3, #0
 8009af4:	607b      	str	r3, [r7, #4]
 8009af6:	e00c      	b.n	8009b12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	4613      	mov	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4a12      	ldr	r2, [pc, #72]	; (8009b4c <prvInitialiseTaskLists+0x60>)
 8009b04:	4413      	add	r3, r2
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fd fe56 	bl	80077b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	607b      	str	r3, [r7, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b37      	cmp	r3, #55	; 0x37
 8009b16:	d9ef      	bls.n	8009af8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b18:	480d      	ldr	r0, [pc, #52]	; (8009b50 <prvInitialiseTaskLists+0x64>)
 8009b1a:	f7fd fe4d 	bl	80077b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b1e:	480d      	ldr	r0, [pc, #52]	; (8009b54 <prvInitialiseTaskLists+0x68>)
 8009b20:	f7fd fe4a 	bl	80077b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b24:	480c      	ldr	r0, [pc, #48]	; (8009b58 <prvInitialiseTaskLists+0x6c>)
 8009b26:	f7fd fe47 	bl	80077b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b2a:	480c      	ldr	r0, [pc, #48]	; (8009b5c <prvInitialiseTaskLists+0x70>)
 8009b2c:	f7fd fe44 	bl	80077b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b30:	480b      	ldr	r0, [pc, #44]	; (8009b60 <prvInitialiseTaskLists+0x74>)
 8009b32:	f7fd fe41 	bl	80077b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b36:	4b0b      	ldr	r3, [pc, #44]	; (8009b64 <prvInitialiseTaskLists+0x78>)
 8009b38:	4a05      	ldr	r2, [pc, #20]	; (8009b50 <prvInitialiseTaskLists+0x64>)
 8009b3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b3c:	4b0a      	ldr	r3, [pc, #40]	; (8009b68 <prvInitialiseTaskLists+0x7c>)
 8009b3e:	4a05      	ldr	r2, [pc, #20]	; (8009b54 <prvInitialiseTaskLists+0x68>)
 8009b40:	601a      	str	r2, [r3, #0]
}
 8009b42:	bf00      	nop
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	20004784 	.word	0x20004784
 8009b50:	20004be4 	.word	0x20004be4
 8009b54:	20004bf8 	.word	0x20004bf8
 8009b58:	20004c14 	.word	0x20004c14
 8009b5c:	20004c28 	.word	0x20004c28
 8009b60:	20004c40 	.word	0x20004c40
 8009b64:	20004c0c 	.word	0x20004c0c
 8009b68:	20004c10 	.word	0x20004c10

08009b6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b72:	e019      	b.n	8009ba8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b74:	f7fd fffe 	bl	8007b74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b78:	4b10      	ldr	r3, [pc, #64]	; (8009bbc <prvCheckTasksWaitingTermination+0x50>)
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	3304      	adds	r3, #4
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fd fea1 	bl	80078cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b8a:	4b0d      	ldr	r3, [pc, #52]	; (8009bc0 <prvCheckTasksWaitingTermination+0x54>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	4a0b      	ldr	r2, [pc, #44]	; (8009bc0 <prvCheckTasksWaitingTermination+0x54>)
 8009b92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b94:	4b0b      	ldr	r3, [pc, #44]	; (8009bc4 <prvCheckTasksWaitingTermination+0x58>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	4a0a      	ldr	r2, [pc, #40]	; (8009bc4 <prvCheckTasksWaitingTermination+0x58>)
 8009b9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b9e:	f7fe f819 	bl	8007bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f810 	bl	8009bc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ba8:	4b06      	ldr	r3, [pc, #24]	; (8009bc4 <prvCheckTasksWaitingTermination+0x58>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1e1      	bne.n	8009b74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009bb0:	bf00      	nop
 8009bb2:	bf00      	nop
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	20004c28 	.word	0x20004c28
 8009bc0:	20004c54 	.word	0x20004c54
 8009bc4:	20004c3c 	.word	0x20004c3c

08009bc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	3354      	adds	r3, #84	; 0x54
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f000 feab 	bl	800a930 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d108      	bne.n	8009bf6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fd fcc7 	bl	800757c <vPortFree>
				vPortFree( pxTCB );
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7fd fcc4 	bl	800757c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009bf4:	e018      	b.n	8009c28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d103      	bne.n	8009c08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f7fd fcbb 	bl	800757c <vPortFree>
	}
 8009c06:	e00f      	b.n	8009c28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d00a      	beq.n	8009c28 <prvDeleteTCB+0x60>
	__asm volatile
 8009c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	60fb      	str	r3, [r7, #12]
}
 8009c24:	bf00      	nop
 8009c26:	e7fe      	b.n	8009c26 <prvDeleteTCB+0x5e>
	}
 8009c28:	bf00      	nop
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c36:	4b0c      	ldr	r3, [pc, #48]	; (8009c68 <prvResetNextTaskUnblockTime+0x38>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d104      	bne.n	8009c4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c40:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <prvResetNextTaskUnblockTime+0x3c>)
 8009c42:	f04f 32ff 	mov.w	r2, #4294967295
 8009c46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c48:	e008      	b.n	8009c5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c4a:	4b07      	ldr	r3, [pc, #28]	; (8009c68 <prvResetNextTaskUnblockTime+0x38>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	4a04      	ldr	r2, [pc, #16]	; (8009c6c <prvResetNextTaskUnblockTime+0x3c>)
 8009c5a:	6013      	str	r3, [r2, #0]
}
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	20004c0c 	.word	0x20004c0c
 8009c6c:	20004c74 	.word	0x20004c74

08009c70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c76:	4b0b      	ldr	r3, [pc, #44]	; (8009ca4 <xTaskGetSchedulerState+0x34>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d102      	bne.n	8009c84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	607b      	str	r3, [r7, #4]
 8009c82:	e008      	b.n	8009c96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c84:	4b08      	ldr	r3, [pc, #32]	; (8009ca8 <xTaskGetSchedulerState+0x38>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d102      	bne.n	8009c92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c8c:	2302      	movs	r3, #2
 8009c8e:	607b      	str	r3, [r7, #4]
 8009c90:	e001      	b.n	8009c96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c92:	2300      	movs	r3, #0
 8009c94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c96:	687b      	ldr	r3, [r7, #4]
	}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	20004c60 	.word	0x20004c60
 8009ca8:	20004c7c 	.word	0x20004c7c

08009cac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d051      	beq.n	8009d66 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc6:	4b2a      	ldr	r3, [pc, #168]	; (8009d70 <xTaskPriorityInherit+0xc4>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d241      	bcs.n	8009d54 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	db06      	blt.n	8009ce6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cd8:	4b25      	ldr	r3, [pc, #148]	; (8009d70 <xTaskPriorityInherit+0xc4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	6959      	ldr	r1, [r3, #20]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cee:	4613      	mov	r3, r2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4413      	add	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4a1f      	ldr	r2, [pc, #124]	; (8009d74 <xTaskPriorityInherit+0xc8>)
 8009cf8:	4413      	add	r3, r2
 8009cfa:	4299      	cmp	r1, r3
 8009cfc:	d122      	bne.n	8009d44 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	3304      	adds	r3, #4
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fd fde2 	bl	80078cc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d08:	4b19      	ldr	r3, [pc, #100]	; (8009d70 <xTaskPriorityInherit+0xc4>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d16:	4b18      	ldr	r3, [pc, #96]	; (8009d78 <xTaskPriorityInherit+0xcc>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d903      	bls.n	8009d26 <xTaskPriorityInherit+0x7a>
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d22:	4a15      	ldr	r2, [pc, #84]	; (8009d78 <xTaskPriorityInherit+0xcc>)
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4a10      	ldr	r2, [pc, #64]	; (8009d74 <xTaskPriorityInherit+0xc8>)
 8009d34:	441a      	add	r2, r3
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	3304      	adds	r3, #4
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	f7fd fd68 	bl	8007812 <vListInsertEnd>
 8009d42:	e004      	b.n	8009d4e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d44:	4b0a      	ldr	r3, [pc, #40]	; (8009d70 <xTaskPriorityInherit+0xc4>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	60fb      	str	r3, [r7, #12]
 8009d52:	e008      	b.n	8009d66 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d58:	4b05      	ldr	r3, [pc, #20]	; (8009d70 <xTaskPriorityInherit+0xc4>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d201      	bcs.n	8009d66 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009d62:	2301      	movs	r3, #1
 8009d64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d66:	68fb      	ldr	r3, [r7, #12]
	}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	20004780 	.word	0x20004780
 8009d74:	20004784 	.word	0x20004784
 8009d78:	20004c5c 	.word	0x20004c5c

08009d7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d056      	beq.n	8009e40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d92:	4b2e      	ldr	r3, [pc, #184]	; (8009e4c <xTaskPriorityDisinherit+0xd0>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d00a      	beq.n	8009db2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	60fb      	str	r3, [r7, #12]
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10a      	bne.n	8009dd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbe:	f383 8811 	msr	BASEPRI, r3
 8009dc2:	f3bf 8f6f 	isb	sy
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	60bb      	str	r3, [r7, #8]
}
 8009dcc:	bf00      	nop
 8009dce:	e7fe      	b.n	8009dce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd4:	1e5a      	subs	r2, r3, #1
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d02c      	beq.n	8009e40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d128      	bne.n	8009e40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	3304      	adds	r3, #4
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fd fd6a 	bl	80078cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e10:	4b0f      	ldr	r3, [pc, #60]	; (8009e50 <xTaskPriorityDisinherit+0xd4>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d903      	bls.n	8009e20 <xTaskPriorityDisinherit+0xa4>
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1c:	4a0c      	ldr	r2, [pc, #48]	; (8009e50 <xTaskPriorityDisinherit+0xd4>)
 8009e1e:	6013      	str	r3, [r2, #0]
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e24:	4613      	mov	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4a09      	ldr	r2, [pc, #36]	; (8009e54 <xTaskPriorityDisinherit+0xd8>)
 8009e2e:	441a      	add	r2, r3
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	3304      	adds	r3, #4
 8009e34:	4619      	mov	r1, r3
 8009e36:	4610      	mov	r0, r2
 8009e38:	f7fd fceb 	bl	8007812 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e40:	697b      	ldr	r3, [r7, #20]
	}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3718      	adds	r7, #24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	20004780 	.word	0x20004780
 8009e50:	20004c5c 	.word	0x20004c5c
 8009e54:	20004784 	.word	0x20004784

08009e58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b088      	sub	sp, #32
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009e66:	2301      	movs	r3, #1
 8009e68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d06a      	beq.n	8009f46 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10a      	bne.n	8009e8e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	60fb      	str	r3, [r7, #12]
}
 8009e8a:	bf00      	nop
 8009e8c:	e7fe      	b.n	8009e8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d902      	bls.n	8009e9e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	61fb      	str	r3, [r7, #28]
 8009e9c:	e002      	b.n	8009ea4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ea2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea8:	69fa      	ldr	r2, [r7, #28]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d04b      	beq.n	8009f46 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d146      	bne.n	8009f46 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009eb8:	4b25      	ldr	r3, [pc, #148]	; (8009f50 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	69ba      	ldr	r2, [r7, #24]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d10a      	bne.n	8009ed8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	60bb      	str	r3, [r7, #8]
}
 8009ed4:	bf00      	nop
 8009ed6:	e7fe      	b.n	8009ed6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009edc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	69fa      	ldr	r2, [r7, #28]
 8009ee2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	db04      	blt.n	8009ef6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	6959      	ldr	r1, [r3, #20]
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	4613      	mov	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4a13      	ldr	r2, [pc, #76]	; (8009f54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009f06:	4413      	add	r3, r2
 8009f08:	4299      	cmp	r1, r3
 8009f0a:	d11c      	bne.n	8009f46 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	3304      	adds	r3, #4
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fd fcdb 	bl	80078cc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1a:	4b0f      	ldr	r3, [pc, #60]	; (8009f58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d903      	bls.n	8009f2a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f26:	4a0c      	ldr	r2, [pc, #48]	; (8009f58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009f28:	6013      	str	r3, [r2, #0]
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2e:	4613      	mov	r3, r2
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	4413      	add	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4a07      	ldr	r2, [pc, #28]	; (8009f54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009f38:	441a      	add	r2, r3
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	4619      	mov	r1, r3
 8009f40:	4610      	mov	r0, r2
 8009f42:	f7fd fc66 	bl	8007812 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f46:	bf00      	nop
 8009f48:	3720      	adds	r7, #32
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	20004780 	.word	0x20004780
 8009f54:	20004784 	.word	0x20004784
 8009f58:	20004c5c 	.word	0x20004c5c

08009f5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009f5c:	b480      	push	{r7}
 8009f5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009f60:	4b07      	ldr	r3, [pc, #28]	; (8009f80 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d004      	beq.n	8009f72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009f68:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f6e:	3201      	adds	r2, #1
 8009f70:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009f72:	4b03      	ldr	r3, [pc, #12]	; (8009f80 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f74:	681b      	ldr	r3, [r3, #0]
	}
 8009f76:	4618      	mov	r0, r3
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr
 8009f80:	20004780 	.word	0x20004780

08009f84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f8e:	4b21      	ldr	r3, [pc, #132]	; (800a014 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f94:	4b20      	ldr	r3, [pc, #128]	; (800a018 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3304      	adds	r3, #4
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fd fc96 	bl	80078cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa6:	d10a      	bne.n	8009fbe <prvAddCurrentTaskToDelayedList+0x3a>
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d007      	beq.n	8009fbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fae:	4b1a      	ldr	r3, [pc, #104]	; (800a018 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4819      	ldr	r0, [pc, #100]	; (800a01c <prvAddCurrentTaskToDelayedList+0x98>)
 8009fb8:	f7fd fc2b 	bl	8007812 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009fbc:	e026      	b.n	800a00c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fc6:	4b14      	ldr	r3, [pc, #80]	; (800a018 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d209      	bcs.n	8009fea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fd6:	4b12      	ldr	r3, [pc, #72]	; (800a020 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	4b0f      	ldr	r3, [pc, #60]	; (800a018 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	3304      	adds	r3, #4
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	f7fd fc39 	bl	800785a <vListInsert>
}
 8009fe8:	e010      	b.n	800a00c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fea:	4b0e      	ldr	r3, [pc, #56]	; (800a024 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	4b0a      	ldr	r3, [pc, #40]	; (800a018 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	f7fd fc2f 	bl	800785a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ffc:	4b0a      	ldr	r3, [pc, #40]	; (800a028 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68ba      	ldr	r2, [r7, #8]
 800a002:	429a      	cmp	r2, r3
 800a004:	d202      	bcs.n	800a00c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a006:	4a08      	ldr	r2, [pc, #32]	; (800a028 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	6013      	str	r3, [r2, #0]
}
 800a00c:	bf00      	nop
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	20004c58 	.word	0x20004c58
 800a018:	20004780 	.word	0x20004780
 800a01c:	20004c40 	.word	0x20004c40
 800a020:	20004c10 	.word	0x20004c10
 800a024:	20004c0c 	.word	0x20004c0c
 800a028:	20004c74 	.word	0x20004c74

0800a02c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b08a      	sub	sp, #40	; 0x28
 800a030:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a032:	2300      	movs	r3, #0
 800a034:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a036:	f000 fba1 	bl	800a77c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a03a:	4b1c      	ldr	r3, [pc, #112]	; (800a0ac <xTimerCreateTimerTask+0x80>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d021      	beq.n	800a086 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a042:	2300      	movs	r3, #0
 800a044:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a046:	2300      	movs	r3, #0
 800a048:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a04a:	1d3a      	adds	r2, r7, #4
 800a04c:	f107 0108 	add.w	r1, r7, #8
 800a050:	f107 030c 	add.w	r3, r7, #12
 800a054:	4618      	mov	r0, r3
 800a056:	f7fd f9ab 	bl	80073b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a05a:	6879      	ldr	r1, [r7, #4]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	9202      	str	r2, [sp, #8]
 800a062:	9301      	str	r3, [sp, #4]
 800a064:	2302      	movs	r3, #2
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	2300      	movs	r3, #0
 800a06a:	460a      	mov	r2, r1
 800a06c:	4910      	ldr	r1, [pc, #64]	; (800a0b0 <xTimerCreateTimerTask+0x84>)
 800a06e:	4811      	ldr	r0, [pc, #68]	; (800a0b4 <xTimerCreateTimerTask+0x88>)
 800a070:	f7fe feb0 	bl	8008dd4 <xTaskCreateStatic>
 800a074:	4603      	mov	r3, r0
 800a076:	4a10      	ldr	r2, [pc, #64]	; (800a0b8 <xTimerCreateTimerTask+0x8c>)
 800a078:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a07a:	4b0f      	ldr	r3, [pc, #60]	; (800a0b8 <xTimerCreateTimerTask+0x8c>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a082:	2301      	movs	r3, #1
 800a084:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10a      	bne.n	800a0a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	613b      	str	r3, [r7, #16]
}
 800a09e:	bf00      	nop
 800a0a0:	e7fe      	b.n	800a0a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a0a2:	697b      	ldr	r3, [r7, #20]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3718      	adds	r7, #24
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	20004cb0 	.word	0x20004cb0
 800a0b0:	0800bd6c 	.word	0x0800bd6c
 800a0b4:	0800a325 	.word	0x0800a325
 800a0b8:	20004cb4 	.word	0x20004cb4

0800a0bc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b088      	sub	sp, #32
 800a0c0:	af02      	add	r7, sp, #8
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
 800a0c8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a0ca:	202c      	movs	r0, #44	; 0x2c
 800a0cc:	f7fd f98a 	bl	80073e4 <pvPortMalloc>
 800a0d0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00d      	beq.n	800a0f4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	9301      	str	r3, [sp, #4]
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	68b9      	ldr	r1, [r7, #8]
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 f843 	bl	800a17a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a0f4:	697b      	ldr	r3, [r7, #20]
	}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3718      	adds	r7, #24
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b08a      	sub	sp, #40	; 0x28
 800a102:	af02      	add	r7, sp, #8
 800a104:	60f8      	str	r0, [r7, #12]
 800a106:	60b9      	str	r1, [r7, #8]
 800a108:	607a      	str	r2, [r7, #4]
 800a10a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a10c:	232c      	movs	r3, #44	; 0x2c
 800a10e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	2b2c      	cmp	r3, #44	; 0x2c
 800a114:	d00a      	beq.n	800a12c <xTimerCreateStatic+0x2e>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	61bb      	str	r3, [r7, #24]
}
 800a128:	bf00      	nop
 800a12a:	e7fe      	b.n	800a12a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a12c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10a      	bne.n	800a14a <xTimerCreateStatic+0x4c>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	617b      	str	r3, [r7, #20]
}
 800a146:	bf00      	nop
 800a148:	e7fe      	b.n	800a148 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00d      	beq.n	800a170 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	2202      	movs	r2, #2
 800a158:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	68b9      	ldr	r1, [r7, #8]
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 f805 	bl	800a17a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a170:	69fb      	ldr	r3, [r7, #28]
	}
 800a172:	4618      	mov	r0, r3
 800a174:	3720      	adds	r7, #32
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b086      	sub	sp, #24
 800a17e:	af00      	add	r7, sp, #0
 800a180:	60f8      	str	r0, [r7, #12]
 800a182:	60b9      	str	r1, [r7, #8]
 800a184:	607a      	str	r2, [r7, #4]
 800a186:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10a      	bne.n	800a1a4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	617b      	str	r3, [r7, #20]
}
 800a1a0:	bf00      	nop
 800a1a2:	e7fe      	b.n	800a1a2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d01e      	beq.n	800a1e8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a1aa:	f000 fae7 	bl	800a77c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1bc:	683a      	ldr	r2, [r7, #0]
 800a1be:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	6a3a      	ldr	r2, [r7, #32]
 800a1c4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fd fb14 	bl	80077f8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d008      	beq.n	800a1e8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1dc:	f043 0304 	orr.w	r3, r3, #4
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a1e8:	bf00      	nop
 800a1ea:	3718      	adds	r7, #24
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08a      	sub	sp, #40	; 0x28
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a1fe:	2300      	movs	r3, #0
 800a200:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10a      	bne.n	800a21e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	623b      	str	r3, [r7, #32]
}
 800a21a:	bf00      	nop
 800a21c:	e7fe      	b.n	800a21c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a21e:	4b1a      	ldr	r3, [pc, #104]	; (800a288 <xTimerGenericCommand+0x98>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d02a      	beq.n	800a27c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2b05      	cmp	r3, #5
 800a236:	dc18      	bgt.n	800a26a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a238:	f7ff fd1a 	bl	8009c70 <xTaskGetSchedulerState>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d109      	bne.n	800a256 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a242:	4b11      	ldr	r3, [pc, #68]	; (800a288 <xTimerGenericCommand+0x98>)
 800a244:	6818      	ldr	r0, [r3, #0]
 800a246:	f107 0110 	add.w	r1, r7, #16
 800a24a:	2300      	movs	r3, #0
 800a24c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a24e:	f7fd ff5b 	bl	8008108 <xQueueGenericSend>
 800a252:	6278      	str	r0, [r7, #36]	; 0x24
 800a254:	e012      	b.n	800a27c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a256:	4b0c      	ldr	r3, [pc, #48]	; (800a288 <xTimerGenericCommand+0x98>)
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	f107 0110 	add.w	r1, r7, #16
 800a25e:	2300      	movs	r3, #0
 800a260:	2200      	movs	r2, #0
 800a262:	f7fd ff51 	bl	8008108 <xQueueGenericSend>
 800a266:	6278      	str	r0, [r7, #36]	; 0x24
 800a268:	e008      	b.n	800a27c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a26a:	4b07      	ldr	r3, [pc, #28]	; (800a288 <xTimerGenericCommand+0x98>)
 800a26c:	6818      	ldr	r0, [r3, #0]
 800a26e:	f107 0110 	add.w	r1, r7, #16
 800a272:	2300      	movs	r3, #0
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	f7fe f845 	bl	8008304 <xQueueGenericSendFromISR>
 800a27a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3728      	adds	r7, #40	; 0x28
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20004cb0 	.word	0x20004cb0

0800a28c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af02      	add	r7, sp, #8
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a296:	4b22      	ldr	r3, [pc, #136]	; (800a320 <prvProcessExpiredTimer+0x94>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	3304      	adds	r3, #4
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7fd fb11 	bl	80078cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d022      	beq.n	800a2fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	699a      	ldr	r2, [r3, #24]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	18d1      	adds	r1, r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	683a      	ldr	r2, [r7, #0]
 800a2c4:	6978      	ldr	r0, [r7, #20]
 800a2c6:	f000 f8d1 	bl	800a46c <prvInsertTimerInActiveList>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d01f      	beq.n	800a310 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	2100      	movs	r1, #0
 800a2da:	6978      	ldr	r0, [r7, #20]
 800a2dc:	f7ff ff88 	bl	800a1f0 <xTimerGenericCommand>
 800a2e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d113      	bne.n	800a310 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	60fb      	str	r3, [r7, #12]
}
 800a2fa:	bf00      	nop
 800a2fc:	e7fe      	b.n	800a2fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a304:	f023 0301 	bic.w	r3, r3, #1
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	6a1b      	ldr	r3, [r3, #32]
 800a314:	6978      	ldr	r0, [r7, #20]
 800a316:	4798      	blx	r3
}
 800a318:	bf00      	nop
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20004ca8 	.word	0x20004ca8

0800a324 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a32c:	f107 0308 	add.w	r3, r7, #8
 800a330:	4618      	mov	r0, r3
 800a332:	f000 f857 	bl	800a3e4 <prvGetNextExpireTime>
 800a336:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	4619      	mov	r1, r3
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f000 f803 	bl	800a348 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a342:	f000 f8d5 	bl	800a4f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a346:	e7f1      	b.n	800a32c <prvTimerTask+0x8>

0800a348 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a352:	f7ff f8a1 	bl	8009498 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a356:	f107 0308 	add.w	r3, r7, #8
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 f866 	bl	800a42c <prvSampleTimeNow>
 800a360:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d130      	bne.n	800a3ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10a      	bne.n	800a384 <prvProcessTimerOrBlockTask+0x3c>
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	429a      	cmp	r2, r3
 800a374:	d806      	bhi.n	800a384 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a376:	f7ff f89d 	bl	80094b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a37a:	68f9      	ldr	r1, [r7, #12]
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7ff ff85 	bl	800a28c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a382:	e024      	b.n	800a3ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d008      	beq.n	800a39c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a38a:	4b13      	ldr	r3, [pc, #76]	; (800a3d8 <prvProcessTimerOrBlockTask+0x90>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d101      	bne.n	800a398 <prvProcessTimerOrBlockTask+0x50>
 800a394:	2301      	movs	r3, #1
 800a396:	e000      	b.n	800a39a <prvProcessTimerOrBlockTask+0x52>
 800a398:	2300      	movs	r3, #0
 800a39a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a39c:	4b0f      	ldr	r3, [pc, #60]	; (800a3dc <prvProcessTimerOrBlockTask+0x94>)
 800a39e:	6818      	ldr	r0, [r3, #0]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	1ad3      	subs	r3, r2, r3
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	f7fe fcdf 	bl	8008d6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a3ae:	f7ff f881 	bl	80094b4 <xTaskResumeAll>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d10a      	bne.n	800a3ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a3b8:	4b09      	ldr	r3, [pc, #36]	; (800a3e0 <prvProcessTimerOrBlockTask+0x98>)
 800a3ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	f3bf 8f6f 	isb	sy
}
 800a3c8:	e001      	b.n	800a3ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a3ca:	f7ff f873 	bl	80094b4 <xTaskResumeAll>
}
 800a3ce:	bf00      	nop
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20004cac 	.word	0x20004cac
 800a3dc:	20004cb0 	.word	0x20004cb0
 800a3e0:	e000ed04 	.word	0xe000ed04

0800a3e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3ec:	4b0e      	ldr	r3, [pc, #56]	; (800a428 <prvGetNextExpireTime+0x44>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d101      	bne.n	800a3fa <prvGetNextExpireTime+0x16>
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	e000      	b.n	800a3fc <prvGetNextExpireTime+0x18>
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d105      	bne.n	800a414 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a408:	4b07      	ldr	r3, [pc, #28]	; (800a428 <prvGetNextExpireTime+0x44>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	60fb      	str	r3, [r7, #12]
 800a412:	e001      	b.n	800a418 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a414:	2300      	movs	r3, #0
 800a416:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a418:	68fb      	ldr	r3, [r7, #12]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	20004ca8 	.word	0x20004ca8

0800a42c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a434:	f7ff f8dc 	bl	80095f0 <xTaskGetTickCount>
 800a438:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a43a:	4b0b      	ldr	r3, [pc, #44]	; (800a468 <prvSampleTimeNow+0x3c>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	429a      	cmp	r2, r3
 800a442:	d205      	bcs.n	800a450 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a444:	f000 f936 	bl	800a6b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	e002      	b.n	800a456 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a456:	4a04      	ldr	r2, [pc, #16]	; (800a468 <prvSampleTimeNow+0x3c>)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a45c:	68fb      	ldr	r3, [r7, #12]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	20004cb8 	.word	0x20004cb8

0800a46c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
 800a478:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a47a:	2300      	movs	r3, #0
 800a47c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d812      	bhi.n	800a4b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	1ad2      	subs	r2, r2, r3
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d302      	bcc.n	800a4a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	617b      	str	r3, [r7, #20]
 800a4a4:	e01b      	b.n	800a4de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a4a6:	4b10      	ldr	r3, [pc, #64]	; (800a4e8 <prvInsertTimerInActiveList+0x7c>)
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3304      	adds	r3, #4
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	f7fd f9d2 	bl	800785a <vListInsert>
 800a4b6:	e012      	b.n	800a4de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d206      	bcs.n	800a4ce <prvInsertTimerInActiveList+0x62>
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d302      	bcc.n	800a4ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	617b      	str	r3, [r7, #20]
 800a4cc:	e007      	b.n	800a4de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4ce:	4b07      	ldr	r3, [pc, #28]	; (800a4ec <prvInsertTimerInActiveList+0x80>)
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	4610      	mov	r0, r2
 800a4da:	f7fd f9be 	bl	800785a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a4de:	697b      	ldr	r3, [r7, #20]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	20004cac 	.word	0x20004cac
 800a4ec:	20004ca8 	.word	0x20004ca8

0800a4f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b08e      	sub	sp, #56	; 0x38
 800a4f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4f6:	e0ca      	b.n	800a68e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	da18      	bge.n	800a530 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a4fe:	1d3b      	adds	r3, r7, #4
 800a500:	3304      	adds	r3, #4
 800a502:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10a      	bne.n	800a520 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	61fb      	str	r3, [r7, #28]
}
 800a51c:	bf00      	nop
 800a51e:	e7fe      	b.n	800a51e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a526:	6850      	ldr	r0, [r2, #4]
 800a528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a52a:	6892      	ldr	r2, [r2, #8]
 800a52c:	4611      	mov	r1, r2
 800a52e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	f2c0 80aa 	blt.w	800a68c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53e:	695b      	ldr	r3, [r3, #20]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d004      	beq.n	800a54e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a546:	3304      	adds	r3, #4
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fd f9bf 	bl	80078cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a54e:	463b      	mov	r3, r7
 800a550:	4618      	mov	r0, r3
 800a552:	f7ff ff6b 	bl	800a42c <prvSampleTimeNow>
 800a556:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b09      	cmp	r3, #9
 800a55c:	f200 8097 	bhi.w	800a68e <prvProcessReceivedCommands+0x19e>
 800a560:	a201      	add	r2, pc, #4	; (adr r2, 800a568 <prvProcessReceivedCommands+0x78>)
 800a562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a566:	bf00      	nop
 800a568:	0800a591 	.word	0x0800a591
 800a56c:	0800a591 	.word	0x0800a591
 800a570:	0800a591 	.word	0x0800a591
 800a574:	0800a605 	.word	0x0800a605
 800a578:	0800a619 	.word	0x0800a619
 800a57c:	0800a663 	.word	0x0800a663
 800a580:	0800a591 	.word	0x0800a591
 800a584:	0800a591 	.word	0x0800a591
 800a588:	0800a605 	.word	0x0800a605
 800a58c:	0800a619 	.word	0x0800a619
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a596:	f043 0301 	orr.w	r3, r3, #1
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a6:	699b      	ldr	r3, [r3, #24]
 800a5a8:	18d1      	adds	r1, r2, r3
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5b0:	f7ff ff5c 	bl	800a46c <prvInsertTimerInActiveList>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d069      	beq.n	800a68e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5bc:	6a1b      	ldr	r3, [r3, #32]
 800a5be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5c8:	f003 0304 	and.w	r3, r3, #4
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d05e      	beq.n	800a68e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d4:	699b      	ldr	r3, [r3, #24]
 800a5d6:	441a      	add	r2, r3
 800a5d8:	2300      	movs	r3, #0
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	2300      	movs	r3, #0
 800a5de:	2100      	movs	r1, #0
 800a5e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5e2:	f7ff fe05 	bl	800a1f0 <xTimerGenericCommand>
 800a5e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d14f      	bne.n	800a68e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	61bb      	str	r3, [r7, #24]
}
 800a600:	bf00      	nop
 800a602:	e7fe      	b.n	800a602 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a60a:	f023 0301 	bic.w	r3, r3, #1
 800a60e:	b2da      	uxtb	r2, r3
 800a610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a616:	e03a      	b.n	800a68e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a61e:	f043 0301 	orr.w	r3, r3, #1
 800a622:	b2da      	uxtb	r2, r3
 800a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10a      	bne.n	800a64e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63c:	f383 8811 	msr	BASEPRI, r3
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	617b      	str	r3, [r7, #20]
}
 800a64a:	bf00      	nop
 800a64c:	e7fe      	b.n	800a64c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a650:	699a      	ldr	r2, [r3, #24]
 800a652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a654:	18d1      	adds	r1, r2, r3
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a65a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a65c:	f7ff ff06 	bl	800a46c <prvInsertTimerInActiveList>
					break;
 800a660:	e015      	b.n	800a68e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a668:	f003 0302 	and.w	r3, r3, #2
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d103      	bne.n	800a678 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a672:	f7fc ff83 	bl	800757c <vPortFree>
 800a676:	e00a      	b.n	800a68e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a67e:	f023 0301 	bic.w	r3, r3, #1
 800a682:	b2da      	uxtb	r2, r3
 800a684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a68a:	e000      	b.n	800a68e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a68c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a68e:	4b08      	ldr	r3, [pc, #32]	; (800a6b0 <prvProcessReceivedCommands+0x1c0>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	1d39      	adds	r1, r7, #4
 800a694:	2200      	movs	r2, #0
 800a696:	4618      	mov	r0, r3
 800a698:	f7fd ff5c 	bl	8008554 <xQueueReceive>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f47f af2a 	bne.w	800a4f8 <prvProcessReceivedCommands+0x8>
	}
}
 800a6a4:	bf00      	nop
 800a6a6:	bf00      	nop
 800a6a8:	3730      	adds	r7, #48	; 0x30
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	20004cb0 	.word	0x20004cb0

0800a6b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b088      	sub	sp, #32
 800a6b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6ba:	e048      	b.n	800a74e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6bc:	4b2d      	ldr	r3, [pc, #180]	; (800a774 <prvSwitchTimerLists+0xc0>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6c6:	4b2b      	ldr	r3, [pc, #172]	; (800a774 <prvSwitchTimerLists+0xc0>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	3304      	adds	r3, #4
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7fd f8f9 	bl	80078cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6a1b      	ldr	r3, [r3, #32]
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d02e      	beq.n	800a74e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d90e      	bls.n	800a720 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a70e:	4b19      	ldr	r3, [pc, #100]	; (800a774 <prvSwitchTimerLists+0xc0>)
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	3304      	adds	r3, #4
 800a716:	4619      	mov	r1, r3
 800a718:	4610      	mov	r0, r2
 800a71a:	f7fd f89e 	bl	800785a <vListInsert>
 800a71e:	e016      	b.n	800a74e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a720:	2300      	movs	r3, #0
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	2300      	movs	r3, #0
 800a726:	693a      	ldr	r2, [r7, #16]
 800a728:	2100      	movs	r1, #0
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f7ff fd60 	bl	800a1f0 <xTimerGenericCommand>
 800a730:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10a      	bne.n	800a74e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	603b      	str	r3, [r7, #0]
}
 800a74a:	bf00      	nop
 800a74c:	e7fe      	b.n	800a74c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a74e:	4b09      	ldr	r3, [pc, #36]	; (800a774 <prvSwitchTimerLists+0xc0>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1b1      	bne.n	800a6bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a758:	4b06      	ldr	r3, [pc, #24]	; (800a774 <prvSwitchTimerLists+0xc0>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a75e:	4b06      	ldr	r3, [pc, #24]	; (800a778 <prvSwitchTimerLists+0xc4>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a04      	ldr	r2, [pc, #16]	; (800a774 <prvSwitchTimerLists+0xc0>)
 800a764:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a766:	4a04      	ldr	r2, [pc, #16]	; (800a778 <prvSwitchTimerLists+0xc4>)
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	6013      	str	r3, [r2, #0]
}
 800a76c:	bf00      	nop
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	20004ca8 	.word	0x20004ca8
 800a778:	20004cac 	.word	0x20004cac

0800a77c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a782:	f7fd f9f7 	bl	8007b74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a786:	4b15      	ldr	r3, [pc, #84]	; (800a7dc <prvCheckForValidListAndQueue+0x60>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d120      	bne.n	800a7d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a78e:	4814      	ldr	r0, [pc, #80]	; (800a7e0 <prvCheckForValidListAndQueue+0x64>)
 800a790:	f7fd f812 	bl	80077b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a794:	4813      	ldr	r0, [pc, #76]	; (800a7e4 <prvCheckForValidListAndQueue+0x68>)
 800a796:	f7fd f80f 	bl	80077b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a79a:	4b13      	ldr	r3, [pc, #76]	; (800a7e8 <prvCheckForValidListAndQueue+0x6c>)
 800a79c:	4a10      	ldr	r2, [pc, #64]	; (800a7e0 <prvCheckForValidListAndQueue+0x64>)
 800a79e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7a0:	4b12      	ldr	r3, [pc, #72]	; (800a7ec <prvCheckForValidListAndQueue+0x70>)
 800a7a2:	4a10      	ldr	r2, [pc, #64]	; (800a7e4 <prvCheckForValidListAndQueue+0x68>)
 800a7a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	4b11      	ldr	r3, [pc, #68]	; (800a7f0 <prvCheckForValidListAndQueue+0x74>)
 800a7ac:	4a11      	ldr	r2, [pc, #68]	; (800a7f4 <prvCheckForValidListAndQueue+0x78>)
 800a7ae:	2110      	movs	r1, #16
 800a7b0:	200a      	movs	r0, #10
 800a7b2:	f7fd fb69 	bl	8007e88 <xQueueGenericCreateStatic>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	4a08      	ldr	r2, [pc, #32]	; (800a7dc <prvCheckForValidListAndQueue+0x60>)
 800a7ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a7bc:	4b07      	ldr	r3, [pc, #28]	; (800a7dc <prvCheckForValidListAndQueue+0x60>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d005      	beq.n	800a7d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a7c4:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <prvCheckForValidListAndQueue+0x60>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	490b      	ldr	r1, [pc, #44]	; (800a7f8 <prvCheckForValidListAndQueue+0x7c>)
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fe fa7a 	bl	8008cc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7d0:	f7fd fa00 	bl	8007bd4 <vPortExitCritical>
}
 800a7d4:	bf00      	nop
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20004cb0 	.word	0x20004cb0
 800a7e0:	20004c80 	.word	0x20004c80
 800a7e4:	20004c94 	.word	0x20004c94
 800a7e8:	20004ca8 	.word	0x20004ca8
 800a7ec:	20004cac 	.word	0x20004cac
 800a7f0:	20004d5c 	.word	0x20004d5c
 800a7f4:	20004cbc 	.word	0x20004cbc
 800a7f8:	0800bd74 	.word	0x0800bd74

0800a7fc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10a      	bne.n	800a824 <xTimerIsTimerActive+0x28>
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	60fb      	str	r3, [r7, #12]
}
 800a820:	bf00      	nop
 800a822:	e7fe      	b.n	800a822 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800a824:	f7fd f9a6 	bl	8007b74 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a82e:	f003 0301 	and.w	r3, r3, #1
 800a832:	2b00      	cmp	r3, #0
 800a834:	d102      	bne.n	800a83c <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800a836:	2300      	movs	r3, #0
 800a838:	617b      	str	r3, [r7, #20]
 800a83a:	e001      	b.n	800a840 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800a83c:	2301      	movs	r3, #1
 800a83e:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800a840:	f7fd f9c8 	bl	8007bd4 <vPortExitCritical>

	return xReturn;
 800a844:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800a846:	4618      	mov	r0, r3
 800a848:	3718      	adds	r7, #24
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b086      	sub	sp, #24
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10a      	bne.n	800a876 <pvTimerGetTimerID+0x28>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	60fb      	str	r3, [r7, #12]
}
 800a872:	bf00      	nop
 800a874:	e7fe      	b.n	800a874 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800a876:	f7fd f97d 	bl	8007b74 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a880:	f7fd f9a8 	bl	8007bd4 <vPortExitCritical>

	return pvReturn;
 800a884:	693b      	ldr	r3, [r7, #16]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <__errno>:
 800a890:	4b01      	ldr	r3, [pc, #4]	; (800a898 <__errno+0x8>)
 800a892:	6818      	ldr	r0, [r3, #0]
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	2000004c 	.word	0x2000004c

0800a89c <__libc_init_array>:
 800a89c:	b570      	push	{r4, r5, r6, lr}
 800a89e:	4d0d      	ldr	r5, [pc, #52]	; (800a8d4 <__libc_init_array+0x38>)
 800a8a0:	4c0d      	ldr	r4, [pc, #52]	; (800a8d8 <__libc_init_array+0x3c>)
 800a8a2:	1b64      	subs	r4, r4, r5
 800a8a4:	10a4      	asrs	r4, r4, #2
 800a8a6:	2600      	movs	r6, #0
 800a8a8:	42a6      	cmp	r6, r4
 800a8aa:	d109      	bne.n	800a8c0 <__libc_init_array+0x24>
 800a8ac:	4d0b      	ldr	r5, [pc, #44]	; (800a8dc <__libc_init_array+0x40>)
 800a8ae:	4c0c      	ldr	r4, [pc, #48]	; (800a8e0 <__libc_init_array+0x44>)
 800a8b0:	f001 f80c 	bl	800b8cc <_init>
 800a8b4:	1b64      	subs	r4, r4, r5
 800a8b6:	10a4      	asrs	r4, r4, #2
 800a8b8:	2600      	movs	r6, #0
 800a8ba:	42a6      	cmp	r6, r4
 800a8bc:	d105      	bne.n	800a8ca <__libc_init_array+0x2e>
 800a8be:	bd70      	pop	{r4, r5, r6, pc}
 800a8c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c4:	4798      	blx	r3
 800a8c6:	3601      	adds	r6, #1
 800a8c8:	e7ee      	b.n	800a8a8 <__libc_init_array+0xc>
 800a8ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ce:	4798      	blx	r3
 800a8d0:	3601      	adds	r6, #1
 800a8d2:	e7f2      	b.n	800a8ba <__libc_init_array+0x1e>
 800a8d4:	0800d3d8 	.word	0x0800d3d8
 800a8d8:	0800d3d8 	.word	0x0800d3d8
 800a8dc:	0800d3d8 	.word	0x0800d3d8
 800a8e0:	0800d3dc 	.word	0x0800d3dc

0800a8e4 <__retarget_lock_acquire_recursive>:
 800a8e4:	4770      	bx	lr

0800a8e6 <__retarget_lock_release_recursive>:
 800a8e6:	4770      	bx	lr

0800a8e8 <memcpy>:
 800a8e8:	440a      	add	r2, r1
 800a8ea:	4291      	cmp	r1, r2
 800a8ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8f0:	d100      	bne.n	800a8f4 <memcpy+0xc>
 800a8f2:	4770      	bx	lr
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8fe:	4291      	cmp	r1, r2
 800a900:	d1f9      	bne.n	800a8f6 <memcpy+0xe>
 800a902:	bd10      	pop	{r4, pc}

0800a904 <memset>:
 800a904:	4402      	add	r2, r0
 800a906:	4603      	mov	r3, r0
 800a908:	4293      	cmp	r3, r2
 800a90a:	d100      	bne.n	800a90e <memset+0xa>
 800a90c:	4770      	bx	lr
 800a90e:	f803 1b01 	strb.w	r1, [r3], #1
 800a912:	e7f9      	b.n	800a908 <memset+0x4>

0800a914 <cleanup_glue>:
 800a914:	b538      	push	{r3, r4, r5, lr}
 800a916:	460c      	mov	r4, r1
 800a918:	6809      	ldr	r1, [r1, #0]
 800a91a:	4605      	mov	r5, r0
 800a91c:	b109      	cbz	r1, 800a922 <cleanup_glue+0xe>
 800a91e:	f7ff fff9 	bl	800a914 <cleanup_glue>
 800a922:	4621      	mov	r1, r4
 800a924:	4628      	mov	r0, r5
 800a926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a92a:	f000 b869 	b.w	800aa00 <_free_r>
	...

0800a930 <_reclaim_reent>:
 800a930:	4b2c      	ldr	r3, [pc, #176]	; (800a9e4 <_reclaim_reent+0xb4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4283      	cmp	r3, r0
 800a936:	b570      	push	{r4, r5, r6, lr}
 800a938:	4604      	mov	r4, r0
 800a93a:	d051      	beq.n	800a9e0 <_reclaim_reent+0xb0>
 800a93c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a93e:	b143      	cbz	r3, 800a952 <_reclaim_reent+0x22>
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d14a      	bne.n	800a9dc <_reclaim_reent+0xac>
 800a946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a948:	6819      	ldr	r1, [r3, #0]
 800a94a:	b111      	cbz	r1, 800a952 <_reclaim_reent+0x22>
 800a94c:	4620      	mov	r0, r4
 800a94e:	f000 f857 	bl	800aa00 <_free_r>
 800a952:	6961      	ldr	r1, [r4, #20]
 800a954:	b111      	cbz	r1, 800a95c <_reclaim_reent+0x2c>
 800a956:	4620      	mov	r0, r4
 800a958:	f000 f852 	bl	800aa00 <_free_r>
 800a95c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a95e:	b111      	cbz	r1, 800a966 <_reclaim_reent+0x36>
 800a960:	4620      	mov	r0, r4
 800a962:	f000 f84d 	bl	800aa00 <_free_r>
 800a966:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a968:	b111      	cbz	r1, 800a970 <_reclaim_reent+0x40>
 800a96a:	4620      	mov	r0, r4
 800a96c:	f000 f848 	bl	800aa00 <_free_r>
 800a970:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a972:	b111      	cbz	r1, 800a97a <_reclaim_reent+0x4a>
 800a974:	4620      	mov	r0, r4
 800a976:	f000 f843 	bl	800aa00 <_free_r>
 800a97a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a97c:	b111      	cbz	r1, 800a984 <_reclaim_reent+0x54>
 800a97e:	4620      	mov	r0, r4
 800a980:	f000 f83e 	bl	800aa00 <_free_r>
 800a984:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a986:	b111      	cbz	r1, 800a98e <_reclaim_reent+0x5e>
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 f839 	bl	800aa00 <_free_r>
 800a98e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a990:	b111      	cbz	r1, 800a998 <_reclaim_reent+0x68>
 800a992:	4620      	mov	r0, r4
 800a994:	f000 f834 	bl	800aa00 <_free_r>
 800a998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a99a:	b111      	cbz	r1, 800a9a2 <_reclaim_reent+0x72>
 800a99c:	4620      	mov	r0, r4
 800a99e:	f000 f82f 	bl	800aa00 <_free_r>
 800a9a2:	69a3      	ldr	r3, [r4, #24]
 800a9a4:	b1e3      	cbz	r3, 800a9e0 <_reclaim_reent+0xb0>
 800a9a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	4798      	blx	r3
 800a9ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a9ae:	b1b9      	cbz	r1, 800a9e0 <_reclaim_reent+0xb0>
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9b6:	f7ff bfad 	b.w	800a914 <cleanup_glue>
 800a9ba:	5949      	ldr	r1, [r1, r5]
 800a9bc:	b941      	cbnz	r1, 800a9d0 <_reclaim_reent+0xa0>
 800a9be:	3504      	adds	r5, #4
 800a9c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9c2:	2d80      	cmp	r5, #128	; 0x80
 800a9c4:	68d9      	ldr	r1, [r3, #12]
 800a9c6:	d1f8      	bne.n	800a9ba <_reclaim_reent+0x8a>
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f000 f819 	bl	800aa00 <_free_r>
 800a9ce:	e7ba      	b.n	800a946 <_reclaim_reent+0x16>
 800a9d0:	680e      	ldr	r6, [r1, #0]
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f000 f814 	bl	800aa00 <_free_r>
 800a9d8:	4631      	mov	r1, r6
 800a9da:	e7ef      	b.n	800a9bc <_reclaim_reent+0x8c>
 800a9dc:	2500      	movs	r5, #0
 800a9de:	e7ef      	b.n	800a9c0 <_reclaim_reent+0x90>
 800a9e0:	bd70      	pop	{r4, r5, r6, pc}
 800a9e2:	bf00      	nop
 800a9e4:	2000004c 	.word	0x2000004c

0800a9e8 <__malloc_lock>:
 800a9e8:	4801      	ldr	r0, [pc, #4]	; (800a9f0 <__malloc_lock+0x8>)
 800a9ea:	f7ff bf7b 	b.w	800a8e4 <__retarget_lock_acquire_recursive>
 800a9ee:	bf00      	nop
 800a9f0:	20004dac 	.word	0x20004dac

0800a9f4 <__malloc_unlock>:
 800a9f4:	4801      	ldr	r0, [pc, #4]	; (800a9fc <__malloc_unlock+0x8>)
 800a9f6:	f7ff bf76 	b.w	800a8e6 <__retarget_lock_release_recursive>
 800a9fa:	bf00      	nop
 800a9fc:	20004dac 	.word	0x20004dac

0800aa00 <_free_r>:
 800aa00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa02:	2900      	cmp	r1, #0
 800aa04:	d044      	beq.n	800aa90 <_free_r+0x90>
 800aa06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa0a:	9001      	str	r0, [sp, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f1a1 0404 	sub.w	r4, r1, #4
 800aa12:	bfb8      	it	lt
 800aa14:	18e4      	addlt	r4, r4, r3
 800aa16:	f7ff ffe7 	bl	800a9e8 <__malloc_lock>
 800aa1a:	4a1e      	ldr	r2, [pc, #120]	; (800aa94 <_free_r+0x94>)
 800aa1c:	9801      	ldr	r0, [sp, #4]
 800aa1e:	6813      	ldr	r3, [r2, #0]
 800aa20:	b933      	cbnz	r3, 800aa30 <_free_r+0x30>
 800aa22:	6063      	str	r3, [r4, #4]
 800aa24:	6014      	str	r4, [r2, #0]
 800aa26:	b003      	add	sp, #12
 800aa28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa2c:	f7ff bfe2 	b.w	800a9f4 <__malloc_unlock>
 800aa30:	42a3      	cmp	r3, r4
 800aa32:	d908      	bls.n	800aa46 <_free_r+0x46>
 800aa34:	6825      	ldr	r5, [r4, #0]
 800aa36:	1961      	adds	r1, r4, r5
 800aa38:	428b      	cmp	r3, r1
 800aa3a:	bf01      	itttt	eq
 800aa3c:	6819      	ldreq	r1, [r3, #0]
 800aa3e:	685b      	ldreq	r3, [r3, #4]
 800aa40:	1949      	addeq	r1, r1, r5
 800aa42:	6021      	streq	r1, [r4, #0]
 800aa44:	e7ed      	b.n	800aa22 <_free_r+0x22>
 800aa46:	461a      	mov	r2, r3
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	b10b      	cbz	r3, 800aa50 <_free_r+0x50>
 800aa4c:	42a3      	cmp	r3, r4
 800aa4e:	d9fa      	bls.n	800aa46 <_free_r+0x46>
 800aa50:	6811      	ldr	r1, [r2, #0]
 800aa52:	1855      	adds	r5, r2, r1
 800aa54:	42a5      	cmp	r5, r4
 800aa56:	d10b      	bne.n	800aa70 <_free_r+0x70>
 800aa58:	6824      	ldr	r4, [r4, #0]
 800aa5a:	4421      	add	r1, r4
 800aa5c:	1854      	adds	r4, r2, r1
 800aa5e:	42a3      	cmp	r3, r4
 800aa60:	6011      	str	r1, [r2, #0]
 800aa62:	d1e0      	bne.n	800aa26 <_free_r+0x26>
 800aa64:	681c      	ldr	r4, [r3, #0]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	6053      	str	r3, [r2, #4]
 800aa6a:	4421      	add	r1, r4
 800aa6c:	6011      	str	r1, [r2, #0]
 800aa6e:	e7da      	b.n	800aa26 <_free_r+0x26>
 800aa70:	d902      	bls.n	800aa78 <_free_r+0x78>
 800aa72:	230c      	movs	r3, #12
 800aa74:	6003      	str	r3, [r0, #0]
 800aa76:	e7d6      	b.n	800aa26 <_free_r+0x26>
 800aa78:	6825      	ldr	r5, [r4, #0]
 800aa7a:	1961      	adds	r1, r4, r5
 800aa7c:	428b      	cmp	r3, r1
 800aa7e:	bf04      	itt	eq
 800aa80:	6819      	ldreq	r1, [r3, #0]
 800aa82:	685b      	ldreq	r3, [r3, #4]
 800aa84:	6063      	str	r3, [r4, #4]
 800aa86:	bf04      	itt	eq
 800aa88:	1949      	addeq	r1, r1, r5
 800aa8a:	6021      	streq	r1, [r4, #0]
 800aa8c:	6054      	str	r4, [r2, #4]
 800aa8e:	e7ca      	b.n	800aa26 <_free_r+0x26>
 800aa90:	b003      	add	sp, #12
 800aa92:	bd30      	pop	{r4, r5, pc}
 800aa94:	20004db0 	.word	0x20004db0

0800aa98 <pow>:
 800aa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9a:	ed2d 8b02 	vpush	{d8}
 800aa9e:	eeb0 8a40 	vmov.f32	s16, s0
 800aaa2:	eef0 8a60 	vmov.f32	s17, s1
 800aaa6:	ec55 4b11 	vmov	r4, r5, d1
 800aaaa:	f000 f865 	bl	800ab78 <__ieee754_pow>
 800aaae:	4622      	mov	r2, r4
 800aab0:	462b      	mov	r3, r5
 800aab2:	4620      	mov	r0, r4
 800aab4:	4629      	mov	r1, r5
 800aab6:	ec57 6b10 	vmov	r6, r7, d0
 800aaba:	f7f5 ffef 	bl	8000a9c <__aeabi_dcmpun>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d13b      	bne.n	800ab3a <pow+0xa2>
 800aac2:	ec51 0b18 	vmov	r0, r1, d8
 800aac6:	2200      	movs	r2, #0
 800aac8:	2300      	movs	r3, #0
 800aaca:	f7f5 ffb5 	bl	8000a38 <__aeabi_dcmpeq>
 800aace:	b1b8      	cbz	r0, 800ab00 <pow+0x68>
 800aad0:	2200      	movs	r2, #0
 800aad2:	2300      	movs	r3, #0
 800aad4:	4620      	mov	r0, r4
 800aad6:	4629      	mov	r1, r5
 800aad8:	f7f5 ffae 	bl	8000a38 <__aeabi_dcmpeq>
 800aadc:	2800      	cmp	r0, #0
 800aade:	d146      	bne.n	800ab6e <pow+0xd6>
 800aae0:	ec45 4b10 	vmov	d0, r4, r5
 800aae4:	f000 fe61 	bl	800b7aa <finite>
 800aae8:	b338      	cbz	r0, 800ab3a <pow+0xa2>
 800aaea:	2200      	movs	r2, #0
 800aaec:	2300      	movs	r3, #0
 800aaee:	4620      	mov	r0, r4
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	f7f5 ffab 	bl	8000a4c <__aeabi_dcmplt>
 800aaf6:	b300      	cbz	r0, 800ab3a <pow+0xa2>
 800aaf8:	f7ff feca 	bl	800a890 <__errno>
 800aafc:	2322      	movs	r3, #34	; 0x22
 800aafe:	e01b      	b.n	800ab38 <pow+0xa0>
 800ab00:	ec47 6b10 	vmov	d0, r6, r7
 800ab04:	f000 fe51 	bl	800b7aa <finite>
 800ab08:	b9e0      	cbnz	r0, 800ab44 <pow+0xac>
 800ab0a:	eeb0 0a48 	vmov.f32	s0, s16
 800ab0e:	eef0 0a68 	vmov.f32	s1, s17
 800ab12:	f000 fe4a 	bl	800b7aa <finite>
 800ab16:	b1a8      	cbz	r0, 800ab44 <pow+0xac>
 800ab18:	ec45 4b10 	vmov	d0, r4, r5
 800ab1c:	f000 fe45 	bl	800b7aa <finite>
 800ab20:	b180      	cbz	r0, 800ab44 <pow+0xac>
 800ab22:	4632      	mov	r2, r6
 800ab24:	463b      	mov	r3, r7
 800ab26:	4630      	mov	r0, r6
 800ab28:	4639      	mov	r1, r7
 800ab2a:	f7f5 ffb7 	bl	8000a9c <__aeabi_dcmpun>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	d0e2      	beq.n	800aaf8 <pow+0x60>
 800ab32:	f7ff fead 	bl	800a890 <__errno>
 800ab36:	2321      	movs	r3, #33	; 0x21
 800ab38:	6003      	str	r3, [r0, #0]
 800ab3a:	ecbd 8b02 	vpop	{d8}
 800ab3e:	ec47 6b10 	vmov	d0, r6, r7
 800ab42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab44:	2200      	movs	r2, #0
 800ab46:	2300      	movs	r3, #0
 800ab48:	4630      	mov	r0, r6
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	f7f5 ff74 	bl	8000a38 <__aeabi_dcmpeq>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d0f2      	beq.n	800ab3a <pow+0xa2>
 800ab54:	eeb0 0a48 	vmov.f32	s0, s16
 800ab58:	eef0 0a68 	vmov.f32	s1, s17
 800ab5c:	f000 fe25 	bl	800b7aa <finite>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d0ea      	beq.n	800ab3a <pow+0xa2>
 800ab64:	ec45 4b10 	vmov	d0, r4, r5
 800ab68:	f000 fe1f 	bl	800b7aa <finite>
 800ab6c:	e7c3      	b.n	800aaf6 <pow+0x5e>
 800ab6e:	4f01      	ldr	r7, [pc, #4]	; (800ab74 <pow+0xdc>)
 800ab70:	2600      	movs	r6, #0
 800ab72:	e7e2      	b.n	800ab3a <pow+0xa2>
 800ab74:	3ff00000 	.word	0x3ff00000

0800ab78 <__ieee754_pow>:
 800ab78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7c:	ed2d 8b06 	vpush	{d8-d10}
 800ab80:	b089      	sub	sp, #36	; 0x24
 800ab82:	ed8d 1b00 	vstr	d1, [sp]
 800ab86:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ab8a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ab8e:	ea58 0102 	orrs.w	r1, r8, r2
 800ab92:	ec57 6b10 	vmov	r6, r7, d0
 800ab96:	d115      	bne.n	800abc4 <__ieee754_pow+0x4c>
 800ab98:	19b3      	adds	r3, r6, r6
 800ab9a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ab9e:	4152      	adcs	r2, r2
 800aba0:	4299      	cmp	r1, r3
 800aba2:	4b89      	ldr	r3, [pc, #548]	; (800adc8 <__ieee754_pow+0x250>)
 800aba4:	4193      	sbcs	r3, r2
 800aba6:	f080 84d2 	bcs.w	800b54e <__ieee754_pow+0x9d6>
 800abaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abae:	4630      	mov	r0, r6
 800abb0:	4639      	mov	r1, r7
 800abb2:	f7f5 fb23 	bl	80001fc <__adddf3>
 800abb6:	ec41 0b10 	vmov	d0, r0, r1
 800abba:	b009      	add	sp, #36	; 0x24
 800abbc:	ecbd 8b06 	vpop	{d8-d10}
 800abc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc4:	4b81      	ldr	r3, [pc, #516]	; (800adcc <__ieee754_pow+0x254>)
 800abc6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800abca:	429c      	cmp	r4, r3
 800abcc:	ee10 aa10 	vmov	sl, s0
 800abd0:	463d      	mov	r5, r7
 800abd2:	dc06      	bgt.n	800abe2 <__ieee754_pow+0x6a>
 800abd4:	d101      	bne.n	800abda <__ieee754_pow+0x62>
 800abd6:	2e00      	cmp	r6, #0
 800abd8:	d1e7      	bne.n	800abaa <__ieee754_pow+0x32>
 800abda:	4598      	cmp	r8, r3
 800abdc:	dc01      	bgt.n	800abe2 <__ieee754_pow+0x6a>
 800abde:	d10f      	bne.n	800ac00 <__ieee754_pow+0x88>
 800abe0:	b172      	cbz	r2, 800ac00 <__ieee754_pow+0x88>
 800abe2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800abe6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800abea:	ea55 050a 	orrs.w	r5, r5, sl
 800abee:	d1dc      	bne.n	800abaa <__ieee754_pow+0x32>
 800abf0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800abf4:	18db      	adds	r3, r3, r3
 800abf6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800abfa:	4152      	adcs	r2, r2
 800abfc:	429d      	cmp	r5, r3
 800abfe:	e7d0      	b.n	800aba2 <__ieee754_pow+0x2a>
 800ac00:	2d00      	cmp	r5, #0
 800ac02:	da3b      	bge.n	800ac7c <__ieee754_pow+0x104>
 800ac04:	4b72      	ldr	r3, [pc, #456]	; (800add0 <__ieee754_pow+0x258>)
 800ac06:	4598      	cmp	r8, r3
 800ac08:	dc51      	bgt.n	800acae <__ieee754_pow+0x136>
 800ac0a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ac0e:	4598      	cmp	r8, r3
 800ac10:	f340 84ac 	ble.w	800b56c <__ieee754_pow+0x9f4>
 800ac14:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ac18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ac1c:	2b14      	cmp	r3, #20
 800ac1e:	dd0f      	ble.n	800ac40 <__ieee754_pow+0xc8>
 800ac20:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ac24:	fa22 f103 	lsr.w	r1, r2, r3
 800ac28:	fa01 f303 	lsl.w	r3, r1, r3
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	f040 849d 	bne.w	800b56c <__ieee754_pow+0x9f4>
 800ac32:	f001 0101 	and.w	r1, r1, #1
 800ac36:	f1c1 0302 	rsb	r3, r1, #2
 800ac3a:	9304      	str	r3, [sp, #16]
 800ac3c:	b182      	cbz	r2, 800ac60 <__ieee754_pow+0xe8>
 800ac3e:	e05f      	b.n	800ad00 <__ieee754_pow+0x188>
 800ac40:	2a00      	cmp	r2, #0
 800ac42:	d15b      	bne.n	800acfc <__ieee754_pow+0x184>
 800ac44:	f1c3 0314 	rsb	r3, r3, #20
 800ac48:	fa48 f103 	asr.w	r1, r8, r3
 800ac4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac50:	4543      	cmp	r3, r8
 800ac52:	f040 8488 	bne.w	800b566 <__ieee754_pow+0x9ee>
 800ac56:	f001 0101 	and.w	r1, r1, #1
 800ac5a:	f1c1 0302 	rsb	r3, r1, #2
 800ac5e:	9304      	str	r3, [sp, #16]
 800ac60:	4b5c      	ldr	r3, [pc, #368]	; (800add4 <__ieee754_pow+0x25c>)
 800ac62:	4598      	cmp	r8, r3
 800ac64:	d132      	bne.n	800accc <__ieee754_pow+0x154>
 800ac66:	f1b9 0f00 	cmp.w	r9, #0
 800ac6a:	f280 8478 	bge.w	800b55e <__ieee754_pow+0x9e6>
 800ac6e:	4959      	ldr	r1, [pc, #356]	; (800add4 <__ieee754_pow+0x25c>)
 800ac70:	4632      	mov	r2, r6
 800ac72:	463b      	mov	r3, r7
 800ac74:	2000      	movs	r0, #0
 800ac76:	f7f5 fda1 	bl	80007bc <__aeabi_ddiv>
 800ac7a:	e79c      	b.n	800abb6 <__ieee754_pow+0x3e>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	9304      	str	r3, [sp, #16]
 800ac80:	2a00      	cmp	r2, #0
 800ac82:	d13d      	bne.n	800ad00 <__ieee754_pow+0x188>
 800ac84:	4b51      	ldr	r3, [pc, #324]	; (800adcc <__ieee754_pow+0x254>)
 800ac86:	4598      	cmp	r8, r3
 800ac88:	d1ea      	bne.n	800ac60 <__ieee754_pow+0xe8>
 800ac8a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ac8e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ac92:	ea53 030a 	orrs.w	r3, r3, sl
 800ac96:	f000 845a 	beq.w	800b54e <__ieee754_pow+0x9d6>
 800ac9a:	4b4f      	ldr	r3, [pc, #316]	; (800add8 <__ieee754_pow+0x260>)
 800ac9c:	429c      	cmp	r4, r3
 800ac9e:	dd08      	ble.n	800acb2 <__ieee754_pow+0x13a>
 800aca0:	f1b9 0f00 	cmp.w	r9, #0
 800aca4:	f2c0 8457 	blt.w	800b556 <__ieee754_pow+0x9de>
 800aca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acac:	e783      	b.n	800abb6 <__ieee754_pow+0x3e>
 800acae:	2302      	movs	r3, #2
 800acb0:	e7e5      	b.n	800ac7e <__ieee754_pow+0x106>
 800acb2:	f1b9 0f00 	cmp.w	r9, #0
 800acb6:	f04f 0000 	mov.w	r0, #0
 800acba:	f04f 0100 	mov.w	r1, #0
 800acbe:	f6bf af7a 	bge.w	800abb6 <__ieee754_pow+0x3e>
 800acc2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800acc6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800acca:	e774      	b.n	800abb6 <__ieee754_pow+0x3e>
 800accc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800acd0:	d106      	bne.n	800ace0 <__ieee754_pow+0x168>
 800acd2:	4632      	mov	r2, r6
 800acd4:	463b      	mov	r3, r7
 800acd6:	4630      	mov	r0, r6
 800acd8:	4639      	mov	r1, r7
 800acda:	f7f5 fc45 	bl	8000568 <__aeabi_dmul>
 800acde:	e76a      	b.n	800abb6 <__ieee754_pow+0x3e>
 800ace0:	4b3e      	ldr	r3, [pc, #248]	; (800addc <__ieee754_pow+0x264>)
 800ace2:	4599      	cmp	r9, r3
 800ace4:	d10c      	bne.n	800ad00 <__ieee754_pow+0x188>
 800ace6:	2d00      	cmp	r5, #0
 800ace8:	db0a      	blt.n	800ad00 <__ieee754_pow+0x188>
 800acea:	ec47 6b10 	vmov	d0, r6, r7
 800acee:	b009      	add	sp, #36	; 0x24
 800acf0:	ecbd 8b06 	vpop	{d8-d10}
 800acf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	f000 bc6c 	b.w	800b5d4 <__ieee754_sqrt>
 800acfc:	2300      	movs	r3, #0
 800acfe:	9304      	str	r3, [sp, #16]
 800ad00:	ec47 6b10 	vmov	d0, r6, r7
 800ad04:	f000 fd48 	bl	800b798 <fabs>
 800ad08:	ec51 0b10 	vmov	r0, r1, d0
 800ad0c:	f1ba 0f00 	cmp.w	sl, #0
 800ad10:	d129      	bne.n	800ad66 <__ieee754_pow+0x1ee>
 800ad12:	b124      	cbz	r4, 800ad1e <__ieee754_pow+0x1a6>
 800ad14:	4b2f      	ldr	r3, [pc, #188]	; (800add4 <__ieee754_pow+0x25c>)
 800ad16:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d123      	bne.n	800ad66 <__ieee754_pow+0x1ee>
 800ad1e:	f1b9 0f00 	cmp.w	r9, #0
 800ad22:	da05      	bge.n	800ad30 <__ieee754_pow+0x1b8>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	2000      	movs	r0, #0
 800ad2a:	492a      	ldr	r1, [pc, #168]	; (800add4 <__ieee754_pow+0x25c>)
 800ad2c:	f7f5 fd46 	bl	80007bc <__aeabi_ddiv>
 800ad30:	2d00      	cmp	r5, #0
 800ad32:	f6bf af40 	bge.w	800abb6 <__ieee754_pow+0x3e>
 800ad36:	9b04      	ldr	r3, [sp, #16]
 800ad38:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ad3c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ad40:	4323      	orrs	r3, r4
 800ad42:	d108      	bne.n	800ad56 <__ieee754_pow+0x1de>
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
 800ad48:	4610      	mov	r0, r2
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	f7f5 fa54 	bl	80001f8 <__aeabi_dsub>
 800ad50:	4602      	mov	r2, r0
 800ad52:	460b      	mov	r3, r1
 800ad54:	e78f      	b.n	800ac76 <__ieee754_pow+0xfe>
 800ad56:	9b04      	ldr	r3, [sp, #16]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	f47f af2c 	bne.w	800abb6 <__ieee754_pow+0x3e>
 800ad5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad62:	4619      	mov	r1, r3
 800ad64:	e727      	b.n	800abb6 <__ieee754_pow+0x3e>
 800ad66:	0feb      	lsrs	r3, r5, #31
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	9306      	str	r3, [sp, #24]
 800ad6c:	9a06      	ldr	r2, [sp, #24]
 800ad6e:	9b04      	ldr	r3, [sp, #16]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	d102      	bne.n	800ad7a <__ieee754_pow+0x202>
 800ad74:	4632      	mov	r2, r6
 800ad76:	463b      	mov	r3, r7
 800ad78:	e7e6      	b.n	800ad48 <__ieee754_pow+0x1d0>
 800ad7a:	4b19      	ldr	r3, [pc, #100]	; (800ade0 <__ieee754_pow+0x268>)
 800ad7c:	4598      	cmp	r8, r3
 800ad7e:	f340 80fb 	ble.w	800af78 <__ieee754_pow+0x400>
 800ad82:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ad86:	4598      	cmp	r8, r3
 800ad88:	4b13      	ldr	r3, [pc, #76]	; (800add8 <__ieee754_pow+0x260>)
 800ad8a:	dd0c      	ble.n	800ada6 <__ieee754_pow+0x22e>
 800ad8c:	429c      	cmp	r4, r3
 800ad8e:	dc0f      	bgt.n	800adb0 <__ieee754_pow+0x238>
 800ad90:	f1b9 0f00 	cmp.w	r9, #0
 800ad94:	da0f      	bge.n	800adb6 <__ieee754_pow+0x23e>
 800ad96:	2000      	movs	r0, #0
 800ad98:	b009      	add	sp, #36	; 0x24
 800ad9a:	ecbd 8b06 	vpop	{d8-d10}
 800ad9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada2:	f000 bcf0 	b.w	800b786 <__math_oflow>
 800ada6:	429c      	cmp	r4, r3
 800ada8:	dbf2      	blt.n	800ad90 <__ieee754_pow+0x218>
 800adaa:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <__ieee754_pow+0x25c>)
 800adac:	429c      	cmp	r4, r3
 800adae:	dd19      	ble.n	800ade4 <__ieee754_pow+0x26c>
 800adb0:	f1b9 0f00 	cmp.w	r9, #0
 800adb4:	dcef      	bgt.n	800ad96 <__ieee754_pow+0x21e>
 800adb6:	2000      	movs	r0, #0
 800adb8:	b009      	add	sp, #36	; 0x24
 800adba:	ecbd 8b06 	vpop	{d8-d10}
 800adbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc2:	f000 bcd7 	b.w	800b774 <__math_uflow>
 800adc6:	bf00      	nop
 800adc8:	fff00000 	.word	0xfff00000
 800adcc:	7ff00000 	.word	0x7ff00000
 800add0:	433fffff 	.word	0x433fffff
 800add4:	3ff00000 	.word	0x3ff00000
 800add8:	3fefffff 	.word	0x3fefffff
 800addc:	3fe00000 	.word	0x3fe00000
 800ade0:	41e00000 	.word	0x41e00000
 800ade4:	4b60      	ldr	r3, [pc, #384]	; (800af68 <__ieee754_pow+0x3f0>)
 800ade6:	2200      	movs	r2, #0
 800ade8:	f7f5 fa06 	bl	80001f8 <__aeabi_dsub>
 800adec:	a354      	add	r3, pc, #336	; (adr r3, 800af40 <__ieee754_pow+0x3c8>)
 800adee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf2:	4604      	mov	r4, r0
 800adf4:	460d      	mov	r5, r1
 800adf6:	f7f5 fbb7 	bl	8000568 <__aeabi_dmul>
 800adfa:	a353      	add	r3, pc, #332	; (adr r3, 800af48 <__ieee754_pow+0x3d0>)
 800adfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae00:	4606      	mov	r6, r0
 800ae02:	460f      	mov	r7, r1
 800ae04:	4620      	mov	r0, r4
 800ae06:	4629      	mov	r1, r5
 800ae08:	f7f5 fbae 	bl	8000568 <__aeabi_dmul>
 800ae0c:	4b57      	ldr	r3, [pc, #348]	; (800af6c <__ieee754_pow+0x3f4>)
 800ae0e:	4682      	mov	sl, r0
 800ae10:	468b      	mov	fp, r1
 800ae12:	2200      	movs	r2, #0
 800ae14:	4620      	mov	r0, r4
 800ae16:	4629      	mov	r1, r5
 800ae18:	f7f5 fba6 	bl	8000568 <__aeabi_dmul>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	a14b      	add	r1, pc, #300	; (adr r1, 800af50 <__ieee754_pow+0x3d8>)
 800ae22:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae26:	f7f5 f9e7 	bl	80001f8 <__aeabi_dsub>
 800ae2a:	4622      	mov	r2, r4
 800ae2c:	462b      	mov	r3, r5
 800ae2e:	f7f5 fb9b 	bl	8000568 <__aeabi_dmul>
 800ae32:	4602      	mov	r2, r0
 800ae34:	460b      	mov	r3, r1
 800ae36:	2000      	movs	r0, #0
 800ae38:	494d      	ldr	r1, [pc, #308]	; (800af70 <__ieee754_pow+0x3f8>)
 800ae3a:	f7f5 f9dd 	bl	80001f8 <__aeabi_dsub>
 800ae3e:	4622      	mov	r2, r4
 800ae40:	4680      	mov	r8, r0
 800ae42:	4689      	mov	r9, r1
 800ae44:	462b      	mov	r3, r5
 800ae46:	4620      	mov	r0, r4
 800ae48:	4629      	mov	r1, r5
 800ae4a:	f7f5 fb8d 	bl	8000568 <__aeabi_dmul>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4640      	mov	r0, r8
 800ae54:	4649      	mov	r1, r9
 800ae56:	f7f5 fb87 	bl	8000568 <__aeabi_dmul>
 800ae5a:	a33f      	add	r3, pc, #252	; (adr r3, 800af58 <__ieee754_pow+0x3e0>)
 800ae5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae60:	f7f5 fb82 	bl	8000568 <__aeabi_dmul>
 800ae64:	4602      	mov	r2, r0
 800ae66:	460b      	mov	r3, r1
 800ae68:	4650      	mov	r0, sl
 800ae6a:	4659      	mov	r1, fp
 800ae6c:	f7f5 f9c4 	bl	80001f8 <__aeabi_dsub>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	4680      	mov	r8, r0
 800ae76:	4689      	mov	r9, r1
 800ae78:	4630      	mov	r0, r6
 800ae7a:	4639      	mov	r1, r7
 800ae7c:	f7f5 f9be 	bl	80001fc <__adddf3>
 800ae80:	2000      	movs	r0, #0
 800ae82:	4632      	mov	r2, r6
 800ae84:	463b      	mov	r3, r7
 800ae86:	4604      	mov	r4, r0
 800ae88:	460d      	mov	r5, r1
 800ae8a:	f7f5 f9b5 	bl	80001f8 <__aeabi_dsub>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	4640      	mov	r0, r8
 800ae94:	4649      	mov	r1, r9
 800ae96:	f7f5 f9af 	bl	80001f8 <__aeabi_dsub>
 800ae9a:	9b04      	ldr	r3, [sp, #16]
 800ae9c:	9a06      	ldr	r2, [sp, #24]
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	4313      	orrs	r3, r2
 800aea2:	4682      	mov	sl, r0
 800aea4:	468b      	mov	fp, r1
 800aea6:	f040 81e7 	bne.w	800b278 <__ieee754_pow+0x700>
 800aeaa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800af60 <__ieee754_pow+0x3e8>
 800aeae:	eeb0 8a47 	vmov.f32	s16, s14
 800aeb2:	eef0 8a67 	vmov.f32	s17, s15
 800aeb6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aeba:	2600      	movs	r6, #0
 800aebc:	4632      	mov	r2, r6
 800aebe:	463b      	mov	r3, r7
 800aec0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aec4:	f7f5 f998 	bl	80001f8 <__aeabi_dsub>
 800aec8:	4622      	mov	r2, r4
 800aeca:	462b      	mov	r3, r5
 800aecc:	f7f5 fb4c 	bl	8000568 <__aeabi_dmul>
 800aed0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aed4:	4680      	mov	r8, r0
 800aed6:	4689      	mov	r9, r1
 800aed8:	4650      	mov	r0, sl
 800aeda:	4659      	mov	r1, fp
 800aedc:	f7f5 fb44 	bl	8000568 <__aeabi_dmul>
 800aee0:	4602      	mov	r2, r0
 800aee2:	460b      	mov	r3, r1
 800aee4:	4640      	mov	r0, r8
 800aee6:	4649      	mov	r1, r9
 800aee8:	f7f5 f988 	bl	80001fc <__adddf3>
 800aeec:	4632      	mov	r2, r6
 800aeee:	463b      	mov	r3, r7
 800aef0:	4680      	mov	r8, r0
 800aef2:	4689      	mov	r9, r1
 800aef4:	4620      	mov	r0, r4
 800aef6:	4629      	mov	r1, r5
 800aef8:	f7f5 fb36 	bl	8000568 <__aeabi_dmul>
 800aefc:	460b      	mov	r3, r1
 800aefe:	4604      	mov	r4, r0
 800af00:	460d      	mov	r5, r1
 800af02:	4602      	mov	r2, r0
 800af04:	4649      	mov	r1, r9
 800af06:	4640      	mov	r0, r8
 800af08:	f7f5 f978 	bl	80001fc <__adddf3>
 800af0c:	4b19      	ldr	r3, [pc, #100]	; (800af74 <__ieee754_pow+0x3fc>)
 800af0e:	4299      	cmp	r1, r3
 800af10:	ec45 4b19 	vmov	d9, r4, r5
 800af14:	4606      	mov	r6, r0
 800af16:	460f      	mov	r7, r1
 800af18:	468b      	mov	fp, r1
 800af1a:	f340 82f1 	ble.w	800b500 <__ieee754_pow+0x988>
 800af1e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800af22:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800af26:	4303      	orrs	r3, r0
 800af28:	f000 81e4 	beq.w	800b2f4 <__ieee754_pow+0x77c>
 800af2c:	ec51 0b18 	vmov	r0, r1, d8
 800af30:	2200      	movs	r2, #0
 800af32:	2300      	movs	r3, #0
 800af34:	f7f5 fd8a 	bl	8000a4c <__aeabi_dcmplt>
 800af38:	3800      	subs	r0, #0
 800af3a:	bf18      	it	ne
 800af3c:	2001      	movne	r0, #1
 800af3e:	e72b      	b.n	800ad98 <__ieee754_pow+0x220>
 800af40:	60000000 	.word	0x60000000
 800af44:	3ff71547 	.word	0x3ff71547
 800af48:	f85ddf44 	.word	0xf85ddf44
 800af4c:	3e54ae0b 	.word	0x3e54ae0b
 800af50:	55555555 	.word	0x55555555
 800af54:	3fd55555 	.word	0x3fd55555
 800af58:	652b82fe 	.word	0x652b82fe
 800af5c:	3ff71547 	.word	0x3ff71547
 800af60:	00000000 	.word	0x00000000
 800af64:	bff00000 	.word	0xbff00000
 800af68:	3ff00000 	.word	0x3ff00000
 800af6c:	3fd00000 	.word	0x3fd00000
 800af70:	3fe00000 	.word	0x3fe00000
 800af74:	408fffff 	.word	0x408fffff
 800af78:	4bd5      	ldr	r3, [pc, #852]	; (800b2d0 <__ieee754_pow+0x758>)
 800af7a:	402b      	ands	r3, r5
 800af7c:	2200      	movs	r2, #0
 800af7e:	b92b      	cbnz	r3, 800af8c <__ieee754_pow+0x414>
 800af80:	4bd4      	ldr	r3, [pc, #848]	; (800b2d4 <__ieee754_pow+0x75c>)
 800af82:	f7f5 faf1 	bl	8000568 <__aeabi_dmul>
 800af86:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800af8a:	460c      	mov	r4, r1
 800af8c:	1523      	asrs	r3, r4, #20
 800af8e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800af92:	4413      	add	r3, r2
 800af94:	9305      	str	r3, [sp, #20]
 800af96:	4bd0      	ldr	r3, [pc, #832]	; (800b2d8 <__ieee754_pow+0x760>)
 800af98:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800af9c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800afa0:	429c      	cmp	r4, r3
 800afa2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800afa6:	dd08      	ble.n	800afba <__ieee754_pow+0x442>
 800afa8:	4bcc      	ldr	r3, [pc, #816]	; (800b2dc <__ieee754_pow+0x764>)
 800afaa:	429c      	cmp	r4, r3
 800afac:	f340 8162 	ble.w	800b274 <__ieee754_pow+0x6fc>
 800afb0:	9b05      	ldr	r3, [sp, #20]
 800afb2:	3301      	adds	r3, #1
 800afb4:	9305      	str	r3, [sp, #20]
 800afb6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800afba:	2400      	movs	r4, #0
 800afbc:	00e3      	lsls	r3, r4, #3
 800afbe:	9307      	str	r3, [sp, #28]
 800afc0:	4bc7      	ldr	r3, [pc, #796]	; (800b2e0 <__ieee754_pow+0x768>)
 800afc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afc6:	ed93 7b00 	vldr	d7, [r3]
 800afca:	4629      	mov	r1, r5
 800afcc:	ec53 2b17 	vmov	r2, r3, d7
 800afd0:	eeb0 9a47 	vmov.f32	s18, s14
 800afd4:	eef0 9a67 	vmov.f32	s19, s15
 800afd8:	4682      	mov	sl, r0
 800afda:	f7f5 f90d 	bl	80001f8 <__aeabi_dsub>
 800afde:	4652      	mov	r2, sl
 800afe0:	4606      	mov	r6, r0
 800afe2:	460f      	mov	r7, r1
 800afe4:	462b      	mov	r3, r5
 800afe6:	ec51 0b19 	vmov	r0, r1, d9
 800afea:	f7f5 f907 	bl	80001fc <__adddf3>
 800afee:	4602      	mov	r2, r0
 800aff0:	460b      	mov	r3, r1
 800aff2:	2000      	movs	r0, #0
 800aff4:	49bb      	ldr	r1, [pc, #748]	; (800b2e4 <__ieee754_pow+0x76c>)
 800aff6:	f7f5 fbe1 	bl	80007bc <__aeabi_ddiv>
 800affa:	ec41 0b1a 	vmov	d10, r0, r1
 800affe:	4602      	mov	r2, r0
 800b000:	460b      	mov	r3, r1
 800b002:	4630      	mov	r0, r6
 800b004:	4639      	mov	r1, r7
 800b006:	f7f5 faaf 	bl	8000568 <__aeabi_dmul>
 800b00a:	2300      	movs	r3, #0
 800b00c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b010:	9302      	str	r3, [sp, #8]
 800b012:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b016:	46ab      	mov	fp, r5
 800b018:	106d      	asrs	r5, r5, #1
 800b01a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b01e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b022:	ec41 0b18 	vmov	d8, r0, r1
 800b026:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b02a:	2200      	movs	r2, #0
 800b02c:	4640      	mov	r0, r8
 800b02e:	4649      	mov	r1, r9
 800b030:	4614      	mov	r4, r2
 800b032:	461d      	mov	r5, r3
 800b034:	f7f5 fa98 	bl	8000568 <__aeabi_dmul>
 800b038:	4602      	mov	r2, r0
 800b03a:	460b      	mov	r3, r1
 800b03c:	4630      	mov	r0, r6
 800b03e:	4639      	mov	r1, r7
 800b040:	f7f5 f8da 	bl	80001f8 <__aeabi_dsub>
 800b044:	ec53 2b19 	vmov	r2, r3, d9
 800b048:	4606      	mov	r6, r0
 800b04a:	460f      	mov	r7, r1
 800b04c:	4620      	mov	r0, r4
 800b04e:	4629      	mov	r1, r5
 800b050:	f7f5 f8d2 	bl	80001f8 <__aeabi_dsub>
 800b054:	4602      	mov	r2, r0
 800b056:	460b      	mov	r3, r1
 800b058:	4650      	mov	r0, sl
 800b05a:	4659      	mov	r1, fp
 800b05c:	f7f5 f8cc 	bl	80001f8 <__aeabi_dsub>
 800b060:	4642      	mov	r2, r8
 800b062:	464b      	mov	r3, r9
 800b064:	f7f5 fa80 	bl	8000568 <__aeabi_dmul>
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
 800b06c:	4630      	mov	r0, r6
 800b06e:	4639      	mov	r1, r7
 800b070:	f7f5 f8c2 	bl	80001f8 <__aeabi_dsub>
 800b074:	ec53 2b1a 	vmov	r2, r3, d10
 800b078:	f7f5 fa76 	bl	8000568 <__aeabi_dmul>
 800b07c:	ec53 2b18 	vmov	r2, r3, d8
 800b080:	ec41 0b19 	vmov	d9, r0, r1
 800b084:	ec51 0b18 	vmov	r0, r1, d8
 800b088:	f7f5 fa6e 	bl	8000568 <__aeabi_dmul>
 800b08c:	a37c      	add	r3, pc, #496	; (adr r3, 800b280 <__ieee754_pow+0x708>)
 800b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b092:	4604      	mov	r4, r0
 800b094:	460d      	mov	r5, r1
 800b096:	f7f5 fa67 	bl	8000568 <__aeabi_dmul>
 800b09a:	a37b      	add	r3, pc, #492	; (adr r3, 800b288 <__ieee754_pow+0x710>)
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	f7f5 f8ac 	bl	80001fc <__adddf3>
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	462b      	mov	r3, r5
 800b0a8:	f7f5 fa5e 	bl	8000568 <__aeabi_dmul>
 800b0ac:	a378      	add	r3, pc, #480	; (adr r3, 800b290 <__ieee754_pow+0x718>)
 800b0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b2:	f7f5 f8a3 	bl	80001fc <__adddf3>
 800b0b6:	4622      	mov	r2, r4
 800b0b8:	462b      	mov	r3, r5
 800b0ba:	f7f5 fa55 	bl	8000568 <__aeabi_dmul>
 800b0be:	a376      	add	r3, pc, #472	; (adr r3, 800b298 <__ieee754_pow+0x720>)
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	f7f5 f89a 	bl	80001fc <__adddf3>
 800b0c8:	4622      	mov	r2, r4
 800b0ca:	462b      	mov	r3, r5
 800b0cc:	f7f5 fa4c 	bl	8000568 <__aeabi_dmul>
 800b0d0:	a373      	add	r3, pc, #460	; (adr r3, 800b2a0 <__ieee754_pow+0x728>)
 800b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d6:	f7f5 f891 	bl	80001fc <__adddf3>
 800b0da:	4622      	mov	r2, r4
 800b0dc:	462b      	mov	r3, r5
 800b0de:	f7f5 fa43 	bl	8000568 <__aeabi_dmul>
 800b0e2:	a371      	add	r3, pc, #452	; (adr r3, 800b2a8 <__ieee754_pow+0x730>)
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f7f5 f888 	bl	80001fc <__adddf3>
 800b0ec:	4622      	mov	r2, r4
 800b0ee:	4606      	mov	r6, r0
 800b0f0:	460f      	mov	r7, r1
 800b0f2:	462b      	mov	r3, r5
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	f7f5 fa36 	bl	8000568 <__aeabi_dmul>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	4630      	mov	r0, r6
 800b102:	4639      	mov	r1, r7
 800b104:	f7f5 fa30 	bl	8000568 <__aeabi_dmul>
 800b108:	4642      	mov	r2, r8
 800b10a:	4604      	mov	r4, r0
 800b10c:	460d      	mov	r5, r1
 800b10e:	464b      	mov	r3, r9
 800b110:	ec51 0b18 	vmov	r0, r1, d8
 800b114:	f7f5 f872 	bl	80001fc <__adddf3>
 800b118:	ec53 2b19 	vmov	r2, r3, d9
 800b11c:	f7f5 fa24 	bl	8000568 <__aeabi_dmul>
 800b120:	4622      	mov	r2, r4
 800b122:	462b      	mov	r3, r5
 800b124:	f7f5 f86a 	bl	80001fc <__adddf3>
 800b128:	4642      	mov	r2, r8
 800b12a:	4682      	mov	sl, r0
 800b12c:	468b      	mov	fp, r1
 800b12e:	464b      	mov	r3, r9
 800b130:	4640      	mov	r0, r8
 800b132:	4649      	mov	r1, r9
 800b134:	f7f5 fa18 	bl	8000568 <__aeabi_dmul>
 800b138:	4b6b      	ldr	r3, [pc, #428]	; (800b2e8 <__ieee754_pow+0x770>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	4606      	mov	r6, r0
 800b13e:	460f      	mov	r7, r1
 800b140:	f7f5 f85c 	bl	80001fc <__adddf3>
 800b144:	4652      	mov	r2, sl
 800b146:	465b      	mov	r3, fp
 800b148:	f7f5 f858 	bl	80001fc <__adddf3>
 800b14c:	2000      	movs	r0, #0
 800b14e:	4604      	mov	r4, r0
 800b150:	460d      	mov	r5, r1
 800b152:	4602      	mov	r2, r0
 800b154:	460b      	mov	r3, r1
 800b156:	4640      	mov	r0, r8
 800b158:	4649      	mov	r1, r9
 800b15a:	f7f5 fa05 	bl	8000568 <__aeabi_dmul>
 800b15e:	4b62      	ldr	r3, [pc, #392]	; (800b2e8 <__ieee754_pow+0x770>)
 800b160:	4680      	mov	r8, r0
 800b162:	4689      	mov	r9, r1
 800b164:	2200      	movs	r2, #0
 800b166:	4620      	mov	r0, r4
 800b168:	4629      	mov	r1, r5
 800b16a:	f7f5 f845 	bl	80001f8 <__aeabi_dsub>
 800b16e:	4632      	mov	r2, r6
 800b170:	463b      	mov	r3, r7
 800b172:	f7f5 f841 	bl	80001f8 <__aeabi_dsub>
 800b176:	4602      	mov	r2, r0
 800b178:	460b      	mov	r3, r1
 800b17a:	4650      	mov	r0, sl
 800b17c:	4659      	mov	r1, fp
 800b17e:	f7f5 f83b 	bl	80001f8 <__aeabi_dsub>
 800b182:	ec53 2b18 	vmov	r2, r3, d8
 800b186:	f7f5 f9ef 	bl	8000568 <__aeabi_dmul>
 800b18a:	4622      	mov	r2, r4
 800b18c:	4606      	mov	r6, r0
 800b18e:	460f      	mov	r7, r1
 800b190:	462b      	mov	r3, r5
 800b192:	ec51 0b19 	vmov	r0, r1, d9
 800b196:	f7f5 f9e7 	bl	8000568 <__aeabi_dmul>
 800b19a:	4602      	mov	r2, r0
 800b19c:	460b      	mov	r3, r1
 800b19e:	4630      	mov	r0, r6
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	f7f5 f82b 	bl	80001fc <__adddf3>
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	460f      	mov	r7, r1
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4640      	mov	r0, r8
 800b1b0:	4649      	mov	r1, r9
 800b1b2:	f7f5 f823 	bl	80001fc <__adddf3>
 800b1b6:	a33e      	add	r3, pc, #248	; (adr r3, 800b2b0 <__ieee754_pow+0x738>)
 800b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1bc:	2000      	movs	r0, #0
 800b1be:	4604      	mov	r4, r0
 800b1c0:	460d      	mov	r5, r1
 800b1c2:	f7f5 f9d1 	bl	8000568 <__aeabi_dmul>
 800b1c6:	4642      	mov	r2, r8
 800b1c8:	ec41 0b18 	vmov	d8, r0, r1
 800b1cc:	464b      	mov	r3, r9
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	f7f5 f811 	bl	80001f8 <__aeabi_dsub>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	4630      	mov	r0, r6
 800b1dc:	4639      	mov	r1, r7
 800b1de:	f7f5 f80b 	bl	80001f8 <__aeabi_dsub>
 800b1e2:	a335      	add	r3, pc, #212	; (adr r3, 800b2b8 <__ieee754_pow+0x740>)
 800b1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e8:	f7f5 f9be 	bl	8000568 <__aeabi_dmul>
 800b1ec:	a334      	add	r3, pc, #208	; (adr r3, 800b2c0 <__ieee754_pow+0x748>)
 800b1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	460f      	mov	r7, r1
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	f7f5 f9b5 	bl	8000568 <__aeabi_dmul>
 800b1fe:	4602      	mov	r2, r0
 800b200:	460b      	mov	r3, r1
 800b202:	4630      	mov	r0, r6
 800b204:	4639      	mov	r1, r7
 800b206:	f7f4 fff9 	bl	80001fc <__adddf3>
 800b20a:	9a07      	ldr	r2, [sp, #28]
 800b20c:	4b37      	ldr	r3, [pc, #220]	; (800b2ec <__ieee754_pow+0x774>)
 800b20e:	4413      	add	r3, r2
 800b210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b214:	f7f4 fff2 	bl	80001fc <__adddf3>
 800b218:	4682      	mov	sl, r0
 800b21a:	9805      	ldr	r0, [sp, #20]
 800b21c:	468b      	mov	fp, r1
 800b21e:	f7f5 f939 	bl	8000494 <__aeabi_i2d>
 800b222:	9a07      	ldr	r2, [sp, #28]
 800b224:	4b32      	ldr	r3, [pc, #200]	; (800b2f0 <__ieee754_pow+0x778>)
 800b226:	4413      	add	r3, r2
 800b228:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b22c:	4606      	mov	r6, r0
 800b22e:	460f      	mov	r7, r1
 800b230:	4652      	mov	r2, sl
 800b232:	465b      	mov	r3, fp
 800b234:	ec51 0b18 	vmov	r0, r1, d8
 800b238:	f7f4 ffe0 	bl	80001fc <__adddf3>
 800b23c:	4642      	mov	r2, r8
 800b23e:	464b      	mov	r3, r9
 800b240:	f7f4 ffdc 	bl	80001fc <__adddf3>
 800b244:	4632      	mov	r2, r6
 800b246:	463b      	mov	r3, r7
 800b248:	f7f4 ffd8 	bl	80001fc <__adddf3>
 800b24c:	2000      	movs	r0, #0
 800b24e:	4632      	mov	r2, r6
 800b250:	463b      	mov	r3, r7
 800b252:	4604      	mov	r4, r0
 800b254:	460d      	mov	r5, r1
 800b256:	f7f4 ffcf 	bl	80001f8 <__aeabi_dsub>
 800b25a:	4642      	mov	r2, r8
 800b25c:	464b      	mov	r3, r9
 800b25e:	f7f4 ffcb 	bl	80001f8 <__aeabi_dsub>
 800b262:	ec53 2b18 	vmov	r2, r3, d8
 800b266:	f7f4 ffc7 	bl	80001f8 <__aeabi_dsub>
 800b26a:	4602      	mov	r2, r0
 800b26c:	460b      	mov	r3, r1
 800b26e:	4650      	mov	r0, sl
 800b270:	4659      	mov	r1, fp
 800b272:	e610      	b.n	800ae96 <__ieee754_pow+0x31e>
 800b274:	2401      	movs	r4, #1
 800b276:	e6a1      	b.n	800afbc <__ieee754_pow+0x444>
 800b278:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b2c8 <__ieee754_pow+0x750>
 800b27c:	e617      	b.n	800aeae <__ieee754_pow+0x336>
 800b27e:	bf00      	nop
 800b280:	4a454eef 	.word	0x4a454eef
 800b284:	3fca7e28 	.word	0x3fca7e28
 800b288:	93c9db65 	.word	0x93c9db65
 800b28c:	3fcd864a 	.word	0x3fcd864a
 800b290:	a91d4101 	.word	0xa91d4101
 800b294:	3fd17460 	.word	0x3fd17460
 800b298:	518f264d 	.word	0x518f264d
 800b29c:	3fd55555 	.word	0x3fd55555
 800b2a0:	db6fabff 	.word	0xdb6fabff
 800b2a4:	3fdb6db6 	.word	0x3fdb6db6
 800b2a8:	33333303 	.word	0x33333303
 800b2ac:	3fe33333 	.word	0x3fe33333
 800b2b0:	e0000000 	.word	0xe0000000
 800b2b4:	3feec709 	.word	0x3feec709
 800b2b8:	dc3a03fd 	.word	0xdc3a03fd
 800b2bc:	3feec709 	.word	0x3feec709
 800b2c0:	145b01f5 	.word	0x145b01f5
 800b2c4:	be3e2fe0 	.word	0xbe3e2fe0
 800b2c8:	00000000 	.word	0x00000000
 800b2cc:	3ff00000 	.word	0x3ff00000
 800b2d0:	7ff00000 	.word	0x7ff00000
 800b2d4:	43400000 	.word	0x43400000
 800b2d8:	0003988e 	.word	0x0003988e
 800b2dc:	000bb679 	.word	0x000bb679
 800b2e0:	0800d3a0 	.word	0x0800d3a0
 800b2e4:	3ff00000 	.word	0x3ff00000
 800b2e8:	40080000 	.word	0x40080000
 800b2ec:	0800d3c0 	.word	0x0800d3c0
 800b2f0:	0800d3b0 	.word	0x0800d3b0
 800b2f4:	a3b5      	add	r3, pc, #724	; (adr r3, 800b5cc <__ieee754_pow+0xa54>)
 800b2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	f7f4 ff7d 	bl	80001fc <__adddf3>
 800b302:	4622      	mov	r2, r4
 800b304:	ec41 0b1a 	vmov	d10, r0, r1
 800b308:	462b      	mov	r3, r5
 800b30a:	4630      	mov	r0, r6
 800b30c:	4639      	mov	r1, r7
 800b30e:	f7f4 ff73 	bl	80001f8 <__aeabi_dsub>
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	ec51 0b1a 	vmov	r0, r1, d10
 800b31a:	f7f5 fbb5 	bl	8000a88 <__aeabi_dcmpgt>
 800b31e:	2800      	cmp	r0, #0
 800b320:	f47f ae04 	bne.w	800af2c <__ieee754_pow+0x3b4>
 800b324:	4aa4      	ldr	r2, [pc, #656]	; (800b5b8 <__ieee754_pow+0xa40>)
 800b326:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b32a:	4293      	cmp	r3, r2
 800b32c:	f340 8108 	ble.w	800b540 <__ieee754_pow+0x9c8>
 800b330:	151b      	asrs	r3, r3, #20
 800b332:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b336:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b33a:	fa4a f303 	asr.w	r3, sl, r3
 800b33e:	445b      	add	r3, fp
 800b340:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b344:	4e9d      	ldr	r6, [pc, #628]	; (800b5bc <__ieee754_pow+0xa44>)
 800b346:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b34a:	4116      	asrs	r6, r2
 800b34c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b350:	2000      	movs	r0, #0
 800b352:	ea23 0106 	bic.w	r1, r3, r6
 800b356:	f1c2 0214 	rsb	r2, r2, #20
 800b35a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b35e:	fa4a fa02 	asr.w	sl, sl, r2
 800b362:	f1bb 0f00 	cmp.w	fp, #0
 800b366:	4602      	mov	r2, r0
 800b368:	460b      	mov	r3, r1
 800b36a:	4620      	mov	r0, r4
 800b36c:	4629      	mov	r1, r5
 800b36e:	bfb8      	it	lt
 800b370:	f1ca 0a00 	rsblt	sl, sl, #0
 800b374:	f7f4 ff40 	bl	80001f8 <__aeabi_dsub>
 800b378:	ec41 0b19 	vmov	d9, r0, r1
 800b37c:	4642      	mov	r2, r8
 800b37e:	464b      	mov	r3, r9
 800b380:	ec51 0b19 	vmov	r0, r1, d9
 800b384:	f7f4 ff3a 	bl	80001fc <__adddf3>
 800b388:	a37b      	add	r3, pc, #492	; (adr r3, 800b578 <__ieee754_pow+0xa00>)
 800b38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38e:	2000      	movs	r0, #0
 800b390:	4604      	mov	r4, r0
 800b392:	460d      	mov	r5, r1
 800b394:	f7f5 f8e8 	bl	8000568 <__aeabi_dmul>
 800b398:	ec53 2b19 	vmov	r2, r3, d9
 800b39c:	4606      	mov	r6, r0
 800b39e:	460f      	mov	r7, r1
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	f7f4 ff28 	bl	80001f8 <__aeabi_dsub>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4640      	mov	r0, r8
 800b3ae:	4649      	mov	r1, r9
 800b3b0:	f7f4 ff22 	bl	80001f8 <__aeabi_dsub>
 800b3b4:	a372      	add	r3, pc, #456	; (adr r3, 800b580 <__ieee754_pow+0xa08>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	f7f5 f8d5 	bl	8000568 <__aeabi_dmul>
 800b3be:	a372      	add	r3, pc, #456	; (adr r3, 800b588 <__ieee754_pow+0xa10>)
 800b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c4:	4680      	mov	r8, r0
 800b3c6:	4689      	mov	r9, r1
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	4629      	mov	r1, r5
 800b3cc:	f7f5 f8cc 	bl	8000568 <__aeabi_dmul>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4640      	mov	r0, r8
 800b3d6:	4649      	mov	r1, r9
 800b3d8:	f7f4 ff10 	bl	80001fc <__adddf3>
 800b3dc:	4604      	mov	r4, r0
 800b3de:	460d      	mov	r5, r1
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	4639      	mov	r1, r7
 800b3e8:	f7f4 ff08 	bl	80001fc <__adddf3>
 800b3ec:	4632      	mov	r2, r6
 800b3ee:	463b      	mov	r3, r7
 800b3f0:	4680      	mov	r8, r0
 800b3f2:	4689      	mov	r9, r1
 800b3f4:	f7f4 ff00 	bl	80001f8 <__aeabi_dsub>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	4629      	mov	r1, r5
 800b400:	f7f4 fefa 	bl	80001f8 <__aeabi_dsub>
 800b404:	4642      	mov	r2, r8
 800b406:	4606      	mov	r6, r0
 800b408:	460f      	mov	r7, r1
 800b40a:	464b      	mov	r3, r9
 800b40c:	4640      	mov	r0, r8
 800b40e:	4649      	mov	r1, r9
 800b410:	f7f5 f8aa 	bl	8000568 <__aeabi_dmul>
 800b414:	a35e      	add	r3, pc, #376	; (adr r3, 800b590 <__ieee754_pow+0xa18>)
 800b416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41a:	4604      	mov	r4, r0
 800b41c:	460d      	mov	r5, r1
 800b41e:	f7f5 f8a3 	bl	8000568 <__aeabi_dmul>
 800b422:	a35d      	add	r3, pc, #372	; (adr r3, 800b598 <__ieee754_pow+0xa20>)
 800b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b428:	f7f4 fee6 	bl	80001f8 <__aeabi_dsub>
 800b42c:	4622      	mov	r2, r4
 800b42e:	462b      	mov	r3, r5
 800b430:	f7f5 f89a 	bl	8000568 <__aeabi_dmul>
 800b434:	a35a      	add	r3, pc, #360	; (adr r3, 800b5a0 <__ieee754_pow+0xa28>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	f7f4 fedf 	bl	80001fc <__adddf3>
 800b43e:	4622      	mov	r2, r4
 800b440:	462b      	mov	r3, r5
 800b442:	f7f5 f891 	bl	8000568 <__aeabi_dmul>
 800b446:	a358      	add	r3, pc, #352	; (adr r3, 800b5a8 <__ieee754_pow+0xa30>)
 800b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44c:	f7f4 fed4 	bl	80001f8 <__aeabi_dsub>
 800b450:	4622      	mov	r2, r4
 800b452:	462b      	mov	r3, r5
 800b454:	f7f5 f888 	bl	8000568 <__aeabi_dmul>
 800b458:	a355      	add	r3, pc, #340	; (adr r3, 800b5b0 <__ieee754_pow+0xa38>)
 800b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45e:	f7f4 fecd 	bl	80001fc <__adddf3>
 800b462:	4622      	mov	r2, r4
 800b464:	462b      	mov	r3, r5
 800b466:	f7f5 f87f 	bl	8000568 <__aeabi_dmul>
 800b46a:	4602      	mov	r2, r0
 800b46c:	460b      	mov	r3, r1
 800b46e:	4640      	mov	r0, r8
 800b470:	4649      	mov	r1, r9
 800b472:	f7f4 fec1 	bl	80001f8 <__aeabi_dsub>
 800b476:	4604      	mov	r4, r0
 800b478:	460d      	mov	r5, r1
 800b47a:	4602      	mov	r2, r0
 800b47c:	460b      	mov	r3, r1
 800b47e:	4640      	mov	r0, r8
 800b480:	4649      	mov	r1, r9
 800b482:	f7f5 f871 	bl	8000568 <__aeabi_dmul>
 800b486:	2200      	movs	r2, #0
 800b488:	ec41 0b19 	vmov	d9, r0, r1
 800b48c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b490:	4620      	mov	r0, r4
 800b492:	4629      	mov	r1, r5
 800b494:	f7f4 feb0 	bl	80001f8 <__aeabi_dsub>
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	ec51 0b19 	vmov	r0, r1, d9
 800b4a0:	f7f5 f98c 	bl	80007bc <__aeabi_ddiv>
 800b4a4:	4632      	mov	r2, r6
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	460d      	mov	r5, r1
 800b4aa:	463b      	mov	r3, r7
 800b4ac:	4640      	mov	r0, r8
 800b4ae:	4649      	mov	r1, r9
 800b4b0:	f7f5 f85a 	bl	8000568 <__aeabi_dmul>
 800b4b4:	4632      	mov	r2, r6
 800b4b6:	463b      	mov	r3, r7
 800b4b8:	f7f4 fea0 	bl	80001fc <__adddf3>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	f7f4 fe98 	bl	80001f8 <__aeabi_dsub>
 800b4c8:	4642      	mov	r2, r8
 800b4ca:	464b      	mov	r3, r9
 800b4cc:	f7f4 fe94 	bl	80001f8 <__aeabi_dsub>
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	493a      	ldr	r1, [pc, #232]	; (800b5c0 <__ieee754_pow+0xa48>)
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	f7f4 fe8e 	bl	80001f8 <__aeabi_dsub>
 800b4dc:	ec41 0b10 	vmov	d0, r0, r1
 800b4e0:	ee10 3a90 	vmov	r3, s1
 800b4e4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b4e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4ec:	da2b      	bge.n	800b546 <__ieee754_pow+0x9ce>
 800b4ee:	4650      	mov	r0, sl
 800b4f0:	f000 f966 	bl	800b7c0 <scalbn>
 800b4f4:	ec51 0b10 	vmov	r0, r1, d0
 800b4f8:	ec53 2b18 	vmov	r2, r3, d8
 800b4fc:	f7ff bbed 	b.w	800acda <__ieee754_pow+0x162>
 800b500:	4b30      	ldr	r3, [pc, #192]	; (800b5c4 <__ieee754_pow+0xa4c>)
 800b502:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b506:	429e      	cmp	r6, r3
 800b508:	f77f af0c 	ble.w	800b324 <__ieee754_pow+0x7ac>
 800b50c:	4b2e      	ldr	r3, [pc, #184]	; (800b5c8 <__ieee754_pow+0xa50>)
 800b50e:	440b      	add	r3, r1
 800b510:	4303      	orrs	r3, r0
 800b512:	d009      	beq.n	800b528 <__ieee754_pow+0x9b0>
 800b514:	ec51 0b18 	vmov	r0, r1, d8
 800b518:	2200      	movs	r2, #0
 800b51a:	2300      	movs	r3, #0
 800b51c:	f7f5 fa96 	bl	8000a4c <__aeabi_dcmplt>
 800b520:	3800      	subs	r0, #0
 800b522:	bf18      	it	ne
 800b524:	2001      	movne	r0, #1
 800b526:	e447      	b.n	800adb8 <__ieee754_pow+0x240>
 800b528:	4622      	mov	r2, r4
 800b52a:	462b      	mov	r3, r5
 800b52c:	f7f4 fe64 	bl	80001f8 <__aeabi_dsub>
 800b530:	4642      	mov	r2, r8
 800b532:	464b      	mov	r3, r9
 800b534:	f7f5 fa9e 	bl	8000a74 <__aeabi_dcmpge>
 800b538:	2800      	cmp	r0, #0
 800b53a:	f43f aef3 	beq.w	800b324 <__ieee754_pow+0x7ac>
 800b53e:	e7e9      	b.n	800b514 <__ieee754_pow+0x99c>
 800b540:	f04f 0a00 	mov.w	sl, #0
 800b544:	e71a      	b.n	800b37c <__ieee754_pow+0x804>
 800b546:	ec51 0b10 	vmov	r0, r1, d0
 800b54a:	4619      	mov	r1, r3
 800b54c:	e7d4      	b.n	800b4f8 <__ieee754_pow+0x980>
 800b54e:	491c      	ldr	r1, [pc, #112]	; (800b5c0 <__ieee754_pow+0xa48>)
 800b550:	2000      	movs	r0, #0
 800b552:	f7ff bb30 	b.w	800abb6 <__ieee754_pow+0x3e>
 800b556:	2000      	movs	r0, #0
 800b558:	2100      	movs	r1, #0
 800b55a:	f7ff bb2c 	b.w	800abb6 <__ieee754_pow+0x3e>
 800b55e:	4630      	mov	r0, r6
 800b560:	4639      	mov	r1, r7
 800b562:	f7ff bb28 	b.w	800abb6 <__ieee754_pow+0x3e>
 800b566:	9204      	str	r2, [sp, #16]
 800b568:	f7ff bb7a 	b.w	800ac60 <__ieee754_pow+0xe8>
 800b56c:	2300      	movs	r3, #0
 800b56e:	f7ff bb64 	b.w	800ac3a <__ieee754_pow+0xc2>
 800b572:	bf00      	nop
 800b574:	f3af 8000 	nop.w
 800b578:	00000000 	.word	0x00000000
 800b57c:	3fe62e43 	.word	0x3fe62e43
 800b580:	fefa39ef 	.word	0xfefa39ef
 800b584:	3fe62e42 	.word	0x3fe62e42
 800b588:	0ca86c39 	.word	0x0ca86c39
 800b58c:	be205c61 	.word	0xbe205c61
 800b590:	72bea4d0 	.word	0x72bea4d0
 800b594:	3e663769 	.word	0x3e663769
 800b598:	c5d26bf1 	.word	0xc5d26bf1
 800b59c:	3ebbbd41 	.word	0x3ebbbd41
 800b5a0:	af25de2c 	.word	0xaf25de2c
 800b5a4:	3f11566a 	.word	0x3f11566a
 800b5a8:	16bebd93 	.word	0x16bebd93
 800b5ac:	3f66c16c 	.word	0x3f66c16c
 800b5b0:	5555553e 	.word	0x5555553e
 800b5b4:	3fc55555 	.word	0x3fc55555
 800b5b8:	3fe00000 	.word	0x3fe00000
 800b5bc:	000fffff 	.word	0x000fffff
 800b5c0:	3ff00000 	.word	0x3ff00000
 800b5c4:	4090cbff 	.word	0x4090cbff
 800b5c8:	3f6f3400 	.word	0x3f6f3400
 800b5cc:	652b82fe 	.word	0x652b82fe
 800b5d0:	3c971547 	.word	0x3c971547

0800b5d4 <__ieee754_sqrt>:
 800b5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d8:	ec55 4b10 	vmov	r4, r5, d0
 800b5dc:	4e55      	ldr	r6, [pc, #340]	; (800b734 <__ieee754_sqrt+0x160>)
 800b5de:	43ae      	bics	r6, r5
 800b5e0:	ee10 0a10 	vmov	r0, s0
 800b5e4:	ee10 3a10 	vmov	r3, s0
 800b5e8:	462a      	mov	r2, r5
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	d110      	bne.n	800b610 <__ieee754_sqrt+0x3c>
 800b5ee:	ee10 2a10 	vmov	r2, s0
 800b5f2:	462b      	mov	r3, r5
 800b5f4:	f7f4 ffb8 	bl	8000568 <__aeabi_dmul>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	4629      	mov	r1, r5
 800b600:	f7f4 fdfc 	bl	80001fc <__adddf3>
 800b604:	4604      	mov	r4, r0
 800b606:	460d      	mov	r5, r1
 800b608:	ec45 4b10 	vmov	d0, r4, r5
 800b60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b610:	2d00      	cmp	r5, #0
 800b612:	dc10      	bgt.n	800b636 <__ieee754_sqrt+0x62>
 800b614:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b618:	4330      	orrs	r0, r6
 800b61a:	d0f5      	beq.n	800b608 <__ieee754_sqrt+0x34>
 800b61c:	b15d      	cbz	r5, 800b636 <__ieee754_sqrt+0x62>
 800b61e:	ee10 2a10 	vmov	r2, s0
 800b622:	462b      	mov	r3, r5
 800b624:	ee10 0a10 	vmov	r0, s0
 800b628:	f7f4 fde6 	bl	80001f8 <__aeabi_dsub>
 800b62c:	4602      	mov	r2, r0
 800b62e:	460b      	mov	r3, r1
 800b630:	f7f5 f8c4 	bl	80007bc <__aeabi_ddiv>
 800b634:	e7e6      	b.n	800b604 <__ieee754_sqrt+0x30>
 800b636:	1512      	asrs	r2, r2, #20
 800b638:	d074      	beq.n	800b724 <__ieee754_sqrt+0x150>
 800b63a:	07d4      	lsls	r4, r2, #31
 800b63c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b640:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b648:	bf5e      	ittt	pl
 800b64a:	0fda      	lsrpl	r2, r3, #31
 800b64c:	005b      	lslpl	r3, r3, #1
 800b64e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b652:	2400      	movs	r4, #0
 800b654:	0fda      	lsrs	r2, r3, #31
 800b656:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b65a:	107f      	asrs	r7, r7, #1
 800b65c:	005b      	lsls	r3, r3, #1
 800b65e:	2516      	movs	r5, #22
 800b660:	4620      	mov	r0, r4
 800b662:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b666:	1886      	adds	r6, r0, r2
 800b668:	428e      	cmp	r6, r1
 800b66a:	bfde      	ittt	le
 800b66c:	1b89      	suble	r1, r1, r6
 800b66e:	18b0      	addle	r0, r6, r2
 800b670:	18a4      	addle	r4, r4, r2
 800b672:	0049      	lsls	r1, r1, #1
 800b674:	3d01      	subs	r5, #1
 800b676:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b67a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b67e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b682:	d1f0      	bne.n	800b666 <__ieee754_sqrt+0x92>
 800b684:	462a      	mov	r2, r5
 800b686:	f04f 0e20 	mov.w	lr, #32
 800b68a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b68e:	4281      	cmp	r1, r0
 800b690:	eb06 0c05 	add.w	ip, r6, r5
 800b694:	dc02      	bgt.n	800b69c <__ieee754_sqrt+0xc8>
 800b696:	d113      	bne.n	800b6c0 <__ieee754_sqrt+0xec>
 800b698:	459c      	cmp	ip, r3
 800b69a:	d811      	bhi.n	800b6c0 <__ieee754_sqrt+0xec>
 800b69c:	f1bc 0f00 	cmp.w	ip, #0
 800b6a0:	eb0c 0506 	add.w	r5, ip, r6
 800b6a4:	da43      	bge.n	800b72e <__ieee754_sqrt+0x15a>
 800b6a6:	2d00      	cmp	r5, #0
 800b6a8:	db41      	blt.n	800b72e <__ieee754_sqrt+0x15a>
 800b6aa:	f100 0801 	add.w	r8, r0, #1
 800b6ae:	1a09      	subs	r1, r1, r0
 800b6b0:	459c      	cmp	ip, r3
 800b6b2:	bf88      	it	hi
 800b6b4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b6b8:	eba3 030c 	sub.w	r3, r3, ip
 800b6bc:	4432      	add	r2, r6
 800b6be:	4640      	mov	r0, r8
 800b6c0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b6c4:	f1be 0e01 	subs.w	lr, lr, #1
 800b6c8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b6cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b6d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b6d4:	d1db      	bne.n	800b68e <__ieee754_sqrt+0xba>
 800b6d6:	430b      	orrs	r3, r1
 800b6d8:	d006      	beq.n	800b6e8 <__ieee754_sqrt+0x114>
 800b6da:	1c50      	adds	r0, r2, #1
 800b6dc:	bf13      	iteet	ne
 800b6de:	3201      	addne	r2, #1
 800b6e0:	3401      	addeq	r4, #1
 800b6e2:	4672      	moveq	r2, lr
 800b6e4:	f022 0201 	bicne.w	r2, r2, #1
 800b6e8:	1063      	asrs	r3, r4, #1
 800b6ea:	0852      	lsrs	r2, r2, #1
 800b6ec:	07e1      	lsls	r1, r4, #31
 800b6ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b6f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b6f6:	bf48      	it	mi
 800b6f8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b6fc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b700:	4614      	mov	r4, r2
 800b702:	e781      	b.n	800b608 <__ieee754_sqrt+0x34>
 800b704:	0ad9      	lsrs	r1, r3, #11
 800b706:	3815      	subs	r0, #21
 800b708:	055b      	lsls	r3, r3, #21
 800b70a:	2900      	cmp	r1, #0
 800b70c:	d0fa      	beq.n	800b704 <__ieee754_sqrt+0x130>
 800b70e:	02cd      	lsls	r5, r1, #11
 800b710:	d50a      	bpl.n	800b728 <__ieee754_sqrt+0x154>
 800b712:	f1c2 0420 	rsb	r4, r2, #32
 800b716:	fa23 f404 	lsr.w	r4, r3, r4
 800b71a:	1e55      	subs	r5, r2, #1
 800b71c:	4093      	lsls	r3, r2
 800b71e:	4321      	orrs	r1, r4
 800b720:	1b42      	subs	r2, r0, r5
 800b722:	e78a      	b.n	800b63a <__ieee754_sqrt+0x66>
 800b724:	4610      	mov	r0, r2
 800b726:	e7f0      	b.n	800b70a <__ieee754_sqrt+0x136>
 800b728:	0049      	lsls	r1, r1, #1
 800b72a:	3201      	adds	r2, #1
 800b72c:	e7ef      	b.n	800b70e <__ieee754_sqrt+0x13a>
 800b72e:	4680      	mov	r8, r0
 800b730:	e7bd      	b.n	800b6ae <__ieee754_sqrt+0xda>
 800b732:	bf00      	nop
 800b734:	7ff00000 	.word	0x7ff00000

0800b738 <with_errno>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	4604      	mov	r4, r0
 800b73c:	460d      	mov	r5, r1
 800b73e:	4616      	mov	r6, r2
 800b740:	f7ff f8a6 	bl	800a890 <__errno>
 800b744:	4629      	mov	r1, r5
 800b746:	6006      	str	r6, [r0, #0]
 800b748:	4620      	mov	r0, r4
 800b74a:	bd70      	pop	{r4, r5, r6, pc}

0800b74c <xflow>:
 800b74c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b74e:	4614      	mov	r4, r2
 800b750:	461d      	mov	r5, r3
 800b752:	b108      	cbz	r0, 800b758 <xflow+0xc>
 800b754:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b758:	e9cd 2300 	strd	r2, r3, [sp]
 800b75c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b760:	4620      	mov	r0, r4
 800b762:	4629      	mov	r1, r5
 800b764:	f7f4 ff00 	bl	8000568 <__aeabi_dmul>
 800b768:	2222      	movs	r2, #34	; 0x22
 800b76a:	b003      	add	sp, #12
 800b76c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b770:	f7ff bfe2 	b.w	800b738 <with_errno>

0800b774 <__math_uflow>:
 800b774:	b508      	push	{r3, lr}
 800b776:	2200      	movs	r2, #0
 800b778:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b77c:	f7ff ffe6 	bl	800b74c <xflow>
 800b780:	ec41 0b10 	vmov	d0, r0, r1
 800b784:	bd08      	pop	{r3, pc}

0800b786 <__math_oflow>:
 800b786:	b508      	push	{r3, lr}
 800b788:	2200      	movs	r2, #0
 800b78a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b78e:	f7ff ffdd 	bl	800b74c <xflow>
 800b792:	ec41 0b10 	vmov	d0, r0, r1
 800b796:	bd08      	pop	{r3, pc}

0800b798 <fabs>:
 800b798:	ec51 0b10 	vmov	r0, r1, d0
 800b79c:	ee10 2a10 	vmov	r2, s0
 800b7a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b7a4:	ec43 2b10 	vmov	d0, r2, r3
 800b7a8:	4770      	bx	lr

0800b7aa <finite>:
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	ed8d 0b00 	vstr	d0, [sp]
 800b7b0:	9801      	ldr	r0, [sp, #4]
 800b7b2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b7b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b7ba:	0fc0      	lsrs	r0, r0, #31
 800b7bc:	b002      	add	sp, #8
 800b7be:	4770      	bx	lr

0800b7c0 <scalbn>:
 800b7c0:	b570      	push	{r4, r5, r6, lr}
 800b7c2:	ec55 4b10 	vmov	r4, r5, d0
 800b7c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b7ca:	4606      	mov	r6, r0
 800b7cc:	462b      	mov	r3, r5
 800b7ce:	b99a      	cbnz	r2, 800b7f8 <scalbn+0x38>
 800b7d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b7d4:	4323      	orrs	r3, r4
 800b7d6:	d036      	beq.n	800b846 <scalbn+0x86>
 800b7d8:	4b39      	ldr	r3, [pc, #228]	; (800b8c0 <scalbn+0x100>)
 800b7da:	4629      	mov	r1, r5
 800b7dc:	ee10 0a10 	vmov	r0, s0
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f7f4 fec1 	bl	8000568 <__aeabi_dmul>
 800b7e6:	4b37      	ldr	r3, [pc, #220]	; (800b8c4 <scalbn+0x104>)
 800b7e8:	429e      	cmp	r6, r3
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	460d      	mov	r5, r1
 800b7ee:	da10      	bge.n	800b812 <scalbn+0x52>
 800b7f0:	a32b      	add	r3, pc, #172	; (adr r3, 800b8a0 <scalbn+0xe0>)
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	e03a      	b.n	800b86e <scalbn+0xae>
 800b7f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b7fc:	428a      	cmp	r2, r1
 800b7fe:	d10c      	bne.n	800b81a <scalbn+0x5a>
 800b800:	ee10 2a10 	vmov	r2, s0
 800b804:	4620      	mov	r0, r4
 800b806:	4629      	mov	r1, r5
 800b808:	f7f4 fcf8 	bl	80001fc <__adddf3>
 800b80c:	4604      	mov	r4, r0
 800b80e:	460d      	mov	r5, r1
 800b810:	e019      	b.n	800b846 <scalbn+0x86>
 800b812:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b816:	460b      	mov	r3, r1
 800b818:	3a36      	subs	r2, #54	; 0x36
 800b81a:	4432      	add	r2, r6
 800b81c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b820:	428a      	cmp	r2, r1
 800b822:	dd08      	ble.n	800b836 <scalbn+0x76>
 800b824:	2d00      	cmp	r5, #0
 800b826:	a120      	add	r1, pc, #128	; (adr r1, 800b8a8 <scalbn+0xe8>)
 800b828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b82c:	da1c      	bge.n	800b868 <scalbn+0xa8>
 800b82e:	a120      	add	r1, pc, #128	; (adr r1, 800b8b0 <scalbn+0xf0>)
 800b830:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b834:	e018      	b.n	800b868 <scalbn+0xa8>
 800b836:	2a00      	cmp	r2, #0
 800b838:	dd08      	ble.n	800b84c <scalbn+0x8c>
 800b83a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b83e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b842:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b846:	ec45 4b10 	vmov	d0, r4, r5
 800b84a:	bd70      	pop	{r4, r5, r6, pc}
 800b84c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b850:	da19      	bge.n	800b886 <scalbn+0xc6>
 800b852:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b856:	429e      	cmp	r6, r3
 800b858:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b85c:	dd0a      	ble.n	800b874 <scalbn+0xb4>
 800b85e:	a112      	add	r1, pc, #72	; (adr r1, 800b8a8 <scalbn+0xe8>)
 800b860:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d1e2      	bne.n	800b82e <scalbn+0x6e>
 800b868:	a30f      	add	r3, pc, #60	; (adr r3, 800b8a8 <scalbn+0xe8>)
 800b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86e:	f7f4 fe7b 	bl	8000568 <__aeabi_dmul>
 800b872:	e7cb      	b.n	800b80c <scalbn+0x4c>
 800b874:	a10a      	add	r1, pc, #40	; (adr r1, 800b8a0 <scalbn+0xe0>)
 800b876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d0b8      	beq.n	800b7f0 <scalbn+0x30>
 800b87e:	a10e      	add	r1, pc, #56	; (adr r1, 800b8b8 <scalbn+0xf8>)
 800b880:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b884:	e7b4      	b.n	800b7f0 <scalbn+0x30>
 800b886:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b88a:	3236      	adds	r2, #54	; 0x36
 800b88c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b890:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b894:	4620      	mov	r0, r4
 800b896:	4b0c      	ldr	r3, [pc, #48]	; (800b8c8 <scalbn+0x108>)
 800b898:	2200      	movs	r2, #0
 800b89a:	e7e8      	b.n	800b86e <scalbn+0xae>
 800b89c:	f3af 8000 	nop.w
 800b8a0:	c2f8f359 	.word	0xc2f8f359
 800b8a4:	01a56e1f 	.word	0x01a56e1f
 800b8a8:	8800759c 	.word	0x8800759c
 800b8ac:	7e37e43c 	.word	0x7e37e43c
 800b8b0:	8800759c 	.word	0x8800759c
 800b8b4:	fe37e43c 	.word	0xfe37e43c
 800b8b8:	c2f8f359 	.word	0xc2f8f359
 800b8bc:	81a56e1f 	.word	0x81a56e1f
 800b8c0:	43500000 	.word	0x43500000
 800b8c4:	ffff3cb0 	.word	0xffff3cb0
 800b8c8:	3c900000 	.word	0x3c900000

0800b8cc <_init>:
 800b8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ce:	bf00      	nop
 800b8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8d2:	bc08      	pop	{r3}
 800b8d4:	469e      	mov	lr, r3
 800b8d6:	4770      	bx	lr

0800b8d8 <_fini>:
 800b8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8da:	bf00      	nop
 800b8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8de:	bc08      	pop	{r3}
 800b8e0:	469e      	mov	lr, r3
 800b8e2:	4770      	bx	lr
