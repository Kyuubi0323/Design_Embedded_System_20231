
Embedded_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001016c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002148  08010310  08010310  00020310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012458  08012458  0003020c  2**0
                  CONTENTS
  4 .ARM          00000008  08012458  08012458  00022458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012460  08012460  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012460  08012460  00022460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012464  08012464  00022464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08012468  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d3c  2000020c  08012674  0003020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f48  08012674  00034f48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024f05  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005127  00000000  00000000  00055141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  0005a268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b38  00000000  00000000  0005bf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1f7  00000000  00000000  0005dab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028865  00000000  00000000  00079ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fb3c  00000000  00000000  000a250c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142048  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090b0  00000000  00000000  00142098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080102f4 	.word	0x080102f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	080102f4 	.word	0x080102f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Touch_binary */
  Touch_binaryHandle = osSemaphoreNew(1, 1, &Touch_binary_attributes);
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_FREERTOS_Init+0x8c>)
 800100e:	2101      	movs	r1, #1
 8001010:	2001      	movs	r0, #1
 8001012:	f006 f926 	bl	8007262 <osSemaphoreNew>
 8001016:	4603      	mov	r3, r0
 8001018:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <MX_FREERTOS_Init+0x90>)
 800101a:	6013      	str	r3, [r2, #0]

  /* creation of Uart_binary */
  Uart_binaryHandle = osSemaphoreNew(1, 1, &Uart_binary_attributes);
 800101c:	4a1f      	ldr	r2, [pc, #124]	; (800109c <MX_FREERTOS_Init+0x94>)
 800101e:	2101      	movs	r1, #1
 8001020:	2001      	movs	r0, #1
 8001022:	f006 f91e 	bl	8007262 <osSemaphoreNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <MX_FREERTOS_Init+0x98>)
 800102a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Timer02 */
  Timer02Handle = osTimerNew(LCD_Timeout, osTimerOnce, NULL, &Timer02_attributes);
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_FREERTOS_Init+0x9c>)
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	481d      	ldr	r0, [pc, #116]	; (80010a8 <MX_FREERTOS_Init+0xa0>)
 8001034:	f006 f834 	bl	80070a0 <osTimerNew>
 8001038:	4603      	mov	r3, r0
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MX_FREERTOS_Init+0xa4>)
 800103c:	6013      	str	r3, [r2, #0]

  /* creation of Timer03 */
  Timer03Handle = osTimerNew(Measure_Timer, osTimerPeriodic, NULL, &Timer03_attributes);
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <MX_FREERTOS_Init+0xa8>)
 8001040:	2200      	movs	r2, #0
 8001042:	2101      	movs	r1, #1
 8001044:	481b      	ldr	r0, [pc, #108]	; (80010b4 <MX_FREERTOS_Init+0xac>)
 8001046:	f006 f82b 	bl	80070a0 <osTimerNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a1a      	ldr	r2, [pc, #104]	; (80010b8 <MX_FREERTOS_Init+0xb0>)
 800104e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SuperQueue */
  SuperQueueHandle = osMessageQueueNew (64, sizeof(uint16_t), &SuperQueue_attributes);
 8001050:	4a1a      	ldr	r2, [pc, #104]	; (80010bc <MX_FREERTOS_Init+0xb4>)
 8001052:	2102      	movs	r1, #2
 8001054:	2040      	movs	r0, #64	; 0x40
 8001056:	f006 fa23 	bl	80074a0 <osMessageQueueNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <MX_FREERTOS_Init+0xb8>)
 800105e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LCD */
  LCDHandle = osThreadNew(LCD_task, NULL, &LCD_attributes);
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <MX_FREERTOS_Init+0xbc>)
 8001062:	2100      	movs	r1, #0
 8001064:	4818      	ldr	r0, [pc, #96]	; (80010c8 <MX_FREERTOS_Init+0xc0>)
 8001066:	f005 ff17 	bl	8006e98 <osThreadNew>
 800106a:	4603      	mov	r3, r0
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <MX_FREERTOS_Init+0xc4>)
 800106e:	6013      	str	r3, [r2, #0]

  /* creation of IRQ */
  IRQHandle = osThreadNew(IRQ_task, NULL, &IRQ_attributes);
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <MX_FREERTOS_Init+0xc8>)
 8001072:	2100      	movs	r1, #0
 8001074:	4817      	ldr	r0, [pc, #92]	; (80010d4 <MX_FREERTOS_Init+0xcc>)
 8001076:	f005 ff0f 	bl	8006e98 <osThreadNew>
 800107a:	4603      	mov	r3, r0
 800107c:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <MX_FREERTOS_Init+0xd0>)
 800107e:	6013      	str	r3, [r2, #0]

  /* creation of Uart_user */
  Uart_userHandle = osThreadNew(Uart_task, NULL, &Uart_user_attributes);
 8001080:	4a16      	ldr	r2, [pc, #88]	; (80010dc <MX_FREERTOS_Init+0xd4>)
 8001082:	2100      	movs	r1, #0
 8001084:	4816      	ldr	r0, [pc, #88]	; (80010e0 <MX_FREERTOS_Init+0xd8>)
 8001086:	f005 ff07 	bl	8006e98 <osThreadNew>
 800108a:	4603      	mov	r3, r0
 800108c:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <MX_FREERTOS_Init+0xdc>)
 800108e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	08010a80 	.word	0x08010a80
 8001098:	200002a4 	.word	0x200002a4
 800109c:	08010a90 	.word	0x08010a90
 80010a0:	200002a8 	.word	0x200002a8
 80010a4:	08010a60 	.word	0x08010a60
 80010a8:	080016b9 	.word	0x080016b9
 80010ac:	2000029c 	.word	0x2000029c
 80010b0:	08010a70 	.word	0x08010a70
 80010b4:	08001705 	.word	0x08001705
 80010b8:	200002a0 	.word	0x200002a0
 80010bc:	08010a48 	.word	0x08010a48
 80010c0:	20000298 	.word	0x20000298
 80010c4:	080109dc 	.word	0x080109dc
 80010c8:	080010e9 	.word	0x080010e9
 80010cc:	2000028c 	.word	0x2000028c
 80010d0:	08010a00 	.word	0x08010a00
 80010d4:	0800150d 	.word	0x0800150d
 80010d8:	20000290 	.word	0x20000290
 80010dc:	08010a24 	.word	0x08010a24
 80010e0:	08001639 	.word	0x08001639
 80010e4:	20000294 	.word	0x20000294

080010e8 <LCD_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LCD_task */
void LCD_task(void *argument)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	6078      	str	r0, [r7, #4]
	char Strgbpm[4] ;
	char Strgspo2[4];
//	char *payload = {0};

	//Display
	ILI9341_Unselect();
 80010f0:	f001 fa9c 	bl	800262c <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 80010f4:	f001 fe7a 	bl	8002dec <ILI9341_TouchUnselect>
	ILI9341_Init();
 80010f8:	f001 fb4a 	bl	8002790 <ILI9341_Init>
	ILI9341_FillScreen(ILI9341_BLACK);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f001 fe63 	bl	8002dc8 <ILI9341_FillScreen>
	//Background
	ILI9341_WriteString(10, 10, "Embedded Design System 20231", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001102:	4bbb      	ldr	r3, [pc, #748]	; (80013f0 <LCD_task+0x308>)
 8001104:	2200      	movs	r2, #0
 8001106:	9202      	str	r2, [sp, #8]
 8001108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110c:	9201      	str	r2, [sp, #4]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4ab7      	ldr	r2, [pc, #732]	; (80013f4 <LCD_task+0x30c>)
 8001116:	210a      	movs	r1, #10
 8001118:	200a      	movs	r0, #10
 800111a:	f001 fd9a 	bl	8002c52 <ILI9341_WriteString>
	ILI9341_WriteString(30, 40, "20202647", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 800111e:	4bb6      	ldr	r3, [pc, #728]	; (80013f8 <LCD_task+0x310>)
 8001120:	2200      	movs	r2, #0
 8001122:	9202      	str	r2, [sp, #8]
 8001124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001128:	9201      	str	r2, [sp, #4]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	9200      	str	r2, [sp, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4ab2      	ldr	r2, [pc, #712]	; (80013fc <LCD_task+0x314>)
 8001132:	2128      	movs	r1, #40	; 0x28
 8001134:	201e      	movs	r0, #30
 8001136:	f001 fd8c 	bl	8002c52 <ILI9341_WriteString>
	ILI9341_WriteString(235, 40, "20202543", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 800113a:	4baf      	ldr	r3, [pc, #700]	; (80013f8 <LCD_task+0x310>)
 800113c:	2200      	movs	r2, #0
 800113e:	9202      	str	r2, [sp, #8]
 8001140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001144:	9201      	str	r2, [sp, #4]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	9200      	str	r2, [sp, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4aac      	ldr	r2, [pc, #688]	; (8001400 <LCD_task+0x318>)
 800114e:	2128      	movs	r1, #40	; 0x28
 8001150:	20eb      	movs	r0, #235	; 0xeb
 8001152:	f001 fd7e 	bl	8002c52 <ILI9341_WriteString>
	ILI9341_DrawLine(0, 55, 320, 55, ILI9341_WHITE);
 8001156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2337      	movs	r3, #55	; 0x37
 800115e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001162:	2137      	movs	r1, #55	; 0x37
 8001164:	2000      	movs	r0, #0
 8001166:	f001 fc7a 	bl	8002a5e <ILI9341_DrawLine>
	ILI9341_DrawLine(0, 200, 320, 200, ILI9341_WHITE);
 800116a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	23c8      	movs	r3, #200	; 0xc8
 8001172:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001176:	21c8      	movs	r1, #200	; 0xc8
 8001178:	2000      	movs	r0, #0
 800117a:	f001 fc70 	bl	8002a5e <ILI9341_DrawLine>
	ILI9341_DrawLine(250, 55, 250, 200, ILI9341_WHITE);
 800117e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	23c8      	movs	r3, #200	; 0xc8
 8001186:	22fa      	movs	r2, #250	; 0xfa
 8001188:	2137      	movs	r1, #55	; 0x37
 800118a:	20fa      	movs	r0, #250	; 0xfa
 800118c:	f001 fc67 	bl	8002a5e <ILI9341_DrawLine>
	ILI9341_WriteString(10, 180, "Mode:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001190:	4b97      	ldr	r3, [pc, #604]	; (80013f0 <LCD_task+0x308>)
 8001192:	2200      	movs	r2, #0
 8001194:	9202      	str	r2, [sp, #8]
 8001196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119a:	9201      	str	r2, [sp, #4]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	9200      	str	r2, [sp, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a98      	ldr	r2, [pc, #608]	; (8001404 <LCD_task+0x31c>)
 80011a4:	21b4      	movs	r1, #180	; 0xb4
 80011a6:	200a      	movs	r0, #10
 80011a8:	f001 fd53 	bl	8002c52 <ILI9341_WriteString>
	ILI9341_WriteString(100, 210, "MANDEVICES", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 80011ac:	4b90      	ldr	r3, [pc, #576]	; (80013f0 <LCD_task+0x308>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	9202      	str	r2, [sp, #8]
 80011b2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80011b6:	9201      	str	r2, [sp, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	9200      	str	r2, [sp, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a92      	ldr	r2, [pc, #584]	; (8001408 <LCD_task+0x320>)
 80011c0:	21d2      	movs	r1, #210	; 0xd2
 80011c2:	2064      	movs	r0, #100	; 0x64
 80011c4:	f001 fd45 	bl	8002c52 <ILI9341_WriteString>

	//Data
	ILI9341_WriteString(10, 60, "Temperature:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80011c8:	4b89      	ldr	r3, [pc, #548]	; (80013f0 <LCD_task+0x308>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	9202      	str	r2, [sp, #8]
 80011ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d2:	9201      	str	r2, [sp, #4]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a8c      	ldr	r2, [pc, #560]	; (800140c <LCD_task+0x324>)
 80011dc:	213c      	movs	r1, #60	; 0x3c
 80011de:	200a      	movs	r0, #10
 80011e0:	f001 fd37 	bl	8002c52 <ILI9341_WriteString>
	ftoa(Node_1.Temperature, StrgTemp, 1);
 80011e4:	4b8a      	ldr	r3, [pc, #552]	; (8001410 <LCD_task+0x328>)
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	2101      	movs	r1, #1
 80011f0:	4618      	mov	r0, r3
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	f001 f92f 	bl	8002458 <ftoa>
	ILI9341_WriteString(150, 60, StrgTemp, Font_11x18, ILI9341_ORANGE, ILI9341_BLACK);
 80011fa:	4b7d      	ldr	r3, [pc, #500]	; (80013f0 <LCD_task+0x308>)
 80011fc:	f107 0118 	add.w	r1, r7, #24
 8001200:	2200      	movs	r2, #0
 8001202:	9202      	str	r2, [sp, #8]
 8001204:	f64f 5220 	movw	r2, #64800	; 0xfd20
 8001208:	9201      	str	r2, [sp, #4]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	9200      	str	r2, [sp, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	460a      	mov	r2, r1
 8001212:	213c      	movs	r1, #60	; 0x3c
 8001214:	2096      	movs	r0, #150	; 0x96
 8001216:	f001 fd1c 	bl	8002c52 <ILI9341_WriteString>

	ILI9341_WriteString(10, 90, "Humidity:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 800121a:	4b75      	ldr	r3, [pc, #468]	; (80013f0 <LCD_task+0x308>)
 800121c:	2200      	movs	r2, #0
 800121e:	9202      	str	r2, [sp, #8]
 8001220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001224:	9201      	str	r2, [sp, #4]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	9200      	str	r2, [sp, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a79      	ldr	r2, [pc, #484]	; (8001414 <LCD_task+0x32c>)
 800122e:	215a      	movs	r1, #90	; 0x5a
 8001230:	200a      	movs	r0, #10
 8001232:	f001 fd0e 	bl	8002c52 <ILI9341_WriteString>
	intToStr((int)Node_1.Humidity, StrgHumd, 2);
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <LCD_task+0x328>)
 8001238:	edd3 7a01 	vldr	s15, [r3, #4]
 800123c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2202      	movs	r2, #2
 8001246:	4619      	mov	r1, r3
 8001248:	ee17 0a90 	vmov	r0, s15
 800124c:	f001 f960 	bl	8002510 <intToStr>
	ILI9341_WriteString(150, 90, StrgHumd, Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 8001250:	4b67      	ldr	r3, [pc, #412]	; (80013f0 <LCD_task+0x308>)
 8001252:	f107 0114 	add.w	r1, r7, #20
 8001256:	2200      	movs	r2, #0
 8001258:	9202      	str	r2, [sp, #8]
 800125a:	221f      	movs	r2, #31
 800125c:	9201      	str	r2, [sp, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	9200      	str	r2, [sp, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	460a      	mov	r2, r1
 8001266:	215a      	movs	r1, #90	; 0x5a
 8001268:	2096      	movs	r0, #150	; 0x96
 800126a:	f001 fcf2 	bl	8002c52 <ILI9341_WriteString>
	ILI9341_WriteString(180, 90, "%", Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 800126e:	4b60      	ldr	r3, [pc, #384]	; (80013f0 <LCD_task+0x308>)
 8001270:	2200      	movs	r2, #0
 8001272:	9202      	str	r2, [sp, #8]
 8001274:	221f      	movs	r2, #31
 8001276:	9201      	str	r2, [sp, #4]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	9200      	str	r2, [sp, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a66      	ldr	r2, [pc, #408]	; (8001418 <LCD_task+0x330>)
 8001280:	215a      	movs	r1, #90	; 0x5a
 8001282:	20b4      	movs	r0, #180	; 0xb4
 8001284:	f001 fce5 	bl	8002c52 <ILI9341_WriteString>

	ILI9341_WriteString(10, 120, "BPM:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001288:	4b59      	ldr	r3, [pc, #356]	; (80013f0 <LCD_task+0x308>)
 800128a:	2200      	movs	r2, #0
 800128c:	9202      	str	r2, [sp, #8]
 800128e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001292:	9201      	str	r2, [sp, #4]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	9200      	str	r2, [sp, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a60      	ldr	r2, [pc, #384]	; (800141c <LCD_task+0x334>)
 800129c:	2178      	movs	r1, #120	; 0x78
 800129e:	200a      	movs	r0, #10
 80012a0:	f001 fcd7 	bl	8002c52 <ILI9341_WriteString>
	intToStr(Node_1.bpm, Strgbpm, 2);
 80012a4:	4b5a      	ldr	r3, [pc, #360]	; (8001410 <LCD_task+0x328>)
 80012a6:	7a1b      	ldrb	r3, [r3, #8]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	2202      	movs	r2, #2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f001 f92d 	bl	8002510 <intToStr>
	ILI9341_WriteString(150, 120, Strgbpm, Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 80012b6:	4b4e      	ldr	r3, [pc, #312]	; (80013f0 <LCD_task+0x308>)
 80012b8:	f107 0110 	add.w	r1, r7, #16
 80012bc:	2200      	movs	r2, #0
 80012be:	9202      	str	r2, [sp, #8]
 80012c0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80012c4:	9201      	str	r2, [sp, #4]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	9200      	str	r2, [sp, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	460a      	mov	r2, r1
 80012ce:	2178      	movs	r1, #120	; 0x78
 80012d0:	2096      	movs	r0, #150	; 0x96
 80012d2:	f001 fcbe 	bl	8002c52 <ILI9341_WriteString>

	ILI9341_WriteString(10, 150, "Spo2:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80012d6:	4b46      	ldr	r3, [pc, #280]	; (80013f0 <LCD_task+0x308>)
 80012d8:	2200      	movs	r2, #0
 80012da:	9202      	str	r2, [sp, #8]
 80012dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e0:	9201      	str	r2, [sp, #4]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	9200      	str	r2, [sp, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a4d      	ldr	r2, [pc, #308]	; (8001420 <LCD_task+0x338>)
 80012ea:	2196      	movs	r1, #150	; 0x96
 80012ec:	200a      	movs	r0, #10
 80012ee:	f001 fcb0 	bl	8002c52 <ILI9341_WriteString>
	intToStr(Node_1.spo2, Strgspo2, 2);
 80012f2:	4b47      	ldr	r3, [pc, #284]	; (8001410 <LCD_task+0x328>)
 80012f4:	7a5b      	ldrb	r3, [r3, #9]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2202      	movs	r2, #2
 80012fe:	4619      	mov	r1, r3
 8001300:	f001 f906 	bl	8002510 <intToStr>
	ILI9341_WriteString(150, 150, Strgspo2, Font_11x18, ILI9341_PINK, ILI9341_BLACK);
 8001304:	4b3a      	ldr	r3, [pc, #232]	; (80013f0 <LCD_task+0x308>)
 8001306:	f107 010c 	add.w	r1, r7, #12
 800130a:	2200      	movs	r2, #0
 800130c:	9202      	str	r2, [sp, #8]
 800130e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001312:	9201      	str	r2, [sp, #4]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	9200      	str	r2, [sp, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	460a      	mov	r2, r1
 800131c:	2196      	movs	r1, #150	; 0x96
 800131e:	2096      	movs	r0, #150	; 0x96
 8001320:	f001 fc97 	bl	8002c52 <ILI9341_WriteString>
//			ILI9341_FillCircle(Button_1.pos_x, Button_1.pos_y, Button_1.shape_r, ILI9341_RED);
//			ILI9341_DrawCircle(Button_1.pos_x, Button_1.pos_y, Button_1.shape_r/4, ILI9341_BLACK);
//		}
	//start timer and softimer
	//osTimerStart(Timer01Handle, ActionPeriod);
	osTimerStart(Timer02Handle, Timeout);
 8001324:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <LCD_task+0x33c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f64e 2160 	movw	r1, #60000	; 0xea60
 800132c:	4618      	mov	r0, r3
 800132e:	f005 ff33 	bl	8007198 <osTimerStart>
	osTimerStart(Timer03Handle, MeasurePeriod);
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <LCD_task+0x340>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800133a:	4618      	mov	r0, r3
 800133c:	f005 ff2c 	bl	8007198 <osTimerStart>
	//ILI9341_WriteString(150, 180, "Start Timer", Font_11x18, ILI9341_PINK, ILI9341_BLACK);

	HAL_TIM_Base_Start_IT(&htim11);
 8001340:	483a      	ldr	r0, [pc, #232]	; (800142c <LCD_task+0x344>)
 8001342:	f004 f99f 	bl	8005684 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	osThreadSuspend(LCDHandle);
 8001346:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <LCD_task+0x348>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f005 fe36 	bl	8006fbc <osThreadSuspend>
	Time_keeper.LCD_Time[0] = HAL_GetTick();
 8001350:	f001 fde0 	bl	8002f14 <HAL_GetTick>
 8001354:	4603      	mov	r3, r0
 8001356:	4a37      	ldr	r2, [pc, #220]	; (8001434 <LCD_task+0x34c>)
 8001358:	6013      	str	r3, [r2, #0]
	//Update

	ftoa(Node_1.Temperature, StrgTemp, 1);
 800135a:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <LCD_task+0x328>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	f107 0318 	add.w	r3, r7, #24
 8001364:	2101      	movs	r1, #1
 8001366:	4618      	mov	r0, r3
 8001368:	eeb0 0a67 	vmov.f32	s0, s15
 800136c:	f001 f874 	bl	8002458 <ftoa>
	ILI9341_WriteString(150, 60, StrgTemp, Font_11x18, ILI9341_ORANGE, ILI9341_BLACK);
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <LCD_task+0x308>)
 8001372:	f107 0118 	add.w	r1, r7, #24
 8001376:	2200      	movs	r2, #0
 8001378:	9202      	str	r2, [sp, #8]
 800137a:	f64f 5220 	movw	r2, #64800	; 0xfd20
 800137e:	9201      	str	r2, [sp, #4]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	9200      	str	r2, [sp, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	460a      	mov	r2, r1
 8001388:	213c      	movs	r1, #60	; 0x3c
 800138a:	2096      	movs	r0, #150	; 0x96
 800138c:	f001 fc61 	bl	8002c52 <ILI9341_WriteString>

	intToStr((int)Node_1.Humidity, StrgHumd, 2);
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <LCD_task+0x328>)
 8001392:	edd3 7a01 	vldr	s15, [r3, #4]
 8001396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	2202      	movs	r2, #2
 80013a0:	4619      	mov	r1, r3
 80013a2:	ee17 0a90 	vmov	r0, s15
 80013a6:	f001 f8b3 	bl	8002510 <intToStr>
	ILI9341_WriteString(150, 90, StrgHumd, Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <LCD_task+0x308>)
 80013ac:	f107 0114 	add.w	r1, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	9202      	str	r2, [sp, #8]
 80013b4:	221f      	movs	r2, #31
 80013b6:	9201      	str	r2, [sp, #4]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	9200      	str	r2, [sp, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	460a      	mov	r2, r1
 80013c0:	215a      	movs	r1, #90	; 0x5a
 80013c2:	2096      	movs	r0, #150	; 0x96
 80013c4:	f001 fc45 	bl	8002c52 <ILI9341_WriteString>
	ILI9341_WriteString(180, 90, "%", Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <LCD_task+0x308>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	9202      	str	r2, [sp, #8]
 80013ce:	221f      	movs	r2, #31
 80013d0:	9201      	str	r2, [sp, #4]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	9200      	str	r2, [sp, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <LCD_task+0x330>)
 80013da:	215a      	movs	r1, #90	; 0x5a
 80013dc:	20b4      	movs	r0, #180	; 0xb4
 80013de:	f001 fc38 	bl	8002c52 <ILI9341_WriteString>

	intToStr(Node_1.bpm, Strgbpm, 2);
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <LCD_task+0x328>)
 80013e4:	7a1b      	ldrb	r3, [r3, #8]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	e024      	b.n	8001438 <LCD_task+0x350>
 80013ee:	bf00      	nop
 80013f0:	20000024 	.word	0x20000024
 80013f4:	08010364 	.word	0x08010364
 80013f8:	2000001c 	.word	0x2000001c
 80013fc:	08010384 	.word	0x08010384
 8001400:	08010390 	.word	0x08010390
 8001404:	0801039c 	.word	0x0801039c
 8001408:	080103a4 	.word	0x080103a4
 800140c:	080103b0 	.word	0x080103b0
 8001410:	20000228 	.word	0x20000228
 8001414:	080103c0 	.word	0x080103c0
 8001418:	080103cc 	.word	0x080103cc
 800141c:	080103d0 	.word	0x080103d0
 8001420:	080103d8 	.word	0x080103d8
 8001424:	2000029c 	.word	0x2000029c
 8001428:	200002a0 	.word	0x200002a0
 800142c:	200003fc 	.word	0x200003fc
 8001430:	2000028c 	.word	0x2000028c
 8001434:	20000234 	.word	0x20000234
 8001438:	2202      	movs	r2, #2
 800143a:	4619      	mov	r1, r3
 800143c:	f001 f868 	bl	8002510 <intToStr>
	ILI9341_WriteString(150, 120, Strgbpm, Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 8001440:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <LCD_task+0x40c>)
 8001442:	f107 0110 	add.w	r1, r7, #16
 8001446:	2200      	movs	r2, #0
 8001448:	9202      	str	r2, [sp, #8]
 800144a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800144e:	9201      	str	r2, [sp, #4]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	9200      	str	r2, [sp, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	460a      	mov	r2, r1
 8001458:	2178      	movs	r1, #120	; 0x78
 800145a:	2096      	movs	r0, #150	; 0x96
 800145c:	f001 fbf9 	bl	8002c52 <ILI9341_WriteString>

	intToStr(Node_1.spo2, Strgspo2, 2);
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <LCD_task+0x410>)
 8001462:	7a5b      	ldrb	r3, [r3, #9]
 8001464:	4618      	mov	r0, r3
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	2202      	movs	r2, #2
 800146c:	4619      	mov	r1, r3
 800146e:	f001 f84f 	bl	8002510 <intToStr>
	ILI9341_WriteString(150, 150, Strgspo2, Font_11x18, ILI9341_PINK, ILI9341_BLACK);
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <LCD_task+0x40c>)
 8001474:	f107 010c 	add.w	r1, r7, #12
 8001478:	2200      	movs	r2, #0
 800147a:	9202      	str	r2, [sp, #8]
 800147c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001480:	9201      	str	r2, [sp, #4]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	9200      	str	r2, [sp, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	460a      	mov	r2, r1
 800148a:	2196      	movs	r1, #150	; 0x96
 800148c:	2096      	movs	r0, #150	; 0x96
 800148e:	f001 fbe0 	bl	8002c52 <ILI9341_WriteString>
	//check button state
	if (Button_1.state == 1)
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <LCD_task+0x414>)
 8001494:	7b1b      	ldrb	r3, [r3, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00f      	beq.n	80014ba <LCD_task+0x3d2>
		{
			ILI9341_WriteString(260, 120, "Bad ", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <LCD_task+0x40c>)
 800149c:	2200      	movs	r2, #0
 800149e:	9202      	str	r2, [sp, #8]
 80014a0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80014a4:	9201      	str	r2, [sp, #4]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	9200      	str	r2, [sp, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <LCD_task+0x418>)
 80014ae:	2178      	movs	r1, #120	; 0x78
 80014b0:	f44f 7082 	mov.w	r0, #260	; 0x104
 80014b4:	f001 fbcd 	bl	8002c52 <ILI9341_WriteString>
 80014b8:	e00e      	b.n	80014d8 <LCD_task+0x3f0>
//			ILI9341_FillCircle(Button_1.pos_x, Button_1.pos_y + 0.5, Button_1.shape_r, ILI9341_BLUE);
//			ILI9341_DrawCircle(Button_1.pos_x, Button_1.pos_y, Button_1.shape_r/4, ILI9341_BLACK);
		}
	else
		{
			ILI9341_WriteString(260, 120 , "Good", Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <LCD_task+0x40c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	9202      	str	r2, [sp, #8]
 80014c0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80014c4:	9201      	str	r2, [sp, #4]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	9200      	str	r2, [sp, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <LCD_task+0x41c>)
 80014ce:	2178      	movs	r1, #120	; 0x78
 80014d0:	f44f 7082 	mov.w	r0, #260	; 0x104
 80014d4:	f001 fbbd 	bl	8002c52 <ILI9341_WriteString>
//	sprintf(payload, "{temp}: %2.2f, {humd}: %2f %, {bpm}: %2d, {spo2}: %2d \r\n", Node_1.Temperature, Node_1.Humidity, Node_1.bpm, Node_1.spo2);
//	HAL_UART_Transmit(&huart2, (uint8_t *) payload, strlen(payload), 200);

//	memset(payload, 0, strlen(payload));

	Time_keeper.LCD_Time[1] = HAL_GetTick();
 80014d8:	f001 fd1c 	bl	8002f14 <HAL_GetTick>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <LCD_task+0x420>)
 80014e0:	6053      	str	r3, [r2, #4]
	Time_keeper.LCD_Time[2] = Time_keeper.LCD_Time[1] - Time_keeper.LCD_Time[0];
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <LCD_task+0x420>)
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <LCD_task+0x420>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <LCD_task+0x420>)
 80014ee:	6093      	str	r3, [r2, #8]
	osThreadSuspend(LCDHandle);
 80014f0:	e729      	b.n	8001346 <LCD_task+0x25e>
 80014f2:	bf00      	nop
 80014f4:	20000024 	.word	0x20000024
 80014f8:	20000228 	.word	0x20000228
 80014fc:	20000004 	.word	0x20000004
 8001500:	080103e0 	.word	0x080103e0
 8001504:	080103e8 	.word	0x080103e8
 8001508:	20000234 	.word	0x20000234

0800150c <IRQ_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IRQ_task */
void IRQ_task(void *argument)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IRQ_task */
	uint32_t currentTick = 0, lastTick = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	if (osSemaphoreAcquire(Touch_binaryHandle, portMAX_DELAY) == osOK)
 800151c:	4b3a      	ldr	r3, [pc, #232]	; (8001608 <IRQ_task+0xfc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	4618      	mov	r0, r3
 8001526:	f005 ff25 	bl	8007374 <osSemaphoreAcquire>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f5      	bne.n	800151c <IRQ_task+0x10>
	{
		Time_keeper.IRQ_Time[0] = HAL_GetTick();
 8001530:	f001 fcf0 	bl	8002f14 <HAL_GetTick>
 8001534:	4603      	mov	r3, r0
 8001536:	4a35      	ldr	r2, [pc, #212]	; (800160c <IRQ_task+0x100>)
 8001538:	60d3      	str	r3, [r2, #12]
		osDelay(100);
 800153a:	2064      	movs	r0, #100	; 0x64
 800153c:	f005 fd80 	bl	8007040 <osDelay>

		//debounce irq touch
		currentTick = HAL_GetTick();
 8001540:	f001 fce8 	bl	8002f14 <HAL_GetTick>
 8001544:	60b8      	str	r0, [r7, #8]
		if ((HAL_GPIO_ReadPin(T_IRQ_GPIO_Port, T_IRQ_Pin) == 0) && (currentTick - lastTick > 500))
 8001546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154a:	4831      	ldr	r0, [pc, #196]	; (8001610 <IRQ_task+0x104>)
 800154c:	f002 fa88 	bl	8003a60 <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1e2      	bne.n	800151c <IRQ_task+0x10>
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001560:	d9dc      	bls.n	800151c <IRQ_task+0x10>
		{
			osThreadResume(LCDHandle);
 8001562:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <IRQ_task+0x108>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f005 fd49 	bl	8006ffe <osThreadResume>
			HAL_UART_Transmit(&huart2, (uint8_t *) "\x1b[32m[Action]: Touch\r\n", 24, 10);
 800156c:	230a      	movs	r3, #10
 800156e:	2218      	movs	r2, #24
 8001570:	4929      	ldr	r1, [pc, #164]	; (8001618 <IRQ_task+0x10c>)
 8001572:	482a      	ldr	r0, [pc, #168]	; (800161c <IRQ_task+0x110>)
 8001574:	f004 fb92 	bl	8005c9c <HAL_UART_Transmit>
			lastTick = currentTick;
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60fb      	str	r3, [r7, #12]

			//init spi touch
			HAL_SPI_DeInit(&hspi1);
 800157c:	4828      	ldr	r0, [pc, #160]	; (8001620 <IRQ_task+0x114>)
 800157e:	f003 fc3b 	bl	8004df8 <HAL_SPI_DeInit>
			hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <IRQ_task+0x114>)
 8001584:	2230      	movs	r2, #48	; 0x30
 8001586:	61da      	str	r2, [r3, #28]
			HAL_SPI_Init(&hspi1);
 8001588:	4825      	ldr	r0, [pc, #148]	; (8001620 <IRQ_task+0x114>)
 800158a:	f003 faa1 	bl	8004ad0 <HAL_SPI_Init>
//			ILI9341_WriteString(x, y, "touch", Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
//			HAL_SPI_DeInit(&hspi2);
//			hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
//			HAL_SPI_Init(&hspi2);
			//reset Timeout Timer
			osTimerStop(Timer02Handle);
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <IRQ_task+0x118>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f005 fe2e 	bl	80071f4 <osTimerStop>
			osTimerStart(Timer02Handle, 100);
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <IRQ_task+0x118>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2164      	movs	r1, #100	; 0x64
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 fdfa 	bl	8007198 <osTimerStart>

			//Handle touch
			if (Mode == SLEEP)
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <IRQ_task+0x11c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d113      	bne.n	80015d4 <IRQ_task+0xc8>
			{
				Mode = ACTIVE;
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <IRQ_task+0x11c>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, 1);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2102      	movs	r1, #2
 80015b6:	481d      	ldr	r0, [pc, #116]	; (800162c <IRQ_task+0x120>)
 80015b8:	f002 fa78 	bl	8003aac <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, (uint8_t *) "\x1b[32m[Action]: Wake\r\n", 23, 10);
 80015bc:	230a      	movs	r3, #10
 80015be:	2217      	movs	r2, #23
 80015c0:	491b      	ldr	r1, [pc, #108]	; (8001630 <IRQ_task+0x124>)
 80015c2:	4816      	ldr	r0, [pc, #88]	; (800161c <IRQ_task+0x110>)
 80015c4:	f004 fb6a 	bl	8005c9c <HAL_UART_Transmit>
				osThreadResume(LCDHandle);
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <IRQ_task+0x108>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f005 fd16 	bl	8006ffe <osThreadResume>
 80015d2:	e005      	b.n	80015e0 <IRQ_task+0xd4>
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *) "\x1b[32m[Action]: Active\r\n", 24, 10);
 80015d4:	230a      	movs	r3, #10
 80015d6:	2218      	movs	r2, #24
 80015d8:	4916      	ldr	r1, [pc, #88]	; (8001634 <IRQ_task+0x128>)
 80015da:	4810      	ldr	r0, [pc, #64]	; (800161c <IRQ_task+0x110>)
 80015dc:	f004 fb5e 	bl	8005c9c <HAL_UART_Transmit>
			}
			osTimerStart(Timer02Handle, Timeout);
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <IRQ_task+0x118>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f64e 2160 	movw	r1, #60000	; 0xea60
 80015e8:	4618      	mov	r0, r3
 80015ea:	f005 fdd5 	bl	8007198 <osTimerStart>
			Time_keeper.IRQ_Time[1] = HAL_GetTick();
 80015ee:	f001 fc91 	bl	8002f14 <HAL_GetTick>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a05      	ldr	r2, [pc, #20]	; (800160c <IRQ_task+0x100>)
 80015f6:	6113      	str	r3, [r2, #16]
			Time_keeper.IRQ_Time[2] = Time_keeper.IRQ_Time[1] - Time_keeper.IRQ_Time[0];
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <IRQ_task+0x100>)
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <IRQ_task+0x100>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	4a02      	ldr	r2, [pc, #8]	; (800160c <IRQ_task+0x100>)
 8001604:	6153      	str	r3, [r2, #20]
	if (osSemaphoreAcquire(Touch_binaryHandle, portMAX_DELAY) == osOK)
 8001606:	e789      	b.n	800151c <IRQ_task+0x10>
 8001608:	200002a4 	.word	0x200002a4
 800160c:	20000234 	.word	0x20000234
 8001610:	40020000 	.word	0x40020000
 8001614:	2000028c 	.word	0x2000028c
 8001618:	080103f0 	.word	0x080103f0
 800161c:	20000444 	.word	0x20000444
 8001620:	20000300 	.word	0x20000300
 8001624:	2000029c 	.word	0x2000029c
 8001628:	20000000 	.word	0x20000000
 800162c:	40020400 	.word	0x40020400
 8001630:	08010408 	.word	0x08010408
 8001634:	08010420 	.word	0x08010420

08001638 <Uart_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Uart_task */
void Uart_task(void *argument)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b0b8      	sub	sp, #224	; 0xe0
 800163c:	af04      	add	r7, sp, #16
 800163e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Uart_task */


	Ringbuf_init();
 8001640:	f001 fbe0 	bl	8002e04 <Ringbuf_init>
	char* action[BUFFER_ACTION];
	ILI9341_WriteString(150, 180, "Init   ", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <Uart_task+0x64>)
 8001646:	2200      	movs	r2, #0
 8001648:	9202      	str	r2, [sp, #8]
 800164a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800164e:	9201      	str	r2, [sp, #4]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	9200      	str	r2, [sp, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <Uart_task+0x68>)
 8001658:	21b4      	movs	r1, #180	; 0xb4
 800165a:	2096      	movs	r0, #150	; 0x96
 800165c:	f001 faf9 	bl	8002c52 <ILI9341_WriteString>

	HAL_UART_Transmit(&huart2, (uint8_t *) EDS_INFO, 282, 50);
 8001660:	2332      	movs	r3, #50	; 0x32
 8001662:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8001666:	490f      	ldr	r1, [pc, #60]	; (80016a4 <Uart_task+0x6c>)
 8001668:	480f      	ldr	r0, [pc, #60]	; (80016a8 <Uart_task+0x70>)
 800166a:	f004 fb17 	bl	8005c9c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *) EDS_INFO_FM, 143, 50);
 800166e:	2332      	movs	r3, #50	; 0x32
 8001670:	228f      	movs	r2, #143	; 0x8f
 8001672:	490e      	ldr	r1, [pc, #56]	; (80016ac <Uart_task+0x74>)
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <Uart_task+0x70>)
 8001676:	f004 fb11 	bl	8005c9c <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(Uart_binaryHandle, portMAX_DELAY) == osOK)
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <Uart_task+0x78>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f04f 31ff 	mov.w	r1, #4294967295
 8001682:	4618      	mov	r0, r3
 8001684:	f005 fe76 	bl	8007374 <osSemaphoreAcquire>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f5      	bne.n	800167a <Uart_task+0x42>
		  {
		  HAL_UART_Transmit(&huart2, (uint8_t *) "[Action]: Acquire\r\n", 18, 10);
 800168e:	230a      	movs	r3, #10
 8001690:	2212      	movs	r2, #18
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <Uart_task+0x7c>)
 8001694:	4804      	ldr	r0, [pc, #16]	; (80016a8 <Uart_task+0x70>)
 8001696:	f004 fb01 	bl	8005c9c <HAL_UART_Transmit>
	  if (osSemaphoreAcquire(Uart_binaryHandle, portMAX_DELAY) == osOK)
 800169a:	e7ee      	b.n	800167a <Uart_task+0x42>
 800169c:	20000024 	.word	0x20000024
 80016a0:	08010438 	.word	0x08010438
 80016a4:	08010440 	.word	0x08010440
 80016a8:	20000444 	.word	0x20000444
 80016ac:	0801055c 	.word	0x0801055c
 80016b0:	200002a8 	.word	0x200002a8
 80016b4:	080105ec 	.word	0x080105ec

080016b8 <LCD_Timeout>:
  /* USER CODE END Uart_task */
}

/* LCD_Timeout function */
void LCD_Timeout(void *argument)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCD_Timeout */
	HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2102      	movs	r1, #2
 80016c4:	480a      	ldr	r0, [pc, #40]	; (80016f0 <LCD_Timeout+0x38>)
 80016c6:	f002 f9f1 	bl	8003aac <HAL_GPIO_WritePin>
	Mode = SLEEP;
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <LCD_Timeout+0x3c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) "\x1B[34m[Action]: Sleep\r\n", 24, 50);
 80016d0:	2332      	movs	r3, #50	; 0x32
 80016d2:	2218      	movs	r2, #24
 80016d4:	4908      	ldr	r1, [pc, #32]	; (80016f8 <LCD_Timeout+0x40>)
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <LCD_Timeout+0x44>)
 80016d8:	f004 fae0 	bl	8005c9c <HAL_UART_Transmit>
	osThreadSuspend(LCDHandle);
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <LCD_Timeout+0x48>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f005 fc6b 	bl	8006fbc <osThreadSuspend>
  /* USER CODE END LCD_Timeout */
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40020400 	.word	0x40020400
 80016f4:	20000000 	.word	0x20000000
 80016f8:	08010600 	.word	0x08010600
 80016fc:	20000444 	.word	0x20000444
 8001700:	2000028c 	.word	0x2000028c

08001704 <Measure_Timer>:

/* Measure_Timer function */
void Measure_Timer(void *argument)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08e      	sub	sp, #56	; 0x38
 8001708:	af04      	add	r7, sp, #16
 800170a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Measure_Timer */
	DHT_DataTypedef DHT;
	char str[20];
	ILI9341_WriteString(150, 180, "Measure", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <Measure_Timer+0x90>)
 800170e:	2200      	movs	r2, #0
 8001710:	9202      	str	r2, [sp, #8]
 8001712:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001716:	9201      	str	r2, [sp, #4]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	9200      	str	r2, [sp, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <Measure_Timer+0x94>)
 8001720:	21b4      	movs	r1, #180	; 0xb4
 8001722:	2096      	movs	r0, #150	; 0x96
 8001724:	f001 fa95 	bl	8002c52 <ILI9341_WriteString>
	Time_keeper.Measure_Time[0] = HAL_GetTick();
 8001728:	f001 fbf4 	bl	8002f14 <HAL_GetTick>
 800172c:	4603      	mov	r3, r0
 800172e:	4a1b      	ldr	r2, [pc, #108]	; (800179c <Measure_Timer+0x98>)
 8001730:	6193      	str	r3, [r2, #24]
	HAL_UART_Transmit(&huart2, (uint8_t *) "\x1B[31m[Action]: Measure\r\n", 26, 100);
 8001732:	2364      	movs	r3, #100	; 0x64
 8001734:	221a      	movs	r2, #26
 8001736:	491a      	ldr	r1, [pc, #104]	; (80017a0 <Measure_Timer+0x9c>)
 8001738:	481a      	ldr	r0, [pc, #104]	; (80017a4 <Measure_Timer+0xa0>)
 800173a:	f004 faaf 	bl	8005c9c <HAL_UART_Transmit>





	Time_keeper.Measure_Time[1] = HAL_GetTick();
 800173e:	f001 fbe9 	bl	8002f14 <HAL_GetTick>
 8001742:	4603      	mov	r3, r0
 8001744:	4a15      	ldr	r2, [pc, #84]	; (800179c <Measure_Timer+0x98>)
 8001746:	61d3      	str	r3, [r2, #28]
	Time_keeper.Measure_Time[2] = Time_keeper.Measure_Time[1] - Time_keeper.Measure_Time[0];
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <Measure_Timer+0x98>)
 800174a:	69da      	ldr	r2, [r3, #28]
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <Measure_Timer+0x98>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <Measure_Timer+0x98>)
 8001754:	6213      	str	r3, [r2, #32]
	osDelay(1000);
 8001756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800175a:	f005 fc71 	bl	8007040 <osDelay>
	ILI9341_WriteString(150, 180, "Idle   ", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <Measure_Timer+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	9202      	str	r2, [sp, #8]
 8001764:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001768:	9201      	str	r2, [sp, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	9200      	str	r2, [sp, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <Measure_Timer+0xa4>)
 8001772:	21b4      	movs	r1, #180	; 0xb4
 8001774:	2096      	movs	r0, #150	; 0x96
 8001776:	f001 fa6c 	bl	8002c52 <ILI9341_WriteString>
	if (Mode == ACTIVE)
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <Measure_Timer+0xa8>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d104      	bne.n	800178c <Measure_Timer+0x88>
		osThreadResume(LCDHandle);
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <Measure_Timer+0xac>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f005 fc39 	bl	8006ffe <osThreadResume>
  /* USER CODE END Measure_Timer */
}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	; 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000024 	.word	0x20000024
 8001798:	08010618 	.word	0x08010618
 800179c:	20000234 	.word	0x20000234
 80017a0:	08010620 	.word	0x08010620
 80017a4:	20000444 	.word	0x20000444
 80017a8:	0801063c 	.word	0x0801063c
 80017ac:	20000000 	.word	0x20000000
 80017b0:	2000028c 	.word	0x2000028c

080017b4 <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == T_IRQ_Pin)
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017c4:	d11f      	bne.n	8001806 <HAL_GPIO_EXTI_Callback+0x52>
  {
	  	Button_1.state = !Button_1.state;
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_GPIO_EXTI_Callback+0x5c>)
 80017c8:	7b1b      	ldrb	r3, [r3, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	bf14      	ite	ne
 80017ce:	2301      	movne	r3, #1
 80017d0:	2300      	moveq	r3, #0
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f083 0301 	eor.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_GPIO_EXTI_Callback+0x5c>)
 80017e2:	731a      	strb	r2, [r3, #12]
	  	Node_1.Temperature = 22.5;
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_GPIO_EXTI_Callback+0x60>)
 80017e6:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <HAL_GPIO_EXTI_Callback+0x64>)
 80017e8:	601a      	str	r2, [r3, #0]
	  	Node_1.bpm = 110;
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_GPIO_EXTI_Callback+0x60>)
 80017ec:	226e      	movs	r2, #110	; 0x6e
 80017ee:	721a      	strb	r2, [r3, #8]
	  	Node_1.Humidity = 82.0;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_GPIO_EXTI_Callback+0x60>)
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <HAL_GPIO_EXTI_Callback+0x68>)
 80017f4:	605a      	str	r2, [r3, #4]
	  	Node_1.spo2 = 85;
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <HAL_GPIO_EXTI_Callback+0x60>)
 80017f8:	2255      	movs	r2, #85	; 0x55
 80017fa:	725a      	strb	r2, [r3, #9]
		osSemaphoreRelease(Touch_binaryHandle);
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_GPIO_EXTI_Callback+0x6c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f005 fe09 	bl	8007418 <osSemaphoreRelease>
  }
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000004 	.word	0x20000004
 8001814:	20000228 	.word	0x20000228
 8001818:	41b40000 	.word	0x41b40000
 800181c:	42a40000 	.word	0x42a40000
 8001820:	200002a4 	.word	0x200002a4

08001824 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af04      	add	r7, sp, #16
 800182a:	6078      	str	r0, [r7, #4]

	if (huart == &huart2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_UART_RxCpltCallback+0x70>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d12b      	bne.n	800188c <HAL_UART_RxCpltCallback+0x68>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *) "\x1B[31m[Action]: EXTI\r\n", 24, 10);
 8001834:	230a      	movs	r3, #10
 8001836:	2218      	movs	r2, #24
 8001838:	4917      	ldr	r1, [pc, #92]	; (8001898 <HAL_UART_RxCpltCallback+0x74>)
 800183a:	4816      	ldr	r0, [pc, #88]	; (8001894 <HAL_UART_RxCpltCallback+0x70>)
 800183c:	f004 fa2e 	bl	8005c9c <HAL_UART_Transmit>
		ILI9341_WriteString(150, 180, "Uart   ", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <HAL_UART_RxCpltCallback+0x78>)
 8001842:	2200      	movs	r2, #0
 8001844:	9202      	str	r2, [sp, #8]
 8001846:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800184a:	9201      	str	r2, [sp, #4]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	9200      	str	r2, [sp, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <HAL_UART_RxCpltCallback+0x7c>)
 8001854:	21b4      	movs	r1, #180	; 0xb4
 8001856:	2096      	movs	r0, #150	; 0x96
 8001858:	f001 f9fb 	bl	8002c52 <ILI9341_WriteString>
		osDelay(1000);
 800185c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001860:	f005 fbee 	bl	8007040 <osDelay>
		HAL_UART_Receive_IT(&huart2, (uint8_t*) payload, sizeof(payload));
 8001864:	2232      	movs	r2, #50	; 0x32
 8001866:	490f      	ldr	r1, [pc, #60]	; (80018a4 <HAL_UART_RxCpltCallback+0x80>)
 8001868:	480a      	ldr	r0, [pc, #40]	; (8001894 <HAL_UART_RxCpltCallback+0x70>)
 800186a:	f004 faa9 	bl	8005dc0 <HAL_UART_Receive_IT>
		osThreadSuspend(LCDHandle);
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_UART_RxCpltCallback+0x84>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f005 fba2 	bl	8006fbc <osThreadSuspend>
		osThreadSuspend(IRQHandle);
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_UART_RxCpltCallback+0x88>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f005 fb9d 	bl	8006fbc <osThreadSuspend>
		osSemaphoreRelease(Uart_binaryHandle);
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_UART_RxCpltCallback+0x8c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f005 fdc6 	bl	8007418 <osSemaphoreRelease>
	}
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000444 	.word	0x20000444
 8001898:	08010644 	.word	0x08010644
 800189c:	20000024 	.word	0x20000024
 80018a0:	0801065c 	.word	0x0801065c
 80018a4:	20000258 	.word	0x20000258
 80018a8:	2000028c 	.word	0x2000028c
 80018ac:	20000290 	.word	0x20000290
 80018b0:	200002a8 	.word	0x200002a8

080018b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b5c      	ldr	r3, [pc, #368]	; (8001a40 <MX_GPIO_Init+0x18c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a5b      	ldr	r2, [pc, #364]	; (8001a40 <MX_GPIO_Init+0x18c>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b59      	ldr	r3, [pc, #356]	; (8001a40 <MX_GPIO_Init+0x18c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <MX_GPIO_Init+0x18c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a54      	ldr	r2, [pc, #336]	; (8001a40 <MX_GPIO_Init+0x18c>)
 80018f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b52      	ldr	r3, [pc, #328]	; (8001a40 <MX_GPIO_Init+0x18c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b4e      	ldr	r3, [pc, #312]	; (8001a40 <MX_GPIO_Init+0x18c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a4d      	ldr	r2, [pc, #308]	; (8001a40 <MX_GPIO_Init+0x18c>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b4b      	ldr	r3, [pc, #300]	; (8001a40 <MX_GPIO_Init+0x18c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b47      	ldr	r3, [pc, #284]	; (8001a40 <MX_GPIO_Init+0x18c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a46      	ldr	r2, [pc, #280]	; (8001a40 <MX_GPIO_Init+0x18c>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <MX_GPIO_Init+0x18c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|DHT_Pin, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001940:	4840      	ldr	r0, [pc, #256]	; (8001a44 <MX_GPIO_Init+0x190>)
 8001942:	f002 f8b3 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_LED_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	f240 3102 	movw	r1, #770	; 0x302
 800194c:	483e      	ldr	r0, [pc, #248]	; (8001a48 <MX_GPIO_Init+0x194>)
 800194e:	f002 f8ad 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001958:	483c      	ldr	r0, [pc, #240]	; (8001a4c <MX_GPIO_Init+0x198>)
 800195a:	f002 f8a7 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800195e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	4833      	ldr	r0, [pc, #204]	; (8001a44 <MX_GPIO_Init+0x190>)
 8001978:	f001 fcdc 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT_Pin;
 800197c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001982:	2301      	movs	r3, #1
 8001984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001986:	2301      	movs	r3, #1
 8001988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	482b      	ldr	r0, [pc, #172]	; (8001a44 <MX_GPIO_Init+0x190>)
 8001996:	f001 fccd 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 800199a:	2302      	movs	r3, #2
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4825      	ldr	r0, [pc, #148]	; (8001a48 <MX_GPIO_Init+0x194>)
 80019b2:	f001 fcbf 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_MAX_Pin;
 80019b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_MAX_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	481f      	ldr	r0, [pc, #124]	; (8001a48 <MX_GPIO_Init+0x194>)
 80019cc:	f001 fcb2 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80019d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019dc:	2301      	movs	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	4819      	ldr	r0, [pc, #100]	; (8001a4c <MX_GPIO_Init+0x198>)
 80019e8:	f001 fca4 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin;
 80019ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	4811      	ldr	r0, [pc, #68]	; (8001a4c <MX_GPIO_Init+0x198>)
 8001a06:	f001 fc95 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 8001a0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	4809      	ldr	r0, [pc, #36]	; (8001a48 <MX_GPIO_Init+0x194>)
 8001a24:	f001 fc86 	bl	8003334 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2105      	movs	r1, #5
 8001a2c:	2017      	movs	r0, #23
 8001a2e:	f001 fb93 	bl	8003158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a32:	2017      	movs	r0, #23
 8001a34:	f001 fbbc 	bl	80031b0 <HAL_NVIC_EnableIRQ>

}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	; 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020800 	.word	0x40020800
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40020000 	.word	0x40020000

08001a50 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_I2C2_Init+0x50>)
 8001a56:	4a13      	ldr	r2, [pc, #76]	; (8001aa4 <MX_I2C2_Init+0x54>)
 8001a58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_I2C2_Init+0x50>)
 8001a5c:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <MX_I2C2_Init+0x58>)
 8001a5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_I2C2_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_I2C2_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_I2C2_Init+0x50>)
 8001a6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <MX_I2C2_Init+0x50>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_I2C2_Init+0x50>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <MX_I2C2_Init+0x50>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_I2C2_Init+0x50>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <MX_I2C2_Init+0x50>)
 8001a8e:	f002 f857 	bl	8003b40 <HAL_I2C_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a98:	f000 f908 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200002ac 	.word	0x200002ac
 8001aa4:	40005800 	.word	0x40005800
 8001aa8:	000186a0 	.word	0x000186a0

08001aac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <HAL_I2C_MspInit+0xa4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d13c      	bne.n	8001b48 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_I2C_MspInit+0xa8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_I2C_MspInit+0xa8>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_I2C_MspInit+0xa8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af0:	2312      	movs	r3, #18
 8001af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001afc:	2304      	movs	r3, #4
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	4814      	ldr	r0, [pc, #80]	; (8001b58 <HAL_I2C_MspInit+0xac>)
 8001b08:	f001 fc14 	bl	8003334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b10:	2312      	movs	r3, #18
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001b1c:	2309      	movs	r3, #9
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	480c      	ldr	r0, [pc, #48]	; (8001b58 <HAL_I2C_MspInit+0xac>)
 8001b28:	f001 fc04 	bl	8003334 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_I2C_MspInit+0xa8>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_I2C_MspInit+0xa8>)
 8001b36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_I2C_MspInit+0xa8>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40005800 	.word	0x40005800
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020400 	.word	0x40020400

08001b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b60:	f001 f9a2 	bl	8002ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b64:	f000 f814 	bl	8001b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b68:	f7ff fea4 	bl	80018b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b6c:	f000 f8ae 	bl	8001ccc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001b70:	f000 fbf6 	bl	8002360 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8001b74:	f000 fba8 	bl	80022c8 <MX_TIM11_Init>
  MX_SPI2_Init();
 8001b78:	f000 f8de 	bl	8001d38 <MX_SPI2_Init>
  MX_I2C2_Init();
 8001b7c:	f7ff ff68 	bl	8001a50 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001b80:	f005 f940 	bl	8006e04 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001b84:	f7ff fa40 	bl	8001008 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b88:	f005 f960 	bl	8006e4c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <main+0x30>
	...

08001b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b094      	sub	sp, #80	; 0x50
 8001b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b96:	f107 0320 	add.w	r3, r7, #32
 8001b9a:	2230      	movs	r2, #48	; 0x30
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f009 f8af 	bl	800ad02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <SystemClock_Config+0xcc>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	4a27      	ldr	r2, [pc, #156]	; (8001c5c <SystemClock_Config+0xcc>)
 8001bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <SystemClock_Config+0xcc>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <SystemClock_Config+0xd0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bdc:	4a20      	ldr	r2, [pc, #128]	; (8001c60 <SystemClock_Config+0xd0>)
 8001bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <SystemClock_Config+0xd0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bf8:	2310      	movs	r3, #16
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c00:	2300      	movs	r3, #0
 8001c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c04:	2308      	movs	r3, #8
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001c08:	2354      	movs	r3, #84	; 0x54
 8001c0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c10:	2304      	movs	r3, #4
 8001c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 f977 	bl	8003f0c <HAL_RCC_OscConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c24:	f000 f842 	bl	8001cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c28:	230f      	movs	r3, #15
 8001c2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	2102      	movs	r1, #2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 fc89 	bl	800455c <HAL_RCC_ClockConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c50:	f000 f82c 	bl	8001cac <Error_Handler>
  }
}
 8001c54:	bf00      	nop
 8001c56:	3750      	adds	r7, #80	; 0x50
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40007000 	.word	0x40007000

08001c64 <__io_putchar>:
	 set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10);
 8001c6c:	1d39      	adds	r1, r7, #4
 8001c6e:	230a      	movs	r3, #10
 8001c70:	2201      	movs	r2, #1
 8001c72:	4804      	ldr	r0, [pc, #16]	; (8001c84 <__io_putchar+0x20>)
 8001c74:	f004 f812 	bl	8005c9c <HAL_UART_Transmit>
  return ch;
 8001c78:	687b      	ldr	r3, [r7, #4]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000444 	.word	0x20000444

08001c88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c9a:	f001 f927 	bl	8002eec <HAL_IncTick>
  {
//	  HAL_TIM_Base_Stop_IT(htim);
//	  if (Button_1.state == false)
  }
  /* USER CODE END Callback 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40014400 	.word	0x40014400

08001cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb0:	b672      	cpsid	i
}
 8001cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <Error_Handler+0x8>

08001cb6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <MX_SPI1_Init+0x64>)
 8001cd2:	4a18      	ldr	r2, [pc, #96]	; (8001d34 <MX_SPI1_Init+0x68>)
 8001cd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <MX_SPI1_Init+0x64>)
 8001cd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <MX_SPI1_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_SPI1_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <MX_SPI1_Init+0x64>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_SPI1_Init+0x64>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <MX_SPI1_Init+0x64>)
 8001cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <MX_SPI1_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <MX_SPI1_Init+0x64>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_SPI1_Init+0x64>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <MX_SPI1_Init+0x64>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <MX_SPI1_Init+0x64>)
 8001d18:	220a      	movs	r2, #10
 8001d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d1c:	4804      	ldr	r0, [pc, #16]	; (8001d30 <MX_SPI1_Init+0x64>)
 8001d1e:	f002 fed7 	bl	8004ad0 <HAL_SPI_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d28:	f7ff ffc0 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000300 	.word	0x20000300
 8001d34:	40013000 	.word	0x40013000

08001d38 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <MX_SPI2_Init+0x64>)
 8001d3e:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <MX_SPI2_Init+0x68>)
 8001d40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <MX_SPI2_Init+0x64>)
 8001d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <MX_SPI2_Init+0x64>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <MX_SPI2_Init+0x64>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <MX_SPI2_Init+0x64>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <MX_SPI2_Init+0x64>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_SPI2_Init+0x64>)
 8001d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <MX_SPI2_Init+0x64>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <MX_SPI2_Init+0x64>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_SPI2_Init+0x64>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <MX_SPI2_Init+0x64>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_SPI2_Init+0x64>)
 8001d84:	220a      	movs	r2, #10
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d88:	4804      	ldr	r0, [pc, #16]	; (8001d9c <MX_SPI2_Init+0x64>)
 8001d8a:	f002 fea1 	bl	8004ad0 <HAL_SPI_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d94:	f7ff ff8a 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000358 	.word	0x20000358
 8001da0:	40003800 	.word	0x40003800

08001da4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	; 0x30
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a36      	ldr	r2, [pc, #216]	; (8001e9c <HAL_SPI_MspInit+0xf8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d134      	bne.n	8001e30 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	4b35      	ldr	r3, [pc, #212]	; (8001ea0 <HAL_SPI_MspInit+0xfc>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a34      	ldr	r2, [pc, #208]	; (8001ea0 <HAL_SPI_MspInit+0xfc>)
 8001dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <HAL_SPI_MspInit+0xfc>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <HAL_SPI_MspInit+0xfc>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a2d      	ldr	r2, [pc, #180]	; (8001ea0 <HAL_SPI_MspInit+0xfc>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_SPI_MspInit+0xfc>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dfe:	23e0      	movs	r3, #224	; 0xe0
 8001e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e0e:	2305      	movs	r3, #5
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	4619      	mov	r1, r3
 8001e18:	4822      	ldr	r0, [pc, #136]	; (8001ea4 <HAL_SPI_MspInit+0x100>)
 8001e1a:	f001 fa8b 	bl	8003334 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2105      	movs	r1, #5
 8001e22:	2023      	movs	r0, #35	; 0x23
 8001e24:	f001 f998 	bl	8003158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e28:	2023      	movs	r0, #35	; 0x23
 8001e2a:	f001 f9c1 	bl	80031b0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001e2e:	e031      	b.n	8001e94 <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <HAL_SPI_MspInit+0x104>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d12c      	bne.n	8001e94 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <HAL_SPI_MspInit+0xfc>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a17      	ldr	r2, [pc, #92]	; (8001ea0 <HAL_SPI_MspInit+0xfc>)
 8001e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_SPI_MspInit+0xfc>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_SPI_MspInit+0xfc>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <HAL_SPI_MspInit+0xfc>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_SPI_MspInit+0xfc>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e72:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e84:	2305      	movs	r3, #5
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4807      	ldr	r0, [pc, #28]	; (8001eac <HAL_SPI_MspInit+0x108>)
 8001e90:	f001 fa50 	bl	8003334 <HAL_GPIO_Init>
}
 8001e94:	bf00      	nop
 8001e96:	3730      	adds	r7, #48	; 0x30
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40013000 	.word	0x40013000
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	40003800 	.word	0x40003800
 8001eac:	40020400 	.word	0x40020400

08001eb0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <HAL_SPI_MspDeInit+0x58>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d10d      	bne.n	8001ede <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_SPI_MspDeInit+0x5c>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a11      	ldr	r2, [pc, #68]	; (8001f0c <HAL_SPI_MspDeInit+0x5c>)
 8001ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001ece:	21e0      	movs	r1, #224	; 0xe0
 8001ed0:	480f      	ldr	r0, [pc, #60]	; (8001f10 <HAL_SPI_MspDeInit+0x60>)
 8001ed2:	f001 fcc3 	bl	800385c <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8001ed6:	2023      	movs	r0, #35	; 0x23
 8001ed8:	f001 f982 	bl	80031e0 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 8001edc:	e00f      	b.n	8001efe <HAL_SPI_MspDeInit+0x4e>
  else if(spiHandle->Instance==SPI2)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <HAL_SPI_MspDeInit+0x64>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d10a      	bne.n	8001efe <HAL_SPI_MspDeInit+0x4e>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_SPI_MspDeInit+0x5c>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_SPI_MspDeInit+0x5c>)
 8001eee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ef2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8001ef4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001ef8:	4807      	ldr	r0, [pc, #28]	; (8001f18 <HAL_SPI_MspDeInit+0x68>)
 8001efa:	f001 fcaf 	bl	800385c <HAL_GPIO_DeInit>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40013000 	.word	0x40013000
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000
 8001f14:	40003800 	.word	0x40003800
 8001f18:	40020400 	.word	0x40020400

08001f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <HAL_MspInit+0x64>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	4a15      	ldr	r2, [pc, #84]	; (8001f80 <HAL_MspInit+0x64>)
 8001f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f30:	6453      	str	r3, [r2, #68]	; 0x44
 8001f32:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <HAL_MspInit+0x64>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_MspInit+0x64>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <HAL_MspInit+0x64>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_MspInit+0x64>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	210f      	movs	r1, #15
 8001f5e:	f06f 0001 	mvn.w	r0, #1
 8001f62:	f001 f8f9 	bl	8003158 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2105      	movs	r1, #5
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f001 f8f4 	bl	8003158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f001 f91d 	bl	80031b0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800

08001f84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08c      	sub	sp, #48	; 0x30
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	4b2e      	ldr	r3, [pc, #184]	; (8002054 <HAL_InitTick+0xd0>)
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9c:	4a2d      	ldr	r2, [pc, #180]	; (8002054 <HAL_InitTick+0xd0>)
 8001f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa2:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <HAL_InitTick+0xd0>)
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fb0:	f107 020c 	add.w	r2, r7, #12
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 fd56 	bl	8004a6c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001fc0:	f002 fd40 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
 8001fc4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc8:	4a23      	ldr	r2, [pc, #140]	; (8002058 <HAL_InitTick+0xd4>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	0c9b      	lsrs	r3, r3, #18
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001fd4:	4b21      	ldr	r3, [pc, #132]	; (800205c <HAL_InitTick+0xd8>)
 8001fd6:	4a22      	ldr	r2, [pc, #136]	; (8002060 <HAL_InitTick+0xdc>)
 8001fd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_InitTick+0xd8>)
 8001fdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fe0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001fe2:	4a1e      	ldr	r2, [pc, #120]	; (800205c <HAL_InitTick+0xd8>)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <HAL_InitTick+0xd8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_InitTick+0xd8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_InitTick+0xd8>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001ffa:	4818      	ldr	r0, [pc, #96]	; (800205c <HAL_InitTick+0xd8>)
 8001ffc:	f003 fa7c 	bl	80054f8 <HAL_TIM_Base_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002006:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800200a:	2b00      	cmp	r3, #0
 800200c:	d11b      	bne.n	8002046 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800200e:	4813      	ldr	r0, [pc, #76]	; (800205c <HAL_InitTick+0xd8>)
 8002010:	f003 fb38 	bl	8005684 <HAL_TIM_Base_Start_IT>
 8002014:	4603      	mov	r3, r0
 8002016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800201a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800201e:	2b00      	cmp	r3, #0
 8002020:	d111      	bne.n	8002046 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002022:	2019      	movs	r0, #25
 8002024:	f001 f8c4 	bl	80031b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b0f      	cmp	r3, #15
 800202c:	d808      	bhi.n	8002040 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800202e:	2200      	movs	r2, #0
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	2019      	movs	r0, #25
 8002034:	f001 f890 	bl	8003158 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_InitTick+0xe0>)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e002      	b.n	8002046 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002046:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800204a:	4618      	mov	r0, r3
 800204c:	3730      	adds	r7, #48	; 0x30
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	431bde83 	.word	0x431bde83
 800205c:	200003b0 	.word	0x200003b0
 8002060:	40014400 	.word	0x40014400
 8002064:	2000002c 	.word	0x2000002c

08002068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800206c:	e7fe      	b.n	800206c <NMI_Handler+0x4>

0800206e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <HardFault_Handler+0x4>

08002074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <MemManage_Handler+0x4>

0800207a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <UsageFault_Handler+0x4>

08002086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002098:	f001 ff1e 	bl	8003ed8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}

080020a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 80020a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020a8:	f001 fd32 	bl	8003b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(timeout > 0)
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <TIM1_UP_TIM10_IRQHandler+0x24>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <TIM1_UP_TIM10_IRQHandler+0x18>
		timeout--;
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <TIM1_UP_TIM10_IRQHandler+0x24>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <TIM1_UP_TIM10_IRQHandler+0x24>)
 80020c6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80020c8:	4803      	ldr	r0, [pc, #12]	; (80020d8 <TIM1_UP_TIM10_IRQHandler+0x28>)
 80020ca:	f003 fb6d 	bl	80057a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000488 	.word	0x20000488
 80020d8:	200003b0 	.word	0x200003b0

080020dc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80020e2:	f003 fb61 	bl	80057a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200003fc 	.word	0x200003fc

080020f0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <SPI1_IRQHandler+0x10>)
 80020f6:	f003 f817 	bl	8005128 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000300 	.word	0x20000300

08002104 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <USART2_IRQHandler+0x10>)
 800210a:	f003 fe89 	bl	8005e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000444 	.word	0x20000444

08002118 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return 1;
 800211c:	2301      	movs	r3, #1
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <_kill>:

int _kill(int pid, int sig)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002132:	f008 fcb5 	bl	800aaa0 <__errno>
 8002136:	4603      	mov	r3, r0
 8002138:	2216      	movs	r2, #22
 800213a:	601a      	str	r2, [r3, #0]
  return -1;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_exit>:

void _exit (int status)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002150:	f04f 31ff 	mov.w	r1, #4294967295
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ffe7 	bl	8002128 <_kill>
  while (1) {}    /* Make sure we hang here */
 800215a:	e7fe      	b.n	800215a <_exit+0x12>

0800215c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	e00a      	b.n	8002184 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800216e:	f3af 8000 	nop.w
 8002172:	4601      	mov	r1, r0
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	60ba      	str	r2, [r7, #8]
 800217a:	b2ca      	uxtb	r2, r1
 800217c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3301      	adds	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	dbf0      	blt.n	800216e <_read+0x12>
  }

  return len;
 800218c:	687b      	ldr	r3, [r7, #4]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	e009      	b.n	80021bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	60ba      	str	r2, [r7, #8]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fd57 	bl	8001c64 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	3301      	adds	r3, #1
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	dbf1      	blt.n	80021a8 <_write+0x12>
  }
  return len;
 80021c4:	687b      	ldr	r3, [r7, #4]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <_close>:

int _close(int file)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021f6:	605a      	str	r2, [r3, #4]
  return 0;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <_isatty>:

int _isatty(int file)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800220e:	2301      	movs	r3, #1
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002240:	4a14      	ldr	r2, [pc, #80]	; (8002294 <_sbrk+0x5c>)
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <_sbrk+0x60>)
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <_sbrk+0x64>)
 8002256:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <_sbrk+0x68>)
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <_sbrk+0x64>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	429a      	cmp	r2, r3
 8002266:	d207      	bcs.n	8002278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002268:	f008 fc1a 	bl	800aaa0 <__errno>
 800226c:	4603      	mov	r3, r0
 800226e:	220c      	movs	r2, #12
 8002270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	e009      	b.n	800228c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	4a05      	ldr	r2, [pc, #20]	; (800229c <_sbrk+0x64>)
 8002288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800228a:	68fb      	ldr	r3, [r7, #12]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20010000 	.word	0x20010000
 8002298:	00000400 	.word	0x00000400
 800229c:	200003f8 	.word	0x200003f8
 80022a0:	20004f48 	.word	0x20004f48

080022a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <SystemInit+0x20>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <SystemInit+0x20>)
 80022b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <MX_TIM11_Init+0x40>)
 80022ce:	4a0f      	ldr	r2, [pc, #60]	; (800230c <MX_TIM11_Init+0x44>)
 80022d0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 839;
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <MX_TIM11_Init+0x40>)
 80022d4:	f240 3247 	movw	r2, #839	; 0x347
 80022d8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <MX_TIM11_Init+0x40>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <MX_TIM11_Init+0x40>)
 80022e2:	2263      	movs	r2, #99	; 0x63
 80022e4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <MX_TIM11_Init+0x40>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <MX_TIM11_Init+0x40>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80022f2:	4805      	ldr	r0, [pc, #20]	; (8002308 <MX_TIM11_Init+0x40>)
 80022f4:	f003 f900 	bl	80054f8 <HAL_TIM_Base_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80022fe:	f7ff fcd5 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200003fc 	.word	0x200003fc
 800230c:	40014800 	.word	0x40014800

08002310 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_TIM_Base_MspInit+0x48>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d115      	bne.n	800234e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_TIM_Base_MspInit+0x4c>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a0c      	ldr	r2, [pc, #48]	; (800235c <HAL_TIM_Base_MspInit+0x4c>)
 800232c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_TIM_Base_MspInit+0x4c>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2105      	movs	r1, #5
 8002342:	201a      	movs	r0, #26
 8002344:	f000 ff08 	bl	8003158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002348:	201a      	movs	r0, #26
 800234a:	f000 ff31 	bl	80031b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40014800 	.word	0x40014800
 800235c:	40023800 	.word	0x40023800

08002360 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <MX_USART2_UART_Init+0x50>)
 8002368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 800236c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 8002386:	220c      	movs	r2, #12
 8002388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <MX_USART2_UART_Init+0x4c>)
 8002398:	f003 fbca 	bl	8005b30 <HAL_UART_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023a2:	f7ff fc83 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000444 	.word	0x20000444
 80023b0:	40004400 	.word	0x40004400

080023b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a1d      	ldr	r2, [pc, #116]	; (8002448 <HAL_UART_MspInit+0x94>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d133      	bne.n	800243e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	4b1c      	ldr	r3, [pc, #112]	; (800244c <HAL_UART_MspInit+0x98>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a1b      	ldr	r2, [pc, #108]	; (800244c <HAL_UART_MspInit+0x98>)
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_UART_MspInit+0x98>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_UART_MspInit+0x98>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a14      	ldr	r2, [pc, #80]	; (800244c <HAL_UART_MspInit+0x98>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_UART_MspInit+0x98>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800240e:	230c      	movs	r3, #12
 8002410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241a:	2303      	movs	r3, #3
 800241c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800241e:	2307      	movs	r3, #7
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4619      	mov	r1, r3
 8002428:	4809      	ldr	r0, [pc, #36]	; (8002450 <HAL_UART_MspInit+0x9c>)
 800242a:	f000 ff83 	bl	8003334 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	210a      	movs	r1, #10
 8002432:	2026      	movs	r0, #38	; 0x26
 8002434:	f000 fe90 	bl	8003158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002438:	2026      	movs	r0, #38	; 0x26
 800243a:	f000 feb9 	bl	80031b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800243e:	bf00      	nop
 8002440:	3728      	adds	r7, #40	; 0x28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40004400 	.word	0x40004400
 800244c:	40023800 	.word	0x40023800
 8002450:	40020000 	.word	0x40020000
 8002454:	00000000 	.word	0x00000000

08002458 <ftoa>:
#include "common.h"
#include <math.h>
#include <stdio.h>
// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 8002458:	b5b0      	push	{r4, r5, r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002462:	60b8      	str	r0, [r7, #8]
 8002464:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8002466:	edd7 7a03 	vldr	s15, [r7, #12]
 800246a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800246e:	ee17 3a90 	vmov	r3, s15
 8002472:	61fb      	str	r3, [r7, #28]
    // Extract floating part
    float fpart = n - (float)ipart;
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800247e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002486:	edc7 7a06 	vstr	s15, [r7, #24]
    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 800248a:	2200      	movs	r2, #0
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	69f8      	ldr	r0, [r7, #28]
 8002490:	f000 f83e 	bl	8002510 <intToStr>
 8002494:	6178      	str	r0, [r7, #20]
    // check for display option after point
    if (afterpoint != 0)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d030      	beq.n	80024fe <ftoa+0xa6>
    {
        res[i] = '.'; // add dot
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	4413      	add	r3, r2
 80024a2:	222e      	movs	r2, #46	; 0x2e
 80024a4:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 80024a6:	69b8      	ldr	r0, [r7, #24]
 80024a8:	f7fe f856 	bl	8000558 <__aeabi_f2d>
 80024ac:	4604      	mov	r4, r0
 80024ae:	460d      	mov	r5, r1
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fe f83f 	bl	8000534 <__aeabi_i2d>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	ec43 2b11 	vmov	d1, r2, r3
 80024be:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002508 <ftoa+0xb0>
 80024c2:	f00c fffb 	bl	800f4bc <pow>
 80024c6:	ec53 2b10 	vmov	r2, r3, d0
 80024ca:	4620      	mov	r0, r4
 80024cc:	4629      	mov	r1, r5
 80024ce:	f7fe f89b 	bl	8000608 <__aeabi_dmul>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4610      	mov	r0, r2
 80024d8:	4619      	mov	r1, r3
 80024da:	f7fe fb8d 	bl	8000bf8 <__aeabi_d2f>
 80024de:	4603      	mov	r3, r0
 80024e0:	61bb      	str	r3, [r7, #24]
        intToStr((int)fpart, res + i + 1, afterpoint);
 80024e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80024e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3301      	adds	r3, #1
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	4413      	add	r3, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4619      	mov	r1, r3
 80024f6:	ee17 0a90 	vmov	r0, s15
 80024fa:	f000 f809 	bl	8002510 <intToStr>
    }
}
 80024fe:	bf00      	nop
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bdb0      	pop	{r4, r5, r7, pc}
 8002506:	bf00      	nop
 8002508:	00000000 	.word	0x00000000
 800250c:	40240000 	.word	0x40240000

08002510 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
    if (x == 0)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d126      	bne.n	8002574 <intToStr+0x64>
    {
        str[i++] = '0';
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	617a      	str	r2, [r7, #20]
 800252c:	461a      	mov	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	4413      	add	r3, r2
 8002532:	2230      	movs	r2, #48	; 0x30
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e029      	b.n	800258c <intToStr+0x7c>
    }
    else
    {
        while (x)
        {
            str[i++] = (x % 10) + '0';
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <intToStr+0xa0>)
 800253c:	fb83 1302 	smull	r1, r3, r3, r2
 8002540:	1099      	asrs	r1, r3, #2
 8002542:	17d3      	asrs	r3, r2, #31
 8002544:	1ac9      	subs	r1, r1, r3
 8002546:	460b      	mov	r3, r1
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	1ad1      	subs	r1, r2, r3
 8002550:	b2ca      	uxtb	r2, r1
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	1c59      	adds	r1, r3, #1
 8002556:	6179      	str	r1, [r7, #20]
 8002558:	4619      	mov	r1, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	440b      	add	r3, r1
 800255e:	3230      	adds	r2, #48	; 0x30
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]
            x = x / 10;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <intToStr+0xa0>)
 8002568:	fb82 1203 	smull	r1, r2, r2, r3
 800256c:	1092      	asrs	r2, r2, #2
 800256e:	17db      	asrs	r3, r3, #31
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	60fb      	str	r3, [r7, #12]
        while (x)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1de      	bne.n	8002538 <intToStr+0x28>
        }
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 800257a:	e007      	b.n	800258c <intToStr+0x7c>
        str[i++] = '0';
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	617a      	str	r2, [r7, #20]
 8002582:	461a      	mov	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4413      	add	r3, r2
 8002588:	2230      	movs	r2, #48	; 0x30
 800258a:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	dbf3      	blt.n	800257c <intToStr+0x6c>

    reverse(str, i);
 8002594:	6979      	ldr	r1, [r7, #20]
 8002596:	68b8      	ldr	r0, [r7, #8]
 8002598:	f000 f80c 	bl	80025b4 <reverse>
    str[i] = '\0';
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	4413      	add	r3, r2
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
    return i;
 80025a6:	697b      	ldr	r3, [r7, #20]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	66666667 	.word	0x66666667

080025b4 <reverse>:

void reverse(char* str, int len)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	613b      	str	r3, [r7, #16]
    while (i < j)
 80025c8:	e018      	b.n	80025fc <reverse+0x48>
    {
        temp = str[i];
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	441a      	add	r2, r3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	440b      	add	r3, r1
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]
        i++;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3301      	adds	r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
        j--;
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	613b      	str	r3, [r7, #16]
    while (i < j)
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	429a      	cmp	r2, r3
 8002602:	dbe2      	blt.n	80025ca <reverse+0x16>
    }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <ILI9341_Select>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"


static void ILI9341_Select()
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8002618:	2200      	movs	r2, #0
 800261a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800261e:	4802      	ldr	r0, [pc, #8]	; (8002628 <ILI9341_Select+0x14>)
 8002620:	f001 fa44 	bl	8003aac <HAL_GPIO_WritePin>

}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40020000 	.word	0x40020000

0800262c <ILI9341_Unselect>:

void ILI9341_Unselect()
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8002630:	2201      	movs	r2, #1
 8002632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002636:	4802      	ldr	r0, [pc, #8]	; (8002640 <ILI9341_Unselect+0x14>)
 8002638:	f001 fa38 	bl	8003aac <HAL_GPIO_WritePin>
}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40020000 	.word	0x40020000

08002644 <ILI9341_Reset>:

static void ILI9341_Reset()
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8002648:	2200      	movs	r2, #0
 800264a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800264e:	4807      	ldr	r0, [pc, #28]	; (800266c <ILI9341_Reset+0x28>)
 8002650:	f001 fa2c 	bl	8003aac <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002654:	200a      	movs	r0, #10
 8002656:	f000 fc69 	bl	8002f2c <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 800265a:	2201      	movs	r2, #1
 800265c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002660:	4802      	ldr	r0, [pc, #8]	; (800266c <ILI9341_Reset+0x28>)
 8002662:	f001 fa23 	bl	8003aac <HAL_GPIO_WritePin>
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40020400 	.word	0x40020400

08002670 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800267a:	2200      	movs	r2, #0
 800267c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002680:	4806      	ldr	r0, [pc, #24]	; (800269c <ILI9341_WriteCommand+0x2c>)
 8002682:	f001 fa13 	bl	8003aac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002686:	1df9      	adds	r1, r7, #7
 8002688:	f04f 33ff 	mov.w	r3, #4294967295
 800268c:	2201      	movs	r2, #1
 800268e:	4804      	ldr	r0, [pc, #16]	; (80026a0 <ILI9341_WriteCommand+0x30>)
 8002690:	f002 fbfe 	bl	8004e90 <HAL_SPI_Transmit>
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40020400 	.word	0x40020400
 80026a0:	20000300 	.word	0x20000300

080026a4 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80026ae:	2201      	movs	r2, #1
 80026b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026b4:	4810      	ldr	r0, [pc, #64]	; (80026f8 <ILI9341_WriteData+0x54>)
 80026b6:	f001 f9f9 	bl	8003aac <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80026ba:	e015      	b.n	80026e8 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c2:	bf28      	it	cs
 80026c4:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80026c8:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80026ca:	89fa      	ldrh	r2, [r7, #14]
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	480a      	ldr	r0, [pc, #40]	; (80026fc <ILI9341_WriteData+0x58>)
 80026d4:	f002 fbdc 	bl	8004e90 <HAL_SPI_Transmit>
        buff += chunk_size;
 80026d8:	89fb      	ldrh	r3, [r7, #14]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80026e0:	89fb      	ldrh	r3, [r7, #14]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1e6      	bne.n	80026bc <ILI9341_WriteData+0x18>
    }
}
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40020400 	.word	0x40020400
 80026fc:	20000300 	.word	0x20000300

08002700 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	4604      	mov	r4, r0
 8002708:	4608      	mov	r0, r1
 800270a:	4611      	mov	r1, r2
 800270c:	461a      	mov	r2, r3
 800270e:	4623      	mov	r3, r4
 8002710:	80fb      	strh	r3, [r7, #6]
 8002712:	4603      	mov	r3, r0
 8002714:	80bb      	strh	r3, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	807b      	strh	r3, [r7, #2]
 800271a:	4613      	mov	r3, r2
 800271c:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800271e:	202a      	movs	r0, #42	; 0x2a
 8002720:	f7ff ffa6 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	b29b      	uxth	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	733b      	strb	r3, [r7, #12]
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	737b      	strb	r3, [r7, #13]
 8002734:	887b      	ldrh	r3, [r7, #2]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	b29b      	uxth	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	73bb      	strb	r3, [r7, #14]
 800273e:	887b      	ldrh	r3, [r7, #2]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	2104      	movs	r1, #4
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff ffaa 	bl	80026a4 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8002750:	202b      	movs	r0, #43	; 0x2b
 8002752:	f7ff ff8d 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8002756:	88bb      	ldrh	r3, [r7, #4]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	b29b      	uxth	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	723b      	strb	r3, [r7, #8]
 8002760:	88bb      	ldrh	r3, [r7, #4]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	727b      	strb	r3, [r7, #9]
 8002766:	883b      	ldrh	r3, [r7, #0]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	b29b      	uxth	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	72bb      	strb	r3, [r7, #10]
 8002770:	883b      	ldrh	r3, [r7, #0]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	2104      	movs	r1, #4
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff91 	bl	80026a4 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8002782:	202c      	movs	r0, #44	; 0x2c
 8002784:	f7ff ff74 	bl	8002670 <ILI9341_WriteCommand>
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	bd90      	pop	{r4, r7, pc}

08002790 <ILI9341_Init>:

void ILI9341_Init()
{
 8002790:	b590      	push	{r4, r7, lr}
 8002792:	b09b      	sub	sp, #108	; 0x6c
 8002794:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8002796:	f7ff ff3d 	bl	8002614 <ILI9341_Select>
    ILI9341_Reset();
 800279a:	f7ff ff53 	bl	8002644 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800279e:	2001      	movs	r0, #1
 80027a0:	f7ff ff66 	bl	8002670 <ILI9341_WriteCommand>
    HAL_Delay(500);
 80027a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027a8:	f000 fbc0 	bl	8002f2c <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80027ac:	20cb      	movs	r0, #203	; 0xcb
 80027ae:	f7ff ff5f 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80027b2:	4a8a      	ldr	r2, [pc, #552]	; (80029dc <ILI9341_Init+0x24c>)
 80027b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027bc:	6018      	str	r0, [r3, #0]
 80027be:	3304      	adds	r3, #4
 80027c0:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80027c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027c6:	2105      	movs	r1, #5
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff6b 	bl	80026a4 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80027ce:	20cf      	movs	r0, #207	; 0xcf
 80027d0:	f7ff ff4e 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80027d4:	4a82      	ldr	r2, [pc, #520]	; (80029e0 <ILI9341_Init+0x250>)
 80027d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	4611      	mov	r1, r2
 80027de:	8019      	strh	r1, [r3, #0]
 80027e0:	3302      	adds	r3, #2
 80027e2:	0c12      	lsrs	r2, r2, #16
 80027e4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80027e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027ea:	2103      	movs	r1, #3
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff59 	bl	80026a4 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80027f2:	20e8      	movs	r0, #232	; 0xe8
 80027f4:	f7ff ff3c 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80027f8:	4a7a      	ldr	r2, [pc, #488]	; (80029e4 <ILI9341_Init+0x254>)
 80027fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	4611      	mov	r1, r2
 8002802:	8019      	strh	r1, [r3, #0]
 8002804:	3302      	adds	r3, #2
 8002806:	0c12      	lsrs	r2, r2, #16
 8002808:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800280a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800280e:	2103      	movs	r1, #3
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff47 	bl	80026a4 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8002816:	20ea      	movs	r0, #234	; 0xea
 8002818:	f7ff ff2a 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 800281c:	2300      	movs	r3, #0
 800281e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 8002822:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002826:	2102      	movs	r1, #2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff3b 	bl	80026a4 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800282e:	20ed      	movs	r0, #237	; 0xed
 8002830:	f7ff ff1e 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8002834:	4b6c      	ldr	r3, [pc, #432]	; (80029e8 <ILI9341_Init+0x258>)
 8002836:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 8002838:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800283c:	2104      	movs	r1, #4
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ff30 	bl	80026a4 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8002844:	20f7      	movs	r0, #247	; 0xf7
 8002846:	f7ff ff13 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 800284a:	2320      	movs	r3, #32
 800284c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8002850:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002854:	2101      	movs	r1, #1
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ff24 	bl	80026a4 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 800285c:	20c0      	movs	r0, #192	; 0xc0
 800285e:	f7ff ff07 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8002862:	2323      	movs	r3, #35	; 0x23
 8002864:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8002868:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800286c:	2101      	movs	r1, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff18 	bl	80026a4 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8002874:	20c1      	movs	r0, #193	; 0xc1
 8002876:	f7ff fefb 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 800287a:	2310      	movs	r3, #16
 800287c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8002880:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002884:	2101      	movs	r1, #1
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff0c 	bl	80026a4 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 800288c:	20c5      	movs	r0, #197	; 0xc5
 800288e:	f7ff feef 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8002892:	f642 033e 	movw	r3, #10302	; 0x283e
 8002896:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 800289a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800289e:	2102      	movs	r1, #2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff feff 	bl	80026a4 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80028a6:	20c7      	movs	r0, #199	; 0xc7
 80028a8:	f7ff fee2 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80028ac:	2386      	movs	r3, #134	; 0x86
 80028ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80028b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028b6:	2101      	movs	r1, #1
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fef3 	bl	80026a4 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80028be:	2036      	movs	r0, #54	; 0x36
 80028c0:	f7ff fed6 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80028c4:	2348      	movs	r3, #72	; 0x48
 80028c6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 80028ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028ce:	2101      	movs	r1, #1
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fee7 	bl	80026a4 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80028d6:	203a      	movs	r0, #58	; 0x3a
 80028d8:	f7ff feca 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80028dc:	2355      	movs	r3, #85	; 0x55
 80028de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 80028e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028e6:	2101      	movs	r1, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fedb 	bl	80026a4 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80028ee:	20b1      	movs	r0, #177	; 0xb1
 80028f0:	f7ff febe 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80028f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028f8:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 80028fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028fe:	2102      	movs	r1, #2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fecf 	bl	80026a4 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8002906:	20b6      	movs	r0, #182	; 0xb6
 8002908:	f7ff feb2 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 800290c:	4a37      	ldr	r2, [pc, #220]	; (80029ec <ILI9341_Init+0x25c>)
 800290e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	4611      	mov	r1, r2
 8002916:	8019      	strh	r1, [r3, #0]
 8002918:	3302      	adds	r3, #2
 800291a:	0c12      	lsrs	r2, r2, #16
 800291c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800291e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002922:	2103      	movs	r1, #3
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff febd 	bl	80026a4 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800292a:	20f2      	movs	r0, #242	; 0xf2
 800292c:	f7ff fea0 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8002930:	2300      	movs	r3, #0
 8002932:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 8002936:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff feb1 	bl	80026a4 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8002942:	2026      	movs	r0, #38	; 0x26
 8002944:	f7ff fe94 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8002948:	2301      	movs	r3, #1
 800294a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 800294e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002952:	2101      	movs	r1, #1
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fea5 	bl	80026a4 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 800295a:	20e0      	movs	r0, #224	; 0xe0
 800295c:	f7ff fe88 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8002960:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <ILI9341_Init+0x260>)
 8002962:	f107 0414 	add.w	r4, r7, #20
 8002966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002968:	c407      	stmia	r4!, {r0, r1, r2}
 800296a:	8023      	strh	r3, [r4, #0]
 800296c:	3402      	adds	r4, #2
 800296e:	0c1b      	lsrs	r3, r3, #16
 8002970:	7023      	strb	r3, [r4, #0]
                            0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	210f      	movs	r1, #15
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fe93 	bl	80026a4 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 800297e:	20e1      	movs	r0, #225	; 0xe1
 8002980:	f7ff fe76 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <ILI9341_Init+0x264>)
 8002986:	1d3c      	adds	r4, r7, #4
 8002988:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800298a:	c407      	stmia	r4!, {r0, r1, r2}
 800298c:	8023      	strh	r3, [r4, #0]
 800298e:	3402      	adds	r4, #2
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	7023      	strb	r3, [r4, #0]
                            0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	210f      	movs	r1, #15
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fe83 	bl	80026a4 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800299e:	2011      	movs	r0, #17
 80029a0:	f7ff fe66 	bl	8002670 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80029a4:	2078      	movs	r0, #120	; 0x78
 80029a6:	f000 fac1 	bl	8002f2c <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80029aa:	2029      	movs	r0, #41	; 0x29
 80029ac:	f7ff fe60 	bl	8002670 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80029b0:	2036      	movs	r0, #54	; 0x36
 80029b2:	f7ff fe5d 	bl	8002670 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80029b6:	23e8      	movs	r3, #232	; 0xe8
 80029b8:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80029ba:	463b      	mov	r3, r7
 80029bc:	2101      	movs	r1, #1
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fe70 	bl	80026a4 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80029c4:	f7ff fe32 	bl	800262c <ILI9341_Unselect>

    HAL_GPIO_WritePin(ILI9341_LED_GPIO_Port, ILI9341_LED_Pin, SET);
 80029c8:	2201      	movs	r2, #1
 80029ca:	2102      	movs	r1, #2
 80029cc:	480a      	ldr	r0, [pc, #40]	; (80029f8 <ILI9341_Init+0x268>)
 80029ce:	f001 f86d 	bl	8003aac <HAL_GPIO_WritePin>
}
 80029d2:	bf00      	nop
 80029d4:	376c      	adds	r7, #108	; 0x6c
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd90      	pop	{r4, r7, pc}
 80029da:	bf00      	nop
 80029dc:	08010664 	.word	0x08010664
 80029e0:	0801066c 	.word	0x0801066c
 80029e4:	08010670 	.word	0x08010670
 80029e8:	81120364 	.word	0x81120364
 80029ec:	08010674 	.word	0x08010674
 80029f0:	08010678 	.word	0x08010678
 80029f4:	08010688 	.word	0x08010688
 80029f8:	40020400 	.word	0x40020400

080029fc <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	80fb      	strh	r3, [r7, #6]
 8002a06:	460b      	mov	r3, r1
 8002a08:	80bb      	strh	r3, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a14:	d21f      	bcs.n	8002a56 <ILI9341_DrawPixel+0x5a>
 8002a16:	88bb      	ldrh	r3, [r7, #4]
 8002a18:	2bef      	cmp	r3, #239	; 0xef
 8002a1a:	d81c      	bhi.n	8002a56 <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 8002a1c:	f7ff fdfa 	bl	8002614 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	3301      	adds	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	88bb      	ldrh	r3, [r7, #4]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	88b9      	ldrh	r1, [r7, #4]
 8002a2e:	88f8      	ldrh	r0, [r7, #6]
 8002a30:	f7ff fe66 	bl	8002700 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002a34:	887b      	ldrh	r3, [r7, #2]
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	733b      	strb	r3, [r7, #12]
 8002a3e:	887b      	ldrh	r3, [r7, #2]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 8002a44:	f107 030c 	add.w	r3, r7, #12
 8002a48:	2102      	movs	r1, #2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fe2a 	bl	80026a4 <ILI9341_WriteData>

    ILI9341_Unselect();
 8002a50:	f7ff fdec 	bl	800262c <ILI9341_Unselect>
 8002a54:	e000      	b.n	8002a58 <ILI9341_DrawPixel+0x5c>
        return;
 8002a56:	bf00      	nop
}
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <ILI9341_DrawLine>:

void ILI9341_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8002a5e:	b590      	push	{r4, r7, lr}
 8002a60:	b08d      	sub	sp, #52	; 0x34
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4604      	mov	r4, r0
 8002a66:	4608      	mov	r0, r1
 8002a68:	4611      	mov	r1, r2
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	80fb      	strh	r3, [r7, #6]
 8002a70:	4603      	mov	r3, r0
 8002a72:	80bb      	strh	r3, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	803b      	strh	r3, [r7, #0]
    uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;

	delta_x = x2 - x1;
 8002a84:	887a      	ldrh	r2, [r7, #2]
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8002a8c:	883a      	ldrh	r2, [r7, #0]
 8002a8e:	88bb      	ldrh	r3, [r7, #4]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8002a98:	88bb      	ldrh	r3, [r7, #4]
 8002a9a:	60bb      	str	r3, [r7, #8]

	if (delta_x > 0)
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	dd02      	ble.n	8002aa8 <ILI9341_DrawLine+0x4a>
        incx = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	e00b      	b.n	8002ac0 <ILI9341_DrawLine+0x62>
	else if (delta_x == 0)
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <ILI9341_DrawLine+0x56>
        incx = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	e005      	b.n	8002ac0 <ILI9341_DrawLine+0x62>
	else
    {
        incx = -1;
 8002ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab8:	617b      	str	r3, [r7, #20]
        delta_x = -delta_x;
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	425b      	negs	r3, r3
 8002abe:	623b      	str	r3, [r7, #32]
    }

    if (delta_y > 0)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	dd02      	ble.n	8002acc <ILI9341_DrawLine+0x6e>
        incy = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	e00b      	b.n	8002ae4 <ILI9341_DrawLine+0x86>
	else if (delta_y==0)
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d102      	bne.n	8002ad8 <ILI9341_DrawLine+0x7a>
        incy = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	e005      	b.n	8002ae4 <ILI9341_DrawLine+0x86>
	else
    {
        incy = -1;
 8002ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8002adc:	613b      	str	r3, [r7, #16]
        delta_y = -delta_y;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	61fb      	str	r3, [r7, #28]
    }

	if (delta_x > delta_y)
 8002ae4:	6a3a      	ldr	r2, [r7, #32]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	dd02      	ble.n	8002af2 <ILI9341_DrawLine+0x94>
        distance = delta_x;
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	e001      	b.n	8002af6 <ILI9341_DrawLine+0x98>
	else
        distance = delta_y;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	61bb      	str	r3, [r7, #24]

	for(t = 0; t <= distance + 1; t++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002afa:	e02b      	b.n	8002b54 <ILI9341_DrawLine+0xf6>
	{
		ILI9341_DrawPixel(uRow, uCol, color);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	b291      	uxth	r1, r2
 8002b04:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff77 	bl	80029fc <ILI9341_DrawPixel>

		xerr += delta_x;
 8002b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	4413      	add	r3, r2
 8002b14:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 8002b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24

		if (xerr > distance)
 8002b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	dd07      	ble.n	8002b36 <ILI9341_DrawLine+0xd8>
		{
			xerr -= distance;
 8002b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	4413      	add	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance)
 8002b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	dd07      	ble.n	8002b4e <ILI9341_DrawLine+0xf0>
		{
			yerr -= distance;
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	60bb      	str	r3, [r7, #8]
	for(t = 0; t <= distance + 1; t++)
 8002b4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b50:	3301      	adds	r3, #1
 8002b52:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002b54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	ddce      	ble.n	8002afc <ILI9341_DrawLine+0x9e>
		}
	}
}
 8002b5e:	bf00      	nop
 8002b60:	bf00      	nop
 8002b62:	3734      	adds	r7, #52	; 0x34
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd90      	pop	{r4, r7, pc}

08002b68 <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002b68:	b082      	sub	sp, #8
 8002b6a:	b590      	push	{r4, r7, lr}
 8002b6c:	b089      	sub	sp, #36	; 0x24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
 8002b72:	4603      	mov	r3, r0
 8002b74:	80fb      	strh	r3, [r7, #6]
 8002b76:	460b      	mov	r3, r1
 8002b78:	80bb      	strh	r3, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002b7e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	4413      	add	r3, r2
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29c      	uxth	r4, r3
 8002b8e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	88bb      	ldrh	r3, [r7, #4]
 8002b96:	4413      	add	r3, r2
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	88b9      	ldrh	r1, [r7, #4]
 8002ba0:	88f8      	ldrh	r0, [r7, #6]
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	f7ff fdac 	bl	8002700 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]
 8002bac:	e043      	b.n	8002c36 <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 8002bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	3b20      	subs	r3, #32
 8002bb4:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	440b      	add	r3, r1
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	e029      	b.n	8002c24 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00e      	beq.n	8002bfe <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002be0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	743b      	strb	r3, [r7, #16]
 8002bea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8002bf0:	f107 0310 	add.w	r3, r7, #16
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fd54 	bl	80026a4 <ILI9341_WriteData>
 8002bfc:	e00f      	b.n	8002c1e <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002bfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c02:	0a1b      	lsrs	r3, r3, #8
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	733b      	strb	r3, [r7, #12]
 8002c0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8002c12:	f107 030c 	add.w	r3, r7, #12
 8002c16:	2102      	movs	r1, #2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fd43 	bl	80026a4 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	3301      	adds	r3, #1
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002c28:	461a      	mov	r2, r3
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d3cf      	bcc.n	8002bd0 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	3301      	adds	r3, #1
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d3b5      	bcc.n	8002bae <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 8002c42:	bf00      	nop
 8002c44:	bf00      	nop
 8002c46:	3724      	adds	r7, #36	; 0x24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002c4e:	b002      	add	sp, #8
 8002c50:	4770      	bx	lr

08002c52 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002c52:	b082      	sub	sp, #8
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af04      	add	r7, sp, #16
 8002c5a:	603a      	str	r2, [r7, #0]
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	4603      	mov	r3, r0
 8002c60:	80fb      	strh	r3, [r7, #6]
 8002c62:	460b      	mov	r3, r1
 8002c64:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8002c66:	f7ff fcd5 	bl	8002614 <ILI9341_Select>

    while(*str) {
 8002c6a:	e02e      	b.n	8002cca <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	7d3a      	ldrb	r2, [r7, #20]
 8002c70:	4413      	add	r3, r2
 8002c72:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002c76:	db13      	blt.n	8002ca0 <ILI9341_WriteString+0x4e>
            x = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002c7c:	7d7b      	ldrb	r3, [r7, #21]
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	88bb      	ldrh	r3, [r7, #4]
 8002c82:	4413      	add	r3, r2
 8002c84:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8002c86:	88bb      	ldrh	r3, [r7, #4]
 8002c88:	7d7a      	ldrb	r2, [r7, #21]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	2bef      	cmp	r3, #239	; 0xef
 8002c8e:	dc21      	bgt.n	8002cd4 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	d103      	bne.n	8002ca0 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	603b      	str	r3, [r7, #0]
                continue;
 8002c9e:	e014      	b.n	8002cca <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	88b9      	ldrh	r1, [r7, #4]
 8002ca6:	88f8      	ldrh	r0, [r7, #6]
 8002ca8:	8c3b      	ldrh	r3, [r7, #32]
 8002caa:	9302      	str	r3, [sp, #8]
 8002cac:	8bbb      	ldrh	r3, [r7, #28]
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f7ff ff57 	bl	8002b68 <ILI9341_WriteChar>
        x += font.width;
 8002cba:	7d3b      	ldrb	r3, [r7, #20]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	80fb      	strh	r3, [r7, #6]
        str++;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1cc      	bne.n	8002c6c <ILI9341_WriteString+0x1a>
 8002cd2:	e000      	b.n	8002cd6 <ILI9341_WriteString+0x84>
                break;
 8002cd4:	bf00      	nop
    }

    ILI9341_Unselect();
 8002cd6:	f7ff fca9 	bl	800262c <ILI9341_Unselect>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ce4:	b002      	add	sp, #8
 8002ce6:	4770      	bx	lr

08002ce8 <ILI9341_FillRectangle>:
    ILI9341_DrawLine(x, y, x, y + h, color);
    ILI9341_DrawLine(x, y + h, x + w, y + h, color);
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8002ce8:	b590      	push	{r4, r7, lr}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4604      	mov	r4, r0
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4623      	mov	r3, r4
 8002cf8:	80fb      	strh	r3, [r7, #6]
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	80bb      	strh	r3, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	807b      	strh	r3, [r7, #2]
 8002d02:	4613      	mov	r3, r2
 8002d04:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d0c:	d253      	bcs.n	8002db6 <ILI9341_FillRectangle+0xce>
 8002d0e:	88bb      	ldrh	r3, [r7, #4]
 8002d10:	2bef      	cmp	r3, #239	; 0xef
 8002d12:	d850      	bhi.n	8002db6 <ILI9341_FillRectangle+0xce>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8002d14:	88fa      	ldrh	r2, [r7, #6]
 8002d16:	887b      	ldrh	r3, [r7, #2]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d1e:	dd03      	ble.n	8002d28 <ILI9341_FillRectangle+0x40>
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002d26:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8002d28:	88ba      	ldrh	r2, [r7, #4]
 8002d2a:	883b      	ldrh	r3, [r7, #0]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	2bf0      	cmp	r3, #240	; 0xf0
 8002d30:	dd03      	ble.n	8002d3a <ILI9341_FillRectangle+0x52>
 8002d32:	88bb      	ldrh	r3, [r7, #4]
 8002d34:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002d38:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8002d3a:	f7ff fc6b 	bl	8002614 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002d3e:	88fa      	ldrh	r2, [r7, #6]
 8002d40:	887b      	ldrh	r3, [r7, #2]
 8002d42:	4413      	add	r3, r2
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29c      	uxth	r4, r3
 8002d4a:	88ba      	ldrh	r2, [r7, #4]
 8002d4c:	883b      	ldrh	r3, [r7, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	88b9      	ldrh	r1, [r7, #4]
 8002d58:	88f8      	ldrh	r0, [r7, #6]
 8002d5a:	4622      	mov	r2, r4
 8002d5c:	f7ff fcd0 	bl	8002700 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002d60:	8c3b      	ldrh	r3, [r7, #32]
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	733b      	strb	r3, [r7, #12]
 8002d6a:	8c3b      	ldrh	r3, [r7, #32]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8002d70:	2201      	movs	r2, #1
 8002d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d76:	4812      	ldr	r0, [pc, #72]	; (8002dc0 <ILI9341_FillRectangle+0xd8>)
 8002d78:	f000 fe98 	bl	8003aac <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002d7c:	883b      	ldrh	r3, [r7, #0]
 8002d7e:	80bb      	strh	r3, [r7, #4]
 8002d80:	e013      	b.n	8002daa <ILI9341_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 8002d82:	887b      	ldrh	r3, [r7, #2]
 8002d84:	80fb      	strh	r3, [r7, #6]
 8002d86:	e00a      	b.n	8002d9e <ILI9341_FillRectangle+0xb6>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002d88:	f107 010c 	add.w	r1, r7, #12
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d90:	2202      	movs	r2, #2
 8002d92:	480c      	ldr	r0, [pc, #48]	; (8002dc4 <ILI9341_FillRectangle+0xdc>)
 8002d94:	f002 f87c 	bl	8004e90 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	80fb      	strh	r3, [r7, #6]
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f1      	bne.n	8002d88 <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8002da4:	88bb      	ldrh	r3, [r7, #4]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	80bb      	strh	r3, [r7, #4]
 8002daa:	88bb      	ldrh	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e8      	bne.n	8002d82 <ILI9341_FillRectangle+0x9a>
        }
    }

    ILI9341_Unselect();
 8002db0:	f7ff fc3c 	bl	800262c <ILI9341_Unselect>
 8002db4:	e000      	b.n	8002db8 <ILI9341_FillRectangle+0xd0>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8002db6:	bf00      	nop
}
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd90      	pop	{r4, r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40020400 	.word	0x40020400
 8002dc4:	20000300 	.word	0x20000300

08002dc8 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	4603      	mov	r3, r0
 8002dd0:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	23f0      	movs	r3, #240	; 0xf0
 8002dd8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ddc:	2100      	movs	r1, #0
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7ff ff82 	bl	8002ce8 <ILI9341_FillRectangle>
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8002df0:	2201      	movs	r2, #1
 8002df2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002df6:	4802      	ldr	r0, [pc, #8]	; (8002e00 <ILI9341_TouchUnselect+0x14>)
 8002df8:	f000 fe58 	bl	8003aac <HAL_GPIO_WritePin>
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40020000 	.word	0x40020000

08002e04 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <Ringbuf_init+0x3c>)
 8002e0a:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <Ringbuf_init+0x40>)
 8002e0c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <Ringbuf_init+0x44>)
 8002e10:	4a0e      	ldr	r2, [pc, #56]	; (8002e4c <Ringbuf_init+0x48>)
 8002e12:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002e14:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <Ringbuf_init+0x4c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <Ringbuf_init+0x4c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <Ringbuf_init+0x4c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <Ringbuf_init+0x4c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0220 	orr.w	r2, r2, #32
 8002e32:	60da      	str	r2, [r3, #12]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	2000051c 	.word	0x2000051c
 8002e44:	2000048c 	.word	0x2000048c
 8002e48:	20000520 	.word	0x20000520
 8002e4c:	200004d4 	.word	0x200004d4
 8002e50:	20000444 	.word	0x20000444

08002e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e58:	480d      	ldr	r0, [pc, #52]	; (8002e90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e5a:	490e      	ldr	r1, [pc, #56]	; (8002e94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e5c:	4a0e      	ldr	r2, [pc, #56]	; (8002e98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e60:	e002      	b.n	8002e68 <LoopCopyDataInit>

08002e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e66:	3304      	adds	r3, #4

08002e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e6c:	d3f9      	bcc.n	8002e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e6e:	4a0b      	ldr	r2, [pc, #44]	; (8002e9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e70:	4c0b      	ldr	r4, [pc, #44]	; (8002ea0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e74:	e001      	b.n	8002e7a <LoopFillZerobss>

08002e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e78:	3204      	adds	r2, #4

08002e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e7c:	d3fb      	bcc.n	8002e76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e7e:	f7ff fa11 	bl	80022a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e82:	f007 ff09 	bl	800ac98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e86:	f7fe fe69 	bl	8001b5c <main>
  bx  lr    
 8002e8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e94:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002e98:	08012468 	.word	0x08012468
  ldr r2, =_sbss
 8002e9c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002ea0:	20004f48 	.word	0x20004f48

08002ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ea4:	e7fe      	b.n	8002ea4 <ADC_IRQHandler>
	...

08002ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eac:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <HAL_Init+0x40>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ee8 <HAL_Init+0x40>)
 8002eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_Init+0x40>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <HAL_Init+0x40>)
 8002ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ec4:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <HAL_Init+0x40>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <HAL_Init+0x40>)
 8002eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed0:	2003      	movs	r0, #3
 8002ed2:	f000 f921 	bl	8003118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ed6:	2005      	movs	r0, #5
 8002ed8:	f7ff f854 	bl	8001f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002edc:	f7ff f81e 	bl	8001f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023c00 	.word	0x40023c00

08002eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_IncTick+0x20>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_IncTick+0x24>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <HAL_IncTick+0x24>)
 8002efe:	6013      	str	r3, [r2, #0]
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000030 	.word	0x20000030
 8002f10:	20000524 	.word	0x20000524

08002f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return uwTick;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_GetTick+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000524 	.word	0x20000524

08002f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7ff ffee 	bl	8002f14 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d005      	beq.n	8002f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_Delay+0x44>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4413      	add	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f52:	bf00      	nop
 8002f54:	f7ff ffde 	bl	8002f14 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d8f7      	bhi.n	8002f54 <HAL_Delay+0x28>
  {
  }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000030 	.word	0x20000030

08002f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db0b      	blt.n	8003002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4907      	ldr	r1, [pc, #28]	; (8003010 <__NVIC_EnableIRQ+0x38>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000e100 	.word	0xe000e100

08003014 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	2b00      	cmp	r3, #0
 8003024:	db12      	blt.n	800304c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	f003 021f 	and.w	r2, r3, #31
 800302c:	490a      	ldr	r1, [pc, #40]	; (8003058 <__NVIC_DisableIRQ+0x44>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2001      	movs	r0, #1
 8003036:	fa00 f202 	lsl.w	r2, r0, r2
 800303a:	3320      	adds	r3, #32
 800303c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003040:	f3bf 8f4f 	dsb	sy
}
 8003044:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003046:	f3bf 8f6f 	isb	sy
}
 800304a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000e100 	.word	0xe000e100

0800305c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	6039      	str	r1, [r7, #0]
 8003066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	2b00      	cmp	r3, #0
 800306e:	db0a      	blt.n	8003086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	490c      	ldr	r1, [pc, #48]	; (80030a8 <__NVIC_SetPriority+0x4c>)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	440b      	add	r3, r1
 8003080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003084:	e00a      	b.n	800309c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4908      	ldr	r1, [pc, #32]	; (80030ac <__NVIC_SetPriority+0x50>)
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	3b04      	subs	r3, #4
 8003094:	0112      	lsls	r2, r2, #4
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	440b      	add	r3, r1
 800309a:	761a      	strb	r2, [r3, #24]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000e100 	.word	0xe000e100
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f1c3 0307 	rsb	r3, r3, #7
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	bf28      	it	cs
 80030ce:	2304      	movcs	r3, #4
 80030d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3304      	adds	r3, #4
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d902      	bls.n	80030e0 <NVIC_EncodePriority+0x30>
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3b03      	subs	r3, #3
 80030de:	e000      	b.n	80030e2 <NVIC_EncodePriority+0x32>
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	f04f 32ff 	mov.w	r2, #4294967295
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	401a      	ands	r2, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f8:	f04f 31ff 	mov.w	r1, #4294967295
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	43d9      	mvns	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	4313      	orrs	r3, r2
         );
}
 800310a:	4618      	mov	r0, r3
 800310c:	3724      	adds	r7, #36	; 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b07      	cmp	r3, #7
 8003124:	d00f      	beq.n	8003146 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b06      	cmp	r3, #6
 800312a:	d00c      	beq.n	8003146 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b05      	cmp	r3, #5
 8003130:	d009      	beq.n	8003146 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d006      	beq.n	8003146 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d003      	beq.n	8003146 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800313e:	2190      	movs	r1, #144	; 0x90
 8003140:	4804      	ldr	r0, [pc, #16]	; (8003154 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003142:	f7fe fdb8 	bl	8001cb6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff ff14 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	08010698 	.word	0x08010698

08003158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b0f      	cmp	r3, #15
 800316e:	d903      	bls.n	8003178 <HAL_NVIC_SetPriority+0x20>
 8003170:	21a8      	movs	r1, #168	; 0xa8
 8003172:	480e      	ldr	r0, [pc, #56]	; (80031ac <HAL_NVIC_SetPriority+0x54>)
 8003174:	f7fe fd9f 	bl	8001cb6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b0f      	cmp	r3, #15
 800317c:	d903      	bls.n	8003186 <HAL_NVIC_SetPriority+0x2e>
 800317e:	21a9      	movs	r1, #169	; 0xa9
 8003180:	480a      	ldr	r0, [pc, #40]	; (80031ac <HAL_NVIC_SetPriority+0x54>)
 8003182:	f7fe fd98 	bl	8001cb6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003186:	f7ff ff19 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 800318a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	6978      	ldr	r0, [r7, #20]
 8003192:	f7ff ff8d 	bl	80030b0 <NVIC_EncodePriority>
 8003196:	4602      	mov	r2, r0
 8003198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff5c 	bl	800305c <__NVIC_SetPriority>
}
 80031a4:	bf00      	nop
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	08010698 	.word	0x08010698

080031b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	da03      	bge.n	80031ca <HAL_NVIC_EnableIRQ+0x1a>
 80031c2:	21bc      	movs	r1, #188	; 0xbc
 80031c4:	4805      	ldr	r0, [pc, #20]	; (80031dc <HAL_NVIC_EnableIRQ+0x2c>)
 80031c6:	f7fe fd76 	bl	8001cb6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff02 	bl	8002fd8 <__NVIC_EnableIRQ>
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	08010698 	.word	0x08010698

080031e0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	da03      	bge.n	80031fa <HAL_NVIC_DisableIRQ+0x1a>
 80031f2:	21cc      	movs	r1, #204	; 0xcc
 80031f4:	4805      	ldr	r0, [pc, #20]	; (800320c <HAL_NVIC_DisableIRQ+0x2c>)
 80031f6:	f7fe fd5e 	bl	8001cb6 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff ff08 	bl	8003014 <__NVIC_DisableIRQ>
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	08010698 	.word	0x08010698

08003210 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800321e:	f7ff fe79 	bl	8002f14 <HAL_GetTick>
 8003222:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d008      	beq.n	8003242 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2280      	movs	r2, #128	; 0x80
 8003234:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e052      	b.n	80032e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0216 	bic.w	r2, r2, #22
 8003250:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003260:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_DMA_Abort+0x62>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0208 	bic.w	r2, r2, #8
 8003280:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003292:	e013      	b.n	80032bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003294:	f7ff fe3e 	bl	8002f14 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b05      	cmp	r3, #5
 80032a0:	d90c      	bls.n	80032bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2203      	movs	r2, #3
 80032ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e015      	b.n	80032e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e4      	bne.n	8003294 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	223f      	movs	r2, #63	; 0x3f
 80032d0:	409a      	lsls	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d004      	beq.n	800330e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2280      	movs	r2, #128	; 0x80
 8003308:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00c      	b.n	8003328 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2205      	movs	r2, #5
 8003312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a33      	ldr	r2, [pc, #204]	; (800341c <HAL_GPIO_Init+0xe8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d017      	beq.n	8003382 <HAL_GPIO_Init+0x4e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a32      	ldr	r2, [pc, #200]	; (8003420 <HAL_GPIO_Init+0xec>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <HAL_GPIO_Init+0x4e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a31      	ldr	r2, [pc, #196]	; (8003424 <HAL_GPIO_Init+0xf0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00f      	beq.n	8003382 <HAL_GPIO_Init+0x4e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a30      	ldr	r2, [pc, #192]	; (8003428 <HAL_GPIO_Init+0xf4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00b      	beq.n	8003382 <HAL_GPIO_Init+0x4e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a2f      	ldr	r2, [pc, #188]	; (800342c <HAL_GPIO_Init+0xf8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d007      	beq.n	8003382 <HAL_GPIO_Init+0x4e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a2e      	ldr	r2, [pc, #184]	; (8003430 <HAL_GPIO_Init+0xfc>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_Init+0x4e>
 800337a:	21ac      	movs	r1, #172	; 0xac
 800337c:	482d      	ldr	r0, [pc, #180]	; (8003434 <HAL_GPIO_Init+0x100>)
 800337e:	f7fe fc9a 	bl	8001cb6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_GPIO_Init+0x64>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	041b      	lsls	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_GPIO_Init+0x6c>
 8003398:	21ad      	movs	r1, #173	; 0xad
 800339a:	4826      	ldr	r0, [pc, #152]	; (8003434 <HAL_GPIO_Init+0x100>)
 800339c:	f7fe fc8b 	bl	8001cb6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d035      	beq.n	8003414 <HAL_GPIO_Init+0xe0>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d031      	beq.n	8003414 <HAL_GPIO_Init+0xe0>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b11      	cmp	r3, #17
 80033b6:	d02d      	beq.n	8003414 <HAL_GPIO_Init+0xe0>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d029      	beq.n	8003414 <HAL_GPIO_Init+0xe0>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b12      	cmp	r3, #18
 80033c6:	d025      	beq.n	8003414 <HAL_GPIO_Init+0xe0>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80033d0:	d020      	beq.n	8003414 <HAL_GPIO_Init+0xe0>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80033da:	d01b      	beq.n	8003414 <HAL_GPIO_Init+0xe0>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80033e4:	d016      	beq.n	8003414 <HAL_GPIO_Init+0xe0>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80033ee:	d011      	beq.n	8003414 <HAL_GPIO_Init+0xe0>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80033f8:	d00c      	beq.n	8003414 <HAL_GPIO_Init+0xe0>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003402:	d007      	beq.n	8003414 <HAL_GPIO_Init+0xe0>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0xe0>
 800340c:	21ae      	movs	r1, #174	; 0xae
 800340e:	4809      	ldr	r0, [pc, #36]	; (8003434 <HAL_GPIO_Init+0x100>)
 8003410:	f7fe fc51 	bl	8001cb6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	e206      	b.n	8003828 <HAL_GPIO_Init+0x4f4>
 800341a:	bf00      	nop
 800341c:	40020000 	.word	0x40020000
 8003420:	40020400 	.word	0x40020400
 8003424:	40020800 	.word	0x40020800
 8003428:	40020c00 	.word	0x40020c00
 800342c:	40021000 	.word	0x40021000
 8003430:	40021c00 	.word	0x40021c00
 8003434:	0801070c 	.word	0x0801070c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003438:	2201      	movs	r2, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	429a      	cmp	r2, r3
 8003452:	f040 81e6 	bne.w	8003822 <HAL_GPIO_Init+0x4ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d005      	beq.n	800346e <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346a:	2b02      	cmp	r3, #2
 800346c:	d144      	bne.n	80034f8 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00f      	beq.n	8003496 <HAL_GPIO_Init+0x162>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d00b      	beq.n	8003496 <HAL_GPIO_Init+0x162>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d007      	beq.n	8003496 <HAL_GPIO_Init+0x162>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2b03      	cmp	r3, #3
 800348c:	d003      	beq.n	8003496 <HAL_GPIO_Init+0x162>
 800348e:	21c0      	movs	r1, #192	; 0xc0
 8003490:	4894      	ldr	r0, [pc, #592]	; (80036e4 <HAL_GPIO_Init+0x3b0>)
 8003492:	f7fe fc10 	bl	8001cb6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	2203      	movs	r2, #3
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4013      	ands	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034cc:	2201      	movs	r2, #1
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 0201 	and.w	r2, r3, #1
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b03      	cmp	r3, #3
 8003502:	d027      	beq.n	8003554 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <HAL_GPIO_Init+0x1f0>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d007      	beq.n	8003524 <HAL_GPIO_Init+0x1f0>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x1f0>
 800351c:	21d1      	movs	r1, #209	; 0xd1
 800351e:	4871      	ldr	r0, [pc, #452]	; (80036e4 <HAL_GPIO_Init+0x3b0>)
 8003520:	f7fe fbc9 	bl	8001cb6 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	2203      	movs	r2, #3
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	2b02      	cmp	r3, #2
 800355e:	f040 8098 	bne.w	8003692 <HAL_GPIO_Init+0x35e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d06f      	beq.n	800364a <HAL_GPIO_Init+0x316>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d06b      	beq.n	800364a <HAL_GPIO_Init+0x316>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d067      	beq.n	800364a <HAL_GPIO_Init+0x316>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d063      	beq.n	800364a <HAL_GPIO_Init+0x316>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d05f      	beq.n	800364a <HAL_GPIO_Init+0x316>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d05b      	beq.n	800364a <HAL_GPIO_Init+0x316>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d057      	beq.n	800364a <HAL_GPIO_Init+0x316>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d053      	beq.n	800364a <HAL_GPIO_Init+0x316>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d04f      	beq.n	800364a <HAL_GPIO_Init+0x316>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d04b      	beq.n	800364a <HAL_GPIO_Init+0x316>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d047      	beq.n	800364a <HAL_GPIO_Init+0x316>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d043      	beq.n	800364a <HAL_GPIO_Init+0x316>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d03f      	beq.n	800364a <HAL_GPIO_Init+0x316>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d03b      	beq.n	800364a <HAL_GPIO_Init+0x316>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d037      	beq.n	800364a <HAL_GPIO_Init+0x316>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d033      	beq.n	800364a <HAL_GPIO_Init+0x316>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d02f      	beq.n	800364a <HAL_GPIO_Init+0x316>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	d02b      	beq.n	800364a <HAL_GPIO_Init+0x316>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d027      	beq.n	800364a <HAL_GPIO_Init+0x316>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b05      	cmp	r3, #5
 8003600:	d023      	beq.n	800364a <HAL_GPIO_Init+0x316>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b06      	cmp	r3, #6
 8003608:	d01f      	beq.n	800364a <HAL_GPIO_Init+0x316>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b07      	cmp	r3, #7
 8003610:	d01b      	beq.n	800364a <HAL_GPIO_Init+0x316>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b07      	cmp	r3, #7
 8003618:	d017      	beq.n	800364a <HAL_GPIO_Init+0x316>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b08      	cmp	r3, #8
 8003620:	d013      	beq.n	800364a <HAL_GPIO_Init+0x316>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b09      	cmp	r3, #9
 8003628:	d00f      	beq.n	800364a <HAL_GPIO_Init+0x316>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b09      	cmp	r3, #9
 8003630:	d00b      	beq.n	800364a <HAL_GPIO_Init+0x316>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b0a      	cmp	r3, #10
 8003638:	d007      	beq.n	800364a <HAL_GPIO_Init+0x316>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b0f      	cmp	r3, #15
 8003640:	d003      	beq.n	800364a <HAL_GPIO_Init+0x316>
 8003642:	21de      	movs	r1, #222	; 0xde
 8003644:	4827      	ldr	r0, [pc, #156]	; (80036e4 <HAL_GPIO_Init+0x3b0>)
 8003646:	f7fe fb36 	bl	8001cb6 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	08da      	lsrs	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3208      	adds	r2, #8
 8003652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	220f      	movs	r2, #15
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	08da      	lsrs	r2, r3, #3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3208      	adds	r2, #8
 800368c:	69b9      	ldr	r1, [r7, #24]
 800368e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	2203      	movs	r2, #3
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 0203 	and.w	r2, r3, #3
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 80a7 	beq.w	8003822 <HAL_GPIO_Init+0x4ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_GPIO_Init+0x3b4>)
 80036da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036dc:	4a02      	ldr	r2, [pc, #8]	; (80036e8 <HAL_GPIO_Init+0x3b4>)
 80036de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036e2:	e003      	b.n	80036ec <HAL_GPIO_Init+0x3b8>
 80036e4:	0801070c 	.word	0x0801070c
 80036e8:	40023800 	.word	0x40023800
 80036ec:	6453      	str	r3, [r2, #68]	; 0x44
 80036ee:	4b53      	ldr	r3, [pc, #332]	; (800383c <HAL_GPIO_Init+0x508>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036fa:	4a51      	ldr	r2, [pc, #324]	; (8003840 <HAL_GPIO_Init+0x50c>)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	089b      	lsrs	r3, r3, #2
 8003700:	3302      	adds	r3, #2
 8003702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	220f      	movs	r2, #15
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a48      	ldr	r2, [pc, #288]	; (8003844 <HAL_GPIO_Init+0x510>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d019      	beq.n	800375a <HAL_GPIO_Init+0x426>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a47      	ldr	r2, [pc, #284]	; (8003848 <HAL_GPIO_Init+0x514>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <HAL_GPIO_Init+0x422>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a46      	ldr	r2, [pc, #280]	; (800384c <HAL_GPIO_Init+0x518>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00d      	beq.n	8003752 <HAL_GPIO_Init+0x41e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a45      	ldr	r2, [pc, #276]	; (8003850 <HAL_GPIO_Init+0x51c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d007      	beq.n	800374e <HAL_GPIO_Init+0x41a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a44      	ldr	r2, [pc, #272]	; (8003854 <HAL_GPIO_Init+0x520>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_GPIO_Init+0x416>
 8003746:	2304      	movs	r3, #4
 8003748:	e008      	b.n	800375c <HAL_GPIO_Init+0x428>
 800374a:	2307      	movs	r3, #7
 800374c:	e006      	b.n	800375c <HAL_GPIO_Init+0x428>
 800374e:	2303      	movs	r3, #3
 8003750:	e004      	b.n	800375c <HAL_GPIO_Init+0x428>
 8003752:	2302      	movs	r3, #2
 8003754:	e002      	b.n	800375c <HAL_GPIO_Init+0x428>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_GPIO_Init+0x428>
 800375a:	2300      	movs	r3, #0
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	f002 0203 	and.w	r2, r2, #3
 8003762:	0092      	lsls	r2, r2, #2
 8003764:	4093      	lsls	r3, r2
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4313      	orrs	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800376c:	4934      	ldr	r1, [pc, #208]	; (8003840 <HAL_GPIO_Init+0x50c>)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	3302      	adds	r3, #2
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800377a:	4b37      	ldr	r3, [pc, #220]	; (8003858 <HAL_GPIO_Init+0x524>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x46a>
        {
          temp |= iocurrent;
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800379e:	4a2e      	ldr	r2, [pc, #184]	; (8003858 <HAL_GPIO_Init+0x524>)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037a4:	4b2c      	ldr	r3, [pc, #176]	; (8003858 <HAL_GPIO_Init+0x524>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x494>
        {
          temp |= iocurrent;
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037c8:	4a23      	ldr	r2, [pc, #140]	; (8003858 <HAL_GPIO_Init+0x524>)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037ce:	4b22      	ldr	r3, [pc, #136]	; (8003858 <HAL_GPIO_Init+0x524>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x4be>
        {
          temp |= iocurrent;
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037f2:	4a19      	ldr	r2, [pc, #100]	; (8003858 <HAL_GPIO_Init+0x524>)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037f8:	4b17      	ldr	r3, [pc, #92]	; (8003858 <HAL_GPIO_Init+0x524>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x4e8>
        {
          temp |= iocurrent;
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800381c:	4a0e      	ldr	r2, [pc, #56]	; (8003858 <HAL_GPIO_Init+0x524>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3301      	adds	r3, #1
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	2b0f      	cmp	r3, #15
 800382c:	f67f ae04 	bls.w	8003438 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800
 8003840:	40013800 	.word	0x40013800
 8003844:	40020000 	.word	0x40020000
 8003848:	40020400 	.word	0x40020400
 800384c:	40020800 	.word	0x40020800
 8003850:	40020c00 	.word	0x40020c00
 8003854:	40021000 	.word	0x40021000
 8003858:	40013c00 	.word	0x40013c00

0800385c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a71      	ldr	r2, [pc, #452]	; (8003a3c <HAL_GPIO_DeInit+0x1e0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d018      	beq.n	80038ac <HAL_GPIO_DeInit+0x50>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a70      	ldr	r2, [pc, #448]	; (8003a40 <HAL_GPIO_DeInit+0x1e4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d014      	beq.n	80038ac <HAL_GPIO_DeInit+0x50>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a6f      	ldr	r2, [pc, #444]	; (8003a44 <HAL_GPIO_DeInit+0x1e8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d010      	beq.n	80038ac <HAL_GPIO_DeInit+0x50>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a6e      	ldr	r2, [pc, #440]	; (8003a48 <HAL_GPIO_DeInit+0x1ec>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00c      	beq.n	80038ac <HAL_GPIO_DeInit+0x50>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a6d      	ldr	r2, [pc, #436]	; (8003a4c <HAL_GPIO_DeInit+0x1f0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d008      	beq.n	80038ac <HAL_GPIO_DeInit+0x50>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a6c      	ldr	r2, [pc, #432]	; (8003a50 <HAL_GPIO_DeInit+0x1f4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_GPIO_DeInit+0x50>
 80038a2:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80038a6:	486b      	ldr	r0, [pc, #428]	; (8003a54 <HAL_GPIO_DeInit+0x1f8>)
 80038a8:	f7fe fa05 	bl	8001cb6 <assert_failed>
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	e0bb      	b.n	8003a2a <HAL_GPIO_DeInit+0x1ce>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038b2:	2201      	movs	r2, #1
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4013      	ands	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	f040 80ab 	bne.w	8003a24 <HAL_GPIO_DeInit+0x1c8>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80038ce:	4a62      	ldr	r2, [pc, #392]	; (8003a58 <HAL_GPIO_DeInit+0x1fc>)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	089b      	lsrs	r3, r3, #2
 80038d4:	3302      	adds	r3, #2
 80038d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038da:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	220f      	movs	r2, #15
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	4013      	ands	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a52      	ldr	r2, [pc, #328]	; (8003a3c <HAL_GPIO_DeInit+0x1e0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d019      	beq.n	800392c <HAL_GPIO_DeInit+0xd0>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a51      	ldr	r2, [pc, #324]	; (8003a40 <HAL_GPIO_DeInit+0x1e4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <HAL_GPIO_DeInit+0xcc>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a50      	ldr	r2, [pc, #320]	; (8003a44 <HAL_GPIO_DeInit+0x1e8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00d      	beq.n	8003924 <HAL_GPIO_DeInit+0xc8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a4f      	ldr	r2, [pc, #316]	; (8003a48 <HAL_GPIO_DeInit+0x1ec>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <HAL_GPIO_DeInit+0xc4>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a4e      	ldr	r2, [pc, #312]	; (8003a4c <HAL_GPIO_DeInit+0x1f0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_GPIO_DeInit+0xc0>
 8003918:	2304      	movs	r3, #4
 800391a:	e008      	b.n	800392e <HAL_GPIO_DeInit+0xd2>
 800391c:	2307      	movs	r3, #7
 800391e:	e006      	b.n	800392e <HAL_GPIO_DeInit+0xd2>
 8003920:	2303      	movs	r3, #3
 8003922:	e004      	b.n	800392e <HAL_GPIO_DeInit+0xd2>
 8003924:	2302      	movs	r3, #2
 8003926:	e002      	b.n	800392e <HAL_GPIO_DeInit+0xd2>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <HAL_GPIO_DeInit+0xd2>
 800392c:	2300      	movs	r3, #0
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	f002 0203 	and.w	r2, r2, #3
 8003934:	0092      	lsls	r2, r2, #2
 8003936:	4093      	lsls	r3, r2
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	429a      	cmp	r2, r3
 800393c:	d132      	bne.n	80039a4 <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800393e:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <HAL_GPIO_DeInit+0x200>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	43db      	mvns	r3, r3
 8003946:	4945      	ldr	r1, [pc, #276]	; (8003a5c <HAL_GPIO_DeInit+0x200>)
 8003948:	4013      	ands	r3, r2
 800394a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800394c:	4b43      	ldr	r3, [pc, #268]	; (8003a5c <HAL_GPIO_DeInit+0x200>)
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	43db      	mvns	r3, r3
 8003954:	4941      	ldr	r1, [pc, #260]	; (8003a5c <HAL_GPIO_DeInit+0x200>)
 8003956:	4013      	ands	r3, r2
 8003958:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800395a:	4b40      	ldr	r3, [pc, #256]	; (8003a5c <HAL_GPIO_DeInit+0x200>)
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	43db      	mvns	r3, r3
 8003962:	493e      	ldr	r1, [pc, #248]	; (8003a5c <HAL_GPIO_DeInit+0x200>)
 8003964:	4013      	ands	r3, r2
 8003966:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003968:	4b3c      	ldr	r3, [pc, #240]	; (8003a5c <HAL_GPIO_DeInit+0x200>)
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	43db      	mvns	r3, r3
 8003970:	493a      	ldr	r1, [pc, #232]	; (8003a5c <HAL_GPIO_DeInit+0x200>)
 8003972:	4013      	ands	r3, r2
 8003974:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	220f      	movs	r2, #15
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003986:	4a34      	ldr	r2, [pc, #208]	; (8003a58 <HAL_GPIO_DeInit+0x1fc>)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	089b      	lsrs	r3, r3, #2
 800398c:	3302      	adds	r3, #2
 800398e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	43da      	mvns	r2, r3
 8003996:	4830      	ldr	r0, [pc, #192]	; (8003a58 <HAL_GPIO_DeInit+0x1fc>)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	400a      	ands	r2, r1
 800399e:	3302      	adds	r3, #2
 80039a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	2103      	movs	r1, #3
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	401a      	ands	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	08da      	lsrs	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3208      	adds	r2, #8
 80039c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	220f      	movs	r2, #15
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	08d2      	lsrs	r2, r2, #3
 80039da:	4019      	ands	r1, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3208      	adds	r2, #8
 80039e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	2103      	movs	r1, #3
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	401a      	ands	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	2101      	movs	r1, #1
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	fa01 f303 	lsl.w	r3, r1, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	401a      	ands	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2103      	movs	r1, #3
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3301      	adds	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b0f      	cmp	r3, #15
 8003a2e:	f67f af40 	bls.w	80038b2 <HAL_GPIO_DeInit+0x56>
    }
  }
}
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40020000 	.word	0x40020000
 8003a40:	40020400 	.word	0x40020400
 8003a44:	40020800 	.word	0x40020800
 8003a48:	40020c00 	.word	0x40020c00
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	40021c00 	.word	0x40021c00
 8003a54:	0801070c 	.word	0x0801070c
 8003a58:	40013800 	.word	0x40013800
 8003a5c:	40013c00 	.word	0x40013c00

08003a60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003a6c:	887b      	ldrh	r3, [r7, #2]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <HAL_GPIO_ReadPin+0x1c>
 8003a72:	887b      	ldrh	r3, [r7, #2]
 8003a74:	0c1b      	lsrs	r3, r3, #16
 8003a76:	041b      	lsls	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d004      	beq.n	8003a86 <HAL_GPIO_ReadPin+0x26>
 8003a7c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8003a80:	4809      	ldr	r0, [pc, #36]	; (8003aa8 <HAL_GPIO_ReadPin+0x48>)
 8003a82:	f7fe f918 	bl	8001cb6 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	887b      	ldrh	r3, [r7, #2]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8003a92:	2301      	movs	r3, #1
 8003a94:	73fb      	strb	r3, [r7, #15]
 8003a96:	e001      	b.n	8003a9c <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	0801070c 	.word	0x0801070c

08003aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	807b      	strh	r3, [r7, #2]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003abc:	887b      	ldrh	r3, [r7, #2]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d004      	beq.n	8003acc <HAL_GPIO_WritePin+0x20>
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d004      	beq.n	8003ad6 <HAL_GPIO_WritePin+0x2a>
 8003acc:	f240 119d 	movw	r1, #413	; 0x19d
 8003ad0:	480e      	ldr	r0, [pc, #56]	; (8003b0c <HAL_GPIO_WritePin+0x60>)
 8003ad2:	f7fe f8f0 	bl	8001cb6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003ad6:	787b      	ldrb	r3, [r7, #1]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d007      	beq.n	8003aec <HAL_GPIO_WritePin+0x40>
 8003adc:	787b      	ldrb	r3, [r7, #1]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d004      	beq.n	8003aec <HAL_GPIO_WritePin+0x40>
 8003ae2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003ae6:	4809      	ldr	r0, [pc, #36]	; (8003b0c <HAL_GPIO_WritePin+0x60>)
 8003ae8:	f7fe f8e5 	bl	8001cb6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003aec:	787b      	ldrb	r3, [r7, #1]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003af2:	887a      	ldrh	r2, [r7, #2]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003af8:	e003      	b.n	8003b02 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003afa:	887b      	ldrh	r3, [r7, #2]
 8003afc:	041a      	lsls	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	619a      	str	r2, [r3, #24]
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	0801070c 	.word	0x0801070c

08003b10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b1a:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b1c:	695a      	ldr	r2, [r3, #20]
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d006      	beq.n	8003b34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b26:	4a05      	ldr	r2, [pc, #20]	; (8003b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fe40 	bl	80017b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40013c00 	.word	0x40013c00

08003b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e1bd      	b.n	8003ece <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a93      	ldr	r2, [pc, #588]	; (8003da4 <HAL_I2C_Init+0x264>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00e      	beq.n	8003b7a <HAL_I2C_Init+0x3a>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a91      	ldr	r2, [pc, #580]	; (8003da8 <HAL_I2C_Init+0x268>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d009      	beq.n	8003b7a <HAL_I2C_Init+0x3a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a90      	ldr	r2, [pc, #576]	; (8003dac <HAL_I2C_Init+0x26c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d004      	beq.n	8003b7a <HAL_I2C_Init+0x3a>
 8003b70:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8003b74:	488e      	ldr	r0, [pc, #568]	; (8003db0 <HAL_I2C_Init+0x270>)
 8003b76:	f7fe f89e 	bl	8001cb6 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d004      	beq.n	8003b8c <HAL_I2C_Init+0x4c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4a8b      	ldr	r2, [pc, #556]	; (8003db4 <HAL_I2C_Init+0x274>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d904      	bls.n	8003b96 <HAL_I2C_Init+0x56>
 8003b8c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003b90:	4887      	ldr	r0, [pc, #540]	; (8003db0 <HAL_I2C_Init+0x270>)
 8003b92:	f7fe f890 	bl	8001cb6 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <HAL_I2C_Init+0x72>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba6:	d004      	beq.n	8003bb2 <HAL_I2C_Init+0x72>
 8003ba8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003bac:	4880      	ldr	r0, [pc, #512]	; (8003db0 <HAL_I2C_Init+0x270>)
 8003bae:	f7fe f882 	bl	8001cb6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bba:	f023 0303 	bic.w	r3, r3, #3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <HAL_I2C_Init+0x8c>
 8003bc2:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003bc6:	487a      	ldr	r0, [pc, #488]	; (8003db0 <HAL_I2C_Init+0x270>)
 8003bc8:	f7fe f875 	bl	8001cb6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bd4:	d009      	beq.n	8003bea <HAL_I2C_Init+0xaa>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bde:	d004      	beq.n	8003bea <HAL_I2C_Init+0xaa>
 8003be0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003be4:	4872      	ldr	r0, [pc, #456]	; (8003db0 <HAL_I2C_Init+0x270>)
 8003be6:	f7fe f866 	bl	8001cb6 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_I2C_Init+0xc4>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d004      	beq.n	8003c04 <HAL_I2C_Init+0xc4>
 8003bfa:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003bfe:	486c      	ldr	r0, [pc, #432]	; (8003db0 <HAL_I2C_Init+0x270>)
 8003c00:	f7fe f859 	bl	8001cb6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d004      	beq.n	8003c1a <HAL_I2C_Init+0xda>
 8003c10:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003c14:	4866      	ldr	r0, [pc, #408]	; (8003db0 <HAL_I2C_Init+0x270>)
 8003c16:	f7fe f84e 	bl	8001cb6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d008      	beq.n	8003c34 <HAL_I2C_Init+0xf4>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	2b40      	cmp	r3, #64	; 0x40
 8003c28:	d004      	beq.n	8003c34 <HAL_I2C_Init+0xf4>
 8003c2a:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003c2e:	4860      	ldr	r0, [pc, #384]	; (8003db0 <HAL_I2C_Init+0x270>)
 8003c30:	f7fe f841 	bl	8001cb6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_I2C_Init+0x10e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	2b80      	cmp	r3, #128	; 0x80
 8003c42:	d004      	beq.n	8003c4e <HAL_I2C_Init+0x10e>
 8003c44:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003c48:	4859      	ldr	r0, [pc, #356]	; (8003db0 <HAL_I2C_Init+0x270>)
 8003c4a:	f7fe f834 	bl	8001cb6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fd ff22 	bl	8001aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2224      	movs	r2, #36	; 0x24
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ca0:	f000 febc 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 8003ca4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4a43      	ldr	r2, [pc, #268]	; (8003db8 <HAL_I2C_Init+0x278>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d807      	bhi.n	8003cc0 <HAL_I2C_Init+0x180>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4a42      	ldr	r2, [pc, #264]	; (8003dbc <HAL_I2C_Init+0x27c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	bf94      	ite	ls
 8003cb8:	2301      	movls	r3, #1
 8003cba:	2300      	movhi	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	e006      	b.n	8003cce <HAL_I2C_Init+0x18e>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4a3f      	ldr	r2, [pc, #252]	; (8003dc0 <HAL_I2C_Init+0x280>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	bf94      	ite	ls
 8003cc8:	2301      	movls	r3, #1
 8003cca:	2300      	movhi	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e0fb      	b.n	8003ece <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4a3a      	ldr	r2, [pc, #232]	; (8003dc4 <HAL_I2C_Init+0x284>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	0c9b      	lsrs	r3, r3, #18
 8003ce0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	4a2c      	ldr	r2, [pc, #176]	; (8003db8 <HAL_I2C_Init+0x278>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d802      	bhi.n	8003d10 <HAL_I2C_Init+0x1d0>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	e009      	b.n	8003d24 <HAL_I2C_Init+0x1e4>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	4a2b      	ldr	r2, [pc, #172]	; (8003dc8 <HAL_I2C_Init+0x288>)
 8003d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d20:	099b      	lsrs	r3, r3, #6
 8003d22:	3301      	adds	r3, #1
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	491e      	ldr	r1, [pc, #120]	; (8003db8 <HAL_I2C_Init+0x278>)
 8003d40:	428b      	cmp	r3, r1
 8003d42:	d819      	bhi.n	8003d78 <HAL_I2C_Init+0x238>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1e59      	subs	r1, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d52:	1c59      	adds	r1, r3, #1
 8003d54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d58:	400b      	ands	r3, r1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_I2C_Init+0x234>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	1e59      	subs	r1, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d72:	e065      	b.n	8003e40 <HAL_I2C_Init+0x300>
 8003d74:	2304      	movs	r3, #4
 8003d76:	e063      	b.n	8003e40 <HAL_I2C_Init+0x300>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d125      	bne.n	8003dcc <HAL_I2C_Init+0x28c>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	1e58      	subs	r0, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6859      	ldr	r1, [r3, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	440b      	add	r3, r1
 8003d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d92:	3301      	adds	r3, #1
 8003d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	e026      	b.n	8003df2 <HAL_I2C_Init+0x2b2>
 8003da4:	40005400 	.word	0x40005400
 8003da8:	40005800 	.word	0x40005800
 8003dac:	40005c00 	.word	0x40005c00
 8003db0:	08010780 	.word	0x08010780
 8003db4:	00061a80 	.word	0x00061a80
 8003db8:	000186a0 	.word	0x000186a0
 8003dbc:	001e847f 	.word	0x001e847f
 8003dc0:	003d08ff 	.word	0x003d08ff
 8003dc4:	431bde83 	.word	0x431bde83
 8003dc8:	10624dd3 	.word	0x10624dd3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1e58      	subs	r0, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6859      	ldr	r1, [r3, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	0099      	lsls	r1, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de2:	3301      	adds	r3, #1
 8003de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Init+0x2ba>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e022      	b.n	8003e40 <HAL_I2C_Init+0x300>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10e      	bne.n	8003e20 <HAL_I2C_Init+0x2e0>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1e58      	subs	r0, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	440b      	add	r3, r1
 8003e10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e14:	3301      	adds	r3, #1
 8003e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1e:	e00f      	b.n	8003e40 <HAL_I2C_Init+0x300>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	1e58      	subs	r0, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6859      	ldr	r1, [r3, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	0099      	lsls	r1, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e36:	3301      	adds	r3, #1
 8003e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	6809      	ldr	r1, [r1, #0]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69da      	ldr	r2, [r3, #28]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6911      	ldr	r1, [r2, #16]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68d2      	ldr	r2, [r2, #12]
 8003e7a:	4311      	orrs	r1, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop

08003ed8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003ee8:	f000 f808 	bl	8003efc <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003eec:	4b02      	ldr	r3, [pc, #8]	; (8003ef8 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003eee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ef2:	615a      	str	r2, [r3, #20]
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40013c00 	.word	0x40013c00

08003efc <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e314      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b0f      	cmp	r3, #15
 8003f24:	d903      	bls.n	8003f2e <HAL_RCC_OscConfig+0x22>
 8003f26:	21e6      	movs	r1, #230	; 0xe6
 8003f28:	4897      	ldr	r0, [pc, #604]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003f2a:	f7fd fec4 	bl	8001cb6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8088 	beq.w	800404c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00d      	beq.n	8003f60 <HAL_RCC_OscConfig+0x54>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4c:	d008      	beq.n	8003f60 <HAL_RCC_OscConfig+0x54>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f56:	d003      	beq.n	8003f60 <HAL_RCC_OscConfig+0x54>
 8003f58:	21eb      	movs	r1, #235	; 0xeb
 8003f5a:	488b      	ldr	r0, [pc, #556]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003f5c:	f7fd feab 	bl	8001cb6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f60:	4b8a      	ldr	r3, [pc, #552]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 030c 	and.w	r3, r3, #12
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d00c      	beq.n	8003f86 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6c:	4b87      	ldr	r3, [pc, #540]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d112      	bne.n	8003f9e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f78:	4b84      	ldr	r3, [pc, #528]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f84:	d10b      	bne.n	8003f9e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f86:	4b81      	ldr	r3, [pc, #516]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d05b      	beq.n	800404a <HAL_RCC_OscConfig+0x13e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d157      	bne.n	800404a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e2d4      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa6:	d106      	bne.n	8003fb6 <HAL_RCC_OscConfig+0xaa>
 8003fa8:	4b78      	ldr	r3, [pc, #480]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a77      	ldr	r2, [pc, #476]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	e01d      	b.n	8003ff2 <HAL_RCC_OscConfig+0xe6>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fbe:	d10c      	bne.n	8003fda <HAL_RCC_OscConfig+0xce>
 8003fc0:	4b72      	ldr	r3, [pc, #456]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a71      	ldr	r2, [pc, #452]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	4b6f      	ldr	r3, [pc, #444]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a6e      	ldr	r2, [pc, #440]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	e00b      	b.n	8003ff2 <HAL_RCC_OscConfig+0xe6>
 8003fda:	4b6c      	ldr	r3, [pc, #432]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a6b      	ldr	r2, [pc, #428]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	4b69      	ldr	r3, [pc, #420]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a68      	ldr	r2, [pc, #416]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d013      	beq.n	8004022 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffa:	f7fe ff8b 	bl	8002f14 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004002:	f7fe ff87 	bl	8002f14 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b64      	cmp	r3, #100	; 0x64
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e299      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004014:	4b5d      	ldr	r3, [pc, #372]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0xf6>
 8004020:	e014      	b.n	800404c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004022:	f7fe ff77 	bl	8002f14 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800402a:	f7fe ff73 	bl	8002f14 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b64      	cmp	r3, #100	; 0x64
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e285      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403c:	4b53      	ldr	r3, [pc, #332]	; (800418c <HAL_RCC_OscConfig+0x280>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f0      	bne.n	800402a <HAL_RCC_OscConfig+0x11e>
 8004048:	e000      	b.n	800404c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d079      	beq.n	800414c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_RCC_OscConfig+0x166>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d004      	beq.n	8004072 <HAL_RCC_OscConfig+0x166>
 8004068:	f240 111d 	movw	r1, #285	; 0x11d
 800406c:	4846      	ldr	r0, [pc, #280]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 800406e:	f7fd fe22 	bl	8001cb6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b1f      	cmp	r3, #31
 8004078:	d904      	bls.n	8004084 <HAL_RCC_OscConfig+0x178>
 800407a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800407e:	4842      	ldr	r0, [pc, #264]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8004080:	f7fd fe19 	bl	8001cb6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004084:	4b41      	ldr	r3, [pc, #260]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00b      	beq.n	80040a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004090:	4b3e      	ldr	r3, [pc, #248]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004098:	2b08      	cmp	r3, #8
 800409a:	d11c      	bne.n	80040d6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800409c:	4b3b      	ldr	r3, [pc, #236]	; (800418c <HAL_RCC_OscConfig+0x280>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d116      	bne.n	80040d6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a8:	4b38      	ldr	r3, [pc, #224]	; (800418c <HAL_RCC_OscConfig+0x280>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_OscConfig+0x1b4>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e243      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c0:	4b32      	ldr	r3, [pc, #200]	; (800418c <HAL_RCC_OscConfig+0x280>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	492f      	ldr	r1, [pc, #188]	; (800418c <HAL_RCC_OscConfig+0x280>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d4:	e03a      	b.n	800414c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d020      	beq.n	8004120 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040de:	4b2c      	ldr	r3, [pc, #176]	; (8004190 <HAL_RCC_OscConfig+0x284>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fe ff16 	bl	8002f14 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ec:	f7fe ff12 	bl	8002f14 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e224      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fe:	4b23      	ldr	r3, [pc, #140]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410a:	4b20      	ldr	r3, [pc, #128]	; (800418c <HAL_RCC_OscConfig+0x280>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	491c      	ldr	r1, [pc, #112]	; (800418c <HAL_RCC_OscConfig+0x280>)
 800411a:	4313      	orrs	r3, r2
 800411c:	600b      	str	r3, [r1, #0]
 800411e:	e015      	b.n	800414c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004120:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x284>)
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fe fef5 	bl	8002f14 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800412e:	f7fe fef1 	bl	8002f14 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e203      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004140:	4b12      	ldr	r3, [pc, #72]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f0      	bne.n	800412e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d045      	beq.n	80041e4 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCC_OscConfig+0x266>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d004      	beq.n	8004172 <HAL_RCC_OscConfig+0x266>
 8004168:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800416c:	4806      	ldr	r0, [pc, #24]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 800416e:	f7fd fda2 	bl	8001cb6 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01e      	beq.n	80041b8 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_RCC_OscConfig+0x288>)
 800417c:	2201      	movs	r2, #1
 800417e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004180:	f7fe fec8 	bl	8002f14 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004186:	e010      	b.n	80041aa <HAL_RCC_OscConfig+0x29e>
 8004188:	080107f4 	.word	0x080107f4
 800418c:	40023800 	.word	0x40023800
 8004190:	42470000 	.word	0x42470000
 8004194:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004198:	f7fe febc 	bl	8002f14 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e1ce      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041aa:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80041ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0x28c>
 80041b6:	e015      	b.n	80041e4 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b8:	4b5b      	ldr	r3, [pc, #364]	; (8004328 <HAL_RCC_OscConfig+0x41c>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041be:	f7fe fea9 	bl	8002f14 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c6:	f7fe fea5 	bl	8002f14 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e1b7      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d8:	4b52      	ldr	r3, [pc, #328]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80041da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80b0 	beq.w	8004352 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f2:	2300      	movs	r3, #0
 80041f4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00c      	beq.n	8004218 <HAL_RCC_OscConfig+0x30c>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d008      	beq.n	8004218 <HAL_RCC_OscConfig+0x30c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b05      	cmp	r3, #5
 800420c:	d004      	beq.n	8004218 <HAL_RCC_OscConfig+0x30c>
 800420e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004212:	4846      	ldr	r0, [pc, #280]	; (800432c <HAL_RCC_OscConfig+0x420>)
 8004214:	f7fd fd4f 	bl	8001cb6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004218:	4b42      	ldr	r3, [pc, #264]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10f      	bne.n	8004244 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004224:	2300      	movs	r3, #0
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	4b3e      	ldr	r3, [pc, #248]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	4a3d      	ldr	r2, [pc, #244]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 800422e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004232:	6413      	str	r3, [r2, #64]	; 0x40
 8004234:	4b3b      	ldr	r3, [pc, #236]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004244:	4b3a      	ldr	r3, [pc, #232]	; (8004330 <HAL_RCC_OscConfig+0x424>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d118      	bne.n	8004282 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004250:	4b37      	ldr	r3, [pc, #220]	; (8004330 <HAL_RCC_OscConfig+0x424>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a36      	ldr	r2, [pc, #216]	; (8004330 <HAL_RCC_OscConfig+0x424>)
 8004256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800425c:	f7fe fe5a 	bl	8002f14 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004264:	f7fe fe56 	bl	8002f14 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e168      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004276:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <HAL_RCC_OscConfig+0x424>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0f0      	beq.n	8004264 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d106      	bne.n	8004298 <HAL_RCC_OscConfig+0x38c>
 800428a:	4b26      	ldr	r3, [pc, #152]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a25      	ldr	r2, [pc, #148]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
 8004296:	e01c      	b.n	80042d2 <HAL_RCC_OscConfig+0x3c6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b05      	cmp	r3, #5
 800429e:	d10c      	bne.n	80042ba <HAL_RCC_OscConfig+0x3ae>
 80042a0:	4b20      	ldr	r3, [pc, #128]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a4:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042a6:	f043 0304 	orr.w	r3, r3, #4
 80042aa:	6713      	str	r3, [r2, #112]	; 0x70
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	4a1c      	ldr	r2, [pc, #112]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	6713      	str	r3, [r2, #112]	; 0x70
 80042b8:	e00b      	b.n	80042d2 <HAL_RCC_OscConfig+0x3c6>
 80042ba:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042be:	4a19      	ldr	r2, [pc, #100]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042c0:	f023 0301 	bic.w	r3, r3, #1
 80042c4:	6713      	str	r3, [r2, #112]	; 0x70
 80042c6:	4b17      	ldr	r3, [pc, #92]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	4a16      	ldr	r2, [pc, #88]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042cc:	f023 0304 	bic.w	r3, r3, #4
 80042d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d015      	beq.n	8004306 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042da:	f7fe fe1b 	bl	8002f14 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e0:	e00a      	b.n	80042f8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e2:	f7fe fe17 	bl	8002f14 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e127      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ee      	beq.n	80042e2 <HAL_RCC_OscConfig+0x3d6>
 8004304:	e01c      	b.n	8004340 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004306:	f7fe fe05 	bl	8002f14 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430c:	e012      	b.n	8004334 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fe fe01 	bl	8002f14 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d909      	bls.n	8004334 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e111      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
 8004324:	40023800 	.word	0x40023800
 8004328:	42470e80 	.word	0x42470e80
 800432c:	080107f4 	.word	0x080107f4
 8004330:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004334:	4b86      	ldr	r3, [pc, #536]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e6      	bne.n	800430e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d105      	bne.n	8004352 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004346:	4b82      	ldr	r3, [pc, #520]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	4a81      	ldr	r2, [pc, #516]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 800434c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004350:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00c      	beq.n	8004374 <HAL_RCC_OscConfig+0x468>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d008      	beq.n	8004374 <HAL_RCC_OscConfig+0x468>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d004      	beq.n	8004374 <HAL_RCC_OscConfig+0x468>
 800436a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800436e:	4879      	ldr	r0, [pc, #484]	; (8004554 <HAL_RCC_OscConfig+0x648>)
 8004370:	f7fd fca1 	bl	8001cb6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80e4 	beq.w	8004546 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800437e:	4b74      	ldr	r3, [pc, #464]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b08      	cmp	r3, #8
 8004388:	f000 80a5 	beq.w	80044d6 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b02      	cmp	r3, #2
 8004392:	f040 8089 	bne.w	80044a8 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4a6>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a6:	d004      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4a6>
 80043a8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80043ac:	4869      	ldr	r0, [pc, #420]	; (8004554 <HAL_RCC_OscConfig+0x648>)
 80043ae:	f7fd fc82 	bl	8001cb6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	2b3f      	cmp	r3, #63	; 0x3f
 80043b8:	d904      	bls.n	80043c4 <HAL_RCC_OscConfig+0x4b8>
 80043ba:	f240 11d7 	movw	r1, #471	; 0x1d7
 80043be:	4865      	ldr	r0, [pc, #404]	; (8004554 <HAL_RCC_OscConfig+0x648>)
 80043c0:	f7fd fc79 	bl	8001cb6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	2b31      	cmp	r3, #49	; 0x31
 80043ca:	d904      	bls.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80043d4:	d904      	bls.n	80043e0 <HAL_RCC_OscConfig+0x4d4>
 80043d6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80043da:	485e      	ldr	r0, [pc, #376]	; (8004554 <HAL_RCC_OscConfig+0x648>)
 80043dc:	f7fd fc6b 	bl	8001cb6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d010      	beq.n	800440a <HAL_RCC_OscConfig+0x4fe>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d00c      	beq.n	800440a <HAL_RCC_OscConfig+0x4fe>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f4:	2b06      	cmp	r3, #6
 80043f6:	d008      	beq.n	800440a <HAL_RCC_OscConfig+0x4fe>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d004      	beq.n	800440a <HAL_RCC_OscConfig+0x4fe>
 8004400:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004404:	4853      	ldr	r0, [pc, #332]	; (8004554 <HAL_RCC_OscConfig+0x648>)
 8004406:	f7fd fc56 	bl	8001cb6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	2b01      	cmp	r3, #1
 8004410:	d903      	bls.n	800441a <HAL_RCC_OscConfig+0x50e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	2b0f      	cmp	r3, #15
 8004418:	d904      	bls.n	8004424 <HAL_RCC_OscConfig+0x518>
 800441a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800441e:	484d      	ldr	r0, [pc, #308]	; (8004554 <HAL_RCC_OscConfig+0x648>)
 8004420:	f7fd fc49 	bl	8001cb6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004424:	4b4c      	ldr	r3, [pc, #304]	; (8004558 <HAL_RCC_OscConfig+0x64c>)
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442a:	f7fe fd73 	bl	8002f14 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004432:	f7fe fd6f 	bl	8002f14 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e081      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004444:	4b42      	ldr	r3, [pc, #264]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	019b      	lsls	r3, r3, #6
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	085b      	lsrs	r3, r3, #1
 8004468:	3b01      	subs	r3, #1
 800446a:	041b      	lsls	r3, r3, #16
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	061b      	lsls	r3, r3, #24
 8004474:	4936      	ldr	r1, [pc, #216]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 8004476:	4313      	orrs	r3, r2
 8004478:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800447a:	4b37      	ldr	r3, [pc, #220]	; (8004558 <HAL_RCC_OscConfig+0x64c>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7fe fd48 	bl	8002f14 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004488:	f7fe fd44 	bl	8002f14 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e056      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449a:	4b2d      	ldr	r3, [pc, #180]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x57c>
 80044a6:	e04e      	b.n	8004546 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a8:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <HAL_RCC_OscConfig+0x64c>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ae:	f7fe fd31 	bl	8002f14 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b6:	f7fe fd2d 	bl	8002f14 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e03f      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c8:	4b21      	ldr	r3, [pc, #132]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f0      	bne.n	80044b6 <HAL_RCC_OscConfig+0x5aa>
 80044d4:	e037      	b.n	8004546 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e032      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044e2:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d028      	beq.n	8004542 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d121      	bne.n	8004542 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004508:	429a      	cmp	r2, r3
 800450a:	d11a      	bne.n	8004542 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004512:	4013      	ands	r3, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004518:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800451a:	4293      	cmp	r3, r2
 800451c:	d111      	bne.n	8004542 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	3b01      	subs	r3, #1
 800452c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800452e:	429a      	cmp	r2, r3
 8004530:	d107      	bne.n	8004542 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d001      	beq.n	8004546 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40023800 	.word	0x40023800
 8004554:	080107f4 	.word	0x080107f4
 8004558:	42470060 	.word	0x42470060

0800455c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e174      	b.n	800485a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_RCC_ClockConfig+0x24>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b0f      	cmp	r3, #15
 800457e:	d904      	bls.n	800458a <HAL_RCC_ClockConfig+0x2e>
 8004580:	f240 215a 	movw	r1, #602	; 0x25a
 8004584:	487b      	ldr	r0, [pc, #492]	; (8004774 <HAL_RCC_ClockConfig+0x218>)
 8004586:	f7fd fb96 	bl	8001cb6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d019      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d016      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d013      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d010      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d00d      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d00a      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b06      	cmp	r3, #6
 80045b2:	d007      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b07      	cmp	r3, #7
 80045b8:	d004      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 80045ba:	f240 215b 	movw	r1, #603	; 0x25b
 80045be:	486d      	ldr	r0, [pc, #436]	; (8004774 <HAL_RCC_ClockConfig+0x218>)
 80045c0:	f7fd fb79 	bl	8001cb6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045c4:	4b6c      	ldr	r3, [pc, #432]	; (8004778 <HAL_RCC_ClockConfig+0x21c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d90c      	bls.n	80045ec <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d2:	4b69      	ldr	r3, [pc, #420]	; (8004778 <HAL_RCC_ClockConfig+0x21c>)
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045da:	4b67      	ldr	r3, [pc, #412]	; (8004778 <HAL_RCC_ClockConfig+0x21c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e136      	b.n	800485a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d049      	beq.n	800468c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004604:	4b5d      	ldr	r3, [pc, #372]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	4a5c      	ldr	r2, [pc, #368]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 800460a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800460e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800461c:	4b57      	ldr	r3, [pc, #348]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4a56      	ldr	r2, [pc, #344]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 8004622:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d024      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b80      	cmp	r3, #128	; 0x80
 8004636:	d020      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b90      	cmp	r3, #144	; 0x90
 800463e:	d01c      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2ba0      	cmp	r3, #160	; 0xa0
 8004646:	d018      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2bb0      	cmp	r3, #176	; 0xb0
 800464e:	d014      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2bc0      	cmp	r3, #192	; 0xc0
 8004656:	d010      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2bd0      	cmp	r3, #208	; 0xd0
 800465e:	d00c      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2be0      	cmp	r3, #224	; 0xe0
 8004666:	d008      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2bf0      	cmp	r3, #240	; 0xf0
 800466e:	d004      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004670:	f240 217e 	movw	r1, #638	; 0x27e
 8004674:	483f      	ldr	r0, [pc, #252]	; (8004774 <HAL_RCC_ClockConfig+0x218>)
 8004676:	f7fd fb1e 	bl	8001cb6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800467a:	4b40      	ldr	r3, [pc, #256]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	493d      	ldr	r1, [pc, #244]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 8004688:	4313      	orrs	r3, r2
 800468a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d059      	beq.n	800474c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d010      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x166>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d00c      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x166>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d008      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x166>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d004      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x166>
 80046b8:	f240 2185 	movw	r1, #645	; 0x285
 80046bc:	482d      	ldr	r0, [pc, #180]	; (8004774 <HAL_RCC_ClockConfig+0x218>)
 80046be:	f7fd fafa 	bl	8001cb6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	4b2c      	ldr	r3, [pc, #176]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d119      	bne.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0bf      	b.n	800485a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d003      	beq.n	80046ea <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ea:	4b24      	ldr	r3, [pc, #144]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d109      	bne.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e0af      	b.n	800485a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fa:	4b20      	ldr	r3, [pc, #128]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e0a7      	b.n	800485a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800470a:	4b1c      	ldr	r3, [pc, #112]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f023 0203 	bic.w	r2, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	4919      	ldr	r1, [pc, #100]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 8004718:	4313      	orrs	r3, r2
 800471a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800471c:	f7fe fbfa 	bl	8002f14 <HAL_GetTick>
 8004720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004722:	e00a      	b.n	800473a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004724:	f7fe fbf6 	bl	8002f14 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e08f      	b.n	800485a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473a:	4b10      	ldr	r3, [pc, #64]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 020c 	and.w	r2, r3, #12
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	429a      	cmp	r2, r3
 800474a:	d1eb      	bne.n	8004724 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <HAL_RCC_ClockConfig+0x21c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d212      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <HAL_RCC_ClockConfig+0x21c>)
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_ClockConfig+0x21c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d007      	beq.n	8004780 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e072      	b.n	800485a <HAL_RCC_ClockConfig+0x2fe>
 8004774:	080107f4 	.word	0x080107f4
 8004778:	40023c00 	.word	0x40023c00
 800477c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d025      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d018      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x26a>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479c:	d013      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x26a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047a6:	d00e      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x26a>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80047b0:	d009      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x26a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80047ba:	d004      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x26a>
 80047bc:	f240 21c3 	movw	r1, #707	; 0x2c3
 80047c0:	4828      	ldr	r0, [pc, #160]	; (8004864 <HAL_RCC_ClockConfig+0x308>)
 80047c2:	f7fd fa78 	bl	8001cb6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c6:	4b28      	ldr	r3, [pc, #160]	; (8004868 <HAL_RCC_ClockConfig+0x30c>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	4925      	ldr	r1, [pc, #148]	; (8004868 <HAL_RCC_ClockConfig+0x30c>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d026      	beq.n	8004832 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d018      	beq.n	800481e <HAL_RCC_ClockConfig+0x2c2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f4:	d013      	beq.n	800481e <HAL_RCC_ClockConfig+0x2c2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047fe:	d00e      	beq.n	800481e <HAL_RCC_ClockConfig+0x2c2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004808:	d009      	beq.n	800481e <HAL_RCC_ClockConfig+0x2c2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004812:	d004      	beq.n	800481e <HAL_RCC_ClockConfig+0x2c2>
 8004814:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004818:	4812      	ldr	r0, [pc, #72]	; (8004864 <HAL_RCC_ClockConfig+0x308>)
 800481a:	f7fd fa4c 	bl	8001cb6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800481e:	4b12      	ldr	r3, [pc, #72]	; (8004868 <HAL_RCC_ClockConfig+0x30c>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	490e      	ldr	r1, [pc, #56]	; (8004868 <HAL_RCC_ClockConfig+0x30c>)
 800482e:	4313      	orrs	r3, r2
 8004830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004832:	f000 f821 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8004836:	4602      	mov	r2, r0
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_RCC_ClockConfig+0x30c>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	490a      	ldr	r1, [pc, #40]	; (800486c <HAL_RCC_ClockConfig+0x310>)
 8004844:	5ccb      	ldrb	r3, [r1, r3]
 8004846:	fa22 f303 	lsr.w	r3, r2, r3
 800484a:	4a09      	ldr	r2, [pc, #36]	; (8004870 <HAL_RCC_ClockConfig+0x314>)
 800484c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <HAL_RCC_ClockConfig+0x318>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fd fb96 	bl	8001f84 <HAL_InitTick>

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	080107f4 	.word	0x080107f4
 8004868:	40023800 	.word	0x40023800
 800486c:	08010aa0 	.word	0x08010aa0
 8004870:	20000018 	.word	0x20000018
 8004874:	2000002c 	.word	0x2000002c

08004878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800487c:	b090      	sub	sp, #64	; 0x40
 800487e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	637b      	str	r3, [r7, #52]	; 0x34
 8004884:	2300      	movs	r3, #0
 8004886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004888:	2300      	movs	r3, #0
 800488a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004890:	4b59      	ldr	r3, [pc, #356]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 030c 	and.w	r3, r3, #12
 8004898:	2b08      	cmp	r3, #8
 800489a:	d00d      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0x40>
 800489c:	2b08      	cmp	r3, #8
 800489e:	f200 80a1 	bhi.w	80049e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_RCC_GetSysClockFreq+0x34>
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d003      	beq.n	80048b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048aa:	e09b      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048ac:	4b53      	ldr	r3, [pc, #332]	; (80049fc <HAL_RCC_GetSysClockFreq+0x184>)
 80048ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80048b0:	e09b      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048b2:	4b53      	ldr	r3, [pc, #332]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x188>)
 80048b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048b6:	e098      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048b8:	4b4f      	ldr	r3, [pc, #316]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048c2:	4b4d      	ldr	r3, [pc, #308]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d028      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ce:	4b4a      	ldr	r3, [pc, #296]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	099b      	lsrs	r3, r3, #6
 80048d4:	2200      	movs	r2, #0
 80048d6:	623b      	str	r3, [r7, #32]
 80048d8:	627a      	str	r2, [r7, #36]	; 0x24
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048e0:	2100      	movs	r1, #0
 80048e2:	4b47      	ldr	r3, [pc, #284]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x188>)
 80048e4:	fb03 f201 	mul.w	r2, r3, r1
 80048e8:	2300      	movs	r3, #0
 80048ea:	fb00 f303 	mul.w	r3, r0, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	4a43      	ldr	r2, [pc, #268]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x188>)
 80048f2:	fba0 1202 	umull	r1, r2, r0, r2
 80048f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048f8:	460a      	mov	r2, r1
 80048fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80048fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048fe:	4413      	add	r3, r2
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004904:	2200      	movs	r2, #0
 8004906:	61bb      	str	r3, [r7, #24]
 8004908:	61fa      	str	r2, [r7, #28]
 800490a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800490e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004912:	f7fc f9c1 	bl	8000c98 <__aeabi_uldivmod>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4613      	mov	r3, r2
 800491c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800491e:	e053      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004920:	4b35      	ldr	r3, [pc, #212]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	099b      	lsrs	r3, r3, #6
 8004926:	2200      	movs	r2, #0
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	617a      	str	r2, [r7, #20]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004932:	f04f 0b00 	mov.w	fp, #0
 8004936:	4652      	mov	r2, sl
 8004938:	465b      	mov	r3, fp
 800493a:	f04f 0000 	mov.w	r0, #0
 800493e:	f04f 0100 	mov.w	r1, #0
 8004942:	0159      	lsls	r1, r3, #5
 8004944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004948:	0150      	lsls	r0, r2, #5
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	ebb2 080a 	subs.w	r8, r2, sl
 8004952:	eb63 090b 	sbc.w	r9, r3, fp
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004962:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004966:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800496a:	ebb2 0408 	subs.w	r4, r2, r8
 800496e:	eb63 0509 	sbc.w	r5, r3, r9
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	00eb      	lsls	r3, r5, #3
 800497c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004980:	00e2      	lsls	r2, r4, #3
 8004982:	4614      	mov	r4, r2
 8004984:	461d      	mov	r5, r3
 8004986:	eb14 030a 	adds.w	r3, r4, sl
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	eb45 030b 	adc.w	r3, r5, fp
 8004990:	607b      	str	r3, [r7, #4]
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800499e:	4629      	mov	r1, r5
 80049a0:	028b      	lsls	r3, r1, #10
 80049a2:	4621      	mov	r1, r4
 80049a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049a8:	4621      	mov	r1, r4
 80049aa:	028a      	lsls	r2, r1, #10
 80049ac:	4610      	mov	r0, r2
 80049ae:	4619      	mov	r1, r3
 80049b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b2:	2200      	movs	r2, #0
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	60fa      	str	r2, [r7, #12]
 80049b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049bc:	f7fc f96c 	bl	8000c98 <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4613      	mov	r3, r2
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	3301      	adds	r3, #1
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80049d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049e2:	e002      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049e4:	4b05      	ldr	r3, [pc, #20]	; (80049fc <HAL_RCC_GetSysClockFreq+0x184>)
 80049e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3740      	adds	r7, #64	; 0x40
 80049f0:	46bd      	mov	sp, r7
 80049f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800
 80049fc:	00f42400 	.word	0x00f42400
 8004a00:	017d7840 	.word	0x017d7840

08004a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20000018 	.word	0x20000018

08004a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a20:	f7ff fff0 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a24:	4602      	mov	r2, r0
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	0a9b      	lsrs	r3, r3, #10
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	4903      	ldr	r1, [pc, #12]	; (8004a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a32:	5ccb      	ldrb	r3, [r1, r3]
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	08010ab0 	.word	0x08010ab0

08004a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a48:	f7ff ffdc 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	0b5b      	lsrs	r3, r3, #13
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	4903      	ldr	r1, [pc, #12]	; (8004a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a5a:	5ccb      	ldrb	r3, [r1, r3]
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40023800 	.word	0x40023800
 8004a68:	08010ab0 	.word	0x08010ab0

08004a6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	220f      	movs	r2, #15
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a7c:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 0203 	and.w	r2, r3, #3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a88:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	08db      	lsrs	r3, r3, #3
 8004aa6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <HAL_RCC_GetClockConfig+0x60>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0207 	and.w	r2, r3, #7
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	601a      	str	r2, [r3, #0]
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40023c00 	.word	0x40023c00

08004ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e184      	b.n	8004dec <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a72      	ldr	r2, [pc, #456]	; (8004cb0 <HAL_SPI_Init+0x1e0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d013      	beq.n	8004b14 <HAL_SPI_Init+0x44>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a70      	ldr	r2, [pc, #448]	; (8004cb4 <HAL_SPI_Init+0x1e4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00e      	beq.n	8004b14 <HAL_SPI_Init+0x44>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a6f      	ldr	r2, [pc, #444]	; (8004cb8 <HAL_SPI_Init+0x1e8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d009      	beq.n	8004b14 <HAL_SPI_Init+0x44>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a6d      	ldr	r2, [pc, #436]	; (8004cbc <HAL_SPI_Init+0x1ec>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <HAL_SPI_Init+0x44>
 8004b0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004b0e:	486c      	ldr	r0, [pc, #432]	; (8004cc0 <HAL_SPI_Init+0x1f0>)
 8004b10:	f7fd f8d1 	bl	8001cb6 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d009      	beq.n	8004b30 <HAL_SPI_Init+0x60>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b24:	d004      	beq.n	8004b30 <HAL_SPI_Init+0x60>
 8004b26:	f240 1141 	movw	r1, #321	; 0x141
 8004b2a:	4865      	ldr	r0, [pc, #404]	; (8004cc0 <HAL_SPI_Init+0x1f0>)
 8004b2c:	f7fd f8c3 	bl	8001cb6 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00e      	beq.n	8004b56 <HAL_SPI_Init+0x86>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b40:	d009      	beq.n	8004b56 <HAL_SPI_Init+0x86>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b4a:	d004      	beq.n	8004b56 <HAL_SPI_Init+0x86>
 8004b4c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004b50:	485b      	ldr	r0, [pc, #364]	; (8004cc0 <HAL_SPI_Init+0x1f0>)
 8004b52:	f7fd f8b0 	bl	8001cb6 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5e:	d008      	beq.n	8004b72 <HAL_SPI_Init+0xa2>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d004      	beq.n	8004b72 <HAL_SPI_Init+0xa2>
 8004b68:	f240 1143 	movw	r1, #323	; 0x143
 8004b6c:	4854      	ldr	r0, [pc, #336]	; (8004cc0 <HAL_SPI_Init+0x1f0>)
 8004b6e:	f7fd f8a2 	bl	8001cb6 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b7a:	d00d      	beq.n	8004b98 <HAL_SPI_Init+0xc8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <HAL_SPI_Init+0xc8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b8c:	d004      	beq.n	8004b98 <HAL_SPI_Init+0xc8>
 8004b8e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004b92:	484b      	ldr	r0, [pc, #300]	; (8004cc0 <HAL_SPI_Init+0x1f0>)
 8004b94:	f7fd f88f 	bl	8001cb6 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d020      	beq.n	8004be2 <HAL_SPI_Init+0x112>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d01c      	beq.n	8004be2 <HAL_SPI_Init+0x112>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d018      	beq.n	8004be2 <HAL_SPI_Init+0x112>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	2b18      	cmp	r3, #24
 8004bb6:	d014      	beq.n	8004be2 <HAL_SPI_Init+0x112>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d010      	beq.n	8004be2 <HAL_SPI_Init+0x112>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	2b28      	cmp	r3, #40	; 0x28
 8004bc6:	d00c      	beq.n	8004be2 <HAL_SPI_Init+0x112>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	2b30      	cmp	r3, #48	; 0x30
 8004bce:	d008      	beq.n	8004be2 <HAL_SPI_Init+0x112>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	2b38      	cmp	r3, #56	; 0x38
 8004bd6:	d004      	beq.n	8004be2 <HAL_SPI_Init+0x112>
 8004bd8:	f240 1145 	movw	r1, #325	; 0x145
 8004bdc:	4838      	ldr	r0, [pc, #224]	; (8004cc0 <HAL_SPI_Init+0x1f0>)
 8004bde:	f7fd f86a 	bl	8001cb6 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d008      	beq.n	8004bfc <HAL_SPI_Init+0x12c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	2b80      	cmp	r3, #128	; 0x80
 8004bf0:	d004      	beq.n	8004bfc <HAL_SPI_Init+0x12c>
 8004bf2:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004bf6:	4832      	ldr	r0, [pc, #200]	; (8004cc0 <HAL_SPI_Init+0x1f0>)
 8004bf8:	f7fd f85d 	bl	8001cb6 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_SPI_Init+0x146>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d004      	beq.n	8004c16 <HAL_SPI_Init+0x146>
 8004c0c:	f240 1147 	movw	r1, #327	; 0x147
 8004c10:	482b      	ldr	r0, [pc, #172]	; (8004cc0 <HAL_SPI_Init+0x1f0>)
 8004c12:	f7fd f850 	bl	8001cb6 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d152      	bne.n	8004cc4 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d008      	beq.n	8004c38 <HAL_SPI_Init+0x168>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d004      	beq.n	8004c38 <HAL_SPI_Init+0x168>
 8004c2e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004c32:	4823      	ldr	r0, [pc, #140]	; (8004cc0 <HAL_SPI_Init+0x1f0>)
 8004c34:	f7fd f83f 	bl	8001cb6 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d008      	beq.n	8004c52 <HAL_SPI_Init+0x182>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d004      	beq.n	8004c52 <HAL_SPI_Init+0x182>
 8004c48:	f240 114b 	movw	r1, #331	; 0x14b
 8004c4c:	481c      	ldr	r0, [pc, #112]	; (8004cc0 <HAL_SPI_Init+0x1f0>)
 8004c4e:	f7fd f832 	bl	8001cb6 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c5a:	d125      	bne.n	8004ca8 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d05a      	beq.n	8004d1a <HAL_SPI_Init+0x24a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d056      	beq.n	8004d1a <HAL_SPI_Init+0x24a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d052      	beq.n	8004d1a <HAL_SPI_Init+0x24a>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	2b18      	cmp	r3, #24
 8004c7a:	d04e      	beq.n	8004d1a <HAL_SPI_Init+0x24a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d04a      	beq.n	8004d1a <HAL_SPI_Init+0x24a>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	2b28      	cmp	r3, #40	; 0x28
 8004c8a:	d046      	beq.n	8004d1a <HAL_SPI_Init+0x24a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	2b30      	cmp	r3, #48	; 0x30
 8004c92:	d042      	beq.n	8004d1a <HAL_SPI_Init+0x24a>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	2b38      	cmp	r3, #56	; 0x38
 8004c9a:	d03e      	beq.n	8004d1a <HAL_SPI_Init+0x24a>
 8004c9c:	f240 114f 	movw	r1, #335	; 0x14f
 8004ca0:	4807      	ldr	r0, [pc, #28]	; (8004cc0 <HAL_SPI_Init+0x1f0>)
 8004ca2:	f7fd f808 	bl	8001cb6 <assert_failed>
 8004ca6:	e038      	b.n	8004d1a <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	61da      	str	r2, [r3, #28]
 8004cae:	e034      	b.n	8004d1a <HAL_SPI_Init+0x24a>
 8004cb0:	40013000 	.word	0x40013000
 8004cb4:	40003800 	.word	0x40003800
 8004cb8:	40003c00 	.word	0x40003c00
 8004cbc:	40013400 	.word	0x40013400
 8004cc0:	08010868 	.word	0x08010868
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d020      	beq.n	8004d0e <HAL_SPI_Init+0x23e>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d01c      	beq.n	8004d0e <HAL_SPI_Init+0x23e>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d018      	beq.n	8004d0e <HAL_SPI_Init+0x23e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	2b18      	cmp	r3, #24
 8004ce2:	d014      	beq.n	8004d0e <HAL_SPI_Init+0x23e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d010      	beq.n	8004d0e <HAL_SPI_Init+0x23e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	2b28      	cmp	r3, #40	; 0x28
 8004cf2:	d00c      	beq.n	8004d0e <HAL_SPI_Init+0x23e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	2b30      	cmp	r3, #48	; 0x30
 8004cfa:	d008      	beq.n	8004d0e <HAL_SPI_Init+0x23e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	2b38      	cmp	r3, #56	; 0x38
 8004d02:	d004      	beq.n	8004d0e <HAL_SPI_Init+0x23e>
 8004d04:	f240 1159 	movw	r1, #345	; 0x159
 8004d08:	483a      	ldr	r0, [pc, #232]	; (8004df4 <HAL_SPI_Init+0x324>)
 8004d0a:	f7fc ffd4 	bl	8001cb6 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d106      	bne.n	8004d3a <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7fd f835 	bl	8001da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d50:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9e:	ea42 0103 	orr.w	r1, r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	0c1b      	lsrs	r3, r3, #16
 8004db8:	f003 0104 	and.w	r1, r3, #4
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	f003 0210 	and.w	r2, r3, #16
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69da      	ldr	r2, [r3, #28]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	08010868 	.word	0x08010868

08004df8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e033      	b.n	8004e72 <HAL_SPI_DeInit+0x7a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <HAL_SPI_DeInit+0x84>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d013      	beq.n	8004e3c <HAL_SPI_DeInit+0x44>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a19      	ldr	r2, [pc, #100]	; (8004e80 <HAL_SPI_DeInit+0x88>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00e      	beq.n	8004e3c <HAL_SPI_DeInit+0x44>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <HAL_SPI_DeInit+0x8c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d009      	beq.n	8004e3c <HAL_SPI_DeInit+0x44>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a16      	ldr	r2, [pc, #88]	; (8004e88 <HAL_SPI_DeInit+0x90>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_SPI_DeInit+0x44>
 8004e32:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8004e36:	4815      	ldr	r0, [pc, #84]	; (8004e8c <HAL_SPI_DeInit+0x94>)
 8004e38:	f7fc ff3d 	bl	8001cb6 <assert_failed>

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e52:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fd f82b 	bl	8001eb0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40013000 	.word	0x40013000
 8004e80:	40003800 	.word	0x40003800
 8004e84:	40003c00 	.word	0x40003c00
 8004e88:	40013400 	.word	0x40013400
 8004e8c:	08010868 	.word	0x08010868

08004e90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d009      	beq.n	8004ec0 <HAL_SPI_Transmit+0x30>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb4:	d004      	beq.n	8004ec0 <HAL_SPI_Transmit+0x30>
 8004eb6:	f44f 7142 	mov.w	r1, #776	; 0x308
 8004eba:	4880      	ldr	r0, [pc, #512]	; (80050bc <HAL_SPI_Transmit+0x22c>)
 8004ebc:	f7fc fefb 	bl	8001cb6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_SPI_Transmit+0x3e>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e128      	b.n	8005120 <HAL_SPI_Transmit+0x290>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ed6:	f7fe f81d 	bl	8002f14 <HAL_GetTick>
 8004eda:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004edc:	88fb      	ldrh	r3, [r7, #6]
 8004ede:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d002      	beq.n	8004ef2 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8004eec:	2302      	movs	r3, #2
 8004eee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ef0:	e10d      	b.n	800510e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <HAL_SPI_Transmit+0x6e>
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d102      	bne.n	8004f04 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f02:	e104      	b.n	800510e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2203      	movs	r2, #3
 8004f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	88fa      	ldrh	r2, [r7, #6]
 8004f1c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	88fa      	ldrh	r2, [r7, #6]
 8004f22:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4a:	d10f      	bne.n	8004f6c <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f76:	2b40      	cmp	r3, #64	; 0x40
 8004f78:	d007      	beq.n	8004f8a <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f92:	d14b      	bne.n	800502c <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_SPI_Transmit+0x112>
 8004f9c:	8afb      	ldrh	r3, [r7, #22]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d13e      	bne.n	8005020 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	881a      	ldrh	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	1c9a      	adds	r2, r3, #2
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004fc6:	e02b      	b.n	8005020 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d112      	bne.n	8004ffc <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	881a      	ldrh	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	1c9a      	adds	r2, r3, #2
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ffa:	e011      	b.n	8005020 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ffc:	f7fd ff8a 	bl	8002f14 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d803      	bhi.n	8005014 <HAL_SPI_Transmit+0x184>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d102      	bne.n	800501a <HAL_SPI_Transmit+0x18a>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d102      	bne.n	8005020 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800501e:	e076      	b.n	800510e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1ce      	bne.n	8004fc8 <HAL_SPI_Transmit+0x138>
 800502a:	e04e      	b.n	80050ca <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <HAL_SPI_Transmit+0x1aa>
 8005034:	8afb      	ldrh	r3, [r7, #22]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d142      	bne.n	80050c0 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	330c      	adds	r3, #12
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005060:	e02e      	b.n	80050c0 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b02      	cmp	r3, #2
 800506e:	d113      	bne.n	8005098 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	7812      	ldrb	r2, [r2, #0]
 800507c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	86da      	strh	r2, [r3, #54]	; 0x36
 8005096:	e013      	b.n	80050c0 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005098:	f7fd ff3c 	bl	8002f14 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d803      	bhi.n	80050b0 <HAL_SPI_Transmit+0x220>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d102      	bne.n	80050b6 <HAL_SPI_Transmit+0x226>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d104      	bne.n	80050c0 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050ba:	e028      	b.n	800510e <HAL_SPI_Transmit+0x27e>
 80050bc:	08010868 	.word	0x08010868
    while (hspi->TxXferCount > 0U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1cb      	bne.n	8005062 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	6839      	ldr	r1, [r7, #0]
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 f9d0 	bl	8005474 <SPI_EndRxTxTransaction>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10a      	bne.n	80050fe <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	613b      	str	r3, [r7, #16]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	77fb      	strb	r3, [r7, #31]
 800510a:	e000      	b.n	800510e <HAL_SPI_Transmit+0x27e>
  }

error:
 800510c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800511e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3720      	adds	r7, #32
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	099b      	lsrs	r3, r3, #6
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10f      	bne.n	800516c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	099b      	lsrs	r3, r3, #6
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d004      	beq.n	800516c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	4798      	blx	r3
    return;
 800516a:	e0d7      	b.n	800531c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <HAL_SPI_IRQHandler+0x66>
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	09db      	lsrs	r3, r3, #7
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d004      	beq.n	800518e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	4798      	blx	r3
    return;
 800518c:	e0c6      	b.n	800531c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10c      	bne.n	80051b4 <HAL_SPI_IRQHandler+0x8c>
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	099b      	lsrs	r3, r3, #6
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	0a1b      	lsrs	r3, r3, #8
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 80b4 	beq.w	800531c <HAL_SPI_IRQHandler+0x1f4>
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80ad 	beq.w	800531c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	099b      	lsrs	r3, r3, #6
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d023      	beq.n	8005216 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d011      	beq.n	80051fe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051de:	f043 0204 	orr.w	r2, r3, #4
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	e00b      	b.n	8005216 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	693b      	ldr	r3, [r7, #16]
        return;
 8005214:	e082      	b.n	800531c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	095b      	lsrs	r3, r3, #5
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d014      	beq.n	800524c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005226:	f043 0201 	orr.w	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	0a1b      	lsrs	r3, r3, #8
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00c      	beq.n	8005272 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525c:	f043 0208 	orr.w	r2, r3, #8
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005264:	2300      	movs	r3, #0
 8005266:	60bb      	str	r3, [r7, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]
 8005270:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005276:	2b00      	cmp	r3, #0
 8005278:	d04f      	beq.n	800531a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005288:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d104      	bne.n	80052a6 <HAL_SPI_IRQHandler+0x17e>
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d034      	beq.n	8005310 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0203 	bic.w	r2, r2, #3
 80052b4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d011      	beq.n	80052e2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c2:	4a18      	ldr	r2, [pc, #96]	; (8005324 <HAL_SPI_IRQHandler+0x1fc>)
 80052c4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fe f810 	bl	80032f0 <HAL_DMA_Abort_IT>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d005      	beq.n	80052e2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d016      	beq.n	8005318 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ee:	4a0d      	ldr	r2, [pc, #52]	; (8005324 <HAL_SPI_IRQHandler+0x1fc>)
 80052f0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fd fffa 	bl	80032f0 <HAL_DMA_Abort_IT>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005306:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800530e:	e003      	b.n	8005318 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f809 	bl	8005328 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005316:	e000      	b.n	800531a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005318:	bf00      	nop
    return;
 800531a:	bf00      	nop
  }
}
 800531c:	3720      	adds	r7, #32
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	0800533d 	.word	0x0800533d

08005328 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f7ff ffe6 	bl	8005328 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800535c:	bf00      	nop
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005374:	f7fd fdce 	bl	8002f14 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	1a9b      	subs	r3, r3, r2
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	4413      	add	r3, r2
 8005382:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005384:	f7fd fdc6 	bl	8002f14 <HAL_GetTick>
 8005388:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800538a:	4b39      	ldr	r3, [pc, #228]	; (8005470 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	015b      	lsls	r3, r3, #5
 8005390:	0d1b      	lsrs	r3, r3, #20
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	fb02 f303 	mul.w	r3, r2, r3
 8005398:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800539a:	e054      	b.n	8005446 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a2:	d050      	beq.n	8005446 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053a4:	f7fd fdb6 	bl	8002f14 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d902      	bls.n	80053ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d13d      	bne.n	8005436 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d2:	d111      	bne.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053dc:	d004      	beq.n	80053e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e6:	d107      	bne.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005400:	d10f      	bne.n	8005422 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005420:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e017      	b.n	8005466 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	3b01      	subs	r3, #1
 8005444:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4013      	ands	r3, r2
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	429a      	cmp	r2, r3
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	429a      	cmp	r2, r3
 8005462:	d19b      	bne.n	800539c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000018 	.word	0x20000018

08005474 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af02      	add	r7, sp, #8
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005480:	4b1b      	ldr	r3, [pc, #108]	; (80054f0 <SPI_EndRxTxTransaction+0x7c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1b      	ldr	r2, [pc, #108]	; (80054f4 <SPI_EndRxTxTransaction+0x80>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	0d5b      	lsrs	r3, r3, #21
 800548c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005490:	fb02 f303 	mul.w	r3, r2, r3
 8005494:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800549e:	d112      	bne.n	80054c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2200      	movs	r2, #0
 80054a8:	2180      	movs	r1, #128	; 0x80
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f7ff ff5a 	bl	8005364 <SPI_WaitFlagStateUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d016      	beq.n	80054e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ba:	f043 0220 	orr.w	r2, r3, #32
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e00f      	b.n	80054e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054dc:	2b80      	cmp	r3, #128	; 0x80
 80054de:	d0f2      	beq.n	80054c6 <SPI_EndRxTxTransaction+0x52>
 80054e0:	e000      	b.n	80054e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80054e2:	bf00      	nop
  }

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000018 	.word	0x20000018
 80054f4:	165e9f81 	.word	0x165e9f81

080054f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e0a7      	b.n	800565a <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a55      	ldr	r2, [pc, #340]	; (8005664 <HAL_TIM_Base_Init+0x16c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d027      	beq.n	8005564 <HAL_TIM_Base_Init+0x6c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551c:	d022      	beq.n	8005564 <HAL_TIM_Base_Init+0x6c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a51      	ldr	r2, [pc, #324]	; (8005668 <HAL_TIM_Base_Init+0x170>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d01d      	beq.n	8005564 <HAL_TIM_Base_Init+0x6c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a4f      	ldr	r2, [pc, #316]	; (800566c <HAL_TIM_Base_Init+0x174>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d018      	beq.n	8005564 <HAL_TIM_Base_Init+0x6c>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a4e      	ldr	r2, [pc, #312]	; (8005670 <HAL_TIM_Base_Init+0x178>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d013      	beq.n	8005564 <HAL_TIM_Base_Init+0x6c>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a4c      	ldr	r2, [pc, #304]	; (8005674 <HAL_TIM_Base_Init+0x17c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00e      	beq.n	8005564 <HAL_TIM_Base_Init+0x6c>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a4b      	ldr	r2, [pc, #300]	; (8005678 <HAL_TIM_Base_Init+0x180>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d009      	beq.n	8005564 <HAL_TIM_Base_Init+0x6c>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a49      	ldr	r2, [pc, #292]	; (800567c <HAL_TIM_Base_Init+0x184>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d004      	beq.n	8005564 <HAL_TIM_Base_Init+0x6c>
 800555a:	f240 1113 	movw	r1, #275	; 0x113
 800555e:	4848      	ldr	r0, [pc, #288]	; (8005680 <HAL_TIM_Base_Init+0x188>)
 8005560:	f7fc fba9 	bl	8001cb6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d014      	beq.n	8005596 <HAL_TIM_Base_Init+0x9e>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2b10      	cmp	r3, #16
 8005572:	d010      	beq.n	8005596 <HAL_TIM_Base_Init+0x9e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b20      	cmp	r3, #32
 800557a:	d00c      	beq.n	8005596 <HAL_TIM_Base_Init+0x9e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d008      	beq.n	8005596 <HAL_TIM_Base_Init+0x9e>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2b60      	cmp	r3, #96	; 0x60
 800558a:	d004      	beq.n	8005596 <HAL_TIM_Base_Init+0x9e>
 800558c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005590:	483b      	ldr	r0, [pc, #236]	; (8005680 <HAL_TIM_Base_Init+0x188>)
 8005592:	f7fc fb90 	bl	8001cb6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00e      	beq.n	80055bc <HAL_TIM_Base_Init+0xc4>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a6:	d009      	beq.n	80055bc <HAL_TIM_Base_Init+0xc4>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b0:	d004      	beq.n	80055bc <HAL_TIM_Base_Init+0xc4>
 80055b2:	f240 1115 	movw	r1, #277	; 0x115
 80055b6:	4832      	ldr	r0, [pc, #200]	; (8005680 <HAL_TIM_Base_Init+0x188>)
 80055b8:	f7fc fb7d 	bl	8001cb6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_TIM_Base_Init+0xde>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	2b80      	cmp	r3, #128	; 0x80
 80055ca:	d004      	beq.n	80055d6 <HAL_TIM_Base_Init+0xde>
 80055cc:	f44f 718b 	mov.w	r1, #278	; 0x116
 80055d0:	482b      	ldr	r0, [pc, #172]	; (8005680 <HAL_TIM_Base_Init+0x188>)
 80055d2:	f7fc fb70 	bl	8001cb6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fc fe90 	bl	8002310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3304      	adds	r3, #4
 8005600:	4619      	mov	r1, r3
 8005602:	4610      	mov	r0, r2
 8005604:	f000 fa00 	bl	8005a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40010000 	.word	0x40010000
 8005668:	40000400 	.word	0x40000400
 800566c:	40000800 	.word	0x40000800
 8005670:	40000c00 	.word	0x40000c00
 8005674:	40014000 	.word	0x40014000
 8005678:	40014400 	.word	0x40014400
 800567c:	40014800 	.word	0x40014800
 8005680:	080108dc 	.word	0x080108dc

08005684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a3d      	ldr	r2, [pc, #244]	; (8005788 <HAL_TIM_Base_Start_IT+0x104>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d027      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x62>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569e:	d022      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x62>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a39      	ldr	r2, [pc, #228]	; (800578c <HAL_TIM_Base_Start_IT+0x108>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d01d      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x62>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a38      	ldr	r2, [pc, #224]	; (8005790 <HAL_TIM_Base_Start_IT+0x10c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d018      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x62>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a36      	ldr	r2, [pc, #216]	; (8005794 <HAL_TIM_Base_Start_IT+0x110>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x62>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a35      	ldr	r2, [pc, #212]	; (8005798 <HAL_TIM_Base_Start_IT+0x114>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00e      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x62>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a33      	ldr	r2, [pc, #204]	; (800579c <HAL_TIM_Base_Start_IT+0x118>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d009      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x62>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a32      	ldr	r2, [pc, #200]	; (80057a0 <HAL_TIM_Base_Start_IT+0x11c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d004      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x62>
 80056dc:	f240 11cf 	movw	r1, #463	; 0x1cf
 80056e0:	4830      	ldr	r0, [pc, #192]	; (80057a4 <HAL_TIM_Base_Start_IT+0x120>)
 80056e2:	f7fc fae8 	bl	8001cb6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d001      	beq.n	80056f6 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e044      	b.n	8005780 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0201 	orr.w	r2, r2, #1
 800570c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1d      	ldr	r2, [pc, #116]	; (8005788 <HAL_TIM_Base_Start_IT+0x104>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d018      	beq.n	800574a <HAL_TIM_Base_Start_IT+0xc6>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005720:	d013      	beq.n	800574a <HAL_TIM_Base_Start_IT+0xc6>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a19      	ldr	r2, [pc, #100]	; (800578c <HAL_TIM_Base_Start_IT+0x108>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00e      	beq.n	800574a <HAL_TIM_Base_Start_IT+0xc6>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a17      	ldr	r2, [pc, #92]	; (8005790 <HAL_TIM_Base_Start_IT+0x10c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d009      	beq.n	800574a <HAL_TIM_Base_Start_IT+0xc6>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a16      	ldr	r2, [pc, #88]	; (8005794 <HAL_TIM_Base_Start_IT+0x110>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d004      	beq.n	800574a <HAL_TIM_Base_Start_IT+0xc6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a14      	ldr	r2, [pc, #80]	; (8005798 <HAL_TIM_Base_Start_IT+0x114>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d111      	bne.n	800576e <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b06      	cmp	r3, #6
 800575a:	d010      	beq.n	800577e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576c:	e007      	b.n	800577e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0201 	orr.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40010000 	.word	0x40010000
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800
 8005794:	40000c00 	.word	0x40000c00
 8005798:	40014000 	.word	0x40014000
 800579c:	40014400 	.word	0x40014400
 80057a0:	40014800 	.word	0x40014800
 80057a4:	080108dc 	.word	0x080108dc

080057a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d122      	bne.n	8005804 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d11b      	bne.n	8005804 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0202 	mvn.w	r2, #2
 80057d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f8ee 	bl	80059cc <HAL_TIM_IC_CaptureCallback>
 80057f0:	e005      	b.n	80057fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f8e0 	bl	80059b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f8f1 	bl	80059e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b04      	cmp	r3, #4
 8005810:	d122      	bne.n	8005858 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b04      	cmp	r3, #4
 800581e:	d11b      	bne.n	8005858 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0204 	mvn.w	r2, #4
 8005828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f8c4 	bl	80059cc <HAL_TIM_IC_CaptureCallback>
 8005844:	e005      	b.n	8005852 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f8b6 	bl	80059b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f8c7 	bl	80059e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b08      	cmp	r3, #8
 8005864:	d122      	bne.n	80058ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	2b08      	cmp	r3, #8
 8005872:	d11b      	bne.n	80058ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0208 	mvn.w	r2, #8
 800587c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2204      	movs	r2, #4
 8005882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f89a 	bl	80059cc <HAL_TIM_IC_CaptureCallback>
 8005898:	e005      	b.n	80058a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f88c 	bl	80059b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f89d 	bl	80059e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0310 	and.w	r3, r3, #16
 80058b6:	2b10      	cmp	r3, #16
 80058b8:	d122      	bne.n	8005900 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0310 	and.w	r3, r3, #16
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d11b      	bne.n	8005900 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0210 	mvn.w	r2, #16
 80058d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2208      	movs	r2, #8
 80058d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f870 	bl	80059cc <HAL_TIM_IC_CaptureCallback>
 80058ec:	e005      	b.n	80058fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f862 	bl	80059b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f873 	bl	80059e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b01      	cmp	r3, #1
 800590c:	d10e      	bne.n	800592c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b01      	cmp	r3, #1
 800591a:	d107      	bne.n	800592c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0201 	mvn.w	r2, #1
 8005924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fc f9ae 	bl	8001c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005936:	2b80      	cmp	r3, #128	; 0x80
 8005938:	d10e      	bne.n	8005958 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005944:	2b80      	cmp	r3, #128	; 0x80
 8005946:	d107      	bne.n	8005958 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f8e2 	bl	8005b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005962:	2b40      	cmp	r3, #64	; 0x40
 8005964:	d10e      	bne.n	8005984 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005970:	2b40      	cmp	r3, #64	; 0x40
 8005972:	d107      	bne.n	8005984 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800597c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f838 	bl	80059f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b20      	cmp	r3, #32
 8005990:	d10e      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b20      	cmp	r3, #32
 800599e:	d107      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0220 	mvn.w	r2, #32
 80059a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f8ac 	bl	8005b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059b0:	bf00      	nop
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a34      	ldr	r2, [pc, #208]	; (8005aec <TIM_Base_SetConfig+0xe4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00f      	beq.n	8005a40 <TIM_Base_SetConfig+0x38>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a26:	d00b      	beq.n	8005a40 <TIM_Base_SetConfig+0x38>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a31      	ldr	r2, [pc, #196]	; (8005af0 <TIM_Base_SetConfig+0xe8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d007      	beq.n	8005a40 <TIM_Base_SetConfig+0x38>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a30      	ldr	r2, [pc, #192]	; (8005af4 <TIM_Base_SetConfig+0xec>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d003      	beq.n	8005a40 <TIM_Base_SetConfig+0x38>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a2f      	ldr	r2, [pc, #188]	; (8005af8 <TIM_Base_SetConfig+0xf0>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d108      	bne.n	8005a52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a25      	ldr	r2, [pc, #148]	; (8005aec <TIM_Base_SetConfig+0xe4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d01b      	beq.n	8005a92 <TIM_Base_SetConfig+0x8a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a60:	d017      	beq.n	8005a92 <TIM_Base_SetConfig+0x8a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a22      	ldr	r2, [pc, #136]	; (8005af0 <TIM_Base_SetConfig+0xe8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d013      	beq.n	8005a92 <TIM_Base_SetConfig+0x8a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a21      	ldr	r2, [pc, #132]	; (8005af4 <TIM_Base_SetConfig+0xec>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00f      	beq.n	8005a92 <TIM_Base_SetConfig+0x8a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a20      	ldr	r2, [pc, #128]	; (8005af8 <TIM_Base_SetConfig+0xf0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00b      	beq.n	8005a92 <TIM_Base_SetConfig+0x8a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a1f      	ldr	r2, [pc, #124]	; (8005afc <TIM_Base_SetConfig+0xf4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d007      	beq.n	8005a92 <TIM_Base_SetConfig+0x8a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a1e      	ldr	r2, [pc, #120]	; (8005b00 <TIM_Base_SetConfig+0xf8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d003      	beq.n	8005a92 <TIM_Base_SetConfig+0x8a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a1d      	ldr	r2, [pc, #116]	; (8005b04 <TIM_Base_SetConfig+0xfc>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d108      	bne.n	8005aa4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a08      	ldr	r2, [pc, #32]	; (8005aec <TIM_Base_SetConfig+0xe4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d103      	bne.n	8005ad8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	615a      	str	r2, [r3, #20]
}
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40000400 	.word	0x40000400
 8005af4:	40000800 	.word	0x40000800
 8005af8:	40000c00 	.word	0x40000c00
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40014400 	.word	0x40014400
 8005b04:	40014800 	.word	0x40014800

08005b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e0a0      	b.n	8005c84 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d02c      	beq.n	8005ba4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a4f      	ldr	r2, [pc, #316]	; (8005c8c <HAL_UART_Init+0x15c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00e      	beq.n	8005b72 <HAL_UART_Init+0x42>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a4d      	ldr	r2, [pc, #308]	; (8005c90 <HAL_UART_Init+0x160>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d009      	beq.n	8005b72 <HAL_UART_Init+0x42>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a4c      	ldr	r2, [pc, #304]	; (8005c94 <HAL_UART_Init+0x164>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d004      	beq.n	8005b72 <HAL_UART_Init+0x42>
 8005b68:	f240 1173 	movw	r1, #371	; 0x173
 8005b6c:	484a      	ldr	r0, [pc, #296]	; (8005c98 <HAL_UART_Init+0x168>)
 8005b6e:	f7fc f8a2 	bl	8001cb6 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d028      	beq.n	8005bcc <HAL_UART_Init+0x9c>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b82:	d023      	beq.n	8005bcc <HAL_UART_Init+0x9c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b8c:	d01e      	beq.n	8005bcc <HAL_UART_Init+0x9c>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b96:	d019      	beq.n	8005bcc <HAL_UART_Init+0x9c>
 8005b98:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8005b9c:	483e      	ldr	r0, [pc, #248]	; (8005c98 <HAL_UART_Init+0x168>)
 8005b9e:	f7fc f88a 	bl	8001cb6 <assert_failed>
 8005ba2:	e013      	b.n	8005bcc <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a38      	ldr	r2, [pc, #224]	; (8005c8c <HAL_UART_Init+0x15c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00e      	beq.n	8005bcc <HAL_UART_Init+0x9c>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a37      	ldr	r2, [pc, #220]	; (8005c90 <HAL_UART_Init+0x160>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d009      	beq.n	8005bcc <HAL_UART_Init+0x9c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a35      	ldr	r2, [pc, #212]	; (8005c94 <HAL_UART_Init+0x164>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d004      	beq.n	8005bcc <HAL_UART_Init+0x9c>
 8005bc2:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8005bc6:	4834      	ldr	r0, [pc, #208]	; (8005c98 <HAL_UART_Init+0x168>)
 8005bc8:	f7fc f875 	bl	8001cb6 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d009      	beq.n	8005be8 <HAL_UART_Init+0xb8>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bdc:	d004      	beq.n	8005be8 <HAL_UART_Init+0xb8>
 8005bde:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8005be2:	482d      	ldr	r0, [pc, #180]	; (8005c98 <HAL_UART_Init+0x168>)
 8005be4:	f7fc f867 	bl	8001cb6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d009      	beq.n	8005c04 <HAL_UART_Init+0xd4>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf8:	d004      	beq.n	8005c04 <HAL_UART_Init+0xd4>
 8005bfa:	f240 117b 	movw	r1, #379	; 0x17b
 8005bfe:	4826      	ldr	r0, [pc, #152]	; (8005c98 <HAL_UART_Init+0x168>)
 8005c00:	f7fc f859 	bl	8001cb6 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d106      	bne.n	8005c1e <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7fc fbcb 	bl	80023b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2224      	movs	r2, #36	; 0x24
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c34:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fde6 	bl	8006808 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691a      	ldr	r2, [r3, #16]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c5a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40011000 	.word	0x40011000
 8005c90:	40004400 	.word	0x40004400
 8005c94:	40011400 	.word	0x40011400
 8005c98:	08010950 	.word	0x08010950

08005c9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08a      	sub	sp, #40	; 0x28
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	d17c      	bne.n	8005db6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_UART_Transmit+0x2c>
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e075      	b.n	8005db8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d101      	bne.n	8005cda <HAL_UART_Transmit+0x3e>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e06e      	b.n	8005db8 <HAL_UART_Transmit+0x11c>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2221      	movs	r2, #33	; 0x21
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cf0:	f7fd f910 	bl	8002f14 <HAL_GetTick>
 8005cf4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	88fa      	ldrh	r2, [r7, #6]
 8005cfa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	88fa      	ldrh	r2, [r7, #6]
 8005d00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0a:	d108      	bne.n	8005d1e <HAL_UART_Transmit+0x82>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	61bb      	str	r3, [r7, #24]
 8005d1c:	e003      	b.n	8005d26 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d2e:	e02a      	b.n	8005d86 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2200      	movs	r2, #0
 8005d38:	2180      	movs	r1, #128	; 0x80
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 fb1e 	bl	800637c <UART_WaitOnFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e036      	b.n	8005db8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10b      	bne.n	8005d68 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	461a      	mov	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d5e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	3302      	adds	r3, #2
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	e007      	b.n	8005d78 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	781a      	ldrb	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	3301      	adds	r3, #1
 8005d76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1cf      	bne.n	8005d30 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2200      	movs	r2, #0
 8005d98:	2140      	movs	r1, #64	; 0x40
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 faee 	bl	800637c <UART_WaitOnFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e006      	b.n	8005db8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	e000      	b.n	8005db8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005db6:	2302      	movs	r3, #2
  }
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3720      	adds	r7, #32
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d11d      	bne.n	8005e16 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <HAL_UART_Receive_IT+0x26>
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e016      	b.n	8005e18 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_UART_Receive_IT+0x38>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e00f      	b.n	8005e18 <HAL_UART_Receive_IT+0x58>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 fb23 	bl	8006458 <UART_Start_Receive_IT>
 8005e12:	4603      	mov	r3, r0
 8005e14:	e000      	b.n	8005e18 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e16:	2302      	movs	r3, #2
  }
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b0ba      	sub	sp, #232	; 0xe8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10f      	bne.n	8005e86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d009      	beq.n	8005e86 <HAL_UART_IRQHandler+0x66>
 8005e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fc07 	bl	8006692 <UART_Receive_IT>
      return;
 8005e84:	e256      	b.n	8006334 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 80de 	beq.w	800604c <HAL_UART_IRQHandler+0x22c>
 8005e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d106      	bne.n	8005eaa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 80d1 	beq.w	800604c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <HAL_UART_IRQHandler+0xae>
 8005eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	f043 0201 	orr.w	r2, r3, #1
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00b      	beq.n	8005ef2 <HAL_UART_IRQHandler+0xd2>
 8005eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	f043 0202 	orr.w	r2, r3, #2
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <HAL_UART_IRQHandler+0xf6>
 8005efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	f043 0204 	orr.w	r2, r3, #4
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d011      	beq.n	8005f46 <HAL_UART_IRQHandler+0x126>
 8005f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d105      	bne.n	8005f3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	f043 0208 	orr.w	r2, r3, #8
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 81ed 	beq.w	800632a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <HAL_UART_IRQHandler+0x14e>
 8005f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fb92 	bl	8006692 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f78:	2b40      	cmp	r3, #64	; 0x40
 8005f7a:	bf0c      	ite	eq
 8005f7c:	2301      	moveq	r3, #1
 8005f7e:	2300      	movne	r3, #0
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d103      	bne.n	8005f9a <HAL_UART_IRQHandler+0x17a>
 8005f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d04f      	beq.n	800603a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa9a 	bl	80064d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005faa:	2b40      	cmp	r3, #64	; 0x40
 8005fac:	d141      	bne.n	8006032 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3314      	adds	r3, #20
 8005fb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3314      	adds	r3, #20
 8005fd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fea:	e841 2300 	strex	r3, r2, [r1]
 8005fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1d9      	bne.n	8005fae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d013      	beq.n	800602a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	4a7d      	ldr	r2, [pc, #500]	; (80061fc <HAL_UART_IRQHandler+0x3dc>)
 8006008:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	4618      	mov	r0, r3
 8006010:	f7fd f96e 	bl	80032f0 <HAL_DMA_Abort_IT>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d016      	beq.n	8006048 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006024:	4610      	mov	r0, r2
 8006026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006028:	e00e      	b.n	8006048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f990 	bl	8006350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006030:	e00a      	b.n	8006048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f98c 	bl	8006350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006038:	e006      	b.n	8006048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f988 	bl	8006350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006046:	e170      	b.n	800632a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006048:	bf00      	nop
    return;
 800604a:	e16e      	b.n	800632a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006050:	2b01      	cmp	r3, #1
 8006052:	f040 814a 	bne.w	80062ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 8143 	beq.w	80062ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 813c 	beq.w	80062ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006072:	2300      	movs	r3, #0
 8006074:	60bb      	str	r3, [r7, #8]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	60bb      	str	r3, [r7, #8]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	60bb      	str	r3, [r7, #8]
 8006086:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006092:	2b40      	cmp	r3, #64	; 0x40
 8006094:	f040 80b4 	bne.w	8006200 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 8140 	beq.w	800632e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060b6:	429a      	cmp	r2, r3
 80060b8:	f080 8139 	bcs.w	800632e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ce:	f000 8088 	beq.w	80061e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060e0:	e853 3f00 	ldrex	r3, [r3]
 80060e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	330c      	adds	r3, #12
 80060fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800610a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1d9      	bne.n	80060d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3314      	adds	r3, #20
 8006124:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800612e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006130:	f023 0301 	bic.w	r3, r3, #1
 8006134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3314      	adds	r3, #20
 800613e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006142:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006146:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800614a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e1      	bne.n	800611e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3314      	adds	r3, #20
 8006160:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800616a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800616c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3314      	adds	r3, #20
 800617a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800617e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006180:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006184:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800618c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e3      	bne.n	800615a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	330c      	adds	r3, #12
 80061a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061aa:	e853 3f00 	ldrex	r3, [r3]
 80061ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b2:	f023 0310 	bic.w	r3, r3, #16
 80061b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	330c      	adds	r3, #12
 80061c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80061c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80061c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e3      	bne.n	80061a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fd f817 	bl	8003210 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	4619      	mov	r1, r3
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f8b6 	bl	8006364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061f8:	e099      	b.n	800632e <HAL_UART_IRQHandler+0x50e>
 80061fa:	bf00      	nop
 80061fc:	0800659b 	.word	0x0800659b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006208:	b29b      	uxth	r3, r3
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 808b 	beq.w	8006332 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800621c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 8086 	beq.w	8006332 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	330c      	adds	r3, #12
 800622c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800623c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	330c      	adds	r3, #12
 8006246:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800624a:	647a      	str	r2, [r7, #68]	; 0x44
 800624c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e3      	bne.n	8006226 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3314      	adds	r3, #20
 8006264:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	623b      	str	r3, [r7, #32]
   return(result);
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	f023 0301 	bic.w	r3, r3, #1
 8006274:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3314      	adds	r3, #20
 800627e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006282:	633a      	str	r2, [r7, #48]	; 0x30
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e3      	bne.n	800625e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	330c      	adds	r3, #12
 80062aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	e853 3f00 	ldrex	r3, [r3]
 80062b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0310 	bic.w	r3, r3, #16
 80062ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	330c      	adds	r3, #12
 80062c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80062c8:	61fa      	str	r2, [r7, #28]
 80062ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	69b9      	ldr	r1, [r7, #24]
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	e841 2300 	strex	r3, r2, [r1]
 80062d4:	617b      	str	r3, [r7, #20]
   return(result);
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e3      	bne.n	80062a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f83e 	bl	8006364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062e8:	e023      	b.n	8006332 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d009      	beq.n	800630a <HAL_UART_IRQHandler+0x4ea>
 80062f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f95d 	bl	80065c2 <UART_Transmit_IT>
    return;
 8006308:	e014      	b.n	8006334 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800630a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00e      	beq.n	8006334 <HAL_UART_IRQHandler+0x514>
 8006316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800631a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d008      	beq.n	8006334 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f99d 	bl	8006662 <UART_EndTransmit_IT>
    return;
 8006328:	e004      	b.n	8006334 <HAL_UART_IRQHandler+0x514>
    return;
 800632a:	bf00      	nop
 800632c:	e002      	b.n	8006334 <HAL_UART_IRQHandler+0x514>
      return;
 800632e:	bf00      	nop
 8006330:	e000      	b.n	8006334 <HAL_UART_IRQHandler+0x514>
      return;
 8006332:	bf00      	nop
  }
}
 8006334:	37e8      	adds	r7, #232	; 0xe8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop

0800633c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b090      	sub	sp, #64	; 0x40
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	4613      	mov	r3, r2
 800638a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638c:	e050      	b.n	8006430 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006394:	d04c      	beq.n	8006430 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006398:	2b00      	cmp	r3, #0
 800639a:	d007      	beq.n	80063ac <UART_WaitOnFlagUntilTimeout+0x30>
 800639c:	f7fc fdba 	bl	8002f14 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d241      	bcs.n	8006430 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	330c      	adds	r3, #12
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	e853 3f00 	ldrex	r3, [r3]
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	330c      	adds	r3, #12
 80063ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063cc:	637a      	str	r2, [r7, #52]	; 0x34
 80063ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e5      	bne.n	80063ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3314      	adds	r3, #20
 80063e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	613b      	str	r3, [r7, #16]
   return(result);
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f023 0301 	bic.w	r3, r3, #1
 80063f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3314      	adds	r3, #20
 80063fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006400:	623a      	str	r2, [r7, #32]
 8006402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006404:	69f9      	ldr	r1, [r7, #28]
 8006406:	6a3a      	ldr	r2, [r7, #32]
 8006408:	e841 2300 	strex	r3, r2, [r1]
 800640c:	61bb      	str	r3, [r7, #24]
   return(result);
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e5      	bne.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2220      	movs	r2, #32
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2220      	movs	r2, #32
 8006420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e00f      	b.n	8006450 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	4013      	ands	r3, r2
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	429a      	cmp	r2, r3
 800643e:	bf0c      	ite	eq
 8006440:	2301      	moveq	r3, #1
 8006442:	2300      	movne	r3, #0
 8006444:	b2db      	uxtb	r3, r3
 8006446:	461a      	mov	r2, r3
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	429a      	cmp	r2, r3
 800644c:	d09f      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3740      	adds	r7, #64	; 0x40
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	88fa      	ldrh	r2, [r7, #6]
 8006470:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	88fa      	ldrh	r2, [r7, #6]
 8006476:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2222      	movs	r2, #34	; 0x22
 8006482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d007      	beq.n	80064a6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695a      	ldr	r2, [r3, #20]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 0201 	orr.w	r2, r2, #1
 80064b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0220 	orr.w	r2, r2, #32
 80064c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b095      	sub	sp, #84	; 0x54
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	330c      	adds	r3, #12
 80064e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e6:	e853 3f00 	ldrex	r3, [r3]
 80064ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	330c      	adds	r3, #12
 80064fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064fc:	643a      	str	r2, [r7, #64]	; 0x40
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e5      	bne.n	80064dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3314      	adds	r3, #20
 8006516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	f023 0301 	bic.w	r3, r3, #1
 8006526:	64bb      	str	r3, [r7, #72]	; 0x48
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3314      	adds	r3, #20
 800652e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006530:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006538:	e841 2300 	strex	r3, r2, [r1]
 800653c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e5      	bne.n	8006510 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	2b01      	cmp	r3, #1
 800654a:	d119      	bne.n	8006580 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	330c      	adds	r3, #12
 8006552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	60bb      	str	r3, [r7, #8]
   return(result);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f023 0310 	bic.w	r3, r3, #16
 8006562:	647b      	str	r3, [r7, #68]	; 0x44
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	330c      	adds	r3, #12
 800656a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800656c:	61ba      	str	r2, [r7, #24]
 800656e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	6979      	ldr	r1, [r7, #20]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	613b      	str	r3, [r7, #16]
   return(result);
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e5      	bne.n	800654c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800658e:	bf00      	nop
 8006590:	3754      	adds	r7, #84	; 0x54
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7ff fecb 	bl	8006350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ba:	bf00      	nop
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b21      	cmp	r3, #33	; 0x21
 80065d4:	d13e      	bne.n	8006654 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065de:	d114      	bne.n	800660a <UART_Transmit_IT+0x48>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d110      	bne.n	800660a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	1c9a      	adds	r2, r3, #2
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	621a      	str	r2, [r3, #32]
 8006608:	e008      	b.n	800661c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	1c59      	adds	r1, r3, #1
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6211      	str	r1, [r2, #32]
 8006614:	781a      	ldrb	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	b29b      	uxth	r3, r3
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	4619      	mov	r1, r3
 800662a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10f      	bne.n	8006650 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800663e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800664e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	e000      	b.n	8006656 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006654:	2302      	movs	r3, #2
  }
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68da      	ldr	r2, [r3, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006678:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff fe5a 	bl	800633c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b08c      	sub	sp, #48	; 0x30
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b22      	cmp	r3, #34	; 0x22
 80066a4:	f040 80ab 	bne.w	80067fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b0:	d117      	bne.n	80066e2 <UART_Receive_IT+0x50>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d113      	bne.n	80066e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066da:	1c9a      	adds	r2, r3, #2
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	629a      	str	r2, [r3, #40]	; 0x28
 80066e0:	e026      	b.n	8006730 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80066e8:	2300      	movs	r3, #0
 80066ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f4:	d007      	beq.n	8006706 <UART_Receive_IT+0x74>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <UART_Receive_IT+0x82>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	701a      	strb	r2, [r3, #0]
 8006712:	e008      	b.n	8006726 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	b2db      	uxtb	r3, r3
 800671c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006720:	b2da      	uxtb	r2, r3
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006734:	b29b      	uxth	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	b29b      	uxth	r3, r3
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	4619      	mov	r1, r3
 800673e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006740:	2b00      	cmp	r3, #0
 8006742:	d15a      	bne.n	80067fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0220 	bic.w	r2, r2, #32
 8006752:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006762:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695a      	ldr	r2, [r3, #20]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0201 	bic.w	r2, r2, #1
 8006772:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	2b01      	cmp	r3, #1
 8006782:	d135      	bne.n	80067f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	330c      	adds	r3, #12
 8006790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	613b      	str	r3, [r7, #16]
   return(result);
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f023 0310 	bic.w	r3, r3, #16
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	330c      	adds	r3, #12
 80067a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067aa:	623a      	str	r2, [r7, #32]
 80067ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	69f9      	ldr	r1, [r7, #28]
 80067b0:	6a3a      	ldr	r2, [r7, #32]
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e5      	bne.n	800678a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0310 	and.w	r3, r3, #16
 80067c8:	2b10      	cmp	r3, #16
 80067ca:	d10a      	bne.n	80067e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067cc:	2300      	movs	r3, #0
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff fdbb 	bl	8006364 <HAL_UARTEx_RxEventCallback>
 80067ee:	e002      	b.n	80067f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7fb f817 	bl	8001824 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	e002      	b.n	8006800 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e000      	b.n	8006800 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80067fe:	2302      	movs	r3, #2
  }
}
 8006800:	4618      	mov	r0, r3
 8006802:	3730      	adds	r7, #48	; 0x30
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800680c:	b0c0      	sub	sp, #256	; 0x100
 800680e:	af00      	add	r7, sp, #0
 8006810:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	4bcf      	ldr	r3, [pc, #828]	; (8006b58 <UART_SetConfig+0x350>)
 800681c:	429a      	cmp	r2, r3
 800681e:	d904      	bls.n	800682a <UART_SetConfig+0x22>
 8006820:	f640 6161 	movw	r1, #3681	; 0xe61
 8006824:	48cd      	ldr	r0, [pc, #820]	; (8006b5c <UART_SetConfig+0x354>)
 8006826:	f7fb fa46 	bl	8001cb6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800682a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <UART_SetConfig+0x42>
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800683e:	d004      	beq.n	800684a <UART_SetConfig+0x42>
 8006840:	f640 6162 	movw	r1, #3682	; 0xe62
 8006844:	48c5      	ldr	r0, [pc, #788]	; (8006b5c <UART_SetConfig+0x354>)
 8006846:	f7fb fa36 	bl	8001cb6 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800684a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d010      	beq.n	8006876 <UART_SetConfig+0x6e>
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685e:	d00a      	beq.n	8006876 <UART_SetConfig+0x6e>
 8006860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800686a:	d004      	beq.n	8006876 <UART_SetConfig+0x6e>
 800686c:	f640 6163 	movw	r1, #3683	; 0xe63
 8006870:	48ba      	ldr	r0, [pc, #744]	; (8006b5c <UART_SetConfig+0x354>)
 8006872:	f7fb fa20 	bl	8001cb6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687a:	695a      	ldr	r2, [r3, #20]
 800687c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8006880:	4013      	ands	r3, r2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d104      	bne.n	8006890 <UART_SetConfig+0x88>
 8006886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d104      	bne.n	800689a <UART_SetConfig+0x92>
 8006890:	f640 6164 	movw	r1, #3684	; 0xe64
 8006894:	48b1      	ldr	r0, [pc, #708]	; (8006b5c <UART_SetConfig+0x354>)
 8006896:	f7fb fa0e 	bl	8001cb6 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800689a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068aa:	68d9      	ldr	r1, [r3, #12]
 80068ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	ea40 0301 	orr.w	r3, r0, r1
 80068b6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	431a      	orrs	r2, r3
 80068c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	431a      	orrs	r2, r3
 80068ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80068da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068e6:	f021 010c 	bic.w	r1, r1, #12
 80068ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068f4:	430b      	orrs	r3, r1
 80068f6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006908:	6999      	ldr	r1, [r3, #24]
 800690a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	ea40 0301 	orr.w	r3, r0, r1
 8006914:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	4b90      	ldr	r3, [pc, #576]	; (8006b60 <UART_SetConfig+0x358>)
 800691e:	429a      	cmp	r2, r3
 8006920:	d005      	beq.n	800692e <UART_SetConfig+0x126>
 8006922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	4b8e      	ldr	r3, [pc, #568]	; (8006b64 <UART_SetConfig+0x35c>)
 800692a:	429a      	cmp	r2, r3
 800692c:	d104      	bne.n	8006938 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800692e:	f7fe f889 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
 8006932:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006936:	e003      	b.n	8006940 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006938:	f7fe f870 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 800693c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800694a:	f040 810f 	bne.w	8006b6c <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800694e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006952:	2200      	movs	r2, #0
 8006954:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006958:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800695c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006960:	4622      	mov	r2, r4
 8006962:	462b      	mov	r3, r5
 8006964:	1891      	adds	r1, r2, r2
 8006966:	65b9      	str	r1, [r7, #88]	; 0x58
 8006968:	415b      	adcs	r3, r3
 800696a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800696c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006970:	4621      	mov	r1, r4
 8006972:	eb12 0801 	adds.w	r8, r2, r1
 8006976:	4629      	mov	r1, r5
 8006978:	eb43 0901 	adc.w	r9, r3, r1
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006988:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800698c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006990:	4690      	mov	r8, r2
 8006992:	4699      	mov	r9, r3
 8006994:	4623      	mov	r3, r4
 8006996:	eb18 0303 	adds.w	r3, r8, r3
 800699a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800699e:	462b      	mov	r3, r5
 80069a0:	eb49 0303 	adc.w	r3, r9, r3
 80069a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069b4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80069b8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80069bc:	460b      	mov	r3, r1
 80069be:	18db      	adds	r3, r3, r3
 80069c0:	653b      	str	r3, [r7, #80]	; 0x50
 80069c2:	4613      	mov	r3, r2
 80069c4:	eb42 0303 	adc.w	r3, r2, r3
 80069c8:	657b      	str	r3, [r7, #84]	; 0x54
 80069ca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80069ce:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80069d2:	f7fa f961 	bl	8000c98 <__aeabi_uldivmod>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4b63      	ldr	r3, [pc, #396]	; (8006b68 <UART_SetConfig+0x360>)
 80069dc:	fba3 2302 	umull	r2, r3, r3, r2
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	011c      	lsls	r4, r3, #4
 80069e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069e8:	2200      	movs	r2, #0
 80069ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069ee:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80069f2:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80069f6:	4642      	mov	r2, r8
 80069f8:	464b      	mov	r3, r9
 80069fa:	1891      	adds	r1, r2, r2
 80069fc:	64b9      	str	r1, [r7, #72]	; 0x48
 80069fe:	415b      	adcs	r3, r3
 8006a00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a06:	4641      	mov	r1, r8
 8006a08:	eb12 0a01 	adds.w	sl, r2, r1
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	eb43 0b01 	adc.w	fp, r3, r1
 8006a12:	f04f 0200 	mov.w	r2, #0
 8006a16:	f04f 0300 	mov.w	r3, #0
 8006a1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a26:	4692      	mov	sl, r2
 8006a28:	469b      	mov	fp, r3
 8006a2a:	4643      	mov	r3, r8
 8006a2c:	eb1a 0303 	adds.w	r3, sl, r3
 8006a30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a34:	464b      	mov	r3, r9
 8006a36:	eb4b 0303 	adc.w	r3, fp, r3
 8006a3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a4a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a52:	460b      	mov	r3, r1
 8006a54:	18db      	adds	r3, r3, r3
 8006a56:	643b      	str	r3, [r7, #64]	; 0x40
 8006a58:	4613      	mov	r3, r2
 8006a5a:	eb42 0303 	adc.w	r3, r2, r3
 8006a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a64:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a68:	f7fa f916 	bl	8000c98 <__aeabi_uldivmod>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4611      	mov	r1, r2
 8006a72:	4b3d      	ldr	r3, [pc, #244]	; (8006b68 <UART_SetConfig+0x360>)
 8006a74:	fba3 2301 	umull	r2, r3, r3, r1
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	2264      	movs	r2, #100	; 0x64
 8006a7c:	fb02 f303 	mul.w	r3, r2, r3
 8006a80:	1acb      	subs	r3, r1, r3
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a88:	4b37      	ldr	r3, [pc, #220]	; (8006b68 <UART_SetConfig+0x360>)
 8006a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a8e:	095b      	lsrs	r3, r3, #5
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a96:	441c      	add	r4, r3
 8006a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006aa2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006aa6:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006aaa:	4642      	mov	r2, r8
 8006aac:	464b      	mov	r3, r9
 8006aae:	1891      	adds	r1, r2, r2
 8006ab0:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ab2:	415b      	adcs	r3, r3
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ab6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006aba:	4641      	mov	r1, r8
 8006abc:	1851      	adds	r1, r2, r1
 8006abe:	6339      	str	r1, [r7, #48]	; 0x30
 8006ac0:	4649      	mov	r1, r9
 8006ac2:	414b      	adcs	r3, r1
 8006ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac6:	f04f 0200 	mov.w	r2, #0
 8006aca:	f04f 0300 	mov.w	r3, #0
 8006ace:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ad2:	4659      	mov	r1, fp
 8006ad4:	00cb      	lsls	r3, r1, #3
 8006ad6:	4651      	mov	r1, sl
 8006ad8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006adc:	4651      	mov	r1, sl
 8006ade:	00ca      	lsls	r2, r1, #3
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	4642      	mov	r2, r8
 8006ae8:	189b      	adds	r3, r3, r2
 8006aea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006aee:	464b      	mov	r3, r9
 8006af0:	460a      	mov	r2, r1
 8006af2:	eb42 0303 	adc.w	r3, r2, r3
 8006af6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b06:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b0a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b0e:	460b      	mov	r3, r1
 8006b10:	18db      	adds	r3, r3, r3
 8006b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b14:	4613      	mov	r3, r2
 8006b16:	eb42 0303 	adc.w	r3, r2, r3
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b20:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b24:	f7fa f8b8 	bl	8000c98 <__aeabi_uldivmod>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	; (8006b68 <UART_SetConfig+0x360>)
 8006b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b32:	095b      	lsrs	r3, r3, #5
 8006b34:	2164      	movs	r1, #100	; 0x64
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	3332      	adds	r3, #50	; 0x32
 8006b40:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <UART_SetConfig+0x360>)
 8006b42:	fba2 2303 	umull	r2, r3, r2, r3
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	f003 0207 	and.w	r2, r3, #7
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4422      	add	r2, r4
 8006b54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b56:	e108      	b.n	8006d6a <UART_SetConfig+0x562>
 8006b58:	00a037a0 	.word	0x00a037a0
 8006b5c:	08010950 	.word	0x08010950
 8006b60:	40011000 	.word	0x40011000
 8006b64:	40011400 	.word	0x40011400
 8006b68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b70:	2200      	movs	r2, #0
 8006b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b7e:	4642      	mov	r2, r8
 8006b80:	464b      	mov	r3, r9
 8006b82:	1891      	adds	r1, r2, r2
 8006b84:	6239      	str	r1, [r7, #32]
 8006b86:	415b      	adcs	r3, r3
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
 8006b8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b8e:	4641      	mov	r1, r8
 8006b90:	1854      	adds	r4, r2, r1
 8006b92:	4649      	mov	r1, r9
 8006b94:	eb43 0501 	adc.w	r5, r3, r1
 8006b98:	f04f 0200 	mov.w	r2, #0
 8006b9c:	f04f 0300 	mov.w	r3, #0
 8006ba0:	00eb      	lsls	r3, r5, #3
 8006ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ba6:	00e2      	lsls	r2, r4, #3
 8006ba8:	4614      	mov	r4, r2
 8006baa:	461d      	mov	r5, r3
 8006bac:	4643      	mov	r3, r8
 8006bae:	18e3      	adds	r3, r4, r3
 8006bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006bb4:	464b      	mov	r3, r9
 8006bb6:	eb45 0303 	adc.w	r3, r5, r3
 8006bba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006bda:	4629      	mov	r1, r5
 8006bdc:	008b      	lsls	r3, r1, #2
 8006bde:	4621      	mov	r1, r4
 8006be0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006be4:	4621      	mov	r1, r4
 8006be6:	008a      	lsls	r2, r1, #2
 8006be8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006bec:	f7fa f854 	bl	8000c98 <__aeabi_uldivmod>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4b60      	ldr	r3, [pc, #384]	; (8006d78 <UART_SetConfig+0x570>)
 8006bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	011c      	lsls	r4, r3, #4
 8006bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c10:	4642      	mov	r2, r8
 8006c12:	464b      	mov	r3, r9
 8006c14:	1891      	adds	r1, r2, r2
 8006c16:	61b9      	str	r1, [r7, #24]
 8006c18:	415b      	adcs	r3, r3
 8006c1a:	61fb      	str	r3, [r7, #28]
 8006c1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c20:	4641      	mov	r1, r8
 8006c22:	1851      	adds	r1, r2, r1
 8006c24:	6139      	str	r1, [r7, #16]
 8006c26:	4649      	mov	r1, r9
 8006c28:	414b      	adcs	r3, r1
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	f04f 0300 	mov.w	r3, #0
 8006c34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c38:	4659      	mov	r1, fp
 8006c3a:	00cb      	lsls	r3, r1, #3
 8006c3c:	4651      	mov	r1, sl
 8006c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c42:	4651      	mov	r1, sl
 8006c44:	00ca      	lsls	r2, r1, #3
 8006c46:	4610      	mov	r0, r2
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	4642      	mov	r2, r8
 8006c4e:	189b      	adds	r3, r3, r2
 8006c50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c54:	464b      	mov	r3, r9
 8006c56:	460a      	mov	r2, r1
 8006c58:	eb42 0303 	adc.w	r3, r2, r3
 8006c5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c78:	4649      	mov	r1, r9
 8006c7a:	008b      	lsls	r3, r1, #2
 8006c7c:	4641      	mov	r1, r8
 8006c7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c82:	4641      	mov	r1, r8
 8006c84:	008a      	lsls	r2, r1, #2
 8006c86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006c8a:	f7fa f805 	bl	8000c98 <__aeabi_uldivmod>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4b39      	ldr	r3, [pc, #228]	; (8006d78 <UART_SetConfig+0x570>)
 8006c94:	fba3 1302 	umull	r1, r3, r3, r2
 8006c98:	095b      	lsrs	r3, r3, #5
 8006c9a:	2164      	movs	r1, #100	; 0x64
 8006c9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	011b      	lsls	r3, r3, #4
 8006ca4:	3332      	adds	r3, #50	; 0x32
 8006ca6:	4a34      	ldr	r2, [pc, #208]	; (8006d78 <UART_SetConfig+0x570>)
 8006ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cac:	095b      	lsrs	r3, r3, #5
 8006cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cb2:	441c      	add	r4, r3
 8006cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cb8:	2200      	movs	r2, #0
 8006cba:	673b      	str	r3, [r7, #112]	; 0x70
 8006cbc:	677a      	str	r2, [r7, #116]	; 0x74
 8006cbe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006cc2:	4642      	mov	r2, r8
 8006cc4:	464b      	mov	r3, r9
 8006cc6:	1891      	adds	r1, r2, r2
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	415b      	adcs	r3, r3
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cd2:	4641      	mov	r1, r8
 8006cd4:	1851      	adds	r1, r2, r1
 8006cd6:	6039      	str	r1, [r7, #0]
 8006cd8:	4649      	mov	r1, r9
 8006cda:	414b      	adcs	r3, r1
 8006cdc:	607b      	str	r3, [r7, #4]
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006cea:	4659      	mov	r1, fp
 8006cec:	00cb      	lsls	r3, r1, #3
 8006cee:	4651      	mov	r1, sl
 8006cf0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cf4:	4651      	mov	r1, sl
 8006cf6:	00ca      	lsls	r2, r1, #3
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	4642      	mov	r2, r8
 8006d00:	189b      	adds	r3, r3, r2
 8006d02:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d04:	464b      	mov	r3, r9
 8006d06:	460a      	mov	r2, r1
 8006d08:	eb42 0303 	adc.w	r3, r2, r3
 8006d0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	663b      	str	r3, [r7, #96]	; 0x60
 8006d18:	667a      	str	r2, [r7, #100]	; 0x64
 8006d1a:	f04f 0200 	mov.w	r2, #0
 8006d1e:	f04f 0300 	mov.w	r3, #0
 8006d22:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d26:	4649      	mov	r1, r9
 8006d28:	008b      	lsls	r3, r1, #2
 8006d2a:	4641      	mov	r1, r8
 8006d2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d30:	4641      	mov	r1, r8
 8006d32:	008a      	lsls	r2, r1, #2
 8006d34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d38:	f7f9 ffae 	bl	8000c98 <__aeabi_uldivmod>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <UART_SetConfig+0x570>)
 8006d42:	fba3 1302 	umull	r1, r3, r3, r2
 8006d46:	095b      	lsrs	r3, r3, #5
 8006d48:	2164      	movs	r1, #100	; 0x64
 8006d4a:	fb01 f303 	mul.w	r3, r1, r3
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	3332      	adds	r3, #50	; 0x32
 8006d54:	4a08      	ldr	r2, [pc, #32]	; (8006d78 <UART_SetConfig+0x570>)
 8006d56:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	f003 020f 	and.w	r2, r3, #15
 8006d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4422      	add	r2, r4
 8006d68:	609a      	str	r2, [r3, #8]
}
 8006d6a:	bf00      	nop
 8006d6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d70:	46bd      	mov	sp, r7
 8006d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d76:	bf00      	nop
 8006d78:	51eb851f 	.word	0x51eb851f

08006d7c <__NVIC_SetPriority>:
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	4603      	mov	r3, r0
 8006d84:	6039      	str	r1, [r7, #0]
 8006d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	db0a      	blt.n	8006da6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	490c      	ldr	r1, [pc, #48]	; (8006dc8 <__NVIC_SetPriority+0x4c>)
 8006d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d9a:	0112      	lsls	r2, r2, #4
 8006d9c:	b2d2      	uxtb	r2, r2
 8006d9e:	440b      	add	r3, r1
 8006da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006da4:	e00a      	b.n	8006dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	4908      	ldr	r1, [pc, #32]	; (8006dcc <__NVIC_SetPriority+0x50>)
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	f003 030f 	and.w	r3, r3, #15
 8006db2:	3b04      	subs	r3, #4
 8006db4:	0112      	lsls	r2, r2, #4
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	440b      	add	r3, r1
 8006dba:	761a      	strb	r2, [r3, #24]
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	e000e100 	.word	0xe000e100
 8006dcc:	e000ed00 	.word	0xe000ed00

08006dd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006dd4:	4b05      	ldr	r3, [pc, #20]	; (8006dec <SysTick_Handler+0x1c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006dd8:	f003 f852 	bl	8009e80 <xTaskGetSchedulerState>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d001      	beq.n	8006de6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006de2:	f001 f861 	bl	8007ea8 <xPortSysTickHandler>
  }
}
 8006de6:	bf00      	nop
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	e000e010 	.word	0xe000e010

08006df0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006df4:	2100      	movs	r1, #0
 8006df6:	f06f 0004 	mvn.w	r0, #4
 8006dfa:	f7ff ffbf 	bl	8006d7c <__NVIC_SetPriority>
#endif
}
 8006dfe:	bf00      	nop
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e0a:	f3ef 8305 	mrs	r3, IPSR
 8006e0e:	603b      	str	r3, [r7, #0]
  return(result);
 8006e10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006e16:	f06f 0305 	mvn.w	r3, #5
 8006e1a:	607b      	str	r3, [r7, #4]
 8006e1c:	e00c      	b.n	8006e38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e1e:	4b0a      	ldr	r3, [pc, #40]	; (8006e48 <osKernelInitialize+0x44>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d105      	bne.n	8006e32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e26:	4b08      	ldr	r3, [pc, #32]	; (8006e48 <osKernelInitialize+0x44>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	607b      	str	r3, [r7, #4]
 8006e30:	e002      	b.n	8006e38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006e32:	f04f 33ff 	mov.w	r3, #4294967295
 8006e36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e38:	687b      	ldr	r3, [r7, #4]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	20000528 	.word	0x20000528

08006e4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e52:	f3ef 8305 	mrs	r3, IPSR
 8006e56:	603b      	str	r3, [r7, #0]
  return(result);
 8006e58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006e5e:	f06f 0305 	mvn.w	r3, #5
 8006e62:	607b      	str	r3, [r7, #4]
 8006e64:	e010      	b.n	8006e88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e66:	4b0b      	ldr	r3, [pc, #44]	; (8006e94 <osKernelStart+0x48>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d109      	bne.n	8006e82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e6e:	f7ff ffbf 	bl	8006df0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e72:	4b08      	ldr	r3, [pc, #32]	; (8006e94 <osKernelStart+0x48>)
 8006e74:	2202      	movs	r2, #2
 8006e76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e78:	f002 fba6 	bl	80095c8 <vTaskStartScheduler>
      stat = osOK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	607b      	str	r3, [r7, #4]
 8006e80:	e002      	b.n	8006e88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006e82:	f04f 33ff 	mov.w	r3, #4294967295
 8006e86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e88:	687b      	ldr	r3, [r7, #4]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000528 	.word	0x20000528

08006e98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08e      	sub	sp, #56	; 0x38
 8006e9c:	af04      	add	r7, sp, #16
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ea8:	f3ef 8305 	mrs	r3, IPSR
 8006eac:	617b      	str	r3, [r7, #20]
  return(result);
 8006eae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d17e      	bne.n	8006fb2 <osThreadNew+0x11a>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d07b      	beq.n	8006fb2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006eba:	2380      	movs	r3, #128	; 0x80
 8006ebc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ebe:	2318      	movs	r3, #24
 8006ec0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d045      	beq.n	8006f5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <osThreadNew+0x48>
        name = attr->name;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d008      	beq.n	8006f06 <osThreadNew+0x6e>
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	2b38      	cmp	r3, #56	; 0x38
 8006ef8:	d805      	bhi.n	8006f06 <osThreadNew+0x6e>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <osThreadNew+0x72>
        return (NULL);
 8006f06:	2300      	movs	r3, #0
 8006f08:	e054      	b.n	8006fb4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	089b      	lsrs	r3, r3, #2
 8006f18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00e      	beq.n	8006f40 <osThreadNew+0xa8>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	2bbb      	cmp	r3, #187	; 0xbb
 8006f28:	d90a      	bls.n	8006f40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d006      	beq.n	8006f40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <osThreadNew+0xa8>
        mem = 1;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	61bb      	str	r3, [r7, #24]
 8006f3e:	e010      	b.n	8006f62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10c      	bne.n	8006f62 <osThreadNew+0xca>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d108      	bne.n	8006f62 <osThreadNew+0xca>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d104      	bne.n	8006f62 <osThreadNew+0xca>
          mem = 0;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	61bb      	str	r3, [r7, #24]
 8006f5c:	e001      	b.n	8006f62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d110      	bne.n	8006f8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f70:	9202      	str	r2, [sp, #8]
 8006f72:	9301      	str	r3, [sp, #4]
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	6a3a      	ldr	r2, [r7, #32]
 8006f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f002 f830 	bl	8008fe4 <xTaskCreateStatic>
 8006f84:	4603      	mov	r3, r0
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	e013      	b.n	8006fb2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d110      	bne.n	8006fb2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	f107 0310 	add.w	r3, r7, #16
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f002 f87b 	bl	800909e <xTaskCreate>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d001      	beq.n	8006fb2 <osThreadNew+0x11a>
            hTask = NULL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006fb2:	693b      	ldr	r3, [r7, #16]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3728      	adds	r7, #40	; 0x28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fc8:	f3ef 8305 	mrs	r3, IPSR
 8006fcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006fce:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <osThreadSuspend+0x20>
    stat = osErrorISR;
 8006fd4:	f06f 0305 	mvn.w	r3, #5
 8006fd8:	617b      	str	r3, [r7, #20]
 8006fda:	e00b      	b.n	8006ff4 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d103      	bne.n	8006fea <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8006fe2:	f06f 0303 	mvn.w	r3, #3
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	e004      	b.n	8006ff4 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8006fee:	6938      	ldr	r0, [r7, #16]
 8006ff0:	f002 f9e4 	bl	80093bc <vTaskSuspend>
  }

  return (stat);
 8006ff4:	697b      	ldr	r3, [r7, #20]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b086      	sub	sp, #24
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800700a:	f3ef 8305 	mrs	r3, IPSR
 800700e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007010:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <osThreadResume+0x20>
    stat = osErrorISR;
 8007016:	f06f 0305 	mvn.w	r3, #5
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	e00b      	b.n	8007036 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d103      	bne.n	800702c <osThreadResume+0x2e>
    stat = osErrorParameter;
 8007024:	f06f 0303 	mvn.w	r3, #3
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	e004      	b.n	8007036 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800702c:	2300      	movs	r3, #0
 800702e:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8007030:	6938      	ldr	r0, [r7, #16]
 8007032:	f002 fa6b 	bl	800950c <vTaskResume>
  }

  return (stat);
 8007036:	697b      	ldr	r3, [r7, #20]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007048:	f3ef 8305 	mrs	r3, IPSR
 800704c:	60bb      	str	r3, [r7, #8]
  return(result);
 800704e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <osDelay+0x1c>
    stat = osErrorISR;
 8007054:	f06f 0305 	mvn.w	r3, #5
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	e007      	b.n	800706c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f002 f974 	bl	8009354 <vTaskDelay>
    }
  }

  return (stat);
 800706c:	68fb      	ldr	r3, [r7, #12]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f003 fced 	bl	800aa5e <pvTimerGetTimerID>
 8007084:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <TimerCallback+0x22>
    callb->func (callb->arg);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	6852      	ldr	r2, [r2, #4]
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3
  }
}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08c      	sub	sp, #48	; 0x30
 80070a4:	af02      	add	r7, sp, #8
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	607a      	str	r2, [r7, #4]
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	460b      	mov	r3, r1
 80070ae:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80070b0:	2300      	movs	r3, #0
 80070b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070b4:	f3ef 8305 	mrs	r3, IPSR
 80070b8:	613b      	str	r3, [r7, #16]
  return(result);
 80070ba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d163      	bne.n	8007188 <osTimerNew+0xe8>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d060      	beq.n	8007188 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80070c6:	2008      	movs	r0, #8
 80070c8:	f000 fa92 	bl	80075f0 <pvPortMalloc>
 80070cc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d059      	beq.n	8007188 <osTimerNew+0xe8>
      callb->func = func;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80070e0:	7afb      	ldrb	r3, [r7, #11]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d102      	bne.n	80070ec <osTimerNew+0x4c>
        reload = pdFALSE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	61fb      	str	r3, [r7, #28]
 80070ea:	e001      	b.n	80070f0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80070ec:	2301      	movs	r3, #1
 80070ee:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80070f0:	f04f 33ff 	mov.w	r3, #4294967295
 80070f4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d01c      	beq.n	800713a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <osTimerNew+0x6e>
          name = attr->name;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d006      	beq.n	8007124 <osTimerNew+0x84>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	2b2b      	cmp	r3, #43	; 0x2b
 800711c:	d902      	bls.n	8007124 <osTimerNew+0x84>
          mem = 1;
 800711e:	2301      	movs	r3, #1
 8007120:	61bb      	str	r3, [r7, #24]
 8007122:	e00c      	b.n	800713e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d108      	bne.n	800713e <osTimerNew+0x9e>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d104      	bne.n	800713e <osTimerNew+0x9e>
            mem = 0;
 8007134:	2300      	movs	r3, #0
 8007136:	61bb      	str	r3, [r7, #24]
 8007138:	e001      	b.n	800713e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d10c      	bne.n	800715e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	9301      	str	r3, [sp, #4]
 800714a:	4b12      	ldr	r3, [pc, #72]	; (8007194 <osTimerNew+0xf4>)
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	2101      	movs	r1, #1
 8007154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007156:	f003 f8da 	bl	800a30e <xTimerCreateStatic>
 800715a:	6238      	str	r0, [r7, #32]
 800715c:	e00b      	b.n	8007176 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d108      	bne.n	8007176 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007164:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <osTimerNew+0xf4>)
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	69fa      	ldr	r2, [r7, #28]
 800716c:	2101      	movs	r1, #1
 800716e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007170:	f003 f8ac 	bl	800a2cc <xTimerCreate>
 8007174:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d105      	bne.n	8007188 <osTimerNew+0xe8>
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <osTimerNew+0xe8>
        vPortFree (callb);
 8007182:	6978      	ldr	r0, [r7, #20]
 8007184:	f000 fb00 	bl	8007788 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007188:	6a3b      	ldr	r3, [r7, #32]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3728      	adds	r7, #40	; 0x28
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	08007077 	.word	0x08007077

08007198 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af02      	add	r7, sp, #8
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a6:	f3ef 8305 	mrs	r3, IPSR
 80071aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80071ac:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <osTimerStart+0x22>
    stat = osErrorISR;
 80071b2:	f06f 0305 	mvn.w	r3, #5
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	e017      	b.n	80071ea <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <osTimerStart+0x30>
    stat = osErrorParameter;
 80071c0:	f06f 0303 	mvn.w	r3, #3
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	e010      	b.n	80071ea <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80071c8:	2300      	movs	r3, #0
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	2300      	movs	r3, #0
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	2104      	movs	r1, #4
 80071d2:	6938      	ldr	r0, [r7, #16]
 80071d4:	f003 f914 	bl	800a400 <xTimerGenericCommand>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d102      	bne.n	80071e4 <osTimerStart+0x4c>
      stat = osOK;
 80071de:	2300      	movs	r3, #0
 80071e0:	617b      	str	r3, [r7, #20]
 80071e2:	e002      	b.n	80071ea <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80071e4:	f06f 0302 	mvn.w	r3, #2
 80071e8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80071ea:	697b      	ldr	r3, [r7, #20]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af02      	add	r7, sp, #8
 80071fa:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007200:	f3ef 8305 	mrs	r3, IPSR
 8007204:	60fb      	str	r3, [r7, #12]
  return(result);
 8007206:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <osTimerStop+0x20>
    stat = osErrorISR;
 800720c:	f06f 0305 	mvn.w	r3, #5
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	e021      	b.n	8007258 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800721a:	f06f 0303 	mvn.w	r3, #3
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	e01a      	b.n	8007258 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8007222:	6938      	ldr	r0, [r7, #16]
 8007224:	f003 fbf2 	bl	800aa0c <xTimerIsTimerActive>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d103      	bne.n	8007236 <osTimerStop+0x42>
      stat = osErrorResource;
 800722e:	f06f 0302 	mvn.w	r3, #2
 8007232:	617b      	str	r3, [r7, #20]
 8007234:	e010      	b.n	8007258 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8007236:	2300      	movs	r3, #0
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	2300      	movs	r3, #0
 800723c:	2200      	movs	r2, #0
 800723e:	2103      	movs	r1, #3
 8007240:	6938      	ldr	r0, [r7, #16]
 8007242:	f003 f8dd 	bl	800a400 <xTimerGenericCommand>
 8007246:	4603      	mov	r3, r0
 8007248:	2b01      	cmp	r3, #1
 800724a:	d102      	bne.n	8007252 <osTimerStop+0x5e>
        stat = osOK;
 800724c:	2300      	movs	r3, #0
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	e002      	b.n	8007258 <osTimerStop+0x64>
      } else {
        stat = osError;
 8007252:	f04f 33ff 	mov.w	r3, #4294967295
 8007256:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007258:	697b      	ldr	r3, [r7, #20]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007262:	b580      	push	{r7, lr}
 8007264:	b08a      	sub	sp, #40	; 0x28
 8007266:	af02      	add	r7, sp, #8
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800726e:	2300      	movs	r3, #0
 8007270:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007272:	f3ef 8305 	mrs	r3, IPSR
 8007276:	613b      	str	r3, [r7, #16]
  return(result);
 8007278:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800727a:	2b00      	cmp	r3, #0
 800727c:	d175      	bne.n	800736a <osSemaphoreNew+0x108>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d072      	beq.n	800736a <osSemaphoreNew+0x108>
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	429a      	cmp	r2, r3
 800728a:	d86e      	bhi.n	800736a <osSemaphoreNew+0x108>
    mem = -1;
 800728c:	f04f 33ff 	mov.w	r3, #4294967295
 8007290:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d015      	beq.n	80072c4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <osSemaphoreNew+0x4c>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	2b4f      	cmp	r3, #79	; 0x4f
 80072a6:	d902      	bls.n	80072ae <osSemaphoreNew+0x4c>
        mem = 1;
 80072a8:	2301      	movs	r3, #1
 80072aa:	61bb      	str	r3, [r7, #24]
 80072ac:	e00c      	b.n	80072c8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d108      	bne.n	80072c8 <osSemaphoreNew+0x66>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d104      	bne.n	80072c8 <osSemaphoreNew+0x66>
          mem = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	e001      	b.n	80072c8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80072c4:	2300      	movs	r3, #0
 80072c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ce:	d04c      	beq.n	800736a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d128      	bne.n	8007328 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d10a      	bne.n	80072f2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2203      	movs	r2, #3
 80072e2:	9200      	str	r2, [sp, #0]
 80072e4:	2200      	movs	r2, #0
 80072e6:	2100      	movs	r1, #0
 80072e8:	2001      	movs	r0, #1
 80072ea:	f000 fed5 	bl	8008098 <xQueueGenericCreateStatic>
 80072ee:	61f8      	str	r0, [r7, #28]
 80072f0:	e005      	b.n	80072fe <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80072f2:	2203      	movs	r2, #3
 80072f4:	2100      	movs	r1, #0
 80072f6:	2001      	movs	r0, #1
 80072f8:	f000 ff46 	bl	8008188 <xQueueGenericCreate>
 80072fc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d022      	beq.n	800734a <osSemaphoreNew+0xe8>
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d01f      	beq.n	800734a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800730a:	2300      	movs	r3, #0
 800730c:	2200      	movs	r2, #0
 800730e:	2100      	movs	r1, #0
 8007310:	69f8      	ldr	r0, [r7, #28]
 8007312:	f001 f801 	bl	8008318 <xQueueGenericSend>
 8007316:	4603      	mov	r3, r0
 8007318:	2b01      	cmp	r3, #1
 800731a:	d016      	beq.n	800734a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800731c:	69f8      	ldr	r0, [r7, #28]
 800731e:	f001 fc8d 	bl	8008c3c <vQueueDelete>
            hSemaphore = NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	61fb      	str	r3, [r7, #28]
 8007326:	e010      	b.n	800734a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d108      	bne.n	8007340 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	461a      	mov	r2, r3
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 ff83 	bl	8008242 <xQueueCreateCountingSemaphoreStatic>
 800733c:	61f8      	str	r0, [r7, #28]
 800733e:	e004      	b.n	800734a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007340:	68b9      	ldr	r1, [r7, #8]
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 ffb4 	bl	80082b0 <xQueueCreateCountingSemaphore>
 8007348:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00c      	beq.n	800736a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <osSemaphoreNew+0xfc>
          name = attr->name;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	e001      	b.n	8007362 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800735e:	2300      	movs	r3, #0
 8007360:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007362:	6979      	ldr	r1, [r7, #20]
 8007364:	69f8      	ldr	r0, [r7, #28]
 8007366:	f001 fdb5 	bl	8008ed4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800736a:	69fb      	ldr	r3, [r7, #28]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3720      	adds	r7, #32
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d103      	bne.n	8007394 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800738c:	f06f 0303 	mvn.w	r3, #3
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	e039      	b.n	8007408 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007394:	f3ef 8305 	mrs	r3, IPSR
 8007398:	60fb      	str	r3, [r7, #12]
  return(result);
 800739a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800739c:	2b00      	cmp	r3, #0
 800739e:	d022      	beq.n	80073e6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80073a6:	f06f 0303 	mvn.w	r3, #3
 80073aa:	617b      	str	r3, [r7, #20]
 80073ac:	e02c      	b.n	8007408 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80073ae:	2300      	movs	r3, #0
 80073b0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80073b2:	f107 0308 	add.w	r3, r7, #8
 80073b6:	461a      	mov	r2, r3
 80073b8:	2100      	movs	r1, #0
 80073ba:	6938      	ldr	r0, [r7, #16]
 80073bc:	f001 fbbe 	bl	8008b3c <xQueueReceiveFromISR>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d003      	beq.n	80073ce <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80073c6:	f06f 0302 	mvn.w	r3, #2
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	e01c      	b.n	8007408 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d019      	beq.n	8007408 <osSemaphoreAcquire+0x94>
 80073d4:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <osSemaphoreAcquire+0xa0>)
 80073d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	e010      	b.n	8007408 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6938      	ldr	r0, [r7, #16]
 80073ea:	f001 fa9b 	bl	8008924 <xQueueSemaphoreTake>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d009      	beq.n	8007408 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80073fa:	f06f 0301 	mvn.w	r3, #1
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	e002      	b.n	8007408 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007402:	f06f 0302 	mvn.w	r3, #2
 8007406:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007408:	697b      	ldr	r3, [r7, #20]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	e000ed04 	.word	0xe000ed04

08007418 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007424:	2300      	movs	r3, #0
 8007426:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d103      	bne.n	8007436 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800742e:	f06f 0303 	mvn.w	r3, #3
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	e02c      	b.n	8007490 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007436:	f3ef 8305 	mrs	r3, IPSR
 800743a:	60fb      	str	r3, [r7, #12]
  return(result);
 800743c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800743e:	2b00      	cmp	r3, #0
 8007440:	d01a      	beq.n	8007478 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007442:	2300      	movs	r3, #0
 8007444:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007446:	f107 0308 	add.w	r3, r7, #8
 800744a:	4619      	mov	r1, r3
 800744c:	6938      	ldr	r0, [r7, #16]
 800744e:	f001 f8fc 	bl	800864a <xQueueGiveFromISR>
 8007452:	4603      	mov	r3, r0
 8007454:	2b01      	cmp	r3, #1
 8007456:	d003      	beq.n	8007460 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007458:	f06f 0302 	mvn.w	r3, #2
 800745c:	617b      	str	r3, [r7, #20]
 800745e:	e017      	b.n	8007490 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d014      	beq.n	8007490 <osSemaphoreRelease+0x78>
 8007466:	4b0d      	ldr	r3, [pc, #52]	; (800749c <osSemaphoreRelease+0x84>)
 8007468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	e00b      	b.n	8007490 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007478:	2300      	movs	r3, #0
 800747a:	2200      	movs	r2, #0
 800747c:	2100      	movs	r1, #0
 800747e:	6938      	ldr	r0, [r7, #16]
 8007480:	f000 ff4a 	bl	8008318 <xQueueGenericSend>
 8007484:	4603      	mov	r3, r0
 8007486:	2b01      	cmp	r3, #1
 8007488:	d002      	beq.n	8007490 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800748a:	f06f 0302 	mvn.w	r3, #2
 800748e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007490:	697b      	ldr	r3, [r7, #20]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	e000ed04 	.word	0xe000ed04

080074a0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b08a      	sub	sp, #40	; 0x28
 80074a4:	af02      	add	r7, sp, #8
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80074ac:	2300      	movs	r3, #0
 80074ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b0:	f3ef 8305 	mrs	r3, IPSR
 80074b4:	613b      	str	r3, [r7, #16]
  return(result);
 80074b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d15f      	bne.n	800757c <osMessageQueueNew+0xdc>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d05c      	beq.n	800757c <osMessageQueueNew+0xdc>
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d059      	beq.n	800757c <osMessageQueueNew+0xdc>
    mem = -1;
 80074c8:	f04f 33ff 	mov.w	r3, #4294967295
 80074cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d029      	beq.n	8007528 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d012      	beq.n	8007502 <osMessageQueueNew+0x62>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	2b4f      	cmp	r3, #79	; 0x4f
 80074e2:	d90e      	bls.n	8007502 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00a      	beq.n	8007502 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	695a      	ldr	r2, [r3, #20]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	fb01 f303 	mul.w	r3, r1, r3
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d302      	bcc.n	8007502 <osMessageQueueNew+0x62>
        mem = 1;
 80074fc:	2301      	movs	r3, #1
 80074fe:	61bb      	str	r3, [r7, #24]
 8007500:	e014      	b.n	800752c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d110      	bne.n	800752c <osMessageQueueNew+0x8c>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10c      	bne.n	800752c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007516:	2b00      	cmp	r3, #0
 8007518:	d108      	bne.n	800752c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d104      	bne.n	800752c <osMessageQueueNew+0x8c>
          mem = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	61bb      	str	r3, [r7, #24]
 8007526:	e001      	b.n	800752c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d10b      	bne.n	800754a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	2100      	movs	r1, #0
 800753c:	9100      	str	r1, [sp, #0]
 800753e:	68b9      	ldr	r1, [r7, #8]
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 fda9 	bl	8008098 <xQueueGenericCreateStatic>
 8007546:	61f8      	str	r0, [r7, #28]
 8007548:	e008      	b.n	800755c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d105      	bne.n	800755c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007550:	2200      	movs	r2, #0
 8007552:	68b9      	ldr	r1, [r7, #8]
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 fe17 	bl	8008188 <xQueueGenericCreate>
 800755a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00c      	beq.n	800757c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	e001      	b.n	8007574 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007570:	2300      	movs	r3, #0
 8007572:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007574:	6979      	ldr	r1, [r7, #20]
 8007576:	69f8      	ldr	r0, [r7, #28]
 8007578:	f001 fcac 	bl	8008ed4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800757c:	69fb      	ldr	r3, [r7, #28]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3720      	adds	r7, #32
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4a07      	ldr	r2, [pc, #28]	; (80075b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007598:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	4a06      	ldr	r2, [pc, #24]	; (80075b8 <vApplicationGetIdleTaskMemory+0x30>)
 800759e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2280      	movs	r2, #128	; 0x80
 80075a4:	601a      	str	r2, [r3, #0]
}
 80075a6:	bf00      	nop
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	2000052c 	.word	0x2000052c
 80075b8:	200005e8 	.word	0x200005e8

080075bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4a07      	ldr	r2, [pc, #28]	; (80075e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80075cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	4a06      	ldr	r2, [pc, #24]	; (80075ec <vApplicationGetTimerTaskMemory+0x30>)
 80075d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075da:	601a      	str	r2, [r3, #0]
}
 80075dc:	bf00      	nop
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	200007e8 	.word	0x200007e8
 80075ec:	200008a4 	.word	0x200008a4

080075f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	; 0x28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075f8:	2300      	movs	r3, #0
 80075fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075fc:	f002 f854 	bl	80096a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007600:	4b5b      	ldr	r3, [pc, #364]	; (8007770 <pvPortMalloc+0x180>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007608:	f000 f920 	bl	800784c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800760c:	4b59      	ldr	r3, [pc, #356]	; (8007774 <pvPortMalloc+0x184>)
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4013      	ands	r3, r2
 8007614:	2b00      	cmp	r3, #0
 8007616:	f040 8093 	bne.w	8007740 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d01d      	beq.n	800765c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007620:	2208      	movs	r2, #8
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4413      	add	r3, r2
 8007626:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	2b00      	cmp	r3, #0
 8007630:	d014      	beq.n	800765c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f023 0307 	bic.w	r3, r3, #7
 8007638:	3308      	adds	r3, #8
 800763a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f003 0307 	and.w	r3, r3, #7
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007658:	bf00      	nop
 800765a:	e7fe      	b.n	800765a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d06e      	beq.n	8007740 <pvPortMalloc+0x150>
 8007662:	4b45      	ldr	r3, [pc, #276]	; (8007778 <pvPortMalloc+0x188>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	429a      	cmp	r2, r3
 800766a:	d869      	bhi.n	8007740 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800766c:	4b43      	ldr	r3, [pc, #268]	; (800777c <pvPortMalloc+0x18c>)
 800766e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007670:	4b42      	ldr	r3, [pc, #264]	; (800777c <pvPortMalloc+0x18c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007676:	e004      	b.n	8007682 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	429a      	cmp	r2, r3
 800768a:	d903      	bls.n	8007694 <pvPortMalloc+0xa4>
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1f1      	bne.n	8007678 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007694:	4b36      	ldr	r3, [pc, #216]	; (8007770 <pvPortMalloc+0x180>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800769a:	429a      	cmp	r2, r3
 800769c:	d050      	beq.n	8007740 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2208      	movs	r2, #8
 80076a4:	4413      	add	r3, r2
 80076a6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	1ad2      	subs	r2, r2, r3
 80076b8:	2308      	movs	r3, #8
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	429a      	cmp	r2, r3
 80076be:	d91f      	bls.n	8007700 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4413      	add	r3, r2
 80076c6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <pvPortMalloc+0xf8>
	__asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	613b      	str	r3, [r7, #16]
}
 80076e4:	bf00      	nop
 80076e6:	e7fe      	b.n	80076e6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	1ad2      	subs	r2, r2, r3
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076fa:	69b8      	ldr	r0, [r7, #24]
 80076fc:	f000 f908 	bl	8007910 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007700:	4b1d      	ldr	r3, [pc, #116]	; (8007778 <pvPortMalloc+0x188>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	4a1b      	ldr	r2, [pc, #108]	; (8007778 <pvPortMalloc+0x188>)
 800770c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800770e:	4b1a      	ldr	r3, [pc, #104]	; (8007778 <pvPortMalloc+0x188>)
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	4b1b      	ldr	r3, [pc, #108]	; (8007780 <pvPortMalloc+0x190>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d203      	bcs.n	8007722 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800771a:	4b17      	ldr	r3, [pc, #92]	; (8007778 <pvPortMalloc+0x188>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a18      	ldr	r2, [pc, #96]	; (8007780 <pvPortMalloc+0x190>)
 8007720:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	4b13      	ldr	r3, [pc, #76]	; (8007774 <pvPortMalloc+0x184>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	431a      	orrs	r2, r3
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007736:	4b13      	ldr	r3, [pc, #76]	; (8007784 <pvPortMalloc+0x194>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3301      	adds	r3, #1
 800773c:	4a11      	ldr	r2, [pc, #68]	; (8007784 <pvPortMalloc+0x194>)
 800773e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007740:	f001 ffc0 	bl	80096c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <pvPortMalloc+0x174>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	60fb      	str	r3, [r7, #12]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <pvPortMalloc+0x172>
	return pvReturn;
 8007764:	69fb      	ldr	r3, [r7, #28]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3728      	adds	r7, #40	; 0x28
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	200048ac 	.word	0x200048ac
 8007774:	200048c0 	.word	0x200048c0
 8007778:	200048b0 	.word	0x200048b0
 800777c:	200048a4 	.word	0x200048a4
 8007780:	200048b4 	.word	0x200048b4
 8007784:	200048b8 	.word	0x200048b8

08007788 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d04d      	beq.n	8007836 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800779a:	2308      	movs	r3, #8
 800779c:	425b      	negs	r3, r3
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4413      	add	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	4b24      	ldr	r3, [pc, #144]	; (8007840 <vPortFree+0xb8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4013      	ands	r3, r2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10a      	bne.n	80077cc <vPortFree+0x44>
	__asm volatile
 80077b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	60fb      	str	r3, [r7, #12]
}
 80077c8:	bf00      	nop
 80077ca:	e7fe      	b.n	80077ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00a      	beq.n	80077ea <vPortFree+0x62>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	60bb      	str	r3, [r7, #8]
}
 80077e6:	bf00      	nop
 80077e8:	e7fe      	b.n	80077e8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	4b14      	ldr	r3, [pc, #80]	; (8007840 <vPortFree+0xb8>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4013      	ands	r3, r2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01e      	beq.n	8007836 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d11a      	bne.n	8007836 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	4b0e      	ldr	r3, [pc, #56]	; (8007840 <vPortFree+0xb8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	43db      	mvns	r3, r3
 800780a:	401a      	ands	r2, r3
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007810:	f001 ff4a 	bl	80096a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	4b0a      	ldr	r3, [pc, #40]	; (8007844 <vPortFree+0xbc>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4413      	add	r3, r2
 800781e:	4a09      	ldr	r2, [pc, #36]	; (8007844 <vPortFree+0xbc>)
 8007820:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007822:	6938      	ldr	r0, [r7, #16]
 8007824:	f000 f874 	bl	8007910 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007828:	4b07      	ldr	r3, [pc, #28]	; (8007848 <vPortFree+0xc0>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3301      	adds	r3, #1
 800782e:	4a06      	ldr	r2, [pc, #24]	; (8007848 <vPortFree+0xc0>)
 8007830:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007832:	f001 ff47 	bl	80096c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007836:	bf00      	nop
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	200048c0 	.word	0x200048c0
 8007844:	200048b0 	.word	0x200048b0
 8007848:	200048bc 	.word	0x200048bc

0800784c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007852:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007856:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007858:	4b27      	ldr	r3, [pc, #156]	; (80078f8 <prvHeapInit+0xac>)
 800785a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00c      	beq.n	8007880 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3307      	adds	r3, #7
 800786a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f023 0307 	bic.w	r3, r3, #7
 8007872:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	4a1f      	ldr	r2, [pc, #124]	; (80078f8 <prvHeapInit+0xac>)
 800787c:	4413      	add	r3, r2
 800787e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007884:	4a1d      	ldr	r2, [pc, #116]	; (80078fc <prvHeapInit+0xb0>)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800788a:	4b1c      	ldr	r3, [pc, #112]	; (80078fc <prvHeapInit+0xb0>)
 800788c:	2200      	movs	r2, #0
 800788e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	4413      	add	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007898:	2208      	movs	r2, #8
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	1a9b      	subs	r3, r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f023 0307 	bic.w	r3, r3, #7
 80078a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4a15      	ldr	r2, [pc, #84]	; (8007900 <prvHeapInit+0xb4>)
 80078ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078ae:	4b14      	ldr	r3, [pc, #80]	; (8007900 <prvHeapInit+0xb4>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2200      	movs	r2, #0
 80078b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078b6:	4b12      	ldr	r3, [pc, #72]	; (8007900 <prvHeapInit+0xb4>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2200      	movs	r2, #0
 80078bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	1ad2      	subs	r2, r2, r3
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078cc:	4b0c      	ldr	r3, [pc, #48]	; (8007900 <prvHeapInit+0xb4>)
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	4a0a      	ldr	r2, [pc, #40]	; (8007904 <prvHeapInit+0xb8>)
 80078da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	4a09      	ldr	r2, [pc, #36]	; (8007908 <prvHeapInit+0xbc>)
 80078e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078e4:	4b09      	ldr	r3, [pc, #36]	; (800790c <prvHeapInit+0xc0>)
 80078e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078ea:	601a      	str	r2, [r3, #0]
}
 80078ec:	bf00      	nop
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	20000ca4 	.word	0x20000ca4
 80078fc:	200048a4 	.word	0x200048a4
 8007900:	200048ac 	.word	0x200048ac
 8007904:	200048b4 	.word	0x200048b4
 8007908:	200048b0 	.word	0x200048b0
 800790c:	200048c0 	.word	0x200048c0

08007910 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007918:	4b28      	ldr	r3, [pc, #160]	; (80079bc <prvInsertBlockIntoFreeList+0xac>)
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e002      	b.n	8007924 <prvInsertBlockIntoFreeList+0x14>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	429a      	cmp	r2, r3
 800792c:	d8f7      	bhi.n	800791e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	4413      	add	r3, r2
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	429a      	cmp	r2, r3
 800793e:	d108      	bne.n	8007952 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	441a      	add	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	441a      	add	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	d118      	bne.n	8007998 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	4b15      	ldr	r3, [pc, #84]	; (80079c0 <prvInsertBlockIntoFreeList+0xb0>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	429a      	cmp	r2, r3
 8007970:	d00d      	beq.n	800798e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	441a      	add	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	e008      	b.n	80079a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800798e:	4b0c      	ldr	r3, [pc, #48]	; (80079c0 <prvInsertBlockIntoFreeList+0xb0>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	e003      	b.n	80079a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d002      	beq.n	80079ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079ae:	bf00      	nop
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	200048a4 	.word	0x200048a4
 80079c0:	200048ac 	.word	0x200048ac

080079c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f103 0208 	add.w	r2, r3, #8
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f04f 32ff 	mov.w	r2, #4294967295
 80079dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f103 0208 	add.w	r2, r3, #8
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f103 0208 	add.w	r2, r3, #8
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b085      	sub	sp, #20
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	601a      	str	r2, [r3, #0]
}
 8007a5a:	bf00      	nop
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a66:	b480      	push	{r7}
 8007a68:	b085      	sub	sp, #20
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7c:	d103      	bne.n	8007a86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	e00c      	b.n	8007aa0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3308      	adds	r3, #8
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	e002      	b.n	8007a94 <vListInsert+0x2e>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	60fb      	str	r3, [r7, #12]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d2f6      	bcs.n	8007a8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	601a      	str	r2, [r3, #0]
}
 8007acc:	bf00      	nop
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	6892      	ldr	r2, [r2, #8]
 8007aee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	6852      	ldr	r2, [r2, #4]
 8007af8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d103      	bne.n	8007b0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	1e5a      	subs	r2, r3, #1
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	3b04      	subs	r3, #4
 8007b3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3b04      	subs	r3, #4
 8007b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f023 0201 	bic.w	r2, r3, #1
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3b04      	subs	r3, #4
 8007b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b5c:	4a0c      	ldr	r2, [pc, #48]	; (8007b90 <pxPortInitialiseStack+0x64>)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3b14      	subs	r3, #20
 8007b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3b04      	subs	r3, #4
 8007b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f06f 0202 	mvn.w	r2, #2
 8007b7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3b20      	subs	r3, #32
 8007b80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b82:	68fb      	ldr	r3, [r7, #12]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	08007b95 	.word	0x08007b95

08007b94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b9e:	4b12      	ldr	r3, [pc, #72]	; (8007be8 <prvTaskExitError+0x54>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba6:	d00a      	beq.n	8007bbe <prvTaskExitError+0x2a>
	__asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	60fb      	str	r3, [r7, #12]
}
 8007bba:	bf00      	nop
 8007bbc:	e7fe      	b.n	8007bbc <prvTaskExitError+0x28>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	60bb      	str	r3, [r7, #8]
}
 8007bd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bd2:	bf00      	nop
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0fc      	beq.n	8007bd4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bda:	bf00      	nop
 8007bdc:	bf00      	nop
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	20000034 	.word	0x20000034
 8007bec:	00000000 	.word	0x00000000

08007bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bf0:	4b07      	ldr	r3, [pc, #28]	; (8007c10 <pxCurrentTCBConst2>)
 8007bf2:	6819      	ldr	r1, [r3, #0]
 8007bf4:	6808      	ldr	r0, [r1, #0]
 8007bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfa:	f380 8809 	msr	PSP, r0
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f04f 0000 	mov.w	r0, #0
 8007c06:	f380 8811 	msr	BASEPRI, r0
 8007c0a:	4770      	bx	lr
 8007c0c:	f3af 8000 	nop.w

08007c10 <pxCurrentTCBConst2>:
 8007c10:	2000490c 	.word	0x2000490c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop

08007c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c18:	4808      	ldr	r0, [pc, #32]	; (8007c3c <prvPortStartFirstTask+0x24>)
 8007c1a:	6800      	ldr	r0, [r0, #0]
 8007c1c:	6800      	ldr	r0, [r0, #0]
 8007c1e:	f380 8808 	msr	MSP, r0
 8007c22:	f04f 0000 	mov.w	r0, #0
 8007c26:	f380 8814 	msr	CONTROL, r0
 8007c2a:	b662      	cpsie	i
 8007c2c:	b661      	cpsie	f
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	df00      	svc	0
 8007c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c3a:	bf00      	nop
 8007c3c:	e000ed08 	.word	0xe000ed08

08007c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c46:	4b46      	ldr	r3, [pc, #280]	; (8007d60 <xPortStartScheduler+0x120>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a46      	ldr	r2, [pc, #280]	; (8007d64 <xPortStartScheduler+0x124>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d10a      	bne.n	8007c66 <xPortStartScheduler+0x26>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	613b      	str	r3, [r7, #16]
}
 8007c62:	bf00      	nop
 8007c64:	e7fe      	b.n	8007c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c66:	4b3e      	ldr	r3, [pc, #248]	; (8007d60 <xPortStartScheduler+0x120>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a3f      	ldr	r2, [pc, #252]	; (8007d68 <xPortStartScheduler+0x128>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d10a      	bne.n	8007c86 <xPortStartScheduler+0x46>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	60fb      	str	r3, [r7, #12]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c86:	4b39      	ldr	r3, [pc, #228]	; (8007d6c <xPortStartScheduler+0x12c>)
 8007c88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	22ff      	movs	r2, #255	; 0xff
 8007c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	4b31      	ldr	r3, [pc, #196]	; (8007d70 <xPortStartScheduler+0x130>)
 8007cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cae:	4b31      	ldr	r3, [pc, #196]	; (8007d74 <xPortStartScheduler+0x134>)
 8007cb0:	2207      	movs	r2, #7
 8007cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cb4:	e009      	b.n	8007cca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007cb6:	4b2f      	ldr	r3, [pc, #188]	; (8007d74 <xPortStartScheduler+0x134>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	4a2d      	ldr	r2, [pc, #180]	; (8007d74 <xPortStartScheduler+0x134>)
 8007cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd2:	2b80      	cmp	r3, #128	; 0x80
 8007cd4:	d0ef      	beq.n	8007cb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cd6:	4b27      	ldr	r3, [pc, #156]	; (8007d74 <xPortStartScheduler+0x134>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f1c3 0307 	rsb	r3, r3, #7
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d00a      	beq.n	8007cf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	60bb      	str	r3, [r7, #8]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cf8:	4b1e      	ldr	r3, [pc, #120]	; (8007d74 <xPortStartScheduler+0x134>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	021b      	lsls	r3, r3, #8
 8007cfe:	4a1d      	ldr	r2, [pc, #116]	; (8007d74 <xPortStartScheduler+0x134>)
 8007d00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d02:	4b1c      	ldr	r3, [pc, #112]	; (8007d74 <xPortStartScheduler+0x134>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d0a:	4a1a      	ldr	r2, [pc, #104]	; (8007d74 <xPortStartScheduler+0x134>)
 8007d0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d16:	4b18      	ldr	r3, [pc, #96]	; (8007d78 <xPortStartScheduler+0x138>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a17      	ldr	r2, [pc, #92]	; (8007d78 <xPortStartScheduler+0x138>)
 8007d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d22:	4b15      	ldr	r3, [pc, #84]	; (8007d78 <xPortStartScheduler+0x138>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a14      	ldr	r2, [pc, #80]	; (8007d78 <xPortStartScheduler+0x138>)
 8007d28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d2e:	f000 f8dd 	bl	8007eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d32:	4b12      	ldr	r3, [pc, #72]	; (8007d7c <xPortStartScheduler+0x13c>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d38:	f000 f8fc 	bl	8007f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d3c:	4b10      	ldr	r3, [pc, #64]	; (8007d80 <xPortStartScheduler+0x140>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a0f      	ldr	r2, [pc, #60]	; (8007d80 <xPortStartScheduler+0x140>)
 8007d42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d48:	f7ff ff66 	bl	8007c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d4c:	f001 fe22 	bl	8009994 <vTaskSwitchContext>
	prvTaskExitError();
 8007d50:	f7ff ff20 	bl	8007b94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	e000ed00 	.word	0xe000ed00
 8007d64:	410fc271 	.word	0x410fc271
 8007d68:	410fc270 	.word	0x410fc270
 8007d6c:	e000e400 	.word	0xe000e400
 8007d70:	200048c4 	.word	0x200048c4
 8007d74:	200048c8 	.word	0x200048c8
 8007d78:	e000ed20 	.word	0xe000ed20
 8007d7c:	20000034 	.word	0x20000034
 8007d80:	e000ef34 	.word	0xe000ef34

08007d84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	607b      	str	r3, [r7, #4]
}
 8007d9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d9e:	4b0f      	ldr	r3, [pc, #60]	; (8007ddc <vPortEnterCritical+0x58>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3301      	adds	r3, #1
 8007da4:	4a0d      	ldr	r2, [pc, #52]	; (8007ddc <vPortEnterCritical+0x58>)
 8007da6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007da8:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <vPortEnterCritical+0x58>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d10f      	bne.n	8007dd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007db0:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <vPortEnterCritical+0x5c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	603b      	str	r3, [r7, #0]
}
 8007dcc:	bf00      	nop
 8007dce:	e7fe      	b.n	8007dce <vPortEnterCritical+0x4a>
	}
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	20000034 	.word	0x20000034
 8007de0:	e000ed04 	.word	0xe000ed04

08007de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dea:	4b12      	ldr	r3, [pc, #72]	; (8007e34 <vPortExitCritical+0x50>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10a      	bne.n	8007e08 <vPortExitCritical+0x24>
	__asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	607b      	str	r3, [r7, #4]
}
 8007e04:	bf00      	nop
 8007e06:	e7fe      	b.n	8007e06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e08:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <vPortExitCritical+0x50>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	4a09      	ldr	r2, [pc, #36]	; (8007e34 <vPortExitCritical+0x50>)
 8007e10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e12:	4b08      	ldr	r3, [pc, #32]	; (8007e34 <vPortExitCritical+0x50>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d105      	bne.n	8007e26 <vPortExitCritical+0x42>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	20000034 	.word	0x20000034
	...

08007e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e40:	f3ef 8009 	mrs	r0, PSP
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	4b15      	ldr	r3, [pc, #84]	; (8007ea0 <pxCurrentTCBConst>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	f01e 0f10 	tst.w	lr, #16
 8007e50:	bf08      	it	eq
 8007e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5a:	6010      	str	r0, [r2, #0]
 8007e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e64:	f380 8811 	msr	BASEPRI, r0
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f001 fd90 	bl	8009994 <vTaskSwitchContext>
 8007e74:	f04f 0000 	mov.w	r0, #0
 8007e78:	f380 8811 	msr	BASEPRI, r0
 8007e7c:	bc09      	pop	{r0, r3}
 8007e7e:	6819      	ldr	r1, [r3, #0]
 8007e80:	6808      	ldr	r0, [r1, #0]
 8007e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e86:	f01e 0f10 	tst.w	lr, #16
 8007e8a:	bf08      	it	eq
 8007e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e90:	f380 8809 	msr	PSP, r0
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	f3af 8000 	nop.w

08007ea0 <pxCurrentTCBConst>:
 8007ea0:	2000490c 	.word	0x2000490c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop

08007ea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	607b      	str	r3, [r7, #4]
}
 8007ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ec2:	f001 fcad 	bl	8009820 <xTaskIncrementTick>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ecc:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <xPortSysTickHandler+0x40>)
 8007ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	f383 8811 	msr	BASEPRI, r3
}
 8007ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	e000ed04 	.word	0xe000ed04

08007eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ef0:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <vPortSetupTimerInterrupt+0x34>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <vPortSetupTimerInterrupt+0x38>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007efc:	4b0a      	ldr	r3, [pc, #40]	; (8007f28 <vPortSetupTimerInterrupt+0x3c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a0a      	ldr	r2, [pc, #40]	; (8007f2c <vPortSetupTimerInterrupt+0x40>)
 8007f02:	fba2 2303 	umull	r2, r3, r2, r3
 8007f06:	099b      	lsrs	r3, r3, #6
 8007f08:	4a09      	ldr	r2, [pc, #36]	; (8007f30 <vPortSetupTimerInterrupt+0x44>)
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f0e:	4b04      	ldr	r3, [pc, #16]	; (8007f20 <vPortSetupTimerInterrupt+0x34>)
 8007f10:	2207      	movs	r2, #7
 8007f12:	601a      	str	r2, [r3, #0]
}
 8007f14:	bf00      	nop
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	e000e010 	.word	0xe000e010
 8007f24:	e000e018 	.word	0xe000e018
 8007f28:	20000018 	.word	0x20000018
 8007f2c:	10624dd3 	.word	0x10624dd3
 8007f30:	e000e014 	.word	0xe000e014

08007f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f44 <vPortEnableVFP+0x10>
 8007f38:	6801      	ldr	r1, [r0, #0]
 8007f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f3e:	6001      	str	r1, [r0, #0]
 8007f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f42:	bf00      	nop
 8007f44:	e000ed88 	.word	0xe000ed88

08007f48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f4e:	f3ef 8305 	mrs	r3, IPSR
 8007f52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b0f      	cmp	r3, #15
 8007f58:	d914      	bls.n	8007f84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f5a:	4a17      	ldr	r2, [pc, #92]	; (8007fb8 <vPortValidateInterruptPriority+0x70>)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f64:	4b15      	ldr	r3, [pc, #84]	; (8007fbc <vPortValidateInterruptPriority+0x74>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	7afa      	ldrb	r2, [r7, #11]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d20a      	bcs.n	8007f84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	607b      	str	r3, [r7, #4]
}
 8007f80:	bf00      	nop
 8007f82:	e7fe      	b.n	8007f82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f84:	4b0e      	ldr	r3, [pc, #56]	; (8007fc0 <vPortValidateInterruptPriority+0x78>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f8c:	4b0d      	ldr	r3, [pc, #52]	; (8007fc4 <vPortValidateInterruptPriority+0x7c>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d90a      	bls.n	8007faa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	603b      	str	r3, [r7, #0]
}
 8007fa6:	bf00      	nop
 8007fa8:	e7fe      	b.n	8007fa8 <vPortValidateInterruptPriority+0x60>
	}
 8007faa:	bf00      	nop
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	e000e3f0 	.word	0xe000e3f0
 8007fbc:	200048c4 	.word	0x200048c4
 8007fc0:	e000ed0c 	.word	0xe000ed0c
 8007fc4:	200048c8 	.word	0x200048c8

08007fc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10a      	bne.n	8007ff2 <xQueueGenericReset+0x2a>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	60bb      	str	r3, [r7, #8]
}
 8007fee:	bf00      	nop
 8007ff0:	e7fe      	b.n	8007ff0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ff2:	f7ff fec7 	bl	8007d84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffe:	68f9      	ldr	r1, [r7, #12]
 8008000:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008002:	fb01 f303 	mul.w	r3, r1, r3
 8008006:	441a      	add	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008022:	3b01      	subs	r3, #1
 8008024:	68f9      	ldr	r1, [r7, #12]
 8008026:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008028:	fb01 f303 	mul.w	r3, r1, r3
 800802c:	441a      	add	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	22ff      	movs	r2, #255	; 0xff
 8008036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	22ff      	movs	r2, #255	; 0xff
 800803e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d114      	bne.n	8008072 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01a      	beq.n	8008086 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3310      	adds	r3, #16
 8008054:	4618      	mov	r0, r3
 8008056:	f001 fd51 	bl	8009afc <xTaskRemoveFromEventList>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d012      	beq.n	8008086 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008060:	4b0c      	ldr	r3, [pc, #48]	; (8008094 <xQueueGenericReset+0xcc>)
 8008062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	e009      	b.n	8008086 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3310      	adds	r3, #16
 8008076:	4618      	mov	r0, r3
 8008078:	f7ff fca4 	bl	80079c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3324      	adds	r3, #36	; 0x24
 8008080:	4618      	mov	r0, r3
 8008082:	f7ff fc9f 	bl	80079c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008086:	f7ff fead 	bl	8007de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800808a:	2301      	movs	r3, #1
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	e000ed04 	.word	0xe000ed04

08008098 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008098:	b580      	push	{r7, lr}
 800809a:	b08e      	sub	sp, #56	; 0x38
 800809c:	af02      	add	r7, sp, #8
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10a      	bne.n	80080c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080be:	bf00      	nop
 80080c0:	e7fe      	b.n	80080c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10a      	bne.n	80080de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <xQueueGenericCreateStatic+0x52>
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <xQueueGenericCreateStatic+0x56>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e000      	b.n	80080f0 <xQueueGenericCreateStatic+0x58>
 80080ee:	2300      	movs	r3, #0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10a      	bne.n	800810a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	623b      	str	r3, [r7, #32]
}
 8008106:	bf00      	nop
 8008108:	e7fe      	b.n	8008108 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d102      	bne.n	8008116 <xQueueGenericCreateStatic+0x7e>
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <xQueueGenericCreateStatic+0x82>
 8008116:	2301      	movs	r3, #1
 8008118:	e000      	b.n	800811c <xQueueGenericCreateStatic+0x84>
 800811a:	2300      	movs	r3, #0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10a      	bne.n	8008136 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	61fb      	str	r3, [r7, #28]
}
 8008132:	bf00      	nop
 8008134:	e7fe      	b.n	8008134 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008136:	2350      	movs	r3, #80	; 0x50
 8008138:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b50      	cmp	r3, #80	; 0x50
 800813e:	d00a      	beq.n	8008156 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	61bb      	str	r3, [r7, #24]
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008156:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00d      	beq.n	800817e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008164:	2201      	movs	r2, #1
 8008166:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800816a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	4613      	mov	r3, r2
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	68b9      	ldr	r1, [r7, #8]
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 f83f 	bl	80081fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800817e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008180:	4618      	mov	r0, r3
 8008182:	3730      	adds	r7, #48	; 0x30
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008188:	b580      	push	{r7, lr}
 800818a:	b08a      	sub	sp, #40	; 0x28
 800818c:	af02      	add	r7, sp, #8
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	4613      	mov	r3, r2
 8008194:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10a      	bne.n	80081b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800819c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a0:	f383 8811 	msr	BASEPRI, r3
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	613b      	str	r3, [r7, #16]
}
 80081ae:	bf00      	nop
 80081b0:	e7fe      	b.n	80081b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	fb02 f303 	mul.w	r3, r2, r3
 80081ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	3350      	adds	r3, #80	; 0x50
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7ff fa15 	bl	80075f0 <pvPortMalloc>
 80081c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d011      	beq.n	80081f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	3350      	adds	r3, #80	; 0x50
 80081d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081e0:	79fa      	ldrb	r2, [r7, #7]
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	4613      	mov	r3, r2
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	68b9      	ldr	r1, [r7, #8]
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 f805 	bl	80081fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081f2:	69bb      	ldr	r3, [r7, #24]
	}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d103      	bne.n	8008218 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	e002      	b.n	800821e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800822a:	2101      	movs	r1, #1
 800822c:	69b8      	ldr	r0, [r7, #24]
 800822e:	f7ff fecb 	bl	8007fc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	78fa      	ldrb	r2, [r7, #3]
 8008236:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800823a:	bf00      	nop
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008242:	b580      	push	{r7, lr}
 8008244:	b08a      	sub	sp, #40	; 0x28
 8008246:	af02      	add	r7, sp, #8
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10a      	bne.n	800826a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	61bb      	str	r3, [r7, #24]
}
 8008266:	bf00      	nop
 8008268:	e7fe      	b.n	8008268 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	429a      	cmp	r2, r3
 8008270:	d90a      	bls.n	8008288 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	617b      	str	r3, [r7, #20]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008288:	2302      	movs	r3, #2
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	2100      	movs	r1, #0
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f7ff ff00 	bl	8008098 <xQueueGenericCreateStatic>
 8008298:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80082a6:	69fb      	ldr	r3, [r7, #28]
	}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3720      	adds	r7, #32
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10a      	bne.n	80082d6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	613b      	str	r3, [r7, #16]
}
 80082d2:	bf00      	nop
 80082d4:	e7fe      	b.n	80082d4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d90a      	bls.n	80082f4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	60fb      	str	r3, [r7, #12]
}
 80082f0:	bf00      	nop
 80082f2:	e7fe      	b.n	80082f2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80082f4:	2202      	movs	r2, #2
 80082f6:	2100      	movs	r1, #0
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7ff ff45 	bl	8008188 <xQueueGenericCreate>
 80082fe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d002      	beq.n	800830c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800830c:	697b      	ldr	r3, [r7, #20]
	}
 800830e:	4618      	mov	r0, r3
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08e      	sub	sp, #56	; 0x38
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008326:	2300      	movs	r3, #0
 8008328:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10a      	bne.n	800834a <xQueueGenericSend+0x32>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008346:	bf00      	nop
 8008348:	e7fe      	b.n	8008348 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d103      	bne.n	8008358 <xQueueGenericSend+0x40>
 8008350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <xQueueGenericSend+0x44>
 8008358:	2301      	movs	r3, #1
 800835a:	e000      	b.n	800835e <xQueueGenericSend+0x46>
 800835c:	2300      	movs	r3, #0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10a      	bne.n	8008378 <xQueueGenericSend+0x60>
	__asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008374:	bf00      	nop
 8008376:	e7fe      	b.n	8008376 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2b02      	cmp	r3, #2
 800837c:	d103      	bne.n	8008386 <xQueueGenericSend+0x6e>
 800837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008382:	2b01      	cmp	r3, #1
 8008384:	d101      	bne.n	800838a <xQueueGenericSend+0x72>
 8008386:	2301      	movs	r3, #1
 8008388:	e000      	b.n	800838c <xQueueGenericSend+0x74>
 800838a:	2300      	movs	r3, #0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10a      	bne.n	80083a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	623b      	str	r3, [r7, #32]
}
 80083a2:	bf00      	nop
 80083a4:	e7fe      	b.n	80083a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083a6:	f001 fd6b 	bl	8009e80 <xTaskGetSchedulerState>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d102      	bne.n	80083b6 <xQueueGenericSend+0x9e>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <xQueueGenericSend+0xa2>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e000      	b.n	80083bc <xQueueGenericSend+0xa4>
 80083ba:	2300      	movs	r3, #0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10a      	bne.n	80083d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	61fb      	str	r3, [r7, #28]
}
 80083d2:	bf00      	nop
 80083d4:	e7fe      	b.n	80083d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083d6:	f7ff fcd5 	bl	8007d84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d302      	bcc.n	80083ec <xQueueGenericSend+0xd4>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d129      	bne.n	8008440 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	68b9      	ldr	r1, [r7, #8]
 80083f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083f2:	f000 fc5e 	bl	8008cb2 <prvCopyDataToQueue>
 80083f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d010      	beq.n	8008422 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	3324      	adds	r3, #36	; 0x24
 8008404:	4618      	mov	r0, r3
 8008406:	f001 fb79 	bl	8009afc <xTaskRemoveFromEventList>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d013      	beq.n	8008438 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008410:	4b3f      	ldr	r3, [pc, #252]	; (8008510 <xQueueGenericSend+0x1f8>)
 8008412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	e00a      	b.n	8008438 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008424:	2b00      	cmp	r3, #0
 8008426:	d007      	beq.n	8008438 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008428:	4b39      	ldr	r3, [pc, #228]	; (8008510 <xQueueGenericSend+0x1f8>)
 800842a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008438:	f7ff fcd4 	bl	8007de4 <vPortExitCritical>
				return pdPASS;
 800843c:	2301      	movs	r3, #1
 800843e:	e063      	b.n	8008508 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d103      	bne.n	800844e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008446:	f7ff fccd 	bl	8007de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800844a:	2300      	movs	r3, #0
 800844c:	e05c      	b.n	8008508 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800844e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008450:	2b00      	cmp	r3, #0
 8008452:	d106      	bne.n	8008462 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008454:	f107 0314 	add.w	r3, r7, #20
 8008458:	4618      	mov	r0, r3
 800845a:	f001 fbb3 	bl	8009bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800845e:	2301      	movs	r3, #1
 8008460:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008462:	f7ff fcbf 	bl	8007de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008466:	f001 f91f 	bl	80096a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800846a:	f7ff fc8b 	bl	8007d84 <vPortEnterCritical>
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008474:	b25b      	sxtb	r3, r3
 8008476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847a:	d103      	bne.n	8008484 <xQueueGenericSend+0x16c>
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800848a:	b25b      	sxtb	r3, r3
 800848c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008490:	d103      	bne.n	800849a <xQueueGenericSend+0x182>
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800849a:	f7ff fca3 	bl	8007de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800849e:	1d3a      	adds	r2, r7, #4
 80084a0:	f107 0314 	add.w	r3, r7, #20
 80084a4:	4611      	mov	r1, r2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f001 fba2 	bl	8009bf0 <xTaskCheckForTimeOut>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d124      	bne.n	80084fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80084b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084b4:	f000 fcf5 	bl	8008ea2 <prvIsQueueFull>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d018      	beq.n	80084f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c0:	3310      	adds	r3, #16
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f001 fac8 	bl	8009a5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80084cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084ce:	f000 fc80 	bl	8008dd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80084d2:	f001 f8f7 	bl	80096c4 <xTaskResumeAll>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f47f af7c 	bne.w	80083d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80084de:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <xQueueGenericSend+0x1f8>)
 80084e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	e772      	b.n	80083d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80084f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084f2:	f000 fc6e 	bl	8008dd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084f6:	f001 f8e5 	bl	80096c4 <xTaskResumeAll>
 80084fa:	e76c      	b.n	80083d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80084fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084fe:	f000 fc68 	bl	8008dd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008502:	f001 f8df 	bl	80096c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008506:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008508:	4618      	mov	r0, r3
 800850a:	3738      	adds	r7, #56	; 0x38
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	e000ed04 	.word	0xe000ed04

08008514 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b090      	sub	sp, #64	; 0x40
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d103      	bne.n	8008550 <xQueueGenericSendFromISR+0x3c>
 8008548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <xQueueGenericSendFromISR+0x40>
 8008550:	2301      	movs	r3, #1
 8008552:	e000      	b.n	8008556 <xQueueGenericSendFromISR+0x42>
 8008554:	2300      	movs	r3, #0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10a      	bne.n	8008570 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800856c:	bf00      	nop
 800856e:	e7fe      	b.n	800856e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d103      	bne.n	800857e <xQueueGenericSendFromISR+0x6a>
 8008576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857a:	2b01      	cmp	r3, #1
 800857c:	d101      	bne.n	8008582 <xQueueGenericSendFromISR+0x6e>
 800857e:	2301      	movs	r3, #1
 8008580:	e000      	b.n	8008584 <xQueueGenericSendFromISR+0x70>
 8008582:	2300      	movs	r3, #0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10a      	bne.n	800859e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	623b      	str	r3, [r7, #32]
}
 800859a:	bf00      	nop
 800859c:	e7fe      	b.n	800859c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800859e:	f7ff fcd3 	bl	8007f48 <vPortValidateInterruptPriority>
	__asm volatile
 80085a2:	f3ef 8211 	mrs	r2, BASEPRI
 80085a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	61fa      	str	r2, [r7, #28]
 80085b8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80085ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d302      	bcc.n	80085d0 <xQueueGenericSendFromISR+0xbc>
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d12f      	bne.n	8008630 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085e6:	f000 fb64 	bl	8008cb2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80085ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f2:	d112      	bne.n	800861a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d016      	beq.n	800862a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fe:	3324      	adds	r3, #36	; 0x24
 8008600:	4618      	mov	r0, r3
 8008602:	f001 fa7b 	bl	8009afc <xTaskRemoveFromEventList>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00e      	beq.n	800862a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00b      	beq.n	800862a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	601a      	str	r2, [r3, #0]
 8008618:	e007      	b.n	800862a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800861a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800861e:	3301      	adds	r3, #1
 8008620:	b2db      	uxtb	r3, r3
 8008622:	b25a      	sxtb	r2, r3
 8008624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800862a:	2301      	movs	r3, #1
 800862c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800862e:	e001      	b.n	8008634 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008630:	2300      	movs	r3, #0
 8008632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008636:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f383 8811 	msr	BASEPRI, r3
}
 800863e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008642:	4618      	mov	r0, r3
 8008644:	3740      	adds	r7, #64	; 0x40
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b08e      	sub	sp, #56	; 0x38
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10a      	bne.n	8008674 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	623b      	str	r3, [r7, #32]
}
 8008670:	bf00      	nop
 8008672:	e7fe      	b.n	8008672 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00a      	beq.n	8008692 <xQueueGiveFromISR+0x48>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	61fb      	str	r3, [r7, #28]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d103      	bne.n	80086a2 <xQueueGiveFromISR+0x58>
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <xQueueGiveFromISR+0x5c>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e000      	b.n	80086a8 <xQueueGiveFromISR+0x5e>
 80086a6:	2300      	movs	r3, #0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10a      	bne.n	80086c2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	61bb      	str	r3, [r7, #24]
}
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086c2:	f7ff fc41 	bl	8007f48 <vPortValidateInterruptPriority>
	__asm volatile
 80086c6:	f3ef 8211 	mrs	r2, BASEPRI
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	617a      	str	r2, [r7, #20]
 80086dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80086de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d22b      	bcs.n	800874a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008702:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008704:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800870c:	d112      	bne.n	8008734 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	2b00      	cmp	r3, #0
 8008714:	d016      	beq.n	8008744 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008718:	3324      	adds	r3, #36	; 0x24
 800871a:	4618      	mov	r0, r3
 800871c:	f001 f9ee 	bl	8009afc <xTaskRemoveFromEventList>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00e      	beq.n	8008744 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00b      	beq.n	8008744 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2201      	movs	r2, #1
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	e007      	b.n	8008744 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008738:	3301      	adds	r3, #1
 800873a:	b2db      	uxtb	r3, r3
 800873c:	b25a      	sxtb	r2, r3
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008744:	2301      	movs	r3, #1
 8008746:	637b      	str	r3, [r7, #52]	; 0x34
 8008748:	e001      	b.n	800874e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800874a:	2300      	movs	r3, #0
 800874c:	637b      	str	r3, [r7, #52]	; 0x34
 800874e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008750:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f383 8811 	msr	BASEPRI, r3
}
 8008758:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800875a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800875c:	4618      	mov	r0, r3
 800875e:	3738      	adds	r7, #56	; 0x38
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b08c      	sub	sp, #48	; 0x30
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008770:	2300      	movs	r3, #0
 8008772:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10a      	bne.n	8008794 <xQueueReceive+0x30>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	623b      	str	r3, [r7, #32]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d103      	bne.n	80087a2 <xQueueReceive+0x3e>
 800879a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <xQueueReceive+0x42>
 80087a2:	2301      	movs	r3, #1
 80087a4:	e000      	b.n	80087a8 <xQueueReceive+0x44>
 80087a6:	2300      	movs	r3, #0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10a      	bne.n	80087c2 <xQueueReceive+0x5e>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	61fb      	str	r3, [r7, #28]
}
 80087be:	bf00      	nop
 80087c0:	e7fe      	b.n	80087c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087c2:	f001 fb5d 	bl	8009e80 <xTaskGetSchedulerState>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <xQueueReceive+0x6e>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d101      	bne.n	80087d6 <xQueueReceive+0x72>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e000      	b.n	80087d8 <xQueueReceive+0x74>
 80087d6:	2300      	movs	r3, #0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10a      	bne.n	80087f2 <xQueueReceive+0x8e>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	61bb      	str	r3, [r7, #24]
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087f2:	f7ff fac7 	bl	8007d84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d01f      	beq.n	8008842 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008806:	f000 fabe 	bl	8008d86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	1e5a      	subs	r2, r3, #1
 800880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008810:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00f      	beq.n	800883a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800881a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881c:	3310      	adds	r3, #16
 800881e:	4618      	mov	r0, r3
 8008820:	f001 f96c 	bl	8009afc <xTaskRemoveFromEventList>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d007      	beq.n	800883a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800882a:	4b3d      	ldr	r3, [pc, #244]	; (8008920 <xQueueReceive+0x1bc>)
 800882c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800883a:	f7ff fad3 	bl	8007de4 <vPortExitCritical>
				return pdPASS;
 800883e:	2301      	movs	r3, #1
 8008840:	e069      	b.n	8008916 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d103      	bne.n	8008850 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008848:	f7ff facc 	bl	8007de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800884c:	2300      	movs	r3, #0
 800884e:	e062      	b.n	8008916 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008852:	2b00      	cmp	r3, #0
 8008854:	d106      	bne.n	8008864 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008856:	f107 0310 	add.w	r3, r7, #16
 800885a:	4618      	mov	r0, r3
 800885c:	f001 f9b2 	bl	8009bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008860:	2301      	movs	r3, #1
 8008862:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008864:	f7ff fabe 	bl	8007de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008868:	f000 ff1e 	bl	80096a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800886c:	f7ff fa8a 	bl	8007d84 <vPortEnterCritical>
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008876:	b25b      	sxtb	r3, r3
 8008878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887c:	d103      	bne.n	8008886 <xQueueReceive+0x122>
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800888c:	b25b      	sxtb	r3, r3
 800888e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008892:	d103      	bne.n	800889c <xQueueReceive+0x138>
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800889c:	f7ff faa2 	bl	8007de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088a0:	1d3a      	adds	r2, r7, #4
 80088a2:	f107 0310 	add.w	r3, r7, #16
 80088a6:	4611      	mov	r1, r2
 80088a8:	4618      	mov	r0, r3
 80088aa:	f001 f9a1 	bl	8009bf0 <xTaskCheckForTimeOut>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d123      	bne.n	80088fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088b6:	f000 fade 	bl	8008e76 <prvIsQueueEmpty>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d017      	beq.n	80088f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c2:	3324      	adds	r3, #36	; 0x24
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	4611      	mov	r1, r2
 80088c8:	4618      	mov	r0, r3
 80088ca:	f001 f8c7 	bl	8009a5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088d0:	f000 fa7f 	bl	8008dd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088d4:	f000 fef6 	bl	80096c4 <xTaskResumeAll>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d189      	bne.n	80087f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80088de:	4b10      	ldr	r3, [pc, #64]	; (8008920 <xQueueReceive+0x1bc>)
 80088e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	e780      	b.n	80087f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80088f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088f2:	f000 fa6e 	bl	8008dd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088f6:	f000 fee5 	bl	80096c4 <xTaskResumeAll>
 80088fa:	e77a      	b.n	80087f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088fe:	f000 fa68 	bl	8008dd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008902:	f000 fedf 	bl	80096c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008908:	f000 fab5 	bl	8008e76 <prvIsQueueEmpty>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	f43f af6f 	beq.w	80087f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008914:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008916:	4618      	mov	r0, r3
 8008918:	3730      	adds	r7, #48	; 0x30
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	e000ed04 	.word	0xe000ed04

08008924 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08e      	sub	sp, #56	; 0x38
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800892e:	2300      	movs	r3, #0
 8008930:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008936:	2300      	movs	r3, #0
 8008938:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10a      	bne.n	8008956 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	623b      	str	r3, [r7, #32]
}
 8008952:	bf00      	nop
 8008954:	e7fe      	b.n	8008954 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	61fb      	str	r3, [r7, #28]
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008974:	f001 fa84 	bl	8009e80 <xTaskGetSchedulerState>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d102      	bne.n	8008984 <xQueueSemaphoreTake+0x60>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d101      	bne.n	8008988 <xQueueSemaphoreTake+0x64>
 8008984:	2301      	movs	r3, #1
 8008986:	e000      	b.n	800898a <xQueueSemaphoreTake+0x66>
 8008988:	2300      	movs	r3, #0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10a      	bne.n	80089a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	61bb      	str	r3, [r7, #24]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089a4:	f7ff f9ee 	bl	8007d84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80089a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80089ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d024      	beq.n	80089fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80089b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b6:	1e5a      	subs	r2, r3, #1
 80089b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d104      	bne.n	80089ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80089c4:	f001 fbd2 	bl	800a16c <pvTaskIncrementMutexHeldCount>
 80089c8:	4602      	mov	r2, r0
 80089ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00f      	beq.n	80089f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d8:	3310      	adds	r3, #16
 80089da:	4618      	mov	r0, r3
 80089dc:	f001 f88e 	bl	8009afc <xTaskRemoveFromEventList>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d007      	beq.n	80089f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089e6:	4b54      	ldr	r3, [pc, #336]	; (8008b38 <xQueueSemaphoreTake+0x214>)
 80089e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089f6:	f7ff f9f5 	bl	8007de4 <vPortExitCritical>
				return pdPASS;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e097      	b.n	8008b2e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d111      	bne.n	8008a28 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00a      	beq.n	8008a20 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	617b      	str	r3, [r7, #20]
}
 8008a1c:	bf00      	nop
 8008a1e:	e7fe      	b.n	8008a1e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008a20:	f7ff f9e0 	bl	8007de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a24:	2300      	movs	r3, #0
 8008a26:	e082      	b.n	8008b2e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d106      	bne.n	8008a3c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a2e:	f107 030c 	add.w	r3, r7, #12
 8008a32:	4618      	mov	r0, r3
 8008a34:	f001 f8c6 	bl	8009bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a3c:	f7ff f9d2 	bl	8007de4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a40:	f000 fe32 	bl	80096a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a44:	f7ff f99e 	bl	8007d84 <vPortEnterCritical>
 8008a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a4e:	b25b      	sxtb	r3, r3
 8008a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a54:	d103      	bne.n	8008a5e <xQueueSemaphoreTake+0x13a>
 8008a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a64:	b25b      	sxtb	r3, r3
 8008a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6a:	d103      	bne.n	8008a74 <xQueueSemaphoreTake+0x150>
 8008a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a74:	f7ff f9b6 	bl	8007de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a78:	463a      	mov	r2, r7
 8008a7a:	f107 030c 	add.w	r3, r7, #12
 8008a7e:	4611      	mov	r1, r2
 8008a80:	4618      	mov	r0, r3
 8008a82:	f001 f8b5 	bl	8009bf0 <xTaskCheckForTimeOut>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d132      	bne.n	8008af2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a8e:	f000 f9f2 	bl	8008e76 <prvIsQueueEmpty>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d026      	beq.n	8008ae6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d109      	bne.n	8008ab4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008aa0:	f7ff f970 	bl	8007d84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f001 fa07 	bl	8009ebc <xTaskPriorityInherit>
 8008aae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008ab0:	f7ff f998 	bl	8007de4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab6:	3324      	adds	r3, #36	; 0x24
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	4611      	mov	r1, r2
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 ffcd 	bl	8009a5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ac4:	f000 f985 	bl	8008dd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ac8:	f000 fdfc 	bl	80096c4 <xTaskResumeAll>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f47f af68 	bne.w	80089a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008ad4:	4b18      	ldr	r3, [pc, #96]	; (8008b38 <xQueueSemaphoreTake+0x214>)
 8008ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	e75e      	b.n	80089a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008ae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ae8:	f000 f973 	bl	8008dd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008aec:	f000 fdea 	bl	80096c4 <xTaskResumeAll>
 8008af0:	e758      	b.n	80089a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008af2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008af4:	f000 f96d 	bl	8008dd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008af8:	f000 fde4 	bl	80096c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008afc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008afe:	f000 f9ba 	bl	8008e76 <prvIsQueueEmpty>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f43f af4d 	beq.w	80089a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00d      	beq.n	8008b2c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008b10:	f7ff f938 	bl	8007d84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008b14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b16:	f000 f8b4 	bl	8008c82 <prvGetDisinheritPriorityAfterTimeout>
 8008b1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b22:	4618      	mov	r0, r3
 8008b24:	f001 faa0 	bl	800a068 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008b28:	f7ff f95c 	bl	8007de4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3738      	adds	r7, #56	; 0x38
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	e000ed04 	.word	0xe000ed04

08008b3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08e      	sub	sp, #56	; 0x38
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10a      	bne.n	8008b68 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	623b      	str	r3, [r7, #32]
}
 8008b64:	bf00      	nop
 8008b66:	e7fe      	b.n	8008b66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d103      	bne.n	8008b76 <xQueueReceiveFromISR+0x3a>
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <xQueueReceiveFromISR+0x3e>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e000      	b.n	8008b7c <xQueueReceiveFromISR+0x40>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10a      	bne.n	8008b96 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	61fb      	str	r3, [r7, #28]
}
 8008b92:	bf00      	nop
 8008b94:	e7fe      	b.n	8008b94 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b96:	f7ff f9d7 	bl	8007f48 <vPortValidateInterruptPriority>
	__asm volatile
 8008b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8008b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	61ba      	str	r2, [r7, #24]
 8008bb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008bb2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d02f      	beq.n	8008c22 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008bcc:	68b9      	ldr	r1, [r7, #8]
 8008bce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bd0:	f000 f8d9 	bl	8008d86 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd6:	1e5a      	subs	r2, r3, #1
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bda:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008bdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be4:	d112      	bne.n	8008c0c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d016      	beq.n	8008c1c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf0:	3310      	adds	r3, #16
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 ff82 	bl	8009afc <xTaskRemoveFromEventList>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00e      	beq.n	8008c1c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00b      	beq.n	8008c1c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	e007      	b.n	8008c1c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c10:	3301      	adds	r3, #1
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	b25a      	sxtb	r2, r3
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c20:	e001      	b.n	8008c26 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008c22:	2300      	movs	r3, #0
 8008c24:	637b      	str	r3, [r7, #52]	; 0x34
 8008c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f383 8811 	msr	BASEPRI, r3
}
 8008c30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3738      	adds	r7, #56	; 0x38
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10a      	bne.n	8008c64 <vQueueDelete+0x28>
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	60bb      	str	r3, [r7, #8]
}
 8008c60:	bf00      	nop
 8008c62:	e7fe      	b.n	8008c62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 f95f 	bl	8008f28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d102      	bne.n	8008c7a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f7fe fd87 	bl	8007788 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008c7a:	bf00      	nop
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008c82:	b480      	push	{r7}
 8008c84:	b085      	sub	sp, #20
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d006      	beq.n	8008ca0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008c9c:	60fb      	str	r3, [r7, #12]
 8008c9e:	e001      	b.n	8008ca4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
	}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b086      	sub	sp, #24
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	60f8      	str	r0, [r7, #12]
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10d      	bne.n	8008cec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d14d      	bne.n	8008d74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f001 f955 	bl	8009f8c <xTaskPriorityDisinherit>
 8008ce2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	609a      	str	r2, [r3, #8]
 8008cea:	e043      	b.n	8008d74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d119      	bne.n	8008d26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6858      	ldr	r0, [r3, #4]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	68b9      	ldr	r1, [r7, #8]
 8008cfe:	f001 fff2 	bl	800ace6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	441a      	add	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d32b      	bcc.n	8008d74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	605a      	str	r2, [r3, #4]
 8008d24:	e026      	b.n	8008d74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	68d8      	ldr	r0, [r3, #12]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2e:	461a      	mov	r2, r3
 8008d30:	68b9      	ldr	r1, [r7, #8]
 8008d32:	f001 ffd8 	bl	800ace6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	68da      	ldr	r2, [r3, #12]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3e:	425b      	negs	r3, r3
 8008d40:	441a      	add	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	68da      	ldr	r2, [r3, #12]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d207      	bcs.n	8008d62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	689a      	ldr	r2, [r3, #8]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	425b      	negs	r3, r3
 8008d5c:	441a      	add	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d105      	bne.n	8008d74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	1c5a      	adds	r2, r3, #1
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d7c:	697b      	ldr	r3, [r7, #20]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d018      	beq.n	8008dca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68da      	ldr	r2, [r3, #12]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da0:	441a      	add	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	68da      	ldr	r2, [r3, #12]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d303      	bcc.n	8008dba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68d9      	ldr	r1, [r3, #12]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	6838      	ldr	r0, [r7, #0]
 8008dc6:	f001 ff8e 	bl	800ace6 <memcpy>
	}
}
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008dda:	f7fe ffd3 	bl	8007d84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008de4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008de6:	e011      	b.n	8008e0c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d012      	beq.n	8008e16 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	3324      	adds	r3, #36	; 0x24
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 fe81 	bl	8009afc <xTaskRemoveFromEventList>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e00:	f000 ff58 	bl	8009cb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	3b01      	subs	r3, #1
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	dce9      	bgt.n	8008de8 <prvUnlockQueue+0x16>
 8008e14:	e000      	b.n	8008e18 <prvUnlockQueue+0x46>
					break;
 8008e16:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	22ff      	movs	r2, #255	; 0xff
 8008e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e20:	f7fe ffe0 	bl	8007de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e24:	f7fe ffae 	bl	8007d84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e2e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e30:	e011      	b.n	8008e56 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d012      	beq.n	8008e60 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	3310      	adds	r3, #16
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 fe5c 	bl	8009afc <xTaskRemoveFromEventList>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e4a:	f000 ff33 	bl	8009cb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e4e:	7bbb      	ldrb	r3, [r7, #14]
 8008e50:	3b01      	subs	r3, #1
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	dce9      	bgt.n	8008e32 <prvUnlockQueue+0x60>
 8008e5e:	e000      	b.n	8008e62 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e60:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	22ff      	movs	r2, #255	; 0xff
 8008e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e6a:	f7fe ffbb 	bl	8007de4 <vPortExitCritical>
}
 8008e6e:	bf00      	nop
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b084      	sub	sp, #16
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e7e:	f7fe ff81 	bl	8007d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d102      	bne.n	8008e90 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	60fb      	str	r3, [r7, #12]
 8008e8e:	e001      	b.n	8008e94 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e94:	f7fe ffa6 	bl	8007de4 <vPortExitCritical>

	return xReturn;
 8008e98:	68fb      	ldr	r3, [r7, #12]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008eaa:	f7fe ff6b 	bl	8007d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d102      	bne.n	8008ec0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	e001      	b.n	8008ec4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ec4:	f7fe ff8e 	bl	8007de4 <vPortExitCritical>

	return xReturn;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60fb      	str	r3, [r7, #12]
 8008ee2:	e014      	b.n	8008f0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ee4:	4a0f      	ldr	r2, [pc, #60]	; (8008f24 <vQueueAddToRegistry+0x50>)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10b      	bne.n	8008f08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ef0:	490c      	ldr	r1, [pc, #48]	; (8008f24 <vQueueAddToRegistry+0x50>)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008efa:	4a0a      	ldr	r2, [pc, #40]	; (8008f24 <vQueueAddToRegistry+0x50>)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	4413      	add	r3, r2
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f06:	e006      	b.n	8008f16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	60fb      	str	r3, [r7, #12]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b07      	cmp	r3, #7
 8008f12:	d9e7      	bls.n	8008ee4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	200048cc 	.word	0x200048cc

08008f28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f30:	2300      	movs	r3, #0
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	e016      	b.n	8008f64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008f36:	4a10      	ldr	r2, [pc, #64]	; (8008f78 <vQueueUnregisterQueue+0x50>)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	00db      	lsls	r3, r3, #3
 8008f3c:	4413      	add	r3, r2
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d10b      	bne.n	8008f5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008f46:	4a0c      	ldr	r2, [pc, #48]	; (8008f78 <vQueueUnregisterQueue+0x50>)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008f50:	4a09      	ldr	r2, [pc, #36]	; (8008f78 <vQueueUnregisterQueue+0x50>)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	00db      	lsls	r3, r3, #3
 8008f56:	4413      	add	r3, r2
 8008f58:	2200      	movs	r2, #0
 8008f5a:	605a      	str	r2, [r3, #4]
				break;
 8008f5c:	e006      	b.n	8008f6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	3301      	adds	r3, #1
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2b07      	cmp	r3, #7
 8008f68:	d9e5      	bls.n	8008f36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008f6a:	bf00      	nop
 8008f6c:	bf00      	nop
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr
 8008f78:	200048cc 	.word	0x200048cc

08008f7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f8c:	f7fe fefa 	bl	8007d84 <vPortEnterCritical>
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f96:	b25b      	sxtb	r3, r3
 8008f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9c:	d103      	bne.n	8008fa6 <vQueueWaitForMessageRestricted+0x2a>
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fac:	b25b      	sxtb	r3, r3
 8008fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb2:	d103      	bne.n	8008fbc <vQueueWaitForMessageRestricted+0x40>
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fbc:	f7fe ff12 	bl	8007de4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d106      	bne.n	8008fd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	3324      	adds	r3, #36	; 0x24
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	68b9      	ldr	r1, [r7, #8]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 fd67 	bl	8009aa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008fd6:	6978      	ldr	r0, [r7, #20]
 8008fd8:	f7ff fefb 	bl	8008dd2 <prvUnlockQueue>
	}
 8008fdc:	bf00      	nop
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08e      	sub	sp, #56	; 0x38
 8008fe8:	af04      	add	r7, sp, #16
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10a      	bne.n	800900e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	623b      	str	r3, [r7, #32]
}
 800900a:	bf00      	nop
 800900c:	e7fe      	b.n	800900c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <xTaskCreateStatic+0x46>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	61fb      	str	r3, [r7, #28]
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800902a:	23bc      	movs	r3, #188	; 0xbc
 800902c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	2bbc      	cmp	r3, #188	; 0xbc
 8009032:	d00a      	beq.n	800904a <xTaskCreateStatic+0x66>
	__asm volatile
 8009034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	61bb      	str	r3, [r7, #24]
}
 8009046:	bf00      	nop
 8009048:	e7fe      	b.n	8009048 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800904a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	2b00      	cmp	r3, #0
 8009050:	d01e      	beq.n	8009090 <xTaskCreateStatic+0xac>
 8009052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009054:	2b00      	cmp	r3, #0
 8009056:	d01b      	beq.n	8009090 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009060:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	2202      	movs	r2, #2
 8009066:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800906a:	2300      	movs	r3, #0
 800906c:	9303      	str	r3, [sp, #12]
 800906e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009070:	9302      	str	r3, [sp, #8]
 8009072:	f107 0314 	add.w	r3, r7, #20
 8009076:	9301      	str	r3, [sp, #4]
 8009078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	68b9      	ldr	r1, [r7, #8]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f000 f850 	bl	8009128 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800908a:	f000 f8f3 	bl	8009274 <prvAddNewTaskToReadyList>
 800908e:	e001      	b.n	8009094 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009090:	2300      	movs	r3, #0
 8009092:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009094:	697b      	ldr	r3, [r7, #20]
	}
 8009096:	4618      	mov	r0, r3
 8009098:	3728      	adds	r7, #40	; 0x28
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b08c      	sub	sp, #48	; 0x30
 80090a2:	af04      	add	r7, sp, #16
 80090a4:	60f8      	str	r0, [r7, #12]
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	603b      	str	r3, [r7, #0]
 80090aa:	4613      	mov	r3, r2
 80090ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80090ae:	88fb      	ldrh	r3, [r7, #6]
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fe fa9c 	bl	80075f0 <pvPortMalloc>
 80090b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00e      	beq.n	80090de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80090c0:	20bc      	movs	r0, #188	; 0xbc
 80090c2:	f7fe fa95 	bl	80075f0 <pvPortMalloc>
 80090c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	697a      	ldr	r2, [r7, #20]
 80090d2:	631a      	str	r2, [r3, #48]	; 0x30
 80090d4:	e005      	b.n	80090e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80090d6:	6978      	ldr	r0, [r7, #20]
 80090d8:	f7fe fb56 	bl	8007788 <vPortFree>
 80090dc:	e001      	b.n	80090e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d017      	beq.n	8009118 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090f0:	88fa      	ldrh	r2, [r7, #6]
 80090f2:	2300      	movs	r3, #0
 80090f4:	9303      	str	r3, [sp, #12]
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	9302      	str	r3, [sp, #8]
 80090fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fc:	9301      	str	r3, [sp, #4]
 80090fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	68b9      	ldr	r1, [r7, #8]
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 f80e 	bl	8009128 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800910c:	69f8      	ldr	r0, [r7, #28]
 800910e:	f000 f8b1 	bl	8009274 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009112:	2301      	movs	r3, #1
 8009114:	61bb      	str	r3, [r7, #24]
 8009116:	e002      	b.n	800911e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009118:	f04f 33ff 	mov.w	r3, #4294967295
 800911c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800911e:	69bb      	ldr	r3, [r7, #24]
	}
 8009120:	4618      	mov	r0, r3
 8009122:	3720      	adds	r7, #32
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b088      	sub	sp, #32
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
 8009134:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	461a      	mov	r2, r3
 8009140:	21a5      	movs	r1, #165	; 0xa5
 8009142:	f001 fdde 	bl	800ad02 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009150:	3b01      	subs	r3, #1
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	f023 0307 	bic.w	r3, r3, #7
 800915e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	f003 0307 	and.w	r3, r3, #7
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00a      	beq.n	8009180 <prvInitialiseNewTask+0x58>
	__asm volatile
 800916a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	617b      	str	r3, [r7, #20]
}
 800917c:	bf00      	nop
 800917e:	e7fe      	b.n	800917e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d01f      	beq.n	80091c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009186:	2300      	movs	r3, #0
 8009188:	61fb      	str	r3, [r7, #28]
 800918a:	e012      	b.n	80091b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	4413      	add	r3, r2
 8009192:	7819      	ldrb	r1, [r3, #0]
 8009194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	4413      	add	r3, r2
 800919a:	3334      	adds	r3, #52	; 0x34
 800919c:	460a      	mov	r2, r1
 800919e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	4413      	add	r3, r2
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d006      	beq.n	80091ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	3301      	adds	r3, #1
 80091b0:	61fb      	str	r3, [r7, #28]
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	2b0f      	cmp	r3, #15
 80091b6:	d9e9      	bls.n	800918c <prvInitialiseNewTask+0x64>
 80091b8:	e000      	b.n	80091bc <prvInitialiseNewTask+0x94>
			{
				break;
 80091ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091c4:	e003      	b.n	80091ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	2b37      	cmp	r3, #55	; 0x37
 80091d2:	d901      	bls.n	80091d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80091d4:	2337      	movs	r3, #55	; 0x37
 80091d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80091d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80091e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e6:	2200      	movs	r2, #0
 80091e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ec:	3304      	adds	r3, #4
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe fc08 	bl	8007a04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f6:	3318      	adds	r3, #24
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fe fc03 	bl	8007a04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009202:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009206:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800920a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800920e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009212:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009216:	2200      	movs	r2, #0
 8009218:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800921c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921e:	2200      	movs	r2, #0
 8009220:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009226:	3354      	adds	r3, #84	; 0x54
 8009228:	2260      	movs	r2, #96	; 0x60
 800922a:	2100      	movs	r1, #0
 800922c:	4618      	mov	r0, r3
 800922e:	f001 fd68 	bl	800ad02 <memset>
 8009232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009234:	4a0c      	ldr	r2, [pc, #48]	; (8009268 <prvInitialiseNewTask+0x140>)
 8009236:	659a      	str	r2, [r3, #88]	; 0x58
 8009238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923a:	4a0c      	ldr	r2, [pc, #48]	; (800926c <prvInitialiseNewTask+0x144>)
 800923c:	65da      	str	r2, [r3, #92]	; 0x5c
 800923e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009240:	4a0b      	ldr	r2, [pc, #44]	; (8009270 <prvInitialiseNewTask+0x148>)
 8009242:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009244:	683a      	ldr	r2, [r7, #0]
 8009246:	68f9      	ldr	r1, [r7, #12]
 8009248:	69b8      	ldr	r0, [r7, #24]
 800924a:	f7fe fc6f 	bl	8007b2c <pxPortInitialiseStack>
 800924e:	4602      	mov	r2, r0
 8009250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009252:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800925a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800925e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009260:	bf00      	nop
 8009262:	3720      	adds	r7, #32
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	08011fa0 	.word	0x08011fa0
 800926c:	08011fc0 	.word	0x08011fc0
 8009270:	08011f80 	.word	0x08011f80

08009274 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800927c:	f7fe fd82 	bl	8007d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009280:	4b2d      	ldr	r3, [pc, #180]	; (8009338 <prvAddNewTaskToReadyList+0xc4>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3301      	adds	r3, #1
 8009286:	4a2c      	ldr	r2, [pc, #176]	; (8009338 <prvAddNewTaskToReadyList+0xc4>)
 8009288:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800928a:	4b2c      	ldr	r3, [pc, #176]	; (800933c <prvAddNewTaskToReadyList+0xc8>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d109      	bne.n	80092a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009292:	4a2a      	ldr	r2, [pc, #168]	; (800933c <prvAddNewTaskToReadyList+0xc8>)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009298:	4b27      	ldr	r3, [pc, #156]	; (8009338 <prvAddNewTaskToReadyList+0xc4>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d110      	bne.n	80092c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092a0:	f000 fd2c 	bl	8009cfc <prvInitialiseTaskLists>
 80092a4:	e00d      	b.n	80092c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092a6:	4b26      	ldr	r3, [pc, #152]	; (8009340 <prvAddNewTaskToReadyList+0xcc>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d109      	bne.n	80092c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80092ae:	4b23      	ldr	r3, [pc, #140]	; (800933c <prvAddNewTaskToReadyList+0xc8>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d802      	bhi.n	80092c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092bc:	4a1f      	ldr	r2, [pc, #124]	; (800933c <prvAddNewTaskToReadyList+0xc8>)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092c2:	4b20      	ldr	r3, [pc, #128]	; (8009344 <prvAddNewTaskToReadyList+0xd0>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3301      	adds	r3, #1
 80092c8:	4a1e      	ldr	r2, [pc, #120]	; (8009344 <prvAddNewTaskToReadyList+0xd0>)
 80092ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80092cc:	4b1d      	ldr	r3, [pc, #116]	; (8009344 <prvAddNewTaskToReadyList+0xd0>)
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d8:	4b1b      	ldr	r3, [pc, #108]	; (8009348 <prvAddNewTaskToReadyList+0xd4>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d903      	bls.n	80092e8 <prvAddNewTaskToReadyList+0x74>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	4a18      	ldr	r2, [pc, #96]	; (8009348 <prvAddNewTaskToReadyList+0xd4>)
 80092e6:	6013      	str	r3, [r2, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ec:	4613      	mov	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4a15      	ldr	r2, [pc, #84]	; (800934c <prvAddNewTaskToReadyList+0xd8>)
 80092f6:	441a      	add	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	3304      	adds	r3, #4
 80092fc:	4619      	mov	r1, r3
 80092fe:	4610      	mov	r0, r2
 8009300:	f7fe fb8d 	bl	8007a1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009304:	f7fe fd6e 	bl	8007de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009308:	4b0d      	ldr	r3, [pc, #52]	; (8009340 <prvAddNewTaskToReadyList+0xcc>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00e      	beq.n	800932e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009310:	4b0a      	ldr	r3, [pc, #40]	; (800933c <prvAddNewTaskToReadyList+0xc8>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931a:	429a      	cmp	r2, r3
 800931c:	d207      	bcs.n	800932e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800931e:	4b0c      	ldr	r3, [pc, #48]	; (8009350 <prvAddNewTaskToReadyList+0xdc>)
 8009320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800932e:	bf00      	nop
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20004de0 	.word	0x20004de0
 800933c:	2000490c 	.word	0x2000490c
 8009340:	20004dec 	.word	0x20004dec
 8009344:	20004dfc 	.word	0x20004dfc
 8009348:	20004de8 	.word	0x20004de8
 800934c:	20004910 	.word	0x20004910
 8009350:	e000ed04 	.word	0xe000ed04

08009354 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800935c:	2300      	movs	r3, #0
 800935e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d017      	beq.n	8009396 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009366:	4b13      	ldr	r3, [pc, #76]	; (80093b4 <vTaskDelay+0x60>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00a      	beq.n	8009384 <vTaskDelay+0x30>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	60bb      	str	r3, [r7, #8]
}
 8009380:	bf00      	nop
 8009382:	e7fe      	b.n	8009382 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009384:	f000 f990 	bl	80096a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009388:	2100      	movs	r1, #0
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 ff02 	bl	800a194 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009390:	f000 f998 	bl	80096c4 <xTaskResumeAll>
 8009394:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d107      	bne.n	80093ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800939c:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <vTaskDelay+0x64>)
 800939e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093ac:	bf00      	nop
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20004e08 	.word	0x20004e08
 80093b8:	e000ed04 	.word	0xe000ed04

080093bc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80093c4:	f7fe fcde 	bl	8007d84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d102      	bne.n	80093d4 <vTaskSuspend+0x18>
 80093ce:	4b30      	ldr	r3, [pc, #192]	; (8009490 <vTaskSuspend+0xd4>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	e000      	b.n	80093d6 <vTaskSuspend+0x1a>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3304      	adds	r3, #4
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fe fb7b 	bl	8007ad8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d004      	beq.n	80093f4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3318      	adds	r3, #24
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fe fb72 	bl	8007ad8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3304      	adds	r3, #4
 80093f8:	4619      	mov	r1, r3
 80093fa:	4826      	ldr	r0, [pc, #152]	; (8009494 <vTaskSuspend+0xd8>)
 80093fc:	f7fe fb0f 	bl	8007a1e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009406:	b2db      	uxtb	r3, r3
 8009408:	2b01      	cmp	r3, #1
 800940a:	d103      	bne.n	8009414 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009414:	f7fe fce6 	bl	8007de4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009418:	4b1f      	ldr	r3, [pc, #124]	; (8009498 <vTaskSuspend+0xdc>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d005      	beq.n	800942c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009420:	f7fe fcb0 	bl	8007d84 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009424:	f000 fd0c 	bl	8009e40 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009428:	f7fe fcdc 	bl	8007de4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800942c:	4b18      	ldr	r3, [pc, #96]	; (8009490 <vTaskSuspend+0xd4>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	429a      	cmp	r2, r3
 8009434:	d127      	bne.n	8009486 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8009436:	4b18      	ldr	r3, [pc, #96]	; (8009498 <vTaskSuspend+0xdc>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d017      	beq.n	800946e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800943e:	4b17      	ldr	r3, [pc, #92]	; (800949c <vTaskSuspend+0xe0>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00a      	beq.n	800945c <vTaskSuspend+0xa0>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	60bb      	str	r3, [r7, #8]
}
 8009458:	bf00      	nop
 800945a:	e7fe      	b.n	800945a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800945c:	4b10      	ldr	r3, [pc, #64]	; (80094a0 <vTaskSuspend+0xe4>)
 800945e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800946c:	e00b      	b.n	8009486 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800946e:	4b09      	ldr	r3, [pc, #36]	; (8009494 <vTaskSuspend+0xd8>)
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	4b0c      	ldr	r3, [pc, #48]	; (80094a4 <vTaskSuspend+0xe8>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	429a      	cmp	r2, r3
 8009478:	d103      	bne.n	8009482 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800947a:	4b05      	ldr	r3, [pc, #20]	; (8009490 <vTaskSuspend+0xd4>)
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]
	}
 8009480:	e001      	b.n	8009486 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8009482:	f000 fa87 	bl	8009994 <vTaskSwitchContext>
	}
 8009486:	bf00      	nop
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	2000490c 	.word	0x2000490c
 8009494:	20004dcc 	.word	0x20004dcc
 8009498:	20004dec 	.word	0x20004dec
 800949c:	20004e08 	.word	0x20004e08
 80094a0:	e000ed04 	.word	0xe000ed04
 80094a4:	20004de0 	.word	0x20004de0

080094a8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80094a8:	b480      	push	{r7}
 80094aa:	b087      	sub	sp, #28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80094b0:	2300      	movs	r3, #0
 80094b2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10a      	bne.n	80094d4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	60fb      	str	r3, [r7, #12]
}
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	4a0a      	ldr	r2, [pc, #40]	; (8009504 <prvTaskIsTaskSuspended+0x5c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d10a      	bne.n	80094f4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e2:	4a09      	ldr	r2, [pc, #36]	; (8009508 <prvTaskIsTaskSuspended+0x60>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d005      	beq.n	80094f4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80094f0:	2301      	movs	r3, #1
 80094f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094f4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80094f6:	4618      	mov	r0, r3
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	20004dcc 	.word	0x20004dcc
 8009508:	20004da0 	.word	0x20004da0

0800950c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10a      	bne.n	8009534 <vTaskResume+0x28>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	60bb      	str	r3, [r7, #8]
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009534:	4b20      	ldr	r3, [pc, #128]	; (80095b8 <vTaskResume+0xac>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	429a      	cmp	r2, r3
 800953c:	d038      	beq.n	80095b0 <vTaskResume+0xa4>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d035      	beq.n	80095b0 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8009544:	f7fe fc1e 	bl	8007d84 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f7ff ffad 	bl	80094a8 <prvTaskIsTaskSuspended>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d02b      	beq.n	80095ac <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	3304      	adds	r3, #4
 8009558:	4618      	mov	r0, r3
 800955a:	f7fe fabd 	bl	8007ad8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009562:	4b16      	ldr	r3, [pc, #88]	; (80095bc <vTaskResume+0xb0>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	429a      	cmp	r2, r3
 8009568:	d903      	bls.n	8009572 <vTaskResume+0x66>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956e:	4a13      	ldr	r2, [pc, #76]	; (80095bc <vTaskResume+0xb0>)
 8009570:	6013      	str	r3, [r2, #0]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009576:	4613      	mov	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4a10      	ldr	r2, [pc, #64]	; (80095c0 <vTaskResume+0xb4>)
 8009580:	441a      	add	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3304      	adds	r3, #4
 8009586:	4619      	mov	r1, r3
 8009588:	4610      	mov	r0, r2
 800958a:	f7fe fa48 	bl	8007a1e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009592:	4b09      	ldr	r3, [pc, #36]	; (80095b8 <vTaskResume+0xac>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	429a      	cmp	r2, r3
 800959a:	d307      	bcc.n	80095ac <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800959c:	4b09      	ldr	r3, [pc, #36]	; (80095c4 <vTaskResume+0xb8>)
 800959e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80095ac:	f7fe fc1a 	bl	8007de4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095b0:	bf00      	nop
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	2000490c 	.word	0x2000490c
 80095bc:	20004de8 	.word	0x20004de8
 80095c0:	20004910 	.word	0x20004910
 80095c4:	e000ed04 	.word	0xe000ed04

080095c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08a      	sub	sp, #40	; 0x28
 80095cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80095d6:	463a      	mov	r2, r7
 80095d8:	1d39      	adds	r1, r7, #4
 80095da:	f107 0308 	add.w	r3, r7, #8
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fd ffd2 	bl	8007588 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	9202      	str	r2, [sp, #8]
 80095ec:	9301      	str	r3, [sp, #4]
 80095ee:	2300      	movs	r3, #0
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	2300      	movs	r3, #0
 80095f4:	460a      	mov	r2, r1
 80095f6:	4924      	ldr	r1, [pc, #144]	; (8009688 <vTaskStartScheduler+0xc0>)
 80095f8:	4824      	ldr	r0, [pc, #144]	; (800968c <vTaskStartScheduler+0xc4>)
 80095fa:	f7ff fcf3 	bl	8008fe4 <xTaskCreateStatic>
 80095fe:	4603      	mov	r3, r0
 8009600:	4a23      	ldr	r2, [pc, #140]	; (8009690 <vTaskStartScheduler+0xc8>)
 8009602:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009604:	4b22      	ldr	r3, [pc, #136]	; (8009690 <vTaskStartScheduler+0xc8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800960c:	2301      	movs	r3, #1
 800960e:	617b      	str	r3, [r7, #20]
 8009610:	e001      	b.n	8009616 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009612:	2300      	movs	r3, #0
 8009614:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d102      	bne.n	8009622 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800961c:	f000 fe0e 	bl	800a23c <xTimerCreateTimerTask>
 8009620:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d11b      	bne.n	8009660 <vTaskStartScheduler+0x98>
	__asm volatile
 8009628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	613b      	str	r3, [r7, #16]
}
 800963a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800963c:	4b15      	ldr	r3, [pc, #84]	; (8009694 <vTaskStartScheduler+0xcc>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3354      	adds	r3, #84	; 0x54
 8009642:	4a15      	ldr	r2, [pc, #84]	; (8009698 <vTaskStartScheduler+0xd0>)
 8009644:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009646:	4b15      	ldr	r3, [pc, #84]	; (800969c <vTaskStartScheduler+0xd4>)
 8009648:	f04f 32ff 	mov.w	r2, #4294967295
 800964c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800964e:	4b14      	ldr	r3, [pc, #80]	; (80096a0 <vTaskStartScheduler+0xd8>)
 8009650:	2201      	movs	r2, #1
 8009652:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009654:	4b13      	ldr	r3, [pc, #76]	; (80096a4 <vTaskStartScheduler+0xdc>)
 8009656:	2200      	movs	r2, #0
 8009658:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800965a:	f7fe faf1 	bl	8007c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800965e:	e00e      	b.n	800967e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009666:	d10a      	bne.n	800967e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	60fb      	str	r3, [r7, #12]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <vTaskStartScheduler+0xb4>
}
 800967e:	bf00      	nop
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	080109c4 	.word	0x080109c4
 800968c:	08009ccd 	.word	0x08009ccd
 8009690:	20004e04 	.word	0x20004e04
 8009694:	2000490c 	.word	0x2000490c
 8009698:	20000038 	.word	0x20000038
 800969c:	20004e00 	.word	0x20004e00
 80096a0:	20004dec 	.word	0x20004dec
 80096a4:	20004de4 	.word	0x20004de4

080096a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096a8:	b480      	push	{r7}
 80096aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80096ac:	4b04      	ldr	r3, [pc, #16]	; (80096c0 <vTaskSuspendAll+0x18>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3301      	adds	r3, #1
 80096b2:	4a03      	ldr	r2, [pc, #12]	; (80096c0 <vTaskSuspendAll+0x18>)
 80096b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80096b6:	bf00      	nop
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	20004e08 	.word	0x20004e08

080096c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096d2:	4b42      	ldr	r3, [pc, #264]	; (80097dc <xTaskResumeAll+0x118>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10a      	bne.n	80096f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	603b      	str	r3, [r7, #0]
}
 80096ec:	bf00      	nop
 80096ee:	e7fe      	b.n	80096ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096f0:	f7fe fb48 	bl	8007d84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096f4:	4b39      	ldr	r3, [pc, #228]	; (80097dc <xTaskResumeAll+0x118>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	4a38      	ldr	r2, [pc, #224]	; (80097dc <xTaskResumeAll+0x118>)
 80096fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096fe:	4b37      	ldr	r3, [pc, #220]	; (80097dc <xTaskResumeAll+0x118>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d162      	bne.n	80097cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009706:	4b36      	ldr	r3, [pc, #216]	; (80097e0 <xTaskResumeAll+0x11c>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d05e      	beq.n	80097cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800970e:	e02f      	b.n	8009770 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009710:	4b34      	ldr	r3, [pc, #208]	; (80097e4 <xTaskResumeAll+0x120>)
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3318      	adds	r3, #24
 800971c:	4618      	mov	r0, r3
 800971e:	f7fe f9db 	bl	8007ad8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3304      	adds	r3, #4
 8009726:	4618      	mov	r0, r3
 8009728:	f7fe f9d6 	bl	8007ad8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009730:	4b2d      	ldr	r3, [pc, #180]	; (80097e8 <xTaskResumeAll+0x124>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	429a      	cmp	r2, r3
 8009736:	d903      	bls.n	8009740 <xTaskResumeAll+0x7c>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973c:	4a2a      	ldr	r2, [pc, #168]	; (80097e8 <xTaskResumeAll+0x124>)
 800973e:	6013      	str	r3, [r2, #0]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4a27      	ldr	r2, [pc, #156]	; (80097ec <xTaskResumeAll+0x128>)
 800974e:	441a      	add	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	3304      	adds	r3, #4
 8009754:	4619      	mov	r1, r3
 8009756:	4610      	mov	r0, r2
 8009758:	f7fe f961 	bl	8007a1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009760:	4b23      	ldr	r3, [pc, #140]	; (80097f0 <xTaskResumeAll+0x12c>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009766:	429a      	cmp	r2, r3
 8009768:	d302      	bcc.n	8009770 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800976a:	4b22      	ldr	r3, [pc, #136]	; (80097f4 <xTaskResumeAll+0x130>)
 800976c:	2201      	movs	r2, #1
 800976e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009770:	4b1c      	ldr	r3, [pc, #112]	; (80097e4 <xTaskResumeAll+0x120>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1cb      	bne.n	8009710 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800977e:	f000 fb5f 	bl	8009e40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009782:	4b1d      	ldr	r3, [pc, #116]	; (80097f8 <xTaskResumeAll+0x134>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d010      	beq.n	80097b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800978e:	f000 f847 	bl	8009820 <xTaskIncrementTick>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009798:	4b16      	ldr	r3, [pc, #88]	; (80097f4 <xTaskResumeAll+0x130>)
 800979a:	2201      	movs	r2, #1
 800979c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1f1      	bne.n	800978e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80097aa:	4b13      	ldr	r3, [pc, #76]	; (80097f8 <xTaskResumeAll+0x134>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097b0:	4b10      	ldr	r3, [pc, #64]	; (80097f4 <xTaskResumeAll+0x130>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d009      	beq.n	80097cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097b8:	2301      	movs	r3, #1
 80097ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097bc:	4b0f      	ldr	r3, [pc, #60]	; (80097fc <xTaskResumeAll+0x138>)
 80097be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097cc:	f7fe fb0a 	bl	8007de4 <vPortExitCritical>

	return xAlreadyYielded;
 80097d0:	68bb      	ldr	r3, [r7, #8]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20004e08 	.word	0x20004e08
 80097e0:	20004de0 	.word	0x20004de0
 80097e4:	20004da0 	.word	0x20004da0
 80097e8:	20004de8 	.word	0x20004de8
 80097ec:	20004910 	.word	0x20004910
 80097f0:	2000490c 	.word	0x2000490c
 80097f4:	20004df4 	.word	0x20004df4
 80097f8:	20004df0 	.word	0x20004df0
 80097fc:	e000ed04 	.word	0xe000ed04

08009800 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009806:	4b05      	ldr	r3, [pc, #20]	; (800981c <xTaskGetTickCount+0x1c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800980c:	687b      	ldr	r3, [r7, #4]
}
 800980e:	4618      	mov	r0, r3
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	20004de4 	.word	0x20004de4

08009820 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009826:	2300      	movs	r3, #0
 8009828:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800982a:	4b4f      	ldr	r3, [pc, #316]	; (8009968 <xTaskIncrementTick+0x148>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	f040 808f 	bne.w	8009952 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009834:	4b4d      	ldr	r3, [pc, #308]	; (800996c <xTaskIncrementTick+0x14c>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3301      	adds	r3, #1
 800983a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800983c:	4a4b      	ldr	r2, [pc, #300]	; (800996c <xTaskIncrementTick+0x14c>)
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d120      	bne.n	800988a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009848:	4b49      	ldr	r3, [pc, #292]	; (8009970 <xTaskIncrementTick+0x150>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00a      	beq.n	8009868 <xTaskIncrementTick+0x48>
	__asm volatile
 8009852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	603b      	str	r3, [r7, #0]
}
 8009864:	bf00      	nop
 8009866:	e7fe      	b.n	8009866 <xTaskIncrementTick+0x46>
 8009868:	4b41      	ldr	r3, [pc, #260]	; (8009970 <xTaskIncrementTick+0x150>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	60fb      	str	r3, [r7, #12]
 800986e:	4b41      	ldr	r3, [pc, #260]	; (8009974 <xTaskIncrementTick+0x154>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a3f      	ldr	r2, [pc, #252]	; (8009970 <xTaskIncrementTick+0x150>)
 8009874:	6013      	str	r3, [r2, #0]
 8009876:	4a3f      	ldr	r2, [pc, #252]	; (8009974 <xTaskIncrementTick+0x154>)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6013      	str	r3, [r2, #0]
 800987c:	4b3e      	ldr	r3, [pc, #248]	; (8009978 <xTaskIncrementTick+0x158>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3301      	adds	r3, #1
 8009882:	4a3d      	ldr	r2, [pc, #244]	; (8009978 <xTaskIncrementTick+0x158>)
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	f000 fadb 	bl	8009e40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800988a:	4b3c      	ldr	r3, [pc, #240]	; (800997c <xTaskIncrementTick+0x15c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	429a      	cmp	r2, r3
 8009892:	d349      	bcc.n	8009928 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009894:	4b36      	ldr	r3, [pc, #216]	; (8009970 <xTaskIncrementTick+0x150>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d104      	bne.n	80098a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800989e:	4b37      	ldr	r3, [pc, #220]	; (800997c <xTaskIncrementTick+0x15c>)
 80098a0:	f04f 32ff 	mov.w	r2, #4294967295
 80098a4:	601a      	str	r2, [r3, #0]
					break;
 80098a6:	e03f      	b.n	8009928 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098a8:	4b31      	ldr	r3, [pc, #196]	; (8009970 <xTaskIncrementTick+0x150>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d203      	bcs.n	80098c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098c0:	4a2e      	ldr	r2, [pc, #184]	; (800997c <xTaskIncrementTick+0x15c>)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098c6:	e02f      	b.n	8009928 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	3304      	adds	r3, #4
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fe f903 	bl	8007ad8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d004      	beq.n	80098e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	3318      	adds	r3, #24
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe f8fa 	bl	8007ad8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e8:	4b25      	ldr	r3, [pc, #148]	; (8009980 <xTaskIncrementTick+0x160>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d903      	bls.n	80098f8 <xTaskIncrementTick+0xd8>
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	4a22      	ldr	r2, [pc, #136]	; (8009980 <xTaskIncrementTick+0x160>)
 80098f6:	6013      	str	r3, [r2, #0]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098fc:	4613      	mov	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4a1f      	ldr	r2, [pc, #124]	; (8009984 <xTaskIncrementTick+0x164>)
 8009906:	441a      	add	r2, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	3304      	adds	r3, #4
 800990c:	4619      	mov	r1, r3
 800990e:	4610      	mov	r0, r2
 8009910:	f7fe f885 	bl	8007a1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009918:	4b1b      	ldr	r3, [pc, #108]	; (8009988 <xTaskIncrementTick+0x168>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991e:	429a      	cmp	r2, r3
 8009920:	d3b8      	bcc.n	8009894 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009922:	2301      	movs	r3, #1
 8009924:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009926:	e7b5      	b.n	8009894 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009928:	4b17      	ldr	r3, [pc, #92]	; (8009988 <xTaskIncrementTick+0x168>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800992e:	4915      	ldr	r1, [pc, #84]	; (8009984 <xTaskIncrementTick+0x164>)
 8009930:	4613      	mov	r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4413      	add	r3, r2
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	440b      	add	r3, r1
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d901      	bls.n	8009944 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009940:	2301      	movs	r3, #1
 8009942:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009944:	4b11      	ldr	r3, [pc, #68]	; (800998c <xTaskIncrementTick+0x16c>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d007      	beq.n	800995c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800994c:	2301      	movs	r3, #1
 800994e:	617b      	str	r3, [r7, #20]
 8009950:	e004      	b.n	800995c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009952:	4b0f      	ldr	r3, [pc, #60]	; (8009990 <xTaskIncrementTick+0x170>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3301      	adds	r3, #1
 8009958:	4a0d      	ldr	r2, [pc, #52]	; (8009990 <xTaskIncrementTick+0x170>)
 800995a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800995c:	697b      	ldr	r3, [r7, #20]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20004e08 	.word	0x20004e08
 800996c:	20004de4 	.word	0x20004de4
 8009970:	20004d98 	.word	0x20004d98
 8009974:	20004d9c 	.word	0x20004d9c
 8009978:	20004df8 	.word	0x20004df8
 800997c:	20004e00 	.word	0x20004e00
 8009980:	20004de8 	.word	0x20004de8
 8009984:	20004910 	.word	0x20004910
 8009988:	2000490c 	.word	0x2000490c
 800998c:	20004df4 	.word	0x20004df4
 8009990:	20004df0 	.word	0x20004df0

08009994 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800999a:	4b2a      	ldr	r3, [pc, #168]	; (8009a44 <vTaskSwitchContext+0xb0>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d003      	beq.n	80099aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80099a2:	4b29      	ldr	r3, [pc, #164]	; (8009a48 <vTaskSwitchContext+0xb4>)
 80099a4:	2201      	movs	r2, #1
 80099a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80099a8:	e046      	b.n	8009a38 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80099aa:	4b27      	ldr	r3, [pc, #156]	; (8009a48 <vTaskSwitchContext+0xb4>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099b0:	4b26      	ldr	r3, [pc, #152]	; (8009a4c <vTaskSwitchContext+0xb8>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	60fb      	str	r3, [r7, #12]
 80099b6:	e010      	b.n	80099da <vTaskSwitchContext+0x46>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10a      	bne.n	80099d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	607b      	str	r3, [r7, #4]
}
 80099d0:	bf00      	nop
 80099d2:	e7fe      	b.n	80099d2 <vTaskSwitchContext+0x3e>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	3b01      	subs	r3, #1
 80099d8:	60fb      	str	r3, [r7, #12]
 80099da:	491d      	ldr	r1, [pc, #116]	; (8009a50 <vTaskSwitchContext+0xbc>)
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	4613      	mov	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	440b      	add	r3, r1
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d0e4      	beq.n	80099b8 <vTaskSwitchContext+0x24>
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	4613      	mov	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4a15      	ldr	r2, [pc, #84]	; (8009a50 <vTaskSwitchContext+0xbc>)
 80099fa:	4413      	add	r3, r2
 80099fc:	60bb      	str	r3, [r7, #8]
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	605a      	str	r2, [r3, #4]
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	3308      	adds	r3, #8
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d104      	bne.n	8009a1e <vTaskSwitchContext+0x8a>
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	605a      	str	r2, [r3, #4]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	4a0b      	ldr	r2, [pc, #44]	; (8009a54 <vTaskSwitchContext+0xc0>)
 8009a26:	6013      	str	r3, [r2, #0]
 8009a28:	4a08      	ldr	r2, [pc, #32]	; (8009a4c <vTaskSwitchContext+0xb8>)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a2e:	4b09      	ldr	r3, [pc, #36]	; (8009a54 <vTaskSwitchContext+0xc0>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3354      	adds	r3, #84	; 0x54
 8009a34:	4a08      	ldr	r2, [pc, #32]	; (8009a58 <vTaskSwitchContext+0xc4>)
 8009a36:	6013      	str	r3, [r2, #0]
}
 8009a38:	bf00      	nop
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	20004e08 	.word	0x20004e08
 8009a48:	20004df4 	.word	0x20004df4
 8009a4c:	20004de8 	.word	0x20004de8
 8009a50:	20004910 	.word	0x20004910
 8009a54:	2000490c 	.word	0x2000490c
 8009a58:	20000038 	.word	0x20000038

08009a5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10a      	bne.n	8009a82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	60fb      	str	r3, [r7, #12]
}
 8009a7e:	bf00      	nop
 8009a80:	e7fe      	b.n	8009a80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a82:	4b07      	ldr	r3, [pc, #28]	; (8009aa0 <vTaskPlaceOnEventList+0x44>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3318      	adds	r3, #24
 8009a88:	4619      	mov	r1, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7fd ffeb 	bl	8007a66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a90:	2101      	movs	r1, #1
 8009a92:	6838      	ldr	r0, [r7, #0]
 8009a94:	f000 fb7e 	bl	800a194 <prvAddCurrentTaskToDelayedList>
}
 8009a98:	bf00      	nop
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	2000490c 	.word	0x2000490c

08009aa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10a      	bne.n	8009acc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	617b      	str	r3, [r7, #20]
}
 8009ac8:	bf00      	nop
 8009aca:	e7fe      	b.n	8009aca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009acc:	4b0a      	ldr	r3, [pc, #40]	; (8009af8 <vTaskPlaceOnEventListRestricted+0x54>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3318      	adds	r3, #24
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f7fd ffa2 	bl	8007a1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d002      	beq.n	8009ae6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ae6:	6879      	ldr	r1, [r7, #4]
 8009ae8:	68b8      	ldr	r0, [r7, #8]
 8009aea:	f000 fb53 	bl	800a194 <prvAddCurrentTaskToDelayedList>
	}
 8009aee:	bf00      	nop
 8009af0:	3718      	adds	r7, #24
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	2000490c 	.word	0x2000490c

08009afc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10a      	bne.n	8009b28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	60fb      	str	r3, [r7, #12]
}
 8009b24:	bf00      	nop
 8009b26:	e7fe      	b.n	8009b26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	3318      	adds	r3, #24
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fd ffd3 	bl	8007ad8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b32:	4b1e      	ldr	r3, [pc, #120]	; (8009bac <xTaskRemoveFromEventList+0xb0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d11d      	bne.n	8009b76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fd ffca 	bl	8007ad8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b48:	4b19      	ldr	r3, [pc, #100]	; (8009bb0 <xTaskRemoveFromEventList+0xb4>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d903      	bls.n	8009b58 <xTaskRemoveFromEventList+0x5c>
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b54:	4a16      	ldr	r2, [pc, #88]	; (8009bb0 <xTaskRemoveFromEventList+0xb4>)
 8009b56:	6013      	str	r3, [r2, #0]
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	4413      	add	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4a13      	ldr	r2, [pc, #76]	; (8009bb4 <xTaskRemoveFromEventList+0xb8>)
 8009b66:	441a      	add	r2, r3
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4610      	mov	r0, r2
 8009b70:	f7fd ff55 	bl	8007a1e <vListInsertEnd>
 8009b74:	e005      	b.n	8009b82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	3318      	adds	r3, #24
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	480e      	ldr	r0, [pc, #56]	; (8009bb8 <xTaskRemoveFromEventList+0xbc>)
 8009b7e:	f7fd ff4e 	bl	8007a1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b86:	4b0d      	ldr	r3, [pc, #52]	; (8009bbc <xTaskRemoveFromEventList+0xc0>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d905      	bls.n	8009b9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b90:	2301      	movs	r3, #1
 8009b92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b94:	4b0a      	ldr	r3, [pc, #40]	; (8009bc0 <xTaskRemoveFromEventList+0xc4>)
 8009b96:	2201      	movs	r2, #1
 8009b98:	601a      	str	r2, [r3, #0]
 8009b9a:	e001      	b.n	8009ba0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ba0:	697b      	ldr	r3, [r7, #20]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3718      	adds	r7, #24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	20004e08 	.word	0x20004e08
 8009bb0:	20004de8 	.word	0x20004de8
 8009bb4:	20004910 	.word	0x20004910
 8009bb8:	20004da0 	.word	0x20004da0
 8009bbc:	2000490c 	.word	0x2000490c
 8009bc0:	20004df4 	.word	0x20004df4

08009bc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009bcc:	4b06      	ldr	r3, [pc, #24]	; (8009be8 <vTaskInternalSetTimeOutState+0x24>)
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009bd4:	4b05      	ldr	r3, [pc, #20]	; (8009bec <vTaskInternalSetTimeOutState+0x28>)
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	605a      	str	r2, [r3, #4]
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr
 8009be8:	20004df8 	.word	0x20004df8
 8009bec:	20004de4 	.word	0x20004de4

08009bf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10a      	bne.n	8009c16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	613b      	str	r3, [r7, #16]
}
 8009c12:	bf00      	nop
 8009c14:	e7fe      	b.n	8009c14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10a      	bne.n	8009c32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	60fb      	str	r3, [r7, #12]
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009c32:	f7fe f8a7 	bl	8007d84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c36:	4b1d      	ldr	r3, [pc, #116]	; (8009cac <xTaskCheckForTimeOut+0xbc>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	69ba      	ldr	r2, [r7, #24]
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4e:	d102      	bne.n	8009c56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c50:	2300      	movs	r3, #0
 8009c52:	61fb      	str	r3, [r7, #28]
 8009c54:	e023      	b.n	8009c9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	4b15      	ldr	r3, [pc, #84]	; (8009cb0 <xTaskCheckForTimeOut+0xc0>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d007      	beq.n	8009c72 <xTaskCheckForTimeOut+0x82>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	69ba      	ldr	r2, [r7, #24]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d302      	bcc.n	8009c72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	61fb      	str	r3, [r7, #28]
 8009c70:	e015      	b.n	8009c9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d20b      	bcs.n	8009c94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	1ad2      	subs	r2, r2, r3
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f7ff ff9b 	bl	8009bc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	61fb      	str	r3, [r7, #28]
 8009c92:	e004      	b.n	8009c9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2200      	movs	r2, #0
 8009c98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c9e:	f7fe f8a1 	bl	8007de4 <vPortExitCritical>

	return xReturn;
 8009ca2:	69fb      	ldr	r3, [r7, #28]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3720      	adds	r7, #32
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	20004de4 	.word	0x20004de4
 8009cb0:	20004df8 	.word	0x20004df8

08009cb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009cb8:	4b03      	ldr	r3, [pc, #12]	; (8009cc8 <vTaskMissedYield+0x14>)
 8009cba:	2201      	movs	r2, #1
 8009cbc:	601a      	str	r2, [r3, #0]
}
 8009cbe:	bf00      	nop
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	20004df4 	.word	0x20004df4

08009ccc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009cd4:	f000 f852 	bl	8009d7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009cd8:	4b06      	ldr	r3, [pc, #24]	; (8009cf4 <prvIdleTask+0x28>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d9f9      	bls.n	8009cd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ce0:	4b05      	ldr	r3, [pc, #20]	; (8009cf8 <prvIdleTask+0x2c>)
 8009ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ce6:	601a      	str	r2, [r3, #0]
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009cf0:	e7f0      	b.n	8009cd4 <prvIdleTask+0x8>
 8009cf2:	bf00      	nop
 8009cf4:	20004910 	.word	0x20004910
 8009cf8:	e000ed04 	.word	0xe000ed04

08009cfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d02:	2300      	movs	r3, #0
 8009d04:	607b      	str	r3, [r7, #4]
 8009d06:	e00c      	b.n	8009d22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4a12      	ldr	r2, [pc, #72]	; (8009d5c <prvInitialiseTaskLists+0x60>)
 8009d14:	4413      	add	r3, r2
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fd fe54 	bl	80079c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	607b      	str	r3, [r7, #4]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b37      	cmp	r3, #55	; 0x37
 8009d26:	d9ef      	bls.n	8009d08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d28:	480d      	ldr	r0, [pc, #52]	; (8009d60 <prvInitialiseTaskLists+0x64>)
 8009d2a:	f7fd fe4b 	bl	80079c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d2e:	480d      	ldr	r0, [pc, #52]	; (8009d64 <prvInitialiseTaskLists+0x68>)
 8009d30:	f7fd fe48 	bl	80079c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d34:	480c      	ldr	r0, [pc, #48]	; (8009d68 <prvInitialiseTaskLists+0x6c>)
 8009d36:	f7fd fe45 	bl	80079c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d3a:	480c      	ldr	r0, [pc, #48]	; (8009d6c <prvInitialiseTaskLists+0x70>)
 8009d3c:	f7fd fe42 	bl	80079c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d40:	480b      	ldr	r0, [pc, #44]	; (8009d70 <prvInitialiseTaskLists+0x74>)
 8009d42:	f7fd fe3f 	bl	80079c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d46:	4b0b      	ldr	r3, [pc, #44]	; (8009d74 <prvInitialiseTaskLists+0x78>)
 8009d48:	4a05      	ldr	r2, [pc, #20]	; (8009d60 <prvInitialiseTaskLists+0x64>)
 8009d4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d4c:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <prvInitialiseTaskLists+0x7c>)
 8009d4e:	4a05      	ldr	r2, [pc, #20]	; (8009d64 <prvInitialiseTaskLists+0x68>)
 8009d50:	601a      	str	r2, [r3, #0]
}
 8009d52:	bf00      	nop
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20004910 	.word	0x20004910
 8009d60:	20004d70 	.word	0x20004d70
 8009d64:	20004d84 	.word	0x20004d84
 8009d68:	20004da0 	.word	0x20004da0
 8009d6c:	20004db4 	.word	0x20004db4
 8009d70:	20004dcc 	.word	0x20004dcc
 8009d74:	20004d98 	.word	0x20004d98
 8009d78:	20004d9c 	.word	0x20004d9c

08009d7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d82:	e019      	b.n	8009db8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d84:	f7fd fffe 	bl	8007d84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d88:	4b10      	ldr	r3, [pc, #64]	; (8009dcc <prvCheckTasksWaitingTermination+0x50>)
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3304      	adds	r3, #4
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fd fe9f 	bl	8007ad8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d9a:	4b0d      	ldr	r3, [pc, #52]	; (8009dd0 <prvCheckTasksWaitingTermination+0x54>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	4a0b      	ldr	r2, [pc, #44]	; (8009dd0 <prvCheckTasksWaitingTermination+0x54>)
 8009da2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009da4:	4b0b      	ldr	r3, [pc, #44]	; (8009dd4 <prvCheckTasksWaitingTermination+0x58>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3b01      	subs	r3, #1
 8009daa:	4a0a      	ldr	r2, [pc, #40]	; (8009dd4 <prvCheckTasksWaitingTermination+0x58>)
 8009dac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009dae:	f7fe f819 	bl	8007de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f810 	bl	8009dd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009db8:	4b06      	ldr	r3, [pc, #24]	; (8009dd4 <prvCheckTasksWaitingTermination+0x58>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1e1      	bne.n	8009d84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009dc0:	bf00      	nop
 8009dc2:	bf00      	nop
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20004db4 	.word	0x20004db4
 8009dd0:	20004de0 	.word	0x20004de0
 8009dd4:	20004dc8 	.word	0x20004dc8

08009dd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3354      	adds	r3, #84	; 0x54
 8009de4:	4618      	mov	r0, r3
 8009de6:	f001 feb1 	bl	800bb4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d108      	bne.n	8009e06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fd fcc5 	bl	8007788 <vPortFree>
				vPortFree( pxTCB );
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7fd fcc2 	bl	8007788 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e04:	e018      	b.n	8009e38 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d103      	bne.n	8009e18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f7fd fcb9 	bl	8007788 <vPortFree>
	}
 8009e16:	e00f      	b.n	8009e38 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d00a      	beq.n	8009e38 <prvDeleteTCB+0x60>
	__asm volatile
 8009e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	60fb      	str	r3, [r7, #12]
}
 8009e34:	bf00      	nop
 8009e36:	e7fe      	b.n	8009e36 <prvDeleteTCB+0x5e>
	}
 8009e38:	bf00      	nop
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e46:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <prvResetNextTaskUnblockTime+0x38>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d104      	bne.n	8009e5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e50:	4b0a      	ldr	r3, [pc, #40]	; (8009e7c <prvResetNextTaskUnblockTime+0x3c>)
 8009e52:	f04f 32ff 	mov.w	r2, #4294967295
 8009e56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e58:	e008      	b.n	8009e6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e5a:	4b07      	ldr	r3, [pc, #28]	; (8009e78 <prvResetNextTaskUnblockTime+0x38>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	4a04      	ldr	r2, [pc, #16]	; (8009e7c <prvResetNextTaskUnblockTime+0x3c>)
 8009e6a:	6013      	str	r3, [r2, #0]
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	20004d98 	.word	0x20004d98
 8009e7c:	20004e00 	.word	0x20004e00

08009e80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e86:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <xTaskGetSchedulerState+0x34>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d102      	bne.n	8009e94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	607b      	str	r3, [r7, #4]
 8009e92:	e008      	b.n	8009ea6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e94:	4b08      	ldr	r3, [pc, #32]	; (8009eb8 <xTaskGetSchedulerState+0x38>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d102      	bne.n	8009ea2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	607b      	str	r3, [r7, #4]
 8009ea0:	e001      	b.n	8009ea6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ea6:	687b      	ldr	r3, [r7, #4]
	}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	20004dec 	.word	0x20004dec
 8009eb8:	20004e08 	.word	0x20004e08

08009ebc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d051      	beq.n	8009f76 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed6:	4b2a      	ldr	r3, [pc, #168]	; (8009f80 <xTaskPriorityInherit+0xc4>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d241      	bcs.n	8009f64 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	db06      	blt.n	8009ef6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ee8:	4b25      	ldr	r3, [pc, #148]	; (8009f80 <xTaskPriorityInherit+0xc4>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	6959      	ldr	r1, [r3, #20]
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efe:	4613      	mov	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4a1f      	ldr	r2, [pc, #124]	; (8009f84 <xTaskPriorityInherit+0xc8>)
 8009f08:	4413      	add	r3, r2
 8009f0a:	4299      	cmp	r1, r3
 8009f0c:	d122      	bne.n	8009f54 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	3304      	adds	r3, #4
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fd fde0 	bl	8007ad8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f18:	4b19      	ldr	r3, [pc, #100]	; (8009f80 <xTaskPriorityInherit+0xc4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f26:	4b18      	ldr	r3, [pc, #96]	; (8009f88 <xTaskPriorityInherit+0xcc>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d903      	bls.n	8009f36 <xTaskPriorityInherit+0x7a>
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f32:	4a15      	ldr	r2, [pc, #84]	; (8009f88 <xTaskPriorityInherit+0xcc>)
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4a10      	ldr	r2, [pc, #64]	; (8009f84 <xTaskPriorityInherit+0xc8>)
 8009f44:	441a      	add	r2, r3
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	f7fd fd66 	bl	8007a1e <vListInsertEnd>
 8009f52:	e004      	b.n	8009f5e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f54:	4b0a      	ldr	r3, [pc, #40]	; (8009f80 <xTaskPriorityInherit+0xc4>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	60fb      	str	r3, [r7, #12]
 8009f62:	e008      	b.n	8009f76 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f68:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <xTaskPriorityInherit+0xc4>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d201      	bcs.n	8009f76 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009f72:	2301      	movs	r3, #1
 8009f74:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f76:	68fb      	ldr	r3, [r7, #12]
	}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	2000490c 	.word	0x2000490c
 8009f84:	20004910 	.word	0x20004910
 8009f88:	20004de8 	.word	0x20004de8

08009f8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d056      	beq.n	800a050 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009fa2:	4b2e      	ldr	r3, [pc, #184]	; (800a05c <xTaskPriorityDisinherit+0xd0>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d00a      	beq.n	8009fc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	60fb      	str	r3, [r7, #12]
}
 8009fbe:	bf00      	nop
 8009fc0:	e7fe      	b.n	8009fc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10a      	bne.n	8009fe0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fce:	f383 8811 	msr	BASEPRI, r3
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	60bb      	str	r3, [r7, #8]
}
 8009fdc:	bf00      	nop
 8009fde:	e7fe      	b.n	8009fde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fe4:	1e5a      	subs	r2, r3, #1
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d02c      	beq.n	800a050 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d128      	bne.n	800a050 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	3304      	adds	r3, #4
 800a002:	4618      	mov	r0, r3
 800a004:	f7fd fd68 	bl	8007ad8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a014:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a020:	4b0f      	ldr	r3, [pc, #60]	; (800a060 <xTaskPriorityDisinherit+0xd4>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	429a      	cmp	r2, r3
 800a026:	d903      	bls.n	800a030 <xTaskPriorityDisinherit+0xa4>
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02c:	4a0c      	ldr	r2, [pc, #48]	; (800a060 <xTaskPriorityDisinherit+0xd4>)
 800a02e:	6013      	str	r3, [r2, #0]
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a034:	4613      	mov	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4a09      	ldr	r2, [pc, #36]	; (800a064 <xTaskPriorityDisinherit+0xd8>)
 800a03e:	441a      	add	r2, r3
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	3304      	adds	r3, #4
 800a044:	4619      	mov	r1, r3
 800a046:	4610      	mov	r0, r2
 800a048:	f7fd fce9 	bl	8007a1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a04c:	2301      	movs	r3, #1
 800a04e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a050:	697b      	ldr	r3, [r7, #20]
	}
 800a052:	4618      	mov	r0, r3
 800a054:	3718      	adds	r7, #24
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	2000490c 	.word	0x2000490c
 800a060:	20004de8 	.word	0x20004de8
 800a064:	20004910 	.word	0x20004910

0800a068 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b088      	sub	sp, #32
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a076:	2301      	movs	r3, #1
 800a078:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d06a      	beq.n	800a156 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10a      	bne.n	800a09e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	60fb      	str	r3, [r7, #12]
}
 800a09a:	bf00      	nop
 800a09c:	e7fe      	b.n	800a09c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d902      	bls.n	800a0ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	61fb      	str	r3, [r7, #28]
 800a0ac:	e002      	b.n	800a0b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b8:	69fa      	ldr	r2, [r7, #28]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d04b      	beq.n	800a156 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d146      	bne.n	800a156 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a0c8:	4b25      	ldr	r3, [pc, #148]	; (800a160 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	69ba      	ldr	r2, [r7, #24]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d10a      	bne.n	800a0e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	60bb      	str	r3, [r7, #8]
}
 800a0e4:	bf00      	nop
 800a0e6:	e7fe      	b.n	800a0e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	69fa      	ldr	r2, [r7, #28]
 800a0f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	db04      	blt.n	800a106 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	6959      	ldr	r1, [r3, #20]
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	4613      	mov	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4a13      	ldr	r2, [pc, #76]	; (800a164 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a116:	4413      	add	r3, r2
 800a118:	4299      	cmp	r1, r3
 800a11a:	d11c      	bne.n	800a156 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	3304      	adds	r3, #4
 800a120:	4618      	mov	r0, r3
 800a122:	f7fd fcd9 	bl	8007ad8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a12a:	4b0f      	ldr	r3, [pc, #60]	; (800a168 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d903      	bls.n	800a13a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a136:	4a0c      	ldr	r2, [pc, #48]	; (800a168 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a138:	6013      	str	r3, [r2, #0]
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a13e:	4613      	mov	r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4413      	add	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4a07      	ldr	r2, [pc, #28]	; (800a164 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a148:	441a      	add	r2, r3
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	3304      	adds	r3, #4
 800a14e:	4619      	mov	r1, r3
 800a150:	4610      	mov	r0, r2
 800a152:	f7fd fc64 	bl	8007a1e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a156:	bf00      	nop
 800a158:	3720      	adds	r7, #32
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	2000490c 	.word	0x2000490c
 800a164:	20004910 	.word	0x20004910
 800a168:	20004de8 	.word	0x20004de8

0800a16c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a16c:	b480      	push	{r7}
 800a16e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a170:	4b07      	ldr	r3, [pc, #28]	; (800a190 <pvTaskIncrementMutexHeldCount+0x24>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d004      	beq.n	800a182 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a178:	4b05      	ldr	r3, [pc, #20]	; (800a190 <pvTaskIncrementMutexHeldCount+0x24>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a17e:	3201      	adds	r2, #1
 800a180:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a182:	4b03      	ldr	r3, [pc, #12]	; (800a190 <pvTaskIncrementMutexHeldCount+0x24>)
 800a184:	681b      	ldr	r3, [r3, #0]
	}
 800a186:	4618      	mov	r0, r3
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	2000490c 	.word	0x2000490c

0800a194 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a19e:	4b21      	ldr	r3, [pc, #132]	; (800a224 <prvAddCurrentTaskToDelayedList+0x90>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1a4:	4b20      	ldr	r3, [pc, #128]	; (800a228 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3304      	adds	r3, #4
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fd fc94 	bl	8007ad8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b6:	d10a      	bne.n	800a1ce <prvAddCurrentTaskToDelayedList+0x3a>
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d007      	beq.n	800a1ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1be:	4b1a      	ldr	r3, [pc, #104]	; (800a228 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4819      	ldr	r0, [pc, #100]	; (800a22c <prvAddCurrentTaskToDelayedList+0x98>)
 800a1c8:	f7fd fc29 	bl	8007a1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1cc:	e026      	b.n	800a21c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1d6:	4b14      	ldr	r3, [pc, #80]	; (800a228 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d209      	bcs.n	800a1fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1e6:	4b12      	ldr	r3, [pc, #72]	; (800a230 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	4b0f      	ldr	r3, [pc, #60]	; (800a228 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	3304      	adds	r3, #4
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	4610      	mov	r0, r2
 800a1f4:	f7fd fc37 	bl	8007a66 <vListInsert>
}
 800a1f8:	e010      	b.n	800a21c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1fa:	4b0e      	ldr	r3, [pc, #56]	; (800a234 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	4b0a      	ldr	r3, [pc, #40]	; (800a228 <prvAddCurrentTaskToDelayedList+0x94>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3304      	adds	r3, #4
 800a204:	4619      	mov	r1, r3
 800a206:	4610      	mov	r0, r2
 800a208:	f7fd fc2d 	bl	8007a66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a20c:	4b0a      	ldr	r3, [pc, #40]	; (800a238 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	429a      	cmp	r2, r3
 800a214:	d202      	bcs.n	800a21c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a216:	4a08      	ldr	r2, [pc, #32]	; (800a238 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	6013      	str	r3, [r2, #0]
}
 800a21c:	bf00      	nop
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	20004de4 	.word	0x20004de4
 800a228:	2000490c 	.word	0x2000490c
 800a22c:	20004dcc 	.word	0x20004dcc
 800a230:	20004d9c 	.word	0x20004d9c
 800a234:	20004d98 	.word	0x20004d98
 800a238:	20004e00 	.word	0x20004e00

0800a23c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08a      	sub	sp, #40	; 0x28
 800a240:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a242:	2300      	movs	r3, #0
 800a244:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a246:	f000 fba1 	bl	800a98c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a24a:	4b1c      	ldr	r3, [pc, #112]	; (800a2bc <xTimerCreateTimerTask+0x80>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d021      	beq.n	800a296 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a252:	2300      	movs	r3, #0
 800a254:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a256:	2300      	movs	r3, #0
 800a258:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a25a:	1d3a      	adds	r2, r7, #4
 800a25c:	f107 0108 	add.w	r1, r7, #8
 800a260:	f107 030c 	add.w	r3, r7, #12
 800a264:	4618      	mov	r0, r3
 800a266:	f7fd f9a9 	bl	80075bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a26a:	6879      	ldr	r1, [r7, #4]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	9202      	str	r2, [sp, #8]
 800a272:	9301      	str	r3, [sp, #4]
 800a274:	2302      	movs	r3, #2
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	2300      	movs	r3, #0
 800a27a:	460a      	mov	r2, r1
 800a27c:	4910      	ldr	r1, [pc, #64]	; (800a2c0 <xTimerCreateTimerTask+0x84>)
 800a27e:	4811      	ldr	r0, [pc, #68]	; (800a2c4 <xTimerCreateTimerTask+0x88>)
 800a280:	f7fe feb0 	bl	8008fe4 <xTaskCreateStatic>
 800a284:	4603      	mov	r3, r0
 800a286:	4a10      	ldr	r2, [pc, #64]	; (800a2c8 <xTimerCreateTimerTask+0x8c>)
 800a288:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a28a:	4b0f      	ldr	r3, [pc, #60]	; (800a2c8 <xTimerCreateTimerTask+0x8c>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a292:	2301      	movs	r3, #1
 800a294:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10a      	bne.n	800a2b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	613b      	str	r3, [r7, #16]
}
 800a2ae:	bf00      	nop
 800a2b0:	e7fe      	b.n	800a2b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a2b2:	697b      	ldr	r3, [r7, #20]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20004e3c 	.word	0x20004e3c
 800a2c0:	080109cc 	.word	0x080109cc
 800a2c4:	0800a535 	.word	0x0800a535
 800a2c8:	20004e40 	.word	0x20004e40

0800a2cc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
 800a2d8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a2da:	202c      	movs	r0, #44	; 0x2c
 800a2dc:	f7fd f988 	bl	80075f0 <pvPortMalloc>
 800a2e0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00d      	beq.n	800a304 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	9301      	str	r3, [sp, #4]
 800a2f4:	6a3b      	ldr	r3, [r7, #32]
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	68b9      	ldr	r1, [r7, #8]
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f000 f843 	bl	800a38a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a304:	697b      	ldr	r3, [r7, #20]
	}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b08a      	sub	sp, #40	; 0x28
 800a312:	af02      	add	r7, sp, #8
 800a314:	60f8      	str	r0, [r7, #12]
 800a316:	60b9      	str	r1, [r7, #8]
 800a318:	607a      	str	r2, [r7, #4]
 800a31a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a31c:	232c      	movs	r3, #44	; 0x2c
 800a31e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	2b2c      	cmp	r3, #44	; 0x2c
 800a324:	d00a      	beq.n	800a33c <xTimerCreateStatic+0x2e>
	__asm volatile
 800a326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32a:	f383 8811 	msr	BASEPRI, r3
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	61bb      	str	r3, [r7, #24]
}
 800a338:	bf00      	nop
 800a33a:	e7fe      	b.n	800a33a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a33c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10a      	bne.n	800a35a <xTimerCreateStatic+0x4c>
	__asm volatile
 800a344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	617b      	str	r3, [r7, #20]
}
 800a356:	bf00      	nop
 800a358:	e7fe      	b.n	800a358 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00d      	beq.n	800a380 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	2202      	movs	r2, #2
 800a368:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	9301      	str	r3, [sp, #4]
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	68b9      	ldr	r1, [r7, #8]
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f000 f805 	bl	800a38a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a380:	69fb      	ldr	r3, [r7, #28]
	}
 800a382:	4618      	mov	r0, r3
 800a384:	3720      	adds	r7, #32
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b086      	sub	sp, #24
 800a38e:	af00      	add	r7, sp, #0
 800a390:	60f8      	str	r0, [r7, #12]
 800a392:	60b9      	str	r1, [r7, #8]
 800a394:	607a      	str	r2, [r7, #4]
 800a396:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10a      	bne.n	800a3b4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	617b      	str	r3, [r7, #20]
}
 800a3b0:	bf00      	nop
 800a3b2:	e7fe      	b.n	800a3b2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d01e      	beq.n	800a3f8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a3ba:	f000 fae7 	bl	800a98c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	6a3a      	ldr	r2, [r7, #32]
 800a3d4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	3304      	adds	r3, #4
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fd fb12 	bl	8007a04 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d008      	beq.n	800a3f8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3ec:	f043 0304 	orr.w	r3, r3, #4
 800a3f0:	b2da      	uxtb	r2, r3
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a3f8:	bf00      	nop
 800a3fa:	3718      	adds	r7, #24
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b08a      	sub	sp, #40	; 0x28
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a40e:	2300      	movs	r3, #0
 800a410:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10a      	bne.n	800a42e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	623b      	str	r3, [r7, #32]
}
 800a42a:	bf00      	nop
 800a42c:	e7fe      	b.n	800a42c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a42e:	4b1a      	ldr	r3, [pc, #104]	; (800a498 <xTimerGenericCommand+0x98>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d02a      	beq.n	800a48c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	2b05      	cmp	r3, #5
 800a446:	dc18      	bgt.n	800a47a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a448:	f7ff fd1a 	bl	8009e80 <xTaskGetSchedulerState>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d109      	bne.n	800a466 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a452:	4b11      	ldr	r3, [pc, #68]	; (800a498 <xTimerGenericCommand+0x98>)
 800a454:	6818      	ldr	r0, [r3, #0]
 800a456:	f107 0110 	add.w	r1, r7, #16
 800a45a:	2300      	movs	r3, #0
 800a45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a45e:	f7fd ff5b 	bl	8008318 <xQueueGenericSend>
 800a462:	6278      	str	r0, [r7, #36]	; 0x24
 800a464:	e012      	b.n	800a48c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a466:	4b0c      	ldr	r3, [pc, #48]	; (800a498 <xTimerGenericCommand+0x98>)
 800a468:	6818      	ldr	r0, [r3, #0]
 800a46a:	f107 0110 	add.w	r1, r7, #16
 800a46e:	2300      	movs	r3, #0
 800a470:	2200      	movs	r2, #0
 800a472:	f7fd ff51 	bl	8008318 <xQueueGenericSend>
 800a476:	6278      	str	r0, [r7, #36]	; 0x24
 800a478:	e008      	b.n	800a48c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a47a:	4b07      	ldr	r3, [pc, #28]	; (800a498 <xTimerGenericCommand+0x98>)
 800a47c:	6818      	ldr	r0, [r3, #0]
 800a47e:	f107 0110 	add.w	r1, r7, #16
 800a482:	2300      	movs	r3, #0
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	f7fe f845 	bl	8008514 <xQueueGenericSendFromISR>
 800a48a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3728      	adds	r7, #40	; 0x28
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	20004e3c 	.word	0x20004e3c

0800a49c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b088      	sub	sp, #32
 800a4a0:	af02      	add	r7, sp, #8
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4a6:	4b22      	ldr	r3, [pc, #136]	; (800a530 <prvProcessExpiredTimer+0x94>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7fd fb0f 	bl	8007ad8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4c0:	f003 0304 	and.w	r3, r3, #4
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d022      	beq.n	800a50e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	699a      	ldr	r2, [r3, #24]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	18d1      	adds	r1, r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	6978      	ldr	r0, [r7, #20]
 800a4d6:	f000 f8d1 	bl	800a67c <prvInsertTimerInActiveList>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d01f      	beq.n	800a520 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	6978      	ldr	r0, [r7, #20]
 800a4ec:	f7ff ff88 	bl	800a400 <xTimerGenericCommand>
 800a4f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d113      	bne.n	800a520 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	60fb      	str	r3, [r7, #12]
}
 800a50a:	bf00      	nop
 800a50c:	e7fe      	b.n	800a50c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a514:	f023 0301 	bic.w	r3, r3, #1
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	6a1b      	ldr	r3, [r3, #32]
 800a524:	6978      	ldr	r0, [r7, #20]
 800a526:	4798      	blx	r3
}
 800a528:	bf00      	nop
 800a52a:	3718      	adds	r7, #24
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	20004e34 	.word	0x20004e34

0800a534 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a53c:	f107 0308 	add.w	r3, r7, #8
 800a540:	4618      	mov	r0, r3
 800a542:	f000 f857 	bl	800a5f4 <prvGetNextExpireTime>
 800a546:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	4619      	mov	r1, r3
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f000 f803 	bl	800a558 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a552:	f000 f8d5 	bl	800a700 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a556:	e7f1      	b.n	800a53c <prvTimerTask+0x8>

0800a558 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a562:	f7ff f8a1 	bl	80096a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a566:	f107 0308 	add.w	r3, r7, #8
 800a56a:	4618      	mov	r0, r3
 800a56c:	f000 f866 	bl	800a63c <prvSampleTimeNow>
 800a570:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d130      	bne.n	800a5da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10a      	bne.n	800a594 <prvProcessTimerOrBlockTask+0x3c>
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	429a      	cmp	r2, r3
 800a584:	d806      	bhi.n	800a594 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a586:	f7ff f89d 	bl	80096c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a58a:	68f9      	ldr	r1, [r7, #12]
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff ff85 	bl	800a49c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a592:	e024      	b.n	800a5de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d008      	beq.n	800a5ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a59a:	4b13      	ldr	r3, [pc, #76]	; (800a5e8 <prvProcessTimerOrBlockTask+0x90>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d101      	bne.n	800a5a8 <prvProcessTimerOrBlockTask+0x50>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e000      	b.n	800a5aa <prvProcessTimerOrBlockTask+0x52>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a5ac:	4b0f      	ldr	r3, [pc, #60]	; (800a5ec <prvProcessTimerOrBlockTask+0x94>)
 800a5ae:	6818      	ldr	r0, [r3, #0]
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	f7fe fcdf 	bl	8008f7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a5be:	f7ff f881 	bl	80096c4 <xTaskResumeAll>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10a      	bne.n	800a5de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a5c8:	4b09      	ldr	r3, [pc, #36]	; (800a5f0 <prvProcessTimerOrBlockTask+0x98>)
 800a5ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	f3bf 8f6f 	isb	sy
}
 800a5d8:	e001      	b.n	800a5de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a5da:	f7ff f873 	bl	80096c4 <xTaskResumeAll>
}
 800a5de:	bf00      	nop
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20004e38 	.word	0x20004e38
 800a5ec:	20004e3c 	.word	0x20004e3c
 800a5f0:	e000ed04 	.word	0xe000ed04

0800a5f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a5fc:	4b0e      	ldr	r3, [pc, #56]	; (800a638 <prvGetNextExpireTime+0x44>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <prvGetNextExpireTime+0x16>
 800a606:	2201      	movs	r2, #1
 800a608:	e000      	b.n	800a60c <prvGetNextExpireTime+0x18>
 800a60a:	2200      	movs	r2, #0
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d105      	bne.n	800a624 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a618:	4b07      	ldr	r3, [pc, #28]	; (800a638 <prvGetNextExpireTime+0x44>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	60fb      	str	r3, [r7, #12]
 800a622:	e001      	b.n	800a628 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a624:	2300      	movs	r3, #0
 800a626:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a628:	68fb      	ldr	r3, [r7, #12]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3714      	adds	r7, #20
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	20004e34 	.word	0x20004e34

0800a63c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a644:	f7ff f8dc 	bl	8009800 <xTaskGetTickCount>
 800a648:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a64a:	4b0b      	ldr	r3, [pc, #44]	; (800a678 <prvSampleTimeNow+0x3c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	429a      	cmp	r2, r3
 800a652:	d205      	bcs.n	800a660 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a654:	f000 f936 	bl	800a8c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	601a      	str	r2, [r3, #0]
 800a65e:	e002      	b.n	800a666 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a666:	4a04      	ldr	r2, [pc, #16]	; (800a678 <prvSampleTimeNow+0x3c>)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a66c:	68fb      	ldr	r3, [r7, #12]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	20004e44 	.word	0x20004e44

0800a67c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a68a:	2300      	movs	r3, #0
 800a68c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d812      	bhi.n	800a6c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	1ad2      	subs	r2, r2, r3
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d302      	bcc.n	800a6b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	617b      	str	r3, [r7, #20]
 800a6b4:	e01b      	b.n	800a6ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a6b6:	4b10      	ldr	r3, [pc, #64]	; (800a6f8 <prvInsertTimerInActiveList+0x7c>)
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3304      	adds	r3, #4
 800a6be:	4619      	mov	r1, r3
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	f7fd f9d0 	bl	8007a66 <vListInsert>
 800a6c6:	e012      	b.n	800a6ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d206      	bcs.n	800a6de <prvInsertTimerInActiveList+0x62>
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d302      	bcc.n	800a6de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	617b      	str	r3, [r7, #20]
 800a6dc:	e007      	b.n	800a6ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6de:	4b07      	ldr	r3, [pc, #28]	; (800a6fc <prvInsertTimerInActiveList+0x80>)
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3304      	adds	r3, #4
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	f7fd f9bc 	bl	8007a66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a6ee:	697b      	ldr	r3, [r7, #20]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3718      	adds	r7, #24
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	20004e38 	.word	0x20004e38
 800a6fc:	20004e34 	.word	0x20004e34

0800a700 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b08e      	sub	sp, #56	; 0x38
 800a704:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a706:	e0ca      	b.n	800a89e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	da18      	bge.n	800a740 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a70e:	1d3b      	adds	r3, r7, #4
 800a710:	3304      	adds	r3, #4
 800a712:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10a      	bne.n	800a730 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	61fb      	str	r3, [r7, #28]
}
 800a72c:	bf00      	nop
 800a72e:	e7fe      	b.n	800a72e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a736:	6850      	ldr	r0, [r2, #4]
 800a738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a73a:	6892      	ldr	r2, [r2, #8]
 800a73c:	4611      	mov	r1, r2
 800a73e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	f2c0 80aa 	blt.w	800a89c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74e:	695b      	ldr	r3, [r3, #20]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d004      	beq.n	800a75e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a756:	3304      	adds	r3, #4
 800a758:	4618      	mov	r0, r3
 800a75a:	f7fd f9bd 	bl	8007ad8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a75e:	463b      	mov	r3, r7
 800a760:	4618      	mov	r0, r3
 800a762:	f7ff ff6b 	bl	800a63c <prvSampleTimeNow>
 800a766:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b09      	cmp	r3, #9
 800a76c:	f200 8097 	bhi.w	800a89e <prvProcessReceivedCommands+0x19e>
 800a770:	a201      	add	r2, pc, #4	; (adr r2, 800a778 <prvProcessReceivedCommands+0x78>)
 800a772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a776:	bf00      	nop
 800a778:	0800a7a1 	.word	0x0800a7a1
 800a77c:	0800a7a1 	.word	0x0800a7a1
 800a780:	0800a7a1 	.word	0x0800a7a1
 800a784:	0800a815 	.word	0x0800a815
 800a788:	0800a829 	.word	0x0800a829
 800a78c:	0800a873 	.word	0x0800a873
 800a790:	0800a7a1 	.word	0x0800a7a1
 800a794:	0800a7a1 	.word	0x0800a7a1
 800a798:	0800a815 	.word	0x0800a815
 800a79c:	0800a829 	.word	0x0800a829
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7a6:	f043 0301 	orr.w	r3, r3, #1
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	18d1      	adds	r1, r2, r3
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7c0:	f7ff ff5c 	bl	800a67c <prvInsertTimerInActiveList>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d069      	beq.n	800a89e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7cc:	6a1b      	ldr	r3, [r3, #32]
 800a7ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7d8:	f003 0304 	and.w	r3, r3, #4
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d05e      	beq.n	800a89e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e4:	699b      	ldr	r3, [r3, #24]
 800a7e6:	441a      	add	r2, r3
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7f2:	f7ff fe05 	bl	800a400 <xTimerGenericCommand>
 800a7f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a7f8:	6a3b      	ldr	r3, [r7, #32]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d14f      	bne.n	800a89e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	61bb      	str	r3, [r7, #24]
}
 800a810:	bf00      	nop
 800a812:	e7fe      	b.n	800a812 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a81a:	f023 0301 	bic.w	r3, r3, #1
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a826:	e03a      	b.n	800a89e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a82e:	f043 0301 	orr.w	r3, r3, #1
 800a832:	b2da      	uxtb	r2, r3
 800a834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a83a:	68ba      	ldr	r2, [r7, #8]
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d10a      	bne.n	800a85e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84c:	f383 8811 	msr	BASEPRI, r3
 800a850:	f3bf 8f6f 	isb	sy
 800a854:	f3bf 8f4f 	dsb	sy
 800a858:	617b      	str	r3, [r7, #20]
}
 800a85a:	bf00      	nop
 800a85c:	e7fe      	b.n	800a85c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a860:	699a      	ldr	r2, [r3, #24]
 800a862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a864:	18d1      	adds	r1, r2, r3
 800a866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a86a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a86c:	f7ff ff06 	bl	800a67c <prvInsertTimerInActiveList>
					break;
 800a870:	e015      	b.n	800a89e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a878:	f003 0302 	and.w	r3, r3, #2
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d103      	bne.n	800a888 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a882:	f7fc ff81 	bl	8007788 <vPortFree>
 800a886:	e00a      	b.n	800a89e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a88e:	f023 0301 	bic.w	r3, r3, #1
 800a892:	b2da      	uxtb	r2, r3
 800a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a89a:	e000      	b.n	800a89e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a89c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a89e:	4b08      	ldr	r3, [pc, #32]	; (800a8c0 <prvProcessReceivedCommands+0x1c0>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	1d39      	adds	r1, r7, #4
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fd ff5c 	bl	8008764 <xQueueReceive>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f47f af2a 	bne.w	800a708 <prvProcessReceivedCommands+0x8>
	}
}
 800a8b4:	bf00      	nop
 800a8b6:	bf00      	nop
 800a8b8:	3730      	adds	r7, #48	; 0x30
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20004e3c 	.word	0x20004e3c

0800a8c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b088      	sub	sp, #32
 800a8c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8ca:	e048      	b.n	800a95e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8cc:	4b2d      	ldr	r3, [pc, #180]	; (800a984 <prvSwitchTimerLists+0xc0>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d6:	4b2b      	ldr	r3, [pc, #172]	; (800a984 <prvSwitchTimerLists+0xc0>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	3304      	adds	r3, #4
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fd f8f7 	bl	8007ad8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8f8:	f003 0304 	and.w	r3, r3, #4
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d02e      	beq.n	800a95e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	4413      	add	r3, r2
 800a908:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d90e      	bls.n	800a930 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a91e:	4b19      	ldr	r3, [pc, #100]	; (800a984 <prvSwitchTimerLists+0xc0>)
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	3304      	adds	r3, #4
 800a926:	4619      	mov	r1, r3
 800a928:	4610      	mov	r0, r2
 800a92a:	f7fd f89c 	bl	8007a66 <vListInsert>
 800a92e:	e016      	b.n	800a95e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a930:	2300      	movs	r3, #0
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	2300      	movs	r3, #0
 800a936:	693a      	ldr	r2, [r7, #16]
 800a938:	2100      	movs	r1, #0
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f7ff fd60 	bl	800a400 <xTimerGenericCommand>
 800a940:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10a      	bne.n	800a95e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94c:	f383 8811 	msr	BASEPRI, r3
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	603b      	str	r3, [r7, #0]
}
 800a95a:	bf00      	nop
 800a95c:	e7fe      	b.n	800a95c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a95e:	4b09      	ldr	r3, [pc, #36]	; (800a984 <prvSwitchTimerLists+0xc0>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1b1      	bne.n	800a8cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a968:	4b06      	ldr	r3, [pc, #24]	; (800a984 <prvSwitchTimerLists+0xc0>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a96e:	4b06      	ldr	r3, [pc, #24]	; (800a988 <prvSwitchTimerLists+0xc4>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a04      	ldr	r2, [pc, #16]	; (800a984 <prvSwitchTimerLists+0xc0>)
 800a974:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a976:	4a04      	ldr	r2, [pc, #16]	; (800a988 <prvSwitchTimerLists+0xc4>)
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	6013      	str	r3, [r2, #0]
}
 800a97c:	bf00      	nop
 800a97e:	3718      	adds	r7, #24
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	20004e34 	.word	0x20004e34
 800a988:	20004e38 	.word	0x20004e38

0800a98c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a992:	f7fd f9f7 	bl	8007d84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a996:	4b15      	ldr	r3, [pc, #84]	; (800a9ec <prvCheckForValidListAndQueue+0x60>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d120      	bne.n	800a9e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a99e:	4814      	ldr	r0, [pc, #80]	; (800a9f0 <prvCheckForValidListAndQueue+0x64>)
 800a9a0:	f7fd f810 	bl	80079c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a9a4:	4813      	ldr	r0, [pc, #76]	; (800a9f4 <prvCheckForValidListAndQueue+0x68>)
 800a9a6:	f7fd f80d 	bl	80079c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a9aa:	4b13      	ldr	r3, [pc, #76]	; (800a9f8 <prvCheckForValidListAndQueue+0x6c>)
 800a9ac:	4a10      	ldr	r2, [pc, #64]	; (800a9f0 <prvCheckForValidListAndQueue+0x64>)
 800a9ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a9b0:	4b12      	ldr	r3, [pc, #72]	; (800a9fc <prvCheckForValidListAndQueue+0x70>)
 800a9b2:	4a10      	ldr	r2, [pc, #64]	; (800a9f4 <prvCheckForValidListAndQueue+0x68>)
 800a9b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	4b11      	ldr	r3, [pc, #68]	; (800aa00 <prvCheckForValidListAndQueue+0x74>)
 800a9bc:	4a11      	ldr	r2, [pc, #68]	; (800aa04 <prvCheckForValidListAndQueue+0x78>)
 800a9be:	2110      	movs	r1, #16
 800a9c0:	200a      	movs	r0, #10
 800a9c2:	f7fd fb69 	bl	8008098 <xQueueGenericCreateStatic>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	4a08      	ldr	r2, [pc, #32]	; (800a9ec <prvCheckForValidListAndQueue+0x60>)
 800a9ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a9cc:	4b07      	ldr	r3, [pc, #28]	; (800a9ec <prvCheckForValidListAndQueue+0x60>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d005      	beq.n	800a9e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a9d4:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <prvCheckForValidListAndQueue+0x60>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	490b      	ldr	r1, [pc, #44]	; (800aa08 <prvCheckForValidListAndQueue+0x7c>)
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fe fa7a 	bl	8008ed4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9e0:	f7fd fa00 	bl	8007de4 <vPortExitCritical>
}
 800a9e4:	bf00      	nop
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20004e3c 	.word	0x20004e3c
 800a9f0:	20004e0c 	.word	0x20004e0c
 800a9f4:	20004e20 	.word	0x20004e20
 800a9f8:	20004e34 	.word	0x20004e34
 800a9fc:	20004e38 	.word	0x20004e38
 800aa00:	20004ee8 	.word	0x20004ee8
 800aa04:	20004e48 	.word	0x20004e48
 800aa08:	080109d4 	.word	0x080109d4

0800aa0c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10a      	bne.n	800aa34 <xTimerIsTimerActive+0x28>
	__asm volatile
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	60fb      	str	r3, [r7, #12]
}
 800aa30:	bf00      	nop
 800aa32:	e7fe      	b.n	800aa32 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800aa34:	f7fd f9a6 	bl	8007d84 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa3e:	f003 0301 	and.w	r3, r3, #1
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d102      	bne.n	800aa4c <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800aa46:	2300      	movs	r3, #0
 800aa48:	617b      	str	r3, [r7, #20]
 800aa4a:	e001      	b.n	800aa50 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800aa50:	f7fd f9c8 	bl	8007de4 <vPortExitCritical>

	return xReturn;
 800aa54:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800aa56:	4618      	mov	r0, r3
 800aa58:	3718      	adds	r7, #24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b086      	sub	sp, #24
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10a      	bne.n	800aa86 <pvTimerGetTimerID+0x28>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	60fb      	str	r3, [r7, #12]
}
 800aa82:	bf00      	nop
 800aa84:	e7fe      	b.n	800aa84 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800aa86:	f7fd f97d 	bl	8007d84 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	69db      	ldr	r3, [r3, #28]
 800aa8e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800aa90:	f7fd f9a8 	bl	8007de4 <vPortExitCritical>

	return pvReturn;
 800aa94:	693b      	ldr	r3, [r7, #16]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
	...

0800aaa0 <__errno>:
 800aaa0:	4b01      	ldr	r3, [pc, #4]	; (800aaa8 <__errno+0x8>)
 800aaa2:	6818      	ldr	r0, [r3, #0]
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	20000038 	.word	0x20000038

0800aaac <std>:
 800aaac:	2300      	movs	r3, #0
 800aaae:	b510      	push	{r4, lr}
 800aab0:	4604      	mov	r4, r0
 800aab2:	e9c0 3300 	strd	r3, r3, [r0]
 800aab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaba:	6083      	str	r3, [r0, #8]
 800aabc:	8181      	strh	r1, [r0, #12]
 800aabe:	6643      	str	r3, [r0, #100]	; 0x64
 800aac0:	81c2      	strh	r2, [r0, #14]
 800aac2:	6183      	str	r3, [r0, #24]
 800aac4:	4619      	mov	r1, r3
 800aac6:	2208      	movs	r2, #8
 800aac8:	305c      	adds	r0, #92	; 0x5c
 800aaca:	f000 f91a 	bl	800ad02 <memset>
 800aace:	4b05      	ldr	r3, [pc, #20]	; (800aae4 <std+0x38>)
 800aad0:	6263      	str	r3, [r4, #36]	; 0x24
 800aad2:	4b05      	ldr	r3, [pc, #20]	; (800aae8 <std+0x3c>)
 800aad4:	62a3      	str	r3, [r4, #40]	; 0x28
 800aad6:	4b05      	ldr	r3, [pc, #20]	; (800aaec <std+0x40>)
 800aad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aada:	4b05      	ldr	r3, [pc, #20]	; (800aaf0 <std+0x44>)
 800aadc:	6224      	str	r4, [r4, #32]
 800aade:	6323      	str	r3, [r4, #48]	; 0x30
 800aae0:	bd10      	pop	{r4, pc}
 800aae2:	bf00      	nop
 800aae4:	0800bc71 	.word	0x0800bc71
 800aae8:	0800bc93 	.word	0x0800bc93
 800aaec:	0800bccb 	.word	0x0800bccb
 800aaf0:	0800bcef 	.word	0x0800bcef

0800aaf4 <_cleanup_r>:
 800aaf4:	4901      	ldr	r1, [pc, #4]	; (800aafc <_cleanup_r+0x8>)
 800aaf6:	f000 b8af 	b.w	800ac58 <_fwalk_reent>
 800aafa:	bf00      	nop
 800aafc:	0800d899 	.word	0x0800d899

0800ab00 <__sfmoreglue>:
 800ab00:	b570      	push	{r4, r5, r6, lr}
 800ab02:	2268      	movs	r2, #104	; 0x68
 800ab04:	1e4d      	subs	r5, r1, #1
 800ab06:	4355      	muls	r5, r2
 800ab08:	460e      	mov	r6, r1
 800ab0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab0e:	f000 f921 	bl	800ad54 <_malloc_r>
 800ab12:	4604      	mov	r4, r0
 800ab14:	b140      	cbz	r0, 800ab28 <__sfmoreglue+0x28>
 800ab16:	2100      	movs	r1, #0
 800ab18:	e9c0 1600 	strd	r1, r6, [r0]
 800ab1c:	300c      	adds	r0, #12
 800ab1e:	60a0      	str	r0, [r4, #8]
 800ab20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab24:	f000 f8ed 	bl	800ad02 <memset>
 800ab28:	4620      	mov	r0, r4
 800ab2a:	bd70      	pop	{r4, r5, r6, pc}

0800ab2c <__sfp_lock_acquire>:
 800ab2c:	4801      	ldr	r0, [pc, #4]	; (800ab34 <__sfp_lock_acquire+0x8>)
 800ab2e:	f000 b8d8 	b.w	800ace2 <__retarget_lock_acquire_recursive>
 800ab32:	bf00      	nop
 800ab34:	20004f39 	.word	0x20004f39

0800ab38 <__sfp_lock_release>:
 800ab38:	4801      	ldr	r0, [pc, #4]	; (800ab40 <__sfp_lock_release+0x8>)
 800ab3a:	f000 b8d3 	b.w	800ace4 <__retarget_lock_release_recursive>
 800ab3e:	bf00      	nop
 800ab40:	20004f39 	.word	0x20004f39

0800ab44 <__sinit_lock_acquire>:
 800ab44:	4801      	ldr	r0, [pc, #4]	; (800ab4c <__sinit_lock_acquire+0x8>)
 800ab46:	f000 b8cc 	b.w	800ace2 <__retarget_lock_acquire_recursive>
 800ab4a:	bf00      	nop
 800ab4c:	20004f3a 	.word	0x20004f3a

0800ab50 <__sinit_lock_release>:
 800ab50:	4801      	ldr	r0, [pc, #4]	; (800ab58 <__sinit_lock_release+0x8>)
 800ab52:	f000 b8c7 	b.w	800ace4 <__retarget_lock_release_recursive>
 800ab56:	bf00      	nop
 800ab58:	20004f3a 	.word	0x20004f3a

0800ab5c <__sinit>:
 800ab5c:	b510      	push	{r4, lr}
 800ab5e:	4604      	mov	r4, r0
 800ab60:	f7ff fff0 	bl	800ab44 <__sinit_lock_acquire>
 800ab64:	69a3      	ldr	r3, [r4, #24]
 800ab66:	b11b      	cbz	r3, 800ab70 <__sinit+0x14>
 800ab68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab6c:	f7ff bff0 	b.w	800ab50 <__sinit_lock_release>
 800ab70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab74:	6523      	str	r3, [r4, #80]	; 0x50
 800ab76:	4b13      	ldr	r3, [pc, #76]	; (800abc4 <__sinit+0x68>)
 800ab78:	4a13      	ldr	r2, [pc, #76]	; (800abc8 <__sinit+0x6c>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab7e:	42a3      	cmp	r3, r4
 800ab80:	bf04      	itt	eq
 800ab82:	2301      	moveq	r3, #1
 800ab84:	61a3      	streq	r3, [r4, #24]
 800ab86:	4620      	mov	r0, r4
 800ab88:	f000 f820 	bl	800abcc <__sfp>
 800ab8c:	6060      	str	r0, [r4, #4]
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f000 f81c 	bl	800abcc <__sfp>
 800ab94:	60a0      	str	r0, [r4, #8]
 800ab96:	4620      	mov	r0, r4
 800ab98:	f000 f818 	bl	800abcc <__sfp>
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	60e0      	str	r0, [r4, #12]
 800aba0:	2104      	movs	r1, #4
 800aba2:	6860      	ldr	r0, [r4, #4]
 800aba4:	f7ff ff82 	bl	800aaac <std>
 800aba8:	68a0      	ldr	r0, [r4, #8]
 800abaa:	2201      	movs	r2, #1
 800abac:	2109      	movs	r1, #9
 800abae:	f7ff ff7d 	bl	800aaac <std>
 800abb2:	68e0      	ldr	r0, [r4, #12]
 800abb4:	2202      	movs	r2, #2
 800abb6:	2112      	movs	r1, #18
 800abb8:	f7ff ff78 	bl	800aaac <std>
 800abbc:	2301      	movs	r3, #1
 800abbe:	61a3      	str	r3, [r4, #24]
 800abc0:	e7d2      	b.n	800ab68 <__sinit+0xc>
 800abc2:	bf00      	nop
 800abc4:	08011fe0 	.word	0x08011fe0
 800abc8:	0800aaf5 	.word	0x0800aaf5

0800abcc <__sfp>:
 800abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abce:	4607      	mov	r7, r0
 800abd0:	f7ff ffac 	bl	800ab2c <__sfp_lock_acquire>
 800abd4:	4b1e      	ldr	r3, [pc, #120]	; (800ac50 <__sfp+0x84>)
 800abd6:	681e      	ldr	r6, [r3, #0]
 800abd8:	69b3      	ldr	r3, [r6, #24]
 800abda:	b913      	cbnz	r3, 800abe2 <__sfp+0x16>
 800abdc:	4630      	mov	r0, r6
 800abde:	f7ff ffbd 	bl	800ab5c <__sinit>
 800abe2:	3648      	adds	r6, #72	; 0x48
 800abe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800abe8:	3b01      	subs	r3, #1
 800abea:	d503      	bpl.n	800abf4 <__sfp+0x28>
 800abec:	6833      	ldr	r3, [r6, #0]
 800abee:	b30b      	cbz	r3, 800ac34 <__sfp+0x68>
 800abf0:	6836      	ldr	r6, [r6, #0]
 800abf2:	e7f7      	b.n	800abe4 <__sfp+0x18>
 800abf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800abf8:	b9d5      	cbnz	r5, 800ac30 <__sfp+0x64>
 800abfa:	4b16      	ldr	r3, [pc, #88]	; (800ac54 <__sfp+0x88>)
 800abfc:	60e3      	str	r3, [r4, #12]
 800abfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac02:	6665      	str	r5, [r4, #100]	; 0x64
 800ac04:	f000 f86c 	bl	800ace0 <__retarget_lock_init_recursive>
 800ac08:	f7ff ff96 	bl	800ab38 <__sfp_lock_release>
 800ac0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac14:	6025      	str	r5, [r4, #0]
 800ac16:	61a5      	str	r5, [r4, #24]
 800ac18:	2208      	movs	r2, #8
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac20:	f000 f86f 	bl	800ad02 <memset>
 800ac24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac30:	3468      	adds	r4, #104	; 0x68
 800ac32:	e7d9      	b.n	800abe8 <__sfp+0x1c>
 800ac34:	2104      	movs	r1, #4
 800ac36:	4638      	mov	r0, r7
 800ac38:	f7ff ff62 	bl	800ab00 <__sfmoreglue>
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	6030      	str	r0, [r6, #0]
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d1d5      	bne.n	800abf0 <__sfp+0x24>
 800ac44:	f7ff ff78 	bl	800ab38 <__sfp_lock_release>
 800ac48:	230c      	movs	r3, #12
 800ac4a:	603b      	str	r3, [r7, #0]
 800ac4c:	e7ee      	b.n	800ac2c <__sfp+0x60>
 800ac4e:	bf00      	nop
 800ac50:	08011fe0 	.word	0x08011fe0
 800ac54:	ffff0001 	.word	0xffff0001

0800ac58 <_fwalk_reent>:
 800ac58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	4688      	mov	r8, r1
 800ac60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac64:	2700      	movs	r7, #0
 800ac66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac6a:	f1b9 0901 	subs.w	r9, r9, #1
 800ac6e:	d505      	bpl.n	800ac7c <_fwalk_reent+0x24>
 800ac70:	6824      	ldr	r4, [r4, #0]
 800ac72:	2c00      	cmp	r4, #0
 800ac74:	d1f7      	bne.n	800ac66 <_fwalk_reent+0xe>
 800ac76:	4638      	mov	r0, r7
 800ac78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac7c:	89ab      	ldrh	r3, [r5, #12]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d907      	bls.n	800ac92 <_fwalk_reent+0x3a>
 800ac82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac86:	3301      	adds	r3, #1
 800ac88:	d003      	beq.n	800ac92 <_fwalk_reent+0x3a>
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	47c0      	blx	r8
 800ac90:	4307      	orrs	r7, r0
 800ac92:	3568      	adds	r5, #104	; 0x68
 800ac94:	e7e9      	b.n	800ac6a <_fwalk_reent+0x12>
	...

0800ac98 <__libc_init_array>:
 800ac98:	b570      	push	{r4, r5, r6, lr}
 800ac9a:	4d0d      	ldr	r5, [pc, #52]	; (800acd0 <__libc_init_array+0x38>)
 800ac9c:	4c0d      	ldr	r4, [pc, #52]	; (800acd4 <__libc_init_array+0x3c>)
 800ac9e:	1b64      	subs	r4, r4, r5
 800aca0:	10a4      	asrs	r4, r4, #2
 800aca2:	2600      	movs	r6, #0
 800aca4:	42a6      	cmp	r6, r4
 800aca6:	d109      	bne.n	800acbc <__libc_init_array+0x24>
 800aca8:	4d0b      	ldr	r5, [pc, #44]	; (800acd8 <__libc_init_array+0x40>)
 800acaa:	4c0c      	ldr	r4, [pc, #48]	; (800acdc <__libc_init_array+0x44>)
 800acac:	f005 fb22 	bl	80102f4 <_init>
 800acb0:	1b64      	subs	r4, r4, r5
 800acb2:	10a4      	asrs	r4, r4, #2
 800acb4:	2600      	movs	r6, #0
 800acb6:	42a6      	cmp	r6, r4
 800acb8:	d105      	bne.n	800acc6 <__libc_init_array+0x2e>
 800acba:	bd70      	pop	{r4, r5, r6, pc}
 800acbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800acc0:	4798      	blx	r3
 800acc2:	3601      	adds	r6, #1
 800acc4:	e7ee      	b.n	800aca4 <__libc_init_array+0xc>
 800acc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800acca:	4798      	blx	r3
 800accc:	3601      	adds	r6, #1
 800acce:	e7f2      	b.n	800acb6 <__libc_init_array+0x1e>
 800acd0:	08012460 	.word	0x08012460
 800acd4:	08012460 	.word	0x08012460
 800acd8:	08012460 	.word	0x08012460
 800acdc:	08012464 	.word	0x08012464

0800ace0 <__retarget_lock_init_recursive>:
 800ace0:	4770      	bx	lr

0800ace2 <__retarget_lock_acquire_recursive>:
 800ace2:	4770      	bx	lr

0800ace4 <__retarget_lock_release_recursive>:
 800ace4:	4770      	bx	lr

0800ace6 <memcpy>:
 800ace6:	440a      	add	r2, r1
 800ace8:	4291      	cmp	r1, r2
 800acea:	f100 33ff 	add.w	r3, r0, #4294967295
 800acee:	d100      	bne.n	800acf2 <memcpy+0xc>
 800acf0:	4770      	bx	lr
 800acf2:	b510      	push	{r4, lr}
 800acf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acfc:	4291      	cmp	r1, r2
 800acfe:	d1f9      	bne.n	800acf4 <memcpy+0xe>
 800ad00:	bd10      	pop	{r4, pc}

0800ad02 <memset>:
 800ad02:	4402      	add	r2, r0
 800ad04:	4603      	mov	r3, r0
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d100      	bne.n	800ad0c <memset+0xa>
 800ad0a:	4770      	bx	lr
 800ad0c:	f803 1b01 	strb.w	r1, [r3], #1
 800ad10:	e7f9      	b.n	800ad06 <memset+0x4>
	...

0800ad14 <sbrk_aligned>:
 800ad14:	b570      	push	{r4, r5, r6, lr}
 800ad16:	4e0e      	ldr	r6, [pc, #56]	; (800ad50 <sbrk_aligned+0x3c>)
 800ad18:	460c      	mov	r4, r1
 800ad1a:	6831      	ldr	r1, [r6, #0]
 800ad1c:	4605      	mov	r5, r0
 800ad1e:	b911      	cbnz	r1, 800ad26 <sbrk_aligned+0x12>
 800ad20:	f000 ff70 	bl	800bc04 <_sbrk_r>
 800ad24:	6030      	str	r0, [r6, #0]
 800ad26:	4621      	mov	r1, r4
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f000 ff6b 	bl	800bc04 <_sbrk_r>
 800ad2e:	1c43      	adds	r3, r0, #1
 800ad30:	d00a      	beq.n	800ad48 <sbrk_aligned+0x34>
 800ad32:	1cc4      	adds	r4, r0, #3
 800ad34:	f024 0403 	bic.w	r4, r4, #3
 800ad38:	42a0      	cmp	r0, r4
 800ad3a:	d007      	beq.n	800ad4c <sbrk_aligned+0x38>
 800ad3c:	1a21      	subs	r1, r4, r0
 800ad3e:	4628      	mov	r0, r5
 800ad40:	f000 ff60 	bl	800bc04 <_sbrk_r>
 800ad44:	3001      	adds	r0, #1
 800ad46:	d101      	bne.n	800ad4c <sbrk_aligned+0x38>
 800ad48:	f04f 34ff 	mov.w	r4, #4294967295
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	bd70      	pop	{r4, r5, r6, pc}
 800ad50:	20004f40 	.word	0x20004f40

0800ad54 <_malloc_r>:
 800ad54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad58:	1ccd      	adds	r5, r1, #3
 800ad5a:	f025 0503 	bic.w	r5, r5, #3
 800ad5e:	3508      	adds	r5, #8
 800ad60:	2d0c      	cmp	r5, #12
 800ad62:	bf38      	it	cc
 800ad64:	250c      	movcc	r5, #12
 800ad66:	2d00      	cmp	r5, #0
 800ad68:	4607      	mov	r7, r0
 800ad6a:	db01      	blt.n	800ad70 <_malloc_r+0x1c>
 800ad6c:	42a9      	cmp	r1, r5
 800ad6e:	d905      	bls.n	800ad7c <_malloc_r+0x28>
 800ad70:	230c      	movs	r3, #12
 800ad72:	603b      	str	r3, [r7, #0]
 800ad74:	2600      	movs	r6, #0
 800ad76:	4630      	mov	r0, r6
 800ad78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad7c:	4e2e      	ldr	r6, [pc, #184]	; (800ae38 <_malloc_r+0xe4>)
 800ad7e:	f003 f967 	bl	800e050 <__malloc_lock>
 800ad82:	6833      	ldr	r3, [r6, #0]
 800ad84:	461c      	mov	r4, r3
 800ad86:	bb34      	cbnz	r4, 800add6 <_malloc_r+0x82>
 800ad88:	4629      	mov	r1, r5
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	f7ff ffc2 	bl	800ad14 <sbrk_aligned>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	4604      	mov	r4, r0
 800ad94:	d14d      	bne.n	800ae32 <_malloc_r+0xde>
 800ad96:	6834      	ldr	r4, [r6, #0]
 800ad98:	4626      	mov	r6, r4
 800ad9a:	2e00      	cmp	r6, #0
 800ad9c:	d140      	bne.n	800ae20 <_malloc_r+0xcc>
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	4631      	mov	r1, r6
 800ada2:	4638      	mov	r0, r7
 800ada4:	eb04 0803 	add.w	r8, r4, r3
 800ada8:	f000 ff2c 	bl	800bc04 <_sbrk_r>
 800adac:	4580      	cmp	r8, r0
 800adae:	d13a      	bne.n	800ae26 <_malloc_r+0xd2>
 800adb0:	6821      	ldr	r1, [r4, #0]
 800adb2:	3503      	adds	r5, #3
 800adb4:	1a6d      	subs	r5, r5, r1
 800adb6:	f025 0503 	bic.w	r5, r5, #3
 800adba:	3508      	adds	r5, #8
 800adbc:	2d0c      	cmp	r5, #12
 800adbe:	bf38      	it	cc
 800adc0:	250c      	movcc	r5, #12
 800adc2:	4629      	mov	r1, r5
 800adc4:	4638      	mov	r0, r7
 800adc6:	f7ff ffa5 	bl	800ad14 <sbrk_aligned>
 800adca:	3001      	adds	r0, #1
 800adcc:	d02b      	beq.n	800ae26 <_malloc_r+0xd2>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	442b      	add	r3, r5
 800add2:	6023      	str	r3, [r4, #0]
 800add4:	e00e      	b.n	800adf4 <_malloc_r+0xa0>
 800add6:	6822      	ldr	r2, [r4, #0]
 800add8:	1b52      	subs	r2, r2, r5
 800adda:	d41e      	bmi.n	800ae1a <_malloc_r+0xc6>
 800addc:	2a0b      	cmp	r2, #11
 800adde:	d916      	bls.n	800ae0e <_malloc_r+0xba>
 800ade0:	1961      	adds	r1, r4, r5
 800ade2:	42a3      	cmp	r3, r4
 800ade4:	6025      	str	r5, [r4, #0]
 800ade6:	bf18      	it	ne
 800ade8:	6059      	strne	r1, [r3, #4]
 800adea:	6863      	ldr	r3, [r4, #4]
 800adec:	bf08      	it	eq
 800adee:	6031      	streq	r1, [r6, #0]
 800adf0:	5162      	str	r2, [r4, r5]
 800adf2:	604b      	str	r3, [r1, #4]
 800adf4:	4638      	mov	r0, r7
 800adf6:	f104 060b 	add.w	r6, r4, #11
 800adfa:	f003 f92f 	bl	800e05c <__malloc_unlock>
 800adfe:	f026 0607 	bic.w	r6, r6, #7
 800ae02:	1d23      	adds	r3, r4, #4
 800ae04:	1af2      	subs	r2, r6, r3
 800ae06:	d0b6      	beq.n	800ad76 <_malloc_r+0x22>
 800ae08:	1b9b      	subs	r3, r3, r6
 800ae0a:	50a3      	str	r3, [r4, r2]
 800ae0c:	e7b3      	b.n	800ad76 <_malloc_r+0x22>
 800ae0e:	6862      	ldr	r2, [r4, #4]
 800ae10:	42a3      	cmp	r3, r4
 800ae12:	bf0c      	ite	eq
 800ae14:	6032      	streq	r2, [r6, #0]
 800ae16:	605a      	strne	r2, [r3, #4]
 800ae18:	e7ec      	b.n	800adf4 <_malloc_r+0xa0>
 800ae1a:	4623      	mov	r3, r4
 800ae1c:	6864      	ldr	r4, [r4, #4]
 800ae1e:	e7b2      	b.n	800ad86 <_malloc_r+0x32>
 800ae20:	4634      	mov	r4, r6
 800ae22:	6876      	ldr	r6, [r6, #4]
 800ae24:	e7b9      	b.n	800ad9a <_malloc_r+0x46>
 800ae26:	230c      	movs	r3, #12
 800ae28:	603b      	str	r3, [r7, #0]
 800ae2a:	4638      	mov	r0, r7
 800ae2c:	f003 f916 	bl	800e05c <__malloc_unlock>
 800ae30:	e7a1      	b.n	800ad76 <_malloc_r+0x22>
 800ae32:	6025      	str	r5, [r4, #0]
 800ae34:	e7de      	b.n	800adf4 <_malloc_r+0xa0>
 800ae36:	bf00      	nop
 800ae38:	20004f3c 	.word	0x20004f3c

0800ae3c <__cvt>:
 800ae3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae40:	ec55 4b10 	vmov	r4, r5, d0
 800ae44:	2d00      	cmp	r5, #0
 800ae46:	460e      	mov	r6, r1
 800ae48:	4619      	mov	r1, r3
 800ae4a:	462b      	mov	r3, r5
 800ae4c:	bfbb      	ittet	lt
 800ae4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae52:	461d      	movlt	r5, r3
 800ae54:	2300      	movge	r3, #0
 800ae56:	232d      	movlt	r3, #45	; 0x2d
 800ae58:	700b      	strb	r3, [r1, #0]
 800ae5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae60:	4691      	mov	r9, r2
 800ae62:	f023 0820 	bic.w	r8, r3, #32
 800ae66:	bfbc      	itt	lt
 800ae68:	4622      	movlt	r2, r4
 800ae6a:	4614      	movlt	r4, r2
 800ae6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae70:	d005      	beq.n	800ae7e <__cvt+0x42>
 800ae72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae76:	d100      	bne.n	800ae7a <__cvt+0x3e>
 800ae78:	3601      	adds	r6, #1
 800ae7a:	2102      	movs	r1, #2
 800ae7c:	e000      	b.n	800ae80 <__cvt+0x44>
 800ae7e:	2103      	movs	r1, #3
 800ae80:	ab03      	add	r3, sp, #12
 800ae82:	9301      	str	r3, [sp, #4]
 800ae84:	ab02      	add	r3, sp, #8
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	ec45 4b10 	vmov	d0, r4, r5
 800ae8c:	4653      	mov	r3, sl
 800ae8e:	4632      	mov	r2, r6
 800ae90:	f001 fe8e 	bl	800cbb0 <_dtoa_r>
 800ae94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae98:	4607      	mov	r7, r0
 800ae9a:	d102      	bne.n	800aea2 <__cvt+0x66>
 800ae9c:	f019 0f01 	tst.w	r9, #1
 800aea0:	d022      	beq.n	800aee8 <__cvt+0xac>
 800aea2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aea6:	eb07 0906 	add.w	r9, r7, r6
 800aeaa:	d110      	bne.n	800aece <__cvt+0x92>
 800aeac:	783b      	ldrb	r3, [r7, #0]
 800aeae:	2b30      	cmp	r3, #48	; 0x30
 800aeb0:	d10a      	bne.n	800aec8 <__cvt+0x8c>
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	4629      	mov	r1, r5
 800aeba:	f7f5 fe0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800aebe:	b918      	cbnz	r0, 800aec8 <__cvt+0x8c>
 800aec0:	f1c6 0601 	rsb	r6, r6, #1
 800aec4:	f8ca 6000 	str.w	r6, [sl]
 800aec8:	f8da 3000 	ldr.w	r3, [sl]
 800aecc:	4499      	add	r9, r3
 800aece:	2200      	movs	r2, #0
 800aed0:	2300      	movs	r3, #0
 800aed2:	4620      	mov	r0, r4
 800aed4:	4629      	mov	r1, r5
 800aed6:	f7f5 fdff 	bl	8000ad8 <__aeabi_dcmpeq>
 800aeda:	b108      	cbz	r0, 800aee0 <__cvt+0xa4>
 800aedc:	f8cd 900c 	str.w	r9, [sp, #12]
 800aee0:	2230      	movs	r2, #48	; 0x30
 800aee2:	9b03      	ldr	r3, [sp, #12]
 800aee4:	454b      	cmp	r3, r9
 800aee6:	d307      	bcc.n	800aef8 <__cvt+0xbc>
 800aee8:	9b03      	ldr	r3, [sp, #12]
 800aeea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aeec:	1bdb      	subs	r3, r3, r7
 800aeee:	4638      	mov	r0, r7
 800aef0:	6013      	str	r3, [r2, #0]
 800aef2:	b004      	add	sp, #16
 800aef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef8:	1c59      	adds	r1, r3, #1
 800aefa:	9103      	str	r1, [sp, #12]
 800aefc:	701a      	strb	r2, [r3, #0]
 800aefe:	e7f0      	b.n	800aee2 <__cvt+0xa6>

0800af00 <__exponent>:
 800af00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af02:	4603      	mov	r3, r0
 800af04:	2900      	cmp	r1, #0
 800af06:	bfb8      	it	lt
 800af08:	4249      	neglt	r1, r1
 800af0a:	f803 2b02 	strb.w	r2, [r3], #2
 800af0e:	bfb4      	ite	lt
 800af10:	222d      	movlt	r2, #45	; 0x2d
 800af12:	222b      	movge	r2, #43	; 0x2b
 800af14:	2909      	cmp	r1, #9
 800af16:	7042      	strb	r2, [r0, #1]
 800af18:	dd2a      	ble.n	800af70 <__exponent+0x70>
 800af1a:	f10d 0407 	add.w	r4, sp, #7
 800af1e:	46a4      	mov	ip, r4
 800af20:	270a      	movs	r7, #10
 800af22:	46a6      	mov	lr, r4
 800af24:	460a      	mov	r2, r1
 800af26:	fb91 f6f7 	sdiv	r6, r1, r7
 800af2a:	fb07 1516 	mls	r5, r7, r6, r1
 800af2e:	3530      	adds	r5, #48	; 0x30
 800af30:	2a63      	cmp	r2, #99	; 0x63
 800af32:	f104 34ff 	add.w	r4, r4, #4294967295
 800af36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800af3a:	4631      	mov	r1, r6
 800af3c:	dcf1      	bgt.n	800af22 <__exponent+0x22>
 800af3e:	3130      	adds	r1, #48	; 0x30
 800af40:	f1ae 0502 	sub.w	r5, lr, #2
 800af44:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af48:	1c44      	adds	r4, r0, #1
 800af4a:	4629      	mov	r1, r5
 800af4c:	4561      	cmp	r1, ip
 800af4e:	d30a      	bcc.n	800af66 <__exponent+0x66>
 800af50:	f10d 0209 	add.w	r2, sp, #9
 800af54:	eba2 020e 	sub.w	r2, r2, lr
 800af58:	4565      	cmp	r5, ip
 800af5a:	bf88      	it	hi
 800af5c:	2200      	movhi	r2, #0
 800af5e:	4413      	add	r3, r2
 800af60:	1a18      	subs	r0, r3, r0
 800af62:	b003      	add	sp, #12
 800af64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af6e:	e7ed      	b.n	800af4c <__exponent+0x4c>
 800af70:	2330      	movs	r3, #48	; 0x30
 800af72:	3130      	adds	r1, #48	; 0x30
 800af74:	7083      	strb	r3, [r0, #2]
 800af76:	70c1      	strb	r1, [r0, #3]
 800af78:	1d03      	adds	r3, r0, #4
 800af7a:	e7f1      	b.n	800af60 <__exponent+0x60>

0800af7c <_printf_float>:
 800af7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af80:	ed2d 8b02 	vpush	{d8}
 800af84:	b08d      	sub	sp, #52	; 0x34
 800af86:	460c      	mov	r4, r1
 800af88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af8c:	4616      	mov	r6, r2
 800af8e:	461f      	mov	r7, r3
 800af90:	4605      	mov	r5, r0
 800af92:	f003 f82d 	bl	800dff0 <_localeconv_r>
 800af96:	f8d0 a000 	ldr.w	sl, [r0]
 800af9a:	4650      	mov	r0, sl
 800af9c:	f7f5 f920 	bl	80001e0 <strlen>
 800afa0:	2300      	movs	r3, #0
 800afa2:	930a      	str	r3, [sp, #40]	; 0x28
 800afa4:	6823      	ldr	r3, [r4, #0]
 800afa6:	9305      	str	r3, [sp, #20]
 800afa8:	f8d8 3000 	ldr.w	r3, [r8]
 800afac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800afb0:	3307      	adds	r3, #7
 800afb2:	f023 0307 	bic.w	r3, r3, #7
 800afb6:	f103 0208 	add.w	r2, r3, #8
 800afba:	f8c8 2000 	str.w	r2, [r8]
 800afbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800afc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800afca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afce:	9307      	str	r3, [sp, #28]
 800afd0:	f8cd 8018 	str.w	r8, [sp, #24]
 800afd4:	ee08 0a10 	vmov	s16, r0
 800afd8:	4b9f      	ldr	r3, [pc, #636]	; (800b258 <_printf_float+0x2dc>)
 800afda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afde:	f04f 32ff 	mov.w	r2, #4294967295
 800afe2:	f7f5 fdab 	bl	8000b3c <__aeabi_dcmpun>
 800afe6:	bb88      	cbnz	r0, 800b04c <_printf_float+0xd0>
 800afe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afec:	4b9a      	ldr	r3, [pc, #616]	; (800b258 <_printf_float+0x2dc>)
 800afee:	f04f 32ff 	mov.w	r2, #4294967295
 800aff2:	f7f5 fd85 	bl	8000b00 <__aeabi_dcmple>
 800aff6:	bb48      	cbnz	r0, 800b04c <_printf_float+0xd0>
 800aff8:	2200      	movs	r2, #0
 800affa:	2300      	movs	r3, #0
 800affc:	4640      	mov	r0, r8
 800affe:	4649      	mov	r1, r9
 800b000:	f7f5 fd74 	bl	8000aec <__aeabi_dcmplt>
 800b004:	b110      	cbz	r0, 800b00c <_printf_float+0x90>
 800b006:	232d      	movs	r3, #45	; 0x2d
 800b008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b00c:	4b93      	ldr	r3, [pc, #588]	; (800b25c <_printf_float+0x2e0>)
 800b00e:	4894      	ldr	r0, [pc, #592]	; (800b260 <_printf_float+0x2e4>)
 800b010:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b014:	bf94      	ite	ls
 800b016:	4698      	movls	r8, r3
 800b018:	4680      	movhi	r8, r0
 800b01a:	2303      	movs	r3, #3
 800b01c:	6123      	str	r3, [r4, #16]
 800b01e:	9b05      	ldr	r3, [sp, #20]
 800b020:	f023 0204 	bic.w	r2, r3, #4
 800b024:	6022      	str	r2, [r4, #0]
 800b026:	f04f 0900 	mov.w	r9, #0
 800b02a:	9700      	str	r7, [sp, #0]
 800b02c:	4633      	mov	r3, r6
 800b02e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b030:	4621      	mov	r1, r4
 800b032:	4628      	mov	r0, r5
 800b034:	f000 f9d8 	bl	800b3e8 <_printf_common>
 800b038:	3001      	adds	r0, #1
 800b03a:	f040 8090 	bne.w	800b15e <_printf_float+0x1e2>
 800b03e:	f04f 30ff 	mov.w	r0, #4294967295
 800b042:	b00d      	add	sp, #52	; 0x34
 800b044:	ecbd 8b02 	vpop	{d8}
 800b048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04c:	4642      	mov	r2, r8
 800b04e:	464b      	mov	r3, r9
 800b050:	4640      	mov	r0, r8
 800b052:	4649      	mov	r1, r9
 800b054:	f7f5 fd72 	bl	8000b3c <__aeabi_dcmpun>
 800b058:	b140      	cbz	r0, 800b06c <_printf_float+0xf0>
 800b05a:	464b      	mov	r3, r9
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	bfbc      	itt	lt
 800b060:	232d      	movlt	r3, #45	; 0x2d
 800b062:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b066:	487f      	ldr	r0, [pc, #508]	; (800b264 <_printf_float+0x2e8>)
 800b068:	4b7f      	ldr	r3, [pc, #508]	; (800b268 <_printf_float+0x2ec>)
 800b06a:	e7d1      	b.n	800b010 <_printf_float+0x94>
 800b06c:	6863      	ldr	r3, [r4, #4]
 800b06e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b072:	9206      	str	r2, [sp, #24]
 800b074:	1c5a      	adds	r2, r3, #1
 800b076:	d13f      	bne.n	800b0f8 <_printf_float+0x17c>
 800b078:	2306      	movs	r3, #6
 800b07a:	6063      	str	r3, [r4, #4]
 800b07c:	9b05      	ldr	r3, [sp, #20]
 800b07e:	6861      	ldr	r1, [r4, #4]
 800b080:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b084:	2300      	movs	r3, #0
 800b086:	9303      	str	r3, [sp, #12]
 800b088:	ab0a      	add	r3, sp, #40	; 0x28
 800b08a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b08e:	ab09      	add	r3, sp, #36	; 0x24
 800b090:	ec49 8b10 	vmov	d0, r8, r9
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	6022      	str	r2, [r4, #0]
 800b098:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b09c:	4628      	mov	r0, r5
 800b09e:	f7ff fecd 	bl	800ae3c <__cvt>
 800b0a2:	9b06      	ldr	r3, [sp, #24]
 800b0a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0a6:	2b47      	cmp	r3, #71	; 0x47
 800b0a8:	4680      	mov	r8, r0
 800b0aa:	d108      	bne.n	800b0be <_printf_float+0x142>
 800b0ac:	1cc8      	adds	r0, r1, #3
 800b0ae:	db02      	blt.n	800b0b6 <_printf_float+0x13a>
 800b0b0:	6863      	ldr	r3, [r4, #4]
 800b0b2:	4299      	cmp	r1, r3
 800b0b4:	dd41      	ble.n	800b13a <_printf_float+0x1be>
 800b0b6:	f1ab 0b02 	sub.w	fp, fp, #2
 800b0ba:	fa5f fb8b 	uxtb.w	fp, fp
 800b0be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b0c2:	d820      	bhi.n	800b106 <_printf_float+0x18a>
 800b0c4:	3901      	subs	r1, #1
 800b0c6:	465a      	mov	r2, fp
 800b0c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b0cc:	9109      	str	r1, [sp, #36]	; 0x24
 800b0ce:	f7ff ff17 	bl	800af00 <__exponent>
 800b0d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0d4:	1813      	adds	r3, r2, r0
 800b0d6:	2a01      	cmp	r2, #1
 800b0d8:	4681      	mov	r9, r0
 800b0da:	6123      	str	r3, [r4, #16]
 800b0dc:	dc02      	bgt.n	800b0e4 <_printf_float+0x168>
 800b0de:	6822      	ldr	r2, [r4, #0]
 800b0e0:	07d2      	lsls	r2, r2, #31
 800b0e2:	d501      	bpl.n	800b0e8 <_printf_float+0x16c>
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	6123      	str	r3, [r4, #16]
 800b0e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d09c      	beq.n	800b02a <_printf_float+0xae>
 800b0f0:	232d      	movs	r3, #45	; 0x2d
 800b0f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0f6:	e798      	b.n	800b02a <_printf_float+0xae>
 800b0f8:	9a06      	ldr	r2, [sp, #24]
 800b0fa:	2a47      	cmp	r2, #71	; 0x47
 800b0fc:	d1be      	bne.n	800b07c <_printf_float+0x100>
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1bc      	bne.n	800b07c <_printf_float+0x100>
 800b102:	2301      	movs	r3, #1
 800b104:	e7b9      	b.n	800b07a <_printf_float+0xfe>
 800b106:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b10a:	d118      	bne.n	800b13e <_printf_float+0x1c2>
 800b10c:	2900      	cmp	r1, #0
 800b10e:	6863      	ldr	r3, [r4, #4]
 800b110:	dd0b      	ble.n	800b12a <_printf_float+0x1ae>
 800b112:	6121      	str	r1, [r4, #16]
 800b114:	b913      	cbnz	r3, 800b11c <_printf_float+0x1a0>
 800b116:	6822      	ldr	r2, [r4, #0]
 800b118:	07d0      	lsls	r0, r2, #31
 800b11a:	d502      	bpl.n	800b122 <_printf_float+0x1a6>
 800b11c:	3301      	adds	r3, #1
 800b11e:	440b      	add	r3, r1
 800b120:	6123      	str	r3, [r4, #16]
 800b122:	65a1      	str	r1, [r4, #88]	; 0x58
 800b124:	f04f 0900 	mov.w	r9, #0
 800b128:	e7de      	b.n	800b0e8 <_printf_float+0x16c>
 800b12a:	b913      	cbnz	r3, 800b132 <_printf_float+0x1b6>
 800b12c:	6822      	ldr	r2, [r4, #0]
 800b12e:	07d2      	lsls	r2, r2, #31
 800b130:	d501      	bpl.n	800b136 <_printf_float+0x1ba>
 800b132:	3302      	adds	r3, #2
 800b134:	e7f4      	b.n	800b120 <_printf_float+0x1a4>
 800b136:	2301      	movs	r3, #1
 800b138:	e7f2      	b.n	800b120 <_printf_float+0x1a4>
 800b13a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b140:	4299      	cmp	r1, r3
 800b142:	db05      	blt.n	800b150 <_printf_float+0x1d4>
 800b144:	6823      	ldr	r3, [r4, #0]
 800b146:	6121      	str	r1, [r4, #16]
 800b148:	07d8      	lsls	r0, r3, #31
 800b14a:	d5ea      	bpl.n	800b122 <_printf_float+0x1a6>
 800b14c:	1c4b      	adds	r3, r1, #1
 800b14e:	e7e7      	b.n	800b120 <_printf_float+0x1a4>
 800b150:	2900      	cmp	r1, #0
 800b152:	bfd4      	ite	le
 800b154:	f1c1 0202 	rsble	r2, r1, #2
 800b158:	2201      	movgt	r2, #1
 800b15a:	4413      	add	r3, r2
 800b15c:	e7e0      	b.n	800b120 <_printf_float+0x1a4>
 800b15e:	6823      	ldr	r3, [r4, #0]
 800b160:	055a      	lsls	r2, r3, #21
 800b162:	d407      	bmi.n	800b174 <_printf_float+0x1f8>
 800b164:	6923      	ldr	r3, [r4, #16]
 800b166:	4642      	mov	r2, r8
 800b168:	4631      	mov	r1, r6
 800b16a:	4628      	mov	r0, r5
 800b16c:	47b8      	blx	r7
 800b16e:	3001      	adds	r0, #1
 800b170:	d12c      	bne.n	800b1cc <_printf_float+0x250>
 800b172:	e764      	b.n	800b03e <_printf_float+0xc2>
 800b174:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b178:	f240 80e0 	bls.w	800b33c <_printf_float+0x3c0>
 800b17c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b180:	2200      	movs	r2, #0
 800b182:	2300      	movs	r3, #0
 800b184:	f7f5 fca8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b188:	2800      	cmp	r0, #0
 800b18a:	d034      	beq.n	800b1f6 <_printf_float+0x27a>
 800b18c:	4a37      	ldr	r2, [pc, #220]	; (800b26c <_printf_float+0x2f0>)
 800b18e:	2301      	movs	r3, #1
 800b190:	4631      	mov	r1, r6
 800b192:	4628      	mov	r0, r5
 800b194:	47b8      	blx	r7
 800b196:	3001      	adds	r0, #1
 800b198:	f43f af51 	beq.w	800b03e <_printf_float+0xc2>
 800b19c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	db02      	blt.n	800b1aa <_printf_float+0x22e>
 800b1a4:	6823      	ldr	r3, [r4, #0]
 800b1a6:	07d8      	lsls	r0, r3, #31
 800b1a8:	d510      	bpl.n	800b1cc <_printf_float+0x250>
 800b1aa:	ee18 3a10 	vmov	r3, s16
 800b1ae:	4652      	mov	r2, sl
 800b1b0:	4631      	mov	r1, r6
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	47b8      	blx	r7
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	f43f af41 	beq.w	800b03e <_printf_float+0xc2>
 800b1bc:	f04f 0800 	mov.w	r8, #0
 800b1c0:	f104 091a 	add.w	r9, r4, #26
 800b1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	4543      	cmp	r3, r8
 800b1ca:	dc09      	bgt.n	800b1e0 <_printf_float+0x264>
 800b1cc:	6823      	ldr	r3, [r4, #0]
 800b1ce:	079b      	lsls	r3, r3, #30
 800b1d0:	f100 8105 	bmi.w	800b3de <_printf_float+0x462>
 800b1d4:	68e0      	ldr	r0, [r4, #12]
 800b1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1d8:	4298      	cmp	r0, r3
 800b1da:	bfb8      	it	lt
 800b1dc:	4618      	movlt	r0, r3
 800b1de:	e730      	b.n	800b042 <_printf_float+0xc6>
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	464a      	mov	r2, r9
 800b1e4:	4631      	mov	r1, r6
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	47b8      	blx	r7
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	f43f af27 	beq.w	800b03e <_printf_float+0xc2>
 800b1f0:	f108 0801 	add.w	r8, r8, #1
 800b1f4:	e7e6      	b.n	800b1c4 <_printf_float+0x248>
 800b1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	dc39      	bgt.n	800b270 <_printf_float+0x2f4>
 800b1fc:	4a1b      	ldr	r2, [pc, #108]	; (800b26c <_printf_float+0x2f0>)
 800b1fe:	2301      	movs	r3, #1
 800b200:	4631      	mov	r1, r6
 800b202:	4628      	mov	r0, r5
 800b204:	47b8      	blx	r7
 800b206:	3001      	adds	r0, #1
 800b208:	f43f af19 	beq.w	800b03e <_printf_float+0xc2>
 800b20c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b210:	4313      	orrs	r3, r2
 800b212:	d102      	bne.n	800b21a <_printf_float+0x29e>
 800b214:	6823      	ldr	r3, [r4, #0]
 800b216:	07d9      	lsls	r1, r3, #31
 800b218:	d5d8      	bpl.n	800b1cc <_printf_float+0x250>
 800b21a:	ee18 3a10 	vmov	r3, s16
 800b21e:	4652      	mov	r2, sl
 800b220:	4631      	mov	r1, r6
 800b222:	4628      	mov	r0, r5
 800b224:	47b8      	blx	r7
 800b226:	3001      	adds	r0, #1
 800b228:	f43f af09 	beq.w	800b03e <_printf_float+0xc2>
 800b22c:	f04f 0900 	mov.w	r9, #0
 800b230:	f104 0a1a 	add.w	sl, r4, #26
 800b234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b236:	425b      	negs	r3, r3
 800b238:	454b      	cmp	r3, r9
 800b23a:	dc01      	bgt.n	800b240 <_printf_float+0x2c4>
 800b23c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b23e:	e792      	b.n	800b166 <_printf_float+0x1ea>
 800b240:	2301      	movs	r3, #1
 800b242:	4652      	mov	r2, sl
 800b244:	4631      	mov	r1, r6
 800b246:	4628      	mov	r0, r5
 800b248:	47b8      	blx	r7
 800b24a:	3001      	adds	r0, #1
 800b24c:	f43f aef7 	beq.w	800b03e <_printf_float+0xc2>
 800b250:	f109 0901 	add.w	r9, r9, #1
 800b254:	e7ee      	b.n	800b234 <_printf_float+0x2b8>
 800b256:	bf00      	nop
 800b258:	7fefffff 	.word	0x7fefffff
 800b25c:	08011fe4 	.word	0x08011fe4
 800b260:	08011fe8 	.word	0x08011fe8
 800b264:	08011ff0 	.word	0x08011ff0
 800b268:	08011fec 	.word	0x08011fec
 800b26c:	08011ff4 	.word	0x08011ff4
 800b270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b272:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b274:	429a      	cmp	r2, r3
 800b276:	bfa8      	it	ge
 800b278:	461a      	movge	r2, r3
 800b27a:	2a00      	cmp	r2, #0
 800b27c:	4691      	mov	r9, r2
 800b27e:	dc37      	bgt.n	800b2f0 <_printf_float+0x374>
 800b280:	f04f 0b00 	mov.w	fp, #0
 800b284:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b288:	f104 021a 	add.w	r2, r4, #26
 800b28c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b28e:	9305      	str	r3, [sp, #20]
 800b290:	eba3 0309 	sub.w	r3, r3, r9
 800b294:	455b      	cmp	r3, fp
 800b296:	dc33      	bgt.n	800b300 <_printf_float+0x384>
 800b298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b29c:	429a      	cmp	r2, r3
 800b29e:	db3b      	blt.n	800b318 <_printf_float+0x39c>
 800b2a0:	6823      	ldr	r3, [r4, #0]
 800b2a2:	07da      	lsls	r2, r3, #31
 800b2a4:	d438      	bmi.n	800b318 <_printf_float+0x39c>
 800b2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2a8:	9a05      	ldr	r2, [sp, #20]
 800b2aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2ac:	1a9a      	subs	r2, r3, r2
 800b2ae:	eba3 0901 	sub.w	r9, r3, r1
 800b2b2:	4591      	cmp	r9, r2
 800b2b4:	bfa8      	it	ge
 800b2b6:	4691      	movge	r9, r2
 800b2b8:	f1b9 0f00 	cmp.w	r9, #0
 800b2bc:	dc35      	bgt.n	800b32a <_printf_float+0x3ae>
 800b2be:	f04f 0800 	mov.w	r8, #0
 800b2c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2c6:	f104 0a1a 	add.w	sl, r4, #26
 800b2ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2ce:	1a9b      	subs	r3, r3, r2
 800b2d0:	eba3 0309 	sub.w	r3, r3, r9
 800b2d4:	4543      	cmp	r3, r8
 800b2d6:	f77f af79 	ble.w	800b1cc <_printf_float+0x250>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	4652      	mov	r2, sl
 800b2de:	4631      	mov	r1, r6
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	47b8      	blx	r7
 800b2e4:	3001      	adds	r0, #1
 800b2e6:	f43f aeaa 	beq.w	800b03e <_printf_float+0xc2>
 800b2ea:	f108 0801 	add.w	r8, r8, #1
 800b2ee:	e7ec      	b.n	800b2ca <_printf_float+0x34e>
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	4642      	mov	r2, r8
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	47b8      	blx	r7
 800b2fa:	3001      	adds	r0, #1
 800b2fc:	d1c0      	bne.n	800b280 <_printf_float+0x304>
 800b2fe:	e69e      	b.n	800b03e <_printf_float+0xc2>
 800b300:	2301      	movs	r3, #1
 800b302:	4631      	mov	r1, r6
 800b304:	4628      	mov	r0, r5
 800b306:	9205      	str	r2, [sp, #20]
 800b308:	47b8      	blx	r7
 800b30a:	3001      	adds	r0, #1
 800b30c:	f43f ae97 	beq.w	800b03e <_printf_float+0xc2>
 800b310:	9a05      	ldr	r2, [sp, #20]
 800b312:	f10b 0b01 	add.w	fp, fp, #1
 800b316:	e7b9      	b.n	800b28c <_printf_float+0x310>
 800b318:	ee18 3a10 	vmov	r3, s16
 800b31c:	4652      	mov	r2, sl
 800b31e:	4631      	mov	r1, r6
 800b320:	4628      	mov	r0, r5
 800b322:	47b8      	blx	r7
 800b324:	3001      	adds	r0, #1
 800b326:	d1be      	bne.n	800b2a6 <_printf_float+0x32a>
 800b328:	e689      	b.n	800b03e <_printf_float+0xc2>
 800b32a:	9a05      	ldr	r2, [sp, #20]
 800b32c:	464b      	mov	r3, r9
 800b32e:	4442      	add	r2, r8
 800b330:	4631      	mov	r1, r6
 800b332:	4628      	mov	r0, r5
 800b334:	47b8      	blx	r7
 800b336:	3001      	adds	r0, #1
 800b338:	d1c1      	bne.n	800b2be <_printf_float+0x342>
 800b33a:	e680      	b.n	800b03e <_printf_float+0xc2>
 800b33c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b33e:	2a01      	cmp	r2, #1
 800b340:	dc01      	bgt.n	800b346 <_printf_float+0x3ca>
 800b342:	07db      	lsls	r3, r3, #31
 800b344:	d538      	bpl.n	800b3b8 <_printf_float+0x43c>
 800b346:	2301      	movs	r3, #1
 800b348:	4642      	mov	r2, r8
 800b34a:	4631      	mov	r1, r6
 800b34c:	4628      	mov	r0, r5
 800b34e:	47b8      	blx	r7
 800b350:	3001      	adds	r0, #1
 800b352:	f43f ae74 	beq.w	800b03e <_printf_float+0xc2>
 800b356:	ee18 3a10 	vmov	r3, s16
 800b35a:	4652      	mov	r2, sl
 800b35c:	4631      	mov	r1, r6
 800b35e:	4628      	mov	r0, r5
 800b360:	47b8      	blx	r7
 800b362:	3001      	adds	r0, #1
 800b364:	f43f ae6b 	beq.w	800b03e <_printf_float+0xc2>
 800b368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b36c:	2200      	movs	r2, #0
 800b36e:	2300      	movs	r3, #0
 800b370:	f7f5 fbb2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b374:	b9d8      	cbnz	r0, 800b3ae <_printf_float+0x432>
 800b376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b378:	f108 0201 	add.w	r2, r8, #1
 800b37c:	3b01      	subs	r3, #1
 800b37e:	4631      	mov	r1, r6
 800b380:	4628      	mov	r0, r5
 800b382:	47b8      	blx	r7
 800b384:	3001      	adds	r0, #1
 800b386:	d10e      	bne.n	800b3a6 <_printf_float+0x42a>
 800b388:	e659      	b.n	800b03e <_printf_float+0xc2>
 800b38a:	2301      	movs	r3, #1
 800b38c:	4652      	mov	r2, sl
 800b38e:	4631      	mov	r1, r6
 800b390:	4628      	mov	r0, r5
 800b392:	47b8      	blx	r7
 800b394:	3001      	adds	r0, #1
 800b396:	f43f ae52 	beq.w	800b03e <_printf_float+0xc2>
 800b39a:	f108 0801 	add.w	r8, r8, #1
 800b39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	4543      	cmp	r3, r8
 800b3a4:	dcf1      	bgt.n	800b38a <_printf_float+0x40e>
 800b3a6:	464b      	mov	r3, r9
 800b3a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b3ac:	e6dc      	b.n	800b168 <_printf_float+0x1ec>
 800b3ae:	f04f 0800 	mov.w	r8, #0
 800b3b2:	f104 0a1a 	add.w	sl, r4, #26
 800b3b6:	e7f2      	b.n	800b39e <_printf_float+0x422>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	4642      	mov	r2, r8
 800b3bc:	e7df      	b.n	800b37e <_printf_float+0x402>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	464a      	mov	r2, r9
 800b3c2:	4631      	mov	r1, r6
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	47b8      	blx	r7
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	f43f ae38 	beq.w	800b03e <_printf_float+0xc2>
 800b3ce:	f108 0801 	add.w	r8, r8, #1
 800b3d2:	68e3      	ldr	r3, [r4, #12]
 800b3d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3d6:	1a5b      	subs	r3, r3, r1
 800b3d8:	4543      	cmp	r3, r8
 800b3da:	dcf0      	bgt.n	800b3be <_printf_float+0x442>
 800b3dc:	e6fa      	b.n	800b1d4 <_printf_float+0x258>
 800b3de:	f04f 0800 	mov.w	r8, #0
 800b3e2:	f104 0919 	add.w	r9, r4, #25
 800b3e6:	e7f4      	b.n	800b3d2 <_printf_float+0x456>

0800b3e8 <_printf_common>:
 800b3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3ec:	4616      	mov	r6, r2
 800b3ee:	4699      	mov	r9, r3
 800b3f0:	688a      	ldr	r2, [r1, #8]
 800b3f2:	690b      	ldr	r3, [r1, #16]
 800b3f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	bfb8      	it	lt
 800b3fc:	4613      	movlt	r3, r2
 800b3fe:	6033      	str	r3, [r6, #0]
 800b400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b404:	4607      	mov	r7, r0
 800b406:	460c      	mov	r4, r1
 800b408:	b10a      	cbz	r2, 800b40e <_printf_common+0x26>
 800b40a:	3301      	adds	r3, #1
 800b40c:	6033      	str	r3, [r6, #0]
 800b40e:	6823      	ldr	r3, [r4, #0]
 800b410:	0699      	lsls	r1, r3, #26
 800b412:	bf42      	ittt	mi
 800b414:	6833      	ldrmi	r3, [r6, #0]
 800b416:	3302      	addmi	r3, #2
 800b418:	6033      	strmi	r3, [r6, #0]
 800b41a:	6825      	ldr	r5, [r4, #0]
 800b41c:	f015 0506 	ands.w	r5, r5, #6
 800b420:	d106      	bne.n	800b430 <_printf_common+0x48>
 800b422:	f104 0a19 	add.w	sl, r4, #25
 800b426:	68e3      	ldr	r3, [r4, #12]
 800b428:	6832      	ldr	r2, [r6, #0]
 800b42a:	1a9b      	subs	r3, r3, r2
 800b42c:	42ab      	cmp	r3, r5
 800b42e:	dc26      	bgt.n	800b47e <_printf_common+0x96>
 800b430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b434:	1e13      	subs	r3, r2, #0
 800b436:	6822      	ldr	r2, [r4, #0]
 800b438:	bf18      	it	ne
 800b43a:	2301      	movne	r3, #1
 800b43c:	0692      	lsls	r2, r2, #26
 800b43e:	d42b      	bmi.n	800b498 <_printf_common+0xb0>
 800b440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b444:	4649      	mov	r1, r9
 800b446:	4638      	mov	r0, r7
 800b448:	47c0      	blx	r8
 800b44a:	3001      	adds	r0, #1
 800b44c:	d01e      	beq.n	800b48c <_printf_common+0xa4>
 800b44e:	6823      	ldr	r3, [r4, #0]
 800b450:	68e5      	ldr	r5, [r4, #12]
 800b452:	6832      	ldr	r2, [r6, #0]
 800b454:	f003 0306 	and.w	r3, r3, #6
 800b458:	2b04      	cmp	r3, #4
 800b45a:	bf08      	it	eq
 800b45c:	1aad      	subeq	r5, r5, r2
 800b45e:	68a3      	ldr	r3, [r4, #8]
 800b460:	6922      	ldr	r2, [r4, #16]
 800b462:	bf0c      	ite	eq
 800b464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b468:	2500      	movne	r5, #0
 800b46a:	4293      	cmp	r3, r2
 800b46c:	bfc4      	itt	gt
 800b46e:	1a9b      	subgt	r3, r3, r2
 800b470:	18ed      	addgt	r5, r5, r3
 800b472:	2600      	movs	r6, #0
 800b474:	341a      	adds	r4, #26
 800b476:	42b5      	cmp	r5, r6
 800b478:	d11a      	bne.n	800b4b0 <_printf_common+0xc8>
 800b47a:	2000      	movs	r0, #0
 800b47c:	e008      	b.n	800b490 <_printf_common+0xa8>
 800b47e:	2301      	movs	r3, #1
 800b480:	4652      	mov	r2, sl
 800b482:	4649      	mov	r1, r9
 800b484:	4638      	mov	r0, r7
 800b486:	47c0      	blx	r8
 800b488:	3001      	adds	r0, #1
 800b48a:	d103      	bne.n	800b494 <_printf_common+0xac>
 800b48c:	f04f 30ff 	mov.w	r0, #4294967295
 800b490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b494:	3501      	adds	r5, #1
 800b496:	e7c6      	b.n	800b426 <_printf_common+0x3e>
 800b498:	18e1      	adds	r1, r4, r3
 800b49a:	1c5a      	adds	r2, r3, #1
 800b49c:	2030      	movs	r0, #48	; 0x30
 800b49e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4a2:	4422      	add	r2, r4
 800b4a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4ac:	3302      	adds	r3, #2
 800b4ae:	e7c7      	b.n	800b440 <_printf_common+0x58>
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	4622      	mov	r2, r4
 800b4b4:	4649      	mov	r1, r9
 800b4b6:	4638      	mov	r0, r7
 800b4b8:	47c0      	blx	r8
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	d0e6      	beq.n	800b48c <_printf_common+0xa4>
 800b4be:	3601      	adds	r6, #1
 800b4c0:	e7d9      	b.n	800b476 <_printf_common+0x8e>
	...

0800b4c4 <_printf_i>:
 800b4c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4c8:	7e0f      	ldrb	r7, [r1, #24]
 800b4ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4cc:	2f78      	cmp	r7, #120	; 0x78
 800b4ce:	4691      	mov	r9, r2
 800b4d0:	4680      	mov	r8, r0
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	469a      	mov	sl, r3
 800b4d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4da:	d807      	bhi.n	800b4ec <_printf_i+0x28>
 800b4dc:	2f62      	cmp	r7, #98	; 0x62
 800b4de:	d80a      	bhi.n	800b4f6 <_printf_i+0x32>
 800b4e0:	2f00      	cmp	r7, #0
 800b4e2:	f000 80d8 	beq.w	800b696 <_printf_i+0x1d2>
 800b4e6:	2f58      	cmp	r7, #88	; 0x58
 800b4e8:	f000 80a3 	beq.w	800b632 <_printf_i+0x16e>
 800b4ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4f4:	e03a      	b.n	800b56c <_printf_i+0xa8>
 800b4f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4fa:	2b15      	cmp	r3, #21
 800b4fc:	d8f6      	bhi.n	800b4ec <_printf_i+0x28>
 800b4fe:	a101      	add	r1, pc, #4	; (adr r1, 800b504 <_printf_i+0x40>)
 800b500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b504:	0800b55d 	.word	0x0800b55d
 800b508:	0800b571 	.word	0x0800b571
 800b50c:	0800b4ed 	.word	0x0800b4ed
 800b510:	0800b4ed 	.word	0x0800b4ed
 800b514:	0800b4ed 	.word	0x0800b4ed
 800b518:	0800b4ed 	.word	0x0800b4ed
 800b51c:	0800b571 	.word	0x0800b571
 800b520:	0800b4ed 	.word	0x0800b4ed
 800b524:	0800b4ed 	.word	0x0800b4ed
 800b528:	0800b4ed 	.word	0x0800b4ed
 800b52c:	0800b4ed 	.word	0x0800b4ed
 800b530:	0800b67d 	.word	0x0800b67d
 800b534:	0800b5a1 	.word	0x0800b5a1
 800b538:	0800b65f 	.word	0x0800b65f
 800b53c:	0800b4ed 	.word	0x0800b4ed
 800b540:	0800b4ed 	.word	0x0800b4ed
 800b544:	0800b69f 	.word	0x0800b69f
 800b548:	0800b4ed 	.word	0x0800b4ed
 800b54c:	0800b5a1 	.word	0x0800b5a1
 800b550:	0800b4ed 	.word	0x0800b4ed
 800b554:	0800b4ed 	.word	0x0800b4ed
 800b558:	0800b667 	.word	0x0800b667
 800b55c:	682b      	ldr	r3, [r5, #0]
 800b55e:	1d1a      	adds	r2, r3, #4
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	602a      	str	r2, [r5, #0]
 800b564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b56c:	2301      	movs	r3, #1
 800b56e:	e0a3      	b.n	800b6b8 <_printf_i+0x1f4>
 800b570:	6820      	ldr	r0, [r4, #0]
 800b572:	6829      	ldr	r1, [r5, #0]
 800b574:	0606      	lsls	r6, r0, #24
 800b576:	f101 0304 	add.w	r3, r1, #4
 800b57a:	d50a      	bpl.n	800b592 <_printf_i+0xce>
 800b57c:	680e      	ldr	r6, [r1, #0]
 800b57e:	602b      	str	r3, [r5, #0]
 800b580:	2e00      	cmp	r6, #0
 800b582:	da03      	bge.n	800b58c <_printf_i+0xc8>
 800b584:	232d      	movs	r3, #45	; 0x2d
 800b586:	4276      	negs	r6, r6
 800b588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b58c:	485e      	ldr	r0, [pc, #376]	; (800b708 <_printf_i+0x244>)
 800b58e:	230a      	movs	r3, #10
 800b590:	e019      	b.n	800b5c6 <_printf_i+0x102>
 800b592:	680e      	ldr	r6, [r1, #0]
 800b594:	602b      	str	r3, [r5, #0]
 800b596:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b59a:	bf18      	it	ne
 800b59c:	b236      	sxthne	r6, r6
 800b59e:	e7ef      	b.n	800b580 <_printf_i+0xbc>
 800b5a0:	682b      	ldr	r3, [r5, #0]
 800b5a2:	6820      	ldr	r0, [r4, #0]
 800b5a4:	1d19      	adds	r1, r3, #4
 800b5a6:	6029      	str	r1, [r5, #0]
 800b5a8:	0601      	lsls	r1, r0, #24
 800b5aa:	d501      	bpl.n	800b5b0 <_printf_i+0xec>
 800b5ac:	681e      	ldr	r6, [r3, #0]
 800b5ae:	e002      	b.n	800b5b6 <_printf_i+0xf2>
 800b5b0:	0646      	lsls	r6, r0, #25
 800b5b2:	d5fb      	bpl.n	800b5ac <_printf_i+0xe8>
 800b5b4:	881e      	ldrh	r6, [r3, #0]
 800b5b6:	4854      	ldr	r0, [pc, #336]	; (800b708 <_printf_i+0x244>)
 800b5b8:	2f6f      	cmp	r7, #111	; 0x6f
 800b5ba:	bf0c      	ite	eq
 800b5bc:	2308      	moveq	r3, #8
 800b5be:	230a      	movne	r3, #10
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5c6:	6865      	ldr	r5, [r4, #4]
 800b5c8:	60a5      	str	r5, [r4, #8]
 800b5ca:	2d00      	cmp	r5, #0
 800b5cc:	bfa2      	ittt	ge
 800b5ce:	6821      	ldrge	r1, [r4, #0]
 800b5d0:	f021 0104 	bicge.w	r1, r1, #4
 800b5d4:	6021      	strge	r1, [r4, #0]
 800b5d6:	b90e      	cbnz	r6, 800b5dc <_printf_i+0x118>
 800b5d8:	2d00      	cmp	r5, #0
 800b5da:	d04d      	beq.n	800b678 <_printf_i+0x1b4>
 800b5dc:	4615      	mov	r5, r2
 800b5de:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5e2:	fb03 6711 	mls	r7, r3, r1, r6
 800b5e6:	5dc7      	ldrb	r7, [r0, r7]
 800b5e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5ec:	4637      	mov	r7, r6
 800b5ee:	42bb      	cmp	r3, r7
 800b5f0:	460e      	mov	r6, r1
 800b5f2:	d9f4      	bls.n	800b5de <_printf_i+0x11a>
 800b5f4:	2b08      	cmp	r3, #8
 800b5f6:	d10b      	bne.n	800b610 <_printf_i+0x14c>
 800b5f8:	6823      	ldr	r3, [r4, #0]
 800b5fa:	07de      	lsls	r6, r3, #31
 800b5fc:	d508      	bpl.n	800b610 <_printf_i+0x14c>
 800b5fe:	6923      	ldr	r3, [r4, #16]
 800b600:	6861      	ldr	r1, [r4, #4]
 800b602:	4299      	cmp	r1, r3
 800b604:	bfde      	ittt	le
 800b606:	2330      	movle	r3, #48	; 0x30
 800b608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b60c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b610:	1b52      	subs	r2, r2, r5
 800b612:	6122      	str	r2, [r4, #16]
 800b614:	f8cd a000 	str.w	sl, [sp]
 800b618:	464b      	mov	r3, r9
 800b61a:	aa03      	add	r2, sp, #12
 800b61c:	4621      	mov	r1, r4
 800b61e:	4640      	mov	r0, r8
 800b620:	f7ff fee2 	bl	800b3e8 <_printf_common>
 800b624:	3001      	adds	r0, #1
 800b626:	d14c      	bne.n	800b6c2 <_printf_i+0x1fe>
 800b628:	f04f 30ff 	mov.w	r0, #4294967295
 800b62c:	b004      	add	sp, #16
 800b62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b632:	4835      	ldr	r0, [pc, #212]	; (800b708 <_printf_i+0x244>)
 800b634:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b638:	6829      	ldr	r1, [r5, #0]
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b640:	6029      	str	r1, [r5, #0]
 800b642:	061d      	lsls	r5, r3, #24
 800b644:	d514      	bpl.n	800b670 <_printf_i+0x1ac>
 800b646:	07df      	lsls	r7, r3, #31
 800b648:	bf44      	itt	mi
 800b64a:	f043 0320 	orrmi.w	r3, r3, #32
 800b64e:	6023      	strmi	r3, [r4, #0]
 800b650:	b91e      	cbnz	r6, 800b65a <_printf_i+0x196>
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	f023 0320 	bic.w	r3, r3, #32
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	2310      	movs	r3, #16
 800b65c:	e7b0      	b.n	800b5c0 <_printf_i+0xfc>
 800b65e:	6823      	ldr	r3, [r4, #0]
 800b660:	f043 0320 	orr.w	r3, r3, #32
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	2378      	movs	r3, #120	; 0x78
 800b668:	4828      	ldr	r0, [pc, #160]	; (800b70c <_printf_i+0x248>)
 800b66a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b66e:	e7e3      	b.n	800b638 <_printf_i+0x174>
 800b670:	0659      	lsls	r1, r3, #25
 800b672:	bf48      	it	mi
 800b674:	b2b6      	uxthmi	r6, r6
 800b676:	e7e6      	b.n	800b646 <_printf_i+0x182>
 800b678:	4615      	mov	r5, r2
 800b67a:	e7bb      	b.n	800b5f4 <_printf_i+0x130>
 800b67c:	682b      	ldr	r3, [r5, #0]
 800b67e:	6826      	ldr	r6, [r4, #0]
 800b680:	6961      	ldr	r1, [r4, #20]
 800b682:	1d18      	adds	r0, r3, #4
 800b684:	6028      	str	r0, [r5, #0]
 800b686:	0635      	lsls	r5, r6, #24
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	d501      	bpl.n	800b690 <_printf_i+0x1cc>
 800b68c:	6019      	str	r1, [r3, #0]
 800b68e:	e002      	b.n	800b696 <_printf_i+0x1d2>
 800b690:	0670      	lsls	r0, r6, #25
 800b692:	d5fb      	bpl.n	800b68c <_printf_i+0x1c8>
 800b694:	8019      	strh	r1, [r3, #0]
 800b696:	2300      	movs	r3, #0
 800b698:	6123      	str	r3, [r4, #16]
 800b69a:	4615      	mov	r5, r2
 800b69c:	e7ba      	b.n	800b614 <_printf_i+0x150>
 800b69e:	682b      	ldr	r3, [r5, #0]
 800b6a0:	1d1a      	adds	r2, r3, #4
 800b6a2:	602a      	str	r2, [r5, #0]
 800b6a4:	681d      	ldr	r5, [r3, #0]
 800b6a6:	6862      	ldr	r2, [r4, #4]
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	f7f4 fda0 	bl	80001f0 <memchr>
 800b6b0:	b108      	cbz	r0, 800b6b6 <_printf_i+0x1f2>
 800b6b2:	1b40      	subs	r0, r0, r5
 800b6b4:	6060      	str	r0, [r4, #4]
 800b6b6:	6863      	ldr	r3, [r4, #4]
 800b6b8:	6123      	str	r3, [r4, #16]
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6c0:	e7a8      	b.n	800b614 <_printf_i+0x150>
 800b6c2:	6923      	ldr	r3, [r4, #16]
 800b6c4:	462a      	mov	r2, r5
 800b6c6:	4649      	mov	r1, r9
 800b6c8:	4640      	mov	r0, r8
 800b6ca:	47d0      	blx	sl
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	d0ab      	beq.n	800b628 <_printf_i+0x164>
 800b6d0:	6823      	ldr	r3, [r4, #0]
 800b6d2:	079b      	lsls	r3, r3, #30
 800b6d4:	d413      	bmi.n	800b6fe <_printf_i+0x23a>
 800b6d6:	68e0      	ldr	r0, [r4, #12]
 800b6d8:	9b03      	ldr	r3, [sp, #12]
 800b6da:	4298      	cmp	r0, r3
 800b6dc:	bfb8      	it	lt
 800b6de:	4618      	movlt	r0, r3
 800b6e0:	e7a4      	b.n	800b62c <_printf_i+0x168>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	4632      	mov	r2, r6
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	4640      	mov	r0, r8
 800b6ea:	47d0      	blx	sl
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d09b      	beq.n	800b628 <_printf_i+0x164>
 800b6f0:	3501      	adds	r5, #1
 800b6f2:	68e3      	ldr	r3, [r4, #12]
 800b6f4:	9903      	ldr	r1, [sp, #12]
 800b6f6:	1a5b      	subs	r3, r3, r1
 800b6f8:	42ab      	cmp	r3, r5
 800b6fa:	dcf2      	bgt.n	800b6e2 <_printf_i+0x21e>
 800b6fc:	e7eb      	b.n	800b6d6 <_printf_i+0x212>
 800b6fe:	2500      	movs	r5, #0
 800b700:	f104 0619 	add.w	r6, r4, #25
 800b704:	e7f5      	b.n	800b6f2 <_printf_i+0x22e>
 800b706:	bf00      	nop
 800b708:	08011ff6 	.word	0x08011ff6
 800b70c:	08012007 	.word	0x08012007

0800b710 <_scanf_float>:
 800b710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	b087      	sub	sp, #28
 800b716:	4617      	mov	r7, r2
 800b718:	9303      	str	r3, [sp, #12]
 800b71a:	688b      	ldr	r3, [r1, #8]
 800b71c:	1e5a      	subs	r2, r3, #1
 800b71e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b722:	bf83      	ittte	hi
 800b724:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b728:	195b      	addhi	r3, r3, r5
 800b72a:	9302      	strhi	r3, [sp, #8]
 800b72c:	2300      	movls	r3, #0
 800b72e:	bf86      	itte	hi
 800b730:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b734:	608b      	strhi	r3, [r1, #8]
 800b736:	9302      	strls	r3, [sp, #8]
 800b738:	680b      	ldr	r3, [r1, #0]
 800b73a:	468b      	mov	fp, r1
 800b73c:	2500      	movs	r5, #0
 800b73e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b742:	f84b 3b1c 	str.w	r3, [fp], #28
 800b746:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b74a:	4680      	mov	r8, r0
 800b74c:	460c      	mov	r4, r1
 800b74e:	465e      	mov	r6, fp
 800b750:	46aa      	mov	sl, r5
 800b752:	46a9      	mov	r9, r5
 800b754:	9501      	str	r5, [sp, #4]
 800b756:	68a2      	ldr	r2, [r4, #8]
 800b758:	b152      	cbz	r2, 800b770 <_scanf_float+0x60>
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	2b4e      	cmp	r3, #78	; 0x4e
 800b760:	d864      	bhi.n	800b82c <_scanf_float+0x11c>
 800b762:	2b40      	cmp	r3, #64	; 0x40
 800b764:	d83c      	bhi.n	800b7e0 <_scanf_float+0xd0>
 800b766:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b76a:	b2c8      	uxtb	r0, r1
 800b76c:	280e      	cmp	r0, #14
 800b76e:	d93a      	bls.n	800b7e6 <_scanf_float+0xd6>
 800b770:	f1b9 0f00 	cmp.w	r9, #0
 800b774:	d003      	beq.n	800b77e <_scanf_float+0x6e>
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b782:	f1ba 0f01 	cmp.w	sl, #1
 800b786:	f200 8113 	bhi.w	800b9b0 <_scanf_float+0x2a0>
 800b78a:	455e      	cmp	r6, fp
 800b78c:	f200 8105 	bhi.w	800b99a <_scanf_float+0x28a>
 800b790:	2501      	movs	r5, #1
 800b792:	4628      	mov	r0, r5
 800b794:	b007      	add	sp, #28
 800b796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b79a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b79e:	2a0d      	cmp	r2, #13
 800b7a0:	d8e6      	bhi.n	800b770 <_scanf_float+0x60>
 800b7a2:	a101      	add	r1, pc, #4	; (adr r1, 800b7a8 <_scanf_float+0x98>)
 800b7a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b7a8:	0800b8e7 	.word	0x0800b8e7
 800b7ac:	0800b771 	.word	0x0800b771
 800b7b0:	0800b771 	.word	0x0800b771
 800b7b4:	0800b771 	.word	0x0800b771
 800b7b8:	0800b947 	.word	0x0800b947
 800b7bc:	0800b91f 	.word	0x0800b91f
 800b7c0:	0800b771 	.word	0x0800b771
 800b7c4:	0800b771 	.word	0x0800b771
 800b7c8:	0800b8f5 	.word	0x0800b8f5
 800b7cc:	0800b771 	.word	0x0800b771
 800b7d0:	0800b771 	.word	0x0800b771
 800b7d4:	0800b771 	.word	0x0800b771
 800b7d8:	0800b771 	.word	0x0800b771
 800b7dc:	0800b8ad 	.word	0x0800b8ad
 800b7e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b7e4:	e7db      	b.n	800b79e <_scanf_float+0x8e>
 800b7e6:	290e      	cmp	r1, #14
 800b7e8:	d8c2      	bhi.n	800b770 <_scanf_float+0x60>
 800b7ea:	a001      	add	r0, pc, #4	; (adr r0, 800b7f0 <_scanf_float+0xe0>)
 800b7ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b7f0:	0800b89f 	.word	0x0800b89f
 800b7f4:	0800b771 	.word	0x0800b771
 800b7f8:	0800b89f 	.word	0x0800b89f
 800b7fc:	0800b933 	.word	0x0800b933
 800b800:	0800b771 	.word	0x0800b771
 800b804:	0800b84d 	.word	0x0800b84d
 800b808:	0800b889 	.word	0x0800b889
 800b80c:	0800b889 	.word	0x0800b889
 800b810:	0800b889 	.word	0x0800b889
 800b814:	0800b889 	.word	0x0800b889
 800b818:	0800b889 	.word	0x0800b889
 800b81c:	0800b889 	.word	0x0800b889
 800b820:	0800b889 	.word	0x0800b889
 800b824:	0800b889 	.word	0x0800b889
 800b828:	0800b889 	.word	0x0800b889
 800b82c:	2b6e      	cmp	r3, #110	; 0x6e
 800b82e:	d809      	bhi.n	800b844 <_scanf_float+0x134>
 800b830:	2b60      	cmp	r3, #96	; 0x60
 800b832:	d8b2      	bhi.n	800b79a <_scanf_float+0x8a>
 800b834:	2b54      	cmp	r3, #84	; 0x54
 800b836:	d077      	beq.n	800b928 <_scanf_float+0x218>
 800b838:	2b59      	cmp	r3, #89	; 0x59
 800b83a:	d199      	bne.n	800b770 <_scanf_float+0x60>
 800b83c:	2d07      	cmp	r5, #7
 800b83e:	d197      	bne.n	800b770 <_scanf_float+0x60>
 800b840:	2508      	movs	r5, #8
 800b842:	e029      	b.n	800b898 <_scanf_float+0x188>
 800b844:	2b74      	cmp	r3, #116	; 0x74
 800b846:	d06f      	beq.n	800b928 <_scanf_float+0x218>
 800b848:	2b79      	cmp	r3, #121	; 0x79
 800b84a:	e7f6      	b.n	800b83a <_scanf_float+0x12a>
 800b84c:	6821      	ldr	r1, [r4, #0]
 800b84e:	05c8      	lsls	r0, r1, #23
 800b850:	d51a      	bpl.n	800b888 <_scanf_float+0x178>
 800b852:	9b02      	ldr	r3, [sp, #8]
 800b854:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b858:	6021      	str	r1, [r4, #0]
 800b85a:	f109 0901 	add.w	r9, r9, #1
 800b85e:	b11b      	cbz	r3, 800b868 <_scanf_float+0x158>
 800b860:	3b01      	subs	r3, #1
 800b862:	3201      	adds	r2, #1
 800b864:	9302      	str	r3, [sp, #8]
 800b866:	60a2      	str	r2, [r4, #8]
 800b868:	68a3      	ldr	r3, [r4, #8]
 800b86a:	3b01      	subs	r3, #1
 800b86c:	60a3      	str	r3, [r4, #8]
 800b86e:	6923      	ldr	r3, [r4, #16]
 800b870:	3301      	adds	r3, #1
 800b872:	6123      	str	r3, [r4, #16]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	3b01      	subs	r3, #1
 800b878:	2b00      	cmp	r3, #0
 800b87a:	607b      	str	r3, [r7, #4]
 800b87c:	f340 8084 	ble.w	800b988 <_scanf_float+0x278>
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	3301      	adds	r3, #1
 800b884:	603b      	str	r3, [r7, #0]
 800b886:	e766      	b.n	800b756 <_scanf_float+0x46>
 800b888:	eb1a 0f05 	cmn.w	sl, r5
 800b88c:	f47f af70 	bne.w	800b770 <_scanf_float+0x60>
 800b890:	6822      	ldr	r2, [r4, #0]
 800b892:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b896:	6022      	str	r2, [r4, #0]
 800b898:	f806 3b01 	strb.w	r3, [r6], #1
 800b89c:	e7e4      	b.n	800b868 <_scanf_float+0x158>
 800b89e:	6822      	ldr	r2, [r4, #0]
 800b8a0:	0610      	lsls	r0, r2, #24
 800b8a2:	f57f af65 	bpl.w	800b770 <_scanf_float+0x60>
 800b8a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8aa:	e7f4      	b.n	800b896 <_scanf_float+0x186>
 800b8ac:	f1ba 0f00 	cmp.w	sl, #0
 800b8b0:	d10e      	bne.n	800b8d0 <_scanf_float+0x1c0>
 800b8b2:	f1b9 0f00 	cmp.w	r9, #0
 800b8b6:	d10e      	bne.n	800b8d6 <_scanf_float+0x1c6>
 800b8b8:	6822      	ldr	r2, [r4, #0]
 800b8ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b8be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b8c2:	d108      	bne.n	800b8d6 <_scanf_float+0x1c6>
 800b8c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b8c8:	6022      	str	r2, [r4, #0]
 800b8ca:	f04f 0a01 	mov.w	sl, #1
 800b8ce:	e7e3      	b.n	800b898 <_scanf_float+0x188>
 800b8d0:	f1ba 0f02 	cmp.w	sl, #2
 800b8d4:	d055      	beq.n	800b982 <_scanf_float+0x272>
 800b8d6:	2d01      	cmp	r5, #1
 800b8d8:	d002      	beq.n	800b8e0 <_scanf_float+0x1d0>
 800b8da:	2d04      	cmp	r5, #4
 800b8dc:	f47f af48 	bne.w	800b770 <_scanf_float+0x60>
 800b8e0:	3501      	adds	r5, #1
 800b8e2:	b2ed      	uxtb	r5, r5
 800b8e4:	e7d8      	b.n	800b898 <_scanf_float+0x188>
 800b8e6:	f1ba 0f01 	cmp.w	sl, #1
 800b8ea:	f47f af41 	bne.w	800b770 <_scanf_float+0x60>
 800b8ee:	f04f 0a02 	mov.w	sl, #2
 800b8f2:	e7d1      	b.n	800b898 <_scanf_float+0x188>
 800b8f4:	b97d      	cbnz	r5, 800b916 <_scanf_float+0x206>
 800b8f6:	f1b9 0f00 	cmp.w	r9, #0
 800b8fa:	f47f af3c 	bne.w	800b776 <_scanf_float+0x66>
 800b8fe:	6822      	ldr	r2, [r4, #0]
 800b900:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b904:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b908:	f47f af39 	bne.w	800b77e <_scanf_float+0x6e>
 800b90c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b910:	6022      	str	r2, [r4, #0]
 800b912:	2501      	movs	r5, #1
 800b914:	e7c0      	b.n	800b898 <_scanf_float+0x188>
 800b916:	2d03      	cmp	r5, #3
 800b918:	d0e2      	beq.n	800b8e0 <_scanf_float+0x1d0>
 800b91a:	2d05      	cmp	r5, #5
 800b91c:	e7de      	b.n	800b8dc <_scanf_float+0x1cc>
 800b91e:	2d02      	cmp	r5, #2
 800b920:	f47f af26 	bne.w	800b770 <_scanf_float+0x60>
 800b924:	2503      	movs	r5, #3
 800b926:	e7b7      	b.n	800b898 <_scanf_float+0x188>
 800b928:	2d06      	cmp	r5, #6
 800b92a:	f47f af21 	bne.w	800b770 <_scanf_float+0x60>
 800b92e:	2507      	movs	r5, #7
 800b930:	e7b2      	b.n	800b898 <_scanf_float+0x188>
 800b932:	6822      	ldr	r2, [r4, #0]
 800b934:	0591      	lsls	r1, r2, #22
 800b936:	f57f af1b 	bpl.w	800b770 <_scanf_float+0x60>
 800b93a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b93e:	6022      	str	r2, [r4, #0]
 800b940:	f8cd 9004 	str.w	r9, [sp, #4]
 800b944:	e7a8      	b.n	800b898 <_scanf_float+0x188>
 800b946:	6822      	ldr	r2, [r4, #0]
 800b948:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b94c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b950:	d006      	beq.n	800b960 <_scanf_float+0x250>
 800b952:	0550      	lsls	r0, r2, #21
 800b954:	f57f af0c 	bpl.w	800b770 <_scanf_float+0x60>
 800b958:	f1b9 0f00 	cmp.w	r9, #0
 800b95c:	f43f af0f 	beq.w	800b77e <_scanf_float+0x6e>
 800b960:	0591      	lsls	r1, r2, #22
 800b962:	bf58      	it	pl
 800b964:	9901      	ldrpl	r1, [sp, #4]
 800b966:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b96a:	bf58      	it	pl
 800b96c:	eba9 0101 	subpl.w	r1, r9, r1
 800b970:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b974:	bf58      	it	pl
 800b976:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b97a:	6022      	str	r2, [r4, #0]
 800b97c:	f04f 0900 	mov.w	r9, #0
 800b980:	e78a      	b.n	800b898 <_scanf_float+0x188>
 800b982:	f04f 0a03 	mov.w	sl, #3
 800b986:	e787      	b.n	800b898 <_scanf_float+0x188>
 800b988:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b98c:	4639      	mov	r1, r7
 800b98e:	4640      	mov	r0, r8
 800b990:	4798      	blx	r3
 800b992:	2800      	cmp	r0, #0
 800b994:	f43f aedf 	beq.w	800b756 <_scanf_float+0x46>
 800b998:	e6ea      	b.n	800b770 <_scanf_float+0x60>
 800b99a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b99e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9a2:	463a      	mov	r2, r7
 800b9a4:	4640      	mov	r0, r8
 800b9a6:	4798      	blx	r3
 800b9a8:	6923      	ldr	r3, [r4, #16]
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	6123      	str	r3, [r4, #16]
 800b9ae:	e6ec      	b.n	800b78a <_scanf_float+0x7a>
 800b9b0:	1e6b      	subs	r3, r5, #1
 800b9b2:	2b06      	cmp	r3, #6
 800b9b4:	d825      	bhi.n	800ba02 <_scanf_float+0x2f2>
 800b9b6:	2d02      	cmp	r5, #2
 800b9b8:	d836      	bhi.n	800ba28 <_scanf_float+0x318>
 800b9ba:	455e      	cmp	r6, fp
 800b9bc:	f67f aee8 	bls.w	800b790 <_scanf_float+0x80>
 800b9c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9c8:	463a      	mov	r2, r7
 800b9ca:	4640      	mov	r0, r8
 800b9cc:	4798      	blx	r3
 800b9ce:	6923      	ldr	r3, [r4, #16]
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	6123      	str	r3, [r4, #16]
 800b9d4:	e7f1      	b.n	800b9ba <_scanf_float+0x2aa>
 800b9d6:	9802      	ldr	r0, [sp, #8]
 800b9d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b9e0:	9002      	str	r0, [sp, #8]
 800b9e2:	463a      	mov	r2, r7
 800b9e4:	4640      	mov	r0, r8
 800b9e6:	4798      	blx	r3
 800b9e8:	6923      	ldr	r3, [r4, #16]
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	6123      	str	r3, [r4, #16]
 800b9ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9f2:	fa5f fa8a 	uxtb.w	sl, sl
 800b9f6:	f1ba 0f02 	cmp.w	sl, #2
 800b9fa:	d1ec      	bne.n	800b9d6 <_scanf_float+0x2c6>
 800b9fc:	3d03      	subs	r5, #3
 800b9fe:	b2ed      	uxtb	r5, r5
 800ba00:	1b76      	subs	r6, r6, r5
 800ba02:	6823      	ldr	r3, [r4, #0]
 800ba04:	05da      	lsls	r2, r3, #23
 800ba06:	d52f      	bpl.n	800ba68 <_scanf_float+0x358>
 800ba08:	055b      	lsls	r3, r3, #21
 800ba0a:	d510      	bpl.n	800ba2e <_scanf_float+0x31e>
 800ba0c:	455e      	cmp	r6, fp
 800ba0e:	f67f aebf 	bls.w	800b790 <_scanf_float+0x80>
 800ba12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba1a:	463a      	mov	r2, r7
 800ba1c:	4640      	mov	r0, r8
 800ba1e:	4798      	blx	r3
 800ba20:	6923      	ldr	r3, [r4, #16]
 800ba22:	3b01      	subs	r3, #1
 800ba24:	6123      	str	r3, [r4, #16]
 800ba26:	e7f1      	b.n	800ba0c <_scanf_float+0x2fc>
 800ba28:	46aa      	mov	sl, r5
 800ba2a:	9602      	str	r6, [sp, #8]
 800ba2c:	e7df      	b.n	800b9ee <_scanf_float+0x2de>
 800ba2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ba32:	6923      	ldr	r3, [r4, #16]
 800ba34:	2965      	cmp	r1, #101	; 0x65
 800ba36:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba3a:	f106 35ff 	add.w	r5, r6, #4294967295
 800ba3e:	6123      	str	r3, [r4, #16]
 800ba40:	d00c      	beq.n	800ba5c <_scanf_float+0x34c>
 800ba42:	2945      	cmp	r1, #69	; 0x45
 800ba44:	d00a      	beq.n	800ba5c <_scanf_float+0x34c>
 800ba46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba4a:	463a      	mov	r2, r7
 800ba4c:	4640      	mov	r0, r8
 800ba4e:	4798      	blx	r3
 800ba50:	6923      	ldr	r3, [r4, #16]
 800ba52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ba56:	3b01      	subs	r3, #1
 800ba58:	1eb5      	subs	r5, r6, #2
 800ba5a:	6123      	str	r3, [r4, #16]
 800ba5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba60:	463a      	mov	r2, r7
 800ba62:	4640      	mov	r0, r8
 800ba64:	4798      	blx	r3
 800ba66:	462e      	mov	r6, r5
 800ba68:	6825      	ldr	r5, [r4, #0]
 800ba6a:	f015 0510 	ands.w	r5, r5, #16
 800ba6e:	d159      	bne.n	800bb24 <_scanf_float+0x414>
 800ba70:	7035      	strb	r5, [r6, #0]
 800ba72:	6823      	ldr	r3, [r4, #0]
 800ba74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ba78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba7c:	d11b      	bne.n	800bab6 <_scanf_float+0x3a6>
 800ba7e:	9b01      	ldr	r3, [sp, #4]
 800ba80:	454b      	cmp	r3, r9
 800ba82:	eba3 0209 	sub.w	r2, r3, r9
 800ba86:	d123      	bne.n	800bad0 <_scanf_float+0x3c0>
 800ba88:	2200      	movs	r2, #0
 800ba8a:	4659      	mov	r1, fp
 800ba8c:	4640      	mov	r0, r8
 800ba8e:	f000 ff55 	bl	800c93c <_strtod_r>
 800ba92:	6822      	ldr	r2, [r4, #0]
 800ba94:	9b03      	ldr	r3, [sp, #12]
 800ba96:	f012 0f02 	tst.w	r2, #2
 800ba9a:	ec57 6b10 	vmov	r6, r7, d0
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	d021      	beq.n	800bae6 <_scanf_float+0x3d6>
 800baa2:	9903      	ldr	r1, [sp, #12]
 800baa4:	1d1a      	adds	r2, r3, #4
 800baa6:	600a      	str	r2, [r1, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	e9c3 6700 	strd	r6, r7, [r3]
 800baae:	68e3      	ldr	r3, [r4, #12]
 800bab0:	3301      	adds	r3, #1
 800bab2:	60e3      	str	r3, [r4, #12]
 800bab4:	e66d      	b.n	800b792 <_scanf_float+0x82>
 800bab6:	9b04      	ldr	r3, [sp, #16]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d0e5      	beq.n	800ba88 <_scanf_float+0x378>
 800babc:	9905      	ldr	r1, [sp, #20]
 800babe:	230a      	movs	r3, #10
 800bac0:	462a      	mov	r2, r5
 800bac2:	3101      	adds	r1, #1
 800bac4:	4640      	mov	r0, r8
 800bac6:	f000 ffc1 	bl	800ca4c <_strtol_r>
 800baca:	9b04      	ldr	r3, [sp, #16]
 800bacc:	9e05      	ldr	r6, [sp, #20]
 800bace:	1ac2      	subs	r2, r0, r3
 800bad0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bad4:	429e      	cmp	r6, r3
 800bad6:	bf28      	it	cs
 800bad8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800badc:	4912      	ldr	r1, [pc, #72]	; (800bb28 <_scanf_float+0x418>)
 800bade:	4630      	mov	r0, r6
 800bae0:	f000 f8a6 	bl	800bc30 <siprintf>
 800bae4:	e7d0      	b.n	800ba88 <_scanf_float+0x378>
 800bae6:	9903      	ldr	r1, [sp, #12]
 800bae8:	f012 0f04 	tst.w	r2, #4
 800baec:	f103 0204 	add.w	r2, r3, #4
 800baf0:	600a      	str	r2, [r1, #0]
 800baf2:	d1d9      	bne.n	800baa8 <_scanf_float+0x398>
 800baf4:	f8d3 8000 	ldr.w	r8, [r3]
 800baf8:	ee10 2a10 	vmov	r2, s0
 800bafc:	ee10 0a10 	vmov	r0, s0
 800bb00:	463b      	mov	r3, r7
 800bb02:	4639      	mov	r1, r7
 800bb04:	f7f5 f81a 	bl	8000b3c <__aeabi_dcmpun>
 800bb08:	b128      	cbz	r0, 800bb16 <_scanf_float+0x406>
 800bb0a:	4808      	ldr	r0, [pc, #32]	; (800bb2c <_scanf_float+0x41c>)
 800bb0c:	f000 f88a 	bl	800bc24 <nanf>
 800bb10:	ed88 0a00 	vstr	s0, [r8]
 800bb14:	e7cb      	b.n	800baae <_scanf_float+0x39e>
 800bb16:	4630      	mov	r0, r6
 800bb18:	4639      	mov	r1, r7
 800bb1a:	f7f5 f86d 	bl	8000bf8 <__aeabi_d2f>
 800bb1e:	f8c8 0000 	str.w	r0, [r8]
 800bb22:	e7c4      	b.n	800baae <_scanf_float+0x39e>
 800bb24:	2500      	movs	r5, #0
 800bb26:	e634      	b.n	800b792 <_scanf_float+0x82>
 800bb28:	08012018 	.word	0x08012018
 800bb2c:	08012420 	.word	0x08012420

0800bb30 <cleanup_glue>:
 800bb30:	b538      	push	{r3, r4, r5, lr}
 800bb32:	460c      	mov	r4, r1
 800bb34:	6809      	ldr	r1, [r1, #0]
 800bb36:	4605      	mov	r5, r0
 800bb38:	b109      	cbz	r1, 800bb3e <cleanup_glue+0xe>
 800bb3a:	f7ff fff9 	bl	800bb30 <cleanup_glue>
 800bb3e:	4621      	mov	r1, r4
 800bb40:	4628      	mov	r0, r5
 800bb42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb46:	f002 bf67 	b.w	800ea18 <_free_r>
	...

0800bb4c <_reclaim_reent>:
 800bb4c:	4b2c      	ldr	r3, [pc, #176]	; (800bc00 <_reclaim_reent+0xb4>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4283      	cmp	r3, r0
 800bb52:	b570      	push	{r4, r5, r6, lr}
 800bb54:	4604      	mov	r4, r0
 800bb56:	d051      	beq.n	800bbfc <_reclaim_reent+0xb0>
 800bb58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb5a:	b143      	cbz	r3, 800bb6e <_reclaim_reent+0x22>
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d14a      	bne.n	800bbf8 <_reclaim_reent+0xac>
 800bb62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb64:	6819      	ldr	r1, [r3, #0]
 800bb66:	b111      	cbz	r1, 800bb6e <_reclaim_reent+0x22>
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f002 ff55 	bl	800ea18 <_free_r>
 800bb6e:	6961      	ldr	r1, [r4, #20]
 800bb70:	b111      	cbz	r1, 800bb78 <_reclaim_reent+0x2c>
 800bb72:	4620      	mov	r0, r4
 800bb74:	f002 ff50 	bl	800ea18 <_free_r>
 800bb78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bb7a:	b111      	cbz	r1, 800bb82 <_reclaim_reent+0x36>
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f002 ff4b 	bl	800ea18 <_free_r>
 800bb82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bb84:	b111      	cbz	r1, 800bb8c <_reclaim_reent+0x40>
 800bb86:	4620      	mov	r0, r4
 800bb88:	f002 ff46 	bl	800ea18 <_free_r>
 800bb8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bb8e:	b111      	cbz	r1, 800bb96 <_reclaim_reent+0x4a>
 800bb90:	4620      	mov	r0, r4
 800bb92:	f002 ff41 	bl	800ea18 <_free_r>
 800bb96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bb98:	b111      	cbz	r1, 800bba0 <_reclaim_reent+0x54>
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f002 ff3c 	bl	800ea18 <_free_r>
 800bba0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bba2:	b111      	cbz	r1, 800bbaa <_reclaim_reent+0x5e>
 800bba4:	4620      	mov	r0, r4
 800bba6:	f002 ff37 	bl	800ea18 <_free_r>
 800bbaa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bbac:	b111      	cbz	r1, 800bbb4 <_reclaim_reent+0x68>
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f002 ff32 	bl	800ea18 <_free_r>
 800bbb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbb6:	b111      	cbz	r1, 800bbbe <_reclaim_reent+0x72>
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f002 ff2d 	bl	800ea18 <_free_r>
 800bbbe:	69a3      	ldr	r3, [r4, #24]
 800bbc0:	b1e3      	cbz	r3, 800bbfc <_reclaim_reent+0xb0>
 800bbc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	4798      	blx	r3
 800bbc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bbca:	b1b9      	cbz	r1, 800bbfc <_reclaim_reent+0xb0>
 800bbcc:	4620      	mov	r0, r4
 800bbce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bbd2:	f7ff bfad 	b.w	800bb30 <cleanup_glue>
 800bbd6:	5949      	ldr	r1, [r1, r5]
 800bbd8:	b941      	cbnz	r1, 800bbec <_reclaim_reent+0xa0>
 800bbda:	3504      	adds	r5, #4
 800bbdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbde:	2d80      	cmp	r5, #128	; 0x80
 800bbe0:	68d9      	ldr	r1, [r3, #12]
 800bbe2:	d1f8      	bne.n	800bbd6 <_reclaim_reent+0x8a>
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f002 ff17 	bl	800ea18 <_free_r>
 800bbea:	e7ba      	b.n	800bb62 <_reclaim_reent+0x16>
 800bbec:	680e      	ldr	r6, [r1, #0]
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f002 ff12 	bl	800ea18 <_free_r>
 800bbf4:	4631      	mov	r1, r6
 800bbf6:	e7ef      	b.n	800bbd8 <_reclaim_reent+0x8c>
 800bbf8:	2500      	movs	r5, #0
 800bbfa:	e7ef      	b.n	800bbdc <_reclaim_reent+0x90>
 800bbfc:	bd70      	pop	{r4, r5, r6, pc}
 800bbfe:	bf00      	nop
 800bc00:	20000038 	.word	0x20000038

0800bc04 <_sbrk_r>:
 800bc04:	b538      	push	{r3, r4, r5, lr}
 800bc06:	4d06      	ldr	r5, [pc, #24]	; (800bc20 <_sbrk_r+0x1c>)
 800bc08:	2300      	movs	r3, #0
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	4608      	mov	r0, r1
 800bc0e:	602b      	str	r3, [r5, #0]
 800bc10:	f7f6 fb12 	bl	8002238 <_sbrk>
 800bc14:	1c43      	adds	r3, r0, #1
 800bc16:	d102      	bne.n	800bc1e <_sbrk_r+0x1a>
 800bc18:	682b      	ldr	r3, [r5, #0]
 800bc1a:	b103      	cbz	r3, 800bc1e <_sbrk_r+0x1a>
 800bc1c:	6023      	str	r3, [r4, #0]
 800bc1e:	bd38      	pop	{r3, r4, r5, pc}
 800bc20:	20004f44 	.word	0x20004f44

0800bc24 <nanf>:
 800bc24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bc2c <nanf+0x8>
 800bc28:	4770      	bx	lr
 800bc2a:	bf00      	nop
 800bc2c:	7fc00000 	.word	0x7fc00000

0800bc30 <siprintf>:
 800bc30:	b40e      	push	{r1, r2, r3}
 800bc32:	b500      	push	{lr}
 800bc34:	b09c      	sub	sp, #112	; 0x70
 800bc36:	ab1d      	add	r3, sp, #116	; 0x74
 800bc38:	9002      	str	r0, [sp, #8]
 800bc3a:	9006      	str	r0, [sp, #24]
 800bc3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc40:	4809      	ldr	r0, [pc, #36]	; (800bc68 <siprintf+0x38>)
 800bc42:	9107      	str	r1, [sp, #28]
 800bc44:	9104      	str	r1, [sp, #16]
 800bc46:	4909      	ldr	r1, [pc, #36]	; (800bc6c <siprintf+0x3c>)
 800bc48:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc4c:	9105      	str	r1, [sp, #20]
 800bc4e:	6800      	ldr	r0, [r0, #0]
 800bc50:	9301      	str	r3, [sp, #4]
 800bc52:	a902      	add	r1, sp, #8
 800bc54:	f002 ff88 	bl	800eb68 <_svfiprintf_r>
 800bc58:	9b02      	ldr	r3, [sp, #8]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	701a      	strb	r2, [r3, #0]
 800bc5e:	b01c      	add	sp, #112	; 0x70
 800bc60:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc64:	b003      	add	sp, #12
 800bc66:	4770      	bx	lr
 800bc68:	20000038 	.word	0x20000038
 800bc6c:	ffff0208 	.word	0xffff0208

0800bc70 <__sread>:
 800bc70:	b510      	push	{r4, lr}
 800bc72:	460c      	mov	r4, r1
 800bc74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc78:	f003 f876 	bl	800ed68 <_read_r>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	bfab      	itete	ge
 800bc80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc82:	89a3      	ldrhlt	r3, [r4, #12]
 800bc84:	181b      	addge	r3, r3, r0
 800bc86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc8a:	bfac      	ite	ge
 800bc8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc8e:	81a3      	strhlt	r3, [r4, #12]
 800bc90:	bd10      	pop	{r4, pc}

0800bc92 <__swrite>:
 800bc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc96:	461f      	mov	r7, r3
 800bc98:	898b      	ldrh	r3, [r1, #12]
 800bc9a:	05db      	lsls	r3, r3, #23
 800bc9c:	4605      	mov	r5, r0
 800bc9e:	460c      	mov	r4, r1
 800bca0:	4616      	mov	r6, r2
 800bca2:	d505      	bpl.n	800bcb0 <__swrite+0x1e>
 800bca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca8:	2302      	movs	r3, #2
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f002 f9a4 	bl	800dff8 <_lseek_r>
 800bcb0:	89a3      	ldrh	r3, [r4, #12]
 800bcb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcba:	81a3      	strh	r3, [r4, #12]
 800bcbc:	4632      	mov	r2, r6
 800bcbe:	463b      	mov	r3, r7
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc6:	f000 bec3 	b.w	800ca50 <_write_r>

0800bcca <__sseek>:
 800bcca:	b510      	push	{r4, lr}
 800bccc:	460c      	mov	r4, r1
 800bcce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd2:	f002 f991 	bl	800dff8 <_lseek_r>
 800bcd6:	1c43      	adds	r3, r0, #1
 800bcd8:	89a3      	ldrh	r3, [r4, #12]
 800bcda:	bf15      	itete	ne
 800bcdc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bce6:	81a3      	strheq	r3, [r4, #12]
 800bce8:	bf18      	it	ne
 800bcea:	81a3      	strhne	r3, [r4, #12]
 800bcec:	bd10      	pop	{r4, pc}

0800bcee <__sclose>:
 800bcee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcf2:	f000 bebf 	b.w	800ca74 <_close_r>

0800bcf6 <sulp>:
 800bcf6:	b570      	push	{r4, r5, r6, lr}
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	460d      	mov	r5, r1
 800bcfc:	ec45 4b10 	vmov	d0, r4, r5
 800bd00:	4616      	mov	r6, r2
 800bd02:	f002 fd23 	bl	800e74c <__ulp>
 800bd06:	ec51 0b10 	vmov	r0, r1, d0
 800bd0a:	b17e      	cbz	r6, 800bd2c <sulp+0x36>
 800bd0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bd10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	dd09      	ble.n	800bd2c <sulp+0x36>
 800bd18:	051b      	lsls	r3, r3, #20
 800bd1a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bd1e:	2400      	movs	r4, #0
 800bd20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bd24:	4622      	mov	r2, r4
 800bd26:	462b      	mov	r3, r5
 800bd28:	f7f4 fc6e 	bl	8000608 <__aeabi_dmul>
 800bd2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bd30 <_strtod_l>:
 800bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd34:	ed2d 8b02 	vpush	{d8}
 800bd38:	b09d      	sub	sp, #116	; 0x74
 800bd3a:	461f      	mov	r7, r3
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	9318      	str	r3, [sp, #96]	; 0x60
 800bd40:	4ba2      	ldr	r3, [pc, #648]	; (800bfcc <_strtod_l+0x29c>)
 800bd42:	9213      	str	r2, [sp, #76]	; 0x4c
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	9305      	str	r3, [sp, #20]
 800bd48:	4604      	mov	r4, r0
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	4688      	mov	r8, r1
 800bd4e:	f7f4 fa47 	bl	80001e0 <strlen>
 800bd52:	f04f 0a00 	mov.w	sl, #0
 800bd56:	4605      	mov	r5, r0
 800bd58:	f04f 0b00 	mov.w	fp, #0
 800bd5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bd60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd62:	781a      	ldrb	r2, [r3, #0]
 800bd64:	2a2b      	cmp	r2, #43	; 0x2b
 800bd66:	d04e      	beq.n	800be06 <_strtod_l+0xd6>
 800bd68:	d83b      	bhi.n	800bde2 <_strtod_l+0xb2>
 800bd6a:	2a0d      	cmp	r2, #13
 800bd6c:	d834      	bhi.n	800bdd8 <_strtod_l+0xa8>
 800bd6e:	2a08      	cmp	r2, #8
 800bd70:	d834      	bhi.n	800bddc <_strtod_l+0xac>
 800bd72:	2a00      	cmp	r2, #0
 800bd74:	d03e      	beq.n	800bdf4 <_strtod_l+0xc4>
 800bd76:	2300      	movs	r3, #0
 800bd78:	930a      	str	r3, [sp, #40]	; 0x28
 800bd7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bd7c:	7833      	ldrb	r3, [r6, #0]
 800bd7e:	2b30      	cmp	r3, #48	; 0x30
 800bd80:	f040 80b0 	bne.w	800bee4 <_strtod_l+0x1b4>
 800bd84:	7873      	ldrb	r3, [r6, #1]
 800bd86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd8a:	2b58      	cmp	r3, #88	; 0x58
 800bd8c:	d168      	bne.n	800be60 <_strtod_l+0x130>
 800bd8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd90:	9301      	str	r3, [sp, #4]
 800bd92:	ab18      	add	r3, sp, #96	; 0x60
 800bd94:	9702      	str	r7, [sp, #8]
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	4a8d      	ldr	r2, [pc, #564]	; (800bfd0 <_strtod_l+0x2a0>)
 800bd9a:	ab19      	add	r3, sp, #100	; 0x64
 800bd9c:	a917      	add	r1, sp, #92	; 0x5c
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f001 fe1e 	bl	800d9e0 <__gethex>
 800bda4:	f010 0707 	ands.w	r7, r0, #7
 800bda8:	4605      	mov	r5, r0
 800bdaa:	d005      	beq.n	800bdb8 <_strtod_l+0x88>
 800bdac:	2f06      	cmp	r7, #6
 800bdae:	d12c      	bne.n	800be0a <_strtod_l+0xda>
 800bdb0:	3601      	adds	r6, #1
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	9617      	str	r6, [sp, #92]	; 0x5c
 800bdb6:	930a      	str	r3, [sp, #40]	; 0x28
 800bdb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f040 8590 	bne.w	800c8e0 <_strtod_l+0xbb0>
 800bdc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdc2:	b1eb      	cbz	r3, 800be00 <_strtod_l+0xd0>
 800bdc4:	4652      	mov	r2, sl
 800bdc6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bdca:	ec43 2b10 	vmov	d0, r2, r3
 800bdce:	b01d      	add	sp, #116	; 0x74
 800bdd0:	ecbd 8b02 	vpop	{d8}
 800bdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd8:	2a20      	cmp	r2, #32
 800bdda:	d1cc      	bne.n	800bd76 <_strtod_l+0x46>
 800bddc:	3301      	adds	r3, #1
 800bdde:	9317      	str	r3, [sp, #92]	; 0x5c
 800bde0:	e7be      	b.n	800bd60 <_strtod_l+0x30>
 800bde2:	2a2d      	cmp	r2, #45	; 0x2d
 800bde4:	d1c7      	bne.n	800bd76 <_strtod_l+0x46>
 800bde6:	2201      	movs	r2, #1
 800bde8:	920a      	str	r2, [sp, #40]	; 0x28
 800bdea:	1c5a      	adds	r2, r3, #1
 800bdec:	9217      	str	r2, [sp, #92]	; 0x5c
 800bdee:	785b      	ldrb	r3, [r3, #1]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1c2      	bne.n	800bd7a <_strtod_l+0x4a>
 800bdf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bdf6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f040 856e 	bne.w	800c8dc <_strtod_l+0xbac>
 800be00:	4652      	mov	r2, sl
 800be02:	465b      	mov	r3, fp
 800be04:	e7e1      	b.n	800bdca <_strtod_l+0x9a>
 800be06:	2200      	movs	r2, #0
 800be08:	e7ee      	b.n	800bde8 <_strtod_l+0xb8>
 800be0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800be0c:	b13a      	cbz	r2, 800be1e <_strtod_l+0xee>
 800be0e:	2135      	movs	r1, #53	; 0x35
 800be10:	a81a      	add	r0, sp, #104	; 0x68
 800be12:	f002 fda6 	bl	800e962 <__copybits>
 800be16:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be18:	4620      	mov	r0, r4
 800be1a:	f002 f965 	bl	800e0e8 <_Bfree>
 800be1e:	3f01      	subs	r7, #1
 800be20:	2f04      	cmp	r7, #4
 800be22:	d806      	bhi.n	800be32 <_strtod_l+0x102>
 800be24:	e8df f007 	tbb	[pc, r7]
 800be28:	1714030a 	.word	0x1714030a
 800be2c:	0a          	.byte	0x0a
 800be2d:	00          	.byte	0x00
 800be2e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800be32:	0728      	lsls	r0, r5, #28
 800be34:	d5c0      	bpl.n	800bdb8 <_strtod_l+0x88>
 800be36:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800be3a:	e7bd      	b.n	800bdb8 <_strtod_l+0x88>
 800be3c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800be40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800be42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800be4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800be4e:	e7f0      	b.n	800be32 <_strtod_l+0x102>
 800be50:	f8df b180 	ldr.w	fp, [pc, #384]	; 800bfd4 <_strtod_l+0x2a4>
 800be54:	e7ed      	b.n	800be32 <_strtod_l+0x102>
 800be56:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800be5a:	f04f 3aff 	mov.w	sl, #4294967295
 800be5e:	e7e8      	b.n	800be32 <_strtod_l+0x102>
 800be60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be62:	1c5a      	adds	r2, r3, #1
 800be64:	9217      	str	r2, [sp, #92]	; 0x5c
 800be66:	785b      	ldrb	r3, [r3, #1]
 800be68:	2b30      	cmp	r3, #48	; 0x30
 800be6a:	d0f9      	beq.n	800be60 <_strtod_l+0x130>
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d0a3      	beq.n	800bdb8 <_strtod_l+0x88>
 800be70:	2301      	movs	r3, #1
 800be72:	f04f 0900 	mov.w	r9, #0
 800be76:	9304      	str	r3, [sp, #16]
 800be78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be7a:	9308      	str	r3, [sp, #32]
 800be7c:	f8cd 901c 	str.w	r9, [sp, #28]
 800be80:	464f      	mov	r7, r9
 800be82:	220a      	movs	r2, #10
 800be84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800be86:	7806      	ldrb	r6, [r0, #0]
 800be88:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800be8c:	b2d9      	uxtb	r1, r3
 800be8e:	2909      	cmp	r1, #9
 800be90:	d92a      	bls.n	800bee8 <_strtod_l+0x1b8>
 800be92:	9905      	ldr	r1, [sp, #20]
 800be94:	462a      	mov	r2, r5
 800be96:	f002 ff83 	bl	800eda0 <strncmp>
 800be9a:	b398      	cbz	r0, 800bf04 <_strtod_l+0x1d4>
 800be9c:	2000      	movs	r0, #0
 800be9e:	4632      	mov	r2, r6
 800bea0:	463d      	mov	r5, r7
 800bea2:	9005      	str	r0, [sp, #20]
 800bea4:	4603      	mov	r3, r0
 800bea6:	2a65      	cmp	r2, #101	; 0x65
 800bea8:	d001      	beq.n	800beae <_strtod_l+0x17e>
 800beaa:	2a45      	cmp	r2, #69	; 0x45
 800beac:	d118      	bne.n	800bee0 <_strtod_l+0x1b0>
 800beae:	b91d      	cbnz	r5, 800beb8 <_strtod_l+0x188>
 800beb0:	9a04      	ldr	r2, [sp, #16]
 800beb2:	4302      	orrs	r2, r0
 800beb4:	d09e      	beq.n	800bdf4 <_strtod_l+0xc4>
 800beb6:	2500      	movs	r5, #0
 800beb8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800bebc:	f108 0201 	add.w	r2, r8, #1
 800bec0:	9217      	str	r2, [sp, #92]	; 0x5c
 800bec2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bec6:	2a2b      	cmp	r2, #43	; 0x2b
 800bec8:	d075      	beq.n	800bfb6 <_strtod_l+0x286>
 800beca:	2a2d      	cmp	r2, #45	; 0x2d
 800becc:	d07b      	beq.n	800bfc6 <_strtod_l+0x296>
 800bece:	f04f 0c00 	mov.w	ip, #0
 800bed2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bed6:	2909      	cmp	r1, #9
 800bed8:	f240 8082 	bls.w	800bfe0 <_strtod_l+0x2b0>
 800bedc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bee0:	2600      	movs	r6, #0
 800bee2:	e09d      	b.n	800c020 <_strtod_l+0x2f0>
 800bee4:	2300      	movs	r3, #0
 800bee6:	e7c4      	b.n	800be72 <_strtod_l+0x142>
 800bee8:	2f08      	cmp	r7, #8
 800beea:	bfd8      	it	le
 800beec:	9907      	ldrle	r1, [sp, #28]
 800beee:	f100 0001 	add.w	r0, r0, #1
 800bef2:	bfda      	itte	le
 800bef4:	fb02 3301 	mlale	r3, r2, r1, r3
 800bef8:	9307      	strle	r3, [sp, #28]
 800befa:	fb02 3909 	mlagt	r9, r2, r9, r3
 800befe:	3701      	adds	r7, #1
 800bf00:	9017      	str	r0, [sp, #92]	; 0x5c
 800bf02:	e7bf      	b.n	800be84 <_strtod_l+0x154>
 800bf04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf06:	195a      	adds	r2, r3, r5
 800bf08:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf0a:	5d5a      	ldrb	r2, [r3, r5]
 800bf0c:	2f00      	cmp	r7, #0
 800bf0e:	d037      	beq.n	800bf80 <_strtod_l+0x250>
 800bf10:	9005      	str	r0, [sp, #20]
 800bf12:	463d      	mov	r5, r7
 800bf14:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bf18:	2b09      	cmp	r3, #9
 800bf1a:	d912      	bls.n	800bf42 <_strtod_l+0x212>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e7c2      	b.n	800bea6 <_strtod_l+0x176>
 800bf20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf22:	1c5a      	adds	r2, r3, #1
 800bf24:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf26:	785a      	ldrb	r2, [r3, #1]
 800bf28:	3001      	adds	r0, #1
 800bf2a:	2a30      	cmp	r2, #48	; 0x30
 800bf2c:	d0f8      	beq.n	800bf20 <_strtod_l+0x1f0>
 800bf2e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bf32:	2b08      	cmp	r3, #8
 800bf34:	f200 84d9 	bhi.w	800c8ea <_strtod_l+0xbba>
 800bf38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf3a:	9005      	str	r0, [sp, #20]
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	9308      	str	r3, [sp, #32]
 800bf40:	4605      	mov	r5, r0
 800bf42:	3a30      	subs	r2, #48	; 0x30
 800bf44:	f100 0301 	add.w	r3, r0, #1
 800bf48:	d014      	beq.n	800bf74 <_strtod_l+0x244>
 800bf4a:	9905      	ldr	r1, [sp, #20]
 800bf4c:	4419      	add	r1, r3
 800bf4e:	9105      	str	r1, [sp, #20]
 800bf50:	462b      	mov	r3, r5
 800bf52:	eb00 0e05 	add.w	lr, r0, r5
 800bf56:	210a      	movs	r1, #10
 800bf58:	4573      	cmp	r3, lr
 800bf5a:	d113      	bne.n	800bf84 <_strtod_l+0x254>
 800bf5c:	182b      	adds	r3, r5, r0
 800bf5e:	2b08      	cmp	r3, #8
 800bf60:	f105 0501 	add.w	r5, r5, #1
 800bf64:	4405      	add	r5, r0
 800bf66:	dc1c      	bgt.n	800bfa2 <_strtod_l+0x272>
 800bf68:	9907      	ldr	r1, [sp, #28]
 800bf6a:	230a      	movs	r3, #10
 800bf6c:	fb03 2301 	mla	r3, r3, r1, r2
 800bf70:	9307      	str	r3, [sp, #28]
 800bf72:	2300      	movs	r3, #0
 800bf74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bf76:	1c51      	adds	r1, r2, #1
 800bf78:	9117      	str	r1, [sp, #92]	; 0x5c
 800bf7a:	7852      	ldrb	r2, [r2, #1]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	e7c9      	b.n	800bf14 <_strtod_l+0x1e4>
 800bf80:	4638      	mov	r0, r7
 800bf82:	e7d2      	b.n	800bf2a <_strtod_l+0x1fa>
 800bf84:	2b08      	cmp	r3, #8
 800bf86:	dc04      	bgt.n	800bf92 <_strtod_l+0x262>
 800bf88:	9e07      	ldr	r6, [sp, #28]
 800bf8a:	434e      	muls	r6, r1
 800bf8c:	9607      	str	r6, [sp, #28]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	e7e2      	b.n	800bf58 <_strtod_l+0x228>
 800bf92:	f103 0c01 	add.w	ip, r3, #1
 800bf96:	f1bc 0f10 	cmp.w	ip, #16
 800bf9a:	bfd8      	it	le
 800bf9c:	fb01 f909 	mulle.w	r9, r1, r9
 800bfa0:	e7f5      	b.n	800bf8e <_strtod_l+0x25e>
 800bfa2:	2d10      	cmp	r5, #16
 800bfa4:	bfdc      	itt	le
 800bfa6:	230a      	movle	r3, #10
 800bfa8:	fb03 2909 	mlale	r9, r3, r9, r2
 800bfac:	e7e1      	b.n	800bf72 <_strtod_l+0x242>
 800bfae:	2300      	movs	r3, #0
 800bfb0:	9305      	str	r3, [sp, #20]
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e77c      	b.n	800beb0 <_strtod_l+0x180>
 800bfb6:	f04f 0c00 	mov.w	ip, #0
 800bfba:	f108 0202 	add.w	r2, r8, #2
 800bfbe:	9217      	str	r2, [sp, #92]	; 0x5c
 800bfc0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bfc4:	e785      	b.n	800bed2 <_strtod_l+0x1a2>
 800bfc6:	f04f 0c01 	mov.w	ip, #1
 800bfca:	e7f6      	b.n	800bfba <_strtod_l+0x28a>
 800bfcc:	08012268 	.word	0x08012268
 800bfd0:	08012020 	.word	0x08012020
 800bfd4:	7ff00000 	.word	0x7ff00000
 800bfd8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bfda:	1c51      	adds	r1, r2, #1
 800bfdc:	9117      	str	r1, [sp, #92]	; 0x5c
 800bfde:	7852      	ldrb	r2, [r2, #1]
 800bfe0:	2a30      	cmp	r2, #48	; 0x30
 800bfe2:	d0f9      	beq.n	800bfd8 <_strtod_l+0x2a8>
 800bfe4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bfe8:	2908      	cmp	r1, #8
 800bfea:	f63f af79 	bhi.w	800bee0 <_strtod_l+0x1b0>
 800bfee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bff2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bff4:	9206      	str	r2, [sp, #24]
 800bff6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bff8:	1c51      	adds	r1, r2, #1
 800bffa:	9117      	str	r1, [sp, #92]	; 0x5c
 800bffc:	7852      	ldrb	r2, [r2, #1]
 800bffe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c002:	2e09      	cmp	r6, #9
 800c004:	d937      	bls.n	800c076 <_strtod_l+0x346>
 800c006:	9e06      	ldr	r6, [sp, #24]
 800c008:	1b89      	subs	r1, r1, r6
 800c00a:	2908      	cmp	r1, #8
 800c00c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c010:	dc02      	bgt.n	800c018 <_strtod_l+0x2e8>
 800c012:	4576      	cmp	r6, lr
 800c014:	bfa8      	it	ge
 800c016:	4676      	movge	r6, lr
 800c018:	f1bc 0f00 	cmp.w	ip, #0
 800c01c:	d000      	beq.n	800c020 <_strtod_l+0x2f0>
 800c01e:	4276      	negs	r6, r6
 800c020:	2d00      	cmp	r5, #0
 800c022:	d14d      	bne.n	800c0c0 <_strtod_l+0x390>
 800c024:	9904      	ldr	r1, [sp, #16]
 800c026:	4301      	orrs	r1, r0
 800c028:	f47f aec6 	bne.w	800bdb8 <_strtod_l+0x88>
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f47f aee1 	bne.w	800bdf4 <_strtod_l+0xc4>
 800c032:	2a69      	cmp	r2, #105	; 0x69
 800c034:	d027      	beq.n	800c086 <_strtod_l+0x356>
 800c036:	dc24      	bgt.n	800c082 <_strtod_l+0x352>
 800c038:	2a49      	cmp	r2, #73	; 0x49
 800c03a:	d024      	beq.n	800c086 <_strtod_l+0x356>
 800c03c:	2a4e      	cmp	r2, #78	; 0x4e
 800c03e:	f47f aed9 	bne.w	800bdf4 <_strtod_l+0xc4>
 800c042:	499f      	ldr	r1, [pc, #636]	; (800c2c0 <_strtod_l+0x590>)
 800c044:	a817      	add	r0, sp, #92	; 0x5c
 800c046:	f001 ff23 	bl	800de90 <__match>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	f43f aed2 	beq.w	800bdf4 <_strtod_l+0xc4>
 800c050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	2b28      	cmp	r3, #40	; 0x28
 800c056:	d12d      	bne.n	800c0b4 <_strtod_l+0x384>
 800c058:	499a      	ldr	r1, [pc, #616]	; (800c2c4 <_strtod_l+0x594>)
 800c05a:	aa1a      	add	r2, sp, #104	; 0x68
 800c05c:	a817      	add	r0, sp, #92	; 0x5c
 800c05e:	f001 ff2b 	bl	800deb8 <__hexnan>
 800c062:	2805      	cmp	r0, #5
 800c064:	d126      	bne.n	800c0b4 <_strtod_l+0x384>
 800c066:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c068:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c06c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c070:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c074:	e6a0      	b.n	800bdb8 <_strtod_l+0x88>
 800c076:	210a      	movs	r1, #10
 800c078:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c07c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c080:	e7b9      	b.n	800bff6 <_strtod_l+0x2c6>
 800c082:	2a6e      	cmp	r2, #110	; 0x6e
 800c084:	e7db      	b.n	800c03e <_strtod_l+0x30e>
 800c086:	4990      	ldr	r1, [pc, #576]	; (800c2c8 <_strtod_l+0x598>)
 800c088:	a817      	add	r0, sp, #92	; 0x5c
 800c08a:	f001 ff01 	bl	800de90 <__match>
 800c08e:	2800      	cmp	r0, #0
 800c090:	f43f aeb0 	beq.w	800bdf4 <_strtod_l+0xc4>
 800c094:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c096:	498d      	ldr	r1, [pc, #564]	; (800c2cc <_strtod_l+0x59c>)
 800c098:	3b01      	subs	r3, #1
 800c09a:	a817      	add	r0, sp, #92	; 0x5c
 800c09c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c09e:	f001 fef7 	bl	800de90 <__match>
 800c0a2:	b910      	cbnz	r0, 800c0aa <_strtod_l+0x37a>
 800c0a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c0aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c2dc <_strtod_l+0x5ac>
 800c0ae:	f04f 0a00 	mov.w	sl, #0
 800c0b2:	e681      	b.n	800bdb8 <_strtod_l+0x88>
 800c0b4:	4886      	ldr	r0, [pc, #536]	; (800c2d0 <_strtod_l+0x5a0>)
 800c0b6:	f002 fe6b 	bl	800ed90 <nan>
 800c0ba:	ec5b ab10 	vmov	sl, fp, d0
 800c0be:	e67b      	b.n	800bdb8 <_strtod_l+0x88>
 800c0c0:	9b05      	ldr	r3, [sp, #20]
 800c0c2:	9807      	ldr	r0, [sp, #28]
 800c0c4:	1af3      	subs	r3, r6, r3
 800c0c6:	2f00      	cmp	r7, #0
 800c0c8:	bf08      	it	eq
 800c0ca:	462f      	moveq	r7, r5
 800c0cc:	2d10      	cmp	r5, #16
 800c0ce:	9306      	str	r3, [sp, #24]
 800c0d0:	46a8      	mov	r8, r5
 800c0d2:	bfa8      	it	ge
 800c0d4:	f04f 0810 	movge.w	r8, #16
 800c0d8:	f7f4 fa1c 	bl	8000514 <__aeabi_ui2d>
 800c0dc:	2d09      	cmp	r5, #9
 800c0de:	4682      	mov	sl, r0
 800c0e0:	468b      	mov	fp, r1
 800c0e2:	dd13      	ble.n	800c10c <_strtod_l+0x3dc>
 800c0e4:	4b7b      	ldr	r3, [pc, #492]	; (800c2d4 <_strtod_l+0x5a4>)
 800c0e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c0ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c0ee:	f7f4 fa8b 	bl	8000608 <__aeabi_dmul>
 800c0f2:	4682      	mov	sl, r0
 800c0f4:	4648      	mov	r0, r9
 800c0f6:	468b      	mov	fp, r1
 800c0f8:	f7f4 fa0c 	bl	8000514 <__aeabi_ui2d>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	460b      	mov	r3, r1
 800c100:	4650      	mov	r0, sl
 800c102:	4659      	mov	r1, fp
 800c104:	f7f4 f8ca 	bl	800029c <__adddf3>
 800c108:	4682      	mov	sl, r0
 800c10a:	468b      	mov	fp, r1
 800c10c:	2d0f      	cmp	r5, #15
 800c10e:	dc38      	bgt.n	800c182 <_strtod_l+0x452>
 800c110:	9b06      	ldr	r3, [sp, #24]
 800c112:	2b00      	cmp	r3, #0
 800c114:	f43f ae50 	beq.w	800bdb8 <_strtod_l+0x88>
 800c118:	dd24      	ble.n	800c164 <_strtod_l+0x434>
 800c11a:	2b16      	cmp	r3, #22
 800c11c:	dc0b      	bgt.n	800c136 <_strtod_l+0x406>
 800c11e:	496d      	ldr	r1, [pc, #436]	; (800c2d4 <_strtod_l+0x5a4>)
 800c120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c124:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c128:	4652      	mov	r2, sl
 800c12a:	465b      	mov	r3, fp
 800c12c:	f7f4 fa6c 	bl	8000608 <__aeabi_dmul>
 800c130:	4682      	mov	sl, r0
 800c132:	468b      	mov	fp, r1
 800c134:	e640      	b.n	800bdb8 <_strtod_l+0x88>
 800c136:	9a06      	ldr	r2, [sp, #24]
 800c138:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c13c:	4293      	cmp	r3, r2
 800c13e:	db20      	blt.n	800c182 <_strtod_l+0x452>
 800c140:	4c64      	ldr	r4, [pc, #400]	; (800c2d4 <_strtod_l+0x5a4>)
 800c142:	f1c5 050f 	rsb	r5, r5, #15
 800c146:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c14a:	4652      	mov	r2, sl
 800c14c:	465b      	mov	r3, fp
 800c14e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c152:	f7f4 fa59 	bl	8000608 <__aeabi_dmul>
 800c156:	9b06      	ldr	r3, [sp, #24]
 800c158:	1b5d      	subs	r5, r3, r5
 800c15a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c15e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c162:	e7e3      	b.n	800c12c <_strtod_l+0x3fc>
 800c164:	9b06      	ldr	r3, [sp, #24]
 800c166:	3316      	adds	r3, #22
 800c168:	db0b      	blt.n	800c182 <_strtod_l+0x452>
 800c16a:	9b05      	ldr	r3, [sp, #20]
 800c16c:	1b9e      	subs	r6, r3, r6
 800c16e:	4b59      	ldr	r3, [pc, #356]	; (800c2d4 <_strtod_l+0x5a4>)
 800c170:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c174:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c178:	4650      	mov	r0, sl
 800c17a:	4659      	mov	r1, fp
 800c17c:	f7f4 fb6e 	bl	800085c <__aeabi_ddiv>
 800c180:	e7d6      	b.n	800c130 <_strtod_l+0x400>
 800c182:	9b06      	ldr	r3, [sp, #24]
 800c184:	eba5 0808 	sub.w	r8, r5, r8
 800c188:	4498      	add	r8, r3
 800c18a:	f1b8 0f00 	cmp.w	r8, #0
 800c18e:	dd74      	ble.n	800c27a <_strtod_l+0x54a>
 800c190:	f018 030f 	ands.w	r3, r8, #15
 800c194:	d00a      	beq.n	800c1ac <_strtod_l+0x47c>
 800c196:	494f      	ldr	r1, [pc, #316]	; (800c2d4 <_strtod_l+0x5a4>)
 800c198:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c19c:	4652      	mov	r2, sl
 800c19e:	465b      	mov	r3, fp
 800c1a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1a4:	f7f4 fa30 	bl	8000608 <__aeabi_dmul>
 800c1a8:	4682      	mov	sl, r0
 800c1aa:	468b      	mov	fp, r1
 800c1ac:	f038 080f 	bics.w	r8, r8, #15
 800c1b0:	d04f      	beq.n	800c252 <_strtod_l+0x522>
 800c1b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c1b6:	dd22      	ble.n	800c1fe <_strtod_l+0x4ce>
 800c1b8:	2500      	movs	r5, #0
 800c1ba:	462e      	mov	r6, r5
 800c1bc:	9507      	str	r5, [sp, #28]
 800c1be:	9505      	str	r5, [sp, #20]
 800c1c0:	2322      	movs	r3, #34	; 0x22
 800c1c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c2dc <_strtod_l+0x5ac>
 800c1c6:	6023      	str	r3, [r4, #0]
 800c1c8:	f04f 0a00 	mov.w	sl, #0
 800c1cc:	9b07      	ldr	r3, [sp, #28]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f43f adf2 	beq.w	800bdb8 <_strtod_l+0x88>
 800c1d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f001 ff86 	bl	800e0e8 <_Bfree>
 800c1dc:	9905      	ldr	r1, [sp, #20]
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f001 ff82 	bl	800e0e8 <_Bfree>
 800c1e4:	4631      	mov	r1, r6
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f001 ff7e 	bl	800e0e8 <_Bfree>
 800c1ec:	9907      	ldr	r1, [sp, #28]
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f001 ff7a 	bl	800e0e8 <_Bfree>
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f001 ff76 	bl	800e0e8 <_Bfree>
 800c1fc:	e5dc      	b.n	800bdb8 <_strtod_l+0x88>
 800c1fe:	4b36      	ldr	r3, [pc, #216]	; (800c2d8 <_strtod_l+0x5a8>)
 800c200:	9304      	str	r3, [sp, #16]
 800c202:	2300      	movs	r3, #0
 800c204:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c208:	4650      	mov	r0, sl
 800c20a:	4659      	mov	r1, fp
 800c20c:	4699      	mov	r9, r3
 800c20e:	f1b8 0f01 	cmp.w	r8, #1
 800c212:	dc21      	bgt.n	800c258 <_strtod_l+0x528>
 800c214:	b10b      	cbz	r3, 800c21a <_strtod_l+0x4ea>
 800c216:	4682      	mov	sl, r0
 800c218:	468b      	mov	fp, r1
 800c21a:	4b2f      	ldr	r3, [pc, #188]	; (800c2d8 <_strtod_l+0x5a8>)
 800c21c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c220:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c224:	4652      	mov	r2, sl
 800c226:	465b      	mov	r3, fp
 800c228:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c22c:	f7f4 f9ec 	bl	8000608 <__aeabi_dmul>
 800c230:	4b2a      	ldr	r3, [pc, #168]	; (800c2dc <_strtod_l+0x5ac>)
 800c232:	460a      	mov	r2, r1
 800c234:	400b      	ands	r3, r1
 800c236:	492a      	ldr	r1, [pc, #168]	; (800c2e0 <_strtod_l+0x5b0>)
 800c238:	428b      	cmp	r3, r1
 800c23a:	4682      	mov	sl, r0
 800c23c:	d8bc      	bhi.n	800c1b8 <_strtod_l+0x488>
 800c23e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c242:	428b      	cmp	r3, r1
 800c244:	bf86      	itte	hi
 800c246:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c2e4 <_strtod_l+0x5b4>
 800c24a:	f04f 3aff 	movhi.w	sl, #4294967295
 800c24e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c252:	2300      	movs	r3, #0
 800c254:	9304      	str	r3, [sp, #16]
 800c256:	e084      	b.n	800c362 <_strtod_l+0x632>
 800c258:	f018 0f01 	tst.w	r8, #1
 800c25c:	d005      	beq.n	800c26a <_strtod_l+0x53a>
 800c25e:	9b04      	ldr	r3, [sp, #16]
 800c260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c264:	f7f4 f9d0 	bl	8000608 <__aeabi_dmul>
 800c268:	2301      	movs	r3, #1
 800c26a:	9a04      	ldr	r2, [sp, #16]
 800c26c:	3208      	adds	r2, #8
 800c26e:	f109 0901 	add.w	r9, r9, #1
 800c272:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c276:	9204      	str	r2, [sp, #16]
 800c278:	e7c9      	b.n	800c20e <_strtod_l+0x4de>
 800c27a:	d0ea      	beq.n	800c252 <_strtod_l+0x522>
 800c27c:	f1c8 0800 	rsb	r8, r8, #0
 800c280:	f018 020f 	ands.w	r2, r8, #15
 800c284:	d00a      	beq.n	800c29c <_strtod_l+0x56c>
 800c286:	4b13      	ldr	r3, [pc, #76]	; (800c2d4 <_strtod_l+0x5a4>)
 800c288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c28c:	4650      	mov	r0, sl
 800c28e:	4659      	mov	r1, fp
 800c290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c294:	f7f4 fae2 	bl	800085c <__aeabi_ddiv>
 800c298:	4682      	mov	sl, r0
 800c29a:	468b      	mov	fp, r1
 800c29c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c2a0:	d0d7      	beq.n	800c252 <_strtod_l+0x522>
 800c2a2:	f1b8 0f1f 	cmp.w	r8, #31
 800c2a6:	dd1f      	ble.n	800c2e8 <_strtod_l+0x5b8>
 800c2a8:	2500      	movs	r5, #0
 800c2aa:	462e      	mov	r6, r5
 800c2ac:	9507      	str	r5, [sp, #28]
 800c2ae:	9505      	str	r5, [sp, #20]
 800c2b0:	2322      	movs	r3, #34	; 0x22
 800c2b2:	f04f 0a00 	mov.w	sl, #0
 800c2b6:	f04f 0b00 	mov.w	fp, #0
 800c2ba:	6023      	str	r3, [r4, #0]
 800c2bc:	e786      	b.n	800c1cc <_strtod_l+0x49c>
 800c2be:	bf00      	nop
 800c2c0:	08011ff1 	.word	0x08011ff1
 800c2c4:	08012034 	.word	0x08012034
 800c2c8:	08011fe9 	.word	0x08011fe9
 800c2cc:	08012174 	.word	0x08012174
 800c2d0:	08012420 	.word	0x08012420
 800c2d4:	08012300 	.word	0x08012300
 800c2d8:	080122d8 	.word	0x080122d8
 800c2dc:	7ff00000 	.word	0x7ff00000
 800c2e0:	7ca00000 	.word	0x7ca00000
 800c2e4:	7fefffff 	.word	0x7fefffff
 800c2e8:	f018 0310 	ands.w	r3, r8, #16
 800c2ec:	bf18      	it	ne
 800c2ee:	236a      	movne	r3, #106	; 0x6a
 800c2f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c6a0 <_strtod_l+0x970>
 800c2f4:	9304      	str	r3, [sp, #16]
 800c2f6:	4650      	mov	r0, sl
 800c2f8:	4659      	mov	r1, fp
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	f018 0f01 	tst.w	r8, #1
 800c300:	d004      	beq.n	800c30c <_strtod_l+0x5dc>
 800c302:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c306:	f7f4 f97f 	bl	8000608 <__aeabi_dmul>
 800c30a:	2301      	movs	r3, #1
 800c30c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c310:	f109 0908 	add.w	r9, r9, #8
 800c314:	d1f2      	bne.n	800c2fc <_strtod_l+0x5cc>
 800c316:	b10b      	cbz	r3, 800c31c <_strtod_l+0x5ec>
 800c318:	4682      	mov	sl, r0
 800c31a:	468b      	mov	fp, r1
 800c31c:	9b04      	ldr	r3, [sp, #16]
 800c31e:	b1c3      	cbz	r3, 800c352 <_strtod_l+0x622>
 800c320:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c324:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c328:	2b00      	cmp	r3, #0
 800c32a:	4659      	mov	r1, fp
 800c32c:	dd11      	ble.n	800c352 <_strtod_l+0x622>
 800c32e:	2b1f      	cmp	r3, #31
 800c330:	f340 8124 	ble.w	800c57c <_strtod_l+0x84c>
 800c334:	2b34      	cmp	r3, #52	; 0x34
 800c336:	bfde      	ittt	le
 800c338:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c33c:	f04f 33ff 	movle.w	r3, #4294967295
 800c340:	fa03 f202 	lslle.w	r2, r3, r2
 800c344:	f04f 0a00 	mov.w	sl, #0
 800c348:	bfcc      	ite	gt
 800c34a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c34e:	ea02 0b01 	andle.w	fp, r2, r1
 800c352:	2200      	movs	r2, #0
 800c354:	2300      	movs	r3, #0
 800c356:	4650      	mov	r0, sl
 800c358:	4659      	mov	r1, fp
 800c35a:	f7f4 fbbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800c35e:	2800      	cmp	r0, #0
 800c360:	d1a2      	bne.n	800c2a8 <_strtod_l+0x578>
 800c362:	9b07      	ldr	r3, [sp, #28]
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	9908      	ldr	r1, [sp, #32]
 800c368:	462b      	mov	r3, r5
 800c36a:	463a      	mov	r2, r7
 800c36c:	4620      	mov	r0, r4
 800c36e:	f001 ff23 	bl	800e1b8 <__s2b>
 800c372:	9007      	str	r0, [sp, #28]
 800c374:	2800      	cmp	r0, #0
 800c376:	f43f af1f 	beq.w	800c1b8 <_strtod_l+0x488>
 800c37a:	9b05      	ldr	r3, [sp, #20]
 800c37c:	1b9e      	subs	r6, r3, r6
 800c37e:	9b06      	ldr	r3, [sp, #24]
 800c380:	2b00      	cmp	r3, #0
 800c382:	bfb4      	ite	lt
 800c384:	4633      	movlt	r3, r6
 800c386:	2300      	movge	r3, #0
 800c388:	930c      	str	r3, [sp, #48]	; 0x30
 800c38a:	9b06      	ldr	r3, [sp, #24]
 800c38c:	2500      	movs	r5, #0
 800c38e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c392:	9312      	str	r3, [sp, #72]	; 0x48
 800c394:	462e      	mov	r6, r5
 800c396:	9b07      	ldr	r3, [sp, #28]
 800c398:	4620      	mov	r0, r4
 800c39a:	6859      	ldr	r1, [r3, #4]
 800c39c:	f001 fe64 	bl	800e068 <_Balloc>
 800c3a0:	9005      	str	r0, [sp, #20]
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	f43f af0c 	beq.w	800c1c0 <_strtod_l+0x490>
 800c3a8:	9b07      	ldr	r3, [sp, #28]
 800c3aa:	691a      	ldr	r2, [r3, #16]
 800c3ac:	3202      	adds	r2, #2
 800c3ae:	f103 010c 	add.w	r1, r3, #12
 800c3b2:	0092      	lsls	r2, r2, #2
 800c3b4:	300c      	adds	r0, #12
 800c3b6:	f7fe fc96 	bl	800ace6 <memcpy>
 800c3ba:	ec4b ab10 	vmov	d0, sl, fp
 800c3be:	aa1a      	add	r2, sp, #104	; 0x68
 800c3c0:	a919      	add	r1, sp, #100	; 0x64
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	f002 fa3e 	bl	800e844 <__d2b>
 800c3c8:	ec4b ab18 	vmov	d8, sl, fp
 800c3cc:	9018      	str	r0, [sp, #96]	; 0x60
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	f43f aef6 	beq.w	800c1c0 <_strtod_l+0x490>
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f001 ff88 	bl	800e2ec <__i2b>
 800c3dc:	4606      	mov	r6, r0
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	f43f aeee 	beq.w	800c1c0 <_strtod_l+0x490>
 800c3e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c3e6:	9904      	ldr	r1, [sp, #16]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	bfab      	itete	ge
 800c3ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c3ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c3f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c3f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c3f6:	bfac      	ite	ge
 800c3f8:	eb03 0902 	addge.w	r9, r3, r2
 800c3fc:	1ad7      	sublt	r7, r2, r3
 800c3fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c400:	eba3 0801 	sub.w	r8, r3, r1
 800c404:	4490      	add	r8, r2
 800c406:	4ba1      	ldr	r3, [pc, #644]	; (800c68c <_strtod_l+0x95c>)
 800c408:	f108 38ff 	add.w	r8, r8, #4294967295
 800c40c:	4598      	cmp	r8, r3
 800c40e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c412:	f280 80c7 	bge.w	800c5a4 <_strtod_l+0x874>
 800c416:	eba3 0308 	sub.w	r3, r3, r8
 800c41a:	2b1f      	cmp	r3, #31
 800c41c:	eba2 0203 	sub.w	r2, r2, r3
 800c420:	f04f 0101 	mov.w	r1, #1
 800c424:	f300 80b1 	bgt.w	800c58a <_strtod_l+0x85a>
 800c428:	fa01 f303 	lsl.w	r3, r1, r3
 800c42c:	930d      	str	r3, [sp, #52]	; 0x34
 800c42e:	2300      	movs	r3, #0
 800c430:	9308      	str	r3, [sp, #32]
 800c432:	eb09 0802 	add.w	r8, r9, r2
 800c436:	9b04      	ldr	r3, [sp, #16]
 800c438:	45c1      	cmp	r9, r8
 800c43a:	4417      	add	r7, r2
 800c43c:	441f      	add	r7, r3
 800c43e:	464b      	mov	r3, r9
 800c440:	bfa8      	it	ge
 800c442:	4643      	movge	r3, r8
 800c444:	42bb      	cmp	r3, r7
 800c446:	bfa8      	it	ge
 800c448:	463b      	movge	r3, r7
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	bfc2      	ittt	gt
 800c44e:	eba8 0803 	subgt.w	r8, r8, r3
 800c452:	1aff      	subgt	r7, r7, r3
 800c454:	eba9 0903 	subgt.w	r9, r9, r3
 800c458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	dd17      	ble.n	800c48e <_strtod_l+0x75e>
 800c45e:	4631      	mov	r1, r6
 800c460:	461a      	mov	r2, r3
 800c462:	4620      	mov	r0, r4
 800c464:	f002 f802 	bl	800e46c <__pow5mult>
 800c468:	4606      	mov	r6, r0
 800c46a:	2800      	cmp	r0, #0
 800c46c:	f43f aea8 	beq.w	800c1c0 <_strtod_l+0x490>
 800c470:	4601      	mov	r1, r0
 800c472:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c474:	4620      	mov	r0, r4
 800c476:	f001 ff4f 	bl	800e318 <__multiply>
 800c47a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c47c:	2800      	cmp	r0, #0
 800c47e:	f43f ae9f 	beq.w	800c1c0 <_strtod_l+0x490>
 800c482:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c484:	4620      	mov	r0, r4
 800c486:	f001 fe2f 	bl	800e0e8 <_Bfree>
 800c48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c48c:	9318      	str	r3, [sp, #96]	; 0x60
 800c48e:	f1b8 0f00 	cmp.w	r8, #0
 800c492:	f300 808c 	bgt.w	800c5ae <_strtod_l+0x87e>
 800c496:	9b06      	ldr	r3, [sp, #24]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	dd08      	ble.n	800c4ae <_strtod_l+0x77e>
 800c49c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c49e:	9905      	ldr	r1, [sp, #20]
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	f001 ffe3 	bl	800e46c <__pow5mult>
 800c4a6:	9005      	str	r0, [sp, #20]
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	f43f ae89 	beq.w	800c1c0 <_strtod_l+0x490>
 800c4ae:	2f00      	cmp	r7, #0
 800c4b0:	dd08      	ble.n	800c4c4 <_strtod_l+0x794>
 800c4b2:	9905      	ldr	r1, [sp, #20]
 800c4b4:	463a      	mov	r2, r7
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f002 f832 	bl	800e520 <__lshift>
 800c4bc:	9005      	str	r0, [sp, #20]
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	f43f ae7e 	beq.w	800c1c0 <_strtod_l+0x490>
 800c4c4:	f1b9 0f00 	cmp.w	r9, #0
 800c4c8:	dd08      	ble.n	800c4dc <_strtod_l+0x7ac>
 800c4ca:	4631      	mov	r1, r6
 800c4cc:	464a      	mov	r2, r9
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f002 f826 	bl	800e520 <__lshift>
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	f43f ae72 	beq.w	800c1c0 <_strtod_l+0x490>
 800c4dc:	9a05      	ldr	r2, [sp, #20]
 800c4de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f002 f8a9 	bl	800e638 <__mdiff>
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	f43f ae69 	beq.w	800c1c0 <_strtod_l+0x490>
 800c4ee:	68c3      	ldr	r3, [r0, #12]
 800c4f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	60c3      	str	r3, [r0, #12]
 800c4f6:	4631      	mov	r1, r6
 800c4f8:	f002 f882 	bl	800e600 <__mcmp>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	da60      	bge.n	800c5c2 <_strtod_l+0x892>
 800c500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c502:	ea53 030a 	orrs.w	r3, r3, sl
 800c506:	f040 8082 	bne.w	800c60e <_strtod_l+0x8de>
 800c50a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d17d      	bne.n	800c60e <_strtod_l+0x8de>
 800c512:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c516:	0d1b      	lsrs	r3, r3, #20
 800c518:	051b      	lsls	r3, r3, #20
 800c51a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c51e:	d976      	bls.n	800c60e <_strtod_l+0x8de>
 800c520:	696b      	ldr	r3, [r5, #20]
 800c522:	b913      	cbnz	r3, 800c52a <_strtod_l+0x7fa>
 800c524:	692b      	ldr	r3, [r5, #16]
 800c526:	2b01      	cmp	r3, #1
 800c528:	dd71      	ble.n	800c60e <_strtod_l+0x8de>
 800c52a:	4629      	mov	r1, r5
 800c52c:	2201      	movs	r2, #1
 800c52e:	4620      	mov	r0, r4
 800c530:	f001 fff6 	bl	800e520 <__lshift>
 800c534:	4631      	mov	r1, r6
 800c536:	4605      	mov	r5, r0
 800c538:	f002 f862 	bl	800e600 <__mcmp>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	dd66      	ble.n	800c60e <_strtod_l+0x8de>
 800c540:	9904      	ldr	r1, [sp, #16]
 800c542:	4a53      	ldr	r2, [pc, #332]	; (800c690 <_strtod_l+0x960>)
 800c544:	465b      	mov	r3, fp
 800c546:	2900      	cmp	r1, #0
 800c548:	f000 8081 	beq.w	800c64e <_strtod_l+0x91e>
 800c54c:	ea02 010b 	and.w	r1, r2, fp
 800c550:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c554:	dc7b      	bgt.n	800c64e <_strtod_l+0x91e>
 800c556:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c55a:	f77f aea9 	ble.w	800c2b0 <_strtod_l+0x580>
 800c55e:	4b4d      	ldr	r3, [pc, #308]	; (800c694 <_strtod_l+0x964>)
 800c560:	4650      	mov	r0, sl
 800c562:	4659      	mov	r1, fp
 800c564:	2200      	movs	r2, #0
 800c566:	f7f4 f84f 	bl	8000608 <__aeabi_dmul>
 800c56a:	460b      	mov	r3, r1
 800c56c:	4303      	orrs	r3, r0
 800c56e:	bf08      	it	eq
 800c570:	2322      	moveq	r3, #34	; 0x22
 800c572:	4682      	mov	sl, r0
 800c574:	468b      	mov	fp, r1
 800c576:	bf08      	it	eq
 800c578:	6023      	streq	r3, [r4, #0]
 800c57a:	e62b      	b.n	800c1d4 <_strtod_l+0x4a4>
 800c57c:	f04f 32ff 	mov.w	r2, #4294967295
 800c580:	fa02 f303 	lsl.w	r3, r2, r3
 800c584:	ea03 0a0a 	and.w	sl, r3, sl
 800c588:	e6e3      	b.n	800c352 <_strtod_l+0x622>
 800c58a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c58e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c592:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c596:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c59a:	fa01 f308 	lsl.w	r3, r1, r8
 800c59e:	9308      	str	r3, [sp, #32]
 800c5a0:	910d      	str	r1, [sp, #52]	; 0x34
 800c5a2:	e746      	b.n	800c432 <_strtod_l+0x702>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	9308      	str	r3, [sp, #32]
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	930d      	str	r3, [sp, #52]	; 0x34
 800c5ac:	e741      	b.n	800c432 <_strtod_l+0x702>
 800c5ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c5b0:	4642      	mov	r2, r8
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f001 ffb4 	bl	800e520 <__lshift>
 800c5b8:	9018      	str	r0, [sp, #96]	; 0x60
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	f47f af6b 	bne.w	800c496 <_strtod_l+0x766>
 800c5c0:	e5fe      	b.n	800c1c0 <_strtod_l+0x490>
 800c5c2:	465f      	mov	r7, fp
 800c5c4:	d16e      	bne.n	800c6a4 <_strtod_l+0x974>
 800c5c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c5c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5cc:	b342      	cbz	r2, 800c620 <_strtod_l+0x8f0>
 800c5ce:	4a32      	ldr	r2, [pc, #200]	; (800c698 <_strtod_l+0x968>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d128      	bne.n	800c626 <_strtod_l+0x8f6>
 800c5d4:	9b04      	ldr	r3, [sp, #16]
 800c5d6:	4651      	mov	r1, sl
 800c5d8:	b1eb      	cbz	r3, 800c616 <_strtod_l+0x8e6>
 800c5da:	4b2d      	ldr	r3, [pc, #180]	; (800c690 <_strtod_l+0x960>)
 800c5dc:	403b      	ands	r3, r7
 800c5de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5e6:	d819      	bhi.n	800c61c <_strtod_l+0x8ec>
 800c5e8:	0d1b      	lsrs	r3, r3, #20
 800c5ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f2:	4299      	cmp	r1, r3
 800c5f4:	d117      	bne.n	800c626 <_strtod_l+0x8f6>
 800c5f6:	4b29      	ldr	r3, [pc, #164]	; (800c69c <_strtod_l+0x96c>)
 800c5f8:	429f      	cmp	r7, r3
 800c5fa:	d102      	bne.n	800c602 <_strtod_l+0x8d2>
 800c5fc:	3101      	adds	r1, #1
 800c5fe:	f43f addf 	beq.w	800c1c0 <_strtod_l+0x490>
 800c602:	4b23      	ldr	r3, [pc, #140]	; (800c690 <_strtod_l+0x960>)
 800c604:	403b      	ands	r3, r7
 800c606:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c60a:	f04f 0a00 	mov.w	sl, #0
 800c60e:	9b04      	ldr	r3, [sp, #16]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1a4      	bne.n	800c55e <_strtod_l+0x82e>
 800c614:	e5de      	b.n	800c1d4 <_strtod_l+0x4a4>
 800c616:	f04f 33ff 	mov.w	r3, #4294967295
 800c61a:	e7ea      	b.n	800c5f2 <_strtod_l+0x8c2>
 800c61c:	4613      	mov	r3, r2
 800c61e:	e7e8      	b.n	800c5f2 <_strtod_l+0x8c2>
 800c620:	ea53 030a 	orrs.w	r3, r3, sl
 800c624:	d08c      	beq.n	800c540 <_strtod_l+0x810>
 800c626:	9b08      	ldr	r3, [sp, #32]
 800c628:	b1db      	cbz	r3, 800c662 <_strtod_l+0x932>
 800c62a:	423b      	tst	r3, r7
 800c62c:	d0ef      	beq.n	800c60e <_strtod_l+0x8de>
 800c62e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c630:	9a04      	ldr	r2, [sp, #16]
 800c632:	4650      	mov	r0, sl
 800c634:	4659      	mov	r1, fp
 800c636:	b1c3      	cbz	r3, 800c66a <_strtod_l+0x93a>
 800c638:	f7ff fb5d 	bl	800bcf6 <sulp>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	ec51 0b18 	vmov	r0, r1, d8
 800c644:	f7f3 fe2a 	bl	800029c <__adddf3>
 800c648:	4682      	mov	sl, r0
 800c64a:	468b      	mov	fp, r1
 800c64c:	e7df      	b.n	800c60e <_strtod_l+0x8de>
 800c64e:	4013      	ands	r3, r2
 800c650:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c654:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c658:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c65c:	f04f 3aff 	mov.w	sl, #4294967295
 800c660:	e7d5      	b.n	800c60e <_strtod_l+0x8de>
 800c662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c664:	ea13 0f0a 	tst.w	r3, sl
 800c668:	e7e0      	b.n	800c62c <_strtod_l+0x8fc>
 800c66a:	f7ff fb44 	bl	800bcf6 <sulp>
 800c66e:	4602      	mov	r2, r0
 800c670:	460b      	mov	r3, r1
 800c672:	ec51 0b18 	vmov	r0, r1, d8
 800c676:	f7f3 fe0f 	bl	8000298 <__aeabi_dsub>
 800c67a:	2200      	movs	r2, #0
 800c67c:	2300      	movs	r3, #0
 800c67e:	4682      	mov	sl, r0
 800c680:	468b      	mov	fp, r1
 800c682:	f7f4 fa29 	bl	8000ad8 <__aeabi_dcmpeq>
 800c686:	2800      	cmp	r0, #0
 800c688:	d0c1      	beq.n	800c60e <_strtod_l+0x8de>
 800c68a:	e611      	b.n	800c2b0 <_strtod_l+0x580>
 800c68c:	fffffc02 	.word	0xfffffc02
 800c690:	7ff00000 	.word	0x7ff00000
 800c694:	39500000 	.word	0x39500000
 800c698:	000fffff 	.word	0x000fffff
 800c69c:	7fefffff 	.word	0x7fefffff
 800c6a0:	08012048 	.word	0x08012048
 800c6a4:	4631      	mov	r1, r6
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	f002 f928 	bl	800e8fc <__ratio>
 800c6ac:	ec59 8b10 	vmov	r8, r9, d0
 800c6b0:	ee10 0a10 	vmov	r0, s0
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c6ba:	4649      	mov	r1, r9
 800c6bc:	f7f4 fa20 	bl	8000b00 <__aeabi_dcmple>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	d07a      	beq.n	800c7ba <_strtod_l+0xa8a>
 800c6c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d04a      	beq.n	800c760 <_strtod_l+0xa30>
 800c6ca:	4b95      	ldr	r3, [pc, #596]	; (800c920 <_strtod_l+0xbf0>)
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c6d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c920 <_strtod_l+0xbf0>
 800c6d6:	f04f 0800 	mov.w	r8, #0
 800c6da:	4b92      	ldr	r3, [pc, #584]	; (800c924 <_strtod_l+0xbf4>)
 800c6dc:	403b      	ands	r3, r7
 800c6de:	930d      	str	r3, [sp, #52]	; 0x34
 800c6e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6e2:	4b91      	ldr	r3, [pc, #580]	; (800c928 <_strtod_l+0xbf8>)
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	f040 80b0 	bne.w	800c84a <_strtod_l+0xb1a>
 800c6ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c6ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c6f2:	ec4b ab10 	vmov	d0, sl, fp
 800c6f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c6fa:	f002 f827 	bl	800e74c <__ulp>
 800c6fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c702:	ec53 2b10 	vmov	r2, r3, d0
 800c706:	f7f3 ff7f 	bl	8000608 <__aeabi_dmul>
 800c70a:	4652      	mov	r2, sl
 800c70c:	465b      	mov	r3, fp
 800c70e:	f7f3 fdc5 	bl	800029c <__adddf3>
 800c712:	460b      	mov	r3, r1
 800c714:	4983      	ldr	r1, [pc, #524]	; (800c924 <_strtod_l+0xbf4>)
 800c716:	4a85      	ldr	r2, [pc, #532]	; (800c92c <_strtod_l+0xbfc>)
 800c718:	4019      	ands	r1, r3
 800c71a:	4291      	cmp	r1, r2
 800c71c:	4682      	mov	sl, r0
 800c71e:	d960      	bls.n	800c7e2 <_strtod_l+0xab2>
 800c720:	ee18 3a90 	vmov	r3, s17
 800c724:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c728:	4293      	cmp	r3, r2
 800c72a:	d104      	bne.n	800c736 <_strtod_l+0xa06>
 800c72c:	ee18 3a10 	vmov	r3, s16
 800c730:	3301      	adds	r3, #1
 800c732:	f43f ad45 	beq.w	800c1c0 <_strtod_l+0x490>
 800c736:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c938 <_strtod_l+0xc08>
 800c73a:	f04f 3aff 	mov.w	sl, #4294967295
 800c73e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c740:	4620      	mov	r0, r4
 800c742:	f001 fcd1 	bl	800e0e8 <_Bfree>
 800c746:	9905      	ldr	r1, [sp, #20]
 800c748:	4620      	mov	r0, r4
 800c74a:	f001 fccd 	bl	800e0e8 <_Bfree>
 800c74e:	4631      	mov	r1, r6
 800c750:	4620      	mov	r0, r4
 800c752:	f001 fcc9 	bl	800e0e8 <_Bfree>
 800c756:	4629      	mov	r1, r5
 800c758:	4620      	mov	r0, r4
 800c75a:	f001 fcc5 	bl	800e0e8 <_Bfree>
 800c75e:	e61a      	b.n	800c396 <_strtod_l+0x666>
 800c760:	f1ba 0f00 	cmp.w	sl, #0
 800c764:	d11b      	bne.n	800c79e <_strtod_l+0xa6e>
 800c766:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c76a:	b9f3      	cbnz	r3, 800c7aa <_strtod_l+0xa7a>
 800c76c:	4b6c      	ldr	r3, [pc, #432]	; (800c920 <_strtod_l+0xbf0>)
 800c76e:	2200      	movs	r2, #0
 800c770:	4640      	mov	r0, r8
 800c772:	4649      	mov	r1, r9
 800c774:	f7f4 f9ba 	bl	8000aec <__aeabi_dcmplt>
 800c778:	b9d0      	cbnz	r0, 800c7b0 <_strtod_l+0xa80>
 800c77a:	4640      	mov	r0, r8
 800c77c:	4649      	mov	r1, r9
 800c77e:	4b6c      	ldr	r3, [pc, #432]	; (800c930 <_strtod_l+0xc00>)
 800c780:	2200      	movs	r2, #0
 800c782:	f7f3 ff41 	bl	8000608 <__aeabi_dmul>
 800c786:	4680      	mov	r8, r0
 800c788:	4689      	mov	r9, r1
 800c78a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c78e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c792:	9315      	str	r3, [sp, #84]	; 0x54
 800c794:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c798:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c79c:	e79d      	b.n	800c6da <_strtod_l+0x9aa>
 800c79e:	f1ba 0f01 	cmp.w	sl, #1
 800c7a2:	d102      	bne.n	800c7aa <_strtod_l+0xa7a>
 800c7a4:	2f00      	cmp	r7, #0
 800c7a6:	f43f ad83 	beq.w	800c2b0 <_strtod_l+0x580>
 800c7aa:	4b62      	ldr	r3, [pc, #392]	; (800c934 <_strtod_l+0xc04>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	e78e      	b.n	800c6ce <_strtod_l+0x99e>
 800c7b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c930 <_strtod_l+0xc00>
 800c7b4:	f04f 0800 	mov.w	r8, #0
 800c7b8:	e7e7      	b.n	800c78a <_strtod_l+0xa5a>
 800c7ba:	4b5d      	ldr	r3, [pc, #372]	; (800c930 <_strtod_l+0xc00>)
 800c7bc:	4640      	mov	r0, r8
 800c7be:	4649      	mov	r1, r9
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f7f3 ff21 	bl	8000608 <__aeabi_dmul>
 800c7c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7c8:	4680      	mov	r8, r0
 800c7ca:	4689      	mov	r9, r1
 800c7cc:	b933      	cbnz	r3, 800c7dc <_strtod_l+0xaac>
 800c7ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7d2:	900e      	str	r0, [sp, #56]	; 0x38
 800c7d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c7da:	e7dd      	b.n	800c798 <_strtod_l+0xa68>
 800c7dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c7e0:	e7f9      	b.n	800c7d6 <_strtod_l+0xaa6>
 800c7e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c7e6:	9b04      	ldr	r3, [sp, #16]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1a8      	bne.n	800c73e <_strtod_l+0xa0e>
 800c7ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c7f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7f2:	0d1b      	lsrs	r3, r3, #20
 800c7f4:	051b      	lsls	r3, r3, #20
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d1a1      	bne.n	800c73e <_strtod_l+0xa0e>
 800c7fa:	4640      	mov	r0, r8
 800c7fc:	4649      	mov	r1, r9
 800c7fe:	f7f4 fa63 	bl	8000cc8 <__aeabi_d2lz>
 800c802:	f7f3 fed3 	bl	80005ac <__aeabi_l2d>
 800c806:	4602      	mov	r2, r0
 800c808:	460b      	mov	r3, r1
 800c80a:	4640      	mov	r0, r8
 800c80c:	4649      	mov	r1, r9
 800c80e:	f7f3 fd43 	bl	8000298 <__aeabi_dsub>
 800c812:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c814:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c818:	ea43 030a 	orr.w	r3, r3, sl
 800c81c:	4313      	orrs	r3, r2
 800c81e:	4680      	mov	r8, r0
 800c820:	4689      	mov	r9, r1
 800c822:	d055      	beq.n	800c8d0 <_strtod_l+0xba0>
 800c824:	a336      	add	r3, pc, #216	; (adr r3, 800c900 <_strtod_l+0xbd0>)
 800c826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82a:	f7f4 f95f 	bl	8000aec <__aeabi_dcmplt>
 800c82e:	2800      	cmp	r0, #0
 800c830:	f47f acd0 	bne.w	800c1d4 <_strtod_l+0x4a4>
 800c834:	a334      	add	r3, pc, #208	; (adr r3, 800c908 <_strtod_l+0xbd8>)
 800c836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83a:	4640      	mov	r0, r8
 800c83c:	4649      	mov	r1, r9
 800c83e:	f7f4 f973 	bl	8000b28 <__aeabi_dcmpgt>
 800c842:	2800      	cmp	r0, #0
 800c844:	f43f af7b 	beq.w	800c73e <_strtod_l+0xa0e>
 800c848:	e4c4      	b.n	800c1d4 <_strtod_l+0x4a4>
 800c84a:	9b04      	ldr	r3, [sp, #16]
 800c84c:	b333      	cbz	r3, 800c89c <_strtod_l+0xb6c>
 800c84e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c850:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c854:	d822      	bhi.n	800c89c <_strtod_l+0xb6c>
 800c856:	a32e      	add	r3, pc, #184	; (adr r3, 800c910 <_strtod_l+0xbe0>)
 800c858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85c:	4640      	mov	r0, r8
 800c85e:	4649      	mov	r1, r9
 800c860:	f7f4 f94e 	bl	8000b00 <__aeabi_dcmple>
 800c864:	b1a0      	cbz	r0, 800c890 <_strtod_l+0xb60>
 800c866:	4649      	mov	r1, r9
 800c868:	4640      	mov	r0, r8
 800c86a:	f7f4 f9a5 	bl	8000bb8 <__aeabi_d2uiz>
 800c86e:	2801      	cmp	r0, #1
 800c870:	bf38      	it	cc
 800c872:	2001      	movcc	r0, #1
 800c874:	f7f3 fe4e 	bl	8000514 <__aeabi_ui2d>
 800c878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c87a:	4680      	mov	r8, r0
 800c87c:	4689      	mov	r9, r1
 800c87e:	bb23      	cbnz	r3, 800c8ca <_strtod_l+0xb9a>
 800c880:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c884:	9010      	str	r0, [sp, #64]	; 0x40
 800c886:	9311      	str	r3, [sp, #68]	; 0x44
 800c888:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c88c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c892:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c894:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c898:	1a9b      	subs	r3, r3, r2
 800c89a:	9309      	str	r3, [sp, #36]	; 0x24
 800c89c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8a0:	eeb0 0a48 	vmov.f32	s0, s16
 800c8a4:	eef0 0a68 	vmov.f32	s1, s17
 800c8a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c8ac:	f001 ff4e 	bl	800e74c <__ulp>
 800c8b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8b4:	ec53 2b10 	vmov	r2, r3, d0
 800c8b8:	f7f3 fea6 	bl	8000608 <__aeabi_dmul>
 800c8bc:	ec53 2b18 	vmov	r2, r3, d8
 800c8c0:	f7f3 fcec 	bl	800029c <__adddf3>
 800c8c4:	4682      	mov	sl, r0
 800c8c6:	468b      	mov	fp, r1
 800c8c8:	e78d      	b.n	800c7e6 <_strtod_l+0xab6>
 800c8ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c8ce:	e7db      	b.n	800c888 <_strtod_l+0xb58>
 800c8d0:	a311      	add	r3, pc, #68	; (adr r3, 800c918 <_strtod_l+0xbe8>)
 800c8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d6:	f7f4 f909 	bl	8000aec <__aeabi_dcmplt>
 800c8da:	e7b2      	b.n	800c842 <_strtod_l+0xb12>
 800c8dc:	2300      	movs	r3, #0
 800c8de:	930a      	str	r3, [sp, #40]	; 0x28
 800c8e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c8e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8e4:	6013      	str	r3, [r2, #0]
 800c8e6:	f7ff ba6b 	b.w	800bdc0 <_strtod_l+0x90>
 800c8ea:	2a65      	cmp	r2, #101	; 0x65
 800c8ec:	f43f ab5f 	beq.w	800bfae <_strtod_l+0x27e>
 800c8f0:	2a45      	cmp	r2, #69	; 0x45
 800c8f2:	f43f ab5c 	beq.w	800bfae <_strtod_l+0x27e>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	f7ff bb94 	b.w	800c024 <_strtod_l+0x2f4>
 800c8fc:	f3af 8000 	nop.w
 800c900:	94a03595 	.word	0x94a03595
 800c904:	3fdfffff 	.word	0x3fdfffff
 800c908:	35afe535 	.word	0x35afe535
 800c90c:	3fe00000 	.word	0x3fe00000
 800c910:	ffc00000 	.word	0xffc00000
 800c914:	41dfffff 	.word	0x41dfffff
 800c918:	94a03595 	.word	0x94a03595
 800c91c:	3fcfffff 	.word	0x3fcfffff
 800c920:	3ff00000 	.word	0x3ff00000
 800c924:	7ff00000 	.word	0x7ff00000
 800c928:	7fe00000 	.word	0x7fe00000
 800c92c:	7c9fffff 	.word	0x7c9fffff
 800c930:	3fe00000 	.word	0x3fe00000
 800c934:	bff00000 	.word	0xbff00000
 800c938:	7fefffff 	.word	0x7fefffff

0800c93c <_strtod_r>:
 800c93c:	4b01      	ldr	r3, [pc, #4]	; (800c944 <_strtod_r+0x8>)
 800c93e:	f7ff b9f7 	b.w	800bd30 <_strtod_l>
 800c942:	bf00      	nop
 800c944:	200000a0 	.word	0x200000a0

0800c948 <_strtol_l.constprop.0>:
 800c948:	2b01      	cmp	r3, #1
 800c94a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c94e:	d001      	beq.n	800c954 <_strtol_l.constprop.0+0xc>
 800c950:	2b24      	cmp	r3, #36	; 0x24
 800c952:	d906      	bls.n	800c962 <_strtol_l.constprop.0+0x1a>
 800c954:	f7fe f8a4 	bl	800aaa0 <__errno>
 800c958:	2316      	movs	r3, #22
 800c95a:	6003      	str	r3, [r0, #0]
 800c95c:	2000      	movs	r0, #0
 800c95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c962:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ca48 <_strtol_l.constprop.0+0x100>
 800c966:	460d      	mov	r5, r1
 800c968:	462e      	mov	r6, r5
 800c96a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c96e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c972:	f017 0708 	ands.w	r7, r7, #8
 800c976:	d1f7      	bne.n	800c968 <_strtol_l.constprop.0+0x20>
 800c978:	2c2d      	cmp	r4, #45	; 0x2d
 800c97a:	d132      	bne.n	800c9e2 <_strtol_l.constprop.0+0x9a>
 800c97c:	782c      	ldrb	r4, [r5, #0]
 800c97e:	2701      	movs	r7, #1
 800c980:	1cb5      	adds	r5, r6, #2
 800c982:	2b00      	cmp	r3, #0
 800c984:	d05b      	beq.n	800ca3e <_strtol_l.constprop.0+0xf6>
 800c986:	2b10      	cmp	r3, #16
 800c988:	d109      	bne.n	800c99e <_strtol_l.constprop.0+0x56>
 800c98a:	2c30      	cmp	r4, #48	; 0x30
 800c98c:	d107      	bne.n	800c99e <_strtol_l.constprop.0+0x56>
 800c98e:	782c      	ldrb	r4, [r5, #0]
 800c990:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c994:	2c58      	cmp	r4, #88	; 0x58
 800c996:	d14d      	bne.n	800ca34 <_strtol_l.constprop.0+0xec>
 800c998:	786c      	ldrb	r4, [r5, #1]
 800c99a:	2310      	movs	r3, #16
 800c99c:	3502      	adds	r5, #2
 800c99e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c9a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c9a6:	f04f 0c00 	mov.w	ip, #0
 800c9aa:	fbb8 f9f3 	udiv	r9, r8, r3
 800c9ae:	4666      	mov	r6, ip
 800c9b0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c9b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c9b8:	f1be 0f09 	cmp.w	lr, #9
 800c9bc:	d816      	bhi.n	800c9ec <_strtol_l.constprop.0+0xa4>
 800c9be:	4674      	mov	r4, lr
 800c9c0:	42a3      	cmp	r3, r4
 800c9c2:	dd24      	ble.n	800ca0e <_strtol_l.constprop.0+0xc6>
 800c9c4:	f1bc 0f00 	cmp.w	ip, #0
 800c9c8:	db1e      	blt.n	800ca08 <_strtol_l.constprop.0+0xc0>
 800c9ca:	45b1      	cmp	r9, r6
 800c9cc:	d31c      	bcc.n	800ca08 <_strtol_l.constprop.0+0xc0>
 800c9ce:	d101      	bne.n	800c9d4 <_strtol_l.constprop.0+0x8c>
 800c9d0:	45a2      	cmp	sl, r4
 800c9d2:	db19      	blt.n	800ca08 <_strtol_l.constprop.0+0xc0>
 800c9d4:	fb06 4603 	mla	r6, r6, r3, r4
 800c9d8:	f04f 0c01 	mov.w	ip, #1
 800c9dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9e0:	e7e8      	b.n	800c9b4 <_strtol_l.constprop.0+0x6c>
 800c9e2:	2c2b      	cmp	r4, #43	; 0x2b
 800c9e4:	bf04      	itt	eq
 800c9e6:	782c      	ldrbeq	r4, [r5, #0]
 800c9e8:	1cb5      	addeq	r5, r6, #2
 800c9ea:	e7ca      	b.n	800c982 <_strtol_l.constprop.0+0x3a>
 800c9ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c9f0:	f1be 0f19 	cmp.w	lr, #25
 800c9f4:	d801      	bhi.n	800c9fa <_strtol_l.constprop.0+0xb2>
 800c9f6:	3c37      	subs	r4, #55	; 0x37
 800c9f8:	e7e2      	b.n	800c9c0 <_strtol_l.constprop.0+0x78>
 800c9fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c9fe:	f1be 0f19 	cmp.w	lr, #25
 800ca02:	d804      	bhi.n	800ca0e <_strtol_l.constprop.0+0xc6>
 800ca04:	3c57      	subs	r4, #87	; 0x57
 800ca06:	e7db      	b.n	800c9c0 <_strtol_l.constprop.0+0x78>
 800ca08:	f04f 3cff 	mov.w	ip, #4294967295
 800ca0c:	e7e6      	b.n	800c9dc <_strtol_l.constprop.0+0x94>
 800ca0e:	f1bc 0f00 	cmp.w	ip, #0
 800ca12:	da05      	bge.n	800ca20 <_strtol_l.constprop.0+0xd8>
 800ca14:	2322      	movs	r3, #34	; 0x22
 800ca16:	6003      	str	r3, [r0, #0]
 800ca18:	4646      	mov	r6, r8
 800ca1a:	b942      	cbnz	r2, 800ca2e <_strtol_l.constprop.0+0xe6>
 800ca1c:	4630      	mov	r0, r6
 800ca1e:	e79e      	b.n	800c95e <_strtol_l.constprop.0+0x16>
 800ca20:	b107      	cbz	r7, 800ca24 <_strtol_l.constprop.0+0xdc>
 800ca22:	4276      	negs	r6, r6
 800ca24:	2a00      	cmp	r2, #0
 800ca26:	d0f9      	beq.n	800ca1c <_strtol_l.constprop.0+0xd4>
 800ca28:	f1bc 0f00 	cmp.w	ip, #0
 800ca2c:	d000      	beq.n	800ca30 <_strtol_l.constprop.0+0xe8>
 800ca2e:	1e69      	subs	r1, r5, #1
 800ca30:	6011      	str	r1, [r2, #0]
 800ca32:	e7f3      	b.n	800ca1c <_strtol_l.constprop.0+0xd4>
 800ca34:	2430      	movs	r4, #48	; 0x30
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1b1      	bne.n	800c99e <_strtol_l.constprop.0+0x56>
 800ca3a:	2308      	movs	r3, #8
 800ca3c:	e7af      	b.n	800c99e <_strtol_l.constprop.0+0x56>
 800ca3e:	2c30      	cmp	r4, #48	; 0x30
 800ca40:	d0a5      	beq.n	800c98e <_strtol_l.constprop.0+0x46>
 800ca42:	230a      	movs	r3, #10
 800ca44:	e7ab      	b.n	800c99e <_strtol_l.constprop.0+0x56>
 800ca46:	bf00      	nop
 800ca48:	08012071 	.word	0x08012071

0800ca4c <_strtol_r>:
 800ca4c:	f7ff bf7c 	b.w	800c948 <_strtol_l.constprop.0>

0800ca50 <_write_r>:
 800ca50:	b538      	push	{r3, r4, r5, lr}
 800ca52:	4d07      	ldr	r5, [pc, #28]	; (800ca70 <_write_r+0x20>)
 800ca54:	4604      	mov	r4, r0
 800ca56:	4608      	mov	r0, r1
 800ca58:	4611      	mov	r1, r2
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	602a      	str	r2, [r5, #0]
 800ca5e:	461a      	mov	r2, r3
 800ca60:	f7f5 fb99 	bl	8002196 <_write>
 800ca64:	1c43      	adds	r3, r0, #1
 800ca66:	d102      	bne.n	800ca6e <_write_r+0x1e>
 800ca68:	682b      	ldr	r3, [r5, #0]
 800ca6a:	b103      	cbz	r3, 800ca6e <_write_r+0x1e>
 800ca6c:	6023      	str	r3, [r4, #0]
 800ca6e:	bd38      	pop	{r3, r4, r5, pc}
 800ca70:	20004f44 	.word	0x20004f44

0800ca74 <_close_r>:
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	4d06      	ldr	r5, [pc, #24]	; (800ca90 <_close_r+0x1c>)
 800ca78:	2300      	movs	r3, #0
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	4608      	mov	r0, r1
 800ca7e:	602b      	str	r3, [r5, #0]
 800ca80:	f7f5 fba5 	bl	80021ce <_close>
 800ca84:	1c43      	adds	r3, r0, #1
 800ca86:	d102      	bne.n	800ca8e <_close_r+0x1a>
 800ca88:	682b      	ldr	r3, [r5, #0]
 800ca8a:	b103      	cbz	r3, 800ca8e <_close_r+0x1a>
 800ca8c:	6023      	str	r3, [r4, #0]
 800ca8e:	bd38      	pop	{r3, r4, r5, pc}
 800ca90:	20004f44 	.word	0x20004f44

0800ca94 <quorem>:
 800ca94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca98:	6903      	ldr	r3, [r0, #16]
 800ca9a:	690c      	ldr	r4, [r1, #16]
 800ca9c:	42a3      	cmp	r3, r4
 800ca9e:	4607      	mov	r7, r0
 800caa0:	f2c0 8081 	blt.w	800cba6 <quorem+0x112>
 800caa4:	3c01      	subs	r4, #1
 800caa6:	f101 0814 	add.w	r8, r1, #20
 800caaa:	f100 0514 	add.w	r5, r0, #20
 800caae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cab2:	9301      	str	r3, [sp, #4]
 800cab4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cab8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cabc:	3301      	adds	r3, #1
 800cabe:	429a      	cmp	r2, r3
 800cac0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cac4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cac8:	fbb2 f6f3 	udiv	r6, r2, r3
 800cacc:	d331      	bcc.n	800cb32 <quorem+0x9e>
 800cace:	f04f 0e00 	mov.w	lr, #0
 800cad2:	4640      	mov	r0, r8
 800cad4:	46ac      	mov	ip, r5
 800cad6:	46f2      	mov	sl, lr
 800cad8:	f850 2b04 	ldr.w	r2, [r0], #4
 800cadc:	b293      	uxth	r3, r2
 800cade:	fb06 e303 	mla	r3, r6, r3, lr
 800cae2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	ebaa 0303 	sub.w	r3, sl, r3
 800caec:	f8dc a000 	ldr.w	sl, [ip]
 800caf0:	0c12      	lsrs	r2, r2, #16
 800caf2:	fa13 f38a 	uxtah	r3, r3, sl
 800caf6:	fb06 e202 	mla	r2, r6, r2, lr
 800cafa:	9300      	str	r3, [sp, #0]
 800cafc:	9b00      	ldr	r3, [sp, #0]
 800cafe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb02:	b292      	uxth	r2, r2
 800cb04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cb08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb0c:	f8bd 3000 	ldrh.w	r3, [sp]
 800cb10:	4581      	cmp	r9, r0
 800cb12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb16:	f84c 3b04 	str.w	r3, [ip], #4
 800cb1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cb1e:	d2db      	bcs.n	800cad8 <quorem+0x44>
 800cb20:	f855 300b 	ldr.w	r3, [r5, fp]
 800cb24:	b92b      	cbnz	r3, 800cb32 <quorem+0x9e>
 800cb26:	9b01      	ldr	r3, [sp, #4]
 800cb28:	3b04      	subs	r3, #4
 800cb2a:	429d      	cmp	r5, r3
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	d32e      	bcc.n	800cb8e <quorem+0xfa>
 800cb30:	613c      	str	r4, [r7, #16]
 800cb32:	4638      	mov	r0, r7
 800cb34:	f001 fd64 	bl	800e600 <__mcmp>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	db24      	blt.n	800cb86 <quorem+0xf2>
 800cb3c:	3601      	adds	r6, #1
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f04f 0c00 	mov.w	ip, #0
 800cb44:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb48:	f8d0 e000 	ldr.w	lr, [r0]
 800cb4c:	b293      	uxth	r3, r2
 800cb4e:	ebac 0303 	sub.w	r3, ip, r3
 800cb52:	0c12      	lsrs	r2, r2, #16
 800cb54:	fa13 f38e 	uxtah	r3, r3, lr
 800cb58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cb5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb66:	45c1      	cmp	r9, r8
 800cb68:	f840 3b04 	str.w	r3, [r0], #4
 800cb6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cb70:	d2e8      	bcs.n	800cb44 <quorem+0xb0>
 800cb72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb7a:	b922      	cbnz	r2, 800cb86 <quorem+0xf2>
 800cb7c:	3b04      	subs	r3, #4
 800cb7e:	429d      	cmp	r5, r3
 800cb80:	461a      	mov	r2, r3
 800cb82:	d30a      	bcc.n	800cb9a <quorem+0x106>
 800cb84:	613c      	str	r4, [r7, #16]
 800cb86:	4630      	mov	r0, r6
 800cb88:	b003      	add	sp, #12
 800cb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb8e:	6812      	ldr	r2, [r2, #0]
 800cb90:	3b04      	subs	r3, #4
 800cb92:	2a00      	cmp	r2, #0
 800cb94:	d1cc      	bne.n	800cb30 <quorem+0x9c>
 800cb96:	3c01      	subs	r4, #1
 800cb98:	e7c7      	b.n	800cb2a <quorem+0x96>
 800cb9a:	6812      	ldr	r2, [r2, #0]
 800cb9c:	3b04      	subs	r3, #4
 800cb9e:	2a00      	cmp	r2, #0
 800cba0:	d1f0      	bne.n	800cb84 <quorem+0xf0>
 800cba2:	3c01      	subs	r4, #1
 800cba4:	e7eb      	b.n	800cb7e <quorem+0xea>
 800cba6:	2000      	movs	r0, #0
 800cba8:	e7ee      	b.n	800cb88 <quorem+0xf4>
 800cbaa:	0000      	movs	r0, r0
 800cbac:	0000      	movs	r0, r0
	...

0800cbb0 <_dtoa_r>:
 800cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	ed2d 8b04 	vpush	{d8-d9}
 800cbb8:	ec57 6b10 	vmov	r6, r7, d0
 800cbbc:	b093      	sub	sp, #76	; 0x4c
 800cbbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cbc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cbc4:	9106      	str	r1, [sp, #24]
 800cbc6:	ee10 aa10 	vmov	sl, s0
 800cbca:	4604      	mov	r4, r0
 800cbcc:	9209      	str	r2, [sp, #36]	; 0x24
 800cbce:	930c      	str	r3, [sp, #48]	; 0x30
 800cbd0:	46bb      	mov	fp, r7
 800cbd2:	b975      	cbnz	r5, 800cbf2 <_dtoa_r+0x42>
 800cbd4:	2010      	movs	r0, #16
 800cbd6:	f001 fa21 	bl	800e01c <malloc>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	6260      	str	r0, [r4, #36]	; 0x24
 800cbde:	b920      	cbnz	r0, 800cbea <_dtoa_r+0x3a>
 800cbe0:	4ba7      	ldr	r3, [pc, #668]	; (800ce80 <_dtoa_r+0x2d0>)
 800cbe2:	21ea      	movs	r1, #234	; 0xea
 800cbe4:	48a7      	ldr	r0, [pc, #668]	; (800ce84 <_dtoa_r+0x2d4>)
 800cbe6:	f002 f8fd 	bl	800ede4 <__assert_func>
 800cbea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cbee:	6005      	str	r5, [r0, #0]
 800cbf0:	60c5      	str	r5, [r0, #12]
 800cbf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbf4:	6819      	ldr	r1, [r3, #0]
 800cbf6:	b151      	cbz	r1, 800cc0e <_dtoa_r+0x5e>
 800cbf8:	685a      	ldr	r2, [r3, #4]
 800cbfa:	604a      	str	r2, [r1, #4]
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	4093      	lsls	r3, r2
 800cc00:	608b      	str	r3, [r1, #8]
 800cc02:	4620      	mov	r0, r4
 800cc04:	f001 fa70 	bl	800e0e8 <_Bfree>
 800cc08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	601a      	str	r2, [r3, #0]
 800cc0e:	1e3b      	subs	r3, r7, #0
 800cc10:	bfaa      	itet	ge
 800cc12:	2300      	movge	r3, #0
 800cc14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cc18:	f8c8 3000 	strge.w	r3, [r8]
 800cc1c:	4b9a      	ldr	r3, [pc, #616]	; (800ce88 <_dtoa_r+0x2d8>)
 800cc1e:	bfbc      	itt	lt
 800cc20:	2201      	movlt	r2, #1
 800cc22:	f8c8 2000 	strlt.w	r2, [r8]
 800cc26:	ea33 030b 	bics.w	r3, r3, fp
 800cc2a:	d11b      	bne.n	800cc64 <_dtoa_r+0xb4>
 800cc2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc2e:	f242 730f 	movw	r3, #9999	; 0x270f
 800cc32:	6013      	str	r3, [r2, #0]
 800cc34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc38:	4333      	orrs	r3, r6
 800cc3a:	f000 8592 	beq.w	800d762 <_dtoa_r+0xbb2>
 800cc3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc40:	b963      	cbnz	r3, 800cc5c <_dtoa_r+0xac>
 800cc42:	4b92      	ldr	r3, [pc, #584]	; (800ce8c <_dtoa_r+0x2dc>)
 800cc44:	e022      	b.n	800cc8c <_dtoa_r+0xdc>
 800cc46:	4b92      	ldr	r3, [pc, #584]	; (800ce90 <_dtoa_r+0x2e0>)
 800cc48:	9301      	str	r3, [sp, #4]
 800cc4a:	3308      	adds	r3, #8
 800cc4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cc4e:	6013      	str	r3, [r2, #0]
 800cc50:	9801      	ldr	r0, [sp, #4]
 800cc52:	b013      	add	sp, #76	; 0x4c
 800cc54:	ecbd 8b04 	vpop	{d8-d9}
 800cc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc5c:	4b8b      	ldr	r3, [pc, #556]	; (800ce8c <_dtoa_r+0x2dc>)
 800cc5e:	9301      	str	r3, [sp, #4]
 800cc60:	3303      	adds	r3, #3
 800cc62:	e7f3      	b.n	800cc4c <_dtoa_r+0x9c>
 800cc64:	2200      	movs	r2, #0
 800cc66:	2300      	movs	r3, #0
 800cc68:	4650      	mov	r0, sl
 800cc6a:	4659      	mov	r1, fp
 800cc6c:	f7f3 ff34 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc70:	ec4b ab19 	vmov	d9, sl, fp
 800cc74:	4680      	mov	r8, r0
 800cc76:	b158      	cbz	r0, 800cc90 <_dtoa_r+0xe0>
 800cc78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	6013      	str	r3, [r2, #0]
 800cc7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	f000 856b 	beq.w	800d75c <_dtoa_r+0xbac>
 800cc86:	4883      	ldr	r0, [pc, #524]	; (800ce94 <_dtoa_r+0x2e4>)
 800cc88:	6018      	str	r0, [r3, #0]
 800cc8a:	1e43      	subs	r3, r0, #1
 800cc8c:	9301      	str	r3, [sp, #4]
 800cc8e:	e7df      	b.n	800cc50 <_dtoa_r+0xa0>
 800cc90:	ec4b ab10 	vmov	d0, sl, fp
 800cc94:	aa10      	add	r2, sp, #64	; 0x40
 800cc96:	a911      	add	r1, sp, #68	; 0x44
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f001 fdd3 	bl	800e844 <__d2b>
 800cc9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cca2:	ee08 0a10 	vmov	s16, r0
 800cca6:	2d00      	cmp	r5, #0
 800cca8:	f000 8084 	beq.w	800cdb4 <_dtoa_r+0x204>
 800ccac:	ee19 3a90 	vmov	r3, s19
 800ccb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ccb8:	4656      	mov	r6, sl
 800ccba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ccbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ccc2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ccc6:	4b74      	ldr	r3, [pc, #464]	; (800ce98 <_dtoa_r+0x2e8>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	4630      	mov	r0, r6
 800cccc:	4639      	mov	r1, r7
 800ccce:	f7f3 fae3 	bl	8000298 <__aeabi_dsub>
 800ccd2:	a365      	add	r3, pc, #404	; (adr r3, 800ce68 <_dtoa_r+0x2b8>)
 800ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd8:	f7f3 fc96 	bl	8000608 <__aeabi_dmul>
 800ccdc:	a364      	add	r3, pc, #400	; (adr r3, 800ce70 <_dtoa_r+0x2c0>)
 800ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce2:	f7f3 fadb 	bl	800029c <__adddf3>
 800cce6:	4606      	mov	r6, r0
 800cce8:	4628      	mov	r0, r5
 800ccea:	460f      	mov	r7, r1
 800ccec:	f7f3 fc22 	bl	8000534 <__aeabi_i2d>
 800ccf0:	a361      	add	r3, pc, #388	; (adr r3, 800ce78 <_dtoa_r+0x2c8>)
 800ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf6:	f7f3 fc87 	bl	8000608 <__aeabi_dmul>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	4630      	mov	r0, r6
 800cd00:	4639      	mov	r1, r7
 800cd02:	f7f3 facb 	bl	800029c <__adddf3>
 800cd06:	4606      	mov	r6, r0
 800cd08:	460f      	mov	r7, r1
 800cd0a:	f7f3 ff2d 	bl	8000b68 <__aeabi_d2iz>
 800cd0e:	2200      	movs	r2, #0
 800cd10:	9000      	str	r0, [sp, #0]
 800cd12:	2300      	movs	r3, #0
 800cd14:	4630      	mov	r0, r6
 800cd16:	4639      	mov	r1, r7
 800cd18:	f7f3 fee8 	bl	8000aec <__aeabi_dcmplt>
 800cd1c:	b150      	cbz	r0, 800cd34 <_dtoa_r+0x184>
 800cd1e:	9800      	ldr	r0, [sp, #0]
 800cd20:	f7f3 fc08 	bl	8000534 <__aeabi_i2d>
 800cd24:	4632      	mov	r2, r6
 800cd26:	463b      	mov	r3, r7
 800cd28:	f7f3 fed6 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd2c:	b910      	cbnz	r0, 800cd34 <_dtoa_r+0x184>
 800cd2e:	9b00      	ldr	r3, [sp, #0]
 800cd30:	3b01      	subs	r3, #1
 800cd32:	9300      	str	r3, [sp, #0]
 800cd34:	9b00      	ldr	r3, [sp, #0]
 800cd36:	2b16      	cmp	r3, #22
 800cd38:	d85a      	bhi.n	800cdf0 <_dtoa_r+0x240>
 800cd3a:	9a00      	ldr	r2, [sp, #0]
 800cd3c:	4b57      	ldr	r3, [pc, #348]	; (800ce9c <_dtoa_r+0x2ec>)
 800cd3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd46:	ec51 0b19 	vmov	r0, r1, d9
 800cd4a:	f7f3 fecf 	bl	8000aec <__aeabi_dcmplt>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	d050      	beq.n	800cdf4 <_dtoa_r+0x244>
 800cd52:	9b00      	ldr	r3, [sp, #0]
 800cd54:	3b01      	subs	r3, #1
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	2300      	movs	r3, #0
 800cd5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd5e:	1b5d      	subs	r5, r3, r5
 800cd60:	1e6b      	subs	r3, r5, #1
 800cd62:	9305      	str	r3, [sp, #20]
 800cd64:	bf45      	ittet	mi
 800cd66:	f1c5 0301 	rsbmi	r3, r5, #1
 800cd6a:	9304      	strmi	r3, [sp, #16]
 800cd6c:	2300      	movpl	r3, #0
 800cd6e:	2300      	movmi	r3, #0
 800cd70:	bf4c      	ite	mi
 800cd72:	9305      	strmi	r3, [sp, #20]
 800cd74:	9304      	strpl	r3, [sp, #16]
 800cd76:	9b00      	ldr	r3, [sp, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	db3d      	blt.n	800cdf8 <_dtoa_r+0x248>
 800cd7c:	9b05      	ldr	r3, [sp, #20]
 800cd7e:	9a00      	ldr	r2, [sp, #0]
 800cd80:	920a      	str	r2, [sp, #40]	; 0x28
 800cd82:	4413      	add	r3, r2
 800cd84:	9305      	str	r3, [sp, #20]
 800cd86:	2300      	movs	r3, #0
 800cd88:	9307      	str	r3, [sp, #28]
 800cd8a:	9b06      	ldr	r3, [sp, #24]
 800cd8c:	2b09      	cmp	r3, #9
 800cd8e:	f200 8089 	bhi.w	800cea4 <_dtoa_r+0x2f4>
 800cd92:	2b05      	cmp	r3, #5
 800cd94:	bfc4      	itt	gt
 800cd96:	3b04      	subgt	r3, #4
 800cd98:	9306      	strgt	r3, [sp, #24]
 800cd9a:	9b06      	ldr	r3, [sp, #24]
 800cd9c:	f1a3 0302 	sub.w	r3, r3, #2
 800cda0:	bfcc      	ite	gt
 800cda2:	2500      	movgt	r5, #0
 800cda4:	2501      	movle	r5, #1
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	f200 8087 	bhi.w	800ceba <_dtoa_r+0x30a>
 800cdac:	e8df f003 	tbb	[pc, r3]
 800cdb0:	59383a2d 	.word	0x59383a2d
 800cdb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cdb8:	441d      	add	r5, r3
 800cdba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cdbe:	2b20      	cmp	r3, #32
 800cdc0:	bfc1      	itttt	gt
 800cdc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cdc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cdca:	fa0b f303 	lslgt.w	r3, fp, r3
 800cdce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cdd2:	bfda      	itte	le
 800cdd4:	f1c3 0320 	rsble	r3, r3, #32
 800cdd8:	fa06 f003 	lslle.w	r0, r6, r3
 800cddc:	4318      	orrgt	r0, r3
 800cdde:	f7f3 fb99 	bl	8000514 <__aeabi_ui2d>
 800cde2:	2301      	movs	r3, #1
 800cde4:	4606      	mov	r6, r0
 800cde6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cdea:	3d01      	subs	r5, #1
 800cdec:	930e      	str	r3, [sp, #56]	; 0x38
 800cdee:	e76a      	b.n	800ccc6 <_dtoa_r+0x116>
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e7b2      	b.n	800cd5a <_dtoa_r+0x1aa>
 800cdf4:	900b      	str	r0, [sp, #44]	; 0x2c
 800cdf6:	e7b1      	b.n	800cd5c <_dtoa_r+0x1ac>
 800cdf8:	9b04      	ldr	r3, [sp, #16]
 800cdfa:	9a00      	ldr	r2, [sp, #0]
 800cdfc:	1a9b      	subs	r3, r3, r2
 800cdfe:	9304      	str	r3, [sp, #16]
 800ce00:	4253      	negs	r3, r2
 800ce02:	9307      	str	r3, [sp, #28]
 800ce04:	2300      	movs	r3, #0
 800ce06:	930a      	str	r3, [sp, #40]	; 0x28
 800ce08:	e7bf      	b.n	800cd8a <_dtoa_r+0x1da>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	9308      	str	r3, [sp, #32]
 800ce0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	dc55      	bgt.n	800cec0 <_dtoa_r+0x310>
 800ce14:	2301      	movs	r3, #1
 800ce16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	9209      	str	r2, [sp, #36]	; 0x24
 800ce1e:	e00c      	b.n	800ce3a <_dtoa_r+0x28a>
 800ce20:	2301      	movs	r3, #1
 800ce22:	e7f3      	b.n	800ce0c <_dtoa_r+0x25c>
 800ce24:	2300      	movs	r3, #0
 800ce26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce28:	9308      	str	r3, [sp, #32]
 800ce2a:	9b00      	ldr	r3, [sp, #0]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	9302      	str	r3, [sp, #8]
 800ce30:	3301      	adds	r3, #1
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	9303      	str	r3, [sp, #12]
 800ce36:	bfb8      	it	lt
 800ce38:	2301      	movlt	r3, #1
 800ce3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	6042      	str	r2, [r0, #4]
 800ce40:	2204      	movs	r2, #4
 800ce42:	f102 0614 	add.w	r6, r2, #20
 800ce46:	429e      	cmp	r6, r3
 800ce48:	6841      	ldr	r1, [r0, #4]
 800ce4a:	d93d      	bls.n	800cec8 <_dtoa_r+0x318>
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f001 f90b 	bl	800e068 <_Balloc>
 800ce52:	9001      	str	r0, [sp, #4]
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d13b      	bne.n	800ced0 <_dtoa_r+0x320>
 800ce58:	4b11      	ldr	r3, [pc, #68]	; (800cea0 <_dtoa_r+0x2f0>)
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ce60:	e6c0      	b.n	800cbe4 <_dtoa_r+0x34>
 800ce62:	2301      	movs	r3, #1
 800ce64:	e7df      	b.n	800ce26 <_dtoa_r+0x276>
 800ce66:	bf00      	nop
 800ce68:	636f4361 	.word	0x636f4361
 800ce6c:	3fd287a7 	.word	0x3fd287a7
 800ce70:	8b60c8b3 	.word	0x8b60c8b3
 800ce74:	3fc68a28 	.word	0x3fc68a28
 800ce78:	509f79fb 	.word	0x509f79fb
 800ce7c:	3fd34413 	.word	0x3fd34413
 800ce80:	0801217e 	.word	0x0801217e
 800ce84:	08012195 	.word	0x08012195
 800ce88:	7ff00000 	.word	0x7ff00000
 800ce8c:	0801217a 	.word	0x0801217a
 800ce90:	08012171 	.word	0x08012171
 800ce94:	08011ff5 	.word	0x08011ff5
 800ce98:	3ff80000 	.word	0x3ff80000
 800ce9c:	08012300 	.word	0x08012300
 800cea0:	080121f0 	.word	0x080121f0
 800cea4:	2501      	movs	r5, #1
 800cea6:	2300      	movs	r3, #0
 800cea8:	9306      	str	r3, [sp, #24]
 800ceaa:	9508      	str	r5, [sp, #32]
 800ceac:	f04f 33ff 	mov.w	r3, #4294967295
 800ceb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	2312      	movs	r3, #18
 800ceb8:	e7b0      	b.n	800ce1c <_dtoa_r+0x26c>
 800ceba:	2301      	movs	r3, #1
 800cebc:	9308      	str	r3, [sp, #32]
 800cebe:	e7f5      	b.n	800ceac <_dtoa_r+0x2fc>
 800cec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cec2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cec6:	e7b8      	b.n	800ce3a <_dtoa_r+0x28a>
 800cec8:	3101      	adds	r1, #1
 800ceca:	6041      	str	r1, [r0, #4]
 800cecc:	0052      	lsls	r2, r2, #1
 800cece:	e7b8      	b.n	800ce42 <_dtoa_r+0x292>
 800ced0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ced2:	9a01      	ldr	r2, [sp, #4]
 800ced4:	601a      	str	r2, [r3, #0]
 800ced6:	9b03      	ldr	r3, [sp, #12]
 800ced8:	2b0e      	cmp	r3, #14
 800ceda:	f200 809d 	bhi.w	800d018 <_dtoa_r+0x468>
 800cede:	2d00      	cmp	r5, #0
 800cee0:	f000 809a 	beq.w	800d018 <_dtoa_r+0x468>
 800cee4:	9b00      	ldr	r3, [sp, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	dd32      	ble.n	800cf50 <_dtoa_r+0x3a0>
 800ceea:	4ab7      	ldr	r2, [pc, #732]	; (800d1c8 <_dtoa_r+0x618>)
 800ceec:	f003 030f 	and.w	r3, r3, #15
 800cef0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cef8:	9b00      	ldr	r3, [sp, #0]
 800cefa:	05d8      	lsls	r0, r3, #23
 800cefc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cf00:	d516      	bpl.n	800cf30 <_dtoa_r+0x380>
 800cf02:	4bb2      	ldr	r3, [pc, #712]	; (800d1cc <_dtoa_r+0x61c>)
 800cf04:	ec51 0b19 	vmov	r0, r1, d9
 800cf08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf0c:	f7f3 fca6 	bl	800085c <__aeabi_ddiv>
 800cf10:	f007 070f 	and.w	r7, r7, #15
 800cf14:	4682      	mov	sl, r0
 800cf16:	468b      	mov	fp, r1
 800cf18:	2503      	movs	r5, #3
 800cf1a:	4eac      	ldr	r6, [pc, #688]	; (800d1cc <_dtoa_r+0x61c>)
 800cf1c:	b957      	cbnz	r7, 800cf34 <_dtoa_r+0x384>
 800cf1e:	4642      	mov	r2, r8
 800cf20:	464b      	mov	r3, r9
 800cf22:	4650      	mov	r0, sl
 800cf24:	4659      	mov	r1, fp
 800cf26:	f7f3 fc99 	bl	800085c <__aeabi_ddiv>
 800cf2a:	4682      	mov	sl, r0
 800cf2c:	468b      	mov	fp, r1
 800cf2e:	e028      	b.n	800cf82 <_dtoa_r+0x3d2>
 800cf30:	2502      	movs	r5, #2
 800cf32:	e7f2      	b.n	800cf1a <_dtoa_r+0x36a>
 800cf34:	07f9      	lsls	r1, r7, #31
 800cf36:	d508      	bpl.n	800cf4a <_dtoa_r+0x39a>
 800cf38:	4640      	mov	r0, r8
 800cf3a:	4649      	mov	r1, r9
 800cf3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf40:	f7f3 fb62 	bl	8000608 <__aeabi_dmul>
 800cf44:	3501      	adds	r5, #1
 800cf46:	4680      	mov	r8, r0
 800cf48:	4689      	mov	r9, r1
 800cf4a:	107f      	asrs	r7, r7, #1
 800cf4c:	3608      	adds	r6, #8
 800cf4e:	e7e5      	b.n	800cf1c <_dtoa_r+0x36c>
 800cf50:	f000 809b 	beq.w	800d08a <_dtoa_r+0x4da>
 800cf54:	9b00      	ldr	r3, [sp, #0]
 800cf56:	4f9d      	ldr	r7, [pc, #628]	; (800d1cc <_dtoa_r+0x61c>)
 800cf58:	425e      	negs	r6, r3
 800cf5a:	4b9b      	ldr	r3, [pc, #620]	; (800d1c8 <_dtoa_r+0x618>)
 800cf5c:	f006 020f 	and.w	r2, r6, #15
 800cf60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf68:	ec51 0b19 	vmov	r0, r1, d9
 800cf6c:	f7f3 fb4c 	bl	8000608 <__aeabi_dmul>
 800cf70:	1136      	asrs	r6, r6, #4
 800cf72:	4682      	mov	sl, r0
 800cf74:	468b      	mov	fp, r1
 800cf76:	2300      	movs	r3, #0
 800cf78:	2502      	movs	r5, #2
 800cf7a:	2e00      	cmp	r6, #0
 800cf7c:	d17a      	bne.n	800d074 <_dtoa_r+0x4c4>
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1d3      	bne.n	800cf2a <_dtoa_r+0x37a>
 800cf82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f000 8082 	beq.w	800d08e <_dtoa_r+0x4de>
 800cf8a:	4b91      	ldr	r3, [pc, #580]	; (800d1d0 <_dtoa_r+0x620>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	4650      	mov	r0, sl
 800cf90:	4659      	mov	r1, fp
 800cf92:	f7f3 fdab 	bl	8000aec <__aeabi_dcmplt>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d079      	beq.n	800d08e <_dtoa_r+0x4de>
 800cf9a:	9b03      	ldr	r3, [sp, #12]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d076      	beq.n	800d08e <_dtoa_r+0x4de>
 800cfa0:	9b02      	ldr	r3, [sp, #8]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	dd36      	ble.n	800d014 <_dtoa_r+0x464>
 800cfa6:	9b00      	ldr	r3, [sp, #0]
 800cfa8:	4650      	mov	r0, sl
 800cfaa:	4659      	mov	r1, fp
 800cfac:	1e5f      	subs	r7, r3, #1
 800cfae:	2200      	movs	r2, #0
 800cfb0:	4b88      	ldr	r3, [pc, #544]	; (800d1d4 <_dtoa_r+0x624>)
 800cfb2:	f7f3 fb29 	bl	8000608 <__aeabi_dmul>
 800cfb6:	9e02      	ldr	r6, [sp, #8]
 800cfb8:	4682      	mov	sl, r0
 800cfba:	468b      	mov	fp, r1
 800cfbc:	3501      	adds	r5, #1
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f7f3 fab8 	bl	8000534 <__aeabi_i2d>
 800cfc4:	4652      	mov	r2, sl
 800cfc6:	465b      	mov	r3, fp
 800cfc8:	f7f3 fb1e 	bl	8000608 <__aeabi_dmul>
 800cfcc:	4b82      	ldr	r3, [pc, #520]	; (800d1d8 <_dtoa_r+0x628>)
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f7f3 f964 	bl	800029c <__adddf3>
 800cfd4:	46d0      	mov	r8, sl
 800cfd6:	46d9      	mov	r9, fp
 800cfd8:	4682      	mov	sl, r0
 800cfda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cfde:	2e00      	cmp	r6, #0
 800cfe0:	d158      	bne.n	800d094 <_dtoa_r+0x4e4>
 800cfe2:	4b7e      	ldr	r3, [pc, #504]	; (800d1dc <_dtoa_r+0x62c>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	4640      	mov	r0, r8
 800cfe8:	4649      	mov	r1, r9
 800cfea:	f7f3 f955 	bl	8000298 <__aeabi_dsub>
 800cfee:	4652      	mov	r2, sl
 800cff0:	465b      	mov	r3, fp
 800cff2:	4680      	mov	r8, r0
 800cff4:	4689      	mov	r9, r1
 800cff6:	f7f3 fd97 	bl	8000b28 <__aeabi_dcmpgt>
 800cffa:	2800      	cmp	r0, #0
 800cffc:	f040 8295 	bne.w	800d52a <_dtoa_r+0x97a>
 800d000:	4652      	mov	r2, sl
 800d002:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d006:	4640      	mov	r0, r8
 800d008:	4649      	mov	r1, r9
 800d00a:	f7f3 fd6f 	bl	8000aec <__aeabi_dcmplt>
 800d00e:	2800      	cmp	r0, #0
 800d010:	f040 8289 	bne.w	800d526 <_dtoa_r+0x976>
 800d014:	ec5b ab19 	vmov	sl, fp, d9
 800d018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f2c0 8148 	blt.w	800d2b0 <_dtoa_r+0x700>
 800d020:	9a00      	ldr	r2, [sp, #0]
 800d022:	2a0e      	cmp	r2, #14
 800d024:	f300 8144 	bgt.w	800d2b0 <_dtoa_r+0x700>
 800d028:	4b67      	ldr	r3, [pc, #412]	; (800d1c8 <_dtoa_r+0x618>)
 800d02a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d02e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d034:	2b00      	cmp	r3, #0
 800d036:	f280 80d5 	bge.w	800d1e4 <_dtoa_r+0x634>
 800d03a:	9b03      	ldr	r3, [sp, #12]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f300 80d1 	bgt.w	800d1e4 <_dtoa_r+0x634>
 800d042:	f040 826f 	bne.w	800d524 <_dtoa_r+0x974>
 800d046:	4b65      	ldr	r3, [pc, #404]	; (800d1dc <_dtoa_r+0x62c>)
 800d048:	2200      	movs	r2, #0
 800d04a:	4640      	mov	r0, r8
 800d04c:	4649      	mov	r1, r9
 800d04e:	f7f3 fadb 	bl	8000608 <__aeabi_dmul>
 800d052:	4652      	mov	r2, sl
 800d054:	465b      	mov	r3, fp
 800d056:	f7f3 fd5d 	bl	8000b14 <__aeabi_dcmpge>
 800d05a:	9e03      	ldr	r6, [sp, #12]
 800d05c:	4637      	mov	r7, r6
 800d05e:	2800      	cmp	r0, #0
 800d060:	f040 8245 	bne.w	800d4ee <_dtoa_r+0x93e>
 800d064:	9d01      	ldr	r5, [sp, #4]
 800d066:	2331      	movs	r3, #49	; 0x31
 800d068:	f805 3b01 	strb.w	r3, [r5], #1
 800d06c:	9b00      	ldr	r3, [sp, #0]
 800d06e:	3301      	adds	r3, #1
 800d070:	9300      	str	r3, [sp, #0]
 800d072:	e240      	b.n	800d4f6 <_dtoa_r+0x946>
 800d074:	07f2      	lsls	r2, r6, #31
 800d076:	d505      	bpl.n	800d084 <_dtoa_r+0x4d4>
 800d078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d07c:	f7f3 fac4 	bl	8000608 <__aeabi_dmul>
 800d080:	3501      	adds	r5, #1
 800d082:	2301      	movs	r3, #1
 800d084:	1076      	asrs	r6, r6, #1
 800d086:	3708      	adds	r7, #8
 800d088:	e777      	b.n	800cf7a <_dtoa_r+0x3ca>
 800d08a:	2502      	movs	r5, #2
 800d08c:	e779      	b.n	800cf82 <_dtoa_r+0x3d2>
 800d08e:	9f00      	ldr	r7, [sp, #0]
 800d090:	9e03      	ldr	r6, [sp, #12]
 800d092:	e794      	b.n	800cfbe <_dtoa_r+0x40e>
 800d094:	9901      	ldr	r1, [sp, #4]
 800d096:	4b4c      	ldr	r3, [pc, #304]	; (800d1c8 <_dtoa_r+0x618>)
 800d098:	4431      	add	r1, r6
 800d09a:	910d      	str	r1, [sp, #52]	; 0x34
 800d09c:	9908      	ldr	r1, [sp, #32]
 800d09e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d0a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d0a6:	2900      	cmp	r1, #0
 800d0a8:	d043      	beq.n	800d132 <_dtoa_r+0x582>
 800d0aa:	494d      	ldr	r1, [pc, #308]	; (800d1e0 <_dtoa_r+0x630>)
 800d0ac:	2000      	movs	r0, #0
 800d0ae:	f7f3 fbd5 	bl	800085c <__aeabi_ddiv>
 800d0b2:	4652      	mov	r2, sl
 800d0b4:	465b      	mov	r3, fp
 800d0b6:	f7f3 f8ef 	bl	8000298 <__aeabi_dsub>
 800d0ba:	9d01      	ldr	r5, [sp, #4]
 800d0bc:	4682      	mov	sl, r0
 800d0be:	468b      	mov	fp, r1
 800d0c0:	4649      	mov	r1, r9
 800d0c2:	4640      	mov	r0, r8
 800d0c4:	f7f3 fd50 	bl	8000b68 <__aeabi_d2iz>
 800d0c8:	4606      	mov	r6, r0
 800d0ca:	f7f3 fa33 	bl	8000534 <__aeabi_i2d>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	4649      	mov	r1, r9
 800d0d6:	f7f3 f8df 	bl	8000298 <__aeabi_dsub>
 800d0da:	3630      	adds	r6, #48	; 0x30
 800d0dc:	f805 6b01 	strb.w	r6, [r5], #1
 800d0e0:	4652      	mov	r2, sl
 800d0e2:	465b      	mov	r3, fp
 800d0e4:	4680      	mov	r8, r0
 800d0e6:	4689      	mov	r9, r1
 800d0e8:	f7f3 fd00 	bl	8000aec <__aeabi_dcmplt>
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d163      	bne.n	800d1b8 <_dtoa_r+0x608>
 800d0f0:	4642      	mov	r2, r8
 800d0f2:	464b      	mov	r3, r9
 800d0f4:	4936      	ldr	r1, [pc, #216]	; (800d1d0 <_dtoa_r+0x620>)
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	f7f3 f8ce 	bl	8000298 <__aeabi_dsub>
 800d0fc:	4652      	mov	r2, sl
 800d0fe:	465b      	mov	r3, fp
 800d100:	f7f3 fcf4 	bl	8000aec <__aeabi_dcmplt>
 800d104:	2800      	cmp	r0, #0
 800d106:	f040 80b5 	bne.w	800d274 <_dtoa_r+0x6c4>
 800d10a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d10c:	429d      	cmp	r5, r3
 800d10e:	d081      	beq.n	800d014 <_dtoa_r+0x464>
 800d110:	4b30      	ldr	r3, [pc, #192]	; (800d1d4 <_dtoa_r+0x624>)
 800d112:	2200      	movs	r2, #0
 800d114:	4650      	mov	r0, sl
 800d116:	4659      	mov	r1, fp
 800d118:	f7f3 fa76 	bl	8000608 <__aeabi_dmul>
 800d11c:	4b2d      	ldr	r3, [pc, #180]	; (800d1d4 <_dtoa_r+0x624>)
 800d11e:	4682      	mov	sl, r0
 800d120:	468b      	mov	fp, r1
 800d122:	4640      	mov	r0, r8
 800d124:	4649      	mov	r1, r9
 800d126:	2200      	movs	r2, #0
 800d128:	f7f3 fa6e 	bl	8000608 <__aeabi_dmul>
 800d12c:	4680      	mov	r8, r0
 800d12e:	4689      	mov	r9, r1
 800d130:	e7c6      	b.n	800d0c0 <_dtoa_r+0x510>
 800d132:	4650      	mov	r0, sl
 800d134:	4659      	mov	r1, fp
 800d136:	f7f3 fa67 	bl	8000608 <__aeabi_dmul>
 800d13a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d13c:	9d01      	ldr	r5, [sp, #4]
 800d13e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d140:	4682      	mov	sl, r0
 800d142:	468b      	mov	fp, r1
 800d144:	4649      	mov	r1, r9
 800d146:	4640      	mov	r0, r8
 800d148:	f7f3 fd0e 	bl	8000b68 <__aeabi_d2iz>
 800d14c:	4606      	mov	r6, r0
 800d14e:	f7f3 f9f1 	bl	8000534 <__aeabi_i2d>
 800d152:	3630      	adds	r6, #48	; 0x30
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	4640      	mov	r0, r8
 800d15a:	4649      	mov	r1, r9
 800d15c:	f7f3 f89c 	bl	8000298 <__aeabi_dsub>
 800d160:	f805 6b01 	strb.w	r6, [r5], #1
 800d164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d166:	429d      	cmp	r5, r3
 800d168:	4680      	mov	r8, r0
 800d16a:	4689      	mov	r9, r1
 800d16c:	f04f 0200 	mov.w	r2, #0
 800d170:	d124      	bne.n	800d1bc <_dtoa_r+0x60c>
 800d172:	4b1b      	ldr	r3, [pc, #108]	; (800d1e0 <_dtoa_r+0x630>)
 800d174:	4650      	mov	r0, sl
 800d176:	4659      	mov	r1, fp
 800d178:	f7f3 f890 	bl	800029c <__adddf3>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	4640      	mov	r0, r8
 800d182:	4649      	mov	r1, r9
 800d184:	f7f3 fcd0 	bl	8000b28 <__aeabi_dcmpgt>
 800d188:	2800      	cmp	r0, #0
 800d18a:	d173      	bne.n	800d274 <_dtoa_r+0x6c4>
 800d18c:	4652      	mov	r2, sl
 800d18e:	465b      	mov	r3, fp
 800d190:	4913      	ldr	r1, [pc, #76]	; (800d1e0 <_dtoa_r+0x630>)
 800d192:	2000      	movs	r0, #0
 800d194:	f7f3 f880 	bl	8000298 <__aeabi_dsub>
 800d198:	4602      	mov	r2, r0
 800d19a:	460b      	mov	r3, r1
 800d19c:	4640      	mov	r0, r8
 800d19e:	4649      	mov	r1, r9
 800d1a0:	f7f3 fca4 	bl	8000aec <__aeabi_dcmplt>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	f43f af35 	beq.w	800d014 <_dtoa_r+0x464>
 800d1aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d1ac:	1e6b      	subs	r3, r5, #1
 800d1ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1b4:	2b30      	cmp	r3, #48	; 0x30
 800d1b6:	d0f8      	beq.n	800d1aa <_dtoa_r+0x5fa>
 800d1b8:	9700      	str	r7, [sp, #0]
 800d1ba:	e049      	b.n	800d250 <_dtoa_r+0x6a0>
 800d1bc:	4b05      	ldr	r3, [pc, #20]	; (800d1d4 <_dtoa_r+0x624>)
 800d1be:	f7f3 fa23 	bl	8000608 <__aeabi_dmul>
 800d1c2:	4680      	mov	r8, r0
 800d1c4:	4689      	mov	r9, r1
 800d1c6:	e7bd      	b.n	800d144 <_dtoa_r+0x594>
 800d1c8:	08012300 	.word	0x08012300
 800d1cc:	080122d8 	.word	0x080122d8
 800d1d0:	3ff00000 	.word	0x3ff00000
 800d1d4:	40240000 	.word	0x40240000
 800d1d8:	401c0000 	.word	0x401c0000
 800d1dc:	40140000 	.word	0x40140000
 800d1e0:	3fe00000 	.word	0x3fe00000
 800d1e4:	9d01      	ldr	r5, [sp, #4]
 800d1e6:	4656      	mov	r6, sl
 800d1e8:	465f      	mov	r7, fp
 800d1ea:	4642      	mov	r2, r8
 800d1ec:	464b      	mov	r3, r9
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	4639      	mov	r1, r7
 800d1f2:	f7f3 fb33 	bl	800085c <__aeabi_ddiv>
 800d1f6:	f7f3 fcb7 	bl	8000b68 <__aeabi_d2iz>
 800d1fa:	4682      	mov	sl, r0
 800d1fc:	f7f3 f99a 	bl	8000534 <__aeabi_i2d>
 800d200:	4642      	mov	r2, r8
 800d202:	464b      	mov	r3, r9
 800d204:	f7f3 fa00 	bl	8000608 <__aeabi_dmul>
 800d208:	4602      	mov	r2, r0
 800d20a:	460b      	mov	r3, r1
 800d20c:	4630      	mov	r0, r6
 800d20e:	4639      	mov	r1, r7
 800d210:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d214:	f7f3 f840 	bl	8000298 <__aeabi_dsub>
 800d218:	f805 6b01 	strb.w	r6, [r5], #1
 800d21c:	9e01      	ldr	r6, [sp, #4]
 800d21e:	9f03      	ldr	r7, [sp, #12]
 800d220:	1bae      	subs	r6, r5, r6
 800d222:	42b7      	cmp	r7, r6
 800d224:	4602      	mov	r2, r0
 800d226:	460b      	mov	r3, r1
 800d228:	d135      	bne.n	800d296 <_dtoa_r+0x6e6>
 800d22a:	f7f3 f837 	bl	800029c <__adddf3>
 800d22e:	4642      	mov	r2, r8
 800d230:	464b      	mov	r3, r9
 800d232:	4606      	mov	r6, r0
 800d234:	460f      	mov	r7, r1
 800d236:	f7f3 fc77 	bl	8000b28 <__aeabi_dcmpgt>
 800d23a:	b9d0      	cbnz	r0, 800d272 <_dtoa_r+0x6c2>
 800d23c:	4642      	mov	r2, r8
 800d23e:	464b      	mov	r3, r9
 800d240:	4630      	mov	r0, r6
 800d242:	4639      	mov	r1, r7
 800d244:	f7f3 fc48 	bl	8000ad8 <__aeabi_dcmpeq>
 800d248:	b110      	cbz	r0, 800d250 <_dtoa_r+0x6a0>
 800d24a:	f01a 0f01 	tst.w	sl, #1
 800d24e:	d110      	bne.n	800d272 <_dtoa_r+0x6c2>
 800d250:	4620      	mov	r0, r4
 800d252:	ee18 1a10 	vmov	r1, s16
 800d256:	f000 ff47 	bl	800e0e8 <_Bfree>
 800d25a:	2300      	movs	r3, #0
 800d25c:	9800      	ldr	r0, [sp, #0]
 800d25e:	702b      	strb	r3, [r5, #0]
 800d260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d262:	3001      	adds	r0, #1
 800d264:	6018      	str	r0, [r3, #0]
 800d266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f43f acf1 	beq.w	800cc50 <_dtoa_r+0xa0>
 800d26e:	601d      	str	r5, [r3, #0]
 800d270:	e4ee      	b.n	800cc50 <_dtoa_r+0xa0>
 800d272:	9f00      	ldr	r7, [sp, #0]
 800d274:	462b      	mov	r3, r5
 800d276:	461d      	mov	r5, r3
 800d278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d27c:	2a39      	cmp	r2, #57	; 0x39
 800d27e:	d106      	bne.n	800d28e <_dtoa_r+0x6de>
 800d280:	9a01      	ldr	r2, [sp, #4]
 800d282:	429a      	cmp	r2, r3
 800d284:	d1f7      	bne.n	800d276 <_dtoa_r+0x6c6>
 800d286:	9901      	ldr	r1, [sp, #4]
 800d288:	2230      	movs	r2, #48	; 0x30
 800d28a:	3701      	adds	r7, #1
 800d28c:	700a      	strb	r2, [r1, #0]
 800d28e:	781a      	ldrb	r2, [r3, #0]
 800d290:	3201      	adds	r2, #1
 800d292:	701a      	strb	r2, [r3, #0]
 800d294:	e790      	b.n	800d1b8 <_dtoa_r+0x608>
 800d296:	4ba6      	ldr	r3, [pc, #664]	; (800d530 <_dtoa_r+0x980>)
 800d298:	2200      	movs	r2, #0
 800d29a:	f7f3 f9b5 	bl	8000608 <__aeabi_dmul>
 800d29e:	2200      	movs	r2, #0
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	460f      	mov	r7, r1
 800d2a6:	f7f3 fc17 	bl	8000ad8 <__aeabi_dcmpeq>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d09d      	beq.n	800d1ea <_dtoa_r+0x63a>
 800d2ae:	e7cf      	b.n	800d250 <_dtoa_r+0x6a0>
 800d2b0:	9a08      	ldr	r2, [sp, #32]
 800d2b2:	2a00      	cmp	r2, #0
 800d2b4:	f000 80d7 	beq.w	800d466 <_dtoa_r+0x8b6>
 800d2b8:	9a06      	ldr	r2, [sp, #24]
 800d2ba:	2a01      	cmp	r2, #1
 800d2bc:	f300 80ba 	bgt.w	800d434 <_dtoa_r+0x884>
 800d2c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2c2:	2a00      	cmp	r2, #0
 800d2c4:	f000 80b2 	beq.w	800d42c <_dtoa_r+0x87c>
 800d2c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d2cc:	9e07      	ldr	r6, [sp, #28]
 800d2ce:	9d04      	ldr	r5, [sp, #16]
 800d2d0:	9a04      	ldr	r2, [sp, #16]
 800d2d2:	441a      	add	r2, r3
 800d2d4:	9204      	str	r2, [sp, #16]
 800d2d6:	9a05      	ldr	r2, [sp, #20]
 800d2d8:	2101      	movs	r1, #1
 800d2da:	441a      	add	r2, r3
 800d2dc:	4620      	mov	r0, r4
 800d2de:	9205      	str	r2, [sp, #20]
 800d2e0:	f001 f804 	bl	800e2ec <__i2b>
 800d2e4:	4607      	mov	r7, r0
 800d2e6:	2d00      	cmp	r5, #0
 800d2e8:	dd0c      	ble.n	800d304 <_dtoa_r+0x754>
 800d2ea:	9b05      	ldr	r3, [sp, #20]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	dd09      	ble.n	800d304 <_dtoa_r+0x754>
 800d2f0:	42ab      	cmp	r3, r5
 800d2f2:	9a04      	ldr	r2, [sp, #16]
 800d2f4:	bfa8      	it	ge
 800d2f6:	462b      	movge	r3, r5
 800d2f8:	1ad2      	subs	r2, r2, r3
 800d2fa:	9204      	str	r2, [sp, #16]
 800d2fc:	9a05      	ldr	r2, [sp, #20]
 800d2fe:	1aed      	subs	r5, r5, r3
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	9305      	str	r3, [sp, #20]
 800d304:	9b07      	ldr	r3, [sp, #28]
 800d306:	b31b      	cbz	r3, 800d350 <_dtoa_r+0x7a0>
 800d308:	9b08      	ldr	r3, [sp, #32]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f000 80af 	beq.w	800d46e <_dtoa_r+0x8be>
 800d310:	2e00      	cmp	r6, #0
 800d312:	dd13      	ble.n	800d33c <_dtoa_r+0x78c>
 800d314:	4639      	mov	r1, r7
 800d316:	4632      	mov	r2, r6
 800d318:	4620      	mov	r0, r4
 800d31a:	f001 f8a7 	bl	800e46c <__pow5mult>
 800d31e:	ee18 2a10 	vmov	r2, s16
 800d322:	4601      	mov	r1, r0
 800d324:	4607      	mov	r7, r0
 800d326:	4620      	mov	r0, r4
 800d328:	f000 fff6 	bl	800e318 <__multiply>
 800d32c:	ee18 1a10 	vmov	r1, s16
 800d330:	4680      	mov	r8, r0
 800d332:	4620      	mov	r0, r4
 800d334:	f000 fed8 	bl	800e0e8 <_Bfree>
 800d338:	ee08 8a10 	vmov	s16, r8
 800d33c:	9b07      	ldr	r3, [sp, #28]
 800d33e:	1b9a      	subs	r2, r3, r6
 800d340:	d006      	beq.n	800d350 <_dtoa_r+0x7a0>
 800d342:	ee18 1a10 	vmov	r1, s16
 800d346:	4620      	mov	r0, r4
 800d348:	f001 f890 	bl	800e46c <__pow5mult>
 800d34c:	ee08 0a10 	vmov	s16, r0
 800d350:	2101      	movs	r1, #1
 800d352:	4620      	mov	r0, r4
 800d354:	f000 ffca 	bl	800e2ec <__i2b>
 800d358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	4606      	mov	r6, r0
 800d35e:	f340 8088 	ble.w	800d472 <_dtoa_r+0x8c2>
 800d362:	461a      	mov	r2, r3
 800d364:	4601      	mov	r1, r0
 800d366:	4620      	mov	r0, r4
 800d368:	f001 f880 	bl	800e46c <__pow5mult>
 800d36c:	9b06      	ldr	r3, [sp, #24]
 800d36e:	2b01      	cmp	r3, #1
 800d370:	4606      	mov	r6, r0
 800d372:	f340 8081 	ble.w	800d478 <_dtoa_r+0x8c8>
 800d376:	f04f 0800 	mov.w	r8, #0
 800d37a:	6933      	ldr	r3, [r6, #16]
 800d37c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d380:	6918      	ldr	r0, [r3, #16]
 800d382:	f000 ff63 	bl	800e24c <__hi0bits>
 800d386:	f1c0 0020 	rsb	r0, r0, #32
 800d38a:	9b05      	ldr	r3, [sp, #20]
 800d38c:	4418      	add	r0, r3
 800d38e:	f010 001f 	ands.w	r0, r0, #31
 800d392:	f000 8092 	beq.w	800d4ba <_dtoa_r+0x90a>
 800d396:	f1c0 0320 	rsb	r3, r0, #32
 800d39a:	2b04      	cmp	r3, #4
 800d39c:	f340 808a 	ble.w	800d4b4 <_dtoa_r+0x904>
 800d3a0:	f1c0 001c 	rsb	r0, r0, #28
 800d3a4:	9b04      	ldr	r3, [sp, #16]
 800d3a6:	4403      	add	r3, r0
 800d3a8:	9304      	str	r3, [sp, #16]
 800d3aa:	9b05      	ldr	r3, [sp, #20]
 800d3ac:	4403      	add	r3, r0
 800d3ae:	4405      	add	r5, r0
 800d3b0:	9305      	str	r3, [sp, #20]
 800d3b2:	9b04      	ldr	r3, [sp, #16]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	dd07      	ble.n	800d3c8 <_dtoa_r+0x818>
 800d3b8:	ee18 1a10 	vmov	r1, s16
 800d3bc:	461a      	mov	r2, r3
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f001 f8ae 	bl	800e520 <__lshift>
 800d3c4:	ee08 0a10 	vmov	s16, r0
 800d3c8:	9b05      	ldr	r3, [sp, #20]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	dd05      	ble.n	800d3da <_dtoa_r+0x82a>
 800d3ce:	4631      	mov	r1, r6
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f001 f8a4 	bl	800e520 <__lshift>
 800d3d8:	4606      	mov	r6, r0
 800d3da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d06e      	beq.n	800d4be <_dtoa_r+0x90e>
 800d3e0:	ee18 0a10 	vmov	r0, s16
 800d3e4:	4631      	mov	r1, r6
 800d3e6:	f001 f90b 	bl	800e600 <__mcmp>
 800d3ea:	2800      	cmp	r0, #0
 800d3ec:	da67      	bge.n	800d4be <_dtoa_r+0x90e>
 800d3ee:	9b00      	ldr	r3, [sp, #0]
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	ee18 1a10 	vmov	r1, s16
 800d3f6:	9300      	str	r3, [sp, #0]
 800d3f8:	220a      	movs	r2, #10
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f000 fe95 	bl	800e12c <__multadd>
 800d402:	9b08      	ldr	r3, [sp, #32]
 800d404:	ee08 0a10 	vmov	s16, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f000 81b1 	beq.w	800d770 <_dtoa_r+0xbc0>
 800d40e:	2300      	movs	r3, #0
 800d410:	4639      	mov	r1, r7
 800d412:	220a      	movs	r2, #10
 800d414:	4620      	mov	r0, r4
 800d416:	f000 fe89 	bl	800e12c <__multadd>
 800d41a:	9b02      	ldr	r3, [sp, #8]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	4607      	mov	r7, r0
 800d420:	f300 808e 	bgt.w	800d540 <_dtoa_r+0x990>
 800d424:	9b06      	ldr	r3, [sp, #24]
 800d426:	2b02      	cmp	r3, #2
 800d428:	dc51      	bgt.n	800d4ce <_dtoa_r+0x91e>
 800d42a:	e089      	b.n	800d540 <_dtoa_r+0x990>
 800d42c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d42e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d432:	e74b      	b.n	800d2cc <_dtoa_r+0x71c>
 800d434:	9b03      	ldr	r3, [sp, #12]
 800d436:	1e5e      	subs	r6, r3, #1
 800d438:	9b07      	ldr	r3, [sp, #28]
 800d43a:	42b3      	cmp	r3, r6
 800d43c:	bfbf      	itttt	lt
 800d43e:	9b07      	ldrlt	r3, [sp, #28]
 800d440:	9607      	strlt	r6, [sp, #28]
 800d442:	1af2      	sublt	r2, r6, r3
 800d444:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d446:	bfb6      	itet	lt
 800d448:	189b      	addlt	r3, r3, r2
 800d44a:	1b9e      	subge	r6, r3, r6
 800d44c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d44e:	9b03      	ldr	r3, [sp, #12]
 800d450:	bfb8      	it	lt
 800d452:	2600      	movlt	r6, #0
 800d454:	2b00      	cmp	r3, #0
 800d456:	bfb7      	itett	lt
 800d458:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d45c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d460:	1a9d      	sublt	r5, r3, r2
 800d462:	2300      	movlt	r3, #0
 800d464:	e734      	b.n	800d2d0 <_dtoa_r+0x720>
 800d466:	9e07      	ldr	r6, [sp, #28]
 800d468:	9d04      	ldr	r5, [sp, #16]
 800d46a:	9f08      	ldr	r7, [sp, #32]
 800d46c:	e73b      	b.n	800d2e6 <_dtoa_r+0x736>
 800d46e:	9a07      	ldr	r2, [sp, #28]
 800d470:	e767      	b.n	800d342 <_dtoa_r+0x792>
 800d472:	9b06      	ldr	r3, [sp, #24]
 800d474:	2b01      	cmp	r3, #1
 800d476:	dc18      	bgt.n	800d4aa <_dtoa_r+0x8fa>
 800d478:	f1ba 0f00 	cmp.w	sl, #0
 800d47c:	d115      	bne.n	800d4aa <_dtoa_r+0x8fa>
 800d47e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d482:	b993      	cbnz	r3, 800d4aa <_dtoa_r+0x8fa>
 800d484:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d488:	0d1b      	lsrs	r3, r3, #20
 800d48a:	051b      	lsls	r3, r3, #20
 800d48c:	b183      	cbz	r3, 800d4b0 <_dtoa_r+0x900>
 800d48e:	9b04      	ldr	r3, [sp, #16]
 800d490:	3301      	adds	r3, #1
 800d492:	9304      	str	r3, [sp, #16]
 800d494:	9b05      	ldr	r3, [sp, #20]
 800d496:	3301      	adds	r3, #1
 800d498:	9305      	str	r3, [sp, #20]
 800d49a:	f04f 0801 	mov.w	r8, #1
 800d49e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	f47f af6a 	bne.w	800d37a <_dtoa_r+0x7ca>
 800d4a6:	2001      	movs	r0, #1
 800d4a8:	e76f      	b.n	800d38a <_dtoa_r+0x7da>
 800d4aa:	f04f 0800 	mov.w	r8, #0
 800d4ae:	e7f6      	b.n	800d49e <_dtoa_r+0x8ee>
 800d4b0:	4698      	mov	r8, r3
 800d4b2:	e7f4      	b.n	800d49e <_dtoa_r+0x8ee>
 800d4b4:	f43f af7d 	beq.w	800d3b2 <_dtoa_r+0x802>
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	301c      	adds	r0, #28
 800d4bc:	e772      	b.n	800d3a4 <_dtoa_r+0x7f4>
 800d4be:	9b03      	ldr	r3, [sp, #12]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	dc37      	bgt.n	800d534 <_dtoa_r+0x984>
 800d4c4:	9b06      	ldr	r3, [sp, #24]
 800d4c6:	2b02      	cmp	r3, #2
 800d4c8:	dd34      	ble.n	800d534 <_dtoa_r+0x984>
 800d4ca:	9b03      	ldr	r3, [sp, #12]
 800d4cc:	9302      	str	r3, [sp, #8]
 800d4ce:	9b02      	ldr	r3, [sp, #8]
 800d4d0:	b96b      	cbnz	r3, 800d4ee <_dtoa_r+0x93e>
 800d4d2:	4631      	mov	r1, r6
 800d4d4:	2205      	movs	r2, #5
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	f000 fe28 	bl	800e12c <__multadd>
 800d4dc:	4601      	mov	r1, r0
 800d4de:	4606      	mov	r6, r0
 800d4e0:	ee18 0a10 	vmov	r0, s16
 800d4e4:	f001 f88c 	bl	800e600 <__mcmp>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	f73f adbb 	bgt.w	800d064 <_dtoa_r+0x4b4>
 800d4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4f0:	9d01      	ldr	r5, [sp, #4]
 800d4f2:	43db      	mvns	r3, r3
 800d4f4:	9300      	str	r3, [sp, #0]
 800d4f6:	f04f 0800 	mov.w	r8, #0
 800d4fa:	4631      	mov	r1, r6
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f000 fdf3 	bl	800e0e8 <_Bfree>
 800d502:	2f00      	cmp	r7, #0
 800d504:	f43f aea4 	beq.w	800d250 <_dtoa_r+0x6a0>
 800d508:	f1b8 0f00 	cmp.w	r8, #0
 800d50c:	d005      	beq.n	800d51a <_dtoa_r+0x96a>
 800d50e:	45b8      	cmp	r8, r7
 800d510:	d003      	beq.n	800d51a <_dtoa_r+0x96a>
 800d512:	4641      	mov	r1, r8
 800d514:	4620      	mov	r0, r4
 800d516:	f000 fde7 	bl	800e0e8 <_Bfree>
 800d51a:	4639      	mov	r1, r7
 800d51c:	4620      	mov	r0, r4
 800d51e:	f000 fde3 	bl	800e0e8 <_Bfree>
 800d522:	e695      	b.n	800d250 <_dtoa_r+0x6a0>
 800d524:	2600      	movs	r6, #0
 800d526:	4637      	mov	r7, r6
 800d528:	e7e1      	b.n	800d4ee <_dtoa_r+0x93e>
 800d52a:	9700      	str	r7, [sp, #0]
 800d52c:	4637      	mov	r7, r6
 800d52e:	e599      	b.n	800d064 <_dtoa_r+0x4b4>
 800d530:	40240000 	.word	0x40240000
 800d534:	9b08      	ldr	r3, [sp, #32]
 800d536:	2b00      	cmp	r3, #0
 800d538:	f000 80ca 	beq.w	800d6d0 <_dtoa_r+0xb20>
 800d53c:	9b03      	ldr	r3, [sp, #12]
 800d53e:	9302      	str	r3, [sp, #8]
 800d540:	2d00      	cmp	r5, #0
 800d542:	dd05      	ble.n	800d550 <_dtoa_r+0x9a0>
 800d544:	4639      	mov	r1, r7
 800d546:	462a      	mov	r2, r5
 800d548:	4620      	mov	r0, r4
 800d54a:	f000 ffe9 	bl	800e520 <__lshift>
 800d54e:	4607      	mov	r7, r0
 800d550:	f1b8 0f00 	cmp.w	r8, #0
 800d554:	d05b      	beq.n	800d60e <_dtoa_r+0xa5e>
 800d556:	6879      	ldr	r1, [r7, #4]
 800d558:	4620      	mov	r0, r4
 800d55a:	f000 fd85 	bl	800e068 <_Balloc>
 800d55e:	4605      	mov	r5, r0
 800d560:	b928      	cbnz	r0, 800d56e <_dtoa_r+0x9be>
 800d562:	4b87      	ldr	r3, [pc, #540]	; (800d780 <_dtoa_r+0xbd0>)
 800d564:	4602      	mov	r2, r0
 800d566:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d56a:	f7ff bb3b 	b.w	800cbe4 <_dtoa_r+0x34>
 800d56e:	693a      	ldr	r2, [r7, #16]
 800d570:	3202      	adds	r2, #2
 800d572:	0092      	lsls	r2, r2, #2
 800d574:	f107 010c 	add.w	r1, r7, #12
 800d578:	300c      	adds	r0, #12
 800d57a:	f7fd fbb4 	bl	800ace6 <memcpy>
 800d57e:	2201      	movs	r2, #1
 800d580:	4629      	mov	r1, r5
 800d582:	4620      	mov	r0, r4
 800d584:	f000 ffcc 	bl	800e520 <__lshift>
 800d588:	9b01      	ldr	r3, [sp, #4]
 800d58a:	f103 0901 	add.w	r9, r3, #1
 800d58e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d592:	4413      	add	r3, r2
 800d594:	9305      	str	r3, [sp, #20]
 800d596:	f00a 0301 	and.w	r3, sl, #1
 800d59a:	46b8      	mov	r8, r7
 800d59c:	9304      	str	r3, [sp, #16]
 800d59e:	4607      	mov	r7, r0
 800d5a0:	4631      	mov	r1, r6
 800d5a2:	ee18 0a10 	vmov	r0, s16
 800d5a6:	f7ff fa75 	bl	800ca94 <quorem>
 800d5aa:	4641      	mov	r1, r8
 800d5ac:	9002      	str	r0, [sp, #8]
 800d5ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d5b2:	ee18 0a10 	vmov	r0, s16
 800d5b6:	f001 f823 	bl	800e600 <__mcmp>
 800d5ba:	463a      	mov	r2, r7
 800d5bc:	9003      	str	r0, [sp, #12]
 800d5be:	4631      	mov	r1, r6
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f001 f839 	bl	800e638 <__mdiff>
 800d5c6:	68c2      	ldr	r2, [r0, #12]
 800d5c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800d5cc:	4605      	mov	r5, r0
 800d5ce:	bb02      	cbnz	r2, 800d612 <_dtoa_r+0xa62>
 800d5d0:	4601      	mov	r1, r0
 800d5d2:	ee18 0a10 	vmov	r0, s16
 800d5d6:	f001 f813 	bl	800e600 <__mcmp>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	4629      	mov	r1, r5
 800d5de:	4620      	mov	r0, r4
 800d5e0:	9207      	str	r2, [sp, #28]
 800d5e2:	f000 fd81 	bl	800e0e8 <_Bfree>
 800d5e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d5ea:	ea43 0102 	orr.w	r1, r3, r2
 800d5ee:	9b04      	ldr	r3, [sp, #16]
 800d5f0:	430b      	orrs	r3, r1
 800d5f2:	464d      	mov	r5, r9
 800d5f4:	d10f      	bne.n	800d616 <_dtoa_r+0xa66>
 800d5f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d5fa:	d02a      	beq.n	800d652 <_dtoa_r+0xaa2>
 800d5fc:	9b03      	ldr	r3, [sp, #12]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	dd02      	ble.n	800d608 <_dtoa_r+0xa58>
 800d602:	9b02      	ldr	r3, [sp, #8]
 800d604:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d608:	f88b a000 	strb.w	sl, [fp]
 800d60c:	e775      	b.n	800d4fa <_dtoa_r+0x94a>
 800d60e:	4638      	mov	r0, r7
 800d610:	e7ba      	b.n	800d588 <_dtoa_r+0x9d8>
 800d612:	2201      	movs	r2, #1
 800d614:	e7e2      	b.n	800d5dc <_dtoa_r+0xa2c>
 800d616:	9b03      	ldr	r3, [sp, #12]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	db04      	blt.n	800d626 <_dtoa_r+0xa76>
 800d61c:	9906      	ldr	r1, [sp, #24]
 800d61e:	430b      	orrs	r3, r1
 800d620:	9904      	ldr	r1, [sp, #16]
 800d622:	430b      	orrs	r3, r1
 800d624:	d122      	bne.n	800d66c <_dtoa_r+0xabc>
 800d626:	2a00      	cmp	r2, #0
 800d628:	ddee      	ble.n	800d608 <_dtoa_r+0xa58>
 800d62a:	ee18 1a10 	vmov	r1, s16
 800d62e:	2201      	movs	r2, #1
 800d630:	4620      	mov	r0, r4
 800d632:	f000 ff75 	bl	800e520 <__lshift>
 800d636:	4631      	mov	r1, r6
 800d638:	ee08 0a10 	vmov	s16, r0
 800d63c:	f000 ffe0 	bl	800e600 <__mcmp>
 800d640:	2800      	cmp	r0, #0
 800d642:	dc03      	bgt.n	800d64c <_dtoa_r+0xa9c>
 800d644:	d1e0      	bne.n	800d608 <_dtoa_r+0xa58>
 800d646:	f01a 0f01 	tst.w	sl, #1
 800d64a:	d0dd      	beq.n	800d608 <_dtoa_r+0xa58>
 800d64c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d650:	d1d7      	bne.n	800d602 <_dtoa_r+0xa52>
 800d652:	2339      	movs	r3, #57	; 0x39
 800d654:	f88b 3000 	strb.w	r3, [fp]
 800d658:	462b      	mov	r3, r5
 800d65a:	461d      	mov	r5, r3
 800d65c:	3b01      	subs	r3, #1
 800d65e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d662:	2a39      	cmp	r2, #57	; 0x39
 800d664:	d071      	beq.n	800d74a <_dtoa_r+0xb9a>
 800d666:	3201      	adds	r2, #1
 800d668:	701a      	strb	r2, [r3, #0]
 800d66a:	e746      	b.n	800d4fa <_dtoa_r+0x94a>
 800d66c:	2a00      	cmp	r2, #0
 800d66e:	dd07      	ble.n	800d680 <_dtoa_r+0xad0>
 800d670:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d674:	d0ed      	beq.n	800d652 <_dtoa_r+0xaa2>
 800d676:	f10a 0301 	add.w	r3, sl, #1
 800d67a:	f88b 3000 	strb.w	r3, [fp]
 800d67e:	e73c      	b.n	800d4fa <_dtoa_r+0x94a>
 800d680:	9b05      	ldr	r3, [sp, #20]
 800d682:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d686:	4599      	cmp	r9, r3
 800d688:	d047      	beq.n	800d71a <_dtoa_r+0xb6a>
 800d68a:	ee18 1a10 	vmov	r1, s16
 800d68e:	2300      	movs	r3, #0
 800d690:	220a      	movs	r2, #10
 800d692:	4620      	mov	r0, r4
 800d694:	f000 fd4a 	bl	800e12c <__multadd>
 800d698:	45b8      	cmp	r8, r7
 800d69a:	ee08 0a10 	vmov	s16, r0
 800d69e:	f04f 0300 	mov.w	r3, #0
 800d6a2:	f04f 020a 	mov.w	r2, #10
 800d6a6:	4641      	mov	r1, r8
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	d106      	bne.n	800d6ba <_dtoa_r+0xb0a>
 800d6ac:	f000 fd3e 	bl	800e12c <__multadd>
 800d6b0:	4680      	mov	r8, r0
 800d6b2:	4607      	mov	r7, r0
 800d6b4:	f109 0901 	add.w	r9, r9, #1
 800d6b8:	e772      	b.n	800d5a0 <_dtoa_r+0x9f0>
 800d6ba:	f000 fd37 	bl	800e12c <__multadd>
 800d6be:	4639      	mov	r1, r7
 800d6c0:	4680      	mov	r8, r0
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	220a      	movs	r2, #10
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	f000 fd30 	bl	800e12c <__multadd>
 800d6cc:	4607      	mov	r7, r0
 800d6ce:	e7f1      	b.n	800d6b4 <_dtoa_r+0xb04>
 800d6d0:	9b03      	ldr	r3, [sp, #12]
 800d6d2:	9302      	str	r3, [sp, #8]
 800d6d4:	9d01      	ldr	r5, [sp, #4]
 800d6d6:	ee18 0a10 	vmov	r0, s16
 800d6da:	4631      	mov	r1, r6
 800d6dc:	f7ff f9da 	bl	800ca94 <quorem>
 800d6e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d6e4:	9b01      	ldr	r3, [sp, #4]
 800d6e6:	f805 ab01 	strb.w	sl, [r5], #1
 800d6ea:	1aea      	subs	r2, r5, r3
 800d6ec:	9b02      	ldr	r3, [sp, #8]
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	dd09      	ble.n	800d706 <_dtoa_r+0xb56>
 800d6f2:	ee18 1a10 	vmov	r1, s16
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	220a      	movs	r2, #10
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f000 fd16 	bl	800e12c <__multadd>
 800d700:	ee08 0a10 	vmov	s16, r0
 800d704:	e7e7      	b.n	800d6d6 <_dtoa_r+0xb26>
 800d706:	9b02      	ldr	r3, [sp, #8]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	bfc8      	it	gt
 800d70c:	461d      	movgt	r5, r3
 800d70e:	9b01      	ldr	r3, [sp, #4]
 800d710:	bfd8      	it	le
 800d712:	2501      	movle	r5, #1
 800d714:	441d      	add	r5, r3
 800d716:	f04f 0800 	mov.w	r8, #0
 800d71a:	ee18 1a10 	vmov	r1, s16
 800d71e:	2201      	movs	r2, #1
 800d720:	4620      	mov	r0, r4
 800d722:	f000 fefd 	bl	800e520 <__lshift>
 800d726:	4631      	mov	r1, r6
 800d728:	ee08 0a10 	vmov	s16, r0
 800d72c:	f000 ff68 	bl	800e600 <__mcmp>
 800d730:	2800      	cmp	r0, #0
 800d732:	dc91      	bgt.n	800d658 <_dtoa_r+0xaa8>
 800d734:	d102      	bne.n	800d73c <_dtoa_r+0xb8c>
 800d736:	f01a 0f01 	tst.w	sl, #1
 800d73a:	d18d      	bne.n	800d658 <_dtoa_r+0xaa8>
 800d73c:	462b      	mov	r3, r5
 800d73e:	461d      	mov	r5, r3
 800d740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d744:	2a30      	cmp	r2, #48	; 0x30
 800d746:	d0fa      	beq.n	800d73e <_dtoa_r+0xb8e>
 800d748:	e6d7      	b.n	800d4fa <_dtoa_r+0x94a>
 800d74a:	9a01      	ldr	r2, [sp, #4]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d184      	bne.n	800d65a <_dtoa_r+0xaaa>
 800d750:	9b00      	ldr	r3, [sp, #0]
 800d752:	3301      	adds	r3, #1
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	2331      	movs	r3, #49	; 0x31
 800d758:	7013      	strb	r3, [r2, #0]
 800d75a:	e6ce      	b.n	800d4fa <_dtoa_r+0x94a>
 800d75c:	4b09      	ldr	r3, [pc, #36]	; (800d784 <_dtoa_r+0xbd4>)
 800d75e:	f7ff ba95 	b.w	800cc8c <_dtoa_r+0xdc>
 800d762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d764:	2b00      	cmp	r3, #0
 800d766:	f47f aa6e 	bne.w	800cc46 <_dtoa_r+0x96>
 800d76a:	4b07      	ldr	r3, [pc, #28]	; (800d788 <_dtoa_r+0xbd8>)
 800d76c:	f7ff ba8e 	b.w	800cc8c <_dtoa_r+0xdc>
 800d770:	9b02      	ldr	r3, [sp, #8]
 800d772:	2b00      	cmp	r3, #0
 800d774:	dcae      	bgt.n	800d6d4 <_dtoa_r+0xb24>
 800d776:	9b06      	ldr	r3, [sp, #24]
 800d778:	2b02      	cmp	r3, #2
 800d77a:	f73f aea8 	bgt.w	800d4ce <_dtoa_r+0x91e>
 800d77e:	e7a9      	b.n	800d6d4 <_dtoa_r+0xb24>
 800d780:	080121f0 	.word	0x080121f0
 800d784:	08011ff4 	.word	0x08011ff4
 800d788:	08012171 	.word	0x08012171

0800d78c <__sflush_r>:
 800d78c:	898a      	ldrh	r2, [r1, #12]
 800d78e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d792:	4605      	mov	r5, r0
 800d794:	0710      	lsls	r0, r2, #28
 800d796:	460c      	mov	r4, r1
 800d798:	d458      	bmi.n	800d84c <__sflush_r+0xc0>
 800d79a:	684b      	ldr	r3, [r1, #4]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	dc05      	bgt.n	800d7ac <__sflush_r+0x20>
 800d7a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	dc02      	bgt.n	800d7ac <__sflush_r+0x20>
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7ae:	2e00      	cmp	r6, #0
 800d7b0:	d0f9      	beq.n	800d7a6 <__sflush_r+0x1a>
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d7b8:	682f      	ldr	r7, [r5, #0]
 800d7ba:	602b      	str	r3, [r5, #0]
 800d7bc:	d032      	beq.n	800d824 <__sflush_r+0x98>
 800d7be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d7c0:	89a3      	ldrh	r3, [r4, #12]
 800d7c2:	075a      	lsls	r2, r3, #29
 800d7c4:	d505      	bpl.n	800d7d2 <__sflush_r+0x46>
 800d7c6:	6863      	ldr	r3, [r4, #4]
 800d7c8:	1ac0      	subs	r0, r0, r3
 800d7ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7cc:	b10b      	cbz	r3, 800d7d2 <__sflush_r+0x46>
 800d7ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d7d0:	1ac0      	subs	r0, r0, r3
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7d8:	6a21      	ldr	r1, [r4, #32]
 800d7da:	4628      	mov	r0, r5
 800d7dc:	47b0      	blx	r6
 800d7de:	1c43      	adds	r3, r0, #1
 800d7e0:	89a3      	ldrh	r3, [r4, #12]
 800d7e2:	d106      	bne.n	800d7f2 <__sflush_r+0x66>
 800d7e4:	6829      	ldr	r1, [r5, #0]
 800d7e6:	291d      	cmp	r1, #29
 800d7e8:	d82c      	bhi.n	800d844 <__sflush_r+0xb8>
 800d7ea:	4a2a      	ldr	r2, [pc, #168]	; (800d894 <__sflush_r+0x108>)
 800d7ec:	40ca      	lsrs	r2, r1
 800d7ee:	07d6      	lsls	r6, r2, #31
 800d7f0:	d528      	bpl.n	800d844 <__sflush_r+0xb8>
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	6062      	str	r2, [r4, #4]
 800d7f6:	04d9      	lsls	r1, r3, #19
 800d7f8:	6922      	ldr	r2, [r4, #16]
 800d7fa:	6022      	str	r2, [r4, #0]
 800d7fc:	d504      	bpl.n	800d808 <__sflush_r+0x7c>
 800d7fe:	1c42      	adds	r2, r0, #1
 800d800:	d101      	bne.n	800d806 <__sflush_r+0x7a>
 800d802:	682b      	ldr	r3, [r5, #0]
 800d804:	b903      	cbnz	r3, 800d808 <__sflush_r+0x7c>
 800d806:	6560      	str	r0, [r4, #84]	; 0x54
 800d808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d80a:	602f      	str	r7, [r5, #0]
 800d80c:	2900      	cmp	r1, #0
 800d80e:	d0ca      	beq.n	800d7a6 <__sflush_r+0x1a>
 800d810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d814:	4299      	cmp	r1, r3
 800d816:	d002      	beq.n	800d81e <__sflush_r+0x92>
 800d818:	4628      	mov	r0, r5
 800d81a:	f001 f8fd 	bl	800ea18 <_free_r>
 800d81e:	2000      	movs	r0, #0
 800d820:	6360      	str	r0, [r4, #52]	; 0x34
 800d822:	e7c1      	b.n	800d7a8 <__sflush_r+0x1c>
 800d824:	6a21      	ldr	r1, [r4, #32]
 800d826:	2301      	movs	r3, #1
 800d828:	4628      	mov	r0, r5
 800d82a:	47b0      	blx	r6
 800d82c:	1c41      	adds	r1, r0, #1
 800d82e:	d1c7      	bne.n	800d7c0 <__sflush_r+0x34>
 800d830:	682b      	ldr	r3, [r5, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d0c4      	beq.n	800d7c0 <__sflush_r+0x34>
 800d836:	2b1d      	cmp	r3, #29
 800d838:	d001      	beq.n	800d83e <__sflush_r+0xb2>
 800d83a:	2b16      	cmp	r3, #22
 800d83c:	d101      	bne.n	800d842 <__sflush_r+0xb6>
 800d83e:	602f      	str	r7, [r5, #0]
 800d840:	e7b1      	b.n	800d7a6 <__sflush_r+0x1a>
 800d842:	89a3      	ldrh	r3, [r4, #12]
 800d844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d848:	81a3      	strh	r3, [r4, #12]
 800d84a:	e7ad      	b.n	800d7a8 <__sflush_r+0x1c>
 800d84c:	690f      	ldr	r7, [r1, #16]
 800d84e:	2f00      	cmp	r7, #0
 800d850:	d0a9      	beq.n	800d7a6 <__sflush_r+0x1a>
 800d852:	0793      	lsls	r3, r2, #30
 800d854:	680e      	ldr	r6, [r1, #0]
 800d856:	bf08      	it	eq
 800d858:	694b      	ldreq	r3, [r1, #20]
 800d85a:	600f      	str	r7, [r1, #0]
 800d85c:	bf18      	it	ne
 800d85e:	2300      	movne	r3, #0
 800d860:	eba6 0807 	sub.w	r8, r6, r7
 800d864:	608b      	str	r3, [r1, #8]
 800d866:	f1b8 0f00 	cmp.w	r8, #0
 800d86a:	dd9c      	ble.n	800d7a6 <__sflush_r+0x1a>
 800d86c:	6a21      	ldr	r1, [r4, #32]
 800d86e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d870:	4643      	mov	r3, r8
 800d872:	463a      	mov	r2, r7
 800d874:	4628      	mov	r0, r5
 800d876:	47b0      	blx	r6
 800d878:	2800      	cmp	r0, #0
 800d87a:	dc06      	bgt.n	800d88a <__sflush_r+0xfe>
 800d87c:	89a3      	ldrh	r3, [r4, #12]
 800d87e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d882:	81a3      	strh	r3, [r4, #12]
 800d884:	f04f 30ff 	mov.w	r0, #4294967295
 800d888:	e78e      	b.n	800d7a8 <__sflush_r+0x1c>
 800d88a:	4407      	add	r7, r0
 800d88c:	eba8 0800 	sub.w	r8, r8, r0
 800d890:	e7e9      	b.n	800d866 <__sflush_r+0xda>
 800d892:	bf00      	nop
 800d894:	20400001 	.word	0x20400001

0800d898 <_fflush_r>:
 800d898:	b538      	push	{r3, r4, r5, lr}
 800d89a:	690b      	ldr	r3, [r1, #16]
 800d89c:	4605      	mov	r5, r0
 800d89e:	460c      	mov	r4, r1
 800d8a0:	b913      	cbnz	r3, 800d8a8 <_fflush_r+0x10>
 800d8a2:	2500      	movs	r5, #0
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	bd38      	pop	{r3, r4, r5, pc}
 800d8a8:	b118      	cbz	r0, 800d8b2 <_fflush_r+0x1a>
 800d8aa:	6983      	ldr	r3, [r0, #24]
 800d8ac:	b90b      	cbnz	r3, 800d8b2 <_fflush_r+0x1a>
 800d8ae:	f7fd f955 	bl	800ab5c <__sinit>
 800d8b2:	4b14      	ldr	r3, [pc, #80]	; (800d904 <_fflush_r+0x6c>)
 800d8b4:	429c      	cmp	r4, r3
 800d8b6:	d11b      	bne.n	800d8f0 <_fflush_r+0x58>
 800d8b8:	686c      	ldr	r4, [r5, #4]
 800d8ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d0ef      	beq.n	800d8a2 <_fflush_r+0xa>
 800d8c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d8c4:	07d0      	lsls	r0, r2, #31
 800d8c6:	d404      	bmi.n	800d8d2 <_fflush_r+0x3a>
 800d8c8:	0599      	lsls	r1, r3, #22
 800d8ca:	d402      	bmi.n	800d8d2 <_fflush_r+0x3a>
 800d8cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8ce:	f7fd fa08 	bl	800ace2 <__retarget_lock_acquire_recursive>
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	4621      	mov	r1, r4
 800d8d6:	f7ff ff59 	bl	800d78c <__sflush_r>
 800d8da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8dc:	07da      	lsls	r2, r3, #31
 800d8de:	4605      	mov	r5, r0
 800d8e0:	d4e0      	bmi.n	800d8a4 <_fflush_r+0xc>
 800d8e2:	89a3      	ldrh	r3, [r4, #12]
 800d8e4:	059b      	lsls	r3, r3, #22
 800d8e6:	d4dd      	bmi.n	800d8a4 <_fflush_r+0xc>
 800d8e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8ea:	f7fd f9fb 	bl	800ace4 <__retarget_lock_release_recursive>
 800d8ee:	e7d9      	b.n	800d8a4 <_fflush_r+0xc>
 800d8f0:	4b05      	ldr	r3, [pc, #20]	; (800d908 <_fflush_r+0x70>)
 800d8f2:	429c      	cmp	r4, r3
 800d8f4:	d101      	bne.n	800d8fa <_fflush_r+0x62>
 800d8f6:	68ac      	ldr	r4, [r5, #8]
 800d8f8:	e7df      	b.n	800d8ba <_fflush_r+0x22>
 800d8fa:	4b04      	ldr	r3, [pc, #16]	; (800d90c <_fflush_r+0x74>)
 800d8fc:	429c      	cmp	r4, r3
 800d8fe:	bf08      	it	eq
 800d900:	68ec      	ldreq	r4, [r5, #12]
 800d902:	e7da      	b.n	800d8ba <_fflush_r+0x22>
 800d904:	08011fa0 	.word	0x08011fa0
 800d908:	08011fc0 	.word	0x08011fc0
 800d90c:	08011f80 	.word	0x08011f80

0800d910 <rshift>:
 800d910:	6903      	ldr	r3, [r0, #16]
 800d912:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d916:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d91a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d91e:	f100 0414 	add.w	r4, r0, #20
 800d922:	dd45      	ble.n	800d9b0 <rshift+0xa0>
 800d924:	f011 011f 	ands.w	r1, r1, #31
 800d928:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d92c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d930:	d10c      	bne.n	800d94c <rshift+0x3c>
 800d932:	f100 0710 	add.w	r7, r0, #16
 800d936:	4629      	mov	r1, r5
 800d938:	42b1      	cmp	r1, r6
 800d93a:	d334      	bcc.n	800d9a6 <rshift+0x96>
 800d93c:	1a9b      	subs	r3, r3, r2
 800d93e:	009b      	lsls	r3, r3, #2
 800d940:	1eea      	subs	r2, r5, #3
 800d942:	4296      	cmp	r6, r2
 800d944:	bf38      	it	cc
 800d946:	2300      	movcc	r3, #0
 800d948:	4423      	add	r3, r4
 800d94a:	e015      	b.n	800d978 <rshift+0x68>
 800d94c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d950:	f1c1 0820 	rsb	r8, r1, #32
 800d954:	40cf      	lsrs	r7, r1
 800d956:	f105 0e04 	add.w	lr, r5, #4
 800d95a:	46a1      	mov	r9, r4
 800d95c:	4576      	cmp	r6, lr
 800d95e:	46f4      	mov	ip, lr
 800d960:	d815      	bhi.n	800d98e <rshift+0x7e>
 800d962:	1a9a      	subs	r2, r3, r2
 800d964:	0092      	lsls	r2, r2, #2
 800d966:	3a04      	subs	r2, #4
 800d968:	3501      	adds	r5, #1
 800d96a:	42ae      	cmp	r6, r5
 800d96c:	bf38      	it	cc
 800d96e:	2200      	movcc	r2, #0
 800d970:	18a3      	adds	r3, r4, r2
 800d972:	50a7      	str	r7, [r4, r2]
 800d974:	b107      	cbz	r7, 800d978 <rshift+0x68>
 800d976:	3304      	adds	r3, #4
 800d978:	1b1a      	subs	r2, r3, r4
 800d97a:	42a3      	cmp	r3, r4
 800d97c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d980:	bf08      	it	eq
 800d982:	2300      	moveq	r3, #0
 800d984:	6102      	str	r2, [r0, #16]
 800d986:	bf08      	it	eq
 800d988:	6143      	streq	r3, [r0, #20]
 800d98a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d98e:	f8dc c000 	ldr.w	ip, [ip]
 800d992:	fa0c fc08 	lsl.w	ip, ip, r8
 800d996:	ea4c 0707 	orr.w	r7, ip, r7
 800d99a:	f849 7b04 	str.w	r7, [r9], #4
 800d99e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d9a2:	40cf      	lsrs	r7, r1
 800d9a4:	e7da      	b.n	800d95c <rshift+0x4c>
 800d9a6:	f851 cb04 	ldr.w	ip, [r1], #4
 800d9aa:	f847 cf04 	str.w	ip, [r7, #4]!
 800d9ae:	e7c3      	b.n	800d938 <rshift+0x28>
 800d9b0:	4623      	mov	r3, r4
 800d9b2:	e7e1      	b.n	800d978 <rshift+0x68>

0800d9b4 <__hexdig_fun>:
 800d9b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d9b8:	2b09      	cmp	r3, #9
 800d9ba:	d802      	bhi.n	800d9c2 <__hexdig_fun+0xe>
 800d9bc:	3820      	subs	r0, #32
 800d9be:	b2c0      	uxtb	r0, r0
 800d9c0:	4770      	bx	lr
 800d9c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d9c6:	2b05      	cmp	r3, #5
 800d9c8:	d801      	bhi.n	800d9ce <__hexdig_fun+0x1a>
 800d9ca:	3847      	subs	r0, #71	; 0x47
 800d9cc:	e7f7      	b.n	800d9be <__hexdig_fun+0xa>
 800d9ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d9d2:	2b05      	cmp	r3, #5
 800d9d4:	d801      	bhi.n	800d9da <__hexdig_fun+0x26>
 800d9d6:	3827      	subs	r0, #39	; 0x27
 800d9d8:	e7f1      	b.n	800d9be <__hexdig_fun+0xa>
 800d9da:	2000      	movs	r0, #0
 800d9dc:	4770      	bx	lr
	...

0800d9e0 <__gethex>:
 800d9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e4:	ed2d 8b02 	vpush	{d8}
 800d9e8:	b089      	sub	sp, #36	; 0x24
 800d9ea:	ee08 0a10 	vmov	s16, r0
 800d9ee:	9304      	str	r3, [sp, #16]
 800d9f0:	4bb4      	ldr	r3, [pc, #720]	; (800dcc4 <__gethex+0x2e4>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	9301      	str	r3, [sp, #4]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	468b      	mov	fp, r1
 800d9fa:	4690      	mov	r8, r2
 800d9fc:	f7f2 fbf0 	bl	80001e0 <strlen>
 800da00:	9b01      	ldr	r3, [sp, #4]
 800da02:	f8db 2000 	ldr.w	r2, [fp]
 800da06:	4403      	add	r3, r0
 800da08:	4682      	mov	sl, r0
 800da0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800da0e:	9305      	str	r3, [sp, #20]
 800da10:	1c93      	adds	r3, r2, #2
 800da12:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800da16:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800da1a:	32fe      	adds	r2, #254	; 0xfe
 800da1c:	18d1      	adds	r1, r2, r3
 800da1e:	461f      	mov	r7, r3
 800da20:	f813 0b01 	ldrb.w	r0, [r3], #1
 800da24:	9100      	str	r1, [sp, #0]
 800da26:	2830      	cmp	r0, #48	; 0x30
 800da28:	d0f8      	beq.n	800da1c <__gethex+0x3c>
 800da2a:	f7ff ffc3 	bl	800d9b4 <__hexdig_fun>
 800da2e:	4604      	mov	r4, r0
 800da30:	2800      	cmp	r0, #0
 800da32:	d13a      	bne.n	800daaa <__gethex+0xca>
 800da34:	9901      	ldr	r1, [sp, #4]
 800da36:	4652      	mov	r2, sl
 800da38:	4638      	mov	r0, r7
 800da3a:	f001 f9b1 	bl	800eda0 <strncmp>
 800da3e:	4605      	mov	r5, r0
 800da40:	2800      	cmp	r0, #0
 800da42:	d168      	bne.n	800db16 <__gethex+0x136>
 800da44:	f817 000a 	ldrb.w	r0, [r7, sl]
 800da48:	eb07 060a 	add.w	r6, r7, sl
 800da4c:	f7ff ffb2 	bl	800d9b4 <__hexdig_fun>
 800da50:	2800      	cmp	r0, #0
 800da52:	d062      	beq.n	800db1a <__gethex+0x13a>
 800da54:	4633      	mov	r3, r6
 800da56:	7818      	ldrb	r0, [r3, #0]
 800da58:	2830      	cmp	r0, #48	; 0x30
 800da5a:	461f      	mov	r7, r3
 800da5c:	f103 0301 	add.w	r3, r3, #1
 800da60:	d0f9      	beq.n	800da56 <__gethex+0x76>
 800da62:	f7ff ffa7 	bl	800d9b4 <__hexdig_fun>
 800da66:	2301      	movs	r3, #1
 800da68:	fab0 f480 	clz	r4, r0
 800da6c:	0964      	lsrs	r4, r4, #5
 800da6e:	4635      	mov	r5, r6
 800da70:	9300      	str	r3, [sp, #0]
 800da72:	463a      	mov	r2, r7
 800da74:	4616      	mov	r6, r2
 800da76:	3201      	adds	r2, #1
 800da78:	7830      	ldrb	r0, [r6, #0]
 800da7a:	f7ff ff9b 	bl	800d9b4 <__hexdig_fun>
 800da7e:	2800      	cmp	r0, #0
 800da80:	d1f8      	bne.n	800da74 <__gethex+0x94>
 800da82:	9901      	ldr	r1, [sp, #4]
 800da84:	4652      	mov	r2, sl
 800da86:	4630      	mov	r0, r6
 800da88:	f001 f98a 	bl	800eda0 <strncmp>
 800da8c:	b980      	cbnz	r0, 800dab0 <__gethex+0xd0>
 800da8e:	b94d      	cbnz	r5, 800daa4 <__gethex+0xc4>
 800da90:	eb06 050a 	add.w	r5, r6, sl
 800da94:	462a      	mov	r2, r5
 800da96:	4616      	mov	r6, r2
 800da98:	3201      	adds	r2, #1
 800da9a:	7830      	ldrb	r0, [r6, #0]
 800da9c:	f7ff ff8a 	bl	800d9b4 <__hexdig_fun>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d1f8      	bne.n	800da96 <__gethex+0xb6>
 800daa4:	1bad      	subs	r5, r5, r6
 800daa6:	00ad      	lsls	r5, r5, #2
 800daa8:	e004      	b.n	800dab4 <__gethex+0xd4>
 800daaa:	2400      	movs	r4, #0
 800daac:	4625      	mov	r5, r4
 800daae:	e7e0      	b.n	800da72 <__gethex+0x92>
 800dab0:	2d00      	cmp	r5, #0
 800dab2:	d1f7      	bne.n	800daa4 <__gethex+0xc4>
 800dab4:	7833      	ldrb	r3, [r6, #0]
 800dab6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800daba:	2b50      	cmp	r3, #80	; 0x50
 800dabc:	d13b      	bne.n	800db36 <__gethex+0x156>
 800dabe:	7873      	ldrb	r3, [r6, #1]
 800dac0:	2b2b      	cmp	r3, #43	; 0x2b
 800dac2:	d02c      	beq.n	800db1e <__gethex+0x13e>
 800dac4:	2b2d      	cmp	r3, #45	; 0x2d
 800dac6:	d02e      	beq.n	800db26 <__gethex+0x146>
 800dac8:	1c71      	adds	r1, r6, #1
 800daca:	f04f 0900 	mov.w	r9, #0
 800dace:	7808      	ldrb	r0, [r1, #0]
 800dad0:	f7ff ff70 	bl	800d9b4 <__hexdig_fun>
 800dad4:	1e43      	subs	r3, r0, #1
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	2b18      	cmp	r3, #24
 800dada:	d82c      	bhi.n	800db36 <__gethex+0x156>
 800dadc:	f1a0 0210 	sub.w	r2, r0, #16
 800dae0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dae4:	f7ff ff66 	bl	800d9b4 <__hexdig_fun>
 800dae8:	1e43      	subs	r3, r0, #1
 800daea:	b2db      	uxtb	r3, r3
 800daec:	2b18      	cmp	r3, #24
 800daee:	d91d      	bls.n	800db2c <__gethex+0x14c>
 800daf0:	f1b9 0f00 	cmp.w	r9, #0
 800daf4:	d000      	beq.n	800daf8 <__gethex+0x118>
 800daf6:	4252      	negs	r2, r2
 800daf8:	4415      	add	r5, r2
 800dafa:	f8cb 1000 	str.w	r1, [fp]
 800dafe:	b1e4      	cbz	r4, 800db3a <__gethex+0x15a>
 800db00:	9b00      	ldr	r3, [sp, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	bf14      	ite	ne
 800db06:	2700      	movne	r7, #0
 800db08:	2706      	moveq	r7, #6
 800db0a:	4638      	mov	r0, r7
 800db0c:	b009      	add	sp, #36	; 0x24
 800db0e:	ecbd 8b02 	vpop	{d8}
 800db12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db16:	463e      	mov	r6, r7
 800db18:	4625      	mov	r5, r4
 800db1a:	2401      	movs	r4, #1
 800db1c:	e7ca      	b.n	800dab4 <__gethex+0xd4>
 800db1e:	f04f 0900 	mov.w	r9, #0
 800db22:	1cb1      	adds	r1, r6, #2
 800db24:	e7d3      	b.n	800dace <__gethex+0xee>
 800db26:	f04f 0901 	mov.w	r9, #1
 800db2a:	e7fa      	b.n	800db22 <__gethex+0x142>
 800db2c:	230a      	movs	r3, #10
 800db2e:	fb03 0202 	mla	r2, r3, r2, r0
 800db32:	3a10      	subs	r2, #16
 800db34:	e7d4      	b.n	800dae0 <__gethex+0x100>
 800db36:	4631      	mov	r1, r6
 800db38:	e7df      	b.n	800dafa <__gethex+0x11a>
 800db3a:	1bf3      	subs	r3, r6, r7
 800db3c:	3b01      	subs	r3, #1
 800db3e:	4621      	mov	r1, r4
 800db40:	2b07      	cmp	r3, #7
 800db42:	dc0b      	bgt.n	800db5c <__gethex+0x17c>
 800db44:	ee18 0a10 	vmov	r0, s16
 800db48:	f000 fa8e 	bl	800e068 <_Balloc>
 800db4c:	4604      	mov	r4, r0
 800db4e:	b940      	cbnz	r0, 800db62 <__gethex+0x182>
 800db50:	4b5d      	ldr	r3, [pc, #372]	; (800dcc8 <__gethex+0x2e8>)
 800db52:	4602      	mov	r2, r0
 800db54:	21de      	movs	r1, #222	; 0xde
 800db56:	485d      	ldr	r0, [pc, #372]	; (800dccc <__gethex+0x2ec>)
 800db58:	f001 f944 	bl	800ede4 <__assert_func>
 800db5c:	3101      	adds	r1, #1
 800db5e:	105b      	asrs	r3, r3, #1
 800db60:	e7ee      	b.n	800db40 <__gethex+0x160>
 800db62:	f100 0914 	add.w	r9, r0, #20
 800db66:	f04f 0b00 	mov.w	fp, #0
 800db6a:	f1ca 0301 	rsb	r3, sl, #1
 800db6e:	f8cd 9008 	str.w	r9, [sp, #8]
 800db72:	f8cd b000 	str.w	fp, [sp]
 800db76:	9306      	str	r3, [sp, #24]
 800db78:	42b7      	cmp	r7, r6
 800db7a:	d340      	bcc.n	800dbfe <__gethex+0x21e>
 800db7c:	9802      	ldr	r0, [sp, #8]
 800db7e:	9b00      	ldr	r3, [sp, #0]
 800db80:	f840 3b04 	str.w	r3, [r0], #4
 800db84:	eba0 0009 	sub.w	r0, r0, r9
 800db88:	1080      	asrs	r0, r0, #2
 800db8a:	0146      	lsls	r6, r0, #5
 800db8c:	6120      	str	r0, [r4, #16]
 800db8e:	4618      	mov	r0, r3
 800db90:	f000 fb5c 	bl	800e24c <__hi0bits>
 800db94:	1a30      	subs	r0, r6, r0
 800db96:	f8d8 6000 	ldr.w	r6, [r8]
 800db9a:	42b0      	cmp	r0, r6
 800db9c:	dd63      	ble.n	800dc66 <__gethex+0x286>
 800db9e:	1b87      	subs	r7, r0, r6
 800dba0:	4639      	mov	r1, r7
 800dba2:	4620      	mov	r0, r4
 800dba4:	f000 ff00 	bl	800e9a8 <__any_on>
 800dba8:	4682      	mov	sl, r0
 800dbaa:	b1a8      	cbz	r0, 800dbd8 <__gethex+0x1f8>
 800dbac:	1e7b      	subs	r3, r7, #1
 800dbae:	1159      	asrs	r1, r3, #5
 800dbb0:	f003 021f 	and.w	r2, r3, #31
 800dbb4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dbb8:	f04f 0a01 	mov.w	sl, #1
 800dbbc:	fa0a f202 	lsl.w	r2, sl, r2
 800dbc0:	420a      	tst	r2, r1
 800dbc2:	d009      	beq.n	800dbd8 <__gethex+0x1f8>
 800dbc4:	4553      	cmp	r3, sl
 800dbc6:	dd05      	ble.n	800dbd4 <__gethex+0x1f4>
 800dbc8:	1eb9      	subs	r1, r7, #2
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f000 feec 	bl	800e9a8 <__any_on>
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d145      	bne.n	800dc60 <__gethex+0x280>
 800dbd4:	f04f 0a02 	mov.w	sl, #2
 800dbd8:	4639      	mov	r1, r7
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f7ff fe98 	bl	800d910 <rshift>
 800dbe0:	443d      	add	r5, r7
 800dbe2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbe6:	42ab      	cmp	r3, r5
 800dbe8:	da4c      	bge.n	800dc84 <__gethex+0x2a4>
 800dbea:	ee18 0a10 	vmov	r0, s16
 800dbee:	4621      	mov	r1, r4
 800dbf0:	f000 fa7a 	bl	800e0e8 <_Bfree>
 800dbf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	6013      	str	r3, [r2, #0]
 800dbfa:	27a3      	movs	r7, #163	; 0xa3
 800dbfc:	e785      	b.n	800db0a <__gethex+0x12a>
 800dbfe:	1e73      	subs	r3, r6, #1
 800dc00:	9a05      	ldr	r2, [sp, #20]
 800dc02:	9303      	str	r3, [sp, #12]
 800dc04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d019      	beq.n	800dc40 <__gethex+0x260>
 800dc0c:	f1bb 0f20 	cmp.w	fp, #32
 800dc10:	d107      	bne.n	800dc22 <__gethex+0x242>
 800dc12:	9b02      	ldr	r3, [sp, #8]
 800dc14:	9a00      	ldr	r2, [sp, #0]
 800dc16:	f843 2b04 	str.w	r2, [r3], #4
 800dc1a:	9302      	str	r3, [sp, #8]
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	9300      	str	r3, [sp, #0]
 800dc20:	469b      	mov	fp, r3
 800dc22:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dc26:	f7ff fec5 	bl	800d9b4 <__hexdig_fun>
 800dc2a:	9b00      	ldr	r3, [sp, #0]
 800dc2c:	f000 000f 	and.w	r0, r0, #15
 800dc30:	fa00 f00b 	lsl.w	r0, r0, fp
 800dc34:	4303      	orrs	r3, r0
 800dc36:	9300      	str	r3, [sp, #0]
 800dc38:	f10b 0b04 	add.w	fp, fp, #4
 800dc3c:	9b03      	ldr	r3, [sp, #12]
 800dc3e:	e00d      	b.n	800dc5c <__gethex+0x27c>
 800dc40:	9b03      	ldr	r3, [sp, #12]
 800dc42:	9a06      	ldr	r2, [sp, #24]
 800dc44:	4413      	add	r3, r2
 800dc46:	42bb      	cmp	r3, r7
 800dc48:	d3e0      	bcc.n	800dc0c <__gethex+0x22c>
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	9901      	ldr	r1, [sp, #4]
 800dc4e:	9307      	str	r3, [sp, #28]
 800dc50:	4652      	mov	r2, sl
 800dc52:	f001 f8a5 	bl	800eda0 <strncmp>
 800dc56:	9b07      	ldr	r3, [sp, #28]
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d1d7      	bne.n	800dc0c <__gethex+0x22c>
 800dc5c:	461e      	mov	r6, r3
 800dc5e:	e78b      	b.n	800db78 <__gethex+0x198>
 800dc60:	f04f 0a03 	mov.w	sl, #3
 800dc64:	e7b8      	b.n	800dbd8 <__gethex+0x1f8>
 800dc66:	da0a      	bge.n	800dc7e <__gethex+0x29e>
 800dc68:	1a37      	subs	r7, r6, r0
 800dc6a:	4621      	mov	r1, r4
 800dc6c:	ee18 0a10 	vmov	r0, s16
 800dc70:	463a      	mov	r2, r7
 800dc72:	f000 fc55 	bl	800e520 <__lshift>
 800dc76:	1bed      	subs	r5, r5, r7
 800dc78:	4604      	mov	r4, r0
 800dc7a:	f100 0914 	add.w	r9, r0, #20
 800dc7e:	f04f 0a00 	mov.w	sl, #0
 800dc82:	e7ae      	b.n	800dbe2 <__gethex+0x202>
 800dc84:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dc88:	42a8      	cmp	r0, r5
 800dc8a:	dd72      	ble.n	800dd72 <__gethex+0x392>
 800dc8c:	1b45      	subs	r5, r0, r5
 800dc8e:	42ae      	cmp	r6, r5
 800dc90:	dc36      	bgt.n	800dd00 <__gethex+0x320>
 800dc92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc96:	2b02      	cmp	r3, #2
 800dc98:	d02a      	beq.n	800dcf0 <__gethex+0x310>
 800dc9a:	2b03      	cmp	r3, #3
 800dc9c:	d02c      	beq.n	800dcf8 <__gethex+0x318>
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d11c      	bne.n	800dcdc <__gethex+0x2fc>
 800dca2:	42ae      	cmp	r6, r5
 800dca4:	d11a      	bne.n	800dcdc <__gethex+0x2fc>
 800dca6:	2e01      	cmp	r6, #1
 800dca8:	d112      	bne.n	800dcd0 <__gethex+0x2f0>
 800dcaa:	9a04      	ldr	r2, [sp, #16]
 800dcac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dcb0:	6013      	str	r3, [r2, #0]
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	6123      	str	r3, [r4, #16]
 800dcb6:	f8c9 3000 	str.w	r3, [r9]
 800dcba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dcbc:	2762      	movs	r7, #98	; 0x62
 800dcbe:	601c      	str	r4, [r3, #0]
 800dcc0:	e723      	b.n	800db0a <__gethex+0x12a>
 800dcc2:	bf00      	nop
 800dcc4:	08012268 	.word	0x08012268
 800dcc8:	080121f0 	.word	0x080121f0
 800dccc:	08012201 	.word	0x08012201
 800dcd0:	1e71      	subs	r1, r6, #1
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	f000 fe68 	bl	800e9a8 <__any_on>
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	d1e6      	bne.n	800dcaa <__gethex+0x2ca>
 800dcdc:	ee18 0a10 	vmov	r0, s16
 800dce0:	4621      	mov	r1, r4
 800dce2:	f000 fa01 	bl	800e0e8 <_Bfree>
 800dce6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dce8:	2300      	movs	r3, #0
 800dcea:	6013      	str	r3, [r2, #0]
 800dcec:	2750      	movs	r7, #80	; 0x50
 800dcee:	e70c      	b.n	800db0a <__gethex+0x12a>
 800dcf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1f2      	bne.n	800dcdc <__gethex+0x2fc>
 800dcf6:	e7d8      	b.n	800dcaa <__gethex+0x2ca>
 800dcf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d1d5      	bne.n	800dcaa <__gethex+0x2ca>
 800dcfe:	e7ed      	b.n	800dcdc <__gethex+0x2fc>
 800dd00:	1e6f      	subs	r7, r5, #1
 800dd02:	f1ba 0f00 	cmp.w	sl, #0
 800dd06:	d131      	bne.n	800dd6c <__gethex+0x38c>
 800dd08:	b127      	cbz	r7, 800dd14 <__gethex+0x334>
 800dd0a:	4639      	mov	r1, r7
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f000 fe4b 	bl	800e9a8 <__any_on>
 800dd12:	4682      	mov	sl, r0
 800dd14:	117b      	asrs	r3, r7, #5
 800dd16:	2101      	movs	r1, #1
 800dd18:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dd1c:	f007 071f 	and.w	r7, r7, #31
 800dd20:	fa01 f707 	lsl.w	r7, r1, r7
 800dd24:	421f      	tst	r7, r3
 800dd26:	4629      	mov	r1, r5
 800dd28:	4620      	mov	r0, r4
 800dd2a:	bf18      	it	ne
 800dd2c:	f04a 0a02 	orrne.w	sl, sl, #2
 800dd30:	1b76      	subs	r6, r6, r5
 800dd32:	f7ff fded 	bl	800d910 <rshift>
 800dd36:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dd3a:	2702      	movs	r7, #2
 800dd3c:	f1ba 0f00 	cmp.w	sl, #0
 800dd40:	d048      	beq.n	800ddd4 <__gethex+0x3f4>
 800dd42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	d015      	beq.n	800dd76 <__gethex+0x396>
 800dd4a:	2b03      	cmp	r3, #3
 800dd4c:	d017      	beq.n	800dd7e <__gethex+0x39e>
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d109      	bne.n	800dd66 <__gethex+0x386>
 800dd52:	f01a 0f02 	tst.w	sl, #2
 800dd56:	d006      	beq.n	800dd66 <__gethex+0x386>
 800dd58:	f8d9 0000 	ldr.w	r0, [r9]
 800dd5c:	ea4a 0a00 	orr.w	sl, sl, r0
 800dd60:	f01a 0f01 	tst.w	sl, #1
 800dd64:	d10e      	bne.n	800dd84 <__gethex+0x3a4>
 800dd66:	f047 0710 	orr.w	r7, r7, #16
 800dd6a:	e033      	b.n	800ddd4 <__gethex+0x3f4>
 800dd6c:	f04f 0a01 	mov.w	sl, #1
 800dd70:	e7d0      	b.n	800dd14 <__gethex+0x334>
 800dd72:	2701      	movs	r7, #1
 800dd74:	e7e2      	b.n	800dd3c <__gethex+0x35c>
 800dd76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd78:	f1c3 0301 	rsb	r3, r3, #1
 800dd7c:	9315      	str	r3, [sp, #84]	; 0x54
 800dd7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d0f0      	beq.n	800dd66 <__gethex+0x386>
 800dd84:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dd88:	f104 0314 	add.w	r3, r4, #20
 800dd8c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dd90:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dd94:	f04f 0c00 	mov.w	ip, #0
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd9e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dda2:	d01c      	beq.n	800ddde <__gethex+0x3fe>
 800dda4:	3201      	adds	r2, #1
 800dda6:	6002      	str	r2, [r0, #0]
 800dda8:	2f02      	cmp	r7, #2
 800ddaa:	f104 0314 	add.w	r3, r4, #20
 800ddae:	d13f      	bne.n	800de30 <__gethex+0x450>
 800ddb0:	f8d8 2000 	ldr.w	r2, [r8]
 800ddb4:	3a01      	subs	r2, #1
 800ddb6:	42b2      	cmp	r2, r6
 800ddb8:	d10a      	bne.n	800ddd0 <__gethex+0x3f0>
 800ddba:	1171      	asrs	r1, r6, #5
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ddc2:	f006 061f 	and.w	r6, r6, #31
 800ddc6:	fa02 f606 	lsl.w	r6, r2, r6
 800ddca:	421e      	tst	r6, r3
 800ddcc:	bf18      	it	ne
 800ddce:	4617      	movne	r7, r2
 800ddd0:	f047 0720 	orr.w	r7, r7, #32
 800ddd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ddd6:	601c      	str	r4, [r3, #0]
 800ddd8:	9b04      	ldr	r3, [sp, #16]
 800ddda:	601d      	str	r5, [r3, #0]
 800dddc:	e695      	b.n	800db0a <__gethex+0x12a>
 800ddde:	4299      	cmp	r1, r3
 800dde0:	f843 cc04 	str.w	ip, [r3, #-4]
 800dde4:	d8d8      	bhi.n	800dd98 <__gethex+0x3b8>
 800dde6:	68a3      	ldr	r3, [r4, #8]
 800dde8:	459b      	cmp	fp, r3
 800ddea:	db19      	blt.n	800de20 <__gethex+0x440>
 800ddec:	6861      	ldr	r1, [r4, #4]
 800ddee:	ee18 0a10 	vmov	r0, s16
 800ddf2:	3101      	adds	r1, #1
 800ddf4:	f000 f938 	bl	800e068 <_Balloc>
 800ddf8:	4681      	mov	r9, r0
 800ddfa:	b918      	cbnz	r0, 800de04 <__gethex+0x424>
 800ddfc:	4b1a      	ldr	r3, [pc, #104]	; (800de68 <__gethex+0x488>)
 800ddfe:	4602      	mov	r2, r0
 800de00:	2184      	movs	r1, #132	; 0x84
 800de02:	e6a8      	b.n	800db56 <__gethex+0x176>
 800de04:	6922      	ldr	r2, [r4, #16]
 800de06:	3202      	adds	r2, #2
 800de08:	f104 010c 	add.w	r1, r4, #12
 800de0c:	0092      	lsls	r2, r2, #2
 800de0e:	300c      	adds	r0, #12
 800de10:	f7fc ff69 	bl	800ace6 <memcpy>
 800de14:	4621      	mov	r1, r4
 800de16:	ee18 0a10 	vmov	r0, s16
 800de1a:	f000 f965 	bl	800e0e8 <_Bfree>
 800de1e:	464c      	mov	r4, r9
 800de20:	6923      	ldr	r3, [r4, #16]
 800de22:	1c5a      	adds	r2, r3, #1
 800de24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800de28:	6122      	str	r2, [r4, #16]
 800de2a:	2201      	movs	r2, #1
 800de2c:	615a      	str	r2, [r3, #20]
 800de2e:	e7bb      	b.n	800dda8 <__gethex+0x3c8>
 800de30:	6922      	ldr	r2, [r4, #16]
 800de32:	455a      	cmp	r2, fp
 800de34:	dd0b      	ble.n	800de4e <__gethex+0x46e>
 800de36:	2101      	movs	r1, #1
 800de38:	4620      	mov	r0, r4
 800de3a:	f7ff fd69 	bl	800d910 <rshift>
 800de3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de42:	3501      	adds	r5, #1
 800de44:	42ab      	cmp	r3, r5
 800de46:	f6ff aed0 	blt.w	800dbea <__gethex+0x20a>
 800de4a:	2701      	movs	r7, #1
 800de4c:	e7c0      	b.n	800ddd0 <__gethex+0x3f0>
 800de4e:	f016 061f 	ands.w	r6, r6, #31
 800de52:	d0fa      	beq.n	800de4a <__gethex+0x46a>
 800de54:	4453      	add	r3, sl
 800de56:	f1c6 0620 	rsb	r6, r6, #32
 800de5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800de5e:	f000 f9f5 	bl	800e24c <__hi0bits>
 800de62:	42b0      	cmp	r0, r6
 800de64:	dbe7      	blt.n	800de36 <__gethex+0x456>
 800de66:	e7f0      	b.n	800de4a <__gethex+0x46a>
 800de68:	080121f0 	.word	0x080121f0

0800de6c <L_shift>:
 800de6c:	f1c2 0208 	rsb	r2, r2, #8
 800de70:	0092      	lsls	r2, r2, #2
 800de72:	b570      	push	{r4, r5, r6, lr}
 800de74:	f1c2 0620 	rsb	r6, r2, #32
 800de78:	6843      	ldr	r3, [r0, #4]
 800de7a:	6804      	ldr	r4, [r0, #0]
 800de7c:	fa03 f506 	lsl.w	r5, r3, r6
 800de80:	432c      	orrs	r4, r5
 800de82:	40d3      	lsrs	r3, r2
 800de84:	6004      	str	r4, [r0, #0]
 800de86:	f840 3f04 	str.w	r3, [r0, #4]!
 800de8a:	4288      	cmp	r0, r1
 800de8c:	d3f4      	bcc.n	800de78 <L_shift+0xc>
 800de8e:	bd70      	pop	{r4, r5, r6, pc}

0800de90 <__match>:
 800de90:	b530      	push	{r4, r5, lr}
 800de92:	6803      	ldr	r3, [r0, #0]
 800de94:	3301      	adds	r3, #1
 800de96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de9a:	b914      	cbnz	r4, 800dea2 <__match+0x12>
 800de9c:	6003      	str	r3, [r0, #0]
 800de9e:	2001      	movs	r0, #1
 800dea0:	bd30      	pop	{r4, r5, pc}
 800dea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dea6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800deaa:	2d19      	cmp	r5, #25
 800deac:	bf98      	it	ls
 800deae:	3220      	addls	r2, #32
 800deb0:	42a2      	cmp	r2, r4
 800deb2:	d0f0      	beq.n	800de96 <__match+0x6>
 800deb4:	2000      	movs	r0, #0
 800deb6:	e7f3      	b.n	800dea0 <__match+0x10>

0800deb8 <__hexnan>:
 800deb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800debc:	680b      	ldr	r3, [r1, #0]
 800debe:	115e      	asrs	r6, r3, #5
 800dec0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dec4:	f013 031f 	ands.w	r3, r3, #31
 800dec8:	b087      	sub	sp, #28
 800deca:	bf18      	it	ne
 800decc:	3604      	addne	r6, #4
 800dece:	2500      	movs	r5, #0
 800ded0:	1f37      	subs	r7, r6, #4
 800ded2:	4690      	mov	r8, r2
 800ded4:	6802      	ldr	r2, [r0, #0]
 800ded6:	9301      	str	r3, [sp, #4]
 800ded8:	4682      	mov	sl, r0
 800deda:	f846 5c04 	str.w	r5, [r6, #-4]
 800dede:	46b9      	mov	r9, r7
 800dee0:	463c      	mov	r4, r7
 800dee2:	9502      	str	r5, [sp, #8]
 800dee4:	46ab      	mov	fp, r5
 800dee6:	7851      	ldrb	r1, [r2, #1]
 800dee8:	1c53      	adds	r3, r2, #1
 800deea:	9303      	str	r3, [sp, #12]
 800deec:	b341      	cbz	r1, 800df40 <__hexnan+0x88>
 800deee:	4608      	mov	r0, r1
 800def0:	9205      	str	r2, [sp, #20]
 800def2:	9104      	str	r1, [sp, #16]
 800def4:	f7ff fd5e 	bl	800d9b4 <__hexdig_fun>
 800def8:	2800      	cmp	r0, #0
 800defa:	d14f      	bne.n	800df9c <__hexnan+0xe4>
 800defc:	9904      	ldr	r1, [sp, #16]
 800defe:	9a05      	ldr	r2, [sp, #20]
 800df00:	2920      	cmp	r1, #32
 800df02:	d818      	bhi.n	800df36 <__hexnan+0x7e>
 800df04:	9b02      	ldr	r3, [sp, #8]
 800df06:	459b      	cmp	fp, r3
 800df08:	dd13      	ble.n	800df32 <__hexnan+0x7a>
 800df0a:	454c      	cmp	r4, r9
 800df0c:	d206      	bcs.n	800df1c <__hexnan+0x64>
 800df0e:	2d07      	cmp	r5, #7
 800df10:	dc04      	bgt.n	800df1c <__hexnan+0x64>
 800df12:	462a      	mov	r2, r5
 800df14:	4649      	mov	r1, r9
 800df16:	4620      	mov	r0, r4
 800df18:	f7ff ffa8 	bl	800de6c <L_shift>
 800df1c:	4544      	cmp	r4, r8
 800df1e:	d950      	bls.n	800dfc2 <__hexnan+0x10a>
 800df20:	2300      	movs	r3, #0
 800df22:	f1a4 0904 	sub.w	r9, r4, #4
 800df26:	f844 3c04 	str.w	r3, [r4, #-4]
 800df2a:	f8cd b008 	str.w	fp, [sp, #8]
 800df2e:	464c      	mov	r4, r9
 800df30:	461d      	mov	r5, r3
 800df32:	9a03      	ldr	r2, [sp, #12]
 800df34:	e7d7      	b.n	800dee6 <__hexnan+0x2e>
 800df36:	2929      	cmp	r1, #41	; 0x29
 800df38:	d156      	bne.n	800dfe8 <__hexnan+0x130>
 800df3a:	3202      	adds	r2, #2
 800df3c:	f8ca 2000 	str.w	r2, [sl]
 800df40:	f1bb 0f00 	cmp.w	fp, #0
 800df44:	d050      	beq.n	800dfe8 <__hexnan+0x130>
 800df46:	454c      	cmp	r4, r9
 800df48:	d206      	bcs.n	800df58 <__hexnan+0xa0>
 800df4a:	2d07      	cmp	r5, #7
 800df4c:	dc04      	bgt.n	800df58 <__hexnan+0xa0>
 800df4e:	462a      	mov	r2, r5
 800df50:	4649      	mov	r1, r9
 800df52:	4620      	mov	r0, r4
 800df54:	f7ff ff8a 	bl	800de6c <L_shift>
 800df58:	4544      	cmp	r4, r8
 800df5a:	d934      	bls.n	800dfc6 <__hexnan+0x10e>
 800df5c:	f1a8 0204 	sub.w	r2, r8, #4
 800df60:	4623      	mov	r3, r4
 800df62:	f853 1b04 	ldr.w	r1, [r3], #4
 800df66:	f842 1f04 	str.w	r1, [r2, #4]!
 800df6a:	429f      	cmp	r7, r3
 800df6c:	d2f9      	bcs.n	800df62 <__hexnan+0xaa>
 800df6e:	1b3b      	subs	r3, r7, r4
 800df70:	f023 0303 	bic.w	r3, r3, #3
 800df74:	3304      	adds	r3, #4
 800df76:	3401      	adds	r4, #1
 800df78:	3e03      	subs	r6, #3
 800df7a:	42b4      	cmp	r4, r6
 800df7c:	bf88      	it	hi
 800df7e:	2304      	movhi	r3, #4
 800df80:	4443      	add	r3, r8
 800df82:	2200      	movs	r2, #0
 800df84:	f843 2b04 	str.w	r2, [r3], #4
 800df88:	429f      	cmp	r7, r3
 800df8a:	d2fb      	bcs.n	800df84 <__hexnan+0xcc>
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	b91b      	cbnz	r3, 800df98 <__hexnan+0xe0>
 800df90:	4547      	cmp	r7, r8
 800df92:	d127      	bne.n	800dfe4 <__hexnan+0x12c>
 800df94:	2301      	movs	r3, #1
 800df96:	603b      	str	r3, [r7, #0]
 800df98:	2005      	movs	r0, #5
 800df9a:	e026      	b.n	800dfea <__hexnan+0x132>
 800df9c:	3501      	adds	r5, #1
 800df9e:	2d08      	cmp	r5, #8
 800dfa0:	f10b 0b01 	add.w	fp, fp, #1
 800dfa4:	dd06      	ble.n	800dfb4 <__hexnan+0xfc>
 800dfa6:	4544      	cmp	r4, r8
 800dfa8:	d9c3      	bls.n	800df32 <__hexnan+0x7a>
 800dfaa:	2300      	movs	r3, #0
 800dfac:	f844 3c04 	str.w	r3, [r4, #-4]
 800dfb0:	2501      	movs	r5, #1
 800dfb2:	3c04      	subs	r4, #4
 800dfb4:	6822      	ldr	r2, [r4, #0]
 800dfb6:	f000 000f 	and.w	r0, r0, #15
 800dfba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800dfbe:	6022      	str	r2, [r4, #0]
 800dfc0:	e7b7      	b.n	800df32 <__hexnan+0x7a>
 800dfc2:	2508      	movs	r5, #8
 800dfc4:	e7b5      	b.n	800df32 <__hexnan+0x7a>
 800dfc6:	9b01      	ldr	r3, [sp, #4]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d0df      	beq.n	800df8c <__hexnan+0xd4>
 800dfcc:	f04f 32ff 	mov.w	r2, #4294967295
 800dfd0:	f1c3 0320 	rsb	r3, r3, #32
 800dfd4:	fa22 f303 	lsr.w	r3, r2, r3
 800dfd8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dfdc:	401a      	ands	r2, r3
 800dfde:	f846 2c04 	str.w	r2, [r6, #-4]
 800dfe2:	e7d3      	b.n	800df8c <__hexnan+0xd4>
 800dfe4:	3f04      	subs	r7, #4
 800dfe6:	e7d1      	b.n	800df8c <__hexnan+0xd4>
 800dfe8:	2004      	movs	r0, #4
 800dfea:	b007      	add	sp, #28
 800dfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dff0 <_localeconv_r>:
 800dff0:	4800      	ldr	r0, [pc, #0]	; (800dff4 <_localeconv_r+0x4>)
 800dff2:	4770      	bx	lr
 800dff4:	20000190 	.word	0x20000190

0800dff8 <_lseek_r>:
 800dff8:	b538      	push	{r3, r4, r5, lr}
 800dffa:	4d07      	ldr	r5, [pc, #28]	; (800e018 <_lseek_r+0x20>)
 800dffc:	4604      	mov	r4, r0
 800dffe:	4608      	mov	r0, r1
 800e000:	4611      	mov	r1, r2
 800e002:	2200      	movs	r2, #0
 800e004:	602a      	str	r2, [r5, #0]
 800e006:	461a      	mov	r2, r3
 800e008:	f7f4 f908 	bl	800221c <_lseek>
 800e00c:	1c43      	adds	r3, r0, #1
 800e00e:	d102      	bne.n	800e016 <_lseek_r+0x1e>
 800e010:	682b      	ldr	r3, [r5, #0]
 800e012:	b103      	cbz	r3, 800e016 <_lseek_r+0x1e>
 800e014:	6023      	str	r3, [r4, #0]
 800e016:	bd38      	pop	{r3, r4, r5, pc}
 800e018:	20004f44 	.word	0x20004f44

0800e01c <malloc>:
 800e01c:	4b02      	ldr	r3, [pc, #8]	; (800e028 <malloc+0xc>)
 800e01e:	4601      	mov	r1, r0
 800e020:	6818      	ldr	r0, [r3, #0]
 800e022:	f7fc be97 	b.w	800ad54 <_malloc_r>
 800e026:	bf00      	nop
 800e028:	20000038 	.word	0x20000038

0800e02c <__ascii_mbtowc>:
 800e02c:	b082      	sub	sp, #8
 800e02e:	b901      	cbnz	r1, 800e032 <__ascii_mbtowc+0x6>
 800e030:	a901      	add	r1, sp, #4
 800e032:	b142      	cbz	r2, 800e046 <__ascii_mbtowc+0x1a>
 800e034:	b14b      	cbz	r3, 800e04a <__ascii_mbtowc+0x1e>
 800e036:	7813      	ldrb	r3, [r2, #0]
 800e038:	600b      	str	r3, [r1, #0]
 800e03a:	7812      	ldrb	r2, [r2, #0]
 800e03c:	1e10      	subs	r0, r2, #0
 800e03e:	bf18      	it	ne
 800e040:	2001      	movne	r0, #1
 800e042:	b002      	add	sp, #8
 800e044:	4770      	bx	lr
 800e046:	4610      	mov	r0, r2
 800e048:	e7fb      	b.n	800e042 <__ascii_mbtowc+0x16>
 800e04a:	f06f 0001 	mvn.w	r0, #1
 800e04e:	e7f8      	b.n	800e042 <__ascii_mbtowc+0x16>

0800e050 <__malloc_lock>:
 800e050:	4801      	ldr	r0, [pc, #4]	; (800e058 <__malloc_lock+0x8>)
 800e052:	f7fc be46 	b.w	800ace2 <__retarget_lock_acquire_recursive>
 800e056:	bf00      	nop
 800e058:	20004f38 	.word	0x20004f38

0800e05c <__malloc_unlock>:
 800e05c:	4801      	ldr	r0, [pc, #4]	; (800e064 <__malloc_unlock+0x8>)
 800e05e:	f7fc be41 	b.w	800ace4 <__retarget_lock_release_recursive>
 800e062:	bf00      	nop
 800e064:	20004f38 	.word	0x20004f38

0800e068 <_Balloc>:
 800e068:	b570      	push	{r4, r5, r6, lr}
 800e06a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e06c:	4604      	mov	r4, r0
 800e06e:	460d      	mov	r5, r1
 800e070:	b976      	cbnz	r6, 800e090 <_Balloc+0x28>
 800e072:	2010      	movs	r0, #16
 800e074:	f7ff ffd2 	bl	800e01c <malloc>
 800e078:	4602      	mov	r2, r0
 800e07a:	6260      	str	r0, [r4, #36]	; 0x24
 800e07c:	b920      	cbnz	r0, 800e088 <_Balloc+0x20>
 800e07e:	4b18      	ldr	r3, [pc, #96]	; (800e0e0 <_Balloc+0x78>)
 800e080:	4818      	ldr	r0, [pc, #96]	; (800e0e4 <_Balloc+0x7c>)
 800e082:	2166      	movs	r1, #102	; 0x66
 800e084:	f000 feae 	bl	800ede4 <__assert_func>
 800e088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e08c:	6006      	str	r6, [r0, #0]
 800e08e:	60c6      	str	r6, [r0, #12]
 800e090:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e092:	68f3      	ldr	r3, [r6, #12]
 800e094:	b183      	cbz	r3, 800e0b8 <_Balloc+0x50>
 800e096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e098:	68db      	ldr	r3, [r3, #12]
 800e09a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e09e:	b9b8      	cbnz	r0, 800e0d0 <_Balloc+0x68>
 800e0a0:	2101      	movs	r1, #1
 800e0a2:	fa01 f605 	lsl.w	r6, r1, r5
 800e0a6:	1d72      	adds	r2, r6, #5
 800e0a8:	0092      	lsls	r2, r2, #2
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	f000 fc9d 	bl	800e9ea <_calloc_r>
 800e0b0:	b160      	cbz	r0, 800e0cc <_Balloc+0x64>
 800e0b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e0b6:	e00e      	b.n	800e0d6 <_Balloc+0x6e>
 800e0b8:	2221      	movs	r2, #33	; 0x21
 800e0ba:	2104      	movs	r1, #4
 800e0bc:	4620      	mov	r0, r4
 800e0be:	f000 fc94 	bl	800e9ea <_calloc_r>
 800e0c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0c4:	60f0      	str	r0, [r6, #12]
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d1e4      	bne.n	800e096 <_Balloc+0x2e>
 800e0cc:	2000      	movs	r0, #0
 800e0ce:	bd70      	pop	{r4, r5, r6, pc}
 800e0d0:	6802      	ldr	r2, [r0, #0]
 800e0d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e0dc:	e7f7      	b.n	800e0ce <_Balloc+0x66>
 800e0de:	bf00      	nop
 800e0e0:	0801217e 	.word	0x0801217e
 800e0e4:	0801227c 	.word	0x0801227c

0800e0e8 <_Bfree>:
 800e0e8:	b570      	push	{r4, r5, r6, lr}
 800e0ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e0ec:	4605      	mov	r5, r0
 800e0ee:	460c      	mov	r4, r1
 800e0f0:	b976      	cbnz	r6, 800e110 <_Bfree+0x28>
 800e0f2:	2010      	movs	r0, #16
 800e0f4:	f7ff ff92 	bl	800e01c <malloc>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	6268      	str	r0, [r5, #36]	; 0x24
 800e0fc:	b920      	cbnz	r0, 800e108 <_Bfree+0x20>
 800e0fe:	4b09      	ldr	r3, [pc, #36]	; (800e124 <_Bfree+0x3c>)
 800e100:	4809      	ldr	r0, [pc, #36]	; (800e128 <_Bfree+0x40>)
 800e102:	218a      	movs	r1, #138	; 0x8a
 800e104:	f000 fe6e 	bl	800ede4 <__assert_func>
 800e108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e10c:	6006      	str	r6, [r0, #0]
 800e10e:	60c6      	str	r6, [r0, #12]
 800e110:	b13c      	cbz	r4, 800e122 <_Bfree+0x3a>
 800e112:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e114:	6862      	ldr	r2, [r4, #4]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e11c:	6021      	str	r1, [r4, #0]
 800e11e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e122:	bd70      	pop	{r4, r5, r6, pc}
 800e124:	0801217e 	.word	0x0801217e
 800e128:	0801227c 	.word	0x0801227c

0800e12c <__multadd>:
 800e12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e130:	690d      	ldr	r5, [r1, #16]
 800e132:	4607      	mov	r7, r0
 800e134:	460c      	mov	r4, r1
 800e136:	461e      	mov	r6, r3
 800e138:	f101 0c14 	add.w	ip, r1, #20
 800e13c:	2000      	movs	r0, #0
 800e13e:	f8dc 3000 	ldr.w	r3, [ip]
 800e142:	b299      	uxth	r1, r3
 800e144:	fb02 6101 	mla	r1, r2, r1, r6
 800e148:	0c1e      	lsrs	r6, r3, #16
 800e14a:	0c0b      	lsrs	r3, r1, #16
 800e14c:	fb02 3306 	mla	r3, r2, r6, r3
 800e150:	b289      	uxth	r1, r1
 800e152:	3001      	adds	r0, #1
 800e154:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e158:	4285      	cmp	r5, r0
 800e15a:	f84c 1b04 	str.w	r1, [ip], #4
 800e15e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e162:	dcec      	bgt.n	800e13e <__multadd+0x12>
 800e164:	b30e      	cbz	r6, 800e1aa <__multadd+0x7e>
 800e166:	68a3      	ldr	r3, [r4, #8]
 800e168:	42ab      	cmp	r3, r5
 800e16a:	dc19      	bgt.n	800e1a0 <__multadd+0x74>
 800e16c:	6861      	ldr	r1, [r4, #4]
 800e16e:	4638      	mov	r0, r7
 800e170:	3101      	adds	r1, #1
 800e172:	f7ff ff79 	bl	800e068 <_Balloc>
 800e176:	4680      	mov	r8, r0
 800e178:	b928      	cbnz	r0, 800e186 <__multadd+0x5a>
 800e17a:	4602      	mov	r2, r0
 800e17c:	4b0c      	ldr	r3, [pc, #48]	; (800e1b0 <__multadd+0x84>)
 800e17e:	480d      	ldr	r0, [pc, #52]	; (800e1b4 <__multadd+0x88>)
 800e180:	21b5      	movs	r1, #181	; 0xb5
 800e182:	f000 fe2f 	bl	800ede4 <__assert_func>
 800e186:	6922      	ldr	r2, [r4, #16]
 800e188:	3202      	adds	r2, #2
 800e18a:	f104 010c 	add.w	r1, r4, #12
 800e18e:	0092      	lsls	r2, r2, #2
 800e190:	300c      	adds	r0, #12
 800e192:	f7fc fda8 	bl	800ace6 <memcpy>
 800e196:	4621      	mov	r1, r4
 800e198:	4638      	mov	r0, r7
 800e19a:	f7ff ffa5 	bl	800e0e8 <_Bfree>
 800e19e:	4644      	mov	r4, r8
 800e1a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1a4:	3501      	adds	r5, #1
 800e1a6:	615e      	str	r6, [r3, #20]
 800e1a8:	6125      	str	r5, [r4, #16]
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1b0:	080121f0 	.word	0x080121f0
 800e1b4:	0801227c 	.word	0x0801227c

0800e1b8 <__s2b>:
 800e1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1bc:	460c      	mov	r4, r1
 800e1be:	4615      	mov	r5, r2
 800e1c0:	461f      	mov	r7, r3
 800e1c2:	2209      	movs	r2, #9
 800e1c4:	3308      	adds	r3, #8
 800e1c6:	4606      	mov	r6, r0
 800e1c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1cc:	2100      	movs	r1, #0
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	db09      	blt.n	800e1e8 <__s2b+0x30>
 800e1d4:	4630      	mov	r0, r6
 800e1d6:	f7ff ff47 	bl	800e068 <_Balloc>
 800e1da:	b940      	cbnz	r0, 800e1ee <__s2b+0x36>
 800e1dc:	4602      	mov	r2, r0
 800e1de:	4b19      	ldr	r3, [pc, #100]	; (800e244 <__s2b+0x8c>)
 800e1e0:	4819      	ldr	r0, [pc, #100]	; (800e248 <__s2b+0x90>)
 800e1e2:	21ce      	movs	r1, #206	; 0xce
 800e1e4:	f000 fdfe 	bl	800ede4 <__assert_func>
 800e1e8:	0052      	lsls	r2, r2, #1
 800e1ea:	3101      	adds	r1, #1
 800e1ec:	e7f0      	b.n	800e1d0 <__s2b+0x18>
 800e1ee:	9b08      	ldr	r3, [sp, #32]
 800e1f0:	6143      	str	r3, [r0, #20]
 800e1f2:	2d09      	cmp	r5, #9
 800e1f4:	f04f 0301 	mov.w	r3, #1
 800e1f8:	6103      	str	r3, [r0, #16]
 800e1fa:	dd16      	ble.n	800e22a <__s2b+0x72>
 800e1fc:	f104 0909 	add.w	r9, r4, #9
 800e200:	46c8      	mov	r8, r9
 800e202:	442c      	add	r4, r5
 800e204:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e208:	4601      	mov	r1, r0
 800e20a:	3b30      	subs	r3, #48	; 0x30
 800e20c:	220a      	movs	r2, #10
 800e20e:	4630      	mov	r0, r6
 800e210:	f7ff ff8c 	bl	800e12c <__multadd>
 800e214:	45a0      	cmp	r8, r4
 800e216:	d1f5      	bne.n	800e204 <__s2b+0x4c>
 800e218:	f1a5 0408 	sub.w	r4, r5, #8
 800e21c:	444c      	add	r4, r9
 800e21e:	1b2d      	subs	r5, r5, r4
 800e220:	1963      	adds	r3, r4, r5
 800e222:	42bb      	cmp	r3, r7
 800e224:	db04      	blt.n	800e230 <__s2b+0x78>
 800e226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e22a:	340a      	adds	r4, #10
 800e22c:	2509      	movs	r5, #9
 800e22e:	e7f6      	b.n	800e21e <__s2b+0x66>
 800e230:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e234:	4601      	mov	r1, r0
 800e236:	3b30      	subs	r3, #48	; 0x30
 800e238:	220a      	movs	r2, #10
 800e23a:	4630      	mov	r0, r6
 800e23c:	f7ff ff76 	bl	800e12c <__multadd>
 800e240:	e7ee      	b.n	800e220 <__s2b+0x68>
 800e242:	bf00      	nop
 800e244:	080121f0 	.word	0x080121f0
 800e248:	0801227c 	.word	0x0801227c

0800e24c <__hi0bits>:
 800e24c:	0c03      	lsrs	r3, r0, #16
 800e24e:	041b      	lsls	r3, r3, #16
 800e250:	b9d3      	cbnz	r3, 800e288 <__hi0bits+0x3c>
 800e252:	0400      	lsls	r0, r0, #16
 800e254:	2310      	movs	r3, #16
 800e256:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e25a:	bf04      	itt	eq
 800e25c:	0200      	lsleq	r0, r0, #8
 800e25e:	3308      	addeq	r3, #8
 800e260:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e264:	bf04      	itt	eq
 800e266:	0100      	lsleq	r0, r0, #4
 800e268:	3304      	addeq	r3, #4
 800e26a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e26e:	bf04      	itt	eq
 800e270:	0080      	lsleq	r0, r0, #2
 800e272:	3302      	addeq	r3, #2
 800e274:	2800      	cmp	r0, #0
 800e276:	db05      	blt.n	800e284 <__hi0bits+0x38>
 800e278:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e27c:	f103 0301 	add.w	r3, r3, #1
 800e280:	bf08      	it	eq
 800e282:	2320      	moveq	r3, #32
 800e284:	4618      	mov	r0, r3
 800e286:	4770      	bx	lr
 800e288:	2300      	movs	r3, #0
 800e28a:	e7e4      	b.n	800e256 <__hi0bits+0xa>

0800e28c <__lo0bits>:
 800e28c:	6803      	ldr	r3, [r0, #0]
 800e28e:	f013 0207 	ands.w	r2, r3, #7
 800e292:	4601      	mov	r1, r0
 800e294:	d00b      	beq.n	800e2ae <__lo0bits+0x22>
 800e296:	07da      	lsls	r2, r3, #31
 800e298:	d423      	bmi.n	800e2e2 <__lo0bits+0x56>
 800e29a:	0798      	lsls	r0, r3, #30
 800e29c:	bf49      	itett	mi
 800e29e:	085b      	lsrmi	r3, r3, #1
 800e2a0:	089b      	lsrpl	r3, r3, #2
 800e2a2:	2001      	movmi	r0, #1
 800e2a4:	600b      	strmi	r3, [r1, #0]
 800e2a6:	bf5c      	itt	pl
 800e2a8:	600b      	strpl	r3, [r1, #0]
 800e2aa:	2002      	movpl	r0, #2
 800e2ac:	4770      	bx	lr
 800e2ae:	b298      	uxth	r0, r3
 800e2b0:	b9a8      	cbnz	r0, 800e2de <__lo0bits+0x52>
 800e2b2:	0c1b      	lsrs	r3, r3, #16
 800e2b4:	2010      	movs	r0, #16
 800e2b6:	b2da      	uxtb	r2, r3
 800e2b8:	b90a      	cbnz	r2, 800e2be <__lo0bits+0x32>
 800e2ba:	3008      	adds	r0, #8
 800e2bc:	0a1b      	lsrs	r3, r3, #8
 800e2be:	071a      	lsls	r2, r3, #28
 800e2c0:	bf04      	itt	eq
 800e2c2:	091b      	lsreq	r3, r3, #4
 800e2c4:	3004      	addeq	r0, #4
 800e2c6:	079a      	lsls	r2, r3, #30
 800e2c8:	bf04      	itt	eq
 800e2ca:	089b      	lsreq	r3, r3, #2
 800e2cc:	3002      	addeq	r0, #2
 800e2ce:	07da      	lsls	r2, r3, #31
 800e2d0:	d403      	bmi.n	800e2da <__lo0bits+0x4e>
 800e2d2:	085b      	lsrs	r3, r3, #1
 800e2d4:	f100 0001 	add.w	r0, r0, #1
 800e2d8:	d005      	beq.n	800e2e6 <__lo0bits+0x5a>
 800e2da:	600b      	str	r3, [r1, #0]
 800e2dc:	4770      	bx	lr
 800e2de:	4610      	mov	r0, r2
 800e2e0:	e7e9      	b.n	800e2b6 <__lo0bits+0x2a>
 800e2e2:	2000      	movs	r0, #0
 800e2e4:	4770      	bx	lr
 800e2e6:	2020      	movs	r0, #32
 800e2e8:	4770      	bx	lr
	...

0800e2ec <__i2b>:
 800e2ec:	b510      	push	{r4, lr}
 800e2ee:	460c      	mov	r4, r1
 800e2f0:	2101      	movs	r1, #1
 800e2f2:	f7ff feb9 	bl	800e068 <_Balloc>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	b928      	cbnz	r0, 800e306 <__i2b+0x1a>
 800e2fa:	4b05      	ldr	r3, [pc, #20]	; (800e310 <__i2b+0x24>)
 800e2fc:	4805      	ldr	r0, [pc, #20]	; (800e314 <__i2b+0x28>)
 800e2fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e302:	f000 fd6f 	bl	800ede4 <__assert_func>
 800e306:	2301      	movs	r3, #1
 800e308:	6144      	str	r4, [r0, #20]
 800e30a:	6103      	str	r3, [r0, #16]
 800e30c:	bd10      	pop	{r4, pc}
 800e30e:	bf00      	nop
 800e310:	080121f0 	.word	0x080121f0
 800e314:	0801227c 	.word	0x0801227c

0800e318 <__multiply>:
 800e318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e31c:	4691      	mov	r9, r2
 800e31e:	690a      	ldr	r2, [r1, #16]
 800e320:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e324:	429a      	cmp	r2, r3
 800e326:	bfb8      	it	lt
 800e328:	460b      	movlt	r3, r1
 800e32a:	460c      	mov	r4, r1
 800e32c:	bfbc      	itt	lt
 800e32e:	464c      	movlt	r4, r9
 800e330:	4699      	movlt	r9, r3
 800e332:	6927      	ldr	r7, [r4, #16]
 800e334:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e338:	68a3      	ldr	r3, [r4, #8]
 800e33a:	6861      	ldr	r1, [r4, #4]
 800e33c:	eb07 060a 	add.w	r6, r7, sl
 800e340:	42b3      	cmp	r3, r6
 800e342:	b085      	sub	sp, #20
 800e344:	bfb8      	it	lt
 800e346:	3101      	addlt	r1, #1
 800e348:	f7ff fe8e 	bl	800e068 <_Balloc>
 800e34c:	b930      	cbnz	r0, 800e35c <__multiply+0x44>
 800e34e:	4602      	mov	r2, r0
 800e350:	4b44      	ldr	r3, [pc, #272]	; (800e464 <__multiply+0x14c>)
 800e352:	4845      	ldr	r0, [pc, #276]	; (800e468 <__multiply+0x150>)
 800e354:	f240 115d 	movw	r1, #349	; 0x15d
 800e358:	f000 fd44 	bl	800ede4 <__assert_func>
 800e35c:	f100 0514 	add.w	r5, r0, #20
 800e360:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e364:	462b      	mov	r3, r5
 800e366:	2200      	movs	r2, #0
 800e368:	4543      	cmp	r3, r8
 800e36a:	d321      	bcc.n	800e3b0 <__multiply+0x98>
 800e36c:	f104 0314 	add.w	r3, r4, #20
 800e370:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e374:	f109 0314 	add.w	r3, r9, #20
 800e378:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e37c:	9202      	str	r2, [sp, #8]
 800e37e:	1b3a      	subs	r2, r7, r4
 800e380:	3a15      	subs	r2, #21
 800e382:	f022 0203 	bic.w	r2, r2, #3
 800e386:	3204      	adds	r2, #4
 800e388:	f104 0115 	add.w	r1, r4, #21
 800e38c:	428f      	cmp	r7, r1
 800e38e:	bf38      	it	cc
 800e390:	2204      	movcc	r2, #4
 800e392:	9201      	str	r2, [sp, #4]
 800e394:	9a02      	ldr	r2, [sp, #8]
 800e396:	9303      	str	r3, [sp, #12]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d80c      	bhi.n	800e3b6 <__multiply+0x9e>
 800e39c:	2e00      	cmp	r6, #0
 800e39e:	dd03      	ble.n	800e3a8 <__multiply+0x90>
 800e3a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d05a      	beq.n	800e45e <__multiply+0x146>
 800e3a8:	6106      	str	r6, [r0, #16]
 800e3aa:	b005      	add	sp, #20
 800e3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b0:	f843 2b04 	str.w	r2, [r3], #4
 800e3b4:	e7d8      	b.n	800e368 <__multiply+0x50>
 800e3b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800e3ba:	f1ba 0f00 	cmp.w	sl, #0
 800e3be:	d024      	beq.n	800e40a <__multiply+0xf2>
 800e3c0:	f104 0e14 	add.w	lr, r4, #20
 800e3c4:	46a9      	mov	r9, r5
 800e3c6:	f04f 0c00 	mov.w	ip, #0
 800e3ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e3ce:	f8d9 1000 	ldr.w	r1, [r9]
 800e3d2:	fa1f fb82 	uxth.w	fp, r2
 800e3d6:	b289      	uxth	r1, r1
 800e3d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800e3dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e3e0:	f8d9 2000 	ldr.w	r2, [r9]
 800e3e4:	4461      	add	r1, ip
 800e3e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e3ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800e3ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e3f2:	b289      	uxth	r1, r1
 800e3f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e3f8:	4577      	cmp	r7, lr
 800e3fa:	f849 1b04 	str.w	r1, [r9], #4
 800e3fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e402:	d8e2      	bhi.n	800e3ca <__multiply+0xb2>
 800e404:	9a01      	ldr	r2, [sp, #4]
 800e406:	f845 c002 	str.w	ip, [r5, r2]
 800e40a:	9a03      	ldr	r2, [sp, #12]
 800e40c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e410:	3304      	adds	r3, #4
 800e412:	f1b9 0f00 	cmp.w	r9, #0
 800e416:	d020      	beq.n	800e45a <__multiply+0x142>
 800e418:	6829      	ldr	r1, [r5, #0]
 800e41a:	f104 0c14 	add.w	ip, r4, #20
 800e41e:	46ae      	mov	lr, r5
 800e420:	f04f 0a00 	mov.w	sl, #0
 800e424:	f8bc b000 	ldrh.w	fp, [ip]
 800e428:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e42c:	fb09 220b 	mla	r2, r9, fp, r2
 800e430:	4492      	add	sl, r2
 800e432:	b289      	uxth	r1, r1
 800e434:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e438:	f84e 1b04 	str.w	r1, [lr], #4
 800e43c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e440:	f8be 1000 	ldrh.w	r1, [lr]
 800e444:	0c12      	lsrs	r2, r2, #16
 800e446:	fb09 1102 	mla	r1, r9, r2, r1
 800e44a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e44e:	4567      	cmp	r7, ip
 800e450:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e454:	d8e6      	bhi.n	800e424 <__multiply+0x10c>
 800e456:	9a01      	ldr	r2, [sp, #4]
 800e458:	50a9      	str	r1, [r5, r2]
 800e45a:	3504      	adds	r5, #4
 800e45c:	e79a      	b.n	800e394 <__multiply+0x7c>
 800e45e:	3e01      	subs	r6, #1
 800e460:	e79c      	b.n	800e39c <__multiply+0x84>
 800e462:	bf00      	nop
 800e464:	080121f0 	.word	0x080121f0
 800e468:	0801227c 	.word	0x0801227c

0800e46c <__pow5mult>:
 800e46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e470:	4615      	mov	r5, r2
 800e472:	f012 0203 	ands.w	r2, r2, #3
 800e476:	4606      	mov	r6, r0
 800e478:	460f      	mov	r7, r1
 800e47a:	d007      	beq.n	800e48c <__pow5mult+0x20>
 800e47c:	4c25      	ldr	r4, [pc, #148]	; (800e514 <__pow5mult+0xa8>)
 800e47e:	3a01      	subs	r2, #1
 800e480:	2300      	movs	r3, #0
 800e482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e486:	f7ff fe51 	bl	800e12c <__multadd>
 800e48a:	4607      	mov	r7, r0
 800e48c:	10ad      	asrs	r5, r5, #2
 800e48e:	d03d      	beq.n	800e50c <__pow5mult+0xa0>
 800e490:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e492:	b97c      	cbnz	r4, 800e4b4 <__pow5mult+0x48>
 800e494:	2010      	movs	r0, #16
 800e496:	f7ff fdc1 	bl	800e01c <malloc>
 800e49a:	4602      	mov	r2, r0
 800e49c:	6270      	str	r0, [r6, #36]	; 0x24
 800e49e:	b928      	cbnz	r0, 800e4ac <__pow5mult+0x40>
 800e4a0:	4b1d      	ldr	r3, [pc, #116]	; (800e518 <__pow5mult+0xac>)
 800e4a2:	481e      	ldr	r0, [pc, #120]	; (800e51c <__pow5mult+0xb0>)
 800e4a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e4a8:	f000 fc9c 	bl	800ede4 <__assert_func>
 800e4ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4b0:	6004      	str	r4, [r0, #0]
 800e4b2:	60c4      	str	r4, [r0, #12]
 800e4b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e4b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e4bc:	b94c      	cbnz	r4, 800e4d2 <__pow5mult+0x66>
 800e4be:	f240 2171 	movw	r1, #625	; 0x271
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	f7ff ff12 	bl	800e2ec <__i2b>
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800e4ce:	4604      	mov	r4, r0
 800e4d0:	6003      	str	r3, [r0, #0]
 800e4d2:	f04f 0900 	mov.w	r9, #0
 800e4d6:	07eb      	lsls	r3, r5, #31
 800e4d8:	d50a      	bpl.n	800e4f0 <__pow5mult+0x84>
 800e4da:	4639      	mov	r1, r7
 800e4dc:	4622      	mov	r2, r4
 800e4de:	4630      	mov	r0, r6
 800e4e0:	f7ff ff1a 	bl	800e318 <__multiply>
 800e4e4:	4639      	mov	r1, r7
 800e4e6:	4680      	mov	r8, r0
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	f7ff fdfd 	bl	800e0e8 <_Bfree>
 800e4ee:	4647      	mov	r7, r8
 800e4f0:	106d      	asrs	r5, r5, #1
 800e4f2:	d00b      	beq.n	800e50c <__pow5mult+0xa0>
 800e4f4:	6820      	ldr	r0, [r4, #0]
 800e4f6:	b938      	cbnz	r0, 800e508 <__pow5mult+0x9c>
 800e4f8:	4622      	mov	r2, r4
 800e4fa:	4621      	mov	r1, r4
 800e4fc:	4630      	mov	r0, r6
 800e4fe:	f7ff ff0b 	bl	800e318 <__multiply>
 800e502:	6020      	str	r0, [r4, #0]
 800e504:	f8c0 9000 	str.w	r9, [r0]
 800e508:	4604      	mov	r4, r0
 800e50a:	e7e4      	b.n	800e4d6 <__pow5mult+0x6a>
 800e50c:	4638      	mov	r0, r7
 800e50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e512:	bf00      	nop
 800e514:	080123c8 	.word	0x080123c8
 800e518:	0801217e 	.word	0x0801217e
 800e51c:	0801227c 	.word	0x0801227c

0800e520 <__lshift>:
 800e520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e524:	460c      	mov	r4, r1
 800e526:	6849      	ldr	r1, [r1, #4]
 800e528:	6923      	ldr	r3, [r4, #16]
 800e52a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e52e:	68a3      	ldr	r3, [r4, #8]
 800e530:	4607      	mov	r7, r0
 800e532:	4691      	mov	r9, r2
 800e534:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e538:	f108 0601 	add.w	r6, r8, #1
 800e53c:	42b3      	cmp	r3, r6
 800e53e:	db0b      	blt.n	800e558 <__lshift+0x38>
 800e540:	4638      	mov	r0, r7
 800e542:	f7ff fd91 	bl	800e068 <_Balloc>
 800e546:	4605      	mov	r5, r0
 800e548:	b948      	cbnz	r0, 800e55e <__lshift+0x3e>
 800e54a:	4602      	mov	r2, r0
 800e54c:	4b2a      	ldr	r3, [pc, #168]	; (800e5f8 <__lshift+0xd8>)
 800e54e:	482b      	ldr	r0, [pc, #172]	; (800e5fc <__lshift+0xdc>)
 800e550:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e554:	f000 fc46 	bl	800ede4 <__assert_func>
 800e558:	3101      	adds	r1, #1
 800e55a:	005b      	lsls	r3, r3, #1
 800e55c:	e7ee      	b.n	800e53c <__lshift+0x1c>
 800e55e:	2300      	movs	r3, #0
 800e560:	f100 0114 	add.w	r1, r0, #20
 800e564:	f100 0210 	add.w	r2, r0, #16
 800e568:	4618      	mov	r0, r3
 800e56a:	4553      	cmp	r3, sl
 800e56c:	db37      	blt.n	800e5de <__lshift+0xbe>
 800e56e:	6920      	ldr	r0, [r4, #16]
 800e570:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e574:	f104 0314 	add.w	r3, r4, #20
 800e578:	f019 091f 	ands.w	r9, r9, #31
 800e57c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e580:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e584:	d02f      	beq.n	800e5e6 <__lshift+0xc6>
 800e586:	f1c9 0e20 	rsb	lr, r9, #32
 800e58a:	468a      	mov	sl, r1
 800e58c:	f04f 0c00 	mov.w	ip, #0
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	fa02 f209 	lsl.w	r2, r2, r9
 800e596:	ea42 020c 	orr.w	r2, r2, ip
 800e59a:	f84a 2b04 	str.w	r2, [sl], #4
 800e59e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5a2:	4298      	cmp	r0, r3
 800e5a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e5a8:	d8f2      	bhi.n	800e590 <__lshift+0x70>
 800e5aa:	1b03      	subs	r3, r0, r4
 800e5ac:	3b15      	subs	r3, #21
 800e5ae:	f023 0303 	bic.w	r3, r3, #3
 800e5b2:	3304      	adds	r3, #4
 800e5b4:	f104 0215 	add.w	r2, r4, #21
 800e5b8:	4290      	cmp	r0, r2
 800e5ba:	bf38      	it	cc
 800e5bc:	2304      	movcc	r3, #4
 800e5be:	f841 c003 	str.w	ip, [r1, r3]
 800e5c2:	f1bc 0f00 	cmp.w	ip, #0
 800e5c6:	d001      	beq.n	800e5cc <__lshift+0xac>
 800e5c8:	f108 0602 	add.w	r6, r8, #2
 800e5cc:	3e01      	subs	r6, #1
 800e5ce:	4638      	mov	r0, r7
 800e5d0:	612e      	str	r6, [r5, #16]
 800e5d2:	4621      	mov	r1, r4
 800e5d4:	f7ff fd88 	bl	800e0e8 <_Bfree>
 800e5d8:	4628      	mov	r0, r5
 800e5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5de:	f842 0f04 	str.w	r0, [r2, #4]!
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	e7c1      	b.n	800e56a <__lshift+0x4a>
 800e5e6:	3904      	subs	r1, #4
 800e5e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5f0:	4298      	cmp	r0, r3
 800e5f2:	d8f9      	bhi.n	800e5e8 <__lshift+0xc8>
 800e5f4:	e7ea      	b.n	800e5cc <__lshift+0xac>
 800e5f6:	bf00      	nop
 800e5f8:	080121f0 	.word	0x080121f0
 800e5fc:	0801227c 	.word	0x0801227c

0800e600 <__mcmp>:
 800e600:	b530      	push	{r4, r5, lr}
 800e602:	6902      	ldr	r2, [r0, #16]
 800e604:	690c      	ldr	r4, [r1, #16]
 800e606:	1b12      	subs	r2, r2, r4
 800e608:	d10e      	bne.n	800e628 <__mcmp+0x28>
 800e60a:	f100 0314 	add.w	r3, r0, #20
 800e60e:	3114      	adds	r1, #20
 800e610:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e614:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e618:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e61c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e620:	42a5      	cmp	r5, r4
 800e622:	d003      	beq.n	800e62c <__mcmp+0x2c>
 800e624:	d305      	bcc.n	800e632 <__mcmp+0x32>
 800e626:	2201      	movs	r2, #1
 800e628:	4610      	mov	r0, r2
 800e62a:	bd30      	pop	{r4, r5, pc}
 800e62c:	4283      	cmp	r3, r0
 800e62e:	d3f3      	bcc.n	800e618 <__mcmp+0x18>
 800e630:	e7fa      	b.n	800e628 <__mcmp+0x28>
 800e632:	f04f 32ff 	mov.w	r2, #4294967295
 800e636:	e7f7      	b.n	800e628 <__mcmp+0x28>

0800e638 <__mdiff>:
 800e638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e63c:	460c      	mov	r4, r1
 800e63e:	4606      	mov	r6, r0
 800e640:	4611      	mov	r1, r2
 800e642:	4620      	mov	r0, r4
 800e644:	4690      	mov	r8, r2
 800e646:	f7ff ffdb 	bl	800e600 <__mcmp>
 800e64a:	1e05      	subs	r5, r0, #0
 800e64c:	d110      	bne.n	800e670 <__mdiff+0x38>
 800e64e:	4629      	mov	r1, r5
 800e650:	4630      	mov	r0, r6
 800e652:	f7ff fd09 	bl	800e068 <_Balloc>
 800e656:	b930      	cbnz	r0, 800e666 <__mdiff+0x2e>
 800e658:	4b3a      	ldr	r3, [pc, #232]	; (800e744 <__mdiff+0x10c>)
 800e65a:	4602      	mov	r2, r0
 800e65c:	f240 2132 	movw	r1, #562	; 0x232
 800e660:	4839      	ldr	r0, [pc, #228]	; (800e748 <__mdiff+0x110>)
 800e662:	f000 fbbf 	bl	800ede4 <__assert_func>
 800e666:	2301      	movs	r3, #1
 800e668:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e66c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e670:	bfa4      	itt	ge
 800e672:	4643      	movge	r3, r8
 800e674:	46a0      	movge	r8, r4
 800e676:	4630      	mov	r0, r6
 800e678:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e67c:	bfa6      	itte	ge
 800e67e:	461c      	movge	r4, r3
 800e680:	2500      	movge	r5, #0
 800e682:	2501      	movlt	r5, #1
 800e684:	f7ff fcf0 	bl	800e068 <_Balloc>
 800e688:	b920      	cbnz	r0, 800e694 <__mdiff+0x5c>
 800e68a:	4b2e      	ldr	r3, [pc, #184]	; (800e744 <__mdiff+0x10c>)
 800e68c:	4602      	mov	r2, r0
 800e68e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e692:	e7e5      	b.n	800e660 <__mdiff+0x28>
 800e694:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e698:	6926      	ldr	r6, [r4, #16]
 800e69a:	60c5      	str	r5, [r0, #12]
 800e69c:	f104 0914 	add.w	r9, r4, #20
 800e6a0:	f108 0514 	add.w	r5, r8, #20
 800e6a4:	f100 0e14 	add.w	lr, r0, #20
 800e6a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e6ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e6b0:	f108 0210 	add.w	r2, r8, #16
 800e6b4:	46f2      	mov	sl, lr
 800e6b6:	2100      	movs	r1, #0
 800e6b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e6bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e6c0:	fa1f f883 	uxth.w	r8, r3
 800e6c4:	fa11 f18b 	uxtah	r1, r1, fp
 800e6c8:	0c1b      	lsrs	r3, r3, #16
 800e6ca:	eba1 0808 	sub.w	r8, r1, r8
 800e6ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e6d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e6d6:	fa1f f888 	uxth.w	r8, r8
 800e6da:	1419      	asrs	r1, r3, #16
 800e6dc:	454e      	cmp	r6, r9
 800e6de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e6e2:	f84a 3b04 	str.w	r3, [sl], #4
 800e6e6:	d8e7      	bhi.n	800e6b8 <__mdiff+0x80>
 800e6e8:	1b33      	subs	r3, r6, r4
 800e6ea:	3b15      	subs	r3, #21
 800e6ec:	f023 0303 	bic.w	r3, r3, #3
 800e6f0:	3304      	adds	r3, #4
 800e6f2:	3415      	adds	r4, #21
 800e6f4:	42a6      	cmp	r6, r4
 800e6f6:	bf38      	it	cc
 800e6f8:	2304      	movcc	r3, #4
 800e6fa:	441d      	add	r5, r3
 800e6fc:	4473      	add	r3, lr
 800e6fe:	469e      	mov	lr, r3
 800e700:	462e      	mov	r6, r5
 800e702:	4566      	cmp	r6, ip
 800e704:	d30e      	bcc.n	800e724 <__mdiff+0xec>
 800e706:	f10c 0203 	add.w	r2, ip, #3
 800e70a:	1b52      	subs	r2, r2, r5
 800e70c:	f022 0203 	bic.w	r2, r2, #3
 800e710:	3d03      	subs	r5, #3
 800e712:	45ac      	cmp	ip, r5
 800e714:	bf38      	it	cc
 800e716:	2200      	movcc	r2, #0
 800e718:	441a      	add	r2, r3
 800e71a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e71e:	b17b      	cbz	r3, 800e740 <__mdiff+0x108>
 800e720:	6107      	str	r7, [r0, #16]
 800e722:	e7a3      	b.n	800e66c <__mdiff+0x34>
 800e724:	f856 8b04 	ldr.w	r8, [r6], #4
 800e728:	fa11 f288 	uxtah	r2, r1, r8
 800e72c:	1414      	asrs	r4, r2, #16
 800e72e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e732:	b292      	uxth	r2, r2
 800e734:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e738:	f84e 2b04 	str.w	r2, [lr], #4
 800e73c:	1421      	asrs	r1, r4, #16
 800e73e:	e7e0      	b.n	800e702 <__mdiff+0xca>
 800e740:	3f01      	subs	r7, #1
 800e742:	e7ea      	b.n	800e71a <__mdiff+0xe2>
 800e744:	080121f0 	.word	0x080121f0
 800e748:	0801227c 	.word	0x0801227c

0800e74c <__ulp>:
 800e74c:	b082      	sub	sp, #8
 800e74e:	ed8d 0b00 	vstr	d0, [sp]
 800e752:	9b01      	ldr	r3, [sp, #4]
 800e754:	4912      	ldr	r1, [pc, #72]	; (800e7a0 <__ulp+0x54>)
 800e756:	4019      	ands	r1, r3
 800e758:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e75c:	2900      	cmp	r1, #0
 800e75e:	dd05      	ble.n	800e76c <__ulp+0x20>
 800e760:	2200      	movs	r2, #0
 800e762:	460b      	mov	r3, r1
 800e764:	ec43 2b10 	vmov	d0, r2, r3
 800e768:	b002      	add	sp, #8
 800e76a:	4770      	bx	lr
 800e76c:	4249      	negs	r1, r1
 800e76e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e772:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e776:	f04f 0200 	mov.w	r2, #0
 800e77a:	f04f 0300 	mov.w	r3, #0
 800e77e:	da04      	bge.n	800e78a <__ulp+0x3e>
 800e780:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e784:	fa41 f300 	asr.w	r3, r1, r0
 800e788:	e7ec      	b.n	800e764 <__ulp+0x18>
 800e78a:	f1a0 0114 	sub.w	r1, r0, #20
 800e78e:	291e      	cmp	r1, #30
 800e790:	bfda      	itte	le
 800e792:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e796:	fa20 f101 	lsrle.w	r1, r0, r1
 800e79a:	2101      	movgt	r1, #1
 800e79c:	460a      	mov	r2, r1
 800e79e:	e7e1      	b.n	800e764 <__ulp+0x18>
 800e7a0:	7ff00000 	.word	0x7ff00000

0800e7a4 <__b2d>:
 800e7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7a6:	6905      	ldr	r5, [r0, #16]
 800e7a8:	f100 0714 	add.w	r7, r0, #20
 800e7ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e7b0:	1f2e      	subs	r6, r5, #4
 800e7b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	f7ff fd48 	bl	800e24c <__hi0bits>
 800e7bc:	f1c0 0320 	rsb	r3, r0, #32
 800e7c0:	280a      	cmp	r0, #10
 800e7c2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e840 <__b2d+0x9c>
 800e7c6:	600b      	str	r3, [r1, #0]
 800e7c8:	dc14      	bgt.n	800e7f4 <__b2d+0x50>
 800e7ca:	f1c0 0e0b 	rsb	lr, r0, #11
 800e7ce:	fa24 f10e 	lsr.w	r1, r4, lr
 800e7d2:	42b7      	cmp	r7, r6
 800e7d4:	ea41 030c 	orr.w	r3, r1, ip
 800e7d8:	bf34      	ite	cc
 800e7da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e7de:	2100      	movcs	r1, #0
 800e7e0:	3015      	adds	r0, #21
 800e7e2:	fa04 f000 	lsl.w	r0, r4, r0
 800e7e6:	fa21 f10e 	lsr.w	r1, r1, lr
 800e7ea:	ea40 0201 	orr.w	r2, r0, r1
 800e7ee:	ec43 2b10 	vmov	d0, r2, r3
 800e7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7f4:	42b7      	cmp	r7, r6
 800e7f6:	bf3a      	itte	cc
 800e7f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e7fc:	f1a5 0608 	subcc.w	r6, r5, #8
 800e800:	2100      	movcs	r1, #0
 800e802:	380b      	subs	r0, #11
 800e804:	d017      	beq.n	800e836 <__b2d+0x92>
 800e806:	f1c0 0c20 	rsb	ip, r0, #32
 800e80a:	fa04 f500 	lsl.w	r5, r4, r0
 800e80e:	42be      	cmp	r6, r7
 800e810:	fa21 f40c 	lsr.w	r4, r1, ip
 800e814:	ea45 0504 	orr.w	r5, r5, r4
 800e818:	bf8c      	ite	hi
 800e81a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e81e:	2400      	movls	r4, #0
 800e820:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e824:	fa01 f000 	lsl.w	r0, r1, r0
 800e828:	fa24 f40c 	lsr.w	r4, r4, ip
 800e82c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e830:	ea40 0204 	orr.w	r2, r0, r4
 800e834:	e7db      	b.n	800e7ee <__b2d+0x4a>
 800e836:	ea44 030c 	orr.w	r3, r4, ip
 800e83a:	460a      	mov	r2, r1
 800e83c:	e7d7      	b.n	800e7ee <__b2d+0x4a>
 800e83e:	bf00      	nop
 800e840:	3ff00000 	.word	0x3ff00000

0800e844 <__d2b>:
 800e844:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e848:	4689      	mov	r9, r1
 800e84a:	2101      	movs	r1, #1
 800e84c:	ec57 6b10 	vmov	r6, r7, d0
 800e850:	4690      	mov	r8, r2
 800e852:	f7ff fc09 	bl	800e068 <_Balloc>
 800e856:	4604      	mov	r4, r0
 800e858:	b930      	cbnz	r0, 800e868 <__d2b+0x24>
 800e85a:	4602      	mov	r2, r0
 800e85c:	4b25      	ldr	r3, [pc, #148]	; (800e8f4 <__d2b+0xb0>)
 800e85e:	4826      	ldr	r0, [pc, #152]	; (800e8f8 <__d2b+0xb4>)
 800e860:	f240 310a 	movw	r1, #778	; 0x30a
 800e864:	f000 fabe 	bl	800ede4 <__assert_func>
 800e868:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e86c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e870:	bb35      	cbnz	r5, 800e8c0 <__d2b+0x7c>
 800e872:	2e00      	cmp	r6, #0
 800e874:	9301      	str	r3, [sp, #4]
 800e876:	d028      	beq.n	800e8ca <__d2b+0x86>
 800e878:	4668      	mov	r0, sp
 800e87a:	9600      	str	r6, [sp, #0]
 800e87c:	f7ff fd06 	bl	800e28c <__lo0bits>
 800e880:	9900      	ldr	r1, [sp, #0]
 800e882:	b300      	cbz	r0, 800e8c6 <__d2b+0x82>
 800e884:	9a01      	ldr	r2, [sp, #4]
 800e886:	f1c0 0320 	rsb	r3, r0, #32
 800e88a:	fa02 f303 	lsl.w	r3, r2, r3
 800e88e:	430b      	orrs	r3, r1
 800e890:	40c2      	lsrs	r2, r0
 800e892:	6163      	str	r3, [r4, #20]
 800e894:	9201      	str	r2, [sp, #4]
 800e896:	9b01      	ldr	r3, [sp, #4]
 800e898:	61a3      	str	r3, [r4, #24]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	bf14      	ite	ne
 800e89e:	2202      	movne	r2, #2
 800e8a0:	2201      	moveq	r2, #1
 800e8a2:	6122      	str	r2, [r4, #16]
 800e8a4:	b1d5      	cbz	r5, 800e8dc <__d2b+0x98>
 800e8a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e8aa:	4405      	add	r5, r0
 800e8ac:	f8c9 5000 	str.w	r5, [r9]
 800e8b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e8b4:	f8c8 0000 	str.w	r0, [r8]
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	b003      	add	sp, #12
 800e8bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e8c4:	e7d5      	b.n	800e872 <__d2b+0x2e>
 800e8c6:	6161      	str	r1, [r4, #20]
 800e8c8:	e7e5      	b.n	800e896 <__d2b+0x52>
 800e8ca:	a801      	add	r0, sp, #4
 800e8cc:	f7ff fcde 	bl	800e28c <__lo0bits>
 800e8d0:	9b01      	ldr	r3, [sp, #4]
 800e8d2:	6163      	str	r3, [r4, #20]
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	6122      	str	r2, [r4, #16]
 800e8d8:	3020      	adds	r0, #32
 800e8da:	e7e3      	b.n	800e8a4 <__d2b+0x60>
 800e8dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e8e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e8e4:	f8c9 0000 	str.w	r0, [r9]
 800e8e8:	6918      	ldr	r0, [r3, #16]
 800e8ea:	f7ff fcaf 	bl	800e24c <__hi0bits>
 800e8ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e8f2:	e7df      	b.n	800e8b4 <__d2b+0x70>
 800e8f4:	080121f0 	.word	0x080121f0
 800e8f8:	0801227c 	.word	0x0801227c

0800e8fc <__ratio>:
 800e8fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e900:	4688      	mov	r8, r1
 800e902:	4669      	mov	r1, sp
 800e904:	4681      	mov	r9, r0
 800e906:	f7ff ff4d 	bl	800e7a4 <__b2d>
 800e90a:	a901      	add	r1, sp, #4
 800e90c:	4640      	mov	r0, r8
 800e90e:	ec55 4b10 	vmov	r4, r5, d0
 800e912:	f7ff ff47 	bl	800e7a4 <__b2d>
 800e916:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e91a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e91e:	eba3 0c02 	sub.w	ip, r3, r2
 800e922:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e926:	1a9b      	subs	r3, r3, r2
 800e928:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e92c:	ec51 0b10 	vmov	r0, r1, d0
 800e930:	2b00      	cmp	r3, #0
 800e932:	bfd6      	itet	le
 800e934:	460a      	movle	r2, r1
 800e936:	462a      	movgt	r2, r5
 800e938:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e93c:	468b      	mov	fp, r1
 800e93e:	462f      	mov	r7, r5
 800e940:	bfd4      	ite	le
 800e942:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e946:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e94a:	4620      	mov	r0, r4
 800e94c:	ee10 2a10 	vmov	r2, s0
 800e950:	465b      	mov	r3, fp
 800e952:	4639      	mov	r1, r7
 800e954:	f7f1 ff82 	bl	800085c <__aeabi_ddiv>
 800e958:	ec41 0b10 	vmov	d0, r0, r1
 800e95c:	b003      	add	sp, #12
 800e95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e962 <__copybits>:
 800e962:	3901      	subs	r1, #1
 800e964:	b570      	push	{r4, r5, r6, lr}
 800e966:	1149      	asrs	r1, r1, #5
 800e968:	6914      	ldr	r4, [r2, #16]
 800e96a:	3101      	adds	r1, #1
 800e96c:	f102 0314 	add.w	r3, r2, #20
 800e970:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e974:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e978:	1f05      	subs	r5, r0, #4
 800e97a:	42a3      	cmp	r3, r4
 800e97c:	d30c      	bcc.n	800e998 <__copybits+0x36>
 800e97e:	1aa3      	subs	r3, r4, r2
 800e980:	3b11      	subs	r3, #17
 800e982:	f023 0303 	bic.w	r3, r3, #3
 800e986:	3211      	adds	r2, #17
 800e988:	42a2      	cmp	r2, r4
 800e98a:	bf88      	it	hi
 800e98c:	2300      	movhi	r3, #0
 800e98e:	4418      	add	r0, r3
 800e990:	2300      	movs	r3, #0
 800e992:	4288      	cmp	r0, r1
 800e994:	d305      	bcc.n	800e9a2 <__copybits+0x40>
 800e996:	bd70      	pop	{r4, r5, r6, pc}
 800e998:	f853 6b04 	ldr.w	r6, [r3], #4
 800e99c:	f845 6f04 	str.w	r6, [r5, #4]!
 800e9a0:	e7eb      	b.n	800e97a <__copybits+0x18>
 800e9a2:	f840 3b04 	str.w	r3, [r0], #4
 800e9a6:	e7f4      	b.n	800e992 <__copybits+0x30>

0800e9a8 <__any_on>:
 800e9a8:	f100 0214 	add.w	r2, r0, #20
 800e9ac:	6900      	ldr	r0, [r0, #16]
 800e9ae:	114b      	asrs	r3, r1, #5
 800e9b0:	4298      	cmp	r0, r3
 800e9b2:	b510      	push	{r4, lr}
 800e9b4:	db11      	blt.n	800e9da <__any_on+0x32>
 800e9b6:	dd0a      	ble.n	800e9ce <__any_on+0x26>
 800e9b8:	f011 011f 	ands.w	r1, r1, #31
 800e9bc:	d007      	beq.n	800e9ce <__any_on+0x26>
 800e9be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e9c2:	fa24 f001 	lsr.w	r0, r4, r1
 800e9c6:	fa00 f101 	lsl.w	r1, r0, r1
 800e9ca:	428c      	cmp	r4, r1
 800e9cc:	d10b      	bne.n	800e9e6 <__any_on+0x3e>
 800e9ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d803      	bhi.n	800e9de <__any_on+0x36>
 800e9d6:	2000      	movs	r0, #0
 800e9d8:	bd10      	pop	{r4, pc}
 800e9da:	4603      	mov	r3, r0
 800e9dc:	e7f7      	b.n	800e9ce <__any_on+0x26>
 800e9de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e9e2:	2900      	cmp	r1, #0
 800e9e4:	d0f5      	beq.n	800e9d2 <__any_on+0x2a>
 800e9e6:	2001      	movs	r0, #1
 800e9e8:	e7f6      	b.n	800e9d8 <__any_on+0x30>

0800e9ea <_calloc_r>:
 800e9ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9ec:	fba1 2402 	umull	r2, r4, r1, r2
 800e9f0:	b94c      	cbnz	r4, 800ea06 <_calloc_r+0x1c>
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	9201      	str	r2, [sp, #4]
 800e9f6:	f7fc f9ad 	bl	800ad54 <_malloc_r>
 800e9fa:	9a01      	ldr	r2, [sp, #4]
 800e9fc:	4605      	mov	r5, r0
 800e9fe:	b930      	cbnz	r0, 800ea0e <_calloc_r+0x24>
 800ea00:	4628      	mov	r0, r5
 800ea02:	b003      	add	sp, #12
 800ea04:	bd30      	pop	{r4, r5, pc}
 800ea06:	220c      	movs	r2, #12
 800ea08:	6002      	str	r2, [r0, #0]
 800ea0a:	2500      	movs	r5, #0
 800ea0c:	e7f8      	b.n	800ea00 <_calloc_r+0x16>
 800ea0e:	4621      	mov	r1, r4
 800ea10:	f7fc f977 	bl	800ad02 <memset>
 800ea14:	e7f4      	b.n	800ea00 <_calloc_r+0x16>
	...

0800ea18 <_free_r>:
 800ea18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea1a:	2900      	cmp	r1, #0
 800ea1c:	d044      	beq.n	800eaa8 <_free_r+0x90>
 800ea1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea22:	9001      	str	r0, [sp, #4]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	f1a1 0404 	sub.w	r4, r1, #4
 800ea2a:	bfb8      	it	lt
 800ea2c:	18e4      	addlt	r4, r4, r3
 800ea2e:	f7ff fb0f 	bl	800e050 <__malloc_lock>
 800ea32:	4a1e      	ldr	r2, [pc, #120]	; (800eaac <_free_r+0x94>)
 800ea34:	9801      	ldr	r0, [sp, #4]
 800ea36:	6813      	ldr	r3, [r2, #0]
 800ea38:	b933      	cbnz	r3, 800ea48 <_free_r+0x30>
 800ea3a:	6063      	str	r3, [r4, #4]
 800ea3c:	6014      	str	r4, [r2, #0]
 800ea3e:	b003      	add	sp, #12
 800ea40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea44:	f7ff bb0a 	b.w	800e05c <__malloc_unlock>
 800ea48:	42a3      	cmp	r3, r4
 800ea4a:	d908      	bls.n	800ea5e <_free_r+0x46>
 800ea4c:	6825      	ldr	r5, [r4, #0]
 800ea4e:	1961      	adds	r1, r4, r5
 800ea50:	428b      	cmp	r3, r1
 800ea52:	bf01      	itttt	eq
 800ea54:	6819      	ldreq	r1, [r3, #0]
 800ea56:	685b      	ldreq	r3, [r3, #4]
 800ea58:	1949      	addeq	r1, r1, r5
 800ea5a:	6021      	streq	r1, [r4, #0]
 800ea5c:	e7ed      	b.n	800ea3a <_free_r+0x22>
 800ea5e:	461a      	mov	r2, r3
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	b10b      	cbz	r3, 800ea68 <_free_r+0x50>
 800ea64:	42a3      	cmp	r3, r4
 800ea66:	d9fa      	bls.n	800ea5e <_free_r+0x46>
 800ea68:	6811      	ldr	r1, [r2, #0]
 800ea6a:	1855      	adds	r5, r2, r1
 800ea6c:	42a5      	cmp	r5, r4
 800ea6e:	d10b      	bne.n	800ea88 <_free_r+0x70>
 800ea70:	6824      	ldr	r4, [r4, #0]
 800ea72:	4421      	add	r1, r4
 800ea74:	1854      	adds	r4, r2, r1
 800ea76:	42a3      	cmp	r3, r4
 800ea78:	6011      	str	r1, [r2, #0]
 800ea7a:	d1e0      	bne.n	800ea3e <_free_r+0x26>
 800ea7c:	681c      	ldr	r4, [r3, #0]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	6053      	str	r3, [r2, #4]
 800ea82:	4421      	add	r1, r4
 800ea84:	6011      	str	r1, [r2, #0]
 800ea86:	e7da      	b.n	800ea3e <_free_r+0x26>
 800ea88:	d902      	bls.n	800ea90 <_free_r+0x78>
 800ea8a:	230c      	movs	r3, #12
 800ea8c:	6003      	str	r3, [r0, #0]
 800ea8e:	e7d6      	b.n	800ea3e <_free_r+0x26>
 800ea90:	6825      	ldr	r5, [r4, #0]
 800ea92:	1961      	adds	r1, r4, r5
 800ea94:	428b      	cmp	r3, r1
 800ea96:	bf04      	itt	eq
 800ea98:	6819      	ldreq	r1, [r3, #0]
 800ea9a:	685b      	ldreq	r3, [r3, #4]
 800ea9c:	6063      	str	r3, [r4, #4]
 800ea9e:	bf04      	itt	eq
 800eaa0:	1949      	addeq	r1, r1, r5
 800eaa2:	6021      	streq	r1, [r4, #0]
 800eaa4:	6054      	str	r4, [r2, #4]
 800eaa6:	e7ca      	b.n	800ea3e <_free_r+0x26>
 800eaa8:	b003      	add	sp, #12
 800eaaa:	bd30      	pop	{r4, r5, pc}
 800eaac:	20004f3c 	.word	0x20004f3c

0800eab0 <__ssputs_r>:
 800eab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eab4:	688e      	ldr	r6, [r1, #8]
 800eab6:	429e      	cmp	r6, r3
 800eab8:	4682      	mov	sl, r0
 800eaba:	460c      	mov	r4, r1
 800eabc:	4690      	mov	r8, r2
 800eabe:	461f      	mov	r7, r3
 800eac0:	d838      	bhi.n	800eb34 <__ssputs_r+0x84>
 800eac2:	898a      	ldrh	r2, [r1, #12]
 800eac4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eac8:	d032      	beq.n	800eb30 <__ssputs_r+0x80>
 800eaca:	6825      	ldr	r5, [r4, #0]
 800eacc:	6909      	ldr	r1, [r1, #16]
 800eace:	eba5 0901 	sub.w	r9, r5, r1
 800ead2:	6965      	ldr	r5, [r4, #20]
 800ead4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ead8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eadc:	3301      	adds	r3, #1
 800eade:	444b      	add	r3, r9
 800eae0:	106d      	asrs	r5, r5, #1
 800eae2:	429d      	cmp	r5, r3
 800eae4:	bf38      	it	cc
 800eae6:	461d      	movcc	r5, r3
 800eae8:	0553      	lsls	r3, r2, #21
 800eaea:	d531      	bpl.n	800eb50 <__ssputs_r+0xa0>
 800eaec:	4629      	mov	r1, r5
 800eaee:	f7fc f931 	bl	800ad54 <_malloc_r>
 800eaf2:	4606      	mov	r6, r0
 800eaf4:	b950      	cbnz	r0, 800eb0c <__ssputs_r+0x5c>
 800eaf6:	230c      	movs	r3, #12
 800eaf8:	f8ca 3000 	str.w	r3, [sl]
 800eafc:	89a3      	ldrh	r3, [r4, #12]
 800eafe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb02:	81a3      	strh	r3, [r4, #12]
 800eb04:	f04f 30ff 	mov.w	r0, #4294967295
 800eb08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb0c:	6921      	ldr	r1, [r4, #16]
 800eb0e:	464a      	mov	r2, r9
 800eb10:	f7fc f8e9 	bl	800ace6 <memcpy>
 800eb14:	89a3      	ldrh	r3, [r4, #12]
 800eb16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eb1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb1e:	81a3      	strh	r3, [r4, #12]
 800eb20:	6126      	str	r6, [r4, #16]
 800eb22:	6165      	str	r5, [r4, #20]
 800eb24:	444e      	add	r6, r9
 800eb26:	eba5 0509 	sub.w	r5, r5, r9
 800eb2a:	6026      	str	r6, [r4, #0]
 800eb2c:	60a5      	str	r5, [r4, #8]
 800eb2e:	463e      	mov	r6, r7
 800eb30:	42be      	cmp	r6, r7
 800eb32:	d900      	bls.n	800eb36 <__ssputs_r+0x86>
 800eb34:	463e      	mov	r6, r7
 800eb36:	6820      	ldr	r0, [r4, #0]
 800eb38:	4632      	mov	r2, r6
 800eb3a:	4641      	mov	r1, r8
 800eb3c:	f000 f982 	bl	800ee44 <memmove>
 800eb40:	68a3      	ldr	r3, [r4, #8]
 800eb42:	1b9b      	subs	r3, r3, r6
 800eb44:	60a3      	str	r3, [r4, #8]
 800eb46:	6823      	ldr	r3, [r4, #0]
 800eb48:	4433      	add	r3, r6
 800eb4a:	6023      	str	r3, [r4, #0]
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	e7db      	b.n	800eb08 <__ssputs_r+0x58>
 800eb50:	462a      	mov	r2, r5
 800eb52:	f000 f991 	bl	800ee78 <_realloc_r>
 800eb56:	4606      	mov	r6, r0
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	d1e1      	bne.n	800eb20 <__ssputs_r+0x70>
 800eb5c:	6921      	ldr	r1, [r4, #16]
 800eb5e:	4650      	mov	r0, sl
 800eb60:	f7ff ff5a 	bl	800ea18 <_free_r>
 800eb64:	e7c7      	b.n	800eaf6 <__ssputs_r+0x46>
	...

0800eb68 <_svfiprintf_r>:
 800eb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb6c:	4698      	mov	r8, r3
 800eb6e:	898b      	ldrh	r3, [r1, #12]
 800eb70:	061b      	lsls	r3, r3, #24
 800eb72:	b09d      	sub	sp, #116	; 0x74
 800eb74:	4607      	mov	r7, r0
 800eb76:	460d      	mov	r5, r1
 800eb78:	4614      	mov	r4, r2
 800eb7a:	d50e      	bpl.n	800eb9a <_svfiprintf_r+0x32>
 800eb7c:	690b      	ldr	r3, [r1, #16]
 800eb7e:	b963      	cbnz	r3, 800eb9a <_svfiprintf_r+0x32>
 800eb80:	2140      	movs	r1, #64	; 0x40
 800eb82:	f7fc f8e7 	bl	800ad54 <_malloc_r>
 800eb86:	6028      	str	r0, [r5, #0]
 800eb88:	6128      	str	r0, [r5, #16]
 800eb8a:	b920      	cbnz	r0, 800eb96 <_svfiprintf_r+0x2e>
 800eb8c:	230c      	movs	r3, #12
 800eb8e:	603b      	str	r3, [r7, #0]
 800eb90:	f04f 30ff 	mov.w	r0, #4294967295
 800eb94:	e0d1      	b.n	800ed3a <_svfiprintf_r+0x1d2>
 800eb96:	2340      	movs	r3, #64	; 0x40
 800eb98:	616b      	str	r3, [r5, #20]
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	9309      	str	r3, [sp, #36]	; 0x24
 800eb9e:	2320      	movs	r3, #32
 800eba0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eba4:	f8cd 800c 	str.w	r8, [sp, #12]
 800eba8:	2330      	movs	r3, #48	; 0x30
 800ebaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ed54 <_svfiprintf_r+0x1ec>
 800ebae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebb2:	f04f 0901 	mov.w	r9, #1
 800ebb6:	4623      	mov	r3, r4
 800ebb8:	469a      	mov	sl, r3
 800ebba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebbe:	b10a      	cbz	r2, 800ebc4 <_svfiprintf_r+0x5c>
 800ebc0:	2a25      	cmp	r2, #37	; 0x25
 800ebc2:	d1f9      	bne.n	800ebb8 <_svfiprintf_r+0x50>
 800ebc4:	ebba 0b04 	subs.w	fp, sl, r4
 800ebc8:	d00b      	beq.n	800ebe2 <_svfiprintf_r+0x7a>
 800ebca:	465b      	mov	r3, fp
 800ebcc:	4622      	mov	r2, r4
 800ebce:	4629      	mov	r1, r5
 800ebd0:	4638      	mov	r0, r7
 800ebd2:	f7ff ff6d 	bl	800eab0 <__ssputs_r>
 800ebd6:	3001      	adds	r0, #1
 800ebd8:	f000 80aa 	beq.w	800ed30 <_svfiprintf_r+0x1c8>
 800ebdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebde:	445a      	add	r2, fp
 800ebe0:	9209      	str	r2, [sp, #36]	; 0x24
 800ebe2:	f89a 3000 	ldrb.w	r3, [sl]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	f000 80a2 	beq.w	800ed30 <_svfiprintf_r+0x1c8>
 800ebec:	2300      	movs	r3, #0
 800ebee:	f04f 32ff 	mov.w	r2, #4294967295
 800ebf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebf6:	f10a 0a01 	add.w	sl, sl, #1
 800ebfa:	9304      	str	r3, [sp, #16]
 800ebfc:	9307      	str	r3, [sp, #28]
 800ebfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec02:	931a      	str	r3, [sp, #104]	; 0x68
 800ec04:	4654      	mov	r4, sl
 800ec06:	2205      	movs	r2, #5
 800ec08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec0c:	4851      	ldr	r0, [pc, #324]	; (800ed54 <_svfiprintf_r+0x1ec>)
 800ec0e:	f7f1 faef 	bl	80001f0 <memchr>
 800ec12:	9a04      	ldr	r2, [sp, #16]
 800ec14:	b9d8      	cbnz	r0, 800ec4e <_svfiprintf_r+0xe6>
 800ec16:	06d0      	lsls	r0, r2, #27
 800ec18:	bf44      	itt	mi
 800ec1a:	2320      	movmi	r3, #32
 800ec1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec20:	0711      	lsls	r1, r2, #28
 800ec22:	bf44      	itt	mi
 800ec24:	232b      	movmi	r3, #43	; 0x2b
 800ec26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ec30:	d015      	beq.n	800ec5e <_svfiprintf_r+0xf6>
 800ec32:	9a07      	ldr	r2, [sp, #28]
 800ec34:	4654      	mov	r4, sl
 800ec36:	2000      	movs	r0, #0
 800ec38:	f04f 0c0a 	mov.w	ip, #10
 800ec3c:	4621      	mov	r1, r4
 800ec3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec42:	3b30      	subs	r3, #48	; 0x30
 800ec44:	2b09      	cmp	r3, #9
 800ec46:	d94e      	bls.n	800ece6 <_svfiprintf_r+0x17e>
 800ec48:	b1b0      	cbz	r0, 800ec78 <_svfiprintf_r+0x110>
 800ec4a:	9207      	str	r2, [sp, #28]
 800ec4c:	e014      	b.n	800ec78 <_svfiprintf_r+0x110>
 800ec4e:	eba0 0308 	sub.w	r3, r0, r8
 800ec52:	fa09 f303 	lsl.w	r3, r9, r3
 800ec56:	4313      	orrs	r3, r2
 800ec58:	9304      	str	r3, [sp, #16]
 800ec5a:	46a2      	mov	sl, r4
 800ec5c:	e7d2      	b.n	800ec04 <_svfiprintf_r+0x9c>
 800ec5e:	9b03      	ldr	r3, [sp, #12]
 800ec60:	1d19      	adds	r1, r3, #4
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	9103      	str	r1, [sp, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	bfbb      	ittet	lt
 800ec6a:	425b      	neglt	r3, r3
 800ec6c:	f042 0202 	orrlt.w	r2, r2, #2
 800ec70:	9307      	strge	r3, [sp, #28]
 800ec72:	9307      	strlt	r3, [sp, #28]
 800ec74:	bfb8      	it	lt
 800ec76:	9204      	strlt	r2, [sp, #16]
 800ec78:	7823      	ldrb	r3, [r4, #0]
 800ec7a:	2b2e      	cmp	r3, #46	; 0x2e
 800ec7c:	d10c      	bne.n	800ec98 <_svfiprintf_r+0x130>
 800ec7e:	7863      	ldrb	r3, [r4, #1]
 800ec80:	2b2a      	cmp	r3, #42	; 0x2a
 800ec82:	d135      	bne.n	800ecf0 <_svfiprintf_r+0x188>
 800ec84:	9b03      	ldr	r3, [sp, #12]
 800ec86:	1d1a      	adds	r2, r3, #4
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	9203      	str	r2, [sp, #12]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	bfb8      	it	lt
 800ec90:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec94:	3402      	adds	r4, #2
 800ec96:	9305      	str	r3, [sp, #20]
 800ec98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ed64 <_svfiprintf_r+0x1fc>
 800ec9c:	7821      	ldrb	r1, [r4, #0]
 800ec9e:	2203      	movs	r2, #3
 800eca0:	4650      	mov	r0, sl
 800eca2:	f7f1 faa5 	bl	80001f0 <memchr>
 800eca6:	b140      	cbz	r0, 800ecba <_svfiprintf_r+0x152>
 800eca8:	2340      	movs	r3, #64	; 0x40
 800ecaa:	eba0 000a 	sub.w	r0, r0, sl
 800ecae:	fa03 f000 	lsl.w	r0, r3, r0
 800ecb2:	9b04      	ldr	r3, [sp, #16]
 800ecb4:	4303      	orrs	r3, r0
 800ecb6:	3401      	adds	r4, #1
 800ecb8:	9304      	str	r3, [sp, #16]
 800ecba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecbe:	4826      	ldr	r0, [pc, #152]	; (800ed58 <_svfiprintf_r+0x1f0>)
 800ecc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecc4:	2206      	movs	r2, #6
 800ecc6:	f7f1 fa93 	bl	80001f0 <memchr>
 800ecca:	2800      	cmp	r0, #0
 800eccc:	d038      	beq.n	800ed40 <_svfiprintf_r+0x1d8>
 800ecce:	4b23      	ldr	r3, [pc, #140]	; (800ed5c <_svfiprintf_r+0x1f4>)
 800ecd0:	bb1b      	cbnz	r3, 800ed1a <_svfiprintf_r+0x1b2>
 800ecd2:	9b03      	ldr	r3, [sp, #12]
 800ecd4:	3307      	adds	r3, #7
 800ecd6:	f023 0307 	bic.w	r3, r3, #7
 800ecda:	3308      	adds	r3, #8
 800ecdc:	9303      	str	r3, [sp, #12]
 800ecde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ece0:	4433      	add	r3, r6
 800ece2:	9309      	str	r3, [sp, #36]	; 0x24
 800ece4:	e767      	b.n	800ebb6 <_svfiprintf_r+0x4e>
 800ece6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecea:	460c      	mov	r4, r1
 800ecec:	2001      	movs	r0, #1
 800ecee:	e7a5      	b.n	800ec3c <_svfiprintf_r+0xd4>
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	3401      	adds	r4, #1
 800ecf4:	9305      	str	r3, [sp, #20]
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	f04f 0c0a 	mov.w	ip, #10
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed02:	3a30      	subs	r2, #48	; 0x30
 800ed04:	2a09      	cmp	r2, #9
 800ed06:	d903      	bls.n	800ed10 <_svfiprintf_r+0x1a8>
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d0c5      	beq.n	800ec98 <_svfiprintf_r+0x130>
 800ed0c:	9105      	str	r1, [sp, #20]
 800ed0e:	e7c3      	b.n	800ec98 <_svfiprintf_r+0x130>
 800ed10:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed14:	4604      	mov	r4, r0
 800ed16:	2301      	movs	r3, #1
 800ed18:	e7f0      	b.n	800ecfc <_svfiprintf_r+0x194>
 800ed1a:	ab03      	add	r3, sp, #12
 800ed1c:	9300      	str	r3, [sp, #0]
 800ed1e:	462a      	mov	r2, r5
 800ed20:	4b0f      	ldr	r3, [pc, #60]	; (800ed60 <_svfiprintf_r+0x1f8>)
 800ed22:	a904      	add	r1, sp, #16
 800ed24:	4638      	mov	r0, r7
 800ed26:	f7fc f929 	bl	800af7c <_printf_float>
 800ed2a:	1c42      	adds	r2, r0, #1
 800ed2c:	4606      	mov	r6, r0
 800ed2e:	d1d6      	bne.n	800ecde <_svfiprintf_r+0x176>
 800ed30:	89ab      	ldrh	r3, [r5, #12]
 800ed32:	065b      	lsls	r3, r3, #25
 800ed34:	f53f af2c 	bmi.w	800eb90 <_svfiprintf_r+0x28>
 800ed38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed3a:	b01d      	add	sp, #116	; 0x74
 800ed3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed40:	ab03      	add	r3, sp, #12
 800ed42:	9300      	str	r3, [sp, #0]
 800ed44:	462a      	mov	r2, r5
 800ed46:	4b06      	ldr	r3, [pc, #24]	; (800ed60 <_svfiprintf_r+0x1f8>)
 800ed48:	a904      	add	r1, sp, #16
 800ed4a:	4638      	mov	r0, r7
 800ed4c:	f7fc fbba 	bl	800b4c4 <_printf_i>
 800ed50:	e7eb      	b.n	800ed2a <_svfiprintf_r+0x1c2>
 800ed52:	bf00      	nop
 800ed54:	080123d4 	.word	0x080123d4
 800ed58:	080123de 	.word	0x080123de
 800ed5c:	0800af7d 	.word	0x0800af7d
 800ed60:	0800eab1 	.word	0x0800eab1
 800ed64:	080123da 	.word	0x080123da

0800ed68 <_read_r>:
 800ed68:	b538      	push	{r3, r4, r5, lr}
 800ed6a:	4d07      	ldr	r5, [pc, #28]	; (800ed88 <_read_r+0x20>)
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	4608      	mov	r0, r1
 800ed70:	4611      	mov	r1, r2
 800ed72:	2200      	movs	r2, #0
 800ed74:	602a      	str	r2, [r5, #0]
 800ed76:	461a      	mov	r2, r3
 800ed78:	f7f3 f9f0 	bl	800215c <_read>
 800ed7c:	1c43      	adds	r3, r0, #1
 800ed7e:	d102      	bne.n	800ed86 <_read_r+0x1e>
 800ed80:	682b      	ldr	r3, [r5, #0]
 800ed82:	b103      	cbz	r3, 800ed86 <_read_r+0x1e>
 800ed84:	6023      	str	r3, [r4, #0]
 800ed86:	bd38      	pop	{r3, r4, r5, pc}
 800ed88:	20004f44 	.word	0x20004f44
 800ed8c:	00000000 	.word	0x00000000

0800ed90 <nan>:
 800ed90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ed98 <nan+0x8>
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop
 800ed98:	00000000 	.word	0x00000000
 800ed9c:	7ff80000 	.word	0x7ff80000

0800eda0 <strncmp>:
 800eda0:	b510      	push	{r4, lr}
 800eda2:	b17a      	cbz	r2, 800edc4 <strncmp+0x24>
 800eda4:	4603      	mov	r3, r0
 800eda6:	3901      	subs	r1, #1
 800eda8:	1884      	adds	r4, r0, r2
 800edaa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800edae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800edb2:	4290      	cmp	r0, r2
 800edb4:	d101      	bne.n	800edba <strncmp+0x1a>
 800edb6:	42a3      	cmp	r3, r4
 800edb8:	d101      	bne.n	800edbe <strncmp+0x1e>
 800edba:	1a80      	subs	r0, r0, r2
 800edbc:	bd10      	pop	{r4, pc}
 800edbe:	2800      	cmp	r0, #0
 800edc0:	d1f3      	bne.n	800edaa <strncmp+0xa>
 800edc2:	e7fa      	b.n	800edba <strncmp+0x1a>
 800edc4:	4610      	mov	r0, r2
 800edc6:	e7f9      	b.n	800edbc <strncmp+0x1c>

0800edc8 <__ascii_wctomb>:
 800edc8:	b149      	cbz	r1, 800edde <__ascii_wctomb+0x16>
 800edca:	2aff      	cmp	r2, #255	; 0xff
 800edcc:	bf85      	ittet	hi
 800edce:	238a      	movhi	r3, #138	; 0x8a
 800edd0:	6003      	strhi	r3, [r0, #0]
 800edd2:	700a      	strbls	r2, [r1, #0]
 800edd4:	f04f 30ff 	movhi.w	r0, #4294967295
 800edd8:	bf98      	it	ls
 800edda:	2001      	movls	r0, #1
 800eddc:	4770      	bx	lr
 800edde:	4608      	mov	r0, r1
 800ede0:	4770      	bx	lr
	...

0800ede4 <__assert_func>:
 800ede4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ede6:	4614      	mov	r4, r2
 800ede8:	461a      	mov	r2, r3
 800edea:	4b09      	ldr	r3, [pc, #36]	; (800ee10 <__assert_func+0x2c>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4605      	mov	r5, r0
 800edf0:	68d8      	ldr	r0, [r3, #12]
 800edf2:	b14c      	cbz	r4, 800ee08 <__assert_func+0x24>
 800edf4:	4b07      	ldr	r3, [pc, #28]	; (800ee14 <__assert_func+0x30>)
 800edf6:	9100      	str	r1, [sp, #0]
 800edf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800edfc:	4906      	ldr	r1, [pc, #24]	; (800ee18 <__assert_func+0x34>)
 800edfe:	462b      	mov	r3, r5
 800ee00:	f000 f80e 	bl	800ee20 <fiprintf>
 800ee04:	f000 fa80 	bl	800f308 <abort>
 800ee08:	4b04      	ldr	r3, [pc, #16]	; (800ee1c <__assert_func+0x38>)
 800ee0a:	461c      	mov	r4, r3
 800ee0c:	e7f3      	b.n	800edf6 <__assert_func+0x12>
 800ee0e:	bf00      	nop
 800ee10:	20000038 	.word	0x20000038
 800ee14:	080123e5 	.word	0x080123e5
 800ee18:	080123f2 	.word	0x080123f2
 800ee1c:	08012420 	.word	0x08012420

0800ee20 <fiprintf>:
 800ee20:	b40e      	push	{r1, r2, r3}
 800ee22:	b503      	push	{r0, r1, lr}
 800ee24:	4601      	mov	r1, r0
 800ee26:	ab03      	add	r3, sp, #12
 800ee28:	4805      	ldr	r0, [pc, #20]	; (800ee40 <fiprintf+0x20>)
 800ee2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee2e:	6800      	ldr	r0, [r0, #0]
 800ee30:	9301      	str	r3, [sp, #4]
 800ee32:	f000 f879 	bl	800ef28 <_vfiprintf_r>
 800ee36:	b002      	add	sp, #8
 800ee38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee3c:	b003      	add	sp, #12
 800ee3e:	4770      	bx	lr
 800ee40:	20000038 	.word	0x20000038

0800ee44 <memmove>:
 800ee44:	4288      	cmp	r0, r1
 800ee46:	b510      	push	{r4, lr}
 800ee48:	eb01 0402 	add.w	r4, r1, r2
 800ee4c:	d902      	bls.n	800ee54 <memmove+0x10>
 800ee4e:	4284      	cmp	r4, r0
 800ee50:	4623      	mov	r3, r4
 800ee52:	d807      	bhi.n	800ee64 <memmove+0x20>
 800ee54:	1e43      	subs	r3, r0, #1
 800ee56:	42a1      	cmp	r1, r4
 800ee58:	d008      	beq.n	800ee6c <memmove+0x28>
 800ee5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee62:	e7f8      	b.n	800ee56 <memmove+0x12>
 800ee64:	4402      	add	r2, r0
 800ee66:	4601      	mov	r1, r0
 800ee68:	428a      	cmp	r2, r1
 800ee6a:	d100      	bne.n	800ee6e <memmove+0x2a>
 800ee6c:	bd10      	pop	{r4, pc}
 800ee6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee76:	e7f7      	b.n	800ee68 <memmove+0x24>

0800ee78 <_realloc_r>:
 800ee78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee7c:	4680      	mov	r8, r0
 800ee7e:	4614      	mov	r4, r2
 800ee80:	460e      	mov	r6, r1
 800ee82:	b921      	cbnz	r1, 800ee8e <_realloc_r+0x16>
 800ee84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee88:	4611      	mov	r1, r2
 800ee8a:	f7fb bf63 	b.w	800ad54 <_malloc_r>
 800ee8e:	b92a      	cbnz	r2, 800ee9c <_realloc_r+0x24>
 800ee90:	f7ff fdc2 	bl	800ea18 <_free_r>
 800ee94:	4625      	mov	r5, r4
 800ee96:	4628      	mov	r0, r5
 800ee98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee9c:	f000 faa0 	bl	800f3e0 <_malloc_usable_size_r>
 800eea0:	4284      	cmp	r4, r0
 800eea2:	4607      	mov	r7, r0
 800eea4:	d802      	bhi.n	800eeac <_realloc_r+0x34>
 800eea6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eeaa:	d812      	bhi.n	800eed2 <_realloc_r+0x5a>
 800eeac:	4621      	mov	r1, r4
 800eeae:	4640      	mov	r0, r8
 800eeb0:	f7fb ff50 	bl	800ad54 <_malloc_r>
 800eeb4:	4605      	mov	r5, r0
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	d0ed      	beq.n	800ee96 <_realloc_r+0x1e>
 800eeba:	42bc      	cmp	r4, r7
 800eebc:	4622      	mov	r2, r4
 800eebe:	4631      	mov	r1, r6
 800eec0:	bf28      	it	cs
 800eec2:	463a      	movcs	r2, r7
 800eec4:	f7fb ff0f 	bl	800ace6 <memcpy>
 800eec8:	4631      	mov	r1, r6
 800eeca:	4640      	mov	r0, r8
 800eecc:	f7ff fda4 	bl	800ea18 <_free_r>
 800eed0:	e7e1      	b.n	800ee96 <_realloc_r+0x1e>
 800eed2:	4635      	mov	r5, r6
 800eed4:	e7df      	b.n	800ee96 <_realloc_r+0x1e>

0800eed6 <__sfputc_r>:
 800eed6:	6893      	ldr	r3, [r2, #8]
 800eed8:	3b01      	subs	r3, #1
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	b410      	push	{r4}
 800eede:	6093      	str	r3, [r2, #8]
 800eee0:	da08      	bge.n	800eef4 <__sfputc_r+0x1e>
 800eee2:	6994      	ldr	r4, [r2, #24]
 800eee4:	42a3      	cmp	r3, r4
 800eee6:	db01      	blt.n	800eeec <__sfputc_r+0x16>
 800eee8:	290a      	cmp	r1, #10
 800eeea:	d103      	bne.n	800eef4 <__sfputc_r+0x1e>
 800eeec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eef0:	f000 b94a 	b.w	800f188 <__swbuf_r>
 800eef4:	6813      	ldr	r3, [r2, #0]
 800eef6:	1c58      	adds	r0, r3, #1
 800eef8:	6010      	str	r0, [r2, #0]
 800eefa:	7019      	strb	r1, [r3, #0]
 800eefc:	4608      	mov	r0, r1
 800eefe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef02:	4770      	bx	lr

0800ef04 <__sfputs_r>:
 800ef04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef06:	4606      	mov	r6, r0
 800ef08:	460f      	mov	r7, r1
 800ef0a:	4614      	mov	r4, r2
 800ef0c:	18d5      	adds	r5, r2, r3
 800ef0e:	42ac      	cmp	r4, r5
 800ef10:	d101      	bne.n	800ef16 <__sfputs_r+0x12>
 800ef12:	2000      	movs	r0, #0
 800ef14:	e007      	b.n	800ef26 <__sfputs_r+0x22>
 800ef16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef1a:	463a      	mov	r2, r7
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	f7ff ffda 	bl	800eed6 <__sfputc_r>
 800ef22:	1c43      	adds	r3, r0, #1
 800ef24:	d1f3      	bne.n	800ef0e <__sfputs_r+0xa>
 800ef26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ef28 <_vfiprintf_r>:
 800ef28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef2c:	460d      	mov	r5, r1
 800ef2e:	b09d      	sub	sp, #116	; 0x74
 800ef30:	4614      	mov	r4, r2
 800ef32:	4698      	mov	r8, r3
 800ef34:	4606      	mov	r6, r0
 800ef36:	b118      	cbz	r0, 800ef40 <_vfiprintf_r+0x18>
 800ef38:	6983      	ldr	r3, [r0, #24]
 800ef3a:	b90b      	cbnz	r3, 800ef40 <_vfiprintf_r+0x18>
 800ef3c:	f7fb fe0e 	bl	800ab5c <__sinit>
 800ef40:	4b89      	ldr	r3, [pc, #548]	; (800f168 <_vfiprintf_r+0x240>)
 800ef42:	429d      	cmp	r5, r3
 800ef44:	d11b      	bne.n	800ef7e <_vfiprintf_r+0x56>
 800ef46:	6875      	ldr	r5, [r6, #4]
 800ef48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef4a:	07d9      	lsls	r1, r3, #31
 800ef4c:	d405      	bmi.n	800ef5a <_vfiprintf_r+0x32>
 800ef4e:	89ab      	ldrh	r3, [r5, #12]
 800ef50:	059a      	lsls	r2, r3, #22
 800ef52:	d402      	bmi.n	800ef5a <_vfiprintf_r+0x32>
 800ef54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef56:	f7fb fec4 	bl	800ace2 <__retarget_lock_acquire_recursive>
 800ef5a:	89ab      	ldrh	r3, [r5, #12]
 800ef5c:	071b      	lsls	r3, r3, #28
 800ef5e:	d501      	bpl.n	800ef64 <_vfiprintf_r+0x3c>
 800ef60:	692b      	ldr	r3, [r5, #16]
 800ef62:	b9eb      	cbnz	r3, 800efa0 <_vfiprintf_r+0x78>
 800ef64:	4629      	mov	r1, r5
 800ef66:	4630      	mov	r0, r6
 800ef68:	f000 f960 	bl	800f22c <__swsetup_r>
 800ef6c:	b1c0      	cbz	r0, 800efa0 <_vfiprintf_r+0x78>
 800ef6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef70:	07dc      	lsls	r4, r3, #31
 800ef72:	d50e      	bpl.n	800ef92 <_vfiprintf_r+0x6a>
 800ef74:	f04f 30ff 	mov.w	r0, #4294967295
 800ef78:	b01d      	add	sp, #116	; 0x74
 800ef7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef7e:	4b7b      	ldr	r3, [pc, #492]	; (800f16c <_vfiprintf_r+0x244>)
 800ef80:	429d      	cmp	r5, r3
 800ef82:	d101      	bne.n	800ef88 <_vfiprintf_r+0x60>
 800ef84:	68b5      	ldr	r5, [r6, #8]
 800ef86:	e7df      	b.n	800ef48 <_vfiprintf_r+0x20>
 800ef88:	4b79      	ldr	r3, [pc, #484]	; (800f170 <_vfiprintf_r+0x248>)
 800ef8a:	429d      	cmp	r5, r3
 800ef8c:	bf08      	it	eq
 800ef8e:	68f5      	ldreq	r5, [r6, #12]
 800ef90:	e7da      	b.n	800ef48 <_vfiprintf_r+0x20>
 800ef92:	89ab      	ldrh	r3, [r5, #12]
 800ef94:	0598      	lsls	r0, r3, #22
 800ef96:	d4ed      	bmi.n	800ef74 <_vfiprintf_r+0x4c>
 800ef98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef9a:	f7fb fea3 	bl	800ace4 <__retarget_lock_release_recursive>
 800ef9e:	e7e9      	b.n	800ef74 <_vfiprintf_r+0x4c>
 800efa0:	2300      	movs	r3, #0
 800efa2:	9309      	str	r3, [sp, #36]	; 0x24
 800efa4:	2320      	movs	r3, #32
 800efa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800efaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800efae:	2330      	movs	r3, #48	; 0x30
 800efb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f174 <_vfiprintf_r+0x24c>
 800efb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800efb8:	f04f 0901 	mov.w	r9, #1
 800efbc:	4623      	mov	r3, r4
 800efbe:	469a      	mov	sl, r3
 800efc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efc4:	b10a      	cbz	r2, 800efca <_vfiprintf_r+0xa2>
 800efc6:	2a25      	cmp	r2, #37	; 0x25
 800efc8:	d1f9      	bne.n	800efbe <_vfiprintf_r+0x96>
 800efca:	ebba 0b04 	subs.w	fp, sl, r4
 800efce:	d00b      	beq.n	800efe8 <_vfiprintf_r+0xc0>
 800efd0:	465b      	mov	r3, fp
 800efd2:	4622      	mov	r2, r4
 800efd4:	4629      	mov	r1, r5
 800efd6:	4630      	mov	r0, r6
 800efd8:	f7ff ff94 	bl	800ef04 <__sfputs_r>
 800efdc:	3001      	adds	r0, #1
 800efde:	f000 80aa 	beq.w	800f136 <_vfiprintf_r+0x20e>
 800efe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efe4:	445a      	add	r2, fp
 800efe6:	9209      	str	r2, [sp, #36]	; 0x24
 800efe8:	f89a 3000 	ldrb.w	r3, [sl]
 800efec:	2b00      	cmp	r3, #0
 800efee:	f000 80a2 	beq.w	800f136 <_vfiprintf_r+0x20e>
 800eff2:	2300      	movs	r3, #0
 800eff4:	f04f 32ff 	mov.w	r2, #4294967295
 800eff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800effc:	f10a 0a01 	add.w	sl, sl, #1
 800f000:	9304      	str	r3, [sp, #16]
 800f002:	9307      	str	r3, [sp, #28]
 800f004:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f008:	931a      	str	r3, [sp, #104]	; 0x68
 800f00a:	4654      	mov	r4, sl
 800f00c:	2205      	movs	r2, #5
 800f00e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f012:	4858      	ldr	r0, [pc, #352]	; (800f174 <_vfiprintf_r+0x24c>)
 800f014:	f7f1 f8ec 	bl	80001f0 <memchr>
 800f018:	9a04      	ldr	r2, [sp, #16]
 800f01a:	b9d8      	cbnz	r0, 800f054 <_vfiprintf_r+0x12c>
 800f01c:	06d1      	lsls	r1, r2, #27
 800f01e:	bf44      	itt	mi
 800f020:	2320      	movmi	r3, #32
 800f022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f026:	0713      	lsls	r3, r2, #28
 800f028:	bf44      	itt	mi
 800f02a:	232b      	movmi	r3, #43	; 0x2b
 800f02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f030:	f89a 3000 	ldrb.w	r3, [sl]
 800f034:	2b2a      	cmp	r3, #42	; 0x2a
 800f036:	d015      	beq.n	800f064 <_vfiprintf_r+0x13c>
 800f038:	9a07      	ldr	r2, [sp, #28]
 800f03a:	4654      	mov	r4, sl
 800f03c:	2000      	movs	r0, #0
 800f03e:	f04f 0c0a 	mov.w	ip, #10
 800f042:	4621      	mov	r1, r4
 800f044:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f048:	3b30      	subs	r3, #48	; 0x30
 800f04a:	2b09      	cmp	r3, #9
 800f04c:	d94e      	bls.n	800f0ec <_vfiprintf_r+0x1c4>
 800f04e:	b1b0      	cbz	r0, 800f07e <_vfiprintf_r+0x156>
 800f050:	9207      	str	r2, [sp, #28]
 800f052:	e014      	b.n	800f07e <_vfiprintf_r+0x156>
 800f054:	eba0 0308 	sub.w	r3, r0, r8
 800f058:	fa09 f303 	lsl.w	r3, r9, r3
 800f05c:	4313      	orrs	r3, r2
 800f05e:	9304      	str	r3, [sp, #16]
 800f060:	46a2      	mov	sl, r4
 800f062:	e7d2      	b.n	800f00a <_vfiprintf_r+0xe2>
 800f064:	9b03      	ldr	r3, [sp, #12]
 800f066:	1d19      	adds	r1, r3, #4
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	9103      	str	r1, [sp, #12]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	bfbb      	ittet	lt
 800f070:	425b      	neglt	r3, r3
 800f072:	f042 0202 	orrlt.w	r2, r2, #2
 800f076:	9307      	strge	r3, [sp, #28]
 800f078:	9307      	strlt	r3, [sp, #28]
 800f07a:	bfb8      	it	lt
 800f07c:	9204      	strlt	r2, [sp, #16]
 800f07e:	7823      	ldrb	r3, [r4, #0]
 800f080:	2b2e      	cmp	r3, #46	; 0x2e
 800f082:	d10c      	bne.n	800f09e <_vfiprintf_r+0x176>
 800f084:	7863      	ldrb	r3, [r4, #1]
 800f086:	2b2a      	cmp	r3, #42	; 0x2a
 800f088:	d135      	bne.n	800f0f6 <_vfiprintf_r+0x1ce>
 800f08a:	9b03      	ldr	r3, [sp, #12]
 800f08c:	1d1a      	adds	r2, r3, #4
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	9203      	str	r2, [sp, #12]
 800f092:	2b00      	cmp	r3, #0
 800f094:	bfb8      	it	lt
 800f096:	f04f 33ff 	movlt.w	r3, #4294967295
 800f09a:	3402      	adds	r4, #2
 800f09c:	9305      	str	r3, [sp, #20]
 800f09e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f184 <_vfiprintf_r+0x25c>
 800f0a2:	7821      	ldrb	r1, [r4, #0]
 800f0a4:	2203      	movs	r2, #3
 800f0a6:	4650      	mov	r0, sl
 800f0a8:	f7f1 f8a2 	bl	80001f0 <memchr>
 800f0ac:	b140      	cbz	r0, 800f0c0 <_vfiprintf_r+0x198>
 800f0ae:	2340      	movs	r3, #64	; 0x40
 800f0b0:	eba0 000a 	sub.w	r0, r0, sl
 800f0b4:	fa03 f000 	lsl.w	r0, r3, r0
 800f0b8:	9b04      	ldr	r3, [sp, #16]
 800f0ba:	4303      	orrs	r3, r0
 800f0bc:	3401      	adds	r4, #1
 800f0be:	9304      	str	r3, [sp, #16]
 800f0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0c4:	482c      	ldr	r0, [pc, #176]	; (800f178 <_vfiprintf_r+0x250>)
 800f0c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0ca:	2206      	movs	r2, #6
 800f0cc:	f7f1 f890 	bl	80001f0 <memchr>
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	d03f      	beq.n	800f154 <_vfiprintf_r+0x22c>
 800f0d4:	4b29      	ldr	r3, [pc, #164]	; (800f17c <_vfiprintf_r+0x254>)
 800f0d6:	bb1b      	cbnz	r3, 800f120 <_vfiprintf_r+0x1f8>
 800f0d8:	9b03      	ldr	r3, [sp, #12]
 800f0da:	3307      	adds	r3, #7
 800f0dc:	f023 0307 	bic.w	r3, r3, #7
 800f0e0:	3308      	adds	r3, #8
 800f0e2:	9303      	str	r3, [sp, #12]
 800f0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0e6:	443b      	add	r3, r7
 800f0e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f0ea:	e767      	b.n	800efbc <_vfiprintf_r+0x94>
 800f0ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0f0:	460c      	mov	r4, r1
 800f0f2:	2001      	movs	r0, #1
 800f0f4:	e7a5      	b.n	800f042 <_vfiprintf_r+0x11a>
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	3401      	adds	r4, #1
 800f0fa:	9305      	str	r3, [sp, #20]
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	f04f 0c0a 	mov.w	ip, #10
 800f102:	4620      	mov	r0, r4
 800f104:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f108:	3a30      	subs	r2, #48	; 0x30
 800f10a:	2a09      	cmp	r2, #9
 800f10c:	d903      	bls.n	800f116 <_vfiprintf_r+0x1ee>
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d0c5      	beq.n	800f09e <_vfiprintf_r+0x176>
 800f112:	9105      	str	r1, [sp, #20]
 800f114:	e7c3      	b.n	800f09e <_vfiprintf_r+0x176>
 800f116:	fb0c 2101 	mla	r1, ip, r1, r2
 800f11a:	4604      	mov	r4, r0
 800f11c:	2301      	movs	r3, #1
 800f11e:	e7f0      	b.n	800f102 <_vfiprintf_r+0x1da>
 800f120:	ab03      	add	r3, sp, #12
 800f122:	9300      	str	r3, [sp, #0]
 800f124:	462a      	mov	r2, r5
 800f126:	4b16      	ldr	r3, [pc, #88]	; (800f180 <_vfiprintf_r+0x258>)
 800f128:	a904      	add	r1, sp, #16
 800f12a:	4630      	mov	r0, r6
 800f12c:	f7fb ff26 	bl	800af7c <_printf_float>
 800f130:	4607      	mov	r7, r0
 800f132:	1c78      	adds	r0, r7, #1
 800f134:	d1d6      	bne.n	800f0e4 <_vfiprintf_r+0x1bc>
 800f136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f138:	07d9      	lsls	r1, r3, #31
 800f13a:	d405      	bmi.n	800f148 <_vfiprintf_r+0x220>
 800f13c:	89ab      	ldrh	r3, [r5, #12]
 800f13e:	059a      	lsls	r2, r3, #22
 800f140:	d402      	bmi.n	800f148 <_vfiprintf_r+0x220>
 800f142:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f144:	f7fb fdce 	bl	800ace4 <__retarget_lock_release_recursive>
 800f148:	89ab      	ldrh	r3, [r5, #12]
 800f14a:	065b      	lsls	r3, r3, #25
 800f14c:	f53f af12 	bmi.w	800ef74 <_vfiprintf_r+0x4c>
 800f150:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f152:	e711      	b.n	800ef78 <_vfiprintf_r+0x50>
 800f154:	ab03      	add	r3, sp, #12
 800f156:	9300      	str	r3, [sp, #0]
 800f158:	462a      	mov	r2, r5
 800f15a:	4b09      	ldr	r3, [pc, #36]	; (800f180 <_vfiprintf_r+0x258>)
 800f15c:	a904      	add	r1, sp, #16
 800f15e:	4630      	mov	r0, r6
 800f160:	f7fc f9b0 	bl	800b4c4 <_printf_i>
 800f164:	e7e4      	b.n	800f130 <_vfiprintf_r+0x208>
 800f166:	bf00      	nop
 800f168:	08011fa0 	.word	0x08011fa0
 800f16c:	08011fc0 	.word	0x08011fc0
 800f170:	08011f80 	.word	0x08011f80
 800f174:	080123d4 	.word	0x080123d4
 800f178:	080123de 	.word	0x080123de
 800f17c:	0800af7d 	.word	0x0800af7d
 800f180:	0800ef05 	.word	0x0800ef05
 800f184:	080123da 	.word	0x080123da

0800f188 <__swbuf_r>:
 800f188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f18a:	460e      	mov	r6, r1
 800f18c:	4614      	mov	r4, r2
 800f18e:	4605      	mov	r5, r0
 800f190:	b118      	cbz	r0, 800f19a <__swbuf_r+0x12>
 800f192:	6983      	ldr	r3, [r0, #24]
 800f194:	b90b      	cbnz	r3, 800f19a <__swbuf_r+0x12>
 800f196:	f7fb fce1 	bl	800ab5c <__sinit>
 800f19a:	4b21      	ldr	r3, [pc, #132]	; (800f220 <__swbuf_r+0x98>)
 800f19c:	429c      	cmp	r4, r3
 800f19e:	d12b      	bne.n	800f1f8 <__swbuf_r+0x70>
 800f1a0:	686c      	ldr	r4, [r5, #4]
 800f1a2:	69a3      	ldr	r3, [r4, #24]
 800f1a4:	60a3      	str	r3, [r4, #8]
 800f1a6:	89a3      	ldrh	r3, [r4, #12]
 800f1a8:	071a      	lsls	r2, r3, #28
 800f1aa:	d52f      	bpl.n	800f20c <__swbuf_r+0x84>
 800f1ac:	6923      	ldr	r3, [r4, #16]
 800f1ae:	b36b      	cbz	r3, 800f20c <__swbuf_r+0x84>
 800f1b0:	6923      	ldr	r3, [r4, #16]
 800f1b2:	6820      	ldr	r0, [r4, #0]
 800f1b4:	1ac0      	subs	r0, r0, r3
 800f1b6:	6963      	ldr	r3, [r4, #20]
 800f1b8:	b2f6      	uxtb	r6, r6
 800f1ba:	4283      	cmp	r3, r0
 800f1bc:	4637      	mov	r7, r6
 800f1be:	dc04      	bgt.n	800f1ca <__swbuf_r+0x42>
 800f1c0:	4621      	mov	r1, r4
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	f7fe fb68 	bl	800d898 <_fflush_r>
 800f1c8:	bb30      	cbnz	r0, 800f218 <__swbuf_r+0x90>
 800f1ca:	68a3      	ldr	r3, [r4, #8]
 800f1cc:	3b01      	subs	r3, #1
 800f1ce:	60a3      	str	r3, [r4, #8]
 800f1d0:	6823      	ldr	r3, [r4, #0]
 800f1d2:	1c5a      	adds	r2, r3, #1
 800f1d4:	6022      	str	r2, [r4, #0]
 800f1d6:	701e      	strb	r6, [r3, #0]
 800f1d8:	6963      	ldr	r3, [r4, #20]
 800f1da:	3001      	adds	r0, #1
 800f1dc:	4283      	cmp	r3, r0
 800f1de:	d004      	beq.n	800f1ea <__swbuf_r+0x62>
 800f1e0:	89a3      	ldrh	r3, [r4, #12]
 800f1e2:	07db      	lsls	r3, r3, #31
 800f1e4:	d506      	bpl.n	800f1f4 <__swbuf_r+0x6c>
 800f1e6:	2e0a      	cmp	r6, #10
 800f1e8:	d104      	bne.n	800f1f4 <__swbuf_r+0x6c>
 800f1ea:	4621      	mov	r1, r4
 800f1ec:	4628      	mov	r0, r5
 800f1ee:	f7fe fb53 	bl	800d898 <_fflush_r>
 800f1f2:	b988      	cbnz	r0, 800f218 <__swbuf_r+0x90>
 800f1f4:	4638      	mov	r0, r7
 800f1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1f8:	4b0a      	ldr	r3, [pc, #40]	; (800f224 <__swbuf_r+0x9c>)
 800f1fa:	429c      	cmp	r4, r3
 800f1fc:	d101      	bne.n	800f202 <__swbuf_r+0x7a>
 800f1fe:	68ac      	ldr	r4, [r5, #8]
 800f200:	e7cf      	b.n	800f1a2 <__swbuf_r+0x1a>
 800f202:	4b09      	ldr	r3, [pc, #36]	; (800f228 <__swbuf_r+0xa0>)
 800f204:	429c      	cmp	r4, r3
 800f206:	bf08      	it	eq
 800f208:	68ec      	ldreq	r4, [r5, #12]
 800f20a:	e7ca      	b.n	800f1a2 <__swbuf_r+0x1a>
 800f20c:	4621      	mov	r1, r4
 800f20e:	4628      	mov	r0, r5
 800f210:	f000 f80c 	bl	800f22c <__swsetup_r>
 800f214:	2800      	cmp	r0, #0
 800f216:	d0cb      	beq.n	800f1b0 <__swbuf_r+0x28>
 800f218:	f04f 37ff 	mov.w	r7, #4294967295
 800f21c:	e7ea      	b.n	800f1f4 <__swbuf_r+0x6c>
 800f21e:	bf00      	nop
 800f220:	08011fa0 	.word	0x08011fa0
 800f224:	08011fc0 	.word	0x08011fc0
 800f228:	08011f80 	.word	0x08011f80

0800f22c <__swsetup_r>:
 800f22c:	4b32      	ldr	r3, [pc, #200]	; (800f2f8 <__swsetup_r+0xcc>)
 800f22e:	b570      	push	{r4, r5, r6, lr}
 800f230:	681d      	ldr	r5, [r3, #0]
 800f232:	4606      	mov	r6, r0
 800f234:	460c      	mov	r4, r1
 800f236:	b125      	cbz	r5, 800f242 <__swsetup_r+0x16>
 800f238:	69ab      	ldr	r3, [r5, #24]
 800f23a:	b913      	cbnz	r3, 800f242 <__swsetup_r+0x16>
 800f23c:	4628      	mov	r0, r5
 800f23e:	f7fb fc8d 	bl	800ab5c <__sinit>
 800f242:	4b2e      	ldr	r3, [pc, #184]	; (800f2fc <__swsetup_r+0xd0>)
 800f244:	429c      	cmp	r4, r3
 800f246:	d10f      	bne.n	800f268 <__swsetup_r+0x3c>
 800f248:	686c      	ldr	r4, [r5, #4]
 800f24a:	89a3      	ldrh	r3, [r4, #12]
 800f24c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f250:	0719      	lsls	r1, r3, #28
 800f252:	d42c      	bmi.n	800f2ae <__swsetup_r+0x82>
 800f254:	06dd      	lsls	r5, r3, #27
 800f256:	d411      	bmi.n	800f27c <__swsetup_r+0x50>
 800f258:	2309      	movs	r3, #9
 800f25a:	6033      	str	r3, [r6, #0]
 800f25c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f260:	81a3      	strh	r3, [r4, #12]
 800f262:	f04f 30ff 	mov.w	r0, #4294967295
 800f266:	e03e      	b.n	800f2e6 <__swsetup_r+0xba>
 800f268:	4b25      	ldr	r3, [pc, #148]	; (800f300 <__swsetup_r+0xd4>)
 800f26a:	429c      	cmp	r4, r3
 800f26c:	d101      	bne.n	800f272 <__swsetup_r+0x46>
 800f26e:	68ac      	ldr	r4, [r5, #8]
 800f270:	e7eb      	b.n	800f24a <__swsetup_r+0x1e>
 800f272:	4b24      	ldr	r3, [pc, #144]	; (800f304 <__swsetup_r+0xd8>)
 800f274:	429c      	cmp	r4, r3
 800f276:	bf08      	it	eq
 800f278:	68ec      	ldreq	r4, [r5, #12]
 800f27a:	e7e6      	b.n	800f24a <__swsetup_r+0x1e>
 800f27c:	0758      	lsls	r0, r3, #29
 800f27e:	d512      	bpl.n	800f2a6 <__swsetup_r+0x7a>
 800f280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f282:	b141      	cbz	r1, 800f296 <__swsetup_r+0x6a>
 800f284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f288:	4299      	cmp	r1, r3
 800f28a:	d002      	beq.n	800f292 <__swsetup_r+0x66>
 800f28c:	4630      	mov	r0, r6
 800f28e:	f7ff fbc3 	bl	800ea18 <_free_r>
 800f292:	2300      	movs	r3, #0
 800f294:	6363      	str	r3, [r4, #52]	; 0x34
 800f296:	89a3      	ldrh	r3, [r4, #12]
 800f298:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f29c:	81a3      	strh	r3, [r4, #12]
 800f29e:	2300      	movs	r3, #0
 800f2a0:	6063      	str	r3, [r4, #4]
 800f2a2:	6923      	ldr	r3, [r4, #16]
 800f2a4:	6023      	str	r3, [r4, #0]
 800f2a6:	89a3      	ldrh	r3, [r4, #12]
 800f2a8:	f043 0308 	orr.w	r3, r3, #8
 800f2ac:	81a3      	strh	r3, [r4, #12]
 800f2ae:	6923      	ldr	r3, [r4, #16]
 800f2b0:	b94b      	cbnz	r3, 800f2c6 <__swsetup_r+0x9a>
 800f2b2:	89a3      	ldrh	r3, [r4, #12]
 800f2b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f2b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2bc:	d003      	beq.n	800f2c6 <__swsetup_r+0x9a>
 800f2be:	4621      	mov	r1, r4
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	f000 f84d 	bl	800f360 <__smakebuf_r>
 800f2c6:	89a0      	ldrh	r0, [r4, #12]
 800f2c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2cc:	f010 0301 	ands.w	r3, r0, #1
 800f2d0:	d00a      	beq.n	800f2e8 <__swsetup_r+0xbc>
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	60a3      	str	r3, [r4, #8]
 800f2d6:	6963      	ldr	r3, [r4, #20]
 800f2d8:	425b      	negs	r3, r3
 800f2da:	61a3      	str	r3, [r4, #24]
 800f2dc:	6923      	ldr	r3, [r4, #16]
 800f2de:	b943      	cbnz	r3, 800f2f2 <__swsetup_r+0xc6>
 800f2e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f2e4:	d1ba      	bne.n	800f25c <__swsetup_r+0x30>
 800f2e6:	bd70      	pop	{r4, r5, r6, pc}
 800f2e8:	0781      	lsls	r1, r0, #30
 800f2ea:	bf58      	it	pl
 800f2ec:	6963      	ldrpl	r3, [r4, #20]
 800f2ee:	60a3      	str	r3, [r4, #8]
 800f2f0:	e7f4      	b.n	800f2dc <__swsetup_r+0xb0>
 800f2f2:	2000      	movs	r0, #0
 800f2f4:	e7f7      	b.n	800f2e6 <__swsetup_r+0xba>
 800f2f6:	bf00      	nop
 800f2f8:	20000038 	.word	0x20000038
 800f2fc:	08011fa0 	.word	0x08011fa0
 800f300:	08011fc0 	.word	0x08011fc0
 800f304:	08011f80 	.word	0x08011f80

0800f308 <abort>:
 800f308:	b508      	push	{r3, lr}
 800f30a:	2006      	movs	r0, #6
 800f30c:	f000 f898 	bl	800f440 <raise>
 800f310:	2001      	movs	r0, #1
 800f312:	f7f2 ff19 	bl	8002148 <_exit>

0800f316 <__swhatbuf_r>:
 800f316:	b570      	push	{r4, r5, r6, lr}
 800f318:	460e      	mov	r6, r1
 800f31a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f31e:	2900      	cmp	r1, #0
 800f320:	b096      	sub	sp, #88	; 0x58
 800f322:	4614      	mov	r4, r2
 800f324:	461d      	mov	r5, r3
 800f326:	da08      	bge.n	800f33a <__swhatbuf_r+0x24>
 800f328:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f32c:	2200      	movs	r2, #0
 800f32e:	602a      	str	r2, [r5, #0]
 800f330:	061a      	lsls	r2, r3, #24
 800f332:	d410      	bmi.n	800f356 <__swhatbuf_r+0x40>
 800f334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f338:	e00e      	b.n	800f358 <__swhatbuf_r+0x42>
 800f33a:	466a      	mov	r2, sp
 800f33c:	f000 f89c 	bl	800f478 <_fstat_r>
 800f340:	2800      	cmp	r0, #0
 800f342:	dbf1      	blt.n	800f328 <__swhatbuf_r+0x12>
 800f344:	9a01      	ldr	r2, [sp, #4]
 800f346:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f34a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f34e:	425a      	negs	r2, r3
 800f350:	415a      	adcs	r2, r3
 800f352:	602a      	str	r2, [r5, #0]
 800f354:	e7ee      	b.n	800f334 <__swhatbuf_r+0x1e>
 800f356:	2340      	movs	r3, #64	; 0x40
 800f358:	2000      	movs	r0, #0
 800f35a:	6023      	str	r3, [r4, #0]
 800f35c:	b016      	add	sp, #88	; 0x58
 800f35e:	bd70      	pop	{r4, r5, r6, pc}

0800f360 <__smakebuf_r>:
 800f360:	898b      	ldrh	r3, [r1, #12]
 800f362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f364:	079d      	lsls	r5, r3, #30
 800f366:	4606      	mov	r6, r0
 800f368:	460c      	mov	r4, r1
 800f36a:	d507      	bpl.n	800f37c <__smakebuf_r+0x1c>
 800f36c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f370:	6023      	str	r3, [r4, #0]
 800f372:	6123      	str	r3, [r4, #16]
 800f374:	2301      	movs	r3, #1
 800f376:	6163      	str	r3, [r4, #20]
 800f378:	b002      	add	sp, #8
 800f37a:	bd70      	pop	{r4, r5, r6, pc}
 800f37c:	ab01      	add	r3, sp, #4
 800f37e:	466a      	mov	r2, sp
 800f380:	f7ff ffc9 	bl	800f316 <__swhatbuf_r>
 800f384:	9900      	ldr	r1, [sp, #0]
 800f386:	4605      	mov	r5, r0
 800f388:	4630      	mov	r0, r6
 800f38a:	f7fb fce3 	bl	800ad54 <_malloc_r>
 800f38e:	b948      	cbnz	r0, 800f3a4 <__smakebuf_r+0x44>
 800f390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f394:	059a      	lsls	r2, r3, #22
 800f396:	d4ef      	bmi.n	800f378 <__smakebuf_r+0x18>
 800f398:	f023 0303 	bic.w	r3, r3, #3
 800f39c:	f043 0302 	orr.w	r3, r3, #2
 800f3a0:	81a3      	strh	r3, [r4, #12]
 800f3a2:	e7e3      	b.n	800f36c <__smakebuf_r+0xc>
 800f3a4:	4b0d      	ldr	r3, [pc, #52]	; (800f3dc <__smakebuf_r+0x7c>)
 800f3a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3a8:	89a3      	ldrh	r3, [r4, #12]
 800f3aa:	6020      	str	r0, [r4, #0]
 800f3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3b0:	81a3      	strh	r3, [r4, #12]
 800f3b2:	9b00      	ldr	r3, [sp, #0]
 800f3b4:	6163      	str	r3, [r4, #20]
 800f3b6:	9b01      	ldr	r3, [sp, #4]
 800f3b8:	6120      	str	r0, [r4, #16]
 800f3ba:	b15b      	cbz	r3, 800f3d4 <__smakebuf_r+0x74>
 800f3bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	f000 f86b 	bl	800f49c <_isatty_r>
 800f3c6:	b128      	cbz	r0, 800f3d4 <__smakebuf_r+0x74>
 800f3c8:	89a3      	ldrh	r3, [r4, #12]
 800f3ca:	f023 0303 	bic.w	r3, r3, #3
 800f3ce:	f043 0301 	orr.w	r3, r3, #1
 800f3d2:	81a3      	strh	r3, [r4, #12]
 800f3d4:	89a0      	ldrh	r0, [r4, #12]
 800f3d6:	4305      	orrs	r5, r0
 800f3d8:	81a5      	strh	r5, [r4, #12]
 800f3da:	e7cd      	b.n	800f378 <__smakebuf_r+0x18>
 800f3dc:	0800aaf5 	.word	0x0800aaf5

0800f3e0 <_malloc_usable_size_r>:
 800f3e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3e4:	1f18      	subs	r0, r3, #4
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	bfbc      	itt	lt
 800f3ea:	580b      	ldrlt	r3, [r1, r0]
 800f3ec:	18c0      	addlt	r0, r0, r3
 800f3ee:	4770      	bx	lr

0800f3f0 <_raise_r>:
 800f3f0:	291f      	cmp	r1, #31
 800f3f2:	b538      	push	{r3, r4, r5, lr}
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	460d      	mov	r5, r1
 800f3f8:	d904      	bls.n	800f404 <_raise_r+0x14>
 800f3fa:	2316      	movs	r3, #22
 800f3fc:	6003      	str	r3, [r0, #0]
 800f3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f402:	bd38      	pop	{r3, r4, r5, pc}
 800f404:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f406:	b112      	cbz	r2, 800f40e <_raise_r+0x1e>
 800f408:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f40c:	b94b      	cbnz	r3, 800f422 <_raise_r+0x32>
 800f40e:	4620      	mov	r0, r4
 800f410:	f000 f830 	bl	800f474 <_getpid_r>
 800f414:	462a      	mov	r2, r5
 800f416:	4601      	mov	r1, r0
 800f418:	4620      	mov	r0, r4
 800f41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f41e:	f000 b817 	b.w	800f450 <_kill_r>
 800f422:	2b01      	cmp	r3, #1
 800f424:	d00a      	beq.n	800f43c <_raise_r+0x4c>
 800f426:	1c59      	adds	r1, r3, #1
 800f428:	d103      	bne.n	800f432 <_raise_r+0x42>
 800f42a:	2316      	movs	r3, #22
 800f42c:	6003      	str	r3, [r0, #0]
 800f42e:	2001      	movs	r0, #1
 800f430:	e7e7      	b.n	800f402 <_raise_r+0x12>
 800f432:	2400      	movs	r4, #0
 800f434:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f438:	4628      	mov	r0, r5
 800f43a:	4798      	blx	r3
 800f43c:	2000      	movs	r0, #0
 800f43e:	e7e0      	b.n	800f402 <_raise_r+0x12>

0800f440 <raise>:
 800f440:	4b02      	ldr	r3, [pc, #8]	; (800f44c <raise+0xc>)
 800f442:	4601      	mov	r1, r0
 800f444:	6818      	ldr	r0, [r3, #0]
 800f446:	f7ff bfd3 	b.w	800f3f0 <_raise_r>
 800f44a:	bf00      	nop
 800f44c:	20000038 	.word	0x20000038

0800f450 <_kill_r>:
 800f450:	b538      	push	{r3, r4, r5, lr}
 800f452:	4d07      	ldr	r5, [pc, #28]	; (800f470 <_kill_r+0x20>)
 800f454:	2300      	movs	r3, #0
 800f456:	4604      	mov	r4, r0
 800f458:	4608      	mov	r0, r1
 800f45a:	4611      	mov	r1, r2
 800f45c:	602b      	str	r3, [r5, #0]
 800f45e:	f7f2 fe63 	bl	8002128 <_kill>
 800f462:	1c43      	adds	r3, r0, #1
 800f464:	d102      	bne.n	800f46c <_kill_r+0x1c>
 800f466:	682b      	ldr	r3, [r5, #0]
 800f468:	b103      	cbz	r3, 800f46c <_kill_r+0x1c>
 800f46a:	6023      	str	r3, [r4, #0]
 800f46c:	bd38      	pop	{r3, r4, r5, pc}
 800f46e:	bf00      	nop
 800f470:	20004f44 	.word	0x20004f44

0800f474 <_getpid_r>:
 800f474:	f7f2 be50 	b.w	8002118 <_getpid>

0800f478 <_fstat_r>:
 800f478:	b538      	push	{r3, r4, r5, lr}
 800f47a:	4d07      	ldr	r5, [pc, #28]	; (800f498 <_fstat_r+0x20>)
 800f47c:	2300      	movs	r3, #0
 800f47e:	4604      	mov	r4, r0
 800f480:	4608      	mov	r0, r1
 800f482:	4611      	mov	r1, r2
 800f484:	602b      	str	r3, [r5, #0]
 800f486:	f7f2 feae 	bl	80021e6 <_fstat>
 800f48a:	1c43      	adds	r3, r0, #1
 800f48c:	d102      	bne.n	800f494 <_fstat_r+0x1c>
 800f48e:	682b      	ldr	r3, [r5, #0]
 800f490:	b103      	cbz	r3, 800f494 <_fstat_r+0x1c>
 800f492:	6023      	str	r3, [r4, #0]
 800f494:	bd38      	pop	{r3, r4, r5, pc}
 800f496:	bf00      	nop
 800f498:	20004f44 	.word	0x20004f44

0800f49c <_isatty_r>:
 800f49c:	b538      	push	{r3, r4, r5, lr}
 800f49e:	4d06      	ldr	r5, [pc, #24]	; (800f4b8 <_isatty_r+0x1c>)
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	4608      	mov	r0, r1
 800f4a6:	602b      	str	r3, [r5, #0]
 800f4a8:	f7f2 fead 	bl	8002206 <_isatty>
 800f4ac:	1c43      	adds	r3, r0, #1
 800f4ae:	d102      	bne.n	800f4b6 <_isatty_r+0x1a>
 800f4b0:	682b      	ldr	r3, [r5, #0]
 800f4b2:	b103      	cbz	r3, 800f4b6 <_isatty_r+0x1a>
 800f4b4:	6023      	str	r3, [r4, #0]
 800f4b6:	bd38      	pop	{r3, r4, r5, pc}
 800f4b8:	20004f44 	.word	0x20004f44

0800f4bc <pow>:
 800f4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4be:	ed2d 8b02 	vpush	{d8}
 800f4c2:	eeb0 8a40 	vmov.f32	s16, s0
 800f4c6:	eef0 8a60 	vmov.f32	s17, s1
 800f4ca:	ec55 4b11 	vmov	r4, r5, d1
 800f4ce:	f000 f867 	bl	800f5a0 <__ieee754_pow>
 800f4d2:	4622      	mov	r2, r4
 800f4d4:	462b      	mov	r3, r5
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	4629      	mov	r1, r5
 800f4da:	ec57 6b10 	vmov	r6, r7, d0
 800f4de:	f7f1 fb2d 	bl	8000b3c <__aeabi_dcmpun>
 800f4e2:	2800      	cmp	r0, #0
 800f4e4:	d13b      	bne.n	800f55e <pow+0xa2>
 800f4e6:	ec51 0b18 	vmov	r0, r1, d8
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	f7f1 faf3 	bl	8000ad8 <__aeabi_dcmpeq>
 800f4f2:	b1b8      	cbz	r0, 800f524 <pow+0x68>
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	4629      	mov	r1, r5
 800f4fc:	f7f1 faec 	bl	8000ad8 <__aeabi_dcmpeq>
 800f500:	2800      	cmp	r0, #0
 800f502:	d146      	bne.n	800f592 <pow+0xd6>
 800f504:	ec45 4b10 	vmov	d0, r4, r5
 800f508:	f000 fe63 	bl	80101d2 <finite>
 800f50c:	b338      	cbz	r0, 800f55e <pow+0xa2>
 800f50e:	2200      	movs	r2, #0
 800f510:	2300      	movs	r3, #0
 800f512:	4620      	mov	r0, r4
 800f514:	4629      	mov	r1, r5
 800f516:	f7f1 fae9 	bl	8000aec <__aeabi_dcmplt>
 800f51a:	b300      	cbz	r0, 800f55e <pow+0xa2>
 800f51c:	f7fb fac0 	bl	800aaa0 <__errno>
 800f520:	2322      	movs	r3, #34	; 0x22
 800f522:	e01b      	b.n	800f55c <pow+0xa0>
 800f524:	ec47 6b10 	vmov	d0, r6, r7
 800f528:	f000 fe53 	bl	80101d2 <finite>
 800f52c:	b9e0      	cbnz	r0, 800f568 <pow+0xac>
 800f52e:	eeb0 0a48 	vmov.f32	s0, s16
 800f532:	eef0 0a68 	vmov.f32	s1, s17
 800f536:	f000 fe4c 	bl	80101d2 <finite>
 800f53a:	b1a8      	cbz	r0, 800f568 <pow+0xac>
 800f53c:	ec45 4b10 	vmov	d0, r4, r5
 800f540:	f000 fe47 	bl	80101d2 <finite>
 800f544:	b180      	cbz	r0, 800f568 <pow+0xac>
 800f546:	4632      	mov	r2, r6
 800f548:	463b      	mov	r3, r7
 800f54a:	4630      	mov	r0, r6
 800f54c:	4639      	mov	r1, r7
 800f54e:	f7f1 faf5 	bl	8000b3c <__aeabi_dcmpun>
 800f552:	2800      	cmp	r0, #0
 800f554:	d0e2      	beq.n	800f51c <pow+0x60>
 800f556:	f7fb faa3 	bl	800aaa0 <__errno>
 800f55a:	2321      	movs	r3, #33	; 0x21
 800f55c:	6003      	str	r3, [r0, #0]
 800f55e:	ecbd 8b02 	vpop	{d8}
 800f562:	ec47 6b10 	vmov	d0, r6, r7
 800f566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f568:	2200      	movs	r2, #0
 800f56a:	2300      	movs	r3, #0
 800f56c:	4630      	mov	r0, r6
 800f56e:	4639      	mov	r1, r7
 800f570:	f7f1 fab2 	bl	8000ad8 <__aeabi_dcmpeq>
 800f574:	2800      	cmp	r0, #0
 800f576:	d0f2      	beq.n	800f55e <pow+0xa2>
 800f578:	eeb0 0a48 	vmov.f32	s0, s16
 800f57c:	eef0 0a68 	vmov.f32	s1, s17
 800f580:	f000 fe27 	bl	80101d2 <finite>
 800f584:	2800      	cmp	r0, #0
 800f586:	d0ea      	beq.n	800f55e <pow+0xa2>
 800f588:	ec45 4b10 	vmov	d0, r4, r5
 800f58c:	f000 fe21 	bl	80101d2 <finite>
 800f590:	e7c3      	b.n	800f51a <pow+0x5e>
 800f592:	4f01      	ldr	r7, [pc, #4]	; (800f598 <pow+0xdc>)
 800f594:	2600      	movs	r6, #0
 800f596:	e7e2      	b.n	800f55e <pow+0xa2>
 800f598:	3ff00000 	.word	0x3ff00000
 800f59c:	00000000 	.word	0x00000000

0800f5a0 <__ieee754_pow>:
 800f5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a4:	ed2d 8b06 	vpush	{d8-d10}
 800f5a8:	b089      	sub	sp, #36	; 0x24
 800f5aa:	ed8d 1b00 	vstr	d1, [sp]
 800f5ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f5b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f5b6:	ea58 0102 	orrs.w	r1, r8, r2
 800f5ba:	ec57 6b10 	vmov	r6, r7, d0
 800f5be:	d115      	bne.n	800f5ec <__ieee754_pow+0x4c>
 800f5c0:	19b3      	adds	r3, r6, r6
 800f5c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f5c6:	4152      	adcs	r2, r2
 800f5c8:	4299      	cmp	r1, r3
 800f5ca:	4b89      	ldr	r3, [pc, #548]	; (800f7f0 <__ieee754_pow+0x250>)
 800f5cc:	4193      	sbcs	r3, r2
 800f5ce:	f080 84d2 	bcs.w	800ff76 <__ieee754_pow+0x9d6>
 800f5d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5d6:	4630      	mov	r0, r6
 800f5d8:	4639      	mov	r1, r7
 800f5da:	f7f0 fe5f 	bl	800029c <__adddf3>
 800f5de:	ec41 0b10 	vmov	d0, r0, r1
 800f5e2:	b009      	add	sp, #36	; 0x24
 800f5e4:	ecbd 8b06 	vpop	{d8-d10}
 800f5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ec:	4b81      	ldr	r3, [pc, #516]	; (800f7f4 <__ieee754_pow+0x254>)
 800f5ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f5f2:	429c      	cmp	r4, r3
 800f5f4:	ee10 aa10 	vmov	sl, s0
 800f5f8:	463d      	mov	r5, r7
 800f5fa:	dc06      	bgt.n	800f60a <__ieee754_pow+0x6a>
 800f5fc:	d101      	bne.n	800f602 <__ieee754_pow+0x62>
 800f5fe:	2e00      	cmp	r6, #0
 800f600:	d1e7      	bne.n	800f5d2 <__ieee754_pow+0x32>
 800f602:	4598      	cmp	r8, r3
 800f604:	dc01      	bgt.n	800f60a <__ieee754_pow+0x6a>
 800f606:	d10f      	bne.n	800f628 <__ieee754_pow+0x88>
 800f608:	b172      	cbz	r2, 800f628 <__ieee754_pow+0x88>
 800f60a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f60e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f612:	ea55 050a 	orrs.w	r5, r5, sl
 800f616:	d1dc      	bne.n	800f5d2 <__ieee754_pow+0x32>
 800f618:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f61c:	18db      	adds	r3, r3, r3
 800f61e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f622:	4152      	adcs	r2, r2
 800f624:	429d      	cmp	r5, r3
 800f626:	e7d0      	b.n	800f5ca <__ieee754_pow+0x2a>
 800f628:	2d00      	cmp	r5, #0
 800f62a:	da3b      	bge.n	800f6a4 <__ieee754_pow+0x104>
 800f62c:	4b72      	ldr	r3, [pc, #456]	; (800f7f8 <__ieee754_pow+0x258>)
 800f62e:	4598      	cmp	r8, r3
 800f630:	dc51      	bgt.n	800f6d6 <__ieee754_pow+0x136>
 800f632:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f636:	4598      	cmp	r8, r3
 800f638:	f340 84ac 	ble.w	800ff94 <__ieee754_pow+0x9f4>
 800f63c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f640:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f644:	2b14      	cmp	r3, #20
 800f646:	dd0f      	ble.n	800f668 <__ieee754_pow+0xc8>
 800f648:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f64c:	fa22 f103 	lsr.w	r1, r2, r3
 800f650:	fa01 f303 	lsl.w	r3, r1, r3
 800f654:	4293      	cmp	r3, r2
 800f656:	f040 849d 	bne.w	800ff94 <__ieee754_pow+0x9f4>
 800f65a:	f001 0101 	and.w	r1, r1, #1
 800f65e:	f1c1 0302 	rsb	r3, r1, #2
 800f662:	9304      	str	r3, [sp, #16]
 800f664:	b182      	cbz	r2, 800f688 <__ieee754_pow+0xe8>
 800f666:	e05f      	b.n	800f728 <__ieee754_pow+0x188>
 800f668:	2a00      	cmp	r2, #0
 800f66a:	d15b      	bne.n	800f724 <__ieee754_pow+0x184>
 800f66c:	f1c3 0314 	rsb	r3, r3, #20
 800f670:	fa48 f103 	asr.w	r1, r8, r3
 800f674:	fa01 f303 	lsl.w	r3, r1, r3
 800f678:	4543      	cmp	r3, r8
 800f67a:	f040 8488 	bne.w	800ff8e <__ieee754_pow+0x9ee>
 800f67e:	f001 0101 	and.w	r1, r1, #1
 800f682:	f1c1 0302 	rsb	r3, r1, #2
 800f686:	9304      	str	r3, [sp, #16]
 800f688:	4b5c      	ldr	r3, [pc, #368]	; (800f7fc <__ieee754_pow+0x25c>)
 800f68a:	4598      	cmp	r8, r3
 800f68c:	d132      	bne.n	800f6f4 <__ieee754_pow+0x154>
 800f68e:	f1b9 0f00 	cmp.w	r9, #0
 800f692:	f280 8478 	bge.w	800ff86 <__ieee754_pow+0x9e6>
 800f696:	4959      	ldr	r1, [pc, #356]	; (800f7fc <__ieee754_pow+0x25c>)
 800f698:	4632      	mov	r2, r6
 800f69a:	463b      	mov	r3, r7
 800f69c:	2000      	movs	r0, #0
 800f69e:	f7f1 f8dd 	bl	800085c <__aeabi_ddiv>
 800f6a2:	e79c      	b.n	800f5de <__ieee754_pow+0x3e>
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	9304      	str	r3, [sp, #16]
 800f6a8:	2a00      	cmp	r2, #0
 800f6aa:	d13d      	bne.n	800f728 <__ieee754_pow+0x188>
 800f6ac:	4b51      	ldr	r3, [pc, #324]	; (800f7f4 <__ieee754_pow+0x254>)
 800f6ae:	4598      	cmp	r8, r3
 800f6b0:	d1ea      	bne.n	800f688 <__ieee754_pow+0xe8>
 800f6b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f6b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f6ba:	ea53 030a 	orrs.w	r3, r3, sl
 800f6be:	f000 845a 	beq.w	800ff76 <__ieee754_pow+0x9d6>
 800f6c2:	4b4f      	ldr	r3, [pc, #316]	; (800f800 <__ieee754_pow+0x260>)
 800f6c4:	429c      	cmp	r4, r3
 800f6c6:	dd08      	ble.n	800f6da <__ieee754_pow+0x13a>
 800f6c8:	f1b9 0f00 	cmp.w	r9, #0
 800f6cc:	f2c0 8457 	blt.w	800ff7e <__ieee754_pow+0x9de>
 800f6d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6d4:	e783      	b.n	800f5de <__ieee754_pow+0x3e>
 800f6d6:	2302      	movs	r3, #2
 800f6d8:	e7e5      	b.n	800f6a6 <__ieee754_pow+0x106>
 800f6da:	f1b9 0f00 	cmp.w	r9, #0
 800f6de:	f04f 0000 	mov.w	r0, #0
 800f6e2:	f04f 0100 	mov.w	r1, #0
 800f6e6:	f6bf af7a 	bge.w	800f5de <__ieee754_pow+0x3e>
 800f6ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f6ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f6f2:	e774      	b.n	800f5de <__ieee754_pow+0x3e>
 800f6f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f6f8:	d106      	bne.n	800f708 <__ieee754_pow+0x168>
 800f6fa:	4632      	mov	r2, r6
 800f6fc:	463b      	mov	r3, r7
 800f6fe:	4630      	mov	r0, r6
 800f700:	4639      	mov	r1, r7
 800f702:	f7f0 ff81 	bl	8000608 <__aeabi_dmul>
 800f706:	e76a      	b.n	800f5de <__ieee754_pow+0x3e>
 800f708:	4b3e      	ldr	r3, [pc, #248]	; (800f804 <__ieee754_pow+0x264>)
 800f70a:	4599      	cmp	r9, r3
 800f70c:	d10c      	bne.n	800f728 <__ieee754_pow+0x188>
 800f70e:	2d00      	cmp	r5, #0
 800f710:	db0a      	blt.n	800f728 <__ieee754_pow+0x188>
 800f712:	ec47 6b10 	vmov	d0, r6, r7
 800f716:	b009      	add	sp, #36	; 0x24
 800f718:	ecbd 8b06 	vpop	{d8-d10}
 800f71c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f720:	f000 bc6c 	b.w	800fffc <__ieee754_sqrt>
 800f724:	2300      	movs	r3, #0
 800f726:	9304      	str	r3, [sp, #16]
 800f728:	ec47 6b10 	vmov	d0, r6, r7
 800f72c:	f000 fd48 	bl	80101c0 <fabs>
 800f730:	ec51 0b10 	vmov	r0, r1, d0
 800f734:	f1ba 0f00 	cmp.w	sl, #0
 800f738:	d129      	bne.n	800f78e <__ieee754_pow+0x1ee>
 800f73a:	b124      	cbz	r4, 800f746 <__ieee754_pow+0x1a6>
 800f73c:	4b2f      	ldr	r3, [pc, #188]	; (800f7fc <__ieee754_pow+0x25c>)
 800f73e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f742:	429a      	cmp	r2, r3
 800f744:	d123      	bne.n	800f78e <__ieee754_pow+0x1ee>
 800f746:	f1b9 0f00 	cmp.w	r9, #0
 800f74a:	da05      	bge.n	800f758 <__ieee754_pow+0x1b8>
 800f74c:	4602      	mov	r2, r0
 800f74e:	460b      	mov	r3, r1
 800f750:	2000      	movs	r0, #0
 800f752:	492a      	ldr	r1, [pc, #168]	; (800f7fc <__ieee754_pow+0x25c>)
 800f754:	f7f1 f882 	bl	800085c <__aeabi_ddiv>
 800f758:	2d00      	cmp	r5, #0
 800f75a:	f6bf af40 	bge.w	800f5de <__ieee754_pow+0x3e>
 800f75e:	9b04      	ldr	r3, [sp, #16]
 800f760:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f764:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f768:	4323      	orrs	r3, r4
 800f76a:	d108      	bne.n	800f77e <__ieee754_pow+0x1de>
 800f76c:	4602      	mov	r2, r0
 800f76e:	460b      	mov	r3, r1
 800f770:	4610      	mov	r0, r2
 800f772:	4619      	mov	r1, r3
 800f774:	f7f0 fd90 	bl	8000298 <__aeabi_dsub>
 800f778:	4602      	mov	r2, r0
 800f77a:	460b      	mov	r3, r1
 800f77c:	e78f      	b.n	800f69e <__ieee754_pow+0xfe>
 800f77e:	9b04      	ldr	r3, [sp, #16]
 800f780:	2b01      	cmp	r3, #1
 800f782:	f47f af2c 	bne.w	800f5de <__ieee754_pow+0x3e>
 800f786:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f78a:	4619      	mov	r1, r3
 800f78c:	e727      	b.n	800f5de <__ieee754_pow+0x3e>
 800f78e:	0feb      	lsrs	r3, r5, #31
 800f790:	3b01      	subs	r3, #1
 800f792:	9306      	str	r3, [sp, #24]
 800f794:	9a06      	ldr	r2, [sp, #24]
 800f796:	9b04      	ldr	r3, [sp, #16]
 800f798:	4313      	orrs	r3, r2
 800f79a:	d102      	bne.n	800f7a2 <__ieee754_pow+0x202>
 800f79c:	4632      	mov	r2, r6
 800f79e:	463b      	mov	r3, r7
 800f7a0:	e7e6      	b.n	800f770 <__ieee754_pow+0x1d0>
 800f7a2:	4b19      	ldr	r3, [pc, #100]	; (800f808 <__ieee754_pow+0x268>)
 800f7a4:	4598      	cmp	r8, r3
 800f7a6:	f340 80fb 	ble.w	800f9a0 <__ieee754_pow+0x400>
 800f7aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f7ae:	4598      	cmp	r8, r3
 800f7b0:	4b13      	ldr	r3, [pc, #76]	; (800f800 <__ieee754_pow+0x260>)
 800f7b2:	dd0c      	ble.n	800f7ce <__ieee754_pow+0x22e>
 800f7b4:	429c      	cmp	r4, r3
 800f7b6:	dc0f      	bgt.n	800f7d8 <__ieee754_pow+0x238>
 800f7b8:	f1b9 0f00 	cmp.w	r9, #0
 800f7bc:	da0f      	bge.n	800f7de <__ieee754_pow+0x23e>
 800f7be:	2000      	movs	r0, #0
 800f7c0:	b009      	add	sp, #36	; 0x24
 800f7c2:	ecbd 8b06 	vpop	{d8-d10}
 800f7c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ca:	f000 bcf0 	b.w	80101ae <__math_oflow>
 800f7ce:	429c      	cmp	r4, r3
 800f7d0:	dbf2      	blt.n	800f7b8 <__ieee754_pow+0x218>
 800f7d2:	4b0a      	ldr	r3, [pc, #40]	; (800f7fc <__ieee754_pow+0x25c>)
 800f7d4:	429c      	cmp	r4, r3
 800f7d6:	dd19      	ble.n	800f80c <__ieee754_pow+0x26c>
 800f7d8:	f1b9 0f00 	cmp.w	r9, #0
 800f7dc:	dcef      	bgt.n	800f7be <__ieee754_pow+0x21e>
 800f7de:	2000      	movs	r0, #0
 800f7e0:	b009      	add	sp, #36	; 0x24
 800f7e2:	ecbd 8b06 	vpop	{d8-d10}
 800f7e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ea:	f000 bcd7 	b.w	801019c <__math_uflow>
 800f7ee:	bf00      	nop
 800f7f0:	fff00000 	.word	0xfff00000
 800f7f4:	7ff00000 	.word	0x7ff00000
 800f7f8:	433fffff 	.word	0x433fffff
 800f7fc:	3ff00000 	.word	0x3ff00000
 800f800:	3fefffff 	.word	0x3fefffff
 800f804:	3fe00000 	.word	0x3fe00000
 800f808:	41e00000 	.word	0x41e00000
 800f80c:	4b60      	ldr	r3, [pc, #384]	; (800f990 <__ieee754_pow+0x3f0>)
 800f80e:	2200      	movs	r2, #0
 800f810:	f7f0 fd42 	bl	8000298 <__aeabi_dsub>
 800f814:	a354      	add	r3, pc, #336	; (adr r3, 800f968 <__ieee754_pow+0x3c8>)
 800f816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f81a:	4604      	mov	r4, r0
 800f81c:	460d      	mov	r5, r1
 800f81e:	f7f0 fef3 	bl	8000608 <__aeabi_dmul>
 800f822:	a353      	add	r3, pc, #332	; (adr r3, 800f970 <__ieee754_pow+0x3d0>)
 800f824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f828:	4606      	mov	r6, r0
 800f82a:	460f      	mov	r7, r1
 800f82c:	4620      	mov	r0, r4
 800f82e:	4629      	mov	r1, r5
 800f830:	f7f0 feea 	bl	8000608 <__aeabi_dmul>
 800f834:	4b57      	ldr	r3, [pc, #348]	; (800f994 <__ieee754_pow+0x3f4>)
 800f836:	4682      	mov	sl, r0
 800f838:	468b      	mov	fp, r1
 800f83a:	2200      	movs	r2, #0
 800f83c:	4620      	mov	r0, r4
 800f83e:	4629      	mov	r1, r5
 800f840:	f7f0 fee2 	bl	8000608 <__aeabi_dmul>
 800f844:	4602      	mov	r2, r0
 800f846:	460b      	mov	r3, r1
 800f848:	a14b      	add	r1, pc, #300	; (adr r1, 800f978 <__ieee754_pow+0x3d8>)
 800f84a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f84e:	f7f0 fd23 	bl	8000298 <__aeabi_dsub>
 800f852:	4622      	mov	r2, r4
 800f854:	462b      	mov	r3, r5
 800f856:	f7f0 fed7 	bl	8000608 <__aeabi_dmul>
 800f85a:	4602      	mov	r2, r0
 800f85c:	460b      	mov	r3, r1
 800f85e:	2000      	movs	r0, #0
 800f860:	494d      	ldr	r1, [pc, #308]	; (800f998 <__ieee754_pow+0x3f8>)
 800f862:	f7f0 fd19 	bl	8000298 <__aeabi_dsub>
 800f866:	4622      	mov	r2, r4
 800f868:	4680      	mov	r8, r0
 800f86a:	4689      	mov	r9, r1
 800f86c:	462b      	mov	r3, r5
 800f86e:	4620      	mov	r0, r4
 800f870:	4629      	mov	r1, r5
 800f872:	f7f0 fec9 	bl	8000608 <__aeabi_dmul>
 800f876:	4602      	mov	r2, r0
 800f878:	460b      	mov	r3, r1
 800f87a:	4640      	mov	r0, r8
 800f87c:	4649      	mov	r1, r9
 800f87e:	f7f0 fec3 	bl	8000608 <__aeabi_dmul>
 800f882:	a33f      	add	r3, pc, #252	; (adr r3, 800f980 <__ieee754_pow+0x3e0>)
 800f884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f888:	f7f0 febe 	bl	8000608 <__aeabi_dmul>
 800f88c:	4602      	mov	r2, r0
 800f88e:	460b      	mov	r3, r1
 800f890:	4650      	mov	r0, sl
 800f892:	4659      	mov	r1, fp
 800f894:	f7f0 fd00 	bl	8000298 <__aeabi_dsub>
 800f898:	4602      	mov	r2, r0
 800f89a:	460b      	mov	r3, r1
 800f89c:	4680      	mov	r8, r0
 800f89e:	4689      	mov	r9, r1
 800f8a0:	4630      	mov	r0, r6
 800f8a2:	4639      	mov	r1, r7
 800f8a4:	f7f0 fcfa 	bl	800029c <__adddf3>
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	4632      	mov	r2, r6
 800f8ac:	463b      	mov	r3, r7
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	460d      	mov	r5, r1
 800f8b2:	f7f0 fcf1 	bl	8000298 <__aeabi_dsub>
 800f8b6:	4602      	mov	r2, r0
 800f8b8:	460b      	mov	r3, r1
 800f8ba:	4640      	mov	r0, r8
 800f8bc:	4649      	mov	r1, r9
 800f8be:	f7f0 fceb 	bl	8000298 <__aeabi_dsub>
 800f8c2:	9b04      	ldr	r3, [sp, #16]
 800f8c4:	9a06      	ldr	r2, [sp, #24]
 800f8c6:	3b01      	subs	r3, #1
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	4682      	mov	sl, r0
 800f8cc:	468b      	mov	fp, r1
 800f8ce:	f040 81e7 	bne.w	800fca0 <__ieee754_pow+0x700>
 800f8d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800f988 <__ieee754_pow+0x3e8>
 800f8d6:	eeb0 8a47 	vmov.f32	s16, s14
 800f8da:	eef0 8a67 	vmov.f32	s17, s15
 800f8de:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f8e2:	2600      	movs	r6, #0
 800f8e4:	4632      	mov	r2, r6
 800f8e6:	463b      	mov	r3, r7
 800f8e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8ec:	f7f0 fcd4 	bl	8000298 <__aeabi_dsub>
 800f8f0:	4622      	mov	r2, r4
 800f8f2:	462b      	mov	r3, r5
 800f8f4:	f7f0 fe88 	bl	8000608 <__aeabi_dmul>
 800f8f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8fc:	4680      	mov	r8, r0
 800f8fe:	4689      	mov	r9, r1
 800f900:	4650      	mov	r0, sl
 800f902:	4659      	mov	r1, fp
 800f904:	f7f0 fe80 	bl	8000608 <__aeabi_dmul>
 800f908:	4602      	mov	r2, r0
 800f90a:	460b      	mov	r3, r1
 800f90c:	4640      	mov	r0, r8
 800f90e:	4649      	mov	r1, r9
 800f910:	f7f0 fcc4 	bl	800029c <__adddf3>
 800f914:	4632      	mov	r2, r6
 800f916:	463b      	mov	r3, r7
 800f918:	4680      	mov	r8, r0
 800f91a:	4689      	mov	r9, r1
 800f91c:	4620      	mov	r0, r4
 800f91e:	4629      	mov	r1, r5
 800f920:	f7f0 fe72 	bl	8000608 <__aeabi_dmul>
 800f924:	460b      	mov	r3, r1
 800f926:	4604      	mov	r4, r0
 800f928:	460d      	mov	r5, r1
 800f92a:	4602      	mov	r2, r0
 800f92c:	4649      	mov	r1, r9
 800f92e:	4640      	mov	r0, r8
 800f930:	f7f0 fcb4 	bl	800029c <__adddf3>
 800f934:	4b19      	ldr	r3, [pc, #100]	; (800f99c <__ieee754_pow+0x3fc>)
 800f936:	4299      	cmp	r1, r3
 800f938:	ec45 4b19 	vmov	d9, r4, r5
 800f93c:	4606      	mov	r6, r0
 800f93e:	460f      	mov	r7, r1
 800f940:	468b      	mov	fp, r1
 800f942:	f340 82f1 	ble.w	800ff28 <__ieee754_pow+0x988>
 800f946:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f94a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f94e:	4303      	orrs	r3, r0
 800f950:	f000 81e4 	beq.w	800fd1c <__ieee754_pow+0x77c>
 800f954:	ec51 0b18 	vmov	r0, r1, d8
 800f958:	2200      	movs	r2, #0
 800f95a:	2300      	movs	r3, #0
 800f95c:	f7f1 f8c6 	bl	8000aec <__aeabi_dcmplt>
 800f960:	3800      	subs	r0, #0
 800f962:	bf18      	it	ne
 800f964:	2001      	movne	r0, #1
 800f966:	e72b      	b.n	800f7c0 <__ieee754_pow+0x220>
 800f968:	60000000 	.word	0x60000000
 800f96c:	3ff71547 	.word	0x3ff71547
 800f970:	f85ddf44 	.word	0xf85ddf44
 800f974:	3e54ae0b 	.word	0x3e54ae0b
 800f978:	55555555 	.word	0x55555555
 800f97c:	3fd55555 	.word	0x3fd55555
 800f980:	652b82fe 	.word	0x652b82fe
 800f984:	3ff71547 	.word	0x3ff71547
 800f988:	00000000 	.word	0x00000000
 800f98c:	bff00000 	.word	0xbff00000
 800f990:	3ff00000 	.word	0x3ff00000
 800f994:	3fd00000 	.word	0x3fd00000
 800f998:	3fe00000 	.word	0x3fe00000
 800f99c:	408fffff 	.word	0x408fffff
 800f9a0:	4bd5      	ldr	r3, [pc, #852]	; (800fcf8 <__ieee754_pow+0x758>)
 800f9a2:	402b      	ands	r3, r5
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	b92b      	cbnz	r3, 800f9b4 <__ieee754_pow+0x414>
 800f9a8:	4bd4      	ldr	r3, [pc, #848]	; (800fcfc <__ieee754_pow+0x75c>)
 800f9aa:	f7f0 fe2d 	bl	8000608 <__aeabi_dmul>
 800f9ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f9b2:	460c      	mov	r4, r1
 800f9b4:	1523      	asrs	r3, r4, #20
 800f9b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f9ba:	4413      	add	r3, r2
 800f9bc:	9305      	str	r3, [sp, #20]
 800f9be:	4bd0      	ldr	r3, [pc, #832]	; (800fd00 <__ieee754_pow+0x760>)
 800f9c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f9c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f9c8:	429c      	cmp	r4, r3
 800f9ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f9ce:	dd08      	ble.n	800f9e2 <__ieee754_pow+0x442>
 800f9d0:	4bcc      	ldr	r3, [pc, #816]	; (800fd04 <__ieee754_pow+0x764>)
 800f9d2:	429c      	cmp	r4, r3
 800f9d4:	f340 8162 	ble.w	800fc9c <__ieee754_pow+0x6fc>
 800f9d8:	9b05      	ldr	r3, [sp, #20]
 800f9da:	3301      	adds	r3, #1
 800f9dc:	9305      	str	r3, [sp, #20]
 800f9de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f9e2:	2400      	movs	r4, #0
 800f9e4:	00e3      	lsls	r3, r4, #3
 800f9e6:	9307      	str	r3, [sp, #28]
 800f9e8:	4bc7      	ldr	r3, [pc, #796]	; (800fd08 <__ieee754_pow+0x768>)
 800f9ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f9ee:	ed93 7b00 	vldr	d7, [r3]
 800f9f2:	4629      	mov	r1, r5
 800f9f4:	ec53 2b17 	vmov	r2, r3, d7
 800f9f8:	eeb0 9a47 	vmov.f32	s18, s14
 800f9fc:	eef0 9a67 	vmov.f32	s19, s15
 800fa00:	4682      	mov	sl, r0
 800fa02:	f7f0 fc49 	bl	8000298 <__aeabi_dsub>
 800fa06:	4652      	mov	r2, sl
 800fa08:	4606      	mov	r6, r0
 800fa0a:	460f      	mov	r7, r1
 800fa0c:	462b      	mov	r3, r5
 800fa0e:	ec51 0b19 	vmov	r0, r1, d9
 800fa12:	f7f0 fc43 	bl	800029c <__adddf3>
 800fa16:	4602      	mov	r2, r0
 800fa18:	460b      	mov	r3, r1
 800fa1a:	2000      	movs	r0, #0
 800fa1c:	49bb      	ldr	r1, [pc, #748]	; (800fd0c <__ieee754_pow+0x76c>)
 800fa1e:	f7f0 ff1d 	bl	800085c <__aeabi_ddiv>
 800fa22:	ec41 0b1a 	vmov	d10, r0, r1
 800fa26:	4602      	mov	r2, r0
 800fa28:	460b      	mov	r3, r1
 800fa2a:	4630      	mov	r0, r6
 800fa2c:	4639      	mov	r1, r7
 800fa2e:	f7f0 fdeb 	bl	8000608 <__aeabi_dmul>
 800fa32:	2300      	movs	r3, #0
 800fa34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa38:	9302      	str	r3, [sp, #8]
 800fa3a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fa3e:	46ab      	mov	fp, r5
 800fa40:	106d      	asrs	r5, r5, #1
 800fa42:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fa46:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fa4a:	ec41 0b18 	vmov	d8, r0, r1
 800fa4e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fa52:	2200      	movs	r2, #0
 800fa54:	4640      	mov	r0, r8
 800fa56:	4649      	mov	r1, r9
 800fa58:	4614      	mov	r4, r2
 800fa5a:	461d      	mov	r5, r3
 800fa5c:	f7f0 fdd4 	bl	8000608 <__aeabi_dmul>
 800fa60:	4602      	mov	r2, r0
 800fa62:	460b      	mov	r3, r1
 800fa64:	4630      	mov	r0, r6
 800fa66:	4639      	mov	r1, r7
 800fa68:	f7f0 fc16 	bl	8000298 <__aeabi_dsub>
 800fa6c:	ec53 2b19 	vmov	r2, r3, d9
 800fa70:	4606      	mov	r6, r0
 800fa72:	460f      	mov	r7, r1
 800fa74:	4620      	mov	r0, r4
 800fa76:	4629      	mov	r1, r5
 800fa78:	f7f0 fc0e 	bl	8000298 <__aeabi_dsub>
 800fa7c:	4602      	mov	r2, r0
 800fa7e:	460b      	mov	r3, r1
 800fa80:	4650      	mov	r0, sl
 800fa82:	4659      	mov	r1, fp
 800fa84:	f7f0 fc08 	bl	8000298 <__aeabi_dsub>
 800fa88:	4642      	mov	r2, r8
 800fa8a:	464b      	mov	r3, r9
 800fa8c:	f7f0 fdbc 	bl	8000608 <__aeabi_dmul>
 800fa90:	4602      	mov	r2, r0
 800fa92:	460b      	mov	r3, r1
 800fa94:	4630      	mov	r0, r6
 800fa96:	4639      	mov	r1, r7
 800fa98:	f7f0 fbfe 	bl	8000298 <__aeabi_dsub>
 800fa9c:	ec53 2b1a 	vmov	r2, r3, d10
 800faa0:	f7f0 fdb2 	bl	8000608 <__aeabi_dmul>
 800faa4:	ec53 2b18 	vmov	r2, r3, d8
 800faa8:	ec41 0b19 	vmov	d9, r0, r1
 800faac:	ec51 0b18 	vmov	r0, r1, d8
 800fab0:	f7f0 fdaa 	bl	8000608 <__aeabi_dmul>
 800fab4:	a37c      	add	r3, pc, #496	; (adr r3, 800fca8 <__ieee754_pow+0x708>)
 800fab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faba:	4604      	mov	r4, r0
 800fabc:	460d      	mov	r5, r1
 800fabe:	f7f0 fda3 	bl	8000608 <__aeabi_dmul>
 800fac2:	a37b      	add	r3, pc, #492	; (adr r3, 800fcb0 <__ieee754_pow+0x710>)
 800fac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac8:	f7f0 fbe8 	bl	800029c <__adddf3>
 800facc:	4622      	mov	r2, r4
 800face:	462b      	mov	r3, r5
 800fad0:	f7f0 fd9a 	bl	8000608 <__aeabi_dmul>
 800fad4:	a378      	add	r3, pc, #480	; (adr r3, 800fcb8 <__ieee754_pow+0x718>)
 800fad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fada:	f7f0 fbdf 	bl	800029c <__adddf3>
 800fade:	4622      	mov	r2, r4
 800fae0:	462b      	mov	r3, r5
 800fae2:	f7f0 fd91 	bl	8000608 <__aeabi_dmul>
 800fae6:	a376      	add	r3, pc, #472	; (adr r3, 800fcc0 <__ieee754_pow+0x720>)
 800fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faec:	f7f0 fbd6 	bl	800029c <__adddf3>
 800faf0:	4622      	mov	r2, r4
 800faf2:	462b      	mov	r3, r5
 800faf4:	f7f0 fd88 	bl	8000608 <__aeabi_dmul>
 800faf8:	a373      	add	r3, pc, #460	; (adr r3, 800fcc8 <__ieee754_pow+0x728>)
 800fafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafe:	f7f0 fbcd 	bl	800029c <__adddf3>
 800fb02:	4622      	mov	r2, r4
 800fb04:	462b      	mov	r3, r5
 800fb06:	f7f0 fd7f 	bl	8000608 <__aeabi_dmul>
 800fb0a:	a371      	add	r3, pc, #452	; (adr r3, 800fcd0 <__ieee754_pow+0x730>)
 800fb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb10:	f7f0 fbc4 	bl	800029c <__adddf3>
 800fb14:	4622      	mov	r2, r4
 800fb16:	4606      	mov	r6, r0
 800fb18:	460f      	mov	r7, r1
 800fb1a:	462b      	mov	r3, r5
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	4629      	mov	r1, r5
 800fb20:	f7f0 fd72 	bl	8000608 <__aeabi_dmul>
 800fb24:	4602      	mov	r2, r0
 800fb26:	460b      	mov	r3, r1
 800fb28:	4630      	mov	r0, r6
 800fb2a:	4639      	mov	r1, r7
 800fb2c:	f7f0 fd6c 	bl	8000608 <__aeabi_dmul>
 800fb30:	4642      	mov	r2, r8
 800fb32:	4604      	mov	r4, r0
 800fb34:	460d      	mov	r5, r1
 800fb36:	464b      	mov	r3, r9
 800fb38:	ec51 0b18 	vmov	r0, r1, d8
 800fb3c:	f7f0 fbae 	bl	800029c <__adddf3>
 800fb40:	ec53 2b19 	vmov	r2, r3, d9
 800fb44:	f7f0 fd60 	bl	8000608 <__aeabi_dmul>
 800fb48:	4622      	mov	r2, r4
 800fb4a:	462b      	mov	r3, r5
 800fb4c:	f7f0 fba6 	bl	800029c <__adddf3>
 800fb50:	4642      	mov	r2, r8
 800fb52:	4682      	mov	sl, r0
 800fb54:	468b      	mov	fp, r1
 800fb56:	464b      	mov	r3, r9
 800fb58:	4640      	mov	r0, r8
 800fb5a:	4649      	mov	r1, r9
 800fb5c:	f7f0 fd54 	bl	8000608 <__aeabi_dmul>
 800fb60:	4b6b      	ldr	r3, [pc, #428]	; (800fd10 <__ieee754_pow+0x770>)
 800fb62:	2200      	movs	r2, #0
 800fb64:	4606      	mov	r6, r0
 800fb66:	460f      	mov	r7, r1
 800fb68:	f7f0 fb98 	bl	800029c <__adddf3>
 800fb6c:	4652      	mov	r2, sl
 800fb6e:	465b      	mov	r3, fp
 800fb70:	f7f0 fb94 	bl	800029c <__adddf3>
 800fb74:	2000      	movs	r0, #0
 800fb76:	4604      	mov	r4, r0
 800fb78:	460d      	mov	r5, r1
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	4640      	mov	r0, r8
 800fb80:	4649      	mov	r1, r9
 800fb82:	f7f0 fd41 	bl	8000608 <__aeabi_dmul>
 800fb86:	4b62      	ldr	r3, [pc, #392]	; (800fd10 <__ieee754_pow+0x770>)
 800fb88:	4680      	mov	r8, r0
 800fb8a:	4689      	mov	r9, r1
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	4620      	mov	r0, r4
 800fb90:	4629      	mov	r1, r5
 800fb92:	f7f0 fb81 	bl	8000298 <__aeabi_dsub>
 800fb96:	4632      	mov	r2, r6
 800fb98:	463b      	mov	r3, r7
 800fb9a:	f7f0 fb7d 	bl	8000298 <__aeabi_dsub>
 800fb9e:	4602      	mov	r2, r0
 800fba0:	460b      	mov	r3, r1
 800fba2:	4650      	mov	r0, sl
 800fba4:	4659      	mov	r1, fp
 800fba6:	f7f0 fb77 	bl	8000298 <__aeabi_dsub>
 800fbaa:	ec53 2b18 	vmov	r2, r3, d8
 800fbae:	f7f0 fd2b 	bl	8000608 <__aeabi_dmul>
 800fbb2:	4622      	mov	r2, r4
 800fbb4:	4606      	mov	r6, r0
 800fbb6:	460f      	mov	r7, r1
 800fbb8:	462b      	mov	r3, r5
 800fbba:	ec51 0b19 	vmov	r0, r1, d9
 800fbbe:	f7f0 fd23 	bl	8000608 <__aeabi_dmul>
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	460b      	mov	r3, r1
 800fbc6:	4630      	mov	r0, r6
 800fbc8:	4639      	mov	r1, r7
 800fbca:	f7f0 fb67 	bl	800029c <__adddf3>
 800fbce:	4606      	mov	r6, r0
 800fbd0:	460f      	mov	r7, r1
 800fbd2:	4602      	mov	r2, r0
 800fbd4:	460b      	mov	r3, r1
 800fbd6:	4640      	mov	r0, r8
 800fbd8:	4649      	mov	r1, r9
 800fbda:	f7f0 fb5f 	bl	800029c <__adddf3>
 800fbde:	a33e      	add	r3, pc, #248	; (adr r3, 800fcd8 <__ieee754_pow+0x738>)
 800fbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe4:	2000      	movs	r0, #0
 800fbe6:	4604      	mov	r4, r0
 800fbe8:	460d      	mov	r5, r1
 800fbea:	f7f0 fd0d 	bl	8000608 <__aeabi_dmul>
 800fbee:	4642      	mov	r2, r8
 800fbf0:	ec41 0b18 	vmov	d8, r0, r1
 800fbf4:	464b      	mov	r3, r9
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	4629      	mov	r1, r5
 800fbfa:	f7f0 fb4d 	bl	8000298 <__aeabi_dsub>
 800fbfe:	4602      	mov	r2, r0
 800fc00:	460b      	mov	r3, r1
 800fc02:	4630      	mov	r0, r6
 800fc04:	4639      	mov	r1, r7
 800fc06:	f7f0 fb47 	bl	8000298 <__aeabi_dsub>
 800fc0a:	a335      	add	r3, pc, #212	; (adr r3, 800fce0 <__ieee754_pow+0x740>)
 800fc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc10:	f7f0 fcfa 	bl	8000608 <__aeabi_dmul>
 800fc14:	a334      	add	r3, pc, #208	; (adr r3, 800fce8 <__ieee754_pow+0x748>)
 800fc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1a:	4606      	mov	r6, r0
 800fc1c:	460f      	mov	r7, r1
 800fc1e:	4620      	mov	r0, r4
 800fc20:	4629      	mov	r1, r5
 800fc22:	f7f0 fcf1 	bl	8000608 <__aeabi_dmul>
 800fc26:	4602      	mov	r2, r0
 800fc28:	460b      	mov	r3, r1
 800fc2a:	4630      	mov	r0, r6
 800fc2c:	4639      	mov	r1, r7
 800fc2e:	f7f0 fb35 	bl	800029c <__adddf3>
 800fc32:	9a07      	ldr	r2, [sp, #28]
 800fc34:	4b37      	ldr	r3, [pc, #220]	; (800fd14 <__ieee754_pow+0x774>)
 800fc36:	4413      	add	r3, r2
 800fc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3c:	f7f0 fb2e 	bl	800029c <__adddf3>
 800fc40:	4682      	mov	sl, r0
 800fc42:	9805      	ldr	r0, [sp, #20]
 800fc44:	468b      	mov	fp, r1
 800fc46:	f7f0 fc75 	bl	8000534 <__aeabi_i2d>
 800fc4a:	9a07      	ldr	r2, [sp, #28]
 800fc4c:	4b32      	ldr	r3, [pc, #200]	; (800fd18 <__ieee754_pow+0x778>)
 800fc4e:	4413      	add	r3, r2
 800fc50:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fc54:	4606      	mov	r6, r0
 800fc56:	460f      	mov	r7, r1
 800fc58:	4652      	mov	r2, sl
 800fc5a:	465b      	mov	r3, fp
 800fc5c:	ec51 0b18 	vmov	r0, r1, d8
 800fc60:	f7f0 fb1c 	bl	800029c <__adddf3>
 800fc64:	4642      	mov	r2, r8
 800fc66:	464b      	mov	r3, r9
 800fc68:	f7f0 fb18 	bl	800029c <__adddf3>
 800fc6c:	4632      	mov	r2, r6
 800fc6e:	463b      	mov	r3, r7
 800fc70:	f7f0 fb14 	bl	800029c <__adddf3>
 800fc74:	2000      	movs	r0, #0
 800fc76:	4632      	mov	r2, r6
 800fc78:	463b      	mov	r3, r7
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	460d      	mov	r5, r1
 800fc7e:	f7f0 fb0b 	bl	8000298 <__aeabi_dsub>
 800fc82:	4642      	mov	r2, r8
 800fc84:	464b      	mov	r3, r9
 800fc86:	f7f0 fb07 	bl	8000298 <__aeabi_dsub>
 800fc8a:	ec53 2b18 	vmov	r2, r3, d8
 800fc8e:	f7f0 fb03 	bl	8000298 <__aeabi_dsub>
 800fc92:	4602      	mov	r2, r0
 800fc94:	460b      	mov	r3, r1
 800fc96:	4650      	mov	r0, sl
 800fc98:	4659      	mov	r1, fp
 800fc9a:	e610      	b.n	800f8be <__ieee754_pow+0x31e>
 800fc9c:	2401      	movs	r4, #1
 800fc9e:	e6a1      	b.n	800f9e4 <__ieee754_pow+0x444>
 800fca0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800fcf0 <__ieee754_pow+0x750>
 800fca4:	e617      	b.n	800f8d6 <__ieee754_pow+0x336>
 800fca6:	bf00      	nop
 800fca8:	4a454eef 	.word	0x4a454eef
 800fcac:	3fca7e28 	.word	0x3fca7e28
 800fcb0:	93c9db65 	.word	0x93c9db65
 800fcb4:	3fcd864a 	.word	0x3fcd864a
 800fcb8:	a91d4101 	.word	0xa91d4101
 800fcbc:	3fd17460 	.word	0x3fd17460
 800fcc0:	518f264d 	.word	0x518f264d
 800fcc4:	3fd55555 	.word	0x3fd55555
 800fcc8:	db6fabff 	.word	0xdb6fabff
 800fccc:	3fdb6db6 	.word	0x3fdb6db6
 800fcd0:	33333303 	.word	0x33333303
 800fcd4:	3fe33333 	.word	0x3fe33333
 800fcd8:	e0000000 	.word	0xe0000000
 800fcdc:	3feec709 	.word	0x3feec709
 800fce0:	dc3a03fd 	.word	0xdc3a03fd
 800fce4:	3feec709 	.word	0x3feec709
 800fce8:	145b01f5 	.word	0x145b01f5
 800fcec:	be3e2fe0 	.word	0xbe3e2fe0
 800fcf0:	00000000 	.word	0x00000000
 800fcf4:	3ff00000 	.word	0x3ff00000
 800fcf8:	7ff00000 	.word	0x7ff00000
 800fcfc:	43400000 	.word	0x43400000
 800fd00:	0003988e 	.word	0x0003988e
 800fd04:	000bb679 	.word	0x000bb679
 800fd08:	08012428 	.word	0x08012428
 800fd0c:	3ff00000 	.word	0x3ff00000
 800fd10:	40080000 	.word	0x40080000
 800fd14:	08012448 	.word	0x08012448
 800fd18:	08012438 	.word	0x08012438
 800fd1c:	a3b5      	add	r3, pc, #724	; (adr r3, 800fff4 <__ieee754_pow+0xa54>)
 800fd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd22:	4640      	mov	r0, r8
 800fd24:	4649      	mov	r1, r9
 800fd26:	f7f0 fab9 	bl	800029c <__adddf3>
 800fd2a:	4622      	mov	r2, r4
 800fd2c:	ec41 0b1a 	vmov	d10, r0, r1
 800fd30:	462b      	mov	r3, r5
 800fd32:	4630      	mov	r0, r6
 800fd34:	4639      	mov	r1, r7
 800fd36:	f7f0 faaf 	bl	8000298 <__aeabi_dsub>
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	ec51 0b1a 	vmov	r0, r1, d10
 800fd42:	f7f0 fef1 	bl	8000b28 <__aeabi_dcmpgt>
 800fd46:	2800      	cmp	r0, #0
 800fd48:	f47f ae04 	bne.w	800f954 <__ieee754_pow+0x3b4>
 800fd4c:	4aa4      	ldr	r2, [pc, #656]	; (800ffe0 <__ieee754_pow+0xa40>)
 800fd4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fd52:	4293      	cmp	r3, r2
 800fd54:	f340 8108 	ble.w	800ff68 <__ieee754_pow+0x9c8>
 800fd58:	151b      	asrs	r3, r3, #20
 800fd5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fd5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fd62:	fa4a f303 	asr.w	r3, sl, r3
 800fd66:	445b      	add	r3, fp
 800fd68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800fd6c:	4e9d      	ldr	r6, [pc, #628]	; (800ffe4 <__ieee754_pow+0xa44>)
 800fd6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800fd72:	4116      	asrs	r6, r2
 800fd74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800fd78:	2000      	movs	r0, #0
 800fd7a:	ea23 0106 	bic.w	r1, r3, r6
 800fd7e:	f1c2 0214 	rsb	r2, r2, #20
 800fd82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800fd86:	fa4a fa02 	asr.w	sl, sl, r2
 800fd8a:	f1bb 0f00 	cmp.w	fp, #0
 800fd8e:	4602      	mov	r2, r0
 800fd90:	460b      	mov	r3, r1
 800fd92:	4620      	mov	r0, r4
 800fd94:	4629      	mov	r1, r5
 800fd96:	bfb8      	it	lt
 800fd98:	f1ca 0a00 	rsblt	sl, sl, #0
 800fd9c:	f7f0 fa7c 	bl	8000298 <__aeabi_dsub>
 800fda0:	ec41 0b19 	vmov	d9, r0, r1
 800fda4:	4642      	mov	r2, r8
 800fda6:	464b      	mov	r3, r9
 800fda8:	ec51 0b19 	vmov	r0, r1, d9
 800fdac:	f7f0 fa76 	bl	800029c <__adddf3>
 800fdb0:	a37b      	add	r3, pc, #492	; (adr r3, 800ffa0 <__ieee754_pow+0xa00>)
 800fdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb6:	2000      	movs	r0, #0
 800fdb8:	4604      	mov	r4, r0
 800fdba:	460d      	mov	r5, r1
 800fdbc:	f7f0 fc24 	bl	8000608 <__aeabi_dmul>
 800fdc0:	ec53 2b19 	vmov	r2, r3, d9
 800fdc4:	4606      	mov	r6, r0
 800fdc6:	460f      	mov	r7, r1
 800fdc8:	4620      	mov	r0, r4
 800fdca:	4629      	mov	r1, r5
 800fdcc:	f7f0 fa64 	bl	8000298 <__aeabi_dsub>
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	4640      	mov	r0, r8
 800fdd6:	4649      	mov	r1, r9
 800fdd8:	f7f0 fa5e 	bl	8000298 <__aeabi_dsub>
 800fddc:	a372      	add	r3, pc, #456	; (adr r3, 800ffa8 <__ieee754_pow+0xa08>)
 800fdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde2:	f7f0 fc11 	bl	8000608 <__aeabi_dmul>
 800fde6:	a372      	add	r3, pc, #456	; (adr r3, 800ffb0 <__ieee754_pow+0xa10>)
 800fde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdec:	4680      	mov	r8, r0
 800fdee:	4689      	mov	r9, r1
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	4629      	mov	r1, r5
 800fdf4:	f7f0 fc08 	bl	8000608 <__aeabi_dmul>
 800fdf8:	4602      	mov	r2, r0
 800fdfa:	460b      	mov	r3, r1
 800fdfc:	4640      	mov	r0, r8
 800fdfe:	4649      	mov	r1, r9
 800fe00:	f7f0 fa4c 	bl	800029c <__adddf3>
 800fe04:	4604      	mov	r4, r0
 800fe06:	460d      	mov	r5, r1
 800fe08:	4602      	mov	r2, r0
 800fe0a:	460b      	mov	r3, r1
 800fe0c:	4630      	mov	r0, r6
 800fe0e:	4639      	mov	r1, r7
 800fe10:	f7f0 fa44 	bl	800029c <__adddf3>
 800fe14:	4632      	mov	r2, r6
 800fe16:	463b      	mov	r3, r7
 800fe18:	4680      	mov	r8, r0
 800fe1a:	4689      	mov	r9, r1
 800fe1c:	f7f0 fa3c 	bl	8000298 <__aeabi_dsub>
 800fe20:	4602      	mov	r2, r0
 800fe22:	460b      	mov	r3, r1
 800fe24:	4620      	mov	r0, r4
 800fe26:	4629      	mov	r1, r5
 800fe28:	f7f0 fa36 	bl	8000298 <__aeabi_dsub>
 800fe2c:	4642      	mov	r2, r8
 800fe2e:	4606      	mov	r6, r0
 800fe30:	460f      	mov	r7, r1
 800fe32:	464b      	mov	r3, r9
 800fe34:	4640      	mov	r0, r8
 800fe36:	4649      	mov	r1, r9
 800fe38:	f7f0 fbe6 	bl	8000608 <__aeabi_dmul>
 800fe3c:	a35e      	add	r3, pc, #376	; (adr r3, 800ffb8 <__ieee754_pow+0xa18>)
 800fe3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe42:	4604      	mov	r4, r0
 800fe44:	460d      	mov	r5, r1
 800fe46:	f7f0 fbdf 	bl	8000608 <__aeabi_dmul>
 800fe4a:	a35d      	add	r3, pc, #372	; (adr r3, 800ffc0 <__ieee754_pow+0xa20>)
 800fe4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe50:	f7f0 fa22 	bl	8000298 <__aeabi_dsub>
 800fe54:	4622      	mov	r2, r4
 800fe56:	462b      	mov	r3, r5
 800fe58:	f7f0 fbd6 	bl	8000608 <__aeabi_dmul>
 800fe5c:	a35a      	add	r3, pc, #360	; (adr r3, 800ffc8 <__ieee754_pow+0xa28>)
 800fe5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe62:	f7f0 fa1b 	bl	800029c <__adddf3>
 800fe66:	4622      	mov	r2, r4
 800fe68:	462b      	mov	r3, r5
 800fe6a:	f7f0 fbcd 	bl	8000608 <__aeabi_dmul>
 800fe6e:	a358      	add	r3, pc, #352	; (adr r3, 800ffd0 <__ieee754_pow+0xa30>)
 800fe70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe74:	f7f0 fa10 	bl	8000298 <__aeabi_dsub>
 800fe78:	4622      	mov	r2, r4
 800fe7a:	462b      	mov	r3, r5
 800fe7c:	f7f0 fbc4 	bl	8000608 <__aeabi_dmul>
 800fe80:	a355      	add	r3, pc, #340	; (adr r3, 800ffd8 <__ieee754_pow+0xa38>)
 800fe82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe86:	f7f0 fa09 	bl	800029c <__adddf3>
 800fe8a:	4622      	mov	r2, r4
 800fe8c:	462b      	mov	r3, r5
 800fe8e:	f7f0 fbbb 	bl	8000608 <__aeabi_dmul>
 800fe92:	4602      	mov	r2, r0
 800fe94:	460b      	mov	r3, r1
 800fe96:	4640      	mov	r0, r8
 800fe98:	4649      	mov	r1, r9
 800fe9a:	f7f0 f9fd 	bl	8000298 <__aeabi_dsub>
 800fe9e:	4604      	mov	r4, r0
 800fea0:	460d      	mov	r5, r1
 800fea2:	4602      	mov	r2, r0
 800fea4:	460b      	mov	r3, r1
 800fea6:	4640      	mov	r0, r8
 800fea8:	4649      	mov	r1, r9
 800feaa:	f7f0 fbad 	bl	8000608 <__aeabi_dmul>
 800feae:	2200      	movs	r2, #0
 800feb0:	ec41 0b19 	vmov	d9, r0, r1
 800feb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800feb8:	4620      	mov	r0, r4
 800feba:	4629      	mov	r1, r5
 800febc:	f7f0 f9ec 	bl	8000298 <__aeabi_dsub>
 800fec0:	4602      	mov	r2, r0
 800fec2:	460b      	mov	r3, r1
 800fec4:	ec51 0b19 	vmov	r0, r1, d9
 800fec8:	f7f0 fcc8 	bl	800085c <__aeabi_ddiv>
 800fecc:	4632      	mov	r2, r6
 800fece:	4604      	mov	r4, r0
 800fed0:	460d      	mov	r5, r1
 800fed2:	463b      	mov	r3, r7
 800fed4:	4640      	mov	r0, r8
 800fed6:	4649      	mov	r1, r9
 800fed8:	f7f0 fb96 	bl	8000608 <__aeabi_dmul>
 800fedc:	4632      	mov	r2, r6
 800fede:	463b      	mov	r3, r7
 800fee0:	f7f0 f9dc 	bl	800029c <__adddf3>
 800fee4:	4602      	mov	r2, r0
 800fee6:	460b      	mov	r3, r1
 800fee8:	4620      	mov	r0, r4
 800feea:	4629      	mov	r1, r5
 800feec:	f7f0 f9d4 	bl	8000298 <__aeabi_dsub>
 800fef0:	4642      	mov	r2, r8
 800fef2:	464b      	mov	r3, r9
 800fef4:	f7f0 f9d0 	bl	8000298 <__aeabi_dsub>
 800fef8:	460b      	mov	r3, r1
 800fefa:	4602      	mov	r2, r0
 800fefc:	493a      	ldr	r1, [pc, #232]	; (800ffe8 <__ieee754_pow+0xa48>)
 800fefe:	2000      	movs	r0, #0
 800ff00:	f7f0 f9ca 	bl	8000298 <__aeabi_dsub>
 800ff04:	ec41 0b10 	vmov	d0, r0, r1
 800ff08:	ee10 3a90 	vmov	r3, s1
 800ff0c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ff10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff14:	da2b      	bge.n	800ff6e <__ieee754_pow+0x9ce>
 800ff16:	4650      	mov	r0, sl
 800ff18:	f000 f966 	bl	80101e8 <scalbn>
 800ff1c:	ec51 0b10 	vmov	r0, r1, d0
 800ff20:	ec53 2b18 	vmov	r2, r3, d8
 800ff24:	f7ff bbed 	b.w	800f702 <__ieee754_pow+0x162>
 800ff28:	4b30      	ldr	r3, [pc, #192]	; (800ffec <__ieee754_pow+0xa4c>)
 800ff2a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ff2e:	429e      	cmp	r6, r3
 800ff30:	f77f af0c 	ble.w	800fd4c <__ieee754_pow+0x7ac>
 800ff34:	4b2e      	ldr	r3, [pc, #184]	; (800fff0 <__ieee754_pow+0xa50>)
 800ff36:	440b      	add	r3, r1
 800ff38:	4303      	orrs	r3, r0
 800ff3a:	d009      	beq.n	800ff50 <__ieee754_pow+0x9b0>
 800ff3c:	ec51 0b18 	vmov	r0, r1, d8
 800ff40:	2200      	movs	r2, #0
 800ff42:	2300      	movs	r3, #0
 800ff44:	f7f0 fdd2 	bl	8000aec <__aeabi_dcmplt>
 800ff48:	3800      	subs	r0, #0
 800ff4a:	bf18      	it	ne
 800ff4c:	2001      	movne	r0, #1
 800ff4e:	e447      	b.n	800f7e0 <__ieee754_pow+0x240>
 800ff50:	4622      	mov	r2, r4
 800ff52:	462b      	mov	r3, r5
 800ff54:	f7f0 f9a0 	bl	8000298 <__aeabi_dsub>
 800ff58:	4642      	mov	r2, r8
 800ff5a:	464b      	mov	r3, r9
 800ff5c:	f7f0 fdda 	bl	8000b14 <__aeabi_dcmpge>
 800ff60:	2800      	cmp	r0, #0
 800ff62:	f43f aef3 	beq.w	800fd4c <__ieee754_pow+0x7ac>
 800ff66:	e7e9      	b.n	800ff3c <__ieee754_pow+0x99c>
 800ff68:	f04f 0a00 	mov.w	sl, #0
 800ff6c:	e71a      	b.n	800fda4 <__ieee754_pow+0x804>
 800ff6e:	ec51 0b10 	vmov	r0, r1, d0
 800ff72:	4619      	mov	r1, r3
 800ff74:	e7d4      	b.n	800ff20 <__ieee754_pow+0x980>
 800ff76:	491c      	ldr	r1, [pc, #112]	; (800ffe8 <__ieee754_pow+0xa48>)
 800ff78:	2000      	movs	r0, #0
 800ff7a:	f7ff bb30 	b.w	800f5de <__ieee754_pow+0x3e>
 800ff7e:	2000      	movs	r0, #0
 800ff80:	2100      	movs	r1, #0
 800ff82:	f7ff bb2c 	b.w	800f5de <__ieee754_pow+0x3e>
 800ff86:	4630      	mov	r0, r6
 800ff88:	4639      	mov	r1, r7
 800ff8a:	f7ff bb28 	b.w	800f5de <__ieee754_pow+0x3e>
 800ff8e:	9204      	str	r2, [sp, #16]
 800ff90:	f7ff bb7a 	b.w	800f688 <__ieee754_pow+0xe8>
 800ff94:	2300      	movs	r3, #0
 800ff96:	f7ff bb64 	b.w	800f662 <__ieee754_pow+0xc2>
 800ff9a:	bf00      	nop
 800ff9c:	f3af 8000 	nop.w
 800ffa0:	00000000 	.word	0x00000000
 800ffa4:	3fe62e43 	.word	0x3fe62e43
 800ffa8:	fefa39ef 	.word	0xfefa39ef
 800ffac:	3fe62e42 	.word	0x3fe62e42
 800ffb0:	0ca86c39 	.word	0x0ca86c39
 800ffb4:	be205c61 	.word	0xbe205c61
 800ffb8:	72bea4d0 	.word	0x72bea4d0
 800ffbc:	3e663769 	.word	0x3e663769
 800ffc0:	c5d26bf1 	.word	0xc5d26bf1
 800ffc4:	3ebbbd41 	.word	0x3ebbbd41
 800ffc8:	af25de2c 	.word	0xaf25de2c
 800ffcc:	3f11566a 	.word	0x3f11566a
 800ffd0:	16bebd93 	.word	0x16bebd93
 800ffd4:	3f66c16c 	.word	0x3f66c16c
 800ffd8:	5555553e 	.word	0x5555553e
 800ffdc:	3fc55555 	.word	0x3fc55555
 800ffe0:	3fe00000 	.word	0x3fe00000
 800ffe4:	000fffff 	.word	0x000fffff
 800ffe8:	3ff00000 	.word	0x3ff00000
 800ffec:	4090cbff 	.word	0x4090cbff
 800fff0:	3f6f3400 	.word	0x3f6f3400
 800fff4:	652b82fe 	.word	0x652b82fe
 800fff8:	3c971547 	.word	0x3c971547

0800fffc <__ieee754_sqrt>:
 800fffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010000:	ec55 4b10 	vmov	r4, r5, d0
 8010004:	4e55      	ldr	r6, [pc, #340]	; (801015c <__ieee754_sqrt+0x160>)
 8010006:	43ae      	bics	r6, r5
 8010008:	ee10 0a10 	vmov	r0, s0
 801000c:	ee10 3a10 	vmov	r3, s0
 8010010:	462a      	mov	r2, r5
 8010012:	4629      	mov	r1, r5
 8010014:	d110      	bne.n	8010038 <__ieee754_sqrt+0x3c>
 8010016:	ee10 2a10 	vmov	r2, s0
 801001a:	462b      	mov	r3, r5
 801001c:	f7f0 faf4 	bl	8000608 <__aeabi_dmul>
 8010020:	4602      	mov	r2, r0
 8010022:	460b      	mov	r3, r1
 8010024:	4620      	mov	r0, r4
 8010026:	4629      	mov	r1, r5
 8010028:	f7f0 f938 	bl	800029c <__adddf3>
 801002c:	4604      	mov	r4, r0
 801002e:	460d      	mov	r5, r1
 8010030:	ec45 4b10 	vmov	d0, r4, r5
 8010034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010038:	2d00      	cmp	r5, #0
 801003a:	dc10      	bgt.n	801005e <__ieee754_sqrt+0x62>
 801003c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010040:	4330      	orrs	r0, r6
 8010042:	d0f5      	beq.n	8010030 <__ieee754_sqrt+0x34>
 8010044:	b15d      	cbz	r5, 801005e <__ieee754_sqrt+0x62>
 8010046:	ee10 2a10 	vmov	r2, s0
 801004a:	462b      	mov	r3, r5
 801004c:	ee10 0a10 	vmov	r0, s0
 8010050:	f7f0 f922 	bl	8000298 <__aeabi_dsub>
 8010054:	4602      	mov	r2, r0
 8010056:	460b      	mov	r3, r1
 8010058:	f7f0 fc00 	bl	800085c <__aeabi_ddiv>
 801005c:	e7e6      	b.n	801002c <__ieee754_sqrt+0x30>
 801005e:	1512      	asrs	r2, r2, #20
 8010060:	d074      	beq.n	801014c <__ieee754_sqrt+0x150>
 8010062:	07d4      	lsls	r4, r2, #31
 8010064:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010068:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801006c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010070:	bf5e      	ittt	pl
 8010072:	0fda      	lsrpl	r2, r3, #31
 8010074:	005b      	lslpl	r3, r3, #1
 8010076:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801007a:	2400      	movs	r4, #0
 801007c:	0fda      	lsrs	r2, r3, #31
 801007e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010082:	107f      	asrs	r7, r7, #1
 8010084:	005b      	lsls	r3, r3, #1
 8010086:	2516      	movs	r5, #22
 8010088:	4620      	mov	r0, r4
 801008a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801008e:	1886      	adds	r6, r0, r2
 8010090:	428e      	cmp	r6, r1
 8010092:	bfde      	ittt	le
 8010094:	1b89      	suble	r1, r1, r6
 8010096:	18b0      	addle	r0, r6, r2
 8010098:	18a4      	addle	r4, r4, r2
 801009a:	0049      	lsls	r1, r1, #1
 801009c:	3d01      	subs	r5, #1
 801009e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80100a2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80100a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80100aa:	d1f0      	bne.n	801008e <__ieee754_sqrt+0x92>
 80100ac:	462a      	mov	r2, r5
 80100ae:	f04f 0e20 	mov.w	lr, #32
 80100b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80100b6:	4281      	cmp	r1, r0
 80100b8:	eb06 0c05 	add.w	ip, r6, r5
 80100bc:	dc02      	bgt.n	80100c4 <__ieee754_sqrt+0xc8>
 80100be:	d113      	bne.n	80100e8 <__ieee754_sqrt+0xec>
 80100c0:	459c      	cmp	ip, r3
 80100c2:	d811      	bhi.n	80100e8 <__ieee754_sqrt+0xec>
 80100c4:	f1bc 0f00 	cmp.w	ip, #0
 80100c8:	eb0c 0506 	add.w	r5, ip, r6
 80100cc:	da43      	bge.n	8010156 <__ieee754_sqrt+0x15a>
 80100ce:	2d00      	cmp	r5, #0
 80100d0:	db41      	blt.n	8010156 <__ieee754_sqrt+0x15a>
 80100d2:	f100 0801 	add.w	r8, r0, #1
 80100d6:	1a09      	subs	r1, r1, r0
 80100d8:	459c      	cmp	ip, r3
 80100da:	bf88      	it	hi
 80100dc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80100e0:	eba3 030c 	sub.w	r3, r3, ip
 80100e4:	4432      	add	r2, r6
 80100e6:	4640      	mov	r0, r8
 80100e8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80100ec:	f1be 0e01 	subs.w	lr, lr, #1
 80100f0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80100f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80100f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80100fc:	d1db      	bne.n	80100b6 <__ieee754_sqrt+0xba>
 80100fe:	430b      	orrs	r3, r1
 8010100:	d006      	beq.n	8010110 <__ieee754_sqrt+0x114>
 8010102:	1c50      	adds	r0, r2, #1
 8010104:	bf13      	iteet	ne
 8010106:	3201      	addne	r2, #1
 8010108:	3401      	addeq	r4, #1
 801010a:	4672      	moveq	r2, lr
 801010c:	f022 0201 	bicne.w	r2, r2, #1
 8010110:	1063      	asrs	r3, r4, #1
 8010112:	0852      	lsrs	r2, r2, #1
 8010114:	07e1      	lsls	r1, r4, #31
 8010116:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801011a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801011e:	bf48      	it	mi
 8010120:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010124:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010128:	4614      	mov	r4, r2
 801012a:	e781      	b.n	8010030 <__ieee754_sqrt+0x34>
 801012c:	0ad9      	lsrs	r1, r3, #11
 801012e:	3815      	subs	r0, #21
 8010130:	055b      	lsls	r3, r3, #21
 8010132:	2900      	cmp	r1, #0
 8010134:	d0fa      	beq.n	801012c <__ieee754_sqrt+0x130>
 8010136:	02cd      	lsls	r5, r1, #11
 8010138:	d50a      	bpl.n	8010150 <__ieee754_sqrt+0x154>
 801013a:	f1c2 0420 	rsb	r4, r2, #32
 801013e:	fa23 f404 	lsr.w	r4, r3, r4
 8010142:	1e55      	subs	r5, r2, #1
 8010144:	4093      	lsls	r3, r2
 8010146:	4321      	orrs	r1, r4
 8010148:	1b42      	subs	r2, r0, r5
 801014a:	e78a      	b.n	8010062 <__ieee754_sqrt+0x66>
 801014c:	4610      	mov	r0, r2
 801014e:	e7f0      	b.n	8010132 <__ieee754_sqrt+0x136>
 8010150:	0049      	lsls	r1, r1, #1
 8010152:	3201      	adds	r2, #1
 8010154:	e7ef      	b.n	8010136 <__ieee754_sqrt+0x13a>
 8010156:	4680      	mov	r8, r0
 8010158:	e7bd      	b.n	80100d6 <__ieee754_sqrt+0xda>
 801015a:	bf00      	nop
 801015c:	7ff00000 	.word	0x7ff00000

08010160 <with_errno>:
 8010160:	b570      	push	{r4, r5, r6, lr}
 8010162:	4604      	mov	r4, r0
 8010164:	460d      	mov	r5, r1
 8010166:	4616      	mov	r6, r2
 8010168:	f7fa fc9a 	bl	800aaa0 <__errno>
 801016c:	4629      	mov	r1, r5
 801016e:	6006      	str	r6, [r0, #0]
 8010170:	4620      	mov	r0, r4
 8010172:	bd70      	pop	{r4, r5, r6, pc}

08010174 <xflow>:
 8010174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010176:	4614      	mov	r4, r2
 8010178:	461d      	mov	r5, r3
 801017a:	b108      	cbz	r0, 8010180 <xflow+0xc>
 801017c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010180:	e9cd 2300 	strd	r2, r3, [sp]
 8010184:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010188:	4620      	mov	r0, r4
 801018a:	4629      	mov	r1, r5
 801018c:	f7f0 fa3c 	bl	8000608 <__aeabi_dmul>
 8010190:	2222      	movs	r2, #34	; 0x22
 8010192:	b003      	add	sp, #12
 8010194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010198:	f7ff bfe2 	b.w	8010160 <with_errno>

0801019c <__math_uflow>:
 801019c:	b508      	push	{r3, lr}
 801019e:	2200      	movs	r2, #0
 80101a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80101a4:	f7ff ffe6 	bl	8010174 <xflow>
 80101a8:	ec41 0b10 	vmov	d0, r0, r1
 80101ac:	bd08      	pop	{r3, pc}

080101ae <__math_oflow>:
 80101ae:	b508      	push	{r3, lr}
 80101b0:	2200      	movs	r2, #0
 80101b2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80101b6:	f7ff ffdd 	bl	8010174 <xflow>
 80101ba:	ec41 0b10 	vmov	d0, r0, r1
 80101be:	bd08      	pop	{r3, pc}

080101c0 <fabs>:
 80101c0:	ec51 0b10 	vmov	r0, r1, d0
 80101c4:	ee10 2a10 	vmov	r2, s0
 80101c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80101cc:	ec43 2b10 	vmov	d0, r2, r3
 80101d0:	4770      	bx	lr

080101d2 <finite>:
 80101d2:	b082      	sub	sp, #8
 80101d4:	ed8d 0b00 	vstr	d0, [sp]
 80101d8:	9801      	ldr	r0, [sp, #4]
 80101da:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80101de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80101e2:	0fc0      	lsrs	r0, r0, #31
 80101e4:	b002      	add	sp, #8
 80101e6:	4770      	bx	lr

080101e8 <scalbn>:
 80101e8:	b570      	push	{r4, r5, r6, lr}
 80101ea:	ec55 4b10 	vmov	r4, r5, d0
 80101ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80101f2:	4606      	mov	r6, r0
 80101f4:	462b      	mov	r3, r5
 80101f6:	b99a      	cbnz	r2, 8010220 <scalbn+0x38>
 80101f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80101fc:	4323      	orrs	r3, r4
 80101fe:	d036      	beq.n	801026e <scalbn+0x86>
 8010200:	4b39      	ldr	r3, [pc, #228]	; (80102e8 <scalbn+0x100>)
 8010202:	4629      	mov	r1, r5
 8010204:	ee10 0a10 	vmov	r0, s0
 8010208:	2200      	movs	r2, #0
 801020a:	f7f0 f9fd 	bl	8000608 <__aeabi_dmul>
 801020e:	4b37      	ldr	r3, [pc, #220]	; (80102ec <scalbn+0x104>)
 8010210:	429e      	cmp	r6, r3
 8010212:	4604      	mov	r4, r0
 8010214:	460d      	mov	r5, r1
 8010216:	da10      	bge.n	801023a <scalbn+0x52>
 8010218:	a32b      	add	r3, pc, #172	; (adr r3, 80102c8 <scalbn+0xe0>)
 801021a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021e:	e03a      	b.n	8010296 <scalbn+0xae>
 8010220:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010224:	428a      	cmp	r2, r1
 8010226:	d10c      	bne.n	8010242 <scalbn+0x5a>
 8010228:	ee10 2a10 	vmov	r2, s0
 801022c:	4620      	mov	r0, r4
 801022e:	4629      	mov	r1, r5
 8010230:	f7f0 f834 	bl	800029c <__adddf3>
 8010234:	4604      	mov	r4, r0
 8010236:	460d      	mov	r5, r1
 8010238:	e019      	b.n	801026e <scalbn+0x86>
 801023a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801023e:	460b      	mov	r3, r1
 8010240:	3a36      	subs	r2, #54	; 0x36
 8010242:	4432      	add	r2, r6
 8010244:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010248:	428a      	cmp	r2, r1
 801024a:	dd08      	ble.n	801025e <scalbn+0x76>
 801024c:	2d00      	cmp	r5, #0
 801024e:	a120      	add	r1, pc, #128	; (adr r1, 80102d0 <scalbn+0xe8>)
 8010250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010254:	da1c      	bge.n	8010290 <scalbn+0xa8>
 8010256:	a120      	add	r1, pc, #128	; (adr r1, 80102d8 <scalbn+0xf0>)
 8010258:	e9d1 0100 	ldrd	r0, r1, [r1]
 801025c:	e018      	b.n	8010290 <scalbn+0xa8>
 801025e:	2a00      	cmp	r2, #0
 8010260:	dd08      	ble.n	8010274 <scalbn+0x8c>
 8010262:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010266:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801026a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801026e:	ec45 4b10 	vmov	d0, r4, r5
 8010272:	bd70      	pop	{r4, r5, r6, pc}
 8010274:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010278:	da19      	bge.n	80102ae <scalbn+0xc6>
 801027a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801027e:	429e      	cmp	r6, r3
 8010280:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010284:	dd0a      	ble.n	801029c <scalbn+0xb4>
 8010286:	a112      	add	r1, pc, #72	; (adr r1, 80102d0 <scalbn+0xe8>)
 8010288:	e9d1 0100 	ldrd	r0, r1, [r1]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d1e2      	bne.n	8010256 <scalbn+0x6e>
 8010290:	a30f      	add	r3, pc, #60	; (adr r3, 80102d0 <scalbn+0xe8>)
 8010292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010296:	f7f0 f9b7 	bl	8000608 <__aeabi_dmul>
 801029a:	e7cb      	b.n	8010234 <scalbn+0x4c>
 801029c:	a10a      	add	r1, pc, #40	; (adr r1, 80102c8 <scalbn+0xe0>)
 801029e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d0b8      	beq.n	8010218 <scalbn+0x30>
 80102a6:	a10e      	add	r1, pc, #56	; (adr r1, 80102e0 <scalbn+0xf8>)
 80102a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102ac:	e7b4      	b.n	8010218 <scalbn+0x30>
 80102ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80102b2:	3236      	adds	r2, #54	; 0x36
 80102b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80102b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80102bc:	4620      	mov	r0, r4
 80102be:	4b0c      	ldr	r3, [pc, #48]	; (80102f0 <scalbn+0x108>)
 80102c0:	2200      	movs	r2, #0
 80102c2:	e7e8      	b.n	8010296 <scalbn+0xae>
 80102c4:	f3af 8000 	nop.w
 80102c8:	c2f8f359 	.word	0xc2f8f359
 80102cc:	01a56e1f 	.word	0x01a56e1f
 80102d0:	8800759c 	.word	0x8800759c
 80102d4:	7e37e43c 	.word	0x7e37e43c
 80102d8:	8800759c 	.word	0x8800759c
 80102dc:	fe37e43c 	.word	0xfe37e43c
 80102e0:	c2f8f359 	.word	0xc2f8f359
 80102e4:	81a56e1f 	.word	0x81a56e1f
 80102e8:	43500000 	.word	0x43500000
 80102ec:	ffff3cb0 	.word	0xffff3cb0
 80102f0:	3c900000 	.word	0x3c900000

080102f4 <_init>:
 80102f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f6:	bf00      	nop
 80102f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102fa:	bc08      	pop	{r3}
 80102fc:	469e      	mov	lr, r3
 80102fe:	4770      	bx	lr

08010300 <_fini>:
 8010300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010302:	bf00      	nop
 8010304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010306:	bc08      	pop	{r3}
 8010308:	469e      	mov	lr, r3
 801030a:	4770      	bx	lr
