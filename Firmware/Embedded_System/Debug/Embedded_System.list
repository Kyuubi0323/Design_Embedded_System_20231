
Embedded_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ec8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  08009068  08009068  00019068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800967c  0800967c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800967c  0800967c  0001967c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009684  08009684  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009684  08009684  00019684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009688  08009688  00019688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800968c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c88  20000078  08009704  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d00  08009704  00024d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022433  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000488c  00000000  00000000  000424db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  00046d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001940  00000000  00000000  00048840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aced  00000000  00000000  0004a180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025aef  00000000  00000000  00064e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d4ac  00000000  00000000  0008a95c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00127e08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007360  00000000  00000000  00127e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009050 	.word	0x08009050

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08009050 	.word	0x08009050

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_DMA_Init+0x3c>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <MX_DMA_Init+0x3c>)
 80004f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_DMA_Init+0x3c>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2105      	movs	r1, #5
 800050a:	2010      	movs	r0, #16
 800050c:	f001 f8da 	bl	80016c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000510:	2010      	movs	r0, #16
 8000512:	f001 f903 	bl	800171c <HAL_NVIC_EnableIRQ>

}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40023800 	.word	0x40023800

08000524 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Timer_core */
  Timer_coreHandle = osTimerNew(Callback_timer, osTimerPeriodic, NULL, &Timer_core_attributes);
 8000528:	4b19      	ldr	r3, [pc, #100]	; (8000590 <MX_FREERTOS_Init+0x6c>)
 800052a:	2200      	movs	r2, #0
 800052c:	2101      	movs	r1, #1
 800052e:	4819      	ldr	r0, [pc, #100]	; (8000594 <MX_FREERTOS_Init+0x70>)
 8000530:	f005 fdfc 	bl	800612c <osTimerNew>
 8000534:	4603      	mov	r3, r0
 8000536:	4a18      	ldr	r2, [pc, #96]	; (8000598 <MX_FREERTOS_Init+0x74>)
 8000538:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SuperQueue */
  SuperQueueHandle = osMessageQueueNew (64, sizeof(uint16_t), &SuperQueue_attributes);
 800053a:	4a18      	ldr	r2, [pc, #96]	; (800059c <MX_FREERTOS_Init+0x78>)
 800053c:	2102      	movs	r1, #2
 800053e:	2040      	movs	r0, #64	; 0x40
 8000540:	f005 fe9e 	bl	8006280 <osMessageQueueNew>
 8000544:	4603      	mov	r3, r0
 8000546:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <MX_FREERTOS_Init+0x7c>)
 8000548:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LCD_task */
  LCD_taskHandle = osThreadNew(LCD_func, NULL, &LCD_task_attributes);
 800054a:	4a16      	ldr	r2, [pc, #88]	; (80005a4 <MX_FREERTOS_Init+0x80>)
 800054c:	2100      	movs	r1, #0
 800054e:	4816      	ldr	r0, [pc, #88]	; (80005a8 <MX_FREERTOS_Init+0x84>)
 8000550:	f005 fd2a 	bl	8005fa8 <osThreadNew>
 8000554:	4603      	mov	r3, r0
 8000556:	4a15      	ldr	r2, [pc, #84]	; (80005ac <MX_FREERTOS_Init+0x88>)
 8000558:	6013      	str	r3, [r2, #0]

  /* creation of Blynk_LED */
  Blynk_LEDHandle = osThreadNew(LED_func, NULL, &Blynk_LED_attributes);
 800055a:	4a15      	ldr	r2, [pc, #84]	; (80005b0 <MX_FREERTOS_Init+0x8c>)
 800055c:	2100      	movs	r1, #0
 800055e:	4815      	ldr	r0, [pc, #84]	; (80005b4 <MX_FREERTOS_Init+0x90>)
 8000560:	f005 fd22 	bl	8005fa8 <osThreadNew>
 8000564:	4603      	mov	r3, r0
 8000566:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <MX_FREERTOS_Init+0x94>)
 8000568:	6013      	str	r3, [r2, #0]

  /* creation of MAX30102 */
  MAX30102Handle = osThreadNew(max30102_task, NULL, &MAX30102_attributes);
 800056a:	4a14      	ldr	r2, [pc, #80]	; (80005bc <MX_FREERTOS_Init+0x98>)
 800056c:	2100      	movs	r1, #0
 800056e:	4814      	ldr	r0, [pc, #80]	; (80005c0 <MX_FREERTOS_Init+0x9c>)
 8000570:	f005 fd1a 	bl	8005fa8 <osThreadNew>
 8000574:	4603      	mov	r3, r0
 8000576:	4a13      	ldr	r2, [pc, #76]	; (80005c4 <MX_FREERTOS_Init+0xa0>)
 8000578:	6013      	str	r3, [r2, #0]

  /* creation of Uart_user */
  Uart_userHandle = osThreadNew(Uart_task, NULL, &Uart_user_attributes);
 800057a:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <MX_FREERTOS_Init+0xa4>)
 800057c:	2100      	movs	r1, #0
 800057e:	4813      	ldr	r0, [pc, #76]	; (80005cc <MX_FREERTOS_Init+0xa8>)
 8000580:	f005 fd12 	bl	8005fa8 <osThreadNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <MX_FREERTOS_Init+0xac>)
 8000588:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	080095ec 	.word	0x080095ec
 8000594:	08000671 	.word	0x08000671
 8000598:	200000bc 	.word	0x200000bc
 800059c:	080095d4 	.word	0x080095d4
 80005a0:	200000b8 	.word	0x200000b8
 80005a4:	08009544 	.word	0x08009544
 80005a8:	080005d5 	.word	0x080005d5
 80005ac:	200000a8 	.word	0x200000a8
 80005b0:	08009568 	.word	0x08009568
 80005b4:	08000605 	.word	0x08000605
 80005b8:	200000ac 	.word	0x200000ac
 80005bc:	0800958c 	.word	0x0800958c
 80005c0:	08000625 	.word	0x08000625
 80005c4:	200000b0 	.word	0x200000b0
 80005c8:	080095b0 	.word	0x080095b0
 80005cc:	08000639 	.word	0x08000639
 80005d0:	200000b4 	.word	0x200000b4

080005d4 <LCD_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LCD_func */
void LCD_func(void *argument)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCD_func */
	osTimerStart(Timer_coreHandle, 1000);
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <LCD_func+0x2c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005e4:	4618      	mov	r0, r3
 80005e6:	f005 fe1d 	bl	8006224 <osTimerStart>
	ILI9341_Unselect();
 80005ea:	f000 fd61 	bl	80010b0 <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 80005ee:	f000 feff 	bl	80013f0 <ILI9341_TouchUnselect>

	ILI9341_Init();
 80005f2:	f000 fdc7 	bl	8001184 <ILI9341_Init>
	osDelay(3000);
 80005f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005fa:	f005 fd67 	bl	80060cc <osDelay>

  /* Infinite loop */
  for(;;)
 80005fe:	e7fe      	b.n	80005fe <LCD_func+0x2a>
 8000600:	200000bc 	.word	0x200000bc

08000604 <LED_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_func */
void LED_func(void *argument)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800060c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <LED_func+0x1c>)
 8000612:	f002 f849 	bl	80026a8 <HAL_GPIO_TogglePin>
	  osDelay(2000);
 8000616:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800061a:	f005 fd57 	bl	80060cc <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800061e:	e7f5      	b.n	800060c <LED_func+0x8>
 8000620:	40020800 	.word	0x40020800

08000624 <max30102_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_max30102_task */
void max30102_task(void *argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN max30102_task */
	for(;;)
	  {
	    osDelay(2000);
 800062c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000630:	f005 fd4c 	bl	80060cc <osDelay>
 8000634:	e7fa      	b.n	800062c <max30102_task+0x8>
	...

08000638 <Uart_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Uart_task */
void Uart_task(void *argument)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Uart_task */


	HAL_UART_Transmit(&huart1, (uint8_t*)"Happy New Year\r\n", 16, 500);
 8000640:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000644:	2210      	movs	r2, #16
 8000646:	4907      	ldr	r1, [pc, #28]	; (8000664 <Uart_task+0x2c>)
 8000648:	4807      	ldr	r0, [pc, #28]	; (8000668 <Uart_task+0x30>)
 800064a:	f004 fbaf 	bl	8004dac <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1, Tx, sizeof(Tx));
 800064e:	2214      	movs	r2, #20
 8000650:	4906      	ldr	r1, [pc, #24]	; (800066c <Uart_task+0x34>)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <Uart_task+0x30>)
 8000654:	f004 fc3c 	bl	8004ed0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {


    osDelay(1000);
 8000658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065c:	f005 fd36 	bl	80060cc <osDelay>
 8000660:	e7fa      	b.n	8000658 <Uart_task+0x20>
 8000662:	bf00      	nop
 8000664:	080090d0 	.word	0x080090d0
 8000668:	200001fc 	.word	0x200001fc
 800066c:	20000094 	.word	0x20000094

08000670 <Callback_timer>:
  /* USER CODE END Uart_task */
}

/* Callback_timer function */
void Callback_timer(void *argument)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback_timer */
//	printf("timer_callback function");
  /* USER CODE END Callback_timer */
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <HAL_UART_RxCpltCallback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	if(huart->Instance = huart1.Instance)
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_UART_RxCpltCallback+0x30>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d007      	beq.n	80006ac <HAL_UART_RxCpltCallback+0x28>
	{
		HAL_UART_Transmit(&huart1, (uint8_t*) TxBuffer, 12, 500);
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_UART_RxCpltCallback+0x34>)
 800069e:	6819      	ldr	r1, [r3, #0]
 80006a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006a4:	220c      	movs	r2, #12
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <HAL_UART_RxCpltCallback+0x30>)
 80006a8:	f004 fb80 	bl	8004dac <HAL_UART_Transmit>
	}
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200001fc 	.word	0x200001fc
 80006b8:	20000000 	.word	0x20000000

080006bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	4b44      	ldr	r3, [pc, #272]	; (80007e8 <MX_GPIO_Init+0x12c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a43      	ldr	r2, [pc, #268]	; (80007e8 <MX_GPIO_Init+0x12c>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b41      	ldr	r3, [pc, #260]	; (80007e8 <MX_GPIO_Init+0x12c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <MX_GPIO_Init+0x12c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a3c      	ldr	r2, [pc, #240]	; (80007e8 <MX_GPIO_Init+0x12c>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <MX_GPIO_Init+0x12c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <MX_GPIO_Init+0x12c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a35      	ldr	r2, [pc, #212]	; (80007e8 <MX_GPIO_Init+0x12c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b33      	ldr	r3, [pc, #204]	; (80007e8 <MX_GPIO_Init+0x12c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <MX_GPIO_Init+0x12c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a2e      	ldr	r2, [pc, #184]	; (80007e8 <MX_GPIO_Init+0x12c>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <MX_GPIO_Init+0x12c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000748:	4828      	ldr	r0, [pc, #160]	; (80007ec <MX_GPIO_Init+0x130>)
 800074a:	f001 ff7b 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_LED_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f240 3102 	movw	r1, #770	; 0x302
 8000754:	4826      	ldr	r0, [pc, #152]	; (80007f0 <MX_GPIO_Init+0x134>)
 8000756:	f001 ff75 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, T_IRQ_Pin|SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8000760:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_GPIO_Init+0x138>)
 8000762:	f001 ff6f 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	481b      	ldr	r0, [pc, #108]	; (80007ec <MX_GPIO_Init+0x130>)
 8000780:	f001 fccc 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|LCD_DC_Pin;
 8000784:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4814      	ldr	r0, [pc, #80]	; (80007f0 <MX_GPIO_Init+0x134>)
 800079e:	f001 fcbd 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin;
 80007a2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <MX_GPIO_Init+0x138>)
 80007bc:	f001 fcae 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80007c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_GPIO_Init+0x134>)
 80007da:	f001 fc9f 	bl	800211c <HAL_GPIO_Init>

}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40020400 	.word	0x40020400
 80007f4:	40020000 	.word	0x40020000

080007f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_I2C1_Init+0x50>)
 80007fe:	4a13      	ldr	r2, [pc, #76]	; (800084c <MX_I2C1_Init+0x54>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_I2C1_Init+0x50>)
 8000804:	4a12      	ldr	r2, [pc, #72]	; (8000850 <MX_I2C1_Init+0x58>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_I2C1_Init+0x50>)
 8000816:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800081a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_I2C1_Init+0x50>)
 8000836:	f001 ff5f 	bl	80026f8 <HAL_I2C_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000840:	f000 f8e8 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200000c0 	.word	0x200000c0
 800084c:	40005400 	.word	0x40005400
 8000850:	000186a0 	.word	0x000186a0

08000854 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <HAL_I2C_MspInit+0x84>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d12b      	bne.n	80008ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <HAL_I2C_MspInit+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a17      	ldr	r2, [pc, #92]	; (80008dc <HAL_I2C_MspInit+0x88>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_I2C_MspInit+0x88>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000892:	23c0      	movs	r3, #192	; 0xc0
 8000894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000896:	2312      	movs	r3, #18
 8000898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a2:	2304      	movs	r3, #4
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <HAL_I2C_MspInit+0x8c>)
 80008ae:	f001 fc35 	bl	800211c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_I2C_MspInit+0x88>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_I2C_MspInit+0x88>)
 80008bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_I2C_MspInit+0x88>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	; 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40005400 	.word	0x40005400
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020400 	.word	0x40020400

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e8:	f000 fdb8 	bl	800145c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ec:	f000 f816 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f0:	f7ff fee4 	bl	80006bc <MX_GPIO_Init>
  MX_DMA_Init();
 80008f4:	f7ff fdf6 	bl	80004e4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80008f8:	f000 faba 	bl	8000e70 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80008fc:	f7ff ff7c 	bl	80007f8 <MX_I2C1_Init>
  MX_TIM5_Init();
 8000900:	f000 fa1a 	bl	8000d38 <MX_TIM5_Init>
  MX_SPI1_Init();
 8000904:	f000 f896 	bl	8000a34 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000908:	f000 fadc 	bl	8000ec4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800090c:	f005 fb02 	bl	8005f14 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000910:	f7ff fe08 	bl	8000524 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000914:	f005 fb22 	bl	8005f5c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000918:	e7fe      	b.n	8000918 <main+0x34>
	...

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	; 0x50
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	2230      	movs	r2, #48	; 0x30
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f008 fac6 	bl	8008ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <SystemClock_Config+0xcc>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a27      	ldr	r2, [pc, #156]	; (80009e8 <SystemClock_Config+0xcc>)
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <SystemClock_Config+0xcc>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	4b22      	ldr	r3, [pc, #136]	; (80009ec <SystemClock_Config+0xd0>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000968:	4a20      	ldr	r2, [pc, #128]	; (80009ec <SystemClock_Config+0xd0>)
 800096a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <SystemClock_Config+0xd0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000980:	2301      	movs	r3, #1
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000984:	2310      	movs	r3, #16
 8000986:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000988:	2302      	movs	r3, #2
 800098a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800098c:	2300      	movs	r3, #0
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000990:	2308      	movs	r3, #8
 8000992:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000994:	2354      	movs	r3, #84	; 0x54
 8000996:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000998:	2302      	movs	r3, #2
 800099a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800099c:	2304      	movs	r3, #4
 800099e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 0320 	add.w	r3, r7, #32
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 f873 	bl	8002a90 <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009b0:	f000 f830 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b4:	230f      	movs	r3, #15
 80009b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b8:	2302      	movs	r3, #2
 80009ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	2102      	movs	r1, #2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 fb85 	bl	80030e0 <HAL_RCC_ClockConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009dc:	f000 f81a 	bl	8000a14 <Error_Handler>
  }
}
 80009e0:	bf00      	nop
 80009e2:	3750      	adds	r7, #80	; 0x50
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40007000 	.word	0x40007000

080009f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d101      	bne.n	8000a06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a02:	f000 fd4d 	bl	80014a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40014400 	.word	0x40014400

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <Error_Handler+0x8>

08000a1e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <MX_SPI1_Init+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a80:	220a      	movs	r2, #10
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a86:	f002 fde5 	bl	8003654 <HAL_SPI_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a90:	f7ff ffc0 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000114 	.word	0x20000114
 8000a9c:	40013000 	.word	0x40013000

08000aa0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a28      	ldr	r2, [pc, #160]	; (8000b60 <HAL_SPI_MspInit+0xc0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d149      	bne.n	8000b56 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a1f      	ldr	r2, [pc, #124]	; (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a18      	ldr	r2, [pc, #96]	; (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b16:	2320      	movs	r3, #32
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b26:	2305      	movs	r3, #5
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <HAL_SPI_MspInit+0xc8>)
 8000b32:	f001 faf3 	bl	800211c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b36:	2330      	movs	r3, #48	; 0x30
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b46:	2305      	movs	r3, #5
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <HAL_SPI_MspInit+0xcc>)
 8000b52:	f001 fae3 	bl	800211c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40013000 	.word	0x40013000
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_MspInit+0x54>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <HAL_MspInit+0x54>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_MspInit+0x54>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_MspInit+0x54>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <HAL_MspInit+0x54>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_MspInit+0x54>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	f06f 0001 	mvn.w	r0, #1
 8000bb6:	f000 fd85 	bl	80016c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08c      	sub	sp, #48	; 0x30
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	; (8000c98 <HAL_InitTick+0xd0>)
 8000bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be0:	4a2d      	ldr	r2, [pc, #180]	; (8000c98 <HAL_InitTick+0xd0>)
 8000be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be6:	6453      	str	r3, [r2, #68]	; 0x44
 8000be8:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <HAL_InitTick+0xd0>)
 8000bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf4:	f107 020c 	add.w	r2, r7, #12
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f002 fcf6 	bl	80035f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c04:	f002 fce0 	bl	80035c8 <HAL_RCC_GetPCLK2Freq>
 8000c08:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0c:	4a23      	ldr	r2, [pc, #140]	; (8000c9c <HAL_InitTick+0xd4>)
 8000c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c12:	0c9b      	lsrs	r3, r3, #18
 8000c14:	3b01      	subs	r3, #1
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000c18:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <HAL_InitTick+0xd8>)
 8000c1a:	4a22      	ldr	r2, [pc, #136]	; (8000ca4 <HAL_InitTick+0xdc>)
 8000c1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <HAL_InitTick+0xd8>)
 8000c20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c24:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000c26:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <HAL_InitTick+0xd8>)
 8000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <HAL_InitTick+0xd8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <HAL_InitTick+0xd8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c38:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <HAL_InitTick+0xd8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000c3e:	4818      	ldr	r0, [pc, #96]	; (8000ca0 <HAL_InitTick+0xd8>)
 8000c40:	f003 f8b2 	bl	8003da8 <HAL_TIM_Base_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d11b      	bne.n	8000c8a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000c52:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <HAL_InitTick+0xd8>)
 8000c54:	f003 f978 	bl	8003f48 <HAL_TIM_Base_Start_IT>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d111      	bne.n	8000c8a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c66:	2019      	movs	r0, #25
 8000c68:	f000 fd58 	bl	800171c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b0f      	cmp	r3, #15
 8000c70:	d808      	bhi.n	8000c84 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c72:	2200      	movs	r2, #0
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	2019      	movs	r0, #25
 8000c78:	f000 fd24 	bl	80016c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_InitTick+0xe0>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	e002      	b.n	8000c8a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3730      	adds	r7, #48	; 0x30
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	431bde83 	.word	0x431bde83
 8000ca0:	2000016c 	.word	0x2000016c
 8000ca4:	40014400 	.word	0x40014400
 8000ca8:	20000008 	.word	0x20000008

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <DMA1_Stream5_IRQHandler+0x10>)
 8000cde:	f000 ffe1 	bl	8001ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000284 	.word	0x20000284

08000cec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cf2:	f003 fa81 	bl	80041f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000016c 	.word	0x2000016c

08000d00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <USART1_IRQHandler+0x10>)
 8000d06:	f004 f913 	bl	8004f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200001fc 	.word	0x200001fc

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d54:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <MX_TIM5_Init+0xa0>)
 8000d56:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <MX_TIM5_Init+0xa4>)
 8000d58:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_TIM5_Init+0xa0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_TIM5_Init+0xa0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_TIM5_Init+0xa0>)
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_TIM5_Init+0xa0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d74:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <MX_TIM5_Init+0xa0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000d7a:	4817      	ldr	r0, [pc, #92]	; (8000dd8 <MX_TIM5_Init+0xa0>)
 8000d7c:	f003 f976 	bl	800406c <HAL_TIM_IC_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000d86:	f7ff fe45 	bl	8000a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4619      	mov	r1, r3
 8000d98:	480f      	ldr	r0, [pc, #60]	; (8000dd8 <MX_TIM5_Init+0xa0>)
 8000d9a:	f003 fe7f 	bl	8004a9c <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000da4:	f7ff fe36 	bl	8000a14 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000da8:	2300      	movs	r3, #0
 8000daa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dac:	2301      	movs	r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <MX_TIM5_Init+0xa0>)
 8000dc0:	f003 fb22 	bl	8004408 <HAL_TIM_IC_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8000dca:	f7ff fe23 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200001b4 	.word	0x200001b4
 8000ddc:	40000c00 	.word	0x40000c00

08000de0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM5)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_TIM_IC_MspInit+0x84>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d12b      	bne.n	8000e5a <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_TIM_IC_MspInit+0x88>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <HAL_TIM_IC_MspInit+0x88>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_TIM_IC_MspInit+0x88>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_TIM_IC_MspInit+0x88>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <HAL_TIM_IC_MspInit+0x88>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_TIM_IC_MspInit+0x88>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_TIM_IC_MspInit+0x8c>)
 8000e56:	f001 f961 	bl	800211c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	; 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40000c00 	.word	0x40000c00
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000

08000e70 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <MX_USART1_UART_Init+0x50>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000ea8:	f003 feca 	bl	8004c40 <HAL_UART_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eb2:	f7ff fdaf 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200001fc 	.word	0x200001fc
 8000ec0:	40011000 	.word	0x40011000

08000ec4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <MX_USART2_UART_Init+0x50>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000efc:	f003 fea0 	bl	8004c40 <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f06:	f7ff fd85 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000240 	.word	0x20000240
 8000f14:	40004400 	.word	0x40004400

08000f18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	; 0x30
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a52      	ldr	r2, [pc, #328]	; (8001080 <HAL_UART_MspInit+0x168>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d135      	bne.n	8000fa6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	4b51      	ldr	r3, [pc, #324]	; (8001084 <HAL_UART_MspInit+0x16c>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a50      	ldr	r2, [pc, #320]	; (8001084 <HAL_UART_MspInit+0x16c>)
 8000f44:	f043 0310 	orr.w	r3, r3, #16
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b4e      	ldr	r3, [pc, #312]	; (8001084 <HAL_UART_MspInit+0x16c>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <HAL_UART_MspInit+0x16c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a49      	ldr	r2, [pc, #292]	; (8001084 <HAL_UART_MspInit+0x16c>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b47      	ldr	r3, [pc, #284]	; (8001084 <HAL_UART_MspInit+0x16c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f84:	2307      	movs	r3, #7
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	483e      	ldr	r0, [pc, #248]	; (8001088 <HAL_UART_MspInit+0x170>)
 8000f90:	f001 f8c4 	bl	800211c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2105      	movs	r1, #5
 8000f98:	2025      	movs	r0, #37	; 0x25
 8000f9a:	f000 fb93 	bl	80016c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f9e:	2025      	movs	r0, #37	; 0x25
 8000fa0:	f000 fbbc 	bl	800171c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fa4:	e068      	b.n	8001078 <HAL_UART_MspInit+0x160>
  else if(uartHandle->Instance==USART2)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a38      	ldr	r2, [pc, #224]	; (800108c <HAL_UART_MspInit+0x174>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d163      	bne.n	8001078 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	4b33      	ldr	r3, [pc, #204]	; (8001084 <HAL_UART_MspInit+0x16c>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	4a32      	ldr	r2, [pc, #200]	; (8001084 <HAL_UART_MspInit+0x16c>)
 8000fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc0:	4b30      	ldr	r3, [pc, #192]	; (8001084 <HAL_UART_MspInit+0x16c>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <HAL_UART_MspInit+0x16c>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	4a2b      	ldr	r2, [pc, #172]	; (8001084 <HAL_UART_MspInit+0x16c>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6313      	str	r3, [r2, #48]	; 0x30
 8000fdc:	4b29      	ldr	r3, [pc, #164]	; (8001084 <HAL_UART_MspInit+0x16c>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fe8:	230c      	movs	r3, #12
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4821      	ldr	r0, [pc, #132]	; (8001088 <HAL_UART_MspInit+0x170>)
 8001004:	f001 f88a 	bl	800211c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001008:	4b21      	ldr	r3, [pc, #132]	; (8001090 <HAL_UART_MspInit+0x178>)
 800100a:	4a22      	ldr	r2, [pc, #136]	; (8001094 <HAL_UART_MspInit+0x17c>)
 800100c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <HAL_UART_MspInit+0x178>)
 8001010:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001014:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <HAL_UART_MspInit+0x178>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <HAL_UART_MspInit+0x178>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_UART_MspInit+0x178>)
 8001024:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001028:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_UART_MspInit+0x178>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_UART_MspInit+0x178>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_UART_MspInit+0x178>)
 8001038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800103c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <HAL_UART_MspInit+0x178>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_UART_MspInit+0x178>)
 8001046:	2204      	movs	r2, #4
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_UART_MspInit+0x178>)
 800104c:	2203      	movs	r2, #3
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <HAL_UART_MspInit+0x178>)
 8001052:	2200      	movs	r2, #0
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_UART_MspInit+0x178>)
 8001058:	2200      	movs	r2, #0
 800105a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <HAL_UART_MspInit+0x178>)
 800105e:	f000 fb75 	bl	800174c <HAL_DMA_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_UART_MspInit+0x154>
      Error_Handler();
 8001068:	f7ff fcd4 	bl	8000a14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_UART_MspInit+0x178>)
 8001070:	639a      	str	r2, [r3, #56]	; 0x38
 8001072:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_UART_MspInit+0x178>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001078:	bf00      	nop
 800107a:	3730      	adds	r7, #48	; 0x30
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40011000 	.word	0x40011000
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000
 800108c:	40004400 	.word	0x40004400
 8001090:	20000284 	.word	0x20000284
 8001094:	40026088 	.word	0x40026088

08001098 <ILI9341_Select>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"


static void ILI9341_Select()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a2:	4802      	ldr	r0, [pc, #8]	; (80010ac <ILI9341_Select+0x14>)
 80010a4:	f001 face 	bl	8002644 <HAL_GPIO_WritePin>

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40020000 	.word	0x40020000

080010b0 <ILI9341_Unselect>:

void ILI9341_Unselect()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ba:	4802      	ldr	r0, [pc, #8]	; (80010c4 <ILI9341_Unselect+0x14>)
 80010bc:	f001 fac2 	bl	8002644 <HAL_GPIO_WritePin>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40020000 	.word	0x40020000

080010c8 <ILI9341_Reset>:

static void ILI9341_Reset()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d2:	4807      	ldr	r0, [pc, #28]	; (80010f0 <ILI9341_Reset+0x28>)
 80010d4:	f001 fab6 	bl	8002644 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80010d8:	200a      	movs	r0, #10
 80010da:	f000 fa01 	bl	80014e0 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <ILI9341_Reset+0x28>)
 80010e6:	f001 faad 	bl	8002644 <HAL_GPIO_WritePin>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020400 	.word	0x40020400

080010f4 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <ILI9341_WriteCommand+0x2c>)
 8001106:	f001 fa9d 	bl	8002644 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800110a:	1df9      	adds	r1, r7, #7
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	2201      	movs	r2, #1
 8001112:	4804      	ldr	r0, [pc, #16]	; (8001124 <ILI9341_WriteCommand+0x30>)
 8001114:	f002 fc32 	bl	800397c <HAL_SPI_Transmit>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40020400 	.word	0x40020400
 8001124:	20000114 	.word	0x20000114

08001128 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001138:	4810      	ldr	r0, [pc, #64]	; (800117c <ILI9341_WriteData+0x54>)
 800113a:	f001 fa83 	bl	8002644 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 800113e:	e015      	b.n	800116c <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001146:	bf28      	it	cs
 8001148:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800114c:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800114e:	89fa      	ldrh	r2, [r7, #14]
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	480a      	ldr	r0, [pc, #40]	; (8001180 <ILI9341_WriteData+0x58>)
 8001158:	f002 fc10 	bl	800397c <HAL_SPI_Transmit>
        buff += chunk_size;
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8001164:	89fb      	ldrh	r3, [r7, #14]
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1e6      	bne.n	8001140 <ILI9341_WriteData+0x18>
    }
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40020400 	.word	0x40020400
 8001180:	20000114 	.word	0x20000114

08001184 <ILI9341_Init>:
    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
}

void ILI9341_Init()
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b09b      	sub	sp, #108	; 0x6c
 8001188:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800118a:	f7ff ff85 	bl	8001098 <ILI9341_Select>
    ILI9341_Reset();
 800118e:	f7ff ff9b 	bl	80010c8 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff ffae 	bl	80010f4 <ILI9341_WriteCommand>
    HAL_Delay(500);
 8001198:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800119c:	f000 f9a0 	bl	80014e0 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80011a0:	20cb      	movs	r0, #203	; 0xcb
 80011a2:	f7ff ffa7 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80011a6:	4a8a      	ldr	r2, [pc, #552]	; (80013d0 <ILI9341_Init+0x24c>)
 80011a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b0:	6018      	str	r0, [r3, #0]
 80011b2:	3304      	adds	r3, #4
 80011b4:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80011b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011ba:	2105      	movs	r1, #5
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ffb3 	bl	8001128 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80011c2:	20cf      	movs	r0, #207	; 0xcf
 80011c4:	f7ff ff96 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80011c8:	4a82      	ldr	r2, [pc, #520]	; (80013d4 <ILI9341_Init+0x250>)
 80011ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	4611      	mov	r1, r2
 80011d2:	8019      	strh	r1, [r3, #0]
 80011d4:	3302      	adds	r3, #2
 80011d6:	0c12      	lsrs	r2, r2, #16
 80011d8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80011da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011de:	2103      	movs	r1, #3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ffa1 	bl	8001128 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80011e6:	20e8      	movs	r0, #232	; 0xe8
 80011e8:	f7ff ff84 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80011ec:	4a7a      	ldr	r2, [pc, #488]	; (80013d8 <ILI9341_Init+0x254>)
 80011ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	4611      	mov	r1, r2
 80011f6:	8019      	strh	r1, [r3, #0]
 80011f8:	3302      	adds	r3, #2
 80011fa:	0c12      	lsrs	r2, r2, #16
 80011fc:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80011fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001202:	2103      	movs	r1, #3
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff8f 	bl	8001128 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 800120a:	20ea      	movs	r0, #234	; 0xea
 800120c:	f7ff ff72 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8001210:	2300      	movs	r3, #0
 8001212:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 8001216:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800121a:	2102      	movs	r1, #2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff83 	bl	8001128 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8001222:	20ed      	movs	r0, #237	; 0xed
 8001224:	f7ff ff66 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8001228:	4b6c      	ldr	r3, [pc, #432]	; (80013dc <ILI9341_Init+0x258>)
 800122a:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 800122c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001230:	2104      	movs	r1, #4
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff78 	bl	8001128 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8001238:	20f7      	movs	r0, #247	; 0xf7
 800123a:	f7ff ff5b 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 800123e:	2320      	movs	r3, #32
 8001240:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8001244:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001248:	2101      	movs	r1, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff6c 	bl	8001128 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8001250:	20c0      	movs	r0, #192	; 0xc0
 8001252:	f7ff ff4f 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8001256:	2323      	movs	r3, #35	; 0x23
 8001258:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 800125c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001260:	2101      	movs	r1, #1
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff60 	bl	8001128 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8001268:	20c1      	movs	r0, #193	; 0xc1
 800126a:	f7ff ff43 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 800126e:	2310      	movs	r3, #16
 8001270:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8001274:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001278:	2101      	movs	r1, #1
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff54 	bl	8001128 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8001280:	20c5      	movs	r0, #197	; 0xc5
 8001282:	f7ff ff37 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8001286:	f642 033e 	movw	r3, #10302	; 0x283e
 800128a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 800128e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001292:	2102      	movs	r1, #2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff47 	bl	8001128 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 800129a:	20c7      	movs	r0, #199	; 0xc7
 800129c:	f7ff ff2a 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80012a0:	2386      	movs	r3, #134	; 0x86
 80012a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80012a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012aa:	2101      	movs	r1, #1
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff3b 	bl	8001128 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80012b2:	2036      	movs	r0, #54	; 0x36
 80012b4:	f7ff ff1e 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80012b8:	2348      	movs	r3, #72	; 0x48
 80012ba:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 80012be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012c2:	2101      	movs	r1, #1
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff2f 	bl	8001128 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80012ca:	203a      	movs	r0, #58	; 0x3a
 80012cc:	f7ff ff12 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80012d0:	2355      	movs	r3, #85	; 0x55
 80012d2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 80012d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012da:	2101      	movs	r1, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff23 	bl	8001128 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80012e2:	20b1      	movs	r0, #177	; 0xb1
 80012e4:	f7ff ff06 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80012e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012ec:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 80012ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012f2:	2102      	movs	r1, #2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff17 	bl	8001128 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80012fa:	20b6      	movs	r0, #182	; 0xb6
 80012fc:	f7ff fefa 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8001300:	4a37      	ldr	r2, [pc, #220]	; (80013e0 <ILI9341_Init+0x25c>)
 8001302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	4611      	mov	r1, r2
 800130a:	8019      	strh	r1, [r3, #0]
 800130c:	3302      	adds	r3, #2
 800130e:	0c12      	lsrs	r2, r2, #16
 8001310:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001316:	2103      	movs	r1, #3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff05 	bl	8001128 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800131e:	20f2      	movs	r0, #242	; 0xf2
 8001320:	f7ff fee8 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8001324:	2300      	movs	r3, #0
 8001326:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 800132a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132e:	2101      	movs	r1, #1
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fef9 	bl	8001128 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8001336:	2026      	movs	r0, #38	; 0x26
 8001338:	f7ff fedc 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 800133c:	2301      	movs	r3, #1
 800133e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	2101      	movs	r1, #1
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff feed 	bl	8001128 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 800134e:	20e0      	movs	r0, #224	; 0xe0
 8001350:	f7ff fed0 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8001354:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <ILI9341_Init+0x260>)
 8001356:	f107 0414 	add.w	r4, r7, #20
 800135a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800135c:	c407      	stmia	r4!, {r0, r1, r2}
 800135e:	8023      	strh	r3, [r4, #0]
 8001360:	3402      	adds	r4, #2
 8001362:	0c1b      	lsrs	r3, r3, #16
 8001364:	7023      	strb	r3, [r4, #0]
                            0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	210f      	movs	r1, #15
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fedb 	bl	8001128 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8001372:	20e1      	movs	r0, #225	; 0xe1
 8001374:	f7ff febe 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <ILI9341_Init+0x264>)
 800137a:	1d3c      	adds	r4, r7, #4
 800137c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800137e:	c407      	stmia	r4!, {r0, r1, r2}
 8001380:	8023      	strh	r3, [r4, #0]
 8001382:	3402      	adds	r4, #2
 8001384:	0c1b      	lsrs	r3, r3, #16
 8001386:	7023      	strb	r3, [r4, #0]
                            0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	210f      	movs	r1, #15
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fecb 	bl	8001128 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8001392:	2011      	movs	r0, #17
 8001394:	f7ff feae 	bl	80010f4 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8001398:	2078      	movs	r0, #120	; 0x78
 800139a:	f000 f8a1 	bl	80014e0 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 800139e:	2029      	movs	r0, #41	; 0x29
 80013a0:	f7ff fea8 	bl	80010f4 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80013a4:	2036      	movs	r0, #54	; 0x36
 80013a6:	f7ff fea5 	bl	80010f4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80013aa:	2348      	movs	r3, #72	; 0x48
 80013ac:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80013ae:	463b      	mov	r3, r7
 80013b0:	2101      	movs	r1, #1
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff feb8 	bl	8001128 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80013b8:	f7ff fe7a 	bl	80010b0 <ILI9341_Unselect>

    HAL_GPIO_WritePin(ILI9341_LED_GPIO_Port, ILI9341_LED_Pin, SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2102      	movs	r1, #2
 80013c0:	480a      	ldr	r0, [pc, #40]	; (80013ec <ILI9341_Init+0x268>)
 80013c2:	f001 f93f 	bl	8002644 <HAL_GPIO_WritePin>
}
 80013c6:	bf00      	nop
 80013c8:	376c      	adds	r7, #108	; 0x6c
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd90      	pop	{r4, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	080090e4 	.word	0x080090e4
 80013d4:	080090ec 	.word	0x080090ec
 80013d8:	080090f0 	.word	0x080090f0
 80013dc:	81120364 	.word	0x81120364
 80013e0:	080090f4 	.word	0x080090f4
 80013e4:	080090f8 	.word	0x080090f8
 80013e8:	08009108 	.word	0x08009108
 80013ec:	40020400 	.word	0x40020400

080013f0 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fa:	4802      	ldr	r0, [pc, #8]	; (8001404 <ILI9341_TouchUnselect+0x14>)
 80013fc:	f001 f922 	bl	8002644 <HAL_GPIO_WritePin>
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40020000 	.word	0x40020000

08001408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001440 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800140e:	490e      	ldr	r1, [pc, #56]	; (8001448 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001410:	4a0e      	ldr	r2, [pc, #56]	; (800144c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001424:	4c0b      	ldr	r4, [pc, #44]	; (8001454 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001432:	f7ff fc6f 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001436:	f007 fd0d 	bl	8008e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143a:	f7ff fa53 	bl	80008e4 <main>
  bx  lr    
 800143e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001440:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800144c:	0800968c 	.word	0x0800968c
  ldr r2, =_sbss
 8001450:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001454:	20004d00 	.word	0x20004d00

08001458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC_IRQHandler>
	...

0800145c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <HAL_Init+0x40>)
 8001466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_Init+0x40>)
 8001472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001476:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_Init+0x40>)
 800147e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001482:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001484:	2003      	movs	r0, #3
 8001486:	f000 f8fd 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148a:	2005      	movs	r0, #5
 800148c:	f7ff fb9c 	bl	8000bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001490:	f7ff fb6e 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023c00 	.word	0x40023c00

080014a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x24>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_IncTick+0x24>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	2000000c 	.word	0x2000000c
 80014c4:	200002e4 	.word	0x200002e4

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200002e4 	.word	0x200002e4

080014e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff ffee 	bl	80014c8 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f8:	d005      	beq.n	8001506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_Delay+0x44>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001506:	bf00      	nop
 8001508:	f7ff ffde 	bl	80014c8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8f7      	bhi.n	8001508 <HAL_Delay+0x28>
  {
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000000c 	.word	0x2000000c

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	; (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b07      	cmp	r3, #7
 8001690:	d00f      	beq.n	80016b2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b06      	cmp	r3, #6
 8001696:	d00c      	beq.n	80016b2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b05      	cmp	r3, #5
 800169c:	d009      	beq.n	80016b2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d006      	beq.n	80016b2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d003      	beq.n	80016b2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016aa:	2190      	movs	r1, #144	; 0x90
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80016ae:	f7ff f9b6 	bl	8000a1e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ff38 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	08009118 	.word	0x08009118

080016c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d903      	bls.n	80016e4 <HAL_NVIC_SetPriority+0x20>
 80016dc:	21a8      	movs	r1, #168	; 0xa8
 80016de:	480e      	ldr	r0, [pc, #56]	; (8001718 <HAL_NVIC_SetPriority+0x54>)
 80016e0:	f7ff f99d 	bl	8000a1e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2b0f      	cmp	r3, #15
 80016e8:	d903      	bls.n	80016f2 <HAL_NVIC_SetPriority+0x2e>
 80016ea:	21a9      	movs	r1, #169	; 0xa9
 80016ec:	480a      	ldr	r0, [pc, #40]	; (8001718 <HAL_NVIC_SetPriority+0x54>)
 80016ee:	f7ff f996 	bl	8000a1e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f2:	f7ff ff3d 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	6978      	ldr	r0, [r7, #20]
 80016fe:	f7ff ff8d 	bl	800161c <NVIC_EncodePriority>
 8001702:	4602      	mov	r2, r0
 8001704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001708:	4611      	mov	r1, r2
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ff5c 	bl	80015c8 <__NVIC_SetPriority>
}
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	08009118 	.word	0x08009118

0800171c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	2b00      	cmp	r3, #0
 800172c:	da03      	bge.n	8001736 <HAL_NVIC_EnableIRQ+0x1a>
 800172e:	21bc      	movs	r1, #188	; 0xbc
 8001730:	4805      	ldr	r0, [pc, #20]	; (8001748 <HAL_NVIC_EnableIRQ+0x2c>)
 8001732:	f7ff f974 	bl	8000a1e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff26 	bl	800158c <__NVIC_EnableIRQ>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	08009118 	.word	0x08009118

0800174c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff feb6 	bl	80014c8 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e203      	b.n	8001b70 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a8b      	ldr	r2, [pc, #556]	; (800199c <HAL_DMA_Init+0x250>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d04e      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a8a      	ldr	r2, [pc, #552]	; (80019a0 <HAL_DMA_Init+0x254>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d049      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a88      	ldr	r2, [pc, #544]	; (80019a4 <HAL_DMA_Init+0x258>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d044      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a87      	ldr	r2, [pc, #540]	; (80019a8 <HAL_DMA_Init+0x25c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d03f      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a85      	ldr	r2, [pc, #532]	; (80019ac <HAL_DMA_Init+0x260>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d03a      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a84      	ldr	r2, [pc, #528]	; (80019b0 <HAL_DMA_Init+0x264>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d035      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a82      	ldr	r2, [pc, #520]	; (80019b4 <HAL_DMA_Init+0x268>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d030      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a81      	ldr	r2, [pc, #516]	; (80019b8 <HAL_DMA_Init+0x26c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d02b      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a7f      	ldr	r2, [pc, #508]	; (80019bc <HAL_DMA_Init+0x270>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d026      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a7e      	ldr	r2, [pc, #504]	; (80019c0 <HAL_DMA_Init+0x274>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d021      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a7c      	ldr	r2, [pc, #496]	; (80019c4 <HAL_DMA_Init+0x278>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d01c      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a7b      	ldr	r2, [pc, #492]	; (80019c8 <HAL_DMA_Init+0x27c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d017      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a79      	ldr	r2, [pc, #484]	; (80019cc <HAL_DMA_Init+0x280>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d012      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a78      	ldr	r2, [pc, #480]	; (80019d0 <HAL_DMA_Init+0x284>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d00d      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a76      	ldr	r2, [pc, #472]	; (80019d4 <HAL_DMA_Init+0x288>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d008      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a75      	ldr	r2, [pc, #468]	; (80019d8 <HAL_DMA_Init+0x28c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d003      	beq.n	8001810 <HAL_DMA_Init+0xc4>
 8001808:	21b7      	movs	r1, #183	; 0xb7
 800180a:	4874      	ldr	r0, [pc, #464]	; (80019dc <HAL_DMA_Init+0x290>)
 800180c:	f7ff f907 	bl	8000a1e <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d026      	beq.n	8001866 <HAL_DMA_Init+0x11a>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001820:	d021      	beq.n	8001866 <HAL_DMA_Init+0x11a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800182a:	d01c      	beq.n	8001866 <HAL_DMA_Init+0x11a>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001834:	d017      	beq.n	8001866 <HAL_DMA_Init+0x11a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800183e:	d012      	beq.n	8001866 <HAL_DMA_Init+0x11a>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001848:	d00d      	beq.n	8001866 <HAL_DMA_Init+0x11a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001852:	d008      	beq.n	8001866 <HAL_DMA_Init+0x11a>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800185c:	d003      	beq.n	8001866 <HAL_DMA_Init+0x11a>
 800185e:	21b8      	movs	r1, #184	; 0xb8
 8001860:	485e      	ldr	r0, [pc, #376]	; (80019dc <HAL_DMA_Init+0x290>)
 8001862:	f7ff f8dc 	bl	8000a1e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <HAL_DMA_Init+0x13a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b40      	cmp	r3, #64	; 0x40
 8001874:	d007      	beq.n	8001886 <HAL_DMA_Init+0x13a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b80      	cmp	r3, #128	; 0x80
 800187c:	d003      	beq.n	8001886 <HAL_DMA_Init+0x13a>
 800187e:	21b9      	movs	r1, #185	; 0xb9
 8001880:	4856      	ldr	r0, [pc, #344]	; (80019dc <HAL_DMA_Init+0x290>)
 8001882:	f7ff f8cc 	bl	8000a1e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800188e:	d007      	beq.n	80018a0 <HAL_DMA_Init+0x154>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_DMA_Init+0x154>
 8001898:	21ba      	movs	r1, #186	; 0xba
 800189a:	4850      	ldr	r0, [pc, #320]	; (80019dc <HAL_DMA_Init+0x290>)
 800189c:	f7ff f8bf 	bl	8000a1e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a8:	d007      	beq.n	80018ba <HAL_DMA_Init+0x16e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_DMA_Init+0x16e>
 80018b2:	21bb      	movs	r1, #187	; 0xbb
 80018b4:	4849      	ldr	r0, [pc, #292]	; (80019dc <HAL_DMA_Init+0x290>)
 80018b6:	f7ff f8b2 	bl	8000a1e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00d      	beq.n	80018de <HAL_DMA_Init+0x192>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018ca:	d008      	beq.n	80018de <HAL_DMA_Init+0x192>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018d4:	d003      	beq.n	80018de <HAL_DMA_Init+0x192>
 80018d6:	21bc      	movs	r1, #188	; 0xbc
 80018d8:	4840      	ldr	r0, [pc, #256]	; (80019dc <HAL_DMA_Init+0x290>)
 80018da:	f7ff f8a0 	bl	8000a1e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00d      	beq.n	8001902 <HAL_DMA_Init+0x1b6>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ee:	d008      	beq.n	8001902 <HAL_DMA_Init+0x1b6>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018f8:	d003      	beq.n	8001902 <HAL_DMA_Init+0x1b6>
 80018fa:	21bd      	movs	r1, #189	; 0xbd
 80018fc:	4837      	ldr	r0, [pc, #220]	; (80019dc <HAL_DMA_Init+0x290>)
 80018fe:	f7ff f88e 	bl	8000a1e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00c      	beq.n	8001924 <HAL_DMA_Init+0x1d8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001912:	d007      	beq.n	8001924 <HAL_DMA_Init+0x1d8>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	2b20      	cmp	r3, #32
 800191a:	d003      	beq.n	8001924 <HAL_DMA_Init+0x1d8>
 800191c:	21be      	movs	r1, #190	; 0xbe
 800191e:	482f      	ldr	r0, [pc, #188]	; (80019dc <HAL_DMA_Init+0x290>)
 8001920:	f7ff f87d 	bl	8000a1e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d012      	beq.n	8001952 <HAL_DMA_Init+0x206>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d00d      	beq.n	8001952 <HAL_DMA_Init+0x206>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800193e:	d008      	beq.n	8001952 <HAL_DMA_Init+0x206>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001948:	d003      	beq.n	8001952 <HAL_DMA_Init+0x206>
 800194a:	21bf      	movs	r1, #191	; 0xbf
 800194c:	4823      	ldr	r0, [pc, #140]	; (80019dc <HAL_DMA_Init+0x290>)
 800194e:	f7ff f866 	bl	8000a1e <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <HAL_DMA_Init+0x21e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	2b04      	cmp	r3, #4
 8001960:	d003      	beq.n	800196a <HAL_DMA_Init+0x21e>
 8001962:	21c0      	movs	r1, #192	; 0xc0
 8001964:	481d      	ldr	r0, [pc, #116]	; (80019dc <HAL_DMA_Init+0x290>)
 8001966:	f7ff f85a 	bl	8000a1e <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	2b00      	cmp	r3, #0
 8001970:	d064      	beq.n	8001a3c <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	2b00      	cmp	r3, #0
 8001978:	d032      	beq.n	80019e0 <HAL_DMA_Init+0x294>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	2b01      	cmp	r3, #1
 8001980:	d02e      	beq.n	80019e0 <HAL_DMA_Init+0x294>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	2b02      	cmp	r3, #2
 8001988:	d02a      	beq.n	80019e0 <HAL_DMA_Init+0x294>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	2b03      	cmp	r3, #3
 8001990:	d026      	beq.n	80019e0 <HAL_DMA_Init+0x294>
 8001992:	21c5      	movs	r1, #197	; 0xc5
 8001994:	4811      	ldr	r0, [pc, #68]	; (80019dc <HAL_DMA_Init+0x290>)
 8001996:	f7ff f842 	bl	8000a1e <assert_failed>
 800199a:	e021      	b.n	80019e0 <HAL_DMA_Init+0x294>
 800199c:	40026010 	.word	0x40026010
 80019a0:	40026028 	.word	0x40026028
 80019a4:	40026040 	.word	0x40026040
 80019a8:	40026058 	.word	0x40026058
 80019ac:	40026070 	.word	0x40026070
 80019b0:	40026088 	.word	0x40026088
 80019b4:	400260a0 	.word	0x400260a0
 80019b8:	400260b8 	.word	0x400260b8
 80019bc:	40026410 	.word	0x40026410
 80019c0:	40026428 	.word	0x40026428
 80019c4:	40026440 	.word	0x40026440
 80019c8:	40026458 	.word	0x40026458
 80019cc:	40026470 	.word	0x40026470
 80019d0:	40026488 	.word	0x40026488
 80019d4:	400264a0 	.word	0x400264a0
 80019d8:	400264b8 	.word	0x400264b8
 80019dc:	0800918c 	.word	0x0800918c
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d012      	beq.n	8001a0e <HAL_DMA_Init+0x2c2>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019f0:	d00d      	beq.n	8001a0e <HAL_DMA_Init+0x2c2>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019fa:	d008      	beq.n	8001a0e <HAL_DMA_Init+0x2c2>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a04:	d003      	beq.n	8001a0e <HAL_DMA_Init+0x2c2>
 8001a06:	21c6      	movs	r1, #198	; 0xc6
 8001a08:	485b      	ldr	r0, [pc, #364]	; (8001b78 <HAL_DMA_Init+0x42c>)
 8001a0a:	f7ff f808 	bl	8000a1e <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d012      	beq.n	8001a3c <HAL_DMA_Init+0x2f0>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a1e:	d00d      	beq.n	8001a3c <HAL_DMA_Init+0x2f0>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a28:	d008      	beq.n	8001a3c <HAL_DMA_Init+0x2f0>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001a32:	d003      	beq.n	8001a3c <HAL_DMA_Init+0x2f0>
 8001a34:	21c7      	movs	r1, #199	; 0xc7
 8001a36:	4850      	ldr	r0, [pc, #320]	; (8001b78 <HAL_DMA_Init+0x42c>)
 8001a38:	f7fe fff1 	bl	8000a1e <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a5c:	e00f      	b.n	8001a7e <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a5e:	f7ff fd33 	bl	80014c8 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d908      	bls.n	8001a7e <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2203      	movs	r2, #3
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e078      	b.n	8001b70 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1e8      	bne.n	8001a5e <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <HAL_DMA_Init+0x430>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d107      	bne.n	8001ae8 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f023 0307 	bic.w	r3, r3, #7
 8001afe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d117      	bne.n	8001b42 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00e      	beq.n	8001b42 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fa7d 	bl	8002024 <DMA_CheckFifoParam>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2240      	movs	r2, #64	; 0x40
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e016      	b.n	8001b70 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fa34 	bl	8001fb8 <DMA_CalcBaseAndBitshift>
 8001b50:	4603      	mov	r3, r0
 8001b52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b58:	223f      	movs	r2, #63	; 0x3f
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	0800918c 	.word	0x0800918c
 8001b7c:	f010803f 	.word	0xf010803f

08001b80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b8e:	f7ff fc9b 	bl	80014c8 <HAL_GetTick>
 8001b92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d008      	beq.n	8001bb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e052      	b.n	8001c58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0216 	bic.w	r2, r2, #22
 8001bc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	695a      	ldr	r2, [r3, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d103      	bne.n	8001be2 <HAL_DMA_Abort+0x62>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0208 	bic.w	r2, r2, #8
 8001bf0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c02:	e013      	b.n	8001c2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c04:	f7ff fc60 	bl	80014c8 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b05      	cmp	r3, #5
 8001c10:	d90c      	bls.n	8001c2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2220      	movs	r2, #32
 8001c16:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e015      	b.n	8001c58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1e4      	bne.n	8001c04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3e:	223f      	movs	r2, #63	; 0x3f
 8001c40:	409a      	lsls	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d004      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00c      	b.n	8001c98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2205      	movs	r2, #5
 8001c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cb0:	4b8e      	ldr	r3, [pc, #568]	; (8001eec <HAL_DMA_IRQHandler+0x248>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a8e      	ldr	r2, [pc, #568]	; (8001ef0 <HAL_DMA_IRQHandler+0x24c>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0a9b      	lsrs	r3, r3, #10
 8001cbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	2208      	movs	r2, #8
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d01a      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d013      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0204 	bic.w	r2, r2, #4
 8001cf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d14:	2201      	movs	r2, #1
 8001d16:	409a      	lsls	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d012      	beq.n	8001d46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d32:	2201      	movs	r2, #1
 8001d34:	409a      	lsls	r2, r3
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3e:	f043 0202 	orr.w	r2, r3, #2
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d012      	beq.n	8001d7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00b      	beq.n	8001d7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d68:	2204      	movs	r2, #4
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d74:	f043 0204 	orr.w	r2, r3, #4
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d80:	2210      	movs	r2, #16
 8001d82:	409a      	lsls	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d043      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d03c      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9e:	2210      	movs	r2, #16
 8001da0:	409a      	lsls	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d018      	beq.n	8001de6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d108      	bne.n	8001dd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d024      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	4798      	blx	r3
 8001dd2:	e01f      	b.n	8001e14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01b      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	4798      	blx	r3
 8001de4:	e016      	b.n	8001e14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0208 	bic.w	r2, r2, #8
 8001e02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e18:	2220      	movs	r2, #32
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 808f 	beq.w	8001f44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 8087 	beq.w	8001f44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	d136      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0216 	bic.w	r2, r2, #22
 8001e5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d103      	bne.n	8001e7e <HAL_DMA_IRQHandler+0x1da>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0208 	bic.w	r2, r2, #8
 8001e8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	223f      	movs	r2, #63	; 0x3f
 8001e94:	409a      	lsls	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d07e      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
        }
        return;
 8001eba:	e079      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d01d      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10d      	bne.n	8001ef4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d031      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	4798      	blx	r3
 8001ee8:	e02c      	b.n	8001f44 <HAL_DMA_IRQHandler+0x2a0>
 8001eea:	bf00      	nop
 8001eec:	20000004 	.word	0x20000004
 8001ef0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d023      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
 8001f04:	e01e      	b.n	8001f44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10f      	bne.n	8001f34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0210 	bic.w	r2, r2, #16
 8001f22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d032      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d022      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2205      	movs	r2, #5
 8001f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	3301      	adds	r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d307      	bcc.n	8001f8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f2      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x2cc>
 8001f8a:	e000      	b.n	8001f8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
 8001fae:	e000      	b.n	8001fb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fb0:	bf00      	nop
    }
  }
}
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	3b10      	subs	r3, #16
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <DMA_CalcBaseAndBitshift+0x64>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fd2:	4a13      	ldr	r2, [pc, #76]	; (8002020 <DMA_CalcBaseAndBitshift+0x68>)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d909      	bls.n	8001ffa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fee:	f023 0303 	bic.w	r3, r3, #3
 8001ff2:	1d1a      	adds	r2, r3, #4
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ff8:	e007      	b.n	800200a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002002:	f023 0303 	bic.w	r3, r3, #3
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	aaaaaaab 	.word	0xaaaaaaab
 8002020:	08009614 	.word	0x08009614

08002024 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d11f      	bne.n	800207e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d856      	bhi.n	80020f2 <DMA_CheckFifoParam+0xce>
 8002044:	a201      	add	r2, pc, #4	; (adr r2, 800204c <DMA_CheckFifoParam+0x28>)
 8002046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204a:	bf00      	nop
 800204c:	0800205d 	.word	0x0800205d
 8002050:	0800206f 	.word	0x0800206f
 8002054:	0800205d 	.word	0x0800205d
 8002058:	080020f3 	.word	0x080020f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d046      	beq.n	80020f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800206c:	e043      	b.n	80020f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002076:	d140      	bne.n	80020fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800207c:	e03d      	b.n	80020fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002086:	d121      	bne.n	80020cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d837      	bhi.n	80020fe <DMA_CheckFifoParam+0xda>
 800208e:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <DMA_CheckFifoParam+0x70>)
 8002090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002094:	080020a5 	.word	0x080020a5
 8002098:	080020ab 	.word	0x080020ab
 800209c:	080020a5 	.word	0x080020a5
 80020a0:	080020bd 	.word	0x080020bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
      break;
 80020a8:	e030      	b.n	800210c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d025      	beq.n	8002102 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ba:	e022      	b.n	8002102 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020c4:	d11f      	bne.n	8002106 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020ca:	e01c      	b.n	8002106 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d903      	bls.n	80020da <DMA_CheckFifoParam+0xb6>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d003      	beq.n	80020e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020d8:	e018      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
      break;
 80020de:	e015      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00e      	beq.n	800210a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
      break;
 80020f0:	e00b      	b.n	800210a <DMA_CheckFifoParam+0xe6>
      break;
 80020f2:	bf00      	nop
 80020f4:	e00a      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;
 80020f6:	bf00      	nop
 80020f8:	e008      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;
 80020fa:	bf00      	nop
 80020fc:	e006      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;
 80020fe:	bf00      	nop
 8002100:	e004      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;
 8002102:	bf00      	nop
 8002104:	e002      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;   
 8002106:	bf00      	nop
 8002108:	e000      	b.n	800210c <DMA_CheckFifoParam+0xe8>
      break;
 800210a:	bf00      	nop
    }
  } 
  
  return status; 
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a33      	ldr	r2, [pc, #204]	; (8002204 <HAL_GPIO_Init+0xe8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d017      	beq.n	800216a <HAL_GPIO_Init+0x4e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a32      	ldr	r2, [pc, #200]	; (8002208 <HAL_GPIO_Init+0xec>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <HAL_GPIO_Init+0x4e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a31      	ldr	r2, [pc, #196]	; (800220c <HAL_GPIO_Init+0xf0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00f      	beq.n	800216a <HAL_GPIO_Init+0x4e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a30      	ldr	r2, [pc, #192]	; (8002210 <HAL_GPIO_Init+0xf4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00b      	beq.n	800216a <HAL_GPIO_Init+0x4e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a2f      	ldr	r2, [pc, #188]	; (8002214 <HAL_GPIO_Init+0xf8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d007      	beq.n	800216a <HAL_GPIO_Init+0x4e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a2e      	ldr	r2, [pc, #184]	; (8002218 <HAL_GPIO_Init+0xfc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x4e>
 8002162:	21ac      	movs	r1, #172	; 0xac
 8002164:	482d      	ldr	r0, [pc, #180]	; (800221c <HAL_GPIO_Init+0x100>)
 8002166:	f7fe fc5a 	bl	8000a1e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_GPIO_Init+0x64>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	041b      	lsls	r3, r3, #16
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x6c>
 8002180:	21ad      	movs	r1, #173	; 0xad
 8002182:	4826      	ldr	r0, [pc, #152]	; (800221c <HAL_GPIO_Init+0x100>)
 8002184:	f7fe fc4b 	bl	8000a1e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d035      	beq.n	80021fc <HAL_GPIO_Init+0xe0>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d031      	beq.n	80021fc <HAL_GPIO_Init+0xe0>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b11      	cmp	r3, #17
 800219e:	d02d      	beq.n	80021fc <HAL_GPIO_Init+0xe0>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d029      	beq.n	80021fc <HAL_GPIO_Init+0xe0>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b12      	cmp	r3, #18
 80021ae:	d025      	beq.n	80021fc <HAL_GPIO_Init+0xe0>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80021b8:	d020      	beq.n	80021fc <HAL_GPIO_Init+0xe0>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80021c2:	d01b      	beq.n	80021fc <HAL_GPIO_Init+0xe0>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80021cc:	d016      	beq.n	80021fc <HAL_GPIO_Init+0xe0>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80021d6:	d011      	beq.n	80021fc <HAL_GPIO_Init+0xe0>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80021e0:	d00c      	beq.n	80021fc <HAL_GPIO_Init+0xe0>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80021ea:	d007      	beq.n	80021fc <HAL_GPIO_Init+0xe0>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0xe0>
 80021f4:	21ae      	movs	r1, #174	; 0xae
 80021f6:	4809      	ldr	r0, [pc, #36]	; (800221c <HAL_GPIO_Init+0x100>)
 80021f8:	f7fe fc11 	bl	8000a1e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	e206      	b.n	8002610 <HAL_GPIO_Init+0x4f4>
 8002202:	bf00      	nop
 8002204:	40020000 	.word	0x40020000
 8002208:	40020400 	.word	0x40020400
 800220c:	40020800 	.word	0x40020800
 8002210:	40020c00 	.word	0x40020c00
 8002214:	40021000 	.word	0x40021000
 8002218:	40021c00 	.word	0x40021c00
 800221c:	08009200 	.word	0x08009200
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002220:	2201      	movs	r2, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	429a      	cmp	r2, r3
 800223a:	f040 81e6 	bne.w	800260a <HAL_GPIO_Init+0x4ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b01      	cmp	r3, #1
 8002248:	d005      	beq.n	8002256 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002252:	2b02      	cmp	r3, #2
 8002254:	d144      	bne.n	80022e0 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00f      	beq.n	800227e <HAL_GPIO_Init+0x162>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d00b      	beq.n	800227e <HAL_GPIO_Init+0x162>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d007      	beq.n	800227e <HAL_GPIO_Init+0x162>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x162>
 8002276:	21c0      	movs	r1, #192	; 0xc0
 8002278:	4894      	ldr	r0, [pc, #592]	; (80024cc <HAL_GPIO_Init+0x3b0>)
 800227a:	f7fe fbd0 	bl	8000a1e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 0201 	and.w	r2, r3, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d027      	beq.n	800233c <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00b      	beq.n	800230c <HAL_GPIO_Init+0x1f0>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d007      	beq.n	800230c <HAL_GPIO_Init+0x1f0>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x1f0>
 8002304:	21d1      	movs	r1, #209	; 0xd1
 8002306:	4871      	ldr	r0, [pc, #452]	; (80024cc <HAL_GPIO_Init+0x3b0>)
 8002308:	f7fe fb89 	bl	8000a1e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b02      	cmp	r3, #2
 8002346:	f040 8098 	bne.w	800247a <HAL_GPIO_Init+0x35e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d06f      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b0c      	cmp	r3, #12
 8002358:	d06b      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d067      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d063      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d05f      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d05b      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d057      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d053      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d04f      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d04b      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d047      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d043      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d03f      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d03b      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d037      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d033      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d02f      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b05      	cmp	r3, #5
 80023d8:	d02b      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b05      	cmp	r3, #5
 80023e0:	d027      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d023      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b06      	cmp	r3, #6
 80023f0:	d01f      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b07      	cmp	r3, #7
 80023f8:	d01b      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b07      	cmp	r3, #7
 8002400:	d017      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b08      	cmp	r3, #8
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b09      	cmp	r3, #9
 8002410:	d00f      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b09      	cmp	r3, #9
 8002418:	d00b      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b0a      	cmp	r3, #10
 8002420:	d007      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2b0f      	cmp	r3, #15
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x316>
 800242a:	21de      	movs	r1, #222	; 0xde
 800242c:	4827      	ldr	r0, [pc, #156]	; (80024cc <HAL_GPIO_Init+0x3b0>)
 800242e:	f7fe faf6 	bl	8000a1e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	08da      	lsrs	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3208      	adds	r2, #8
 800243a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	08da      	lsrs	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3208      	adds	r2, #8
 8002474:	69b9      	ldr	r1, [r7, #24]
 8002476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	2203      	movs	r2, #3
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0203 	and.w	r2, r3, #3
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80a7 	beq.w	800260a <HAL_GPIO_Init+0x4ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <HAL_GPIO_Init+0x3b4>)
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	4a02      	ldr	r2, [pc, #8]	; (80024d0 <HAL_GPIO_Init+0x3b4>)
 80024c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ca:	e003      	b.n	80024d4 <HAL_GPIO_Init+0x3b8>
 80024cc:	08009200 	.word	0x08009200
 80024d0:	40023800 	.word	0x40023800
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b53      	ldr	r3, [pc, #332]	; (8002624 <HAL_GPIO_Init+0x508>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024e2:	4a51      	ldr	r2, [pc, #324]	; (8002628 <HAL_GPIO_Init+0x50c>)
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	220f      	movs	r2, #15
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a48      	ldr	r2, [pc, #288]	; (800262c <HAL_GPIO_Init+0x510>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d019      	beq.n	8002542 <HAL_GPIO_Init+0x426>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a47      	ldr	r2, [pc, #284]	; (8002630 <HAL_GPIO_Init+0x514>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_GPIO_Init+0x422>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a46      	ldr	r2, [pc, #280]	; (8002634 <HAL_GPIO_Init+0x518>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00d      	beq.n	800253a <HAL_GPIO_Init+0x41e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a45      	ldr	r2, [pc, #276]	; (8002638 <HAL_GPIO_Init+0x51c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d007      	beq.n	8002536 <HAL_GPIO_Init+0x41a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a44      	ldr	r2, [pc, #272]	; (800263c <HAL_GPIO_Init+0x520>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d101      	bne.n	8002532 <HAL_GPIO_Init+0x416>
 800252e:	2304      	movs	r3, #4
 8002530:	e008      	b.n	8002544 <HAL_GPIO_Init+0x428>
 8002532:	2307      	movs	r3, #7
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x428>
 8002536:	2303      	movs	r3, #3
 8002538:	e004      	b.n	8002544 <HAL_GPIO_Init+0x428>
 800253a:	2302      	movs	r3, #2
 800253c:	e002      	b.n	8002544 <HAL_GPIO_Init+0x428>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_GPIO_Init+0x428>
 8002542:	2300      	movs	r3, #0
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	f002 0203 	and.w	r2, r2, #3
 800254a:	0092      	lsls	r2, r2, #2
 800254c:	4093      	lsls	r3, r2
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002554:	4934      	ldr	r1, [pc, #208]	; (8002628 <HAL_GPIO_Init+0x50c>)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	089b      	lsrs	r3, r3, #2
 800255a:	3302      	adds	r3, #2
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <HAL_GPIO_Init+0x524>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x46a>
        {
          temp |= iocurrent;
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002586:	4a2e      	ldr	r2, [pc, #184]	; (8002640 <HAL_GPIO_Init+0x524>)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800258c:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <HAL_GPIO_Init+0x524>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x494>
        {
          temp |= iocurrent;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025b0:	4a23      	ldr	r2, [pc, #140]	; (8002640 <HAL_GPIO_Init+0x524>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025b6:	4b22      	ldr	r3, [pc, #136]	; (8002640 <HAL_GPIO_Init+0x524>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x4be>
        {
          temp |= iocurrent;
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025da:	4a19      	ldr	r2, [pc, #100]	; (8002640 <HAL_GPIO_Init+0x524>)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025e0:	4b17      	ldr	r3, [pc, #92]	; (8002640 <HAL_GPIO_Init+0x524>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x4e8>
        {
          temp |= iocurrent;
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002604:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <HAL_GPIO_Init+0x524>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3301      	adds	r3, #1
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b0f      	cmp	r3, #15
 8002614:	f67f ae04 	bls.w	8002220 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	3720      	adds	r7, #32
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	40013800 	.word	0x40013800
 800262c:	40020000 	.word	0x40020000
 8002630:	40020400 	.word	0x40020400
 8002634:	40020800 	.word	0x40020800
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40021000 	.word	0x40021000
 8002640:	40013c00 	.word	0x40013c00

08002644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
 8002650:	4613      	mov	r3, r2
 8002652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <HAL_GPIO_WritePin+0x20>
 800265a:	887b      	ldrh	r3, [r7, #2]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	041b      	lsls	r3, r3, #16
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <HAL_GPIO_WritePin+0x2a>
 8002664:	f240 119d 	movw	r1, #413	; 0x19d
 8002668:	480e      	ldr	r0, [pc, #56]	; (80026a4 <HAL_GPIO_WritePin+0x60>)
 800266a:	f7fe f9d8 	bl	8000a1e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800266e:	787b      	ldrb	r3, [r7, #1]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d007      	beq.n	8002684 <HAL_GPIO_WritePin+0x40>
 8002674:	787b      	ldrb	r3, [r7, #1]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d004      	beq.n	8002684 <HAL_GPIO_WritePin+0x40>
 800267a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800267e:	4809      	ldr	r0, [pc, #36]	; (80026a4 <HAL_GPIO_WritePin+0x60>)
 8002680:	f7fe f9cd 	bl	8000a1e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002684:	787b      	ldrb	r3, [r7, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002690:	e003      	b.n	800269a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	041a      	lsls	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	619a      	str	r2, [r3, #24]
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	08009200 	.word	0x08009200

080026a8 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80026b4:	887b      	ldrh	r3, [r7, #2]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d004      	beq.n	80026c4 <HAL_GPIO_TogglePin+0x1c>
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	0c1b      	lsrs	r3, r3, #16
 80026be:	041b      	lsls	r3, r3, #16
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d004      	beq.n	80026ce <HAL_GPIO_TogglePin+0x26>
 80026c4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80026c8:	480a      	ldr	r0, [pc, #40]	; (80026f4 <HAL_GPIO_TogglePin+0x4c>)
 80026ca:	f7fe f9a8 	bl	8000a1e <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026d4:	887a      	ldrh	r2, [r7, #2]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4013      	ands	r3, r2
 80026da:	041a      	lsls	r2, r3, #16
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	43d9      	mvns	r1, r3
 80026e0:	887b      	ldrh	r3, [r7, #2]
 80026e2:	400b      	ands	r3, r1
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	619a      	str	r2, [r3, #24]
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	08009200 	.word	0x08009200

080026f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e1bd      	b.n	8002a86 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a93      	ldr	r2, [pc, #588]	; (800295c <HAL_I2C_Init+0x264>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00e      	beq.n	8002732 <HAL_I2C_Init+0x3a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a91      	ldr	r2, [pc, #580]	; (8002960 <HAL_I2C_Init+0x268>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d009      	beq.n	8002732 <HAL_I2C_Init+0x3a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a90      	ldr	r2, [pc, #576]	; (8002964 <HAL_I2C_Init+0x26c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d004      	beq.n	8002732 <HAL_I2C_Init+0x3a>
 8002728:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800272c:	488e      	ldr	r0, [pc, #568]	; (8002968 <HAL_I2C_Init+0x270>)
 800272e:	f7fe f976 	bl	8000a1e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d004      	beq.n	8002744 <HAL_I2C_Init+0x4c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4a8b      	ldr	r2, [pc, #556]	; (800296c <HAL_I2C_Init+0x274>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d904      	bls.n	800274e <HAL_I2C_Init+0x56>
 8002744:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002748:	4887      	ldr	r0, [pc, #540]	; (8002968 <HAL_I2C_Init+0x270>)
 800274a:	f7fe f968 	bl	8000a1e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <HAL_I2C_Init+0x72>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800275e:	d004      	beq.n	800276a <HAL_I2C_Init+0x72>
 8002760:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002764:	4880      	ldr	r0, [pc, #512]	; (8002968 <HAL_I2C_Init+0x270>)
 8002766:	f7fe f95a 	bl	8000a1e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002772:	f023 0303 	bic.w	r3, r3, #3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <HAL_I2C_Init+0x8c>
 800277a:	f240 11c1 	movw	r1, #449	; 0x1c1
 800277e:	487a      	ldr	r0, [pc, #488]	; (8002968 <HAL_I2C_Init+0x270>)
 8002780:	f7fe f94d 	bl	8000a1e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800278c:	d009      	beq.n	80027a2 <HAL_I2C_Init+0xaa>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002796:	d004      	beq.n	80027a2 <HAL_I2C_Init+0xaa>
 8002798:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800279c:	4872      	ldr	r0, [pc, #456]	; (8002968 <HAL_I2C_Init+0x270>)
 800279e:	f7fe f93e 	bl	8000a1e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <HAL_I2C_Init+0xc4>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d004      	beq.n	80027bc <HAL_I2C_Init+0xc4>
 80027b2:	f240 11c3 	movw	r1, #451	; 0x1c3
 80027b6:	486c      	ldr	r0, [pc, #432]	; (8002968 <HAL_I2C_Init+0x270>)
 80027b8:	f7fe f931 	bl	8000a1e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d004      	beq.n	80027d2 <HAL_I2C_Init+0xda>
 80027c8:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80027cc:	4866      	ldr	r0, [pc, #408]	; (8002968 <HAL_I2C_Init+0x270>)
 80027ce:	f7fe f926 	bl	8000a1e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d008      	beq.n	80027ec <HAL_I2C_Init+0xf4>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	2b40      	cmp	r3, #64	; 0x40
 80027e0:	d004      	beq.n	80027ec <HAL_I2C_Init+0xf4>
 80027e2:	f240 11c5 	movw	r1, #453	; 0x1c5
 80027e6:	4860      	ldr	r0, [pc, #384]	; (8002968 <HAL_I2C_Init+0x270>)
 80027e8:	f7fe f919 	bl	8000a1e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_I2C_Init+0x10e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	2b80      	cmp	r3, #128	; 0x80
 80027fa:	d004      	beq.n	8002806 <HAL_I2C_Init+0x10e>
 80027fc:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002800:	4859      	ldr	r0, [pc, #356]	; (8002968 <HAL_I2C_Init+0x270>)
 8002802:	f7fe f90c 	bl	8000a1e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe f81a 	bl	8000854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2224      	movs	r2, #36	; 0x24
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002846:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002856:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002858:	f000 fea2 	bl	80035a0 <HAL_RCC_GetPCLK1Freq>
 800285c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4a43      	ldr	r2, [pc, #268]	; (8002970 <HAL_I2C_Init+0x278>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d807      	bhi.n	8002878 <HAL_I2C_Init+0x180>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4a42      	ldr	r2, [pc, #264]	; (8002974 <HAL_I2C_Init+0x27c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	bf94      	ite	ls
 8002870:	2301      	movls	r3, #1
 8002872:	2300      	movhi	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	e006      	b.n	8002886 <HAL_I2C_Init+0x18e>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a3f      	ldr	r2, [pc, #252]	; (8002978 <HAL_I2C_Init+0x280>)
 800287c:	4293      	cmp	r3, r2
 800287e:	bf94      	ite	ls
 8002880:	2301      	movls	r3, #1
 8002882:	2300      	movhi	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0fb      	b.n	8002a86 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4a3a      	ldr	r2, [pc, #232]	; (800297c <HAL_I2C_Init+0x284>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0c9b      	lsrs	r3, r3, #18
 8002898:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a2c      	ldr	r2, [pc, #176]	; (8002970 <HAL_I2C_Init+0x278>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d802      	bhi.n	80028c8 <HAL_I2C_Init+0x1d0>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3301      	adds	r3, #1
 80028c6:	e009      	b.n	80028dc <HAL_I2C_Init+0x1e4>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	4a2b      	ldr	r2, [pc, #172]	; (8002980 <HAL_I2C_Init+0x288>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	099b      	lsrs	r3, r3, #6
 80028da:	3301      	adds	r3, #1
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	430b      	orrs	r3, r1
 80028e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	491e      	ldr	r1, [pc, #120]	; (8002970 <HAL_I2C_Init+0x278>)
 80028f8:	428b      	cmp	r3, r1
 80028fa:	d819      	bhi.n	8002930 <HAL_I2C_Init+0x238>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e59      	subs	r1, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fbb1 f3f3 	udiv	r3, r1, r3
 800290a:	1c59      	adds	r1, r3, #1
 800290c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002910:	400b      	ands	r3, r1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_I2C_Init+0x234>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1e59      	subs	r1, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fbb1 f3f3 	udiv	r3, r1, r3
 8002924:	3301      	adds	r3, #1
 8002926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292a:	e065      	b.n	80029f8 <HAL_I2C_Init+0x300>
 800292c:	2304      	movs	r3, #4
 800292e:	e063      	b.n	80029f8 <HAL_I2C_Init+0x300>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d125      	bne.n	8002984 <HAL_I2C_Init+0x28c>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1e58      	subs	r0, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	440b      	add	r3, r1
 8002946:	fbb0 f3f3 	udiv	r3, r0, r3
 800294a:	3301      	adds	r3, #1
 800294c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e026      	b.n	80029aa <HAL_I2C_Init+0x2b2>
 800295c:	40005400 	.word	0x40005400
 8002960:	40005800 	.word	0x40005800
 8002964:	40005c00 	.word	0x40005c00
 8002968:	08009274 	.word	0x08009274
 800296c:	00061a80 	.word	0x00061a80
 8002970:	000186a0 	.word	0x000186a0
 8002974:	001e847f 	.word	0x001e847f
 8002978:	003d08ff 	.word	0x003d08ff
 800297c:	431bde83 	.word	0x431bde83
 8002980:	10624dd3 	.word	0x10624dd3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1e58      	subs	r0, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	0099      	lsls	r1, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	fbb0 f3f3 	udiv	r3, r0, r3
 800299a:	3301      	adds	r3, #1
 800299c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_Init+0x2ba>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e022      	b.n	80029f8 <HAL_I2C_Init+0x300>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10e      	bne.n	80029d8 <HAL_I2C_Init+0x2e0>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1e58      	subs	r0, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6859      	ldr	r1, [r3, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	440b      	add	r3, r1
 80029c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d6:	e00f      	b.n	80029f8 <HAL_I2C_Init+0x300>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e58      	subs	r0, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	0099      	lsls	r1, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	6809      	ldr	r1, [r1, #0]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69da      	ldr	r2, [r3, #28]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6911      	ldr	r1, [r2, #16]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68d2      	ldr	r2, [r2, #12]
 8002a32:	4311      	orrs	r1, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop

08002a90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e314      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b0f      	cmp	r3, #15
 8002aa8:	d903      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x22>
 8002aaa:	21e6      	movs	r1, #230	; 0xe6
 8002aac:	4897      	ldr	r0, [pc, #604]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002aae:	f7fd ffb6 	bl	8000a1e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8088 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x54>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad0:	d008      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x54>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ada:	d003      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x54>
 8002adc:	21eb      	movs	r1, #235	; 0xeb
 8002ade:	488b      	ldr	r0, [pc, #556]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002ae0:	f7fd ff9d 	bl	8000a1e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ae4:	4b8a      	ldr	r3, [pc, #552]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d00c      	beq.n	8002b0a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af0:	4b87      	ldr	r3, [pc, #540]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d112      	bne.n	8002b22 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afc:	4b84      	ldr	r3, [pc, #528]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b08:	d10b      	bne.n	8002b22 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0a:	4b81      	ldr	r3, [pc, #516]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d05b      	beq.n	8002bce <HAL_RCC_OscConfig+0x13e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d157      	bne.n	8002bce <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e2d4      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_OscConfig+0xaa>
 8002b2c:	4b78      	ldr	r3, [pc, #480]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a77      	ldr	r2, [pc, #476]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e01d      	b.n	8002b76 <HAL_RCC_OscConfig+0xe6>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b42:	d10c      	bne.n	8002b5e <HAL_RCC_OscConfig+0xce>
 8002b44:	4b72      	ldr	r3, [pc, #456]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a71      	ldr	r2, [pc, #452]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	4b6f      	ldr	r3, [pc, #444]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a6e      	ldr	r2, [pc, #440]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	e00b      	b.n	8002b76 <HAL_RCC_OscConfig+0xe6>
 8002b5e:	4b6c      	ldr	r3, [pc, #432]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a6b      	ldr	r2, [pc, #428]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	4b69      	ldr	r3, [pc, #420]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a68      	ldr	r2, [pc, #416]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d013      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fca3 	bl	80014c8 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b86:	f7fe fc9f 	bl	80014c8 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b64      	cmp	r3, #100	; 0x64
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e299      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b98:	4b5d      	ldr	r3, [pc, #372]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0xf6>
 8002ba4:	e014      	b.n	8002bd0 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7fe fc8f 	bl	80014c8 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bae:	f7fe fc8b 	bl	80014c8 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b64      	cmp	r3, #100	; 0x64
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e285      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc0:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f0      	bne.n	8002bae <HAL_RCC_OscConfig+0x11e>
 8002bcc:	e000      	b.n	8002bd0 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d079      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x166>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d004      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x166>
 8002bec:	f240 111d 	movw	r1, #285	; 0x11d
 8002bf0:	4846      	ldr	r0, [pc, #280]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002bf2:	f7fd ff14 	bl	8000a1e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b1f      	cmp	r3, #31
 8002bfc:	d904      	bls.n	8002c08 <HAL_RCC_OscConfig+0x178>
 8002bfe:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002c02:	4842      	ldr	r0, [pc, #264]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002c04:	f7fd ff0b 	bl	8000a1e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c08:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00b      	beq.n	8002c2c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c14:	4b3e      	ldr	r3, [pc, #248]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d11c      	bne.n	8002c5a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c20:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d116      	bne.n	8002c5a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2c:	4b38      	ldr	r3, [pc, #224]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_OscConfig+0x1b4>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e243      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b32      	ldr	r3, [pc, #200]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	492f      	ldr	r1, [pc, #188]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c58:	e03a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d020      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c62:	4b2c      	ldr	r3, [pc, #176]	; (8002d14 <HAL_RCC_OscConfig+0x284>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe fc2e 	bl	80014c8 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c70:	f7fe fc2a 	bl	80014c8 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e224      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c82:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	491c      	ldr	r1, [pc, #112]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
 8002ca2:	e015      	b.n	8002cd0 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <HAL_RCC_OscConfig+0x284>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7fe fc0d 	bl	80014c8 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb2:	f7fe fc09 	bl	80014c8 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e203      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f0      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d045      	beq.n	8002d68 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x266>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d004      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x266>
 8002cec:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002cf0:	4806      	ldr	r0, [pc, #24]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002cf2:	f7fd fe94 	bl	8000a1e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01e      	beq.n	8002d3c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d04:	f7fe fbe0 	bl	80014c8 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	e010      	b.n	8002d2e <HAL_RCC_OscConfig+0x29e>
 8002d0c:	080092e8 	.word	0x080092e8
 8002d10:	40023800 	.word	0x40023800
 8002d14:	42470000 	.word	0x42470000
 8002d18:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d1c:	f7fe fbd4 	bl	80014c8 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e1ce      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2e:	4b5e      	ldr	r3, [pc, #376]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x28c>
 8002d3a:	e015      	b.n	8002d68 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d3c:	4b5b      	ldr	r3, [pc, #364]	; (8002eac <HAL_RCC_OscConfig+0x41c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d42:	f7fe fbc1 	bl	80014c8 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4a:	f7fe fbbd 	bl	80014c8 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e1b7      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5c:	4b52      	ldr	r3, [pc, #328]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f0      	bne.n	8002d4a <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80b0 	beq.w	8002ed6 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d76:	2300      	movs	r3, #0
 8002d78:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00c      	beq.n	8002d9c <HAL_RCC_OscConfig+0x30c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d008      	beq.n	8002d9c <HAL_RCC_OscConfig+0x30c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d004      	beq.n	8002d9c <HAL_RCC_OscConfig+0x30c>
 8002d92:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8002d96:	4846      	ldr	r0, [pc, #280]	; (8002eb0 <HAL_RCC_OscConfig+0x420>)
 8002d98:	f7fd fe41 	bl	8000a1e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9c:	4b42      	ldr	r3, [pc, #264]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10f      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	2300      	movs	r3, #0
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	4a3d      	ldr	r2, [pc, #244]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db6:	6413      	str	r3, [r2, #64]	; 0x40
 8002db8:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc8:	4b3a      	ldr	r3, [pc, #232]	; (8002eb4 <HAL_RCC_OscConfig+0x424>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d118      	bne.n	8002e06 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd4:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <HAL_RCC_OscConfig+0x424>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a36      	ldr	r2, [pc, #216]	; (8002eb4 <HAL_RCC_OscConfig+0x424>)
 8002dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de0:	f7fe fb72 	bl	80014c8 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de8:	f7fe fb6e 	bl	80014c8 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e168      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfa:	4b2e      	ldr	r3, [pc, #184]	; (8002eb4 <HAL_RCC_OscConfig+0x424>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d106      	bne.n	8002e1c <HAL_RCC_OscConfig+0x38c>
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	4a25      	ldr	r2, [pc, #148]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1a:	e01c      	b.n	8002e56 <HAL_RCC_OscConfig+0x3c6>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	d10c      	bne.n	8002e3e <HAL_RCC_OscConfig+0x3ae>
 8002e24:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	4a1f      	ldr	r2, [pc, #124]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e30:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3c:	e00b      	b.n	8002e56 <HAL_RCC_OscConfig+0x3c6>
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a19      	ldr	r2, [pc, #100]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002e50:	f023 0304 	bic.w	r3, r3, #4
 8002e54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d015      	beq.n	8002e8a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fb33 	bl	80014c8 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f7fe fb2f 	bl	80014c8 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e127      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <HAL_RCC_OscConfig+0x418>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0ee      	beq.n	8002e66 <HAL_RCC_OscConfig+0x3d6>
 8002e88:	e01c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8a:	f7fe fb1d 	bl	80014c8 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e90:	e012      	b.n	8002eb8 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e92:	f7fe fb19 	bl	80014c8 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d909      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e111      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	42470e80 	.word	0x42470e80
 8002eb0:	080092e8 	.word	0x080092e8
 8002eb4:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb8:	4b86      	ldr	r3, [pc, #536]	; (80030d4 <HAL_RCC_OscConfig+0x644>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e6      	bne.n	8002e92 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d105      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eca:	4b82      	ldr	r3, [pc, #520]	; (80030d4 <HAL_RCC_OscConfig+0x644>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	4a81      	ldr	r2, [pc, #516]	; (80030d4 <HAL_RCC_OscConfig+0x644>)
 8002ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00c      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x468>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d008      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x468>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d004      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x468>
 8002eee:	f240 11cd 	movw	r1, #461	; 0x1cd
 8002ef2:	4879      	ldr	r0, [pc, #484]	; (80030d8 <HAL_RCC_OscConfig+0x648>)
 8002ef4:	f7fd fd93 	bl	8000a1e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80e4 	beq.w	80030ca <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f02:	4b74      	ldr	r3, [pc, #464]	; (80030d4 <HAL_RCC_OscConfig+0x644>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	f000 80a5 	beq.w	800305a <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	f040 8089 	bne.w	800302c <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <HAL_RCC_OscConfig+0x4a6>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f2a:	d004      	beq.n	8002f36 <HAL_RCC_OscConfig+0x4a6>
 8002f2c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002f30:	4869      	ldr	r0, [pc, #420]	; (80030d8 <HAL_RCC_OscConfig+0x648>)
 8002f32:	f7fd fd74 	bl	8000a1e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	2b3f      	cmp	r3, #63	; 0x3f
 8002f3c:	d904      	bls.n	8002f48 <HAL_RCC_OscConfig+0x4b8>
 8002f3e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002f42:	4865      	ldr	r0, [pc, #404]	; (80030d8 <HAL_RCC_OscConfig+0x648>)
 8002f44:	f7fd fd6b 	bl	8000a1e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	2b31      	cmp	r3, #49	; 0x31
 8002f4e:	d904      	bls.n	8002f5a <HAL_RCC_OscConfig+0x4ca>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002f58:	d904      	bls.n	8002f64 <HAL_RCC_OscConfig+0x4d4>
 8002f5a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002f5e:	485e      	ldr	r0, [pc, #376]	; (80030d8 <HAL_RCC_OscConfig+0x648>)
 8002f60:	f7fd fd5d 	bl	8000a1e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d010      	beq.n	8002f8e <HAL_RCC_OscConfig+0x4fe>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d00c      	beq.n	8002f8e <HAL_RCC_OscConfig+0x4fe>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCC_OscConfig+0x4fe>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d004      	beq.n	8002f8e <HAL_RCC_OscConfig+0x4fe>
 8002f84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002f88:	4853      	ldr	r0, [pc, #332]	; (80030d8 <HAL_RCC_OscConfig+0x648>)
 8002f8a:	f7fd fd48 	bl	8000a1e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d903      	bls.n	8002f9e <HAL_RCC_OscConfig+0x50e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	2b0f      	cmp	r3, #15
 8002f9c:	d904      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x518>
 8002f9e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002fa2:	484d      	ldr	r0, [pc, #308]	; (80030d8 <HAL_RCC_OscConfig+0x648>)
 8002fa4:	f7fd fd3b 	bl	8000a1e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <HAL_RCC_OscConfig+0x64c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7fe fa8b 	bl	80014c8 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7fe fa87 	bl	80014c8 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e081      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc8:	4b42      	ldr	r3, [pc, #264]	; (80030d4 <HAL_RCC_OscConfig+0x644>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	019b      	lsls	r3, r3, #6
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	085b      	lsrs	r3, r3, #1
 8002fec:	3b01      	subs	r3, #1
 8002fee:	041b      	lsls	r3, r3, #16
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	061b      	lsls	r3, r3, #24
 8002ff8:	4936      	ldr	r1, [pc, #216]	; (80030d4 <HAL_RCC_OscConfig+0x644>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ffe:	4b37      	ldr	r3, [pc, #220]	; (80030dc <HAL_RCC_OscConfig+0x64c>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fe fa60 	bl	80014c8 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300c:	f7fe fa5c 	bl	80014c8 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e056      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301e:	4b2d      	ldr	r3, [pc, #180]	; (80030d4 <HAL_RCC_OscConfig+0x644>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x57c>
 800302a:	e04e      	b.n	80030ca <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302c:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <HAL_RCC_OscConfig+0x64c>)
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003032:	f7fe fa49 	bl	80014c8 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303a:	f7fe fa45 	bl	80014c8 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e03f      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304c:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <HAL_RCC_OscConfig+0x644>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f0      	bne.n	800303a <HAL_RCC_OscConfig+0x5aa>
 8003058:	e037      	b.n	80030ca <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e032      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003066:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_RCC_OscConfig+0x644>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d028      	beq.n	80030c6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d121      	bne.n	80030c6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d11a      	bne.n	80030c6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003096:	4013      	ands	r3, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800309e:	4293      	cmp	r3, r2
 80030a0:	d111      	bne.n	80030c6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	085b      	lsrs	r3, r3, #1
 80030ae:	3b01      	subs	r3, #1
 80030b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40023800 	.word	0x40023800
 80030d8:	080092e8 	.word	0x080092e8
 80030dc:	42470060 	.word	0x42470060

080030e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e174      	b.n	80033de <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_RCC_ClockConfig+0x24>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b0f      	cmp	r3, #15
 8003102:	d904      	bls.n	800310e <HAL_RCC_ClockConfig+0x2e>
 8003104:	f240 215a 	movw	r1, #602	; 0x25a
 8003108:	487b      	ldr	r0, [pc, #492]	; (80032f8 <HAL_RCC_ClockConfig+0x218>)
 800310a:	f7fd fc88 	bl	8000a1e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d019      	beq.n	8003148 <HAL_RCC_ClockConfig+0x68>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d016      	beq.n	8003148 <HAL_RCC_ClockConfig+0x68>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d013      	beq.n	8003148 <HAL_RCC_ClockConfig+0x68>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d010      	beq.n	8003148 <HAL_RCC_ClockConfig+0x68>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d00d      	beq.n	8003148 <HAL_RCC_ClockConfig+0x68>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b05      	cmp	r3, #5
 8003130:	d00a      	beq.n	8003148 <HAL_RCC_ClockConfig+0x68>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b06      	cmp	r3, #6
 8003136:	d007      	beq.n	8003148 <HAL_RCC_ClockConfig+0x68>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b07      	cmp	r3, #7
 800313c:	d004      	beq.n	8003148 <HAL_RCC_ClockConfig+0x68>
 800313e:	f240 215b 	movw	r1, #603	; 0x25b
 8003142:	486d      	ldr	r0, [pc, #436]	; (80032f8 <HAL_RCC_ClockConfig+0x218>)
 8003144:	f7fd fc6b 	bl	8000a1e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003148:	4b6c      	ldr	r3, [pc, #432]	; (80032fc <HAL_RCC_ClockConfig+0x21c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d90c      	bls.n	8003170 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b69      	ldr	r3, [pc, #420]	; (80032fc <HAL_RCC_ClockConfig+0x21c>)
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b67      	ldr	r3, [pc, #412]	; (80032fc <HAL_RCC_ClockConfig+0x21c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e136      	b.n	80033de <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d049      	beq.n	8003210 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003188:	4b5d      	ldr	r3, [pc, #372]	; (8003300 <HAL_RCC_ClockConfig+0x220>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4a5c      	ldr	r2, [pc, #368]	; (8003300 <HAL_RCC_ClockConfig+0x220>)
 800318e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a0:	4b57      	ldr	r3, [pc, #348]	; (8003300 <HAL_RCC_ClockConfig+0x220>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4a56      	ldr	r2, [pc, #344]	; (8003300 <HAL_RCC_ClockConfig+0x220>)
 80031a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d024      	beq.n	80031fe <HAL_RCC_ClockConfig+0x11e>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d020      	beq.n	80031fe <HAL_RCC_ClockConfig+0x11e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b90      	cmp	r3, #144	; 0x90
 80031c2:	d01c      	beq.n	80031fe <HAL_RCC_ClockConfig+0x11e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2ba0      	cmp	r3, #160	; 0xa0
 80031ca:	d018      	beq.n	80031fe <HAL_RCC_ClockConfig+0x11e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2bb0      	cmp	r3, #176	; 0xb0
 80031d2:	d014      	beq.n	80031fe <HAL_RCC_ClockConfig+0x11e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2bc0      	cmp	r3, #192	; 0xc0
 80031da:	d010      	beq.n	80031fe <HAL_RCC_ClockConfig+0x11e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2bd0      	cmp	r3, #208	; 0xd0
 80031e2:	d00c      	beq.n	80031fe <HAL_RCC_ClockConfig+0x11e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2be0      	cmp	r3, #224	; 0xe0
 80031ea:	d008      	beq.n	80031fe <HAL_RCC_ClockConfig+0x11e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2bf0      	cmp	r3, #240	; 0xf0
 80031f2:	d004      	beq.n	80031fe <HAL_RCC_ClockConfig+0x11e>
 80031f4:	f240 217e 	movw	r1, #638	; 0x27e
 80031f8:	483f      	ldr	r0, [pc, #252]	; (80032f8 <HAL_RCC_ClockConfig+0x218>)
 80031fa:	f7fd fc10 	bl	8000a1e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031fe:	4b40      	ldr	r3, [pc, #256]	; (8003300 <HAL_RCC_ClockConfig+0x220>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	493d      	ldr	r1, [pc, #244]	; (8003300 <HAL_RCC_ClockConfig+0x220>)
 800320c:	4313      	orrs	r3, r2
 800320e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d059      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d010      	beq.n	8003246 <HAL_RCC_ClockConfig+0x166>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d00c      	beq.n	8003246 <HAL_RCC_ClockConfig+0x166>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d008      	beq.n	8003246 <HAL_RCC_ClockConfig+0x166>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b03      	cmp	r3, #3
 800323a:	d004      	beq.n	8003246 <HAL_RCC_ClockConfig+0x166>
 800323c:	f240 2185 	movw	r1, #645	; 0x285
 8003240:	482d      	ldr	r0, [pc, #180]	; (80032f8 <HAL_RCC_ClockConfig+0x218>)
 8003242:	f7fd fbec 	bl	8000a1e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	4b2c      	ldr	r3, [pc, #176]	; (8003300 <HAL_RCC_ClockConfig+0x220>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d119      	bne.n	800328e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0bf      	b.n	80033de <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d003      	beq.n	800326e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326a:	2b03      	cmp	r3, #3
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326e:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCC_ClockConfig+0x220>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e0af      	b.n	80033de <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_RCC_ClockConfig+0x220>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0a7      	b.n	80033de <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328e:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <HAL_RCC_ClockConfig+0x220>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 0203 	bic.w	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4919      	ldr	r1, [pc, #100]	; (8003300 <HAL_RCC_ClockConfig+0x220>)
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a0:	f7fe f912 	bl	80014c8 <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	e00a      	b.n	80032be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a8:	f7fe f90e 	bl	80014c8 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e08f      	b.n	80033de <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_RCC_ClockConfig+0x220>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 020c 	and.w	r2, r3, #12
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1eb      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <HAL_RCC_ClockConfig+0x21c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d212      	bcs.n	8003304 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b07      	ldr	r3, [pc, #28]	; (80032fc <HAL_RCC_ClockConfig+0x21c>)
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_RCC_ClockConfig+0x21c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d007      	beq.n	8003304 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e072      	b.n	80033de <HAL_RCC_ClockConfig+0x2fe>
 80032f8:	080092e8 	.word	0x080092e8
 80032fc:	40023c00 	.word	0x40023c00
 8003300:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d025      	beq.n	800335c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d018      	beq.n	800334a <HAL_RCC_ClockConfig+0x26a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003320:	d013      	beq.n	800334a <HAL_RCC_ClockConfig+0x26a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800332a:	d00e      	beq.n	800334a <HAL_RCC_ClockConfig+0x26a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003334:	d009      	beq.n	800334a <HAL_RCC_ClockConfig+0x26a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800333e:	d004      	beq.n	800334a <HAL_RCC_ClockConfig+0x26a>
 8003340:	f240 21c3 	movw	r1, #707	; 0x2c3
 8003344:	4828      	ldr	r0, [pc, #160]	; (80033e8 <HAL_RCC_ClockConfig+0x308>)
 8003346:	f7fd fb6a 	bl	8000a1e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334a:	4b28      	ldr	r3, [pc, #160]	; (80033ec <HAL_RCC_ClockConfig+0x30c>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	4925      	ldr	r1, [pc, #148]	; (80033ec <HAL_RCC_ClockConfig+0x30c>)
 8003358:	4313      	orrs	r3, r2
 800335a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d026      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d018      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x2c2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003378:	d013      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x2c2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003382:	d00e      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x2c2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800338c:	d009      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x2c2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003396:	d004      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x2c2>
 8003398:	f240 21ca 	movw	r1, #714	; 0x2ca
 800339c:	4812      	ldr	r0, [pc, #72]	; (80033e8 <HAL_RCC_ClockConfig+0x308>)
 800339e:	f7fd fb3e 	bl	8000a1e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_RCC_ClockConfig+0x30c>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	490e      	ldr	r1, [pc, #56]	; (80033ec <HAL_RCC_ClockConfig+0x30c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033b6:	f000 f821 	bl	80033fc <HAL_RCC_GetSysClockFreq>
 80033ba:	4602      	mov	r2, r0
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_ClockConfig+0x30c>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	490a      	ldr	r1, [pc, #40]	; (80033f0 <HAL_RCC_ClockConfig+0x310>)
 80033c8:	5ccb      	ldrb	r3, [r1, r3]
 80033ca:	fa22 f303 	lsr.w	r3, r2, r3
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <HAL_RCC_ClockConfig+0x314>)
 80033d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_RCC_ClockConfig+0x318>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd fbf6 	bl	8000bc8 <HAL_InitTick>

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	080092e8 	.word	0x080092e8
 80033ec:	40023800 	.word	0x40023800
 80033f0:	080095fc 	.word	0x080095fc
 80033f4:	20000004 	.word	0x20000004
 80033f8:	20000008 	.word	0x20000008

080033fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003400:	b090      	sub	sp, #64	; 0x40
 8003402:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
 8003408:	2300      	movs	r3, #0
 800340a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800340c:	2300      	movs	r3, #0
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003414:	4b59      	ldr	r3, [pc, #356]	; (800357c <HAL_RCC_GetSysClockFreq+0x180>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b08      	cmp	r3, #8
 800341e:	d00d      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x40>
 8003420:	2b08      	cmp	r3, #8
 8003422:	f200 80a1 	bhi.w	8003568 <HAL_RCC_GetSysClockFreq+0x16c>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x34>
 800342a:	2b04      	cmp	r3, #4
 800342c:	d003      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0x3a>
 800342e:	e09b      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003430:	4b53      	ldr	r3, [pc, #332]	; (8003580 <HAL_RCC_GetSysClockFreq+0x184>)
 8003432:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003434:	e09b      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003436:	4b53      	ldr	r3, [pc, #332]	; (8003584 <HAL_RCC_GetSysClockFreq+0x188>)
 8003438:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800343a:	e098      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800343c:	4b4f      	ldr	r3, [pc, #316]	; (800357c <HAL_RCC_GetSysClockFreq+0x180>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003444:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003446:	4b4d      	ldr	r3, [pc, #308]	; (800357c <HAL_RCC_GetSysClockFreq+0x180>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d028      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003452:	4b4a      	ldr	r3, [pc, #296]	; (800357c <HAL_RCC_GetSysClockFreq+0x180>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	099b      	lsrs	r3, r3, #6
 8003458:	2200      	movs	r2, #0
 800345a:	623b      	str	r3, [r7, #32]
 800345c:	627a      	str	r2, [r7, #36]	; 0x24
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003464:	2100      	movs	r1, #0
 8003466:	4b47      	ldr	r3, [pc, #284]	; (8003584 <HAL_RCC_GetSysClockFreq+0x188>)
 8003468:	fb03 f201 	mul.w	r2, r3, r1
 800346c:	2300      	movs	r3, #0
 800346e:	fb00 f303 	mul.w	r3, r0, r3
 8003472:	4413      	add	r3, r2
 8003474:	4a43      	ldr	r2, [pc, #268]	; (8003584 <HAL_RCC_GetSysClockFreq+0x188>)
 8003476:	fba0 1202 	umull	r1, r2, r0, r2
 800347a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800347c:	460a      	mov	r2, r1
 800347e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003482:	4413      	add	r3, r2
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003488:	2200      	movs	r2, #0
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	61fa      	str	r2, [r7, #28]
 800348e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003492:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003496:	f7fc fea3 	bl	80001e0 <__aeabi_uldivmod>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4613      	mov	r3, r2
 80034a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a2:	e053      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a4:	4b35      	ldr	r3, [pc, #212]	; (800357c <HAL_RCC_GetSysClockFreq+0x180>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	099b      	lsrs	r3, r3, #6
 80034aa:	2200      	movs	r2, #0
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	617a      	str	r2, [r7, #20]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034b6:	f04f 0b00 	mov.w	fp, #0
 80034ba:	4652      	mov	r2, sl
 80034bc:	465b      	mov	r3, fp
 80034be:	f04f 0000 	mov.w	r0, #0
 80034c2:	f04f 0100 	mov.w	r1, #0
 80034c6:	0159      	lsls	r1, r3, #5
 80034c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034cc:	0150      	lsls	r0, r2, #5
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	ebb2 080a 	subs.w	r8, r2, sl
 80034d6:	eb63 090b 	sbc.w	r9, r3, fp
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034ee:	ebb2 0408 	subs.w	r4, r2, r8
 80034f2:	eb63 0509 	sbc.w	r5, r3, r9
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	00eb      	lsls	r3, r5, #3
 8003500:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003504:	00e2      	lsls	r2, r4, #3
 8003506:	4614      	mov	r4, r2
 8003508:	461d      	mov	r5, r3
 800350a:	eb14 030a 	adds.w	r3, r4, sl
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	eb45 030b 	adc.w	r3, r5, fp
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003522:	4629      	mov	r1, r5
 8003524:	028b      	lsls	r3, r1, #10
 8003526:	4621      	mov	r1, r4
 8003528:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800352c:	4621      	mov	r1, r4
 800352e:	028a      	lsls	r2, r1, #10
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003536:	2200      	movs	r2, #0
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	60fa      	str	r2, [r7, #12]
 800353c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003540:	f7fc fe4e 	bl	80001e0 <__aeabi_uldivmod>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4613      	mov	r3, r2
 800354a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_GetSysClockFreq+0x180>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	3301      	adds	r3, #1
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800355c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003560:	fbb2 f3f3 	udiv	r3, r2, r3
 8003564:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003566:	e002      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_RCC_GetSysClockFreq+0x184>)
 800356a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800356c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003570:	4618      	mov	r0, r3
 8003572:	3740      	adds	r7, #64	; 0x40
 8003574:	46bd      	mov	sp, r7
 8003576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800
 8003580:	00f42400 	.word	0x00f42400
 8003584:	017d7840 	.word	0x017d7840

08003588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800358c:	4b03      	ldr	r3, [pc, #12]	; (800359c <HAL_RCC_GetHCLKFreq+0x14>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	20000004 	.word	0x20000004

080035a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035a4:	f7ff fff0 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	0a9b      	lsrs	r3, r3, #10
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4903      	ldr	r1, [pc, #12]	; (80035c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40023800 	.word	0x40023800
 80035c4:	0800960c 	.word	0x0800960c

080035c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035cc:	f7ff ffdc 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035d0:	4602      	mov	r2, r0
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	0b5b      	lsrs	r3, r3, #13
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	4903      	ldr	r1, [pc, #12]	; (80035ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80035de:	5ccb      	ldrb	r3, [r1, r3]
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40023800 	.word	0x40023800
 80035ec:	0800960c 	.word	0x0800960c

080035f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	220f      	movs	r2, #15
 80035fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003600:	4b12      	ldr	r3, [pc, #72]	; (800364c <HAL_RCC_GetClockConfig+0x5c>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0203 	and.w	r2, r3, #3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800360c:	4b0f      	ldr	r3, [pc, #60]	; (800364c <HAL_RCC_GetClockConfig+0x5c>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003618:	4b0c      	ldr	r3, [pc, #48]	; (800364c <HAL_RCC_GetClockConfig+0x5c>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <HAL_RCC_GetClockConfig+0x5c>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	08db      	lsrs	r3, r3, #3
 800362a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <HAL_RCC_GetClockConfig+0x60>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0207 	and.w	r2, r3, #7
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	601a      	str	r2, [r3, #0]
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40023800 	.word	0x40023800
 8003650:	40023c00 	.word	0x40023c00

08003654 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e184      	b.n	8003970 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a72      	ldr	r2, [pc, #456]	; (8003834 <HAL_SPI_Init+0x1e0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d013      	beq.n	8003698 <HAL_SPI_Init+0x44>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a70      	ldr	r2, [pc, #448]	; (8003838 <HAL_SPI_Init+0x1e4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00e      	beq.n	8003698 <HAL_SPI_Init+0x44>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a6f      	ldr	r2, [pc, #444]	; (800383c <HAL_SPI_Init+0x1e8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d009      	beq.n	8003698 <HAL_SPI_Init+0x44>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a6d      	ldr	r2, [pc, #436]	; (8003840 <HAL_SPI_Init+0x1ec>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d004      	beq.n	8003698 <HAL_SPI_Init+0x44>
 800368e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003692:	486c      	ldr	r0, [pc, #432]	; (8003844 <HAL_SPI_Init+0x1f0>)
 8003694:	f7fd f9c3 	bl	8000a1e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <HAL_SPI_Init+0x60>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036a8:	d004      	beq.n	80036b4 <HAL_SPI_Init+0x60>
 80036aa:	f240 1141 	movw	r1, #321	; 0x141
 80036ae:	4865      	ldr	r0, [pc, #404]	; (8003844 <HAL_SPI_Init+0x1f0>)
 80036b0:	f7fd f9b5 	bl	8000a1e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00e      	beq.n	80036da <HAL_SPI_Init+0x86>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c4:	d009      	beq.n	80036da <HAL_SPI_Init+0x86>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ce:	d004      	beq.n	80036da <HAL_SPI_Init+0x86>
 80036d0:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80036d4:	485b      	ldr	r0, [pc, #364]	; (8003844 <HAL_SPI_Init+0x1f0>)
 80036d6:	f7fd f9a2 	bl	8000a1e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e2:	d008      	beq.n	80036f6 <HAL_SPI_Init+0xa2>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d004      	beq.n	80036f6 <HAL_SPI_Init+0xa2>
 80036ec:	f240 1143 	movw	r1, #323	; 0x143
 80036f0:	4854      	ldr	r0, [pc, #336]	; (8003844 <HAL_SPI_Init+0x1f0>)
 80036f2:	f7fd f994 	bl	8000a1e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fe:	d00d      	beq.n	800371c <HAL_SPI_Init+0xc8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d009      	beq.n	800371c <HAL_SPI_Init+0xc8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003710:	d004      	beq.n	800371c <HAL_SPI_Init+0xc8>
 8003712:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003716:	484b      	ldr	r0, [pc, #300]	; (8003844 <HAL_SPI_Init+0x1f0>)
 8003718:	f7fd f981 	bl	8000a1e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d020      	beq.n	8003766 <HAL_SPI_Init+0x112>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d01c      	beq.n	8003766 <HAL_SPI_Init+0x112>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	2b10      	cmp	r3, #16
 8003732:	d018      	beq.n	8003766 <HAL_SPI_Init+0x112>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	2b18      	cmp	r3, #24
 800373a:	d014      	beq.n	8003766 <HAL_SPI_Init+0x112>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	2b20      	cmp	r3, #32
 8003742:	d010      	beq.n	8003766 <HAL_SPI_Init+0x112>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	2b28      	cmp	r3, #40	; 0x28
 800374a:	d00c      	beq.n	8003766 <HAL_SPI_Init+0x112>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	2b30      	cmp	r3, #48	; 0x30
 8003752:	d008      	beq.n	8003766 <HAL_SPI_Init+0x112>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	2b38      	cmp	r3, #56	; 0x38
 800375a:	d004      	beq.n	8003766 <HAL_SPI_Init+0x112>
 800375c:	f240 1145 	movw	r1, #325	; 0x145
 8003760:	4838      	ldr	r0, [pc, #224]	; (8003844 <HAL_SPI_Init+0x1f0>)
 8003762:	f7fd f95c 	bl	8000a1e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_SPI_Init+0x12c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	2b80      	cmp	r3, #128	; 0x80
 8003774:	d004      	beq.n	8003780 <HAL_SPI_Init+0x12c>
 8003776:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800377a:	4832      	ldr	r0, [pc, #200]	; (8003844 <HAL_SPI_Init+0x1f0>)
 800377c:	f7fd f94f 	bl	8000a1e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_SPI_Init+0x146>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	2b10      	cmp	r3, #16
 800378e:	d004      	beq.n	800379a <HAL_SPI_Init+0x146>
 8003790:	f240 1147 	movw	r1, #327	; 0x147
 8003794:	482b      	ldr	r0, [pc, #172]	; (8003844 <HAL_SPI_Init+0x1f0>)
 8003796:	f7fd f942 	bl	8000a1e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d152      	bne.n	8003848 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_SPI_Init+0x168>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d004      	beq.n	80037bc <HAL_SPI_Init+0x168>
 80037b2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80037b6:	4823      	ldr	r0, [pc, #140]	; (8003844 <HAL_SPI_Init+0x1f0>)
 80037b8:	f7fd f931 	bl	8000a1e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_SPI_Init+0x182>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d004      	beq.n	80037d6 <HAL_SPI_Init+0x182>
 80037cc:	f240 114b 	movw	r1, #331	; 0x14b
 80037d0:	481c      	ldr	r0, [pc, #112]	; (8003844 <HAL_SPI_Init+0x1f0>)
 80037d2:	f7fd f924 	bl	8000a1e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037de:	d125      	bne.n	800382c <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d05a      	beq.n	800389e <HAL_SPI_Init+0x24a>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d056      	beq.n	800389e <HAL_SPI_Init+0x24a>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	2b10      	cmp	r3, #16
 80037f6:	d052      	beq.n	800389e <HAL_SPI_Init+0x24a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	2b18      	cmp	r3, #24
 80037fe:	d04e      	beq.n	800389e <HAL_SPI_Init+0x24a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	2b20      	cmp	r3, #32
 8003806:	d04a      	beq.n	800389e <HAL_SPI_Init+0x24a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	2b28      	cmp	r3, #40	; 0x28
 800380e:	d046      	beq.n	800389e <HAL_SPI_Init+0x24a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	2b30      	cmp	r3, #48	; 0x30
 8003816:	d042      	beq.n	800389e <HAL_SPI_Init+0x24a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	2b38      	cmp	r3, #56	; 0x38
 800381e:	d03e      	beq.n	800389e <HAL_SPI_Init+0x24a>
 8003820:	f240 114f 	movw	r1, #335	; 0x14f
 8003824:	4807      	ldr	r0, [pc, #28]	; (8003844 <HAL_SPI_Init+0x1f0>)
 8003826:	f7fd f8fa 	bl	8000a1e <assert_failed>
 800382a:	e038      	b.n	800389e <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	61da      	str	r2, [r3, #28]
 8003832:	e034      	b.n	800389e <HAL_SPI_Init+0x24a>
 8003834:	40013000 	.word	0x40013000
 8003838:	40003800 	.word	0x40003800
 800383c:	40003c00 	.word	0x40003c00
 8003840:	40013400 	.word	0x40013400
 8003844:	0800935c 	.word	0x0800935c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_SPI_Init+0x23e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d01c      	beq.n	8003892 <HAL_SPI_Init+0x23e>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	2b10      	cmp	r3, #16
 800385e:	d018      	beq.n	8003892 <HAL_SPI_Init+0x23e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	2b18      	cmp	r3, #24
 8003866:	d014      	beq.n	8003892 <HAL_SPI_Init+0x23e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	2b20      	cmp	r3, #32
 800386e:	d010      	beq.n	8003892 <HAL_SPI_Init+0x23e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	2b28      	cmp	r3, #40	; 0x28
 8003876:	d00c      	beq.n	8003892 <HAL_SPI_Init+0x23e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	2b30      	cmp	r3, #48	; 0x30
 800387e:	d008      	beq.n	8003892 <HAL_SPI_Init+0x23e>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	2b38      	cmp	r3, #56	; 0x38
 8003886:	d004      	beq.n	8003892 <HAL_SPI_Init+0x23e>
 8003888:	f240 1159 	movw	r1, #345	; 0x159
 800388c:	483a      	ldr	r0, [pc, #232]	; (8003978 <HAL_SPI_Init+0x324>)
 800388e:	f7fd f8c6 	bl	8000a1e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d106      	bne.n	80038be <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7fd f8f1 	bl	8000aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2202      	movs	r2, #2
 80038c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	ea42 0103 	orr.w	r1, r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	0c1b      	lsrs	r3, r3, #16
 800393c:	f003 0104 	and.w	r1, r3, #4
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	f003 0210 	and.w	r2, r3, #16
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800395e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	0800935c 	.word	0x0800935c

0800397c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d009      	beq.n	80039ac <HAL_SPI_Transmit+0x30>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a0:	d004      	beq.n	80039ac <HAL_SPI_Transmit+0x30>
 80039a2:	f44f 7142 	mov.w	r1, #776	; 0x308
 80039a6:	4880      	ldr	r0, [pc, #512]	; (8003ba8 <HAL_SPI_Transmit+0x22c>)
 80039a8:	f7fd f839 	bl	8000a1e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_SPI_Transmit+0x3e>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e128      	b.n	8003c0c <HAL_SPI_Transmit+0x290>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039c2:	f7fd fd81 	bl	80014c8 <HAL_GetTick>
 80039c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d002      	beq.n	80039de <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
 80039da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039dc:	e10d      	b.n	8003bfa <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_SPI_Transmit+0x6e>
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d102      	bne.n	80039f0 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039ee:	e104      	b.n	8003bfa <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2203      	movs	r2, #3
 80039f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	88fa      	ldrh	r2, [r7, #6]
 8003a0e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a36:	d10f      	bne.n	8003a58 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d007      	beq.n	8003a76 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a7e:	d14b      	bne.n	8003b18 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <HAL_SPI_Transmit+0x112>
 8003a88:	8afb      	ldrh	r3, [r7, #22]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d13e      	bne.n	8003b0c <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	881a      	ldrh	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	1c9a      	adds	r2, r3, #2
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ab2:	e02b      	b.n	8003b0c <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d112      	bne.n	8003ae8 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	881a      	ldrh	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	1c9a      	adds	r2, r3, #2
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ae6:	e011      	b.n	8003b0c <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ae8:	f7fd fcee 	bl	80014c8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d803      	bhi.n	8003b00 <HAL_SPI_Transmit+0x184>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d102      	bne.n	8003b06 <HAL_SPI_Transmit+0x18a>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b0a:	e076      	b.n	8003bfa <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1ce      	bne.n	8003ab4 <HAL_SPI_Transmit+0x138>
 8003b16:	e04e      	b.n	8003bb6 <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_SPI_Transmit+0x1aa>
 8003b20:	8afb      	ldrh	r3, [r7, #22]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d142      	bne.n	8003bac <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	7812      	ldrb	r2, [r2, #0]
 8003b32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b4c:	e02e      	b.n	8003bac <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d113      	bne.n	8003b84 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	330c      	adds	r3, #12
 8003b66:	7812      	ldrb	r2, [r2, #0]
 8003b68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b82:	e013      	b.n	8003bac <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b84:	f7fd fca0 	bl	80014c8 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d803      	bhi.n	8003b9c <HAL_SPI_Transmit+0x220>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	d102      	bne.n	8003ba2 <HAL_SPI_Transmit+0x226>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d104      	bne.n	8003bac <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ba6:	e028      	b.n	8003bfa <HAL_SPI_Transmit+0x27e>
 8003ba8:	0800935c 	.word	0x0800935c
    while (hspi->TxXferCount > 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1cb      	bne.n	8003b4e <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	6839      	ldr	r1, [r7, #0]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f8b2 	bl	8003d24 <SPI_EndRxTxTransaction>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	77fb      	strb	r3, [r7, #31]
 8003bf6:	e000      	b.n	8003bfa <HAL_SPI_Transmit+0x27e>
  }

error:
 8003bf8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	4613      	mov	r3, r2
 8003c22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c24:	f7fd fc50 	bl	80014c8 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	4413      	add	r3, r2
 8003c32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c34:	f7fd fc48 	bl	80014c8 <HAL_GetTick>
 8003c38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c3a:	4b39      	ldr	r3, [pc, #228]	; (8003d20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	015b      	lsls	r3, r3, #5
 8003c40:	0d1b      	lsrs	r3, r3, #20
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	fb02 f303 	mul.w	r3, r2, r3
 8003c48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c4a:	e054      	b.n	8003cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d050      	beq.n	8003cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c54:	f7fd fc38 	bl	80014c8 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	69fa      	ldr	r2, [r7, #28]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d902      	bls.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d13d      	bne.n	8003ce6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c82:	d111      	bne.n	8003ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8c:	d004      	beq.n	8003c98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c96:	d107      	bne.n	8003ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb0:	d10f      	bne.n	8003cd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e017      	b.n	8003d16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	bf0c      	ite	eq
 8003d06:	2301      	moveq	r3, #1
 8003d08:	2300      	movne	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d19b      	bne.n	8003c4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3720      	adds	r7, #32
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000004 	.word	0x20000004

08003d24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d30:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <SPI_EndRxTxTransaction+0x7c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <SPI_EndRxTxTransaction+0x80>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	0d5b      	lsrs	r3, r3, #21
 8003d3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d40:	fb02 f303 	mul.w	r3, r2, r3
 8003d44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d4e:	d112      	bne.n	8003d76 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2200      	movs	r2, #0
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f7ff ff5a 	bl	8003c14 <SPI_WaitFlagStateUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	f043 0220 	orr.w	r2, r3, #32
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e00f      	b.n	8003d96 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8c:	2b80      	cmp	r3, #128	; 0x80
 8003d8e:	d0f2      	beq.n	8003d76 <SPI_EndRxTxTransaction+0x52>
 8003d90:	e000      	b.n	8003d94 <SPI_EndRxTxTransaction+0x70>
        break;
 8003d92:	bf00      	nop
  }

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000004 	.word	0x20000004
 8003da4:	165e9f81 	.word	0x165e9f81

08003da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e0a7      	b.n	8003f0a <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a55      	ldr	r2, [pc, #340]	; (8003f14 <HAL_TIM_Base_Init+0x16c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d027      	beq.n	8003e14 <HAL_TIM_Base_Init+0x6c>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dcc:	d022      	beq.n	8003e14 <HAL_TIM_Base_Init+0x6c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a51      	ldr	r2, [pc, #324]	; (8003f18 <HAL_TIM_Base_Init+0x170>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d01d      	beq.n	8003e14 <HAL_TIM_Base_Init+0x6c>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a4f      	ldr	r2, [pc, #316]	; (8003f1c <HAL_TIM_Base_Init+0x174>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d018      	beq.n	8003e14 <HAL_TIM_Base_Init+0x6c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a4e      	ldr	r2, [pc, #312]	; (8003f20 <HAL_TIM_Base_Init+0x178>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <HAL_TIM_Base_Init+0x6c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a4c      	ldr	r2, [pc, #304]	; (8003f24 <HAL_TIM_Base_Init+0x17c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <HAL_TIM_Base_Init+0x6c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a4b      	ldr	r2, [pc, #300]	; (8003f28 <HAL_TIM_Base_Init+0x180>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_TIM_Base_Init+0x6c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a49      	ldr	r2, [pc, #292]	; (8003f2c <HAL_TIM_Base_Init+0x184>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_TIM_Base_Init+0x6c>
 8003e0a:	f240 1113 	movw	r1, #275	; 0x113
 8003e0e:	4848      	ldr	r0, [pc, #288]	; (8003f30 <HAL_TIM_Base_Init+0x188>)
 8003e10:	f7fc fe05 	bl	8000a1e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d014      	beq.n	8003e46 <HAL_TIM_Base_Init+0x9e>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	d010      	beq.n	8003e46 <HAL_TIM_Base_Init+0x9e>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d00c      	beq.n	8003e46 <HAL_TIM_Base_Init+0x9e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b40      	cmp	r3, #64	; 0x40
 8003e32:	d008      	beq.n	8003e46 <HAL_TIM_Base_Init+0x9e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b60      	cmp	r3, #96	; 0x60
 8003e3a:	d004      	beq.n	8003e46 <HAL_TIM_Base_Init+0x9e>
 8003e3c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003e40:	483b      	ldr	r0, [pc, #236]	; (8003f30 <HAL_TIM_Base_Init+0x188>)
 8003e42:	f7fc fdec 	bl	8000a1e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00e      	beq.n	8003e6c <HAL_TIM_Base_Init+0xc4>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e56:	d009      	beq.n	8003e6c <HAL_TIM_Base_Init+0xc4>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e60:	d004      	beq.n	8003e6c <HAL_TIM_Base_Init+0xc4>
 8003e62:	f240 1115 	movw	r1, #277	; 0x115
 8003e66:	4832      	ldr	r0, [pc, #200]	; (8003f30 <HAL_TIM_Base_Init+0x188>)
 8003e68:	f7fc fdd9 	bl	8000a1e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_TIM_Base_Init+0xde>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b80      	cmp	r3, #128	; 0x80
 8003e7a:	d004      	beq.n	8003e86 <HAL_TIM_Base_Init+0xde>
 8003e7c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003e80:	482b      	ldr	r0, [pc, #172]	; (8003f30 <HAL_TIM_Base_Init+0x188>)
 8003e82:	f7fc fdcc 	bl	8000a1e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f84a 	bl	8003f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f000 fc54 	bl	8004760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40010000 	.word	0x40010000
 8003f18:	40000400 	.word	0x40000400
 8003f1c:	40000800 	.word	0x40000800
 8003f20:	40000c00 	.word	0x40000c00
 8003f24:	40014000 	.word	0x40014000
 8003f28:	40014400 	.word	0x40014400
 8003f2c:	40014800 	.word	0x40014800
 8003f30:	080093d0 	.word	0x080093d0

08003f34 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3d      	ldr	r2, [pc, #244]	; (800404c <HAL_TIM_Base_Start_IT+0x104>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d027      	beq.n	8003faa <HAL_TIM_Base_Start_IT+0x62>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f62:	d022      	beq.n	8003faa <HAL_TIM_Base_Start_IT+0x62>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a39      	ldr	r2, [pc, #228]	; (8004050 <HAL_TIM_Base_Start_IT+0x108>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01d      	beq.n	8003faa <HAL_TIM_Base_Start_IT+0x62>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a38      	ldr	r2, [pc, #224]	; (8004054 <HAL_TIM_Base_Start_IT+0x10c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d018      	beq.n	8003faa <HAL_TIM_Base_Start_IT+0x62>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a36      	ldr	r2, [pc, #216]	; (8004058 <HAL_TIM_Base_Start_IT+0x110>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_TIM_Base_Start_IT+0x62>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a35      	ldr	r2, [pc, #212]	; (800405c <HAL_TIM_Base_Start_IT+0x114>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00e      	beq.n	8003faa <HAL_TIM_Base_Start_IT+0x62>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a33      	ldr	r2, [pc, #204]	; (8004060 <HAL_TIM_Base_Start_IT+0x118>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d009      	beq.n	8003faa <HAL_TIM_Base_Start_IT+0x62>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a32      	ldr	r2, [pc, #200]	; (8004064 <HAL_TIM_Base_Start_IT+0x11c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_TIM_Base_Start_IT+0x62>
 8003fa0:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003fa4:	4830      	ldr	r0, [pc, #192]	; (8004068 <HAL_TIM_Base_Start_IT+0x120>)
 8003fa6:	f7fc fd3a 	bl	8000a1e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d001      	beq.n	8003fba <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e044      	b.n	8004044 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1d      	ldr	r2, [pc, #116]	; (800404c <HAL_TIM_Base_Start_IT+0x104>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d018      	beq.n	800400e <HAL_TIM_Base_Start_IT+0xc6>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe4:	d013      	beq.n	800400e <HAL_TIM_Base_Start_IT+0xc6>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a19      	ldr	r2, [pc, #100]	; (8004050 <HAL_TIM_Base_Start_IT+0x108>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_TIM_Base_Start_IT+0xc6>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a17      	ldr	r2, [pc, #92]	; (8004054 <HAL_TIM_Base_Start_IT+0x10c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d009      	beq.n	800400e <HAL_TIM_Base_Start_IT+0xc6>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a16      	ldr	r2, [pc, #88]	; (8004058 <HAL_TIM_Base_Start_IT+0x110>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_TIM_Base_Start_IT+0xc6>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a14      	ldr	r2, [pc, #80]	; (800405c <HAL_TIM_Base_Start_IT+0x114>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d111      	bne.n	8004032 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b06      	cmp	r3, #6
 800401e:	d010      	beq.n	8004042 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004030:	e007      	b.n	8004042 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40010000 	.word	0x40010000
 8004050:	40000400 	.word	0x40000400
 8004054:	40000800 	.word	0x40000800
 8004058:	40000c00 	.word	0x40000c00
 800405c:	40014000 	.word	0x40014000
 8004060:	40014400 	.word	0x40014400
 8004064:	40014800 	.word	0x40014800
 8004068:	080093d0 	.word	0x080093d0

0800406c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0a7      	b.n	80041ce <HAL_TIM_IC_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a55      	ldr	r2, [pc, #340]	; (80041d8 <HAL_TIM_IC_Init+0x16c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d027      	beq.n	80040d8 <HAL_TIM_IC_Init+0x6c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004090:	d022      	beq.n	80040d8 <HAL_TIM_IC_Init+0x6c>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a51      	ldr	r2, [pc, #324]	; (80041dc <HAL_TIM_IC_Init+0x170>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d01d      	beq.n	80040d8 <HAL_TIM_IC_Init+0x6c>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a4f      	ldr	r2, [pc, #316]	; (80041e0 <HAL_TIM_IC_Init+0x174>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d018      	beq.n	80040d8 <HAL_TIM_IC_Init+0x6c>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a4e      	ldr	r2, [pc, #312]	; (80041e4 <HAL_TIM_IC_Init+0x178>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <HAL_TIM_IC_Init+0x6c>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a4c      	ldr	r2, [pc, #304]	; (80041e8 <HAL_TIM_IC_Init+0x17c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <HAL_TIM_IC_Init+0x6c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a4b      	ldr	r2, [pc, #300]	; (80041ec <HAL_TIM_IC_Init+0x180>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_TIM_IC_Init+0x6c>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a49      	ldr	r2, [pc, #292]	; (80041f0 <HAL_TIM_IC_Init+0x184>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_TIM_IC_Init+0x6c>
 80040ce:	f240 71bf 	movw	r1, #1983	; 0x7bf
 80040d2:	4848      	ldr	r0, [pc, #288]	; (80041f4 <HAL_TIM_IC_Init+0x188>)
 80040d4:	f7fc fca3 	bl	8000a1e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d014      	beq.n	800410a <HAL_TIM_IC_Init+0x9e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d010      	beq.n	800410a <HAL_TIM_IC_Init+0x9e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d00c      	beq.n	800410a <HAL_TIM_IC_Init+0x9e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b40      	cmp	r3, #64	; 0x40
 80040f6:	d008      	beq.n	800410a <HAL_TIM_IC_Init+0x9e>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b60      	cmp	r3, #96	; 0x60
 80040fe:	d004      	beq.n	800410a <HAL_TIM_IC_Init+0x9e>
 8004100:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8004104:	483b      	ldr	r0, [pc, #236]	; (80041f4 <HAL_TIM_IC_Init+0x188>)
 8004106:	f7fc fc8a 	bl	8000a1e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00e      	beq.n	8004130 <HAL_TIM_IC_Init+0xc4>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800411a:	d009      	beq.n	8004130 <HAL_TIM_IC_Init+0xc4>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004124:	d004      	beq.n	8004130 <HAL_TIM_IC_Init+0xc4>
 8004126:	f240 71c1 	movw	r1, #1985	; 0x7c1
 800412a:	4832      	ldr	r0, [pc, #200]	; (80041f4 <HAL_TIM_IC_Init+0x188>)
 800412c:	f7fc fc77 	bl	8000a1e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_TIM_IC_Init+0xde>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	2b80      	cmp	r3, #128	; 0x80
 800413e:	d004      	beq.n	800414a <HAL_TIM_IC_Init+0xde>
 8004140:	f240 71c2 	movw	r1, #1986	; 0x7c2
 8004144:	482b      	ldr	r0, [pc, #172]	; (80041f4 <HAL_TIM_IC_Init+0x188>)
 8004146:	f7fc fc6a 	bl	8000a1e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_TIM_IC_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fc fe3e 	bl	8000de0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f000 faf2 	bl	8004760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40010000 	.word	0x40010000
 80041dc:	40000400 	.word	0x40000400
 80041e0:	40000800 	.word	0x40000800
 80041e4:	40000c00 	.word	0x40000c00
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40014400 	.word	0x40014400
 80041f0:	40014800 	.word	0x40014800
 80041f4:	080093d0 	.word	0x080093d0

080041f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b02      	cmp	r3, #2
 800420c:	d122      	bne.n	8004254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	d11b      	bne.n	8004254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0202 	mvn.w	r2, #2
 8004224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fa72 	bl	8004724 <HAL_TIM_IC_CaptureCallback>
 8004240:	e005      	b.n	800424e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fa64 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fa75 	bl	8004738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b04      	cmp	r3, #4
 8004260:	d122      	bne.n	80042a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b04      	cmp	r3, #4
 800426e:	d11b      	bne.n	80042a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0204 	mvn.w	r2, #4
 8004278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fa48 	bl	8004724 <HAL_TIM_IC_CaptureCallback>
 8004294:	e005      	b.n	80042a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fa3a 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fa4b 	bl	8004738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d122      	bne.n	80042fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d11b      	bne.n	80042fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0208 	mvn.w	r2, #8
 80042cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2204      	movs	r2, #4
 80042d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fa1e 	bl	8004724 <HAL_TIM_IC_CaptureCallback>
 80042e8:	e005      	b.n	80042f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fa10 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fa21 	bl	8004738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0310 	and.w	r3, r3, #16
 8004306:	2b10      	cmp	r3, #16
 8004308:	d122      	bne.n	8004350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b10      	cmp	r3, #16
 8004316:	d11b      	bne.n	8004350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0210 	mvn.w	r2, #16
 8004320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2208      	movs	r2, #8
 8004326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f9f4 	bl	8004724 <HAL_TIM_IC_CaptureCallback>
 800433c:	e005      	b.n	800434a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f9e6 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f9f7 	bl	8004738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b01      	cmp	r3, #1
 800435c:	d10e      	bne.n	800437c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b01      	cmp	r3, #1
 800436a:	d107      	bne.n	800437c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0201 	mvn.w	r2, #1
 8004374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc fb3a 	bl	80009f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b80      	cmp	r3, #128	; 0x80
 8004388:	d10e      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004394:	2b80      	cmp	r3, #128	; 0x80
 8004396:	d107      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fc42 	bl	8004c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b2:	2b40      	cmp	r3, #64	; 0x40
 80043b4:	d10e      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d107      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f9bc 	bl	800474c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b20      	cmp	r3, #32
 80043e0:	d10e      	bne.n	8004400 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d107      	bne.n	8004400 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0220 	mvn.w	r2, #32
 80043f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fc0c 	bl	8004c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a8a      	ldr	r2, [pc, #552]	; (8004648 <HAL_TIM_IC_ConfigChannel+0x240>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d027      	beq.n	8004472 <HAL_TIM_IC_ConfigChannel+0x6a>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442a:	d022      	beq.n	8004472 <HAL_TIM_IC_ConfigChannel+0x6a>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a86      	ldr	r2, [pc, #536]	; (800464c <HAL_TIM_IC_ConfigChannel+0x244>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01d      	beq.n	8004472 <HAL_TIM_IC_ConfigChannel+0x6a>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a85      	ldr	r2, [pc, #532]	; (8004650 <HAL_TIM_IC_ConfigChannel+0x248>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d018      	beq.n	8004472 <HAL_TIM_IC_ConfigChannel+0x6a>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a83      	ldr	r2, [pc, #524]	; (8004654 <HAL_TIM_IC_ConfigChannel+0x24c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d013      	beq.n	8004472 <HAL_TIM_IC_ConfigChannel+0x6a>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a82      	ldr	r2, [pc, #520]	; (8004658 <HAL_TIM_IC_ConfigChannel+0x250>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00e      	beq.n	8004472 <HAL_TIM_IC_ConfigChannel+0x6a>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a80      	ldr	r2, [pc, #512]	; (800465c <HAL_TIM_IC_ConfigChannel+0x254>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d009      	beq.n	8004472 <HAL_TIM_IC_ConfigChannel+0x6a>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a7f      	ldr	r2, [pc, #508]	; (8004660 <HAL_TIM_IC_ConfigChannel+0x258>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d004      	beq.n	8004472 <HAL_TIM_IC_ConfigChannel+0x6a>
 8004468:	f241 0112 	movw	r1, #4114	; 0x1012
 800446c:	487d      	ldr	r0, [pc, #500]	; (8004664 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800446e:	f7fc fad6 	bl	8000a1e <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00c      	beq.n	8004494 <HAL_TIM_IC_ConfigChannel+0x8c>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d008      	beq.n	8004494 <HAL_TIM_IC_ConfigChannel+0x8c>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b0a      	cmp	r3, #10
 8004488:	d004      	beq.n	8004494 <HAL_TIM_IC_ConfigChannel+0x8c>
 800448a:	f241 0113 	movw	r1, #4115	; 0x1013
 800448e:	4875      	ldr	r0, [pc, #468]	; (8004664 <HAL_TIM_IC_ConfigChannel+0x25c>)
 8004490:	f7fc fac5 	bl	8000a1e <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d00c      	beq.n	80044b6 <HAL_TIM_IC_ConfigChannel+0xae>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d008      	beq.n	80044b6 <HAL_TIM_IC_ConfigChannel+0xae>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d004      	beq.n	80044b6 <HAL_TIM_IC_ConfigChannel+0xae>
 80044ac:	f241 0114 	movw	r1, #4116	; 0x1014
 80044b0:	486c      	ldr	r0, [pc, #432]	; (8004664 <HAL_TIM_IC_ConfigChannel+0x25c>)
 80044b2:	f7fc fab4 	bl	8000a1e <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d010      	beq.n	80044e0 <HAL_TIM_IC_ConfigChannel+0xd8>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d00c      	beq.n	80044e0 <HAL_TIM_IC_ConfigChannel+0xd8>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d008      	beq.n	80044e0 <HAL_TIM_IC_ConfigChannel+0xd8>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	d004      	beq.n	80044e0 <HAL_TIM_IC_ConfigChannel+0xd8>
 80044d6:	f241 0115 	movw	r1, #4117	; 0x1015
 80044da:	4862      	ldr	r0, [pc, #392]	; (8004664 <HAL_TIM_IC_ConfigChannel+0x25c>)
 80044dc:	f7fc fa9f 	bl	8000a1e <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2b0f      	cmp	r3, #15
 80044e6:	d904      	bls.n	80044f2 <HAL_TIM_IC_ConfigChannel+0xea>
 80044e8:	f241 0116 	movw	r1, #4118	; 0x1016
 80044ec:	485d      	ldr	r0, [pc, #372]	; (8004664 <HAL_TIM_IC_ConfigChannel+0x25c>)
 80044ee:	f7fc fa96 	bl	8000a1e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_TIM_IC_ConfigChannel+0xf8>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e0f8      	b.n	80046f2 <HAL_TIM_IC_ConfigChannel+0x2ea>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d11b      	bne.n	8004546 <HAL_TIM_IC_ConfigChannel+0x13e>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6819      	ldr	r1, [r3, #0]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f000 f99f 	bl	8004860 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699a      	ldr	r2, [r3, #24]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 020c 	bic.w	r2, r2, #12
 8004530:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6999      	ldr	r1, [r3, #24]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	619a      	str	r2, [r3, #24]
 8004544:	e0d0      	b.n	80046e8 <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b04      	cmp	r3, #4
 800454a:	d13f      	bne.n	80045cc <HAL_TIM_IC_ConfigChannel+0x1c4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a3d      	ldr	r2, [pc, #244]	; (8004648 <HAL_TIM_IC_ConfigChannel+0x240>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d01d      	beq.n	8004592 <HAL_TIM_IC_ConfigChannel+0x18a>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455e:	d018      	beq.n	8004592 <HAL_TIM_IC_ConfigChannel+0x18a>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a39      	ldr	r2, [pc, #228]	; (800464c <HAL_TIM_IC_ConfigChannel+0x244>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d013      	beq.n	8004592 <HAL_TIM_IC_ConfigChannel+0x18a>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a38      	ldr	r2, [pc, #224]	; (8004650 <HAL_TIM_IC_ConfigChannel+0x248>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00e      	beq.n	8004592 <HAL_TIM_IC_ConfigChannel+0x18a>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a36      	ldr	r2, [pc, #216]	; (8004654 <HAL_TIM_IC_ConfigChannel+0x24c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d009      	beq.n	8004592 <HAL_TIM_IC_ConfigChannel+0x18a>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a35      	ldr	r2, [pc, #212]	; (8004658 <HAL_TIM_IC_ConfigChannel+0x250>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d004      	beq.n	8004592 <HAL_TIM_IC_ConfigChannel+0x18a>
 8004588:	f241 012c 	movw	r1, #4140	; 0x102c
 800458c:	4835      	ldr	r0, [pc, #212]	; (8004664 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800458e:	f7fc fa46 	bl	8000a1e <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	6819      	ldr	r1, [r3, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f000 f9c5 	bl	8004930 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699a      	ldr	r2, [r3, #24]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6999      	ldr	r1, [r3, #24]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	021a      	lsls	r2, r3, #8
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	619a      	str	r2, [r3, #24]
 80045ca:	e08d      	b.n	80046e8 <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else if (Channel == TIM_CHANNEL_3)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d14a      	bne.n	8004668 <HAL_TIM_IC_ConfigChannel+0x260>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <HAL_TIM_IC_ConfigChannel+0x240>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d018      	beq.n	800460e <HAL_TIM_IC_ConfigChannel+0x206>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e4:	d013      	beq.n	800460e <HAL_TIM_IC_ConfigChannel+0x206>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a18      	ldr	r2, [pc, #96]	; (800464c <HAL_TIM_IC_ConfigChannel+0x244>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00e      	beq.n	800460e <HAL_TIM_IC_ConfigChannel+0x206>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a16      	ldr	r2, [pc, #88]	; (8004650 <HAL_TIM_IC_ConfigChannel+0x248>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d009      	beq.n	800460e <HAL_TIM_IC_ConfigChannel+0x206>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a15      	ldr	r2, [pc, #84]	; (8004654 <HAL_TIM_IC_ConfigChannel+0x24c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d004      	beq.n	800460e <HAL_TIM_IC_ConfigChannel+0x206>
 8004604:	f241 013c 	movw	r1, #4156	; 0x103c
 8004608:	4816      	ldr	r0, [pc, #88]	; (8004664 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800460a:	f7fc fa08 	bl	8000a1e <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	6819      	ldr	r1, [r3, #0]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f000 f9c4 	bl	80049aa <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 020c 	bic.w	r2, r2, #12
 8004630:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69d9      	ldr	r1, [r3, #28]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	61da      	str	r2, [r3, #28]
 8004644:	e050      	b.n	80046e8 <HAL_TIM_IC_ConfigChannel+0x2e0>
 8004646:	bf00      	nop
 8004648:	40010000 	.word	0x40010000
 800464c:	40000400 	.word	0x40000400
 8004650:	40000800 	.word	0x40000800
 8004654:	40000c00 	.word	0x40000c00
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800
 8004664:	080093d0 	.word	0x080093d0
  }
  else if (Channel == TIM_CHANNEL_4)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b0c      	cmp	r3, #12
 800466c:	d13a      	bne.n	80046e4 <HAL_TIM_IC_ConfigChannel+0x2dc>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a22      	ldr	r2, [pc, #136]	; (80046fc <HAL_TIM_IC_ConfigChannel+0x2f4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d018      	beq.n	80046aa <HAL_TIM_IC_ConfigChannel+0x2a2>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004680:	d013      	beq.n	80046aa <HAL_TIM_IC_ConfigChannel+0x2a2>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1e      	ldr	r2, [pc, #120]	; (8004700 <HAL_TIM_IC_ConfigChannel+0x2f8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00e      	beq.n	80046aa <HAL_TIM_IC_ConfigChannel+0x2a2>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1c      	ldr	r2, [pc, #112]	; (8004704 <HAL_TIM_IC_ConfigChannel+0x2fc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d009      	beq.n	80046aa <HAL_TIM_IC_ConfigChannel+0x2a2>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1b      	ldr	r2, [pc, #108]	; (8004708 <HAL_TIM_IC_ConfigChannel+0x300>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d004      	beq.n	80046aa <HAL_TIM_IC_ConfigChannel+0x2a2>
 80046a0:	f241 014c 	movw	r1, #4172	; 0x104c
 80046a4:	4819      	ldr	r0, [pc, #100]	; (800470c <HAL_TIM_IC_ConfigChannel+0x304>)
 80046a6:	f7fc f9ba 	bl	8000a1e <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	6819      	ldr	r1, [r3, #0]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f000 f9b2 	bl	8004a22 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046cc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	69d9      	ldr	r1, [r3, #28]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	021a      	lsls	r2, r3, #8
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	61da      	str	r2, [r3, #28]
 80046e2:	e001      	b.n	80046e8 <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else
  {
    status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40010000 	.word	0x40010000
 8004700:	40000400 	.word	0x40000400
 8004704:	40000800 	.word	0x40000800
 8004708:	40000c00 	.word	0x40000c00
 800470c:	080093d0 	.word	0x080093d0

08004710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a34      	ldr	r2, [pc, #208]	; (8004844 <TIM_Base_SetConfig+0xe4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00f      	beq.n	8004798 <TIM_Base_SetConfig+0x38>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477e:	d00b      	beq.n	8004798 <TIM_Base_SetConfig+0x38>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a31      	ldr	r2, [pc, #196]	; (8004848 <TIM_Base_SetConfig+0xe8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d007      	beq.n	8004798 <TIM_Base_SetConfig+0x38>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a30      	ldr	r2, [pc, #192]	; (800484c <TIM_Base_SetConfig+0xec>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d003      	beq.n	8004798 <TIM_Base_SetConfig+0x38>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a2f      	ldr	r2, [pc, #188]	; (8004850 <TIM_Base_SetConfig+0xf0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d108      	bne.n	80047aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a25      	ldr	r2, [pc, #148]	; (8004844 <TIM_Base_SetConfig+0xe4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01b      	beq.n	80047ea <TIM_Base_SetConfig+0x8a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b8:	d017      	beq.n	80047ea <TIM_Base_SetConfig+0x8a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a22      	ldr	r2, [pc, #136]	; (8004848 <TIM_Base_SetConfig+0xe8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <TIM_Base_SetConfig+0x8a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a21      	ldr	r2, [pc, #132]	; (800484c <TIM_Base_SetConfig+0xec>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00f      	beq.n	80047ea <TIM_Base_SetConfig+0x8a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a20      	ldr	r2, [pc, #128]	; (8004850 <TIM_Base_SetConfig+0xf0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00b      	beq.n	80047ea <TIM_Base_SetConfig+0x8a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a1f      	ldr	r2, [pc, #124]	; (8004854 <TIM_Base_SetConfig+0xf4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d007      	beq.n	80047ea <TIM_Base_SetConfig+0x8a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a1e      	ldr	r2, [pc, #120]	; (8004858 <TIM_Base_SetConfig+0xf8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d003      	beq.n	80047ea <TIM_Base_SetConfig+0x8a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a1d      	ldr	r2, [pc, #116]	; (800485c <TIM_Base_SetConfig+0xfc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d108      	bne.n	80047fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a08      	ldr	r2, [pc, #32]	; (8004844 <TIM_Base_SetConfig+0xe4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d103      	bne.n	8004830 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	615a      	str	r2, [r3, #20]
}
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40010000 	.word	0x40010000
 8004848:	40000400 	.word	0x40000400
 800484c:	40000800 	.word	0x40000800
 8004850:	40000c00 	.word	0x40000c00
 8004854:	40014000 	.word	0x40014000
 8004858:	40014400 	.word	0x40014400
 800485c:	40014800 	.word	0x40014800

08004860 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	f023 0201 	bic.w	r2, r3, #1
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4a24      	ldr	r2, [pc, #144]	; (800491c <TIM_TI1_SetConfig+0xbc>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <TIM_TI1_SetConfig+0x56>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004894:	d00f      	beq.n	80048b6 <TIM_TI1_SetConfig+0x56>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4a21      	ldr	r2, [pc, #132]	; (8004920 <TIM_TI1_SetConfig+0xc0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00b      	beq.n	80048b6 <TIM_TI1_SetConfig+0x56>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4a20      	ldr	r2, [pc, #128]	; (8004924 <TIM_TI1_SetConfig+0xc4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d007      	beq.n	80048b6 <TIM_TI1_SetConfig+0x56>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4a1f      	ldr	r2, [pc, #124]	; (8004928 <TIM_TI1_SetConfig+0xc8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d003      	beq.n	80048b6 <TIM_TI1_SetConfig+0x56>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a1e      	ldr	r2, [pc, #120]	; (800492c <TIM_TI1_SetConfig+0xcc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d101      	bne.n	80048ba <TIM_TI1_SetConfig+0x5a>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <TIM_TI1_SetConfig+0x5c>
 80048ba:	2300      	movs	r3, #0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f023 0303 	bic.w	r3, r3, #3
 80048c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	e003      	b.n	80048da <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f043 0301 	orr.w	r3, r3, #1
 80048d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f023 030a 	bic.w	r3, r3, #10
 80048f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f003 030a 	and.w	r3, r3, #10
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	621a      	str	r2, [r3, #32]
}
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40010000 	.word	0x40010000
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800
 8004928:	40000c00 	.word	0x40000c00
 800492c:	40014000 	.word	0x40014000

08004930 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	f023 0210 	bic.w	r2, r3, #16
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800496e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	031b      	lsls	r3, r3, #12
 8004974:	b29b      	uxth	r3, r3
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004982:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b087      	sub	sp, #28
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0303 	bic.w	r3, r3, #3
 80049d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80049fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	621a      	str	r2, [r3, #32]
}
 8004a16:	bf00      	nop
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b087      	sub	sp, #28
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	607a      	str	r2, [r7, #4]
 8004a2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	031b      	lsls	r3, r3, #12
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004a74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	031b      	lsls	r3, r3, #12
 8004a7a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	621a      	str	r2, [r3, #32]
}
 8004a90:	bf00      	nop
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a55      	ldr	r2, [pc, #340]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d018      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab8:	d013      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a51      	ldr	r2, [pc, #324]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00e      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a4f      	ldr	r2, [pc, #316]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d009      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a4e      	ldr	r2, [pc, #312]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004ad8:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8004adc:	484c      	ldr	r0, [pc, #304]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8004ade:	f7fb ff9e 	bl	8000a1e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d020      	beq.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b10      	cmp	r3, #16
 8004af0:	d01c      	beq.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b20      	cmp	r3, #32
 8004af8:	d018      	beq.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b30      	cmp	r3, #48	; 0x30
 8004b00:	d014      	beq.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	d010      	beq.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b50      	cmp	r3, #80	; 0x50
 8004b10:	d00c      	beq.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b60      	cmp	r3, #96	; 0x60
 8004b18:	d008      	beq.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b70      	cmp	r3, #112	; 0x70
 8004b20:	d004      	beq.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004b22:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8004b26:	483a      	ldr	r0, [pc, #232]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8004b28:	f7fb ff79 	bl	8000a1e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b80      	cmp	r3, #128	; 0x80
 8004b32:	d008      	beq.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8004b3c:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8004b40:	4833      	ldr	r0, [pc, #204]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8004b42:	f7fb ff6c 	bl	8000a1e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e050      	b.n	8004bf6 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d018      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba0:	d013      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a17      	ldr	r2, [pc, #92]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00e      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a15      	ldr	r2, [pc, #84]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d009      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d004      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a13      	ldr	r2, [pc, #76]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d10c      	bne.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40010000 	.word	0x40010000
 8004c04:	40000400 	.word	0x40000400
 8004c08:	40000800 	.word	0x40000800
 8004c0c:	40000c00 	.word	0x40000c00
 8004c10:	08009444 	.word	0x08009444
 8004c14:	40014000 	.word	0x40014000

08004c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e0a0      	b.n	8004d94 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d02c      	beq.n	8004cb4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a4f      	ldr	r2, [pc, #316]	; (8004d9c <HAL_UART_Init+0x15c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00e      	beq.n	8004c82 <HAL_UART_Init+0x42>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a4d      	ldr	r2, [pc, #308]	; (8004da0 <HAL_UART_Init+0x160>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_UART_Init+0x42>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a4c      	ldr	r2, [pc, #304]	; (8004da4 <HAL_UART_Init+0x164>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_UART_Init+0x42>
 8004c78:	f240 1173 	movw	r1, #371	; 0x173
 8004c7c:	484a      	ldr	r0, [pc, #296]	; (8004da8 <HAL_UART_Init+0x168>)
 8004c7e:	f7fb fece 	bl	8000a1e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d028      	beq.n	8004cdc <HAL_UART_Init+0x9c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c92:	d023      	beq.n	8004cdc <HAL_UART_Init+0x9c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c9c:	d01e      	beq.n	8004cdc <HAL_UART_Init+0x9c>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ca6:	d019      	beq.n	8004cdc <HAL_UART_Init+0x9c>
 8004ca8:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8004cac:	483e      	ldr	r0, [pc, #248]	; (8004da8 <HAL_UART_Init+0x168>)
 8004cae:	f7fb feb6 	bl	8000a1e <assert_failed>
 8004cb2:	e013      	b.n	8004cdc <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a38      	ldr	r2, [pc, #224]	; (8004d9c <HAL_UART_Init+0x15c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00e      	beq.n	8004cdc <HAL_UART_Init+0x9c>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a37      	ldr	r2, [pc, #220]	; (8004da0 <HAL_UART_Init+0x160>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d009      	beq.n	8004cdc <HAL_UART_Init+0x9c>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a35      	ldr	r2, [pc, #212]	; (8004da4 <HAL_UART_Init+0x164>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <HAL_UART_Init+0x9c>
 8004cd2:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8004cd6:	4834      	ldr	r0, [pc, #208]	; (8004da8 <HAL_UART_Init+0x168>)
 8004cd8:	f7fb fea1 	bl	8000a1e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d009      	beq.n	8004cf8 <HAL_UART_Init+0xb8>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cec:	d004      	beq.n	8004cf8 <HAL_UART_Init+0xb8>
 8004cee:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8004cf2:	482d      	ldr	r0, [pc, #180]	; (8004da8 <HAL_UART_Init+0x168>)
 8004cf4:	f7fb fe93 	bl	8000a1e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d009      	beq.n	8004d14 <HAL_UART_Init+0xd4>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d08:	d004      	beq.n	8004d14 <HAL_UART_Init+0xd4>
 8004d0a:	f240 117b 	movw	r1, #379	; 0x17b
 8004d0e:	4826      	ldr	r0, [pc, #152]	; (8004da8 <HAL_UART_Init+0x168>)
 8004d10:	f7fb fe85 	bl	8000a1e <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d106      	bne.n	8004d2e <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7fc f8f5 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2224      	movs	r2, #36	; 0x24
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fde6 	bl	8005918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695a      	ldr	r2, [r3, #20]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40011000 	.word	0x40011000
 8004da0:	40004400 	.word	0x40004400
 8004da4:	40011400 	.word	0x40011400
 8004da8:	080094b8 	.word	0x080094b8

08004dac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	; 0x28
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d17c      	bne.n	8004ec6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_UART_Transmit+0x2c>
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e075      	b.n	8004ec8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_UART_Transmit+0x3e>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e06e      	b.n	8004ec8 <HAL_UART_Transmit+0x11c>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2221      	movs	r2, #33	; 0x21
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e00:	f7fc fb62 	bl	80014c8 <HAL_GetTick>
 8004e04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	88fa      	ldrh	r2, [r7, #6]
 8004e0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	88fa      	ldrh	r2, [r7, #6]
 8004e10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1a:	d108      	bne.n	8004e2e <HAL_UART_Transmit+0x82>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d104      	bne.n	8004e2e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	61bb      	str	r3, [r7, #24]
 8004e2c:	e003      	b.n	8004e36 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e3e:	e02a      	b.n	8004e96 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2200      	movs	r2, #0
 8004e48:	2180      	movs	r1, #128	; 0x80
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fb1e 	bl	800548c <UART_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e036      	b.n	8004ec8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10b      	bne.n	8004e78 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e6e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	3302      	adds	r3, #2
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	e007      	b.n	8004e88 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	781a      	ldrb	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	3301      	adds	r3, #1
 8004e86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1cf      	bne.n	8004e40 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2140      	movs	r1, #64	; 0x40
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 faee 	bl	800548c <UART_WaitOnFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e006      	b.n	8004ec8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e000      	b.n	8004ec8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ec6:	2302      	movs	r3, #2
  }
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3720      	adds	r7, #32
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d11d      	bne.n	8004f26 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_UART_Receive_IT+0x26>
 8004ef0:	88fb      	ldrh	r3, [r7, #6]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e016      	b.n	8004f28 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_UART_Receive_IT+0x38>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e00f      	b.n	8004f28 <HAL_UART_Receive_IT+0x58>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f16:	88fb      	ldrh	r3, [r7, #6]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 fb23 	bl	8005568 <UART_Start_Receive_IT>
 8004f22:	4603      	mov	r3, r0
 8004f24:	e000      	b.n	8004f28 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f26:	2302      	movs	r3, #2
  }
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b0ba      	sub	sp, #232	; 0xe8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10f      	bne.n	8004f96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_UART_IRQHandler+0x66>
 8004f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fc07 	bl	80057a2 <UART_Receive_IT>
      return;
 8004f94:	e256      	b.n	8005444 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 80de 	beq.w	800515c <HAL_UART_IRQHandler+0x22c>
 8004fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80d1 	beq.w	800515c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00b      	beq.n	8004fde <HAL_UART_IRQHandler+0xae>
 8004fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d005      	beq.n	8004fde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	f043 0201 	orr.w	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00b      	beq.n	8005002 <HAL_UART_IRQHandler+0xd2>
 8004fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f043 0202 	orr.w	r2, r3, #2
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00b      	beq.n	8005026 <HAL_UART_IRQHandler+0xf6>
 800500e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d005      	beq.n	8005026 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	f043 0204 	orr.w	r2, r3, #4
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d011      	beq.n	8005056 <HAL_UART_IRQHandler+0x126>
 8005032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d105      	bne.n	800504a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800503e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d005      	beq.n	8005056 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	f043 0208 	orr.w	r2, r3, #8
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 81ed 	beq.w	800543a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <HAL_UART_IRQHandler+0x14e>
 800506c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fb92 	bl	80057a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d103      	bne.n	80050aa <HAL_UART_IRQHandler+0x17a>
 80050a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d04f      	beq.n	800514a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fa9a 	bl	80055e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ba:	2b40      	cmp	r3, #64	; 0x40
 80050bc:	d141      	bne.n	8005142 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3314      	adds	r3, #20
 80050c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3314      	adds	r3, #20
 80050e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1d9      	bne.n	80050be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	2b00      	cmp	r3, #0
 8005110:	d013      	beq.n	800513a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	4a7d      	ldr	r2, [pc, #500]	; (800530c <HAL_UART_IRQHandler+0x3dc>)
 8005118:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	4618      	mov	r0, r3
 8005120:	f7fc fd9e 	bl	8001c60 <HAL_DMA_Abort_IT>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d016      	beq.n	8005158 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005134:	4610      	mov	r0, r2
 8005136:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005138:	e00e      	b.n	8005158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f990 	bl	8005460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005140:	e00a      	b.n	8005158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f98c 	bl	8005460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005148:	e006      	b.n	8005158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f988 	bl	8005460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005156:	e170      	b.n	800543a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005158:	bf00      	nop
    return;
 800515a:	e16e      	b.n	800543a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005160:	2b01      	cmp	r3, #1
 8005162:	f040 814a 	bne.w	80053fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8143 	beq.w	80053fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 813c 	beq.w	80053fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	f040 80b4 	bne.w	8005310 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8140 	beq.w	800543e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051c6:	429a      	cmp	r2, r3
 80051c8:	f080 8139 	bcs.w	800543e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051de:	f000 8088 	beq.w	80052f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	330c      	adds	r3, #12
 80051e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800520e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800521a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1d9      	bne.n	80051e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3314      	adds	r3, #20
 8005234:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005238:	e853 3f00 	ldrex	r3, [r3]
 800523c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800523e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005240:	f023 0301 	bic.w	r3, r3, #1
 8005244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3314      	adds	r3, #20
 800524e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005252:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005256:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800525a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e1      	bne.n	800522e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3314      	adds	r3, #20
 8005270:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800527a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800527c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3314      	adds	r3, #20
 800528a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800528e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005290:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005294:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800529c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e3      	bne.n	800526a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ba:	e853 3f00 	ldrex	r3, [r3]
 80052be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c2:	f023 0310 	bic.w	r3, r3, #16
 80052c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	330c      	adds	r3, #12
 80052d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80052d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e3      	bne.n	80052b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7fc fc47 	bl	8001b80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	b29b      	uxth	r3, r3
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f8b6 	bl	8005474 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005308:	e099      	b.n	800543e <HAL_UART_IRQHandler+0x50e>
 800530a:	bf00      	nop
 800530c:	080056ab 	.word	0x080056ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005318:	b29b      	uxth	r3, r3
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 808b 	beq.w	8005442 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800532c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8086 	beq.w	8005442 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	330c      	adds	r3, #12
 800533c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800534c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	330c      	adds	r3, #12
 8005356:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800535a:	647a      	str	r2, [r7, #68]	; 0x44
 800535c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e3      	bne.n	8005336 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3314      	adds	r3, #20
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	623b      	str	r3, [r7, #32]
   return(result);
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3314      	adds	r3, #20
 800538e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005392:	633a      	str	r2, [r7, #48]	; 0x30
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e3      	bne.n	800536e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0310 	bic.w	r3, r3, #16
 80053ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	330c      	adds	r3, #12
 80053d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053d8:	61fa      	str	r2, [r7, #28]
 80053da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	69b9      	ldr	r1, [r7, #24]
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	617b      	str	r3, [r7, #20]
   return(result);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e3      	bne.n	80053b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053f0:	4619      	mov	r1, r3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f83e 	bl	8005474 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053f8:	e023      	b.n	8005442 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <HAL_UART_IRQHandler+0x4ea>
 8005406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f95d 	bl	80056d2 <UART_Transmit_IT>
    return;
 8005418:	e014      	b.n	8005444 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800541a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00e      	beq.n	8005444 <HAL_UART_IRQHandler+0x514>
 8005426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800542a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	d008      	beq.n	8005444 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f99d 	bl	8005772 <UART_EndTransmit_IT>
    return;
 8005438:	e004      	b.n	8005444 <HAL_UART_IRQHandler+0x514>
    return;
 800543a:	bf00      	nop
 800543c:	e002      	b.n	8005444 <HAL_UART_IRQHandler+0x514>
      return;
 800543e:	bf00      	nop
 8005440:	e000      	b.n	8005444 <HAL_UART_IRQHandler+0x514>
      return;
 8005442:	bf00      	nop
  }
}
 8005444:	37e8      	adds	r7, #232	; 0xe8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop

0800544c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b090      	sub	sp, #64	; 0x40
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800549c:	e050      	b.n	8005540 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800549e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d04c      	beq.n	8005540 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d007      	beq.n	80054bc <UART_WaitOnFlagUntilTimeout+0x30>
 80054ac:	f7fc f80c 	bl	80014c8 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d241      	bcs.n	8005540 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	330c      	adds	r3, #12
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	330c      	adds	r3, #12
 80054da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054dc:	637a      	str	r2, [r7, #52]	; 0x34
 80054de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e5      	bne.n	80054bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3314      	adds	r3, #20
 80054f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	63bb      	str	r3, [r7, #56]	; 0x38
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3314      	adds	r3, #20
 800550e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005510:	623a      	str	r2, [r7, #32]
 8005512:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	69f9      	ldr	r1, [r7, #28]
 8005516:	6a3a      	ldr	r2, [r7, #32]
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	61bb      	str	r3, [r7, #24]
   return(result);
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e5      	bne.n	80054f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e00f      	b.n	8005560 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4013      	ands	r3, r2
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	429a      	cmp	r2, r3
 800554e:	bf0c      	ite	eq
 8005550:	2301      	moveq	r3, #1
 8005552:	2300      	movne	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	79fb      	ldrb	r3, [r7, #7]
 800555a:	429a      	cmp	r2, r3
 800555c:	d09f      	beq.n	800549e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3740      	adds	r7, #64	; 0x40
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	4613      	mov	r3, r2
 8005574:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	88fa      	ldrh	r2, [r7, #6]
 8005580:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	88fa      	ldrh	r2, [r7, #6]
 8005586:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2222      	movs	r2, #34	; 0x22
 8005592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695a      	ldr	r2, [r3, #20]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0201 	orr.w	r2, r2, #1
 80055c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0220 	orr.w	r2, r2, #32
 80055d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b095      	sub	sp, #84	; 0x54
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	330c      	adds	r3, #12
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	330c      	adds	r3, #12
 800560a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800560c:	643a      	str	r2, [r7, #64]	; 0x40
 800560e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005612:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e5      	bne.n	80055ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3314      	adds	r3, #20
 8005626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	64bb      	str	r3, [r7, #72]	; 0x48
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3314      	adds	r3, #20
 800563e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005640:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e5      	bne.n	8005620 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	2b01      	cmp	r3, #1
 800565a:	d119      	bne.n	8005690 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	60bb      	str	r3, [r7, #8]
   return(result);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f023 0310 	bic.w	r3, r3, #16
 8005672:	647b      	str	r3, [r7, #68]	; 0x44
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800567c:	61ba      	str	r2, [r7, #24]
 800567e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	6979      	ldr	r1, [r7, #20]
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	613b      	str	r3, [r7, #16]
   return(result);
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e5      	bne.n	800565c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800569e:	bf00      	nop
 80056a0:	3754      	adds	r7, #84	; 0x54
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f7ff fecb 	bl	8005460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ca:	bf00      	nop
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b085      	sub	sp, #20
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b21      	cmp	r3, #33	; 0x21
 80056e4:	d13e      	bne.n	8005764 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ee:	d114      	bne.n	800571a <UART_Transmit_IT+0x48>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d110      	bne.n	800571a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800570c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	1c9a      	adds	r2, r3, #2
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	621a      	str	r2, [r3, #32]
 8005718:	e008      	b.n	800572c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	1c59      	adds	r1, r3, #1
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6211      	str	r1, [r2, #32]
 8005724:	781a      	ldrb	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29b      	uxth	r3, r3
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	4619      	mov	r1, r3
 800573a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10f      	bne.n	8005760 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800574e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800575e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005760:	2300      	movs	r3, #0
 8005762:	e000      	b.n	8005766 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005764:	2302      	movs	r3, #2
  }
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005788:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff fe5a 	bl	800544c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b08c      	sub	sp, #48	; 0x30
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b22      	cmp	r3, #34	; 0x22
 80057b4:	f040 80ab 	bne.w	800590e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c0:	d117      	bne.n	80057f2 <UART_Receive_IT+0x50>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d113      	bne.n	80057f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ea:	1c9a      	adds	r2, r3, #2
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	629a      	str	r2, [r3, #40]	; 0x28
 80057f0:	e026      	b.n	8005840 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057f8:	2300      	movs	r3, #0
 80057fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005804:	d007      	beq.n	8005816 <UART_Receive_IT+0x74>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10a      	bne.n	8005824 <UART_Receive_IT+0x82>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	b2da      	uxtb	r2, r3
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	e008      	b.n	8005836 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005830:	b2da      	uxtb	r2, r3
 8005832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005834:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005844:	b29b      	uxth	r3, r3
 8005846:	3b01      	subs	r3, #1
 8005848:	b29b      	uxth	r3, r3
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	4619      	mov	r1, r3
 800584e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005850:	2b00      	cmp	r3, #0
 8005852:	d15a      	bne.n	800590a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0220 	bic.w	r2, r2, #32
 8005862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695a      	ldr	r2, [r3, #20]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0201 	bic.w	r2, r2, #1
 8005882:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	2b01      	cmp	r3, #1
 8005892:	d135      	bne.n	8005900 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	613b      	str	r3, [r7, #16]
   return(result);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f023 0310 	bic.w	r3, r3, #16
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	330c      	adds	r3, #12
 80058b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ba:	623a      	str	r2, [r7, #32]
 80058bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	69f9      	ldr	r1, [r7, #28]
 80058c0:	6a3a      	ldr	r2, [r7, #32]
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e5      	bne.n	800589a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b10      	cmp	r3, #16
 80058da:	d10a      	bne.n	80058f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff fdbb 	bl	8005474 <HAL_UARTEx_RxEventCallback>
 80058fe:	e002      	b.n	8005906 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7fa febf 	bl	8000684 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	e002      	b.n	8005910 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	e000      	b.n	8005910 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800590e:	2302      	movs	r3, #2
  }
}
 8005910:	4618      	mov	r0, r3
 8005912:	3730      	adds	r7, #48	; 0x30
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800591c:	b0c0      	sub	sp, #256	; 0x100
 800591e:	af00      	add	r7, sp, #0
 8005920:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	4bcf      	ldr	r3, [pc, #828]	; (8005c68 <UART_SetConfig+0x350>)
 800592c:	429a      	cmp	r2, r3
 800592e:	d904      	bls.n	800593a <UART_SetConfig+0x22>
 8005930:	f640 6161 	movw	r1, #3681	; 0xe61
 8005934:	48cd      	ldr	r0, [pc, #820]	; (8005c6c <UART_SetConfig+0x354>)
 8005936:	f7fb f872 	bl	8000a1e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800593a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <UART_SetConfig+0x42>
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800594e:	d004      	beq.n	800595a <UART_SetConfig+0x42>
 8005950:	f640 6162 	movw	r1, #3682	; 0xe62
 8005954:	48c5      	ldr	r0, [pc, #788]	; (8005c6c <UART_SetConfig+0x354>)
 8005956:	f7fb f862 	bl	8000a1e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800595a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d010      	beq.n	8005986 <UART_SetConfig+0x6e>
 8005964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596e:	d00a      	beq.n	8005986 <UART_SetConfig+0x6e>
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800597a:	d004      	beq.n	8005986 <UART_SetConfig+0x6e>
 800597c:	f640 6163 	movw	r1, #3683	; 0xe63
 8005980:	48ba      	ldr	r0, [pc, #744]	; (8005c6c <UART_SetConfig+0x354>)
 8005982:	f7fb f84c 	bl	8000a1e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598a:	695a      	ldr	r2, [r3, #20]
 800598c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8005990:	4013      	ands	r3, r2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d104      	bne.n	80059a0 <UART_SetConfig+0x88>
 8005996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d104      	bne.n	80059aa <UART_SetConfig+0x92>
 80059a0:	f640 6164 	movw	r1, #3684	; 0xe64
 80059a4:	48b1      	ldr	r0, [pc, #708]	; (8005c6c <UART_SetConfig+0x354>)
 80059a6:	f7fb f83a 	bl	8000a1e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ba:	68d9      	ldr	r1, [r3, #12]
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	ea40 0301 	orr.w	r3, r0, r1
 80059c6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	431a      	orrs	r2, r3
 80059d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	431a      	orrs	r2, r3
 80059de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059f6:	f021 010c 	bic.w	r1, r1, #12
 80059fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a04:	430b      	orrs	r3, r1
 8005a06:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a18:	6999      	ldr	r1, [r3, #24]
 8005a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	ea40 0301 	orr.w	r3, r0, r1
 8005a24:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	4b90      	ldr	r3, [pc, #576]	; (8005c70 <UART_SetConfig+0x358>)
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d005      	beq.n	8005a3e <UART_SetConfig+0x126>
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	4b8e      	ldr	r3, [pc, #568]	; (8005c74 <UART_SetConfig+0x35c>)
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d104      	bne.n	8005a48 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a3e:	f7fd fdc3 	bl	80035c8 <HAL_RCC_GetPCLK2Freq>
 8005a42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a46:	e003      	b.n	8005a50 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a48:	f7fd fdaa 	bl	80035a0 <HAL_RCC_GetPCLK1Freq>
 8005a4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a5a:	f040 810f 	bne.w	8005c7c <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a68:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a6c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a70:	4622      	mov	r2, r4
 8005a72:	462b      	mov	r3, r5
 8005a74:	1891      	adds	r1, r2, r2
 8005a76:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a78:	415b      	adcs	r3, r3
 8005a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a80:	4621      	mov	r1, r4
 8005a82:	eb12 0801 	adds.w	r8, r2, r1
 8005a86:	4629      	mov	r1, r5
 8005a88:	eb43 0901 	adc.w	r9, r3, r1
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aa0:	4690      	mov	r8, r2
 8005aa2:	4699      	mov	r9, r3
 8005aa4:	4623      	mov	r3, r4
 8005aa6:	eb18 0303 	adds.w	r3, r8, r3
 8005aaa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005aae:	462b      	mov	r3, r5
 8005ab0:	eb49 0303 	adc.w	r3, r9, r3
 8005ab4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ac4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ac8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005acc:	460b      	mov	r3, r1
 8005ace:	18db      	adds	r3, r3, r3
 8005ad0:	653b      	str	r3, [r7, #80]	; 0x50
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	eb42 0303 	adc.w	r3, r2, r3
 8005ad8:	657b      	str	r3, [r7, #84]	; 0x54
 8005ada:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ade:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ae2:	f7fa fb7d 	bl	80001e0 <__aeabi_uldivmod>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4b63      	ldr	r3, [pc, #396]	; (8005c78 <UART_SetConfig+0x360>)
 8005aec:	fba3 2302 	umull	r2, r3, r3, r2
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	011c      	lsls	r4, r3, #4
 8005af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005afe:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b02:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b06:	4642      	mov	r2, r8
 8005b08:	464b      	mov	r3, r9
 8005b0a:	1891      	adds	r1, r2, r2
 8005b0c:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b0e:	415b      	adcs	r3, r3
 8005b10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b16:	4641      	mov	r1, r8
 8005b18:	eb12 0a01 	adds.w	sl, r2, r1
 8005b1c:	4649      	mov	r1, r9
 8005b1e:	eb43 0b01 	adc.w	fp, r3, r1
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b36:	4692      	mov	sl, r2
 8005b38:	469b      	mov	fp, r3
 8005b3a:	4643      	mov	r3, r8
 8005b3c:	eb1a 0303 	adds.w	r3, sl, r3
 8005b40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b44:	464b      	mov	r3, r9
 8005b46:	eb4b 0303 	adc.w	r3, fp, r3
 8005b4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b5a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b62:	460b      	mov	r3, r1
 8005b64:	18db      	adds	r3, r3, r3
 8005b66:	643b      	str	r3, [r7, #64]	; 0x40
 8005b68:	4613      	mov	r3, r2
 8005b6a:	eb42 0303 	adc.w	r3, r2, r3
 8005b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b74:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b78:	f7fa fb32 	bl	80001e0 <__aeabi_uldivmod>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4611      	mov	r1, r2
 8005b82:	4b3d      	ldr	r3, [pc, #244]	; (8005c78 <UART_SetConfig+0x360>)
 8005b84:	fba3 2301 	umull	r2, r3, r3, r1
 8005b88:	095b      	lsrs	r3, r3, #5
 8005b8a:	2264      	movs	r2, #100	; 0x64
 8005b8c:	fb02 f303 	mul.w	r3, r2, r3
 8005b90:	1acb      	subs	r3, r1, r3
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b98:	4b37      	ldr	r3, [pc, #220]	; (8005c78 <UART_SetConfig+0x360>)
 8005b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ba6:	441c      	add	r4, r3
 8005ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bac:	2200      	movs	r2, #0
 8005bae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bb2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bb6:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bba:	4642      	mov	r2, r8
 8005bbc:	464b      	mov	r3, r9
 8005bbe:	1891      	adds	r1, r2, r2
 8005bc0:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bc2:	415b      	adcs	r3, r3
 8005bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bca:	4641      	mov	r1, r8
 8005bcc:	1851      	adds	r1, r2, r1
 8005bce:	6339      	str	r1, [r7, #48]	; 0x30
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	414b      	adcs	r3, r1
 8005bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005be2:	4659      	mov	r1, fp
 8005be4:	00cb      	lsls	r3, r1, #3
 8005be6:	4651      	mov	r1, sl
 8005be8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bec:	4651      	mov	r1, sl
 8005bee:	00ca      	lsls	r2, r1, #3
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	4642      	mov	r2, r8
 8005bf8:	189b      	adds	r3, r3, r2
 8005bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bfe:	464b      	mov	r3, r9
 8005c00:	460a      	mov	r2, r1
 8005c02:	eb42 0303 	adc.w	r3, r2, r3
 8005c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c16:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c1a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c1e:	460b      	mov	r3, r1
 8005c20:	18db      	adds	r3, r3, r3
 8005c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c24:	4613      	mov	r3, r2
 8005c26:	eb42 0303 	adc.w	r3, r2, r3
 8005c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c30:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c34:	f7fa fad4 	bl	80001e0 <__aeabi_uldivmod>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <UART_SetConfig+0x360>)
 8005c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	2164      	movs	r1, #100	; 0x64
 8005c46:	fb01 f303 	mul.w	r3, r1, r3
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	3332      	adds	r3, #50	; 0x32
 8005c50:	4a09      	ldr	r2, [pc, #36]	; (8005c78 <UART_SetConfig+0x360>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	f003 0207 	and.w	r2, r3, #7
 8005c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4422      	add	r2, r4
 8005c64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c66:	e108      	b.n	8005e7a <UART_SetConfig+0x562>
 8005c68:	00a037a0 	.word	0x00a037a0
 8005c6c:	080094b8 	.word	0x080094b8
 8005c70:	40011000 	.word	0x40011000
 8005c74:	40011400 	.word	0x40011400
 8005c78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c80:	2200      	movs	r2, #0
 8005c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c8e:	4642      	mov	r2, r8
 8005c90:	464b      	mov	r3, r9
 8005c92:	1891      	adds	r1, r2, r2
 8005c94:	6239      	str	r1, [r7, #32]
 8005c96:	415b      	adcs	r3, r3
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c9e:	4641      	mov	r1, r8
 8005ca0:	1854      	adds	r4, r2, r1
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	eb43 0501 	adc.w	r5, r3, r1
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	00eb      	lsls	r3, r5, #3
 8005cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cb6:	00e2      	lsls	r2, r4, #3
 8005cb8:	4614      	mov	r4, r2
 8005cba:	461d      	mov	r5, r3
 8005cbc:	4643      	mov	r3, r8
 8005cbe:	18e3      	adds	r3, r4, r3
 8005cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cc4:	464b      	mov	r3, r9
 8005cc6:	eb45 0303 	adc.w	r3, r5, r3
 8005cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cde:	f04f 0200 	mov.w	r2, #0
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cea:	4629      	mov	r1, r5
 8005cec:	008b      	lsls	r3, r1, #2
 8005cee:	4621      	mov	r1, r4
 8005cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	008a      	lsls	r2, r1, #2
 8005cf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005cfc:	f7fa fa70 	bl	80001e0 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4b60      	ldr	r3, [pc, #384]	; (8005e88 <UART_SetConfig+0x570>)
 8005d06:	fba3 2302 	umull	r2, r3, r3, r2
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	011c      	lsls	r4, r3, #4
 8005d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d20:	4642      	mov	r2, r8
 8005d22:	464b      	mov	r3, r9
 8005d24:	1891      	adds	r1, r2, r2
 8005d26:	61b9      	str	r1, [r7, #24]
 8005d28:	415b      	adcs	r3, r3
 8005d2a:	61fb      	str	r3, [r7, #28]
 8005d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d30:	4641      	mov	r1, r8
 8005d32:	1851      	adds	r1, r2, r1
 8005d34:	6139      	str	r1, [r7, #16]
 8005d36:	4649      	mov	r1, r9
 8005d38:	414b      	adcs	r3, r1
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d48:	4659      	mov	r1, fp
 8005d4a:	00cb      	lsls	r3, r1, #3
 8005d4c:	4651      	mov	r1, sl
 8005d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d52:	4651      	mov	r1, sl
 8005d54:	00ca      	lsls	r2, r1, #3
 8005d56:	4610      	mov	r0, r2
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	189b      	adds	r3, r3, r2
 8005d60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d64:	464b      	mov	r3, r9
 8005d66:	460a      	mov	r2, r1
 8005d68:	eb42 0303 	adc.w	r3, r2, r3
 8005d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d88:	4649      	mov	r1, r9
 8005d8a:	008b      	lsls	r3, r1, #2
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d92:	4641      	mov	r1, r8
 8005d94:	008a      	lsls	r2, r1, #2
 8005d96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d9a:	f7fa fa21 	bl	80001e0 <__aeabi_uldivmod>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4b39      	ldr	r3, [pc, #228]	; (8005e88 <UART_SetConfig+0x570>)
 8005da4:	fba3 1302 	umull	r1, r3, r3, r2
 8005da8:	095b      	lsrs	r3, r3, #5
 8005daa:	2164      	movs	r1, #100	; 0x64
 8005dac:	fb01 f303 	mul.w	r3, r1, r3
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	3332      	adds	r3, #50	; 0x32
 8005db6:	4a34      	ldr	r2, [pc, #208]	; (8005e88 <UART_SetConfig+0x570>)
 8005db8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dc2:	441c      	add	r4, r3
 8005dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dc8:	2200      	movs	r2, #0
 8005dca:	673b      	str	r3, [r7, #112]	; 0x70
 8005dcc:	677a      	str	r2, [r7, #116]	; 0x74
 8005dce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005dd2:	4642      	mov	r2, r8
 8005dd4:	464b      	mov	r3, r9
 8005dd6:	1891      	adds	r1, r2, r2
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	415b      	adcs	r3, r3
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005de2:	4641      	mov	r1, r8
 8005de4:	1851      	adds	r1, r2, r1
 8005de6:	6039      	str	r1, [r7, #0]
 8005de8:	4649      	mov	r1, r9
 8005dea:	414b      	adcs	r3, r1
 8005dec:	607b      	str	r3, [r7, #4]
 8005dee:	f04f 0200 	mov.w	r2, #0
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dfa:	4659      	mov	r1, fp
 8005dfc:	00cb      	lsls	r3, r1, #3
 8005dfe:	4651      	mov	r1, sl
 8005e00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e04:	4651      	mov	r1, sl
 8005e06:	00ca      	lsls	r2, r1, #3
 8005e08:	4610      	mov	r0, r2
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	4642      	mov	r2, r8
 8005e10:	189b      	adds	r3, r3, r2
 8005e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e14:	464b      	mov	r3, r9
 8005e16:	460a      	mov	r2, r1
 8005e18:	eb42 0303 	adc.w	r3, r2, r3
 8005e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	663b      	str	r3, [r7, #96]	; 0x60
 8005e28:	667a      	str	r2, [r7, #100]	; 0x64
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e36:	4649      	mov	r1, r9
 8005e38:	008b      	lsls	r3, r1, #2
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e40:	4641      	mov	r1, r8
 8005e42:	008a      	lsls	r2, r1, #2
 8005e44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e48:	f7fa f9ca 	bl	80001e0 <__aeabi_uldivmod>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4b0d      	ldr	r3, [pc, #52]	; (8005e88 <UART_SetConfig+0x570>)
 8005e52:	fba3 1302 	umull	r1, r3, r3, r2
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	2164      	movs	r1, #100	; 0x64
 8005e5a:	fb01 f303 	mul.w	r3, r1, r3
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	3332      	adds	r3, #50	; 0x32
 8005e64:	4a08      	ldr	r2, [pc, #32]	; (8005e88 <UART_SetConfig+0x570>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	f003 020f 	and.w	r2, r3, #15
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4422      	add	r2, r4
 8005e78:	609a      	str	r2, [r3, #8]
}
 8005e7a:	bf00      	nop
 8005e7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e80:	46bd      	mov	sp, r7
 8005e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e86:	bf00      	nop
 8005e88:	51eb851f 	.word	0x51eb851f

08005e8c <__NVIC_SetPriority>:
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	6039      	str	r1, [r7, #0]
 8005e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	db0a      	blt.n	8005eb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	490c      	ldr	r1, [pc, #48]	; (8005ed8 <__NVIC_SetPriority+0x4c>)
 8005ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eaa:	0112      	lsls	r2, r2, #4
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	440b      	add	r3, r1
 8005eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005eb4:	e00a      	b.n	8005ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	4908      	ldr	r1, [pc, #32]	; (8005edc <__NVIC_SetPriority+0x50>)
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	3b04      	subs	r3, #4
 8005ec4:	0112      	lsls	r2, r2, #4
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	440b      	add	r3, r1
 8005eca:	761a      	strb	r2, [r3, #24]
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	e000e100 	.word	0xe000e100
 8005edc:	e000ed00 	.word	0xe000ed00

08005ee0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <SysTick_Handler+0x1c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ee8:	f002 facc 	bl	8008484 <xTaskGetSchedulerState>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d001      	beq.n	8005ef6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005ef2:	f000 fec9 	bl	8006c88 <xPortSysTickHandler>
  }
}
 8005ef6:	bf00      	nop
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	e000e010 	.word	0xe000e010

08005f00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f04:	2100      	movs	r1, #0
 8005f06:	f06f 0004 	mvn.w	r0, #4
 8005f0a:	f7ff ffbf 	bl	8005e8c <__NVIC_SetPriority>
#endif
}
 8005f0e:	bf00      	nop
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f1a:	f3ef 8305 	mrs	r3, IPSR
 8005f1e:	603b      	str	r3, [r7, #0]
  return(result);
 8005f20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f26:	f06f 0305 	mvn.w	r3, #5
 8005f2a:	607b      	str	r3, [r7, #4]
 8005f2c:	e00c      	b.n	8005f48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <osKernelInitialize+0x44>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d105      	bne.n	8005f42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f36:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <osKernelInitialize+0x44>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	607b      	str	r3, [r7, #4]
 8005f40:	e002      	b.n	8005f48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f42:	f04f 33ff 	mov.w	r3, #4294967295
 8005f46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f48:	687b      	ldr	r3, [r7, #4]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	200002e8 	.word	0x200002e8

08005f5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f62:	f3ef 8305 	mrs	r3, IPSR
 8005f66:	603b      	str	r3, [r7, #0]
  return(result);
 8005f68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f6e:	f06f 0305 	mvn.w	r3, #5
 8005f72:	607b      	str	r3, [r7, #4]
 8005f74:	e010      	b.n	8005f98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f76:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <osKernelStart+0x48>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d109      	bne.n	8005f92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f7e:	f7ff ffbf 	bl	8005f00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f82:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <osKernelStart+0x48>)
 8005f84:	2202      	movs	r2, #2
 8005f86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f88:	f001 fe20 	bl	8007bcc <vTaskStartScheduler>
      stat = osOK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	607b      	str	r3, [r7, #4]
 8005f90:	e002      	b.n	8005f98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f92:	f04f 33ff 	mov.w	r3, #4294967295
 8005f96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f98:	687b      	ldr	r3, [r7, #4]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	200002e8 	.word	0x200002e8

08005fa8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08e      	sub	sp, #56	; 0x38
 8005fac:	af04      	add	r7, sp, #16
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fb8:	f3ef 8305 	mrs	r3, IPSR
 8005fbc:	617b      	str	r3, [r7, #20]
  return(result);
 8005fbe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d17e      	bne.n	80060c2 <osThreadNew+0x11a>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d07b      	beq.n	80060c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005fce:	2318      	movs	r3, #24
 8005fd0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d045      	beq.n	800606e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <osThreadNew+0x48>
        name = attr->name;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d008      	beq.n	8006016 <osThreadNew+0x6e>
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2b38      	cmp	r3, #56	; 0x38
 8006008:	d805      	bhi.n	8006016 <osThreadNew+0x6e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <osThreadNew+0x72>
        return (NULL);
 8006016:	2300      	movs	r3, #0
 8006018:	e054      	b.n	80060c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	089b      	lsrs	r3, r3, #2
 8006028:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00e      	beq.n	8006050 <osThreadNew+0xa8>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	2bbb      	cmp	r3, #187	; 0xbb
 8006038:	d90a      	bls.n	8006050 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800603e:	2b00      	cmp	r3, #0
 8006040:	d006      	beq.n	8006050 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <osThreadNew+0xa8>
        mem = 1;
 800604a:	2301      	movs	r3, #1
 800604c:	61bb      	str	r3, [r7, #24]
 800604e:	e010      	b.n	8006072 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10c      	bne.n	8006072 <osThreadNew+0xca>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d108      	bne.n	8006072 <osThreadNew+0xca>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d104      	bne.n	8006072 <osThreadNew+0xca>
          mem = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e001      	b.n	8006072 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d110      	bne.n	800609a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006080:	9202      	str	r2, [sp, #8]
 8006082:	9301      	str	r3, [sp, #4]
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6a3a      	ldr	r2, [r7, #32]
 800608c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f001 fbb0 	bl	80077f4 <xTaskCreateStatic>
 8006094:	4603      	mov	r3, r0
 8006096:	613b      	str	r3, [r7, #16]
 8006098:	e013      	b.n	80060c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d110      	bne.n	80060c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	f107 0310 	add.w	r3, r7, #16
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f001 fbfb 	bl	80078ae <xTaskCreate>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d001      	beq.n	80060c2 <osThreadNew+0x11a>
            hTask = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80060c2:	693b      	ldr	r3, [r7, #16]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3728      	adds	r7, #40	; 0x28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060d4:	f3ef 8305 	mrs	r3, IPSR
 80060d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80060da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <osDelay+0x1c>
    stat = osErrorISR;
 80060e0:	f06f 0305 	mvn.w	r3, #5
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	e007      	b.n	80060f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 fd36 	bl	8007b64 <vTaskDelay>
    }
  }

  return (stat);
 80060f8:	68fb      	ldr	r3, [r7, #12]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f002 fe82 	bl	8008e14 <pvTimerGetTimerID>
 8006110:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d005      	beq.n	8006124 <TimerCallback+0x22>
    callb->func (callb->arg);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	6852      	ldr	r2, [r2, #4]
 8006120:	4610      	mov	r0, r2
 8006122:	4798      	blx	r3
  }
}
 8006124:	bf00      	nop
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800612c:	b580      	push	{r7, lr}
 800612e:	b08c      	sub	sp, #48	; 0x30
 8006130:	af02      	add	r7, sp, #8
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	607a      	str	r2, [r7, #4]
 8006136:	603b      	str	r3, [r7, #0]
 8006138:	460b      	mov	r3, r1
 800613a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800613c:	2300      	movs	r3, #0
 800613e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006140:	f3ef 8305 	mrs	r3, IPSR
 8006144:	613b      	str	r3, [r7, #16]
  return(result);
 8006146:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006148:	2b00      	cmp	r3, #0
 800614a:	d163      	bne.n	8006214 <osTimerNew+0xe8>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d060      	beq.n	8006214 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006152:	2008      	movs	r0, #8
 8006154:	f000 f93c 	bl	80063d0 <pvPortMalloc>
 8006158:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d059      	beq.n	8006214 <osTimerNew+0xe8>
      callb->func = func;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800616c:	7afb      	ldrb	r3, [r7, #11]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d102      	bne.n	8006178 <osTimerNew+0x4c>
        reload = pdFALSE;
 8006172:	2300      	movs	r3, #0
 8006174:	61fb      	str	r3, [r7, #28]
 8006176:	e001      	b.n	800617c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006178:	2301      	movs	r3, #1
 800617a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800617c:	f04f 33ff 	mov.w	r3, #4294967295
 8006180:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006182:	2300      	movs	r3, #0
 8006184:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01c      	beq.n	80061c6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <osTimerNew+0x6e>
          name = attr->name;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d006      	beq.n	80061b0 <osTimerNew+0x84>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	2b2b      	cmp	r3, #43	; 0x2b
 80061a8:	d902      	bls.n	80061b0 <osTimerNew+0x84>
          mem = 1;
 80061aa:	2301      	movs	r3, #1
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	e00c      	b.n	80061ca <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d108      	bne.n	80061ca <osTimerNew+0x9e>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <osTimerNew+0x9e>
            mem = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61bb      	str	r3, [r7, #24]
 80061c4:	e001      	b.n	80061ca <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d10c      	bne.n	80061ea <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	9301      	str	r3, [sp, #4]
 80061d6:	4b12      	ldr	r3, [pc, #72]	; (8006220 <osTimerNew+0xf4>)
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	69fa      	ldr	r2, [r7, #28]
 80061de:	2101      	movs	r1, #1
 80061e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061e2:	f002 fa98 	bl	8008716 <xTimerCreateStatic>
 80061e6:	6238      	str	r0, [r7, #32]
 80061e8:	e00b      	b.n	8006202 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d108      	bne.n	8006202 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <osTimerNew+0xf4>)
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	2101      	movs	r1, #1
 80061fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061fc:	f002 fa6a 	bl	80086d4 <xTimerCreate>
 8006200:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d105      	bne.n	8006214 <osTimerNew+0xe8>
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <osTimerNew+0xe8>
        vPortFree (callb);
 800620e:	6978      	ldr	r0, [r7, #20]
 8006210:	f000 f9aa 	bl	8006568 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8006214:	6a3b      	ldr	r3, [r7, #32]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3728      	adds	r7, #40	; 0x28
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	08006103 	.word	0x08006103

08006224 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af02      	add	r7, sp, #8
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006232:	f3ef 8305 	mrs	r3, IPSR
 8006236:	60fb      	str	r3, [r7, #12]
  return(result);
 8006238:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <osTimerStart+0x22>
    stat = osErrorISR;
 800623e:	f06f 0305 	mvn.w	r3, #5
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	e017      	b.n	8006276 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d103      	bne.n	8006254 <osTimerStart+0x30>
    stat = osErrorParameter;
 800624c:	f06f 0303 	mvn.w	r3, #3
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	e010      	b.n	8006276 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8006254:	2300      	movs	r3, #0
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	2300      	movs	r3, #0
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	2104      	movs	r1, #4
 800625e:	6938      	ldr	r0, [r7, #16]
 8006260:	f002 fad2 	bl	8008808 <xTimerGenericCommand>
 8006264:	4603      	mov	r3, r0
 8006266:	2b01      	cmp	r3, #1
 8006268:	d102      	bne.n	8006270 <osTimerStart+0x4c>
      stat = osOK;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e002      	b.n	8006276 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8006270:	f06f 0302 	mvn.w	r3, #2
 8006274:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006276:	697b      	ldr	r3, [r7, #20]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	; 0x28
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800628c:	2300      	movs	r3, #0
 800628e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006290:	f3ef 8305 	mrs	r3, IPSR
 8006294:	613b      	str	r3, [r7, #16]
  return(result);
 8006296:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006298:	2b00      	cmp	r3, #0
 800629a:	d15f      	bne.n	800635c <osMessageQueueNew+0xdc>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d05c      	beq.n	800635c <osMessageQueueNew+0xdc>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d059      	beq.n	800635c <osMessageQueueNew+0xdc>
    mem = -1;
 80062a8:	f04f 33ff 	mov.w	r3, #4294967295
 80062ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d029      	beq.n	8006308 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d012      	beq.n	80062e2 <osMessageQueueNew+0x62>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	2b4f      	cmp	r3, #79	; 0x4f
 80062c2:	d90e      	bls.n	80062e2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	695a      	ldr	r2, [r3, #20]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	68b9      	ldr	r1, [r7, #8]
 80062d4:	fb01 f303 	mul.w	r3, r1, r3
 80062d8:	429a      	cmp	r2, r3
 80062da:	d302      	bcc.n	80062e2 <osMessageQueueNew+0x62>
        mem = 1;
 80062dc:	2301      	movs	r3, #1
 80062de:	61bb      	str	r3, [r7, #24]
 80062e0:	e014      	b.n	800630c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d110      	bne.n	800630c <osMessageQueueNew+0x8c>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10c      	bne.n	800630c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d108      	bne.n	800630c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <osMessageQueueNew+0x8c>
          mem = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	e001      	b.n	800630c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d10b      	bne.n	800632a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691a      	ldr	r2, [r3, #16]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2100      	movs	r1, #0
 800631c:	9100      	str	r1, [sp, #0]
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 fda9 	bl	8006e78 <xQueueGenericCreateStatic>
 8006326:	61f8      	str	r0, [r7, #28]
 8006328:	e008      	b.n	800633c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d105      	bne.n	800633c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006330:	2200      	movs	r2, #0
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 fe17 	bl	8006f68 <xQueueGenericCreate>
 800633a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00c      	beq.n	800635c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	e001      	b.n	8006354 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006354:	6979      	ldr	r1, [r7, #20]
 8006356:	69f8      	ldr	r0, [r7, #28]
 8006358:	f001 f9ee 	bl	8007738 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800635c:	69fb      	ldr	r3, [r7, #28]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3720      	adds	r7, #32
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4a07      	ldr	r2, [pc, #28]	; (8006394 <vApplicationGetIdleTaskMemory+0x2c>)
 8006378:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	4a06      	ldr	r2, [pc, #24]	; (8006398 <vApplicationGetIdleTaskMemory+0x30>)
 800637e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2280      	movs	r2, #128	; 0x80
 8006384:	601a      	str	r2, [r3, #0]
}
 8006386:	bf00      	nop
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	200002ec 	.word	0x200002ec
 8006398:	200003a8 	.word	0x200003a8

0800639c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4a07      	ldr	r2, [pc, #28]	; (80063c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80063ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4a06      	ldr	r2, [pc, #24]	; (80063cc <vApplicationGetTimerTaskMemory+0x30>)
 80063b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063ba:	601a      	str	r2, [r3, #0]
}
 80063bc:	bf00      	nop
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	200005a8 	.word	0x200005a8
 80063cc:	20000664 	.word	0x20000664

080063d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08a      	sub	sp, #40	; 0x28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063d8:	2300      	movs	r3, #0
 80063da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063dc:	f001 fc66 	bl	8007cac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063e0:	4b5b      	ldr	r3, [pc, #364]	; (8006550 <pvPortMalloc+0x180>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063e8:	f000 f920 	bl	800662c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063ec:	4b59      	ldr	r3, [pc, #356]	; (8006554 <pvPortMalloc+0x184>)
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4013      	ands	r3, r2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f040 8093 	bne.w	8006520 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01d      	beq.n	800643c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006400:	2208      	movs	r2, #8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4413      	add	r3, r2
 8006406:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	2b00      	cmp	r3, #0
 8006410:	d014      	beq.n	800643c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f023 0307 	bic.w	r3, r3, #7
 8006418:	3308      	adds	r3, #8
 800641a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006438:	bf00      	nop
 800643a:	e7fe      	b.n	800643a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d06e      	beq.n	8006520 <pvPortMalloc+0x150>
 8006442:	4b45      	ldr	r3, [pc, #276]	; (8006558 <pvPortMalloc+0x188>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	429a      	cmp	r2, r3
 800644a:	d869      	bhi.n	8006520 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800644c:	4b43      	ldr	r3, [pc, #268]	; (800655c <pvPortMalloc+0x18c>)
 800644e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006450:	4b42      	ldr	r3, [pc, #264]	; (800655c <pvPortMalloc+0x18c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006456:	e004      	b.n	8006462 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	429a      	cmp	r2, r3
 800646a:	d903      	bls.n	8006474 <pvPortMalloc+0xa4>
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1f1      	bne.n	8006458 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006474:	4b36      	ldr	r3, [pc, #216]	; (8006550 <pvPortMalloc+0x180>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800647a:	429a      	cmp	r2, r3
 800647c:	d050      	beq.n	8006520 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2208      	movs	r2, #8
 8006484:	4413      	add	r3, r2
 8006486:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	1ad2      	subs	r2, r2, r3
 8006498:	2308      	movs	r3, #8
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	429a      	cmp	r2, r3
 800649e:	d91f      	bls.n	80064e0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4413      	add	r3, r2
 80064a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <pvPortMalloc+0xf8>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	613b      	str	r3, [r7, #16]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	1ad2      	subs	r2, r2, r3
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064da:	69b8      	ldr	r0, [r7, #24]
 80064dc:	f000 f908 	bl	80066f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064e0:	4b1d      	ldr	r3, [pc, #116]	; (8006558 <pvPortMalloc+0x188>)
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	4a1b      	ldr	r2, [pc, #108]	; (8006558 <pvPortMalloc+0x188>)
 80064ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064ee:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <pvPortMalloc+0x188>)
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	4b1b      	ldr	r3, [pc, #108]	; (8006560 <pvPortMalloc+0x190>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d203      	bcs.n	8006502 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064fa:	4b17      	ldr	r3, [pc, #92]	; (8006558 <pvPortMalloc+0x188>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a18      	ldr	r2, [pc, #96]	; (8006560 <pvPortMalloc+0x190>)
 8006500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	4b13      	ldr	r3, [pc, #76]	; (8006554 <pvPortMalloc+0x184>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	431a      	orrs	r2, r3
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006516:	4b13      	ldr	r3, [pc, #76]	; (8006564 <pvPortMalloc+0x194>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3301      	adds	r3, #1
 800651c:	4a11      	ldr	r2, [pc, #68]	; (8006564 <pvPortMalloc+0x194>)
 800651e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006520:	f001 fbd2 	bl	8007cc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <pvPortMalloc+0x174>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	60fb      	str	r3, [r7, #12]
}
 8006540:	bf00      	nop
 8006542:	e7fe      	b.n	8006542 <pvPortMalloc+0x172>
	return pvReturn;
 8006544:	69fb      	ldr	r3, [r7, #28]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3728      	adds	r7, #40	; 0x28
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	2000466c 	.word	0x2000466c
 8006554:	20004680 	.word	0x20004680
 8006558:	20004670 	.word	0x20004670
 800655c:	20004664 	.word	0x20004664
 8006560:	20004674 	.word	0x20004674
 8006564:	20004678 	.word	0x20004678

08006568 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d04d      	beq.n	8006616 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800657a:	2308      	movs	r3, #8
 800657c:	425b      	negs	r3, r3
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4413      	add	r3, r2
 8006582:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	4b24      	ldr	r3, [pc, #144]	; (8006620 <vPortFree+0xb8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4013      	ands	r3, r2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <vPortFree+0x44>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	60fb      	str	r3, [r7, #12]
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <vPortFree+0x62>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	60bb      	str	r3, [r7, #8]
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	4b14      	ldr	r3, [pc, #80]	; (8006620 <vPortFree+0xb8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4013      	ands	r3, r2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01e      	beq.n	8006616 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d11a      	bne.n	8006616 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	4b0e      	ldr	r3, [pc, #56]	; (8006620 <vPortFree+0xb8>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	43db      	mvns	r3, r3
 80065ea:	401a      	ands	r2, r3
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065f0:	f001 fb5c 	bl	8007cac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <vPortFree+0xbc>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4413      	add	r3, r2
 80065fe:	4a09      	ldr	r2, [pc, #36]	; (8006624 <vPortFree+0xbc>)
 8006600:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006602:	6938      	ldr	r0, [r7, #16]
 8006604:	f000 f874 	bl	80066f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006608:	4b07      	ldr	r3, [pc, #28]	; (8006628 <vPortFree+0xc0>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3301      	adds	r3, #1
 800660e:	4a06      	ldr	r2, [pc, #24]	; (8006628 <vPortFree+0xc0>)
 8006610:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006612:	f001 fb59 	bl	8007cc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006616:	bf00      	nop
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20004680 	.word	0x20004680
 8006624:	20004670 	.word	0x20004670
 8006628:	2000467c 	.word	0x2000467c

0800662c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006632:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006636:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006638:	4b27      	ldr	r3, [pc, #156]	; (80066d8 <prvHeapInit+0xac>)
 800663a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00c      	beq.n	8006660 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3307      	adds	r3, #7
 800664a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0307 	bic.w	r3, r3, #7
 8006652:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	4a1f      	ldr	r2, [pc, #124]	; (80066d8 <prvHeapInit+0xac>)
 800665c:	4413      	add	r3, r2
 800665e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006664:	4a1d      	ldr	r2, [pc, #116]	; (80066dc <prvHeapInit+0xb0>)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800666a:	4b1c      	ldr	r3, [pc, #112]	; (80066dc <prvHeapInit+0xb0>)
 800666c:	2200      	movs	r2, #0
 800666e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	4413      	add	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006678:	2208      	movs	r2, #8
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	1a9b      	subs	r3, r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0307 	bic.w	r3, r3, #7
 8006686:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4a15      	ldr	r2, [pc, #84]	; (80066e0 <prvHeapInit+0xb4>)
 800668c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800668e:	4b14      	ldr	r3, [pc, #80]	; (80066e0 <prvHeapInit+0xb4>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2200      	movs	r2, #0
 8006694:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006696:	4b12      	ldr	r3, [pc, #72]	; (80066e0 <prvHeapInit+0xb4>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	1ad2      	subs	r2, r2, r3
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066ac:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <prvHeapInit+0xb4>)
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	4a0a      	ldr	r2, [pc, #40]	; (80066e4 <prvHeapInit+0xb8>)
 80066ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	4a09      	ldr	r2, [pc, #36]	; (80066e8 <prvHeapInit+0xbc>)
 80066c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066c4:	4b09      	ldr	r3, [pc, #36]	; (80066ec <prvHeapInit+0xc0>)
 80066c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066ca:	601a      	str	r2, [r3, #0]
}
 80066cc:	bf00      	nop
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	20000a64 	.word	0x20000a64
 80066dc:	20004664 	.word	0x20004664
 80066e0:	2000466c 	.word	0x2000466c
 80066e4:	20004674 	.word	0x20004674
 80066e8:	20004670 	.word	0x20004670
 80066ec:	20004680 	.word	0x20004680

080066f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066f8:	4b28      	ldr	r3, [pc, #160]	; (800679c <prvInsertBlockIntoFreeList+0xac>)
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	e002      	b.n	8006704 <prvInsertBlockIntoFreeList+0x14>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	d8f7      	bhi.n	80066fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	4413      	add	r3, r2
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	429a      	cmp	r2, r3
 800671e:	d108      	bne.n	8006732 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	441a      	add	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	441a      	add	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d118      	bne.n	8006778 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	4b15      	ldr	r3, [pc, #84]	; (80067a0 <prvInsertBlockIntoFreeList+0xb0>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d00d      	beq.n	800676e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	441a      	add	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	e008      	b.n	8006780 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800676e:	4b0c      	ldr	r3, [pc, #48]	; (80067a0 <prvInsertBlockIntoFreeList+0xb0>)
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e003      	b.n	8006780 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	429a      	cmp	r2, r3
 8006786:	d002      	beq.n	800678e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800678e:	bf00      	nop
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20004664 	.word	0x20004664
 80067a0:	2000466c 	.word	0x2000466c

080067a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f103 0208 	add.w	r2, r3, #8
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f04f 32ff 	mov.w	r2, #4294967295
 80067bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f103 0208 	add.w	r2, r3, #8
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f103 0208 	add.w	r2, r3, #8
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	601a      	str	r2, [r3, #0]
}
 800683a:	bf00      	nop
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006846:	b480      	push	{r7}
 8006848:	b085      	sub	sp, #20
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685c:	d103      	bne.n	8006866 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	e00c      	b.n	8006880 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	3308      	adds	r3, #8
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	e002      	b.n	8006874 <vListInsert+0x2e>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	429a      	cmp	r2, r3
 800687e:	d2f6      	bcs.n	800686e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	601a      	str	r2, [r3, #0]
}
 80068ac:	bf00      	nop
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6892      	ldr	r2, [r2, #8]
 80068ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6852      	ldr	r2, [r2, #4]
 80068d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d103      	bne.n	80068ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	1e5a      	subs	r2, r3, #1
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3b04      	subs	r3, #4
 800691c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3b04      	subs	r3, #4
 800692a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f023 0201 	bic.w	r2, r3, #1
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3b04      	subs	r3, #4
 800693a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800693c:	4a0c      	ldr	r2, [pc, #48]	; (8006970 <pxPortInitialiseStack+0x64>)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3b14      	subs	r3, #20
 8006946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3b04      	subs	r3, #4
 8006952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f06f 0202 	mvn.w	r2, #2
 800695a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3b20      	subs	r3, #32
 8006960:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006962:	68fb      	ldr	r3, [r7, #12]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	08006975 	.word	0x08006975

08006974 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800697a:	2300      	movs	r3, #0
 800697c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800697e:	4b12      	ldr	r3, [pc, #72]	; (80069c8 <prvTaskExitError+0x54>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006986:	d00a      	beq.n	800699e <prvTaskExitError+0x2a>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	60fb      	str	r3, [r7, #12]
}
 800699a:	bf00      	nop
 800699c:	e7fe      	b.n	800699c <prvTaskExitError+0x28>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	60bb      	str	r3, [r7, #8]
}
 80069b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069b2:	bf00      	nop
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0fc      	beq.n	80069b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	20000010 	.word	0x20000010
 80069cc:	00000000 	.word	0x00000000

080069d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069d0:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <pxCurrentTCBConst2>)
 80069d2:	6819      	ldr	r1, [r3, #0]
 80069d4:	6808      	ldr	r0, [r1, #0]
 80069d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069da:	f380 8809 	msr	PSP, r0
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f04f 0000 	mov.w	r0, #0
 80069e6:	f380 8811 	msr	BASEPRI, r0
 80069ea:	4770      	bx	lr
 80069ec:	f3af 8000 	nop.w

080069f0 <pxCurrentTCBConst2>:
 80069f0:	200046cc 	.word	0x200046cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop

080069f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069f8:	4808      	ldr	r0, [pc, #32]	; (8006a1c <prvPortStartFirstTask+0x24>)
 80069fa:	6800      	ldr	r0, [r0, #0]
 80069fc:	6800      	ldr	r0, [r0, #0]
 80069fe:	f380 8808 	msr	MSP, r0
 8006a02:	f04f 0000 	mov.w	r0, #0
 8006a06:	f380 8814 	msr	CONTROL, r0
 8006a0a:	b662      	cpsie	i
 8006a0c:	b661      	cpsie	f
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	df00      	svc	0
 8006a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a1a:	bf00      	nop
 8006a1c:	e000ed08 	.word	0xe000ed08

08006a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a26:	4b46      	ldr	r3, [pc, #280]	; (8006b40 <xPortStartScheduler+0x120>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a46      	ldr	r2, [pc, #280]	; (8006b44 <xPortStartScheduler+0x124>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d10a      	bne.n	8006a46 <xPortStartScheduler+0x26>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	613b      	str	r3, [r7, #16]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a46:	4b3e      	ldr	r3, [pc, #248]	; (8006b40 <xPortStartScheduler+0x120>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a3f      	ldr	r2, [pc, #252]	; (8006b48 <xPortStartScheduler+0x128>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d10a      	bne.n	8006a66 <xPortStartScheduler+0x46>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	60fb      	str	r3, [r7, #12]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a66:	4b39      	ldr	r3, [pc, #228]	; (8006b4c <xPortStartScheduler+0x12c>)
 8006a68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	22ff      	movs	r2, #255	; 0xff
 8006a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	4b31      	ldr	r3, [pc, #196]	; (8006b50 <xPortStartScheduler+0x130>)
 8006a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a8e:	4b31      	ldr	r3, [pc, #196]	; (8006b54 <xPortStartScheduler+0x134>)
 8006a90:	2207      	movs	r2, #7
 8006a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a94:	e009      	b.n	8006aaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006a96:	4b2f      	ldr	r3, [pc, #188]	; (8006b54 <xPortStartScheduler+0x134>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	4a2d      	ldr	r2, [pc, #180]	; (8006b54 <xPortStartScheduler+0x134>)
 8006a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab2:	2b80      	cmp	r3, #128	; 0x80
 8006ab4:	d0ef      	beq.n	8006a96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ab6:	4b27      	ldr	r3, [pc, #156]	; (8006b54 <xPortStartScheduler+0x134>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f1c3 0307 	rsb	r3, r3, #7
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d00a      	beq.n	8006ad8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	60bb      	str	r3, [r7, #8]
}
 8006ad4:	bf00      	nop
 8006ad6:	e7fe      	b.n	8006ad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ad8:	4b1e      	ldr	r3, [pc, #120]	; (8006b54 <xPortStartScheduler+0x134>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	4a1d      	ldr	r2, [pc, #116]	; (8006b54 <xPortStartScheduler+0x134>)
 8006ae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ae2:	4b1c      	ldr	r3, [pc, #112]	; (8006b54 <xPortStartScheduler+0x134>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006aea:	4a1a      	ldr	r2, [pc, #104]	; (8006b54 <xPortStartScheduler+0x134>)
 8006aec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006af6:	4b18      	ldr	r3, [pc, #96]	; (8006b58 <xPortStartScheduler+0x138>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a17      	ldr	r2, [pc, #92]	; (8006b58 <xPortStartScheduler+0x138>)
 8006afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b02:	4b15      	ldr	r3, [pc, #84]	; (8006b58 <xPortStartScheduler+0x138>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a14      	ldr	r2, [pc, #80]	; (8006b58 <xPortStartScheduler+0x138>)
 8006b08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b0e:	f000 f8dd 	bl	8006ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b12:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <xPortStartScheduler+0x13c>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b18:	f000 f8fc 	bl	8006d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b1c:	4b10      	ldr	r3, [pc, #64]	; (8006b60 <xPortStartScheduler+0x140>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a0f      	ldr	r2, [pc, #60]	; (8006b60 <xPortStartScheduler+0x140>)
 8006b22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b28:	f7ff ff66 	bl	80069f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b2c:	f001 fa34 	bl	8007f98 <vTaskSwitchContext>
	prvTaskExitError();
 8006b30:	f7ff ff20 	bl	8006974 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	e000ed00 	.word	0xe000ed00
 8006b44:	410fc271 	.word	0x410fc271
 8006b48:	410fc270 	.word	0x410fc270
 8006b4c:	e000e400 	.word	0xe000e400
 8006b50:	20004684 	.word	0x20004684
 8006b54:	20004688 	.word	0x20004688
 8006b58:	e000ed20 	.word	0xe000ed20
 8006b5c:	20000010 	.word	0x20000010
 8006b60:	e000ef34 	.word	0xe000ef34

08006b64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	607b      	str	r3, [r7, #4]
}
 8006b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b7e:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <vPortEnterCritical+0x58>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3301      	adds	r3, #1
 8006b84:	4a0d      	ldr	r2, [pc, #52]	; (8006bbc <vPortEnterCritical+0x58>)
 8006b86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b88:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <vPortEnterCritical+0x58>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d10f      	bne.n	8006bb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b90:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <vPortEnterCritical+0x5c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00a      	beq.n	8006bb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	603b      	str	r3, [r7, #0]
}
 8006bac:	bf00      	nop
 8006bae:	e7fe      	b.n	8006bae <vPortEnterCritical+0x4a>
	}
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	20000010 	.word	0x20000010
 8006bc0:	e000ed04 	.word	0xe000ed04

08006bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bca:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <vPortExitCritical+0x50>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10a      	bne.n	8006be8 <vPortExitCritical+0x24>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	607b      	str	r3, [r7, #4]
}
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006be8:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <vPortExitCritical+0x50>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	4a09      	ldr	r2, [pc, #36]	; (8006c14 <vPortExitCritical+0x50>)
 8006bf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006bf2:	4b08      	ldr	r3, [pc, #32]	; (8006c14 <vPortExitCritical+0x50>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d105      	bne.n	8006c06 <vPortExitCritical+0x42>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	20000010 	.word	0x20000010
	...

08006c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c20:	f3ef 8009 	mrs	r0, PSP
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <pxCurrentTCBConst>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	f01e 0f10 	tst.w	lr, #16
 8006c30:	bf08      	it	eq
 8006c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3a:	6010      	str	r0, [r2, #0]
 8006c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c44:	f380 8811 	msr	BASEPRI, r0
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f001 f9a2 	bl	8007f98 <vTaskSwitchContext>
 8006c54:	f04f 0000 	mov.w	r0, #0
 8006c58:	f380 8811 	msr	BASEPRI, r0
 8006c5c:	bc09      	pop	{r0, r3}
 8006c5e:	6819      	ldr	r1, [r3, #0]
 8006c60:	6808      	ldr	r0, [r1, #0]
 8006c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c66:	f01e 0f10 	tst.w	lr, #16
 8006c6a:	bf08      	it	eq
 8006c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c70:	f380 8809 	msr	PSP, r0
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	f3af 8000 	nop.w

08006c80 <pxCurrentTCBConst>:
 8006c80:	200046cc 	.word	0x200046cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop

08006c88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	607b      	str	r3, [r7, #4]
}
 8006ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ca2:	f001 f8bf 	bl	8007e24 <xTaskIncrementTick>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cac:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <xPortSysTickHandler+0x40>)
 8006cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	f383 8811 	msr	BASEPRI, r3
}
 8006cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <vPortSetupTimerInterrupt+0x34>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <vPortSetupTimerInterrupt+0x38>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <vPortSetupTimerInterrupt+0x3c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a0a      	ldr	r2, [pc, #40]	; (8006d0c <vPortSetupTimerInterrupt+0x40>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	099b      	lsrs	r3, r3, #6
 8006ce8:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <vPortSetupTimerInterrupt+0x44>)
 8006cea:	3b01      	subs	r3, #1
 8006cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cee:	4b04      	ldr	r3, [pc, #16]	; (8006d00 <vPortSetupTimerInterrupt+0x34>)
 8006cf0:	2207      	movs	r2, #7
 8006cf2:	601a      	str	r2, [r3, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	e000e010 	.word	0xe000e010
 8006d04:	e000e018 	.word	0xe000e018
 8006d08:	20000004 	.word	0x20000004
 8006d0c:	10624dd3 	.word	0x10624dd3
 8006d10:	e000e014 	.word	0xe000e014

08006d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d24 <vPortEnableVFP+0x10>
 8006d18:	6801      	ldr	r1, [r0, #0]
 8006d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d1e:	6001      	str	r1, [r0, #0]
 8006d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d22:	bf00      	nop
 8006d24:	e000ed88 	.word	0xe000ed88

08006d28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d2e:	f3ef 8305 	mrs	r3, IPSR
 8006d32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b0f      	cmp	r3, #15
 8006d38:	d914      	bls.n	8006d64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d3a:	4a17      	ldr	r2, [pc, #92]	; (8006d98 <vPortValidateInterruptPriority+0x70>)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d44:	4b15      	ldr	r3, [pc, #84]	; (8006d9c <vPortValidateInterruptPriority+0x74>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	7afa      	ldrb	r2, [r7, #11]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d20a      	bcs.n	8006d64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	607b      	str	r3, [r7, #4]
}
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d64:	4b0e      	ldr	r3, [pc, #56]	; (8006da0 <vPortValidateInterruptPriority+0x78>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d6c:	4b0d      	ldr	r3, [pc, #52]	; (8006da4 <vPortValidateInterruptPriority+0x7c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d90a      	bls.n	8006d8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	603b      	str	r3, [r7, #0]
}
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <vPortValidateInterruptPriority+0x60>
	}
 8006d8a:	bf00      	nop
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	e000e3f0 	.word	0xe000e3f0
 8006d9c:	20004684 	.word	0x20004684
 8006da0:	e000ed0c 	.word	0xe000ed0c
 8006da4:	20004688 	.word	0x20004688

08006da8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <xQueueGenericReset+0x2a>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	60bb      	str	r3, [r7, #8]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006dd2:	f7ff fec7 	bl	8006b64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dde:	68f9      	ldr	r1, [r7, #12]
 8006de0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006de2:	fb01 f303 	mul.w	r3, r1, r3
 8006de6:	441a      	add	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e02:	3b01      	subs	r3, #1
 8006e04:	68f9      	ldr	r1, [r7, #12]
 8006e06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e08:	fb01 f303 	mul.w	r3, r1, r3
 8006e0c:	441a      	add	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	22ff      	movs	r2, #255	; 0xff
 8006e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	22ff      	movs	r2, #255	; 0xff
 8006e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d114      	bne.n	8006e52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01a      	beq.n	8006e66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3310      	adds	r3, #16
 8006e34:	4618      	mov	r0, r3
 8006e36:	f001 f963 	bl	8008100 <xTaskRemoveFromEventList>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d012      	beq.n	8006e66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e40:	4b0c      	ldr	r3, [pc, #48]	; (8006e74 <xQueueGenericReset+0xcc>)
 8006e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	e009      	b.n	8006e66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3310      	adds	r3, #16
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7ff fca4 	bl	80067a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3324      	adds	r3, #36	; 0x24
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff fc9f 	bl	80067a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e66:	f7ff fead 	bl	8006bc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e6a:	2301      	movs	r3, #1
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	e000ed04 	.word	0xe000ed04

08006e78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08e      	sub	sp, #56	; 0x38
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e9e:	bf00      	nop
 8006ea0:	e7fe      	b.n	8006ea0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006eba:	bf00      	nop
 8006ebc:	e7fe      	b.n	8006ebc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <xQueueGenericCreateStatic+0x52>
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <xQueueGenericCreateStatic+0x56>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e000      	b.n	8006ed0 <xQueueGenericCreateStatic+0x58>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	623b      	str	r3, [r7, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d102      	bne.n	8006ef6 <xQueueGenericCreateStatic+0x7e>
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <xQueueGenericCreateStatic+0x82>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <xQueueGenericCreateStatic+0x84>
 8006efa:	2300      	movs	r3, #0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10a      	bne.n	8006f16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	61fb      	str	r3, [r7, #28]
}
 8006f12:	bf00      	nop
 8006f14:	e7fe      	b.n	8006f14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f16:	2350      	movs	r3, #80	; 0x50
 8006f18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2b50      	cmp	r3, #80	; 0x50
 8006f1e:	d00a      	beq.n	8006f36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	61bb      	str	r3, [r7, #24]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00d      	beq.n	8006f5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	4613      	mov	r3, r2
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 f83f 	bl	8006fdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3730      	adds	r7, #48	; 0x30
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08a      	sub	sp, #40	; 0x28
 8006f6c:	af02      	add	r7, sp, #8
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	4613      	mov	r3, r2
 8006f74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	613b      	str	r3, [r7, #16]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	fb02 f303 	mul.w	r3, r2, r3
 8006f9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	3350      	adds	r3, #80	; 0x50
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7ff fa15 	bl	80063d0 <pvPortMalloc>
 8006fa6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d011      	beq.n	8006fd2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	3350      	adds	r3, #80	; 0x50
 8006fb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fc0:	79fa      	ldrb	r2, [r7, #7]
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 f805 	bl	8006fdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
	}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3720      	adds	r7, #32
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d103      	bne.n	8006ff8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	e002      	b.n	8006ffe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800700a:	2101      	movs	r1, #1
 800700c:	69b8      	ldr	r0, [r7, #24]
 800700e:	f7ff fecb 	bl	8006da8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	78fa      	ldrb	r2, [r7, #3]
 8007016:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800701a:	bf00      	nop
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08e      	sub	sp, #56	; 0x38
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007032:	2300      	movs	r3, #0
 8007034:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10a      	bne.n	8007056 <xQueueGenericSend+0x32>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007052:	bf00      	nop
 8007054:	e7fe      	b.n	8007054 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d103      	bne.n	8007064 <xQueueGenericSend+0x40>
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <xQueueGenericSend+0x44>
 8007064:	2301      	movs	r3, #1
 8007066:	e000      	b.n	800706a <xQueueGenericSend+0x46>
 8007068:	2300      	movs	r3, #0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10a      	bne.n	8007084 <xQueueGenericSend+0x60>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2b02      	cmp	r3, #2
 8007088:	d103      	bne.n	8007092 <xQueueGenericSend+0x6e>
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708e:	2b01      	cmp	r3, #1
 8007090:	d101      	bne.n	8007096 <xQueueGenericSend+0x72>
 8007092:	2301      	movs	r3, #1
 8007094:	e000      	b.n	8007098 <xQueueGenericSend+0x74>
 8007096:	2300      	movs	r3, #0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10a      	bne.n	80070b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	623b      	str	r3, [r7, #32]
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070b2:	f001 f9e7 	bl	8008484 <xTaskGetSchedulerState>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <xQueueGenericSend+0x9e>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <xQueueGenericSend+0xa2>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <xQueueGenericSend+0xa4>
 80070c6:	2300      	movs	r3, #0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	61fb      	str	r3, [r7, #28]
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070e2:	f7ff fd3f 	bl	8006b64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d302      	bcc.n	80070f8 <xQueueGenericSend+0xd4>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d129      	bne.n	800714c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070fe:	f000 fa0b 	bl	8007518 <prvCopyDataToQueue>
 8007102:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	2b00      	cmp	r3, #0
 800710a:	d010      	beq.n	800712e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800710c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710e:	3324      	adds	r3, #36	; 0x24
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fff5 	bl	8008100 <xTaskRemoveFromEventList>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d013      	beq.n	8007144 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800711c:	4b3f      	ldr	r3, [pc, #252]	; (800721c <xQueueGenericSend+0x1f8>)
 800711e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	e00a      	b.n	8007144 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800712e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007130:	2b00      	cmp	r3, #0
 8007132:	d007      	beq.n	8007144 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007134:	4b39      	ldr	r3, [pc, #228]	; (800721c <xQueueGenericSend+0x1f8>)
 8007136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007144:	f7ff fd3e 	bl	8006bc4 <vPortExitCritical>
				return pdPASS;
 8007148:	2301      	movs	r3, #1
 800714a:	e063      	b.n	8007214 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d103      	bne.n	800715a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007152:	f7ff fd37 	bl	8006bc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007156:	2300      	movs	r3, #0
 8007158:	e05c      	b.n	8007214 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800715a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715c:	2b00      	cmp	r3, #0
 800715e:	d106      	bne.n	800716e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007160:	f107 0314 	add.w	r3, r7, #20
 8007164:	4618      	mov	r0, r3
 8007166:	f001 f82f 	bl	80081c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800716a:	2301      	movs	r3, #1
 800716c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800716e:	f7ff fd29 	bl	8006bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007172:	f000 fd9b 	bl	8007cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007176:	f7ff fcf5 	bl	8006b64 <vPortEnterCritical>
 800717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007180:	b25b      	sxtb	r3, r3
 8007182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007186:	d103      	bne.n	8007190 <xQueueGenericSend+0x16c>
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007196:	b25b      	sxtb	r3, r3
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719c:	d103      	bne.n	80071a6 <xQueueGenericSend+0x182>
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071a6:	f7ff fd0d 	bl	8006bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071aa:	1d3a      	adds	r2, r7, #4
 80071ac:	f107 0314 	add.w	r3, r7, #20
 80071b0:	4611      	mov	r1, r2
 80071b2:	4618      	mov	r0, r3
 80071b4:	f001 f81e 	bl	80081f4 <xTaskCheckForTimeOut>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d124      	bne.n	8007208 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071c0:	f000 faa2 	bl	8007708 <prvIsQueueFull>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d018      	beq.n	80071fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	3310      	adds	r3, #16
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	4611      	mov	r1, r2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 ff44 	bl	8008060 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071da:	f000 fa2d 	bl	8007638 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071de:	f000 fd73 	bl	8007cc8 <xTaskResumeAll>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f47f af7c 	bne.w	80070e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80071ea:	4b0c      	ldr	r3, [pc, #48]	; (800721c <xQueueGenericSend+0x1f8>)
 80071ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	e772      	b.n	80070e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80071fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071fe:	f000 fa1b 	bl	8007638 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007202:	f000 fd61 	bl	8007cc8 <xTaskResumeAll>
 8007206:	e76c      	b.n	80070e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800720a:	f000 fa15 	bl	8007638 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800720e:	f000 fd5b 	bl	8007cc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007212:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007214:	4618      	mov	r0, r3
 8007216:	3738      	adds	r7, #56	; 0x38
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	e000ed04 	.word	0xe000ed04

08007220 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b090      	sub	sp, #64	; 0x40
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10a      	bne.n	800724e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800724a:	bf00      	nop
 800724c:	e7fe      	b.n	800724c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d103      	bne.n	800725c <xQueueGenericSendFromISR+0x3c>
 8007254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <xQueueGenericSendFromISR+0x40>
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <xQueueGenericSendFromISR+0x42>
 8007260:	2300      	movs	r3, #0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10a      	bne.n	800727c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007278:	bf00      	nop
 800727a:	e7fe      	b.n	800727a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b02      	cmp	r3, #2
 8007280:	d103      	bne.n	800728a <xQueueGenericSendFromISR+0x6a>
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007286:	2b01      	cmp	r3, #1
 8007288:	d101      	bne.n	800728e <xQueueGenericSendFromISR+0x6e>
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <xQueueGenericSendFromISR+0x70>
 800728e:	2300      	movs	r3, #0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10a      	bne.n	80072aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	623b      	str	r3, [r7, #32]
}
 80072a6:	bf00      	nop
 80072a8:	e7fe      	b.n	80072a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072aa:	f7ff fd3d 	bl	8006d28 <vPortValidateInterruptPriority>
	__asm volatile
 80072ae:	f3ef 8211 	mrs	r2, BASEPRI
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	61fa      	str	r2, [r7, #28]
 80072c4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80072c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d302      	bcc.n	80072dc <xQueueGenericSendFromISR+0xbc>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d12f      	bne.n	800733c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	68b9      	ldr	r1, [r7, #8]
 80072f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072f2:	f000 f911 	bl	8007518 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fe:	d112      	bne.n	8007326 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	2b00      	cmp	r3, #0
 8007306:	d016      	beq.n	8007336 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	3324      	adds	r3, #36	; 0x24
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fef7 	bl	8008100 <xTaskRemoveFromEventList>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00e      	beq.n	8007336 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00b      	beq.n	8007336 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	e007      	b.n	8007336 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007326:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800732a:	3301      	adds	r3, #1
 800732c:	b2db      	uxtb	r3, r3
 800732e:	b25a      	sxtb	r2, r3
 8007330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007336:	2301      	movs	r3, #1
 8007338:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800733a:	e001      	b.n	8007340 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800733c:	2300      	movs	r3, #0
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007342:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f383 8811 	msr	BASEPRI, r3
}
 800734a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800734c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800734e:	4618      	mov	r0, r3
 8007350:	3740      	adds	r7, #64	; 0x40
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08c      	sub	sp, #48	; 0x30
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007364:	2300      	movs	r3, #0
 8007366:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800736c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10a      	bne.n	8007388 <xQueueReceive+0x30>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	623b      	str	r3, [r7, #32]
}
 8007384:	bf00      	nop
 8007386:	e7fe      	b.n	8007386 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d103      	bne.n	8007396 <xQueueReceive+0x3e>
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <xQueueReceive+0x42>
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <xQueueReceive+0x44>
 800739a:	2300      	movs	r3, #0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <xQueueReceive+0x5e>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	61fb      	str	r3, [r7, #28]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073b6:	f001 f865 	bl	8008484 <xTaskGetSchedulerState>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d102      	bne.n	80073c6 <xQueueReceive+0x6e>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <xQueueReceive+0x72>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e000      	b.n	80073cc <xQueueReceive+0x74>
 80073ca:	2300      	movs	r3, #0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <xQueueReceive+0x8e>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	61bb      	str	r3, [r7, #24]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073e6:	f7ff fbbd 	bl	8006b64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d01f      	beq.n	8007436 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073f6:	68b9      	ldr	r1, [r7, #8]
 80073f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073fa:	f000 f8f7 	bl	80075ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	1e5a      	subs	r2, r3, #1
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00f      	beq.n	800742e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	3310      	adds	r3, #16
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fe74 	bl	8008100 <xTaskRemoveFromEventList>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d007      	beq.n	800742e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800741e:	4b3d      	ldr	r3, [pc, #244]	; (8007514 <xQueueReceive+0x1bc>)
 8007420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800742e:	f7ff fbc9 	bl	8006bc4 <vPortExitCritical>
				return pdPASS;
 8007432:	2301      	movs	r3, #1
 8007434:	e069      	b.n	800750a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d103      	bne.n	8007444 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800743c:	f7ff fbc2 	bl	8006bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007440:	2300      	movs	r3, #0
 8007442:	e062      	b.n	800750a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007446:	2b00      	cmp	r3, #0
 8007448:	d106      	bne.n	8007458 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800744a:	f107 0310 	add.w	r3, r7, #16
 800744e:	4618      	mov	r0, r3
 8007450:	f000 feba 	bl	80081c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007454:	2301      	movs	r3, #1
 8007456:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007458:	f7ff fbb4 	bl	8006bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800745c:	f000 fc26 	bl	8007cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007460:	f7ff fb80 	bl	8006b64 <vPortEnterCritical>
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800746a:	b25b      	sxtb	r3, r3
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007470:	d103      	bne.n	800747a <xQueueReceive+0x122>
 8007472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007480:	b25b      	sxtb	r3, r3
 8007482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007486:	d103      	bne.n	8007490 <xQueueReceive+0x138>
 8007488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007490:	f7ff fb98 	bl	8006bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007494:	1d3a      	adds	r2, r7, #4
 8007496:	f107 0310 	add.w	r3, r7, #16
 800749a:	4611      	mov	r1, r2
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fea9 	bl	80081f4 <xTaskCheckForTimeOut>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d123      	bne.n	80074f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074aa:	f000 f917 	bl	80076dc <prvIsQueueEmpty>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d017      	beq.n	80074e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	3324      	adds	r3, #36	; 0x24
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	4611      	mov	r1, r2
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 fdcf 	bl	8008060 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074c4:	f000 f8b8 	bl	8007638 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074c8:	f000 fbfe 	bl	8007cc8 <xTaskResumeAll>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d189      	bne.n	80073e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80074d2:	4b10      	ldr	r3, [pc, #64]	; (8007514 <xQueueReceive+0x1bc>)
 80074d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	e780      	b.n	80073e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80074e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e6:	f000 f8a7 	bl	8007638 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074ea:	f000 fbed 	bl	8007cc8 <xTaskResumeAll>
 80074ee:	e77a      	b.n	80073e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80074f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074f2:	f000 f8a1 	bl	8007638 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074f6:	f000 fbe7 	bl	8007cc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074fc:	f000 f8ee 	bl	80076dc <prvIsQueueEmpty>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	f43f af6f 	beq.w	80073e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007508:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800750a:	4618      	mov	r0, r3
 800750c:	3730      	adds	r7, #48	; 0x30
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	e000ed04 	.word	0xe000ed04

08007518 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10d      	bne.n	8007552 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d14d      	bne.n	80075da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	4618      	mov	r0, r3
 8007544:	f000 ffbc 	bl	80084c0 <xTaskPriorityDisinherit>
 8007548:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	609a      	str	r2, [r3, #8]
 8007550:	e043      	b.n	80075da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d119      	bne.n	800758c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6858      	ldr	r0, [r3, #4]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007560:	461a      	mov	r2, r3
 8007562:	68b9      	ldr	r1, [r7, #8]
 8007564:	f001 fc9c 	bl	8008ea0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007570:	441a      	add	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	429a      	cmp	r2, r3
 8007580:	d32b      	bcc.n	80075da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	605a      	str	r2, [r3, #4]
 800758a:	e026      	b.n	80075da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	68d8      	ldr	r0, [r3, #12]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	461a      	mov	r2, r3
 8007596:	68b9      	ldr	r1, [r7, #8]
 8007598:	f001 fc82 	bl	8008ea0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	68da      	ldr	r2, [r3, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a4:	425b      	negs	r3, r3
 80075a6:	441a      	add	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d207      	bcs.n	80075c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c0:	425b      	negs	r3, r3
 80075c2:	441a      	add	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d105      	bne.n	80075da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075e2:	697b      	ldr	r3, [r7, #20]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d018      	beq.n	8007630 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	441a      	add	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68da      	ldr	r2, [r3, #12]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	429a      	cmp	r2, r3
 8007616:	d303      	bcc.n	8007620 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68d9      	ldr	r1, [r3, #12]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	461a      	mov	r2, r3
 800762a:	6838      	ldr	r0, [r7, #0]
 800762c:	f001 fc38 	bl	8008ea0 <memcpy>
	}
}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007640:	f7ff fa90 	bl	8006b64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800764a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800764c:	e011      	b.n	8007672 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	2b00      	cmp	r3, #0
 8007654:	d012      	beq.n	800767c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	3324      	adds	r3, #36	; 0x24
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fd50 	bl	8008100 <xTaskRemoveFromEventList>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007666:	f000 fe27 	bl	80082b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
 800766c:	3b01      	subs	r3, #1
 800766e:	b2db      	uxtb	r3, r3
 8007670:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007676:	2b00      	cmp	r3, #0
 8007678:	dce9      	bgt.n	800764e <prvUnlockQueue+0x16>
 800767a:	e000      	b.n	800767e <prvUnlockQueue+0x46>
					break;
 800767c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	22ff      	movs	r2, #255	; 0xff
 8007682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007686:	f7ff fa9d 	bl	8006bc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800768a:	f7ff fa6b 	bl	8006b64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007694:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007696:	e011      	b.n	80076bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d012      	beq.n	80076c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	3310      	adds	r3, #16
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 fd2b 	bl	8008100 <xTaskRemoveFromEventList>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80076b0:	f000 fe02 	bl	80082b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	dce9      	bgt.n	8007698 <prvUnlockQueue+0x60>
 80076c4:	e000      	b.n	80076c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	22ff      	movs	r2, #255	; 0xff
 80076cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076d0:	f7ff fa78 	bl	8006bc4 <vPortExitCritical>
}
 80076d4:	bf00      	nop
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076e4:	f7ff fa3e 	bl	8006b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076f0:	2301      	movs	r3, #1
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	e001      	b.n	80076fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076f6:	2300      	movs	r3, #0
 80076f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076fa:	f7ff fa63 	bl	8006bc4 <vPortExitCritical>

	return xReturn;
 80076fe:	68fb      	ldr	r3, [r7, #12]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007710:	f7ff fa28 	bl	8006b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771c:	429a      	cmp	r2, r3
 800771e:	d102      	bne.n	8007726 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007720:	2301      	movs	r3, #1
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e001      	b.n	800772a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800772a:	f7ff fa4b 	bl	8006bc4 <vPortExitCritical>

	return xReturn;
 800772e:	68fb      	ldr	r3, [r7, #12]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	e014      	b.n	8007772 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007748:	4a0f      	ldr	r2, [pc, #60]	; (8007788 <vQueueAddToRegistry+0x50>)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10b      	bne.n	800776c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007754:	490c      	ldr	r1, [pc, #48]	; (8007788 <vQueueAddToRegistry+0x50>)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	683a      	ldr	r2, [r7, #0]
 800775a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800775e:	4a0a      	ldr	r2, [pc, #40]	; (8007788 <vQueueAddToRegistry+0x50>)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	4413      	add	r3, r2
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800776a:	e006      	b.n	800777a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3301      	adds	r3, #1
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b07      	cmp	r3, #7
 8007776:	d9e7      	bls.n	8007748 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	2000468c 	.word	0x2000468c

0800778c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800779c:	f7ff f9e2 	bl	8006b64 <vPortEnterCritical>
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077a6:	b25b      	sxtb	r3, r3
 80077a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ac:	d103      	bne.n	80077b6 <vQueueWaitForMessageRestricted+0x2a>
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077bc:	b25b      	sxtb	r3, r3
 80077be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c2:	d103      	bne.n	80077cc <vQueueWaitForMessageRestricted+0x40>
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077cc:	f7ff f9fa 	bl	8006bc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d106      	bne.n	80077e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	3324      	adds	r3, #36	; 0x24
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	68b9      	ldr	r1, [r7, #8]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 fc61 	bl	80080a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077e6:	6978      	ldr	r0, [r7, #20]
 80077e8:	f7ff ff26 	bl	8007638 <prvUnlockQueue>
	}
 80077ec:	bf00      	nop
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08e      	sub	sp, #56	; 0x38
 80077f8:	af04      	add	r7, sp, #16
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10a      	bne.n	800781e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	623b      	str	r3, [r7, #32]
}
 800781a:	bf00      	nop
 800781c:	e7fe      	b.n	800781c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800781e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <xTaskCreateStatic+0x46>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	61fb      	str	r3, [r7, #28]
}
 8007836:	bf00      	nop
 8007838:	e7fe      	b.n	8007838 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800783a:	23bc      	movs	r3, #188	; 0xbc
 800783c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	2bbc      	cmp	r3, #188	; 0xbc
 8007842:	d00a      	beq.n	800785a <xTaskCreateStatic+0x66>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	61bb      	str	r3, [r7, #24]
}
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800785a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	2b00      	cmp	r3, #0
 8007860:	d01e      	beq.n	80078a0 <xTaskCreateStatic+0xac>
 8007862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01b      	beq.n	80078a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007870:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	2202      	movs	r2, #2
 8007876:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800787a:	2300      	movs	r3, #0
 800787c:	9303      	str	r3, [sp, #12]
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	9302      	str	r3, [sp, #8]
 8007882:	f107 0314 	add.w	r3, r7, #20
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	68b9      	ldr	r1, [r7, #8]
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f000 f850 	bl	8007938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800789a:	f000 f8f3 	bl	8007a84 <prvAddNewTaskToReadyList>
 800789e:	e001      	b.n	80078a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80078a0:	2300      	movs	r3, #0
 80078a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078a4:	697b      	ldr	r3, [r7, #20]
	}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3728      	adds	r7, #40	; 0x28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b08c      	sub	sp, #48	; 0x30
 80078b2:	af04      	add	r7, sp, #16
 80078b4:	60f8      	str	r0, [r7, #12]
 80078b6:	60b9      	str	r1, [r7, #8]
 80078b8:	603b      	str	r3, [r7, #0]
 80078ba:	4613      	mov	r3, r2
 80078bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078be:	88fb      	ldrh	r3, [r7, #6]
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fe fd84 	bl	80063d0 <pvPortMalloc>
 80078c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00e      	beq.n	80078ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078d0:	20bc      	movs	r0, #188	; 0xbc
 80078d2:	f7fe fd7d 	bl	80063d0 <pvPortMalloc>
 80078d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	631a      	str	r2, [r3, #48]	; 0x30
 80078e4:	e005      	b.n	80078f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078e6:	6978      	ldr	r0, [r7, #20]
 80078e8:	f7fe fe3e 	bl	8006568 <vPortFree>
 80078ec:	e001      	b.n	80078f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d017      	beq.n	8007928 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007900:	88fa      	ldrh	r2, [r7, #6]
 8007902:	2300      	movs	r3, #0
 8007904:	9303      	str	r3, [sp, #12]
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	9302      	str	r3, [sp, #8]
 800790a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790c:	9301      	str	r3, [sp, #4]
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68b9      	ldr	r1, [r7, #8]
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 f80e 	bl	8007938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800791c:	69f8      	ldr	r0, [r7, #28]
 800791e:	f000 f8b1 	bl	8007a84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007922:	2301      	movs	r3, #1
 8007924:	61bb      	str	r3, [r7, #24]
 8007926:	e002      	b.n	800792e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007928:	f04f 33ff 	mov.w	r3, #4294967295
 800792c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800792e:	69bb      	ldr	r3, [r7, #24]
	}
 8007930:	4618      	mov	r0, r3
 8007932:	3720      	adds	r7, #32
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	461a      	mov	r2, r3
 8007950:	21a5      	movs	r1, #165	; 0xa5
 8007952:	f001 fab3 	bl	8008ebc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007960:	3b01      	subs	r3, #1
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	f023 0307 	bic.w	r3, r3, #7
 800796e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <prvInitialiseNewTask+0x58>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	617b      	str	r3, [r7, #20]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d01f      	beq.n	80079d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007996:	2300      	movs	r3, #0
 8007998:	61fb      	str	r3, [r7, #28]
 800799a:	e012      	b.n	80079c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	4413      	add	r3, r2
 80079a2:	7819      	ldrb	r1, [r3, #0]
 80079a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	4413      	add	r3, r2
 80079aa:	3334      	adds	r3, #52	; 0x34
 80079ac:	460a      	mov	r2, r1
 80079ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	4413      	add	r3, r2
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d006      	beq.n	80079ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	3301      	adds	r3, #1
 80079c0:	61fb      	str	r3, [r7, #28]
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	2b0f      	cmp	r3, #15
 80079c6:	d9e9      	bls.n	800799c <prvInitialiseNewTask+0x64>
 80079c8:	e000      	b.n	80079cc <prvInitialiseNewTask+0x94>
			{
				break;
 80079ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079d4:	e003      	b.n	80079de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e0:	2b37      	cmp	r3, #55	; 0x37
 80079e2:	d901      	bls.n	80079e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079e4:	2337      	movs	r3, #55	; 0x37
 80079e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	2200      	movs	r2, #0
 80079f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	3304      	adds	r3, #4
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe fef0 	bl	80067e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	3318      	adds	r3, #24
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fe feeb 	bl	80067e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a36:	3354      	adds	r3, #84	; 0x54
 8007a38:	2260      	movs	r2, #96	; 0x60
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f001 fa3d 	bl	8008ebc <memset>
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	4a0c      	ldr	r2, [pc, #48]	; (8007a78 <prvInitialiseNewTask+0x140>)
 8007a46:	659a      	str	r2, [r3, #88]	; 0x58
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	4a0c      	ldr	r2, [pc, #48]	; (8007a7c <prvInitialiseNewTask+0x144>)
 8007a4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	4a0b      	ldr	r2, [pc, #44]	; (8007a80 <prvInitialiseNewTask+0x148>)
 8007a52:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	68f9      	ldr	r1, [r7, #12]
 8007a58:	69b8      	ldr	r0, [r7, #24]
 8007a5a:	f7fe ff57 	bl	800690c <pxPortInitialiseStack>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a70:	bf00      	nop
 8007a72:	3720      	adds	r7, #32
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	0800963c 	.word	0x0800963c
 8007a7c:	0800965c 	.word	0x0800965c
 8007a80:	0800961c 	.word	0x0800961c

08007a84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a8c:	f7ff f86a 	bl	8006b64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a90:	4b2d      	ldr	r3, [pc, #180]	; (8007b48 <prvAddNewTaskToReadyList+0xc4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3301      	adds	r3, #1
 8007a96:	4a2c      	ldr	r2, [pc, #176]	; (8007b48 <prvAddNewTaskToReadyList+0xc4>)
 8007a98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a9a:	4b2c      	ldr	r3, [pc, #176]	; (8007b4c <prvAddNewTaskToReadyList+0xc8>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d109      	bne.n	8007ab6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007aa2:	4a2a      	ldr	r2, [pc, #168]	; (8007b4c <prvAddNewTaskToReadyList+0xc8>)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007aa8:	4b27      	ldr	r3, [pc, #156]	; (8007b48 <prvAddNewTaskToReadyList+0xc4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d110      	bne.n	8007ad2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ab0:	f000 fc26 	bl	8008300 <prvInitialiseTaskLists>
 8007ab4:	e00d      	b.n	8007ad2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ab6:	4b26      	ldr	r3, [pc, #152]	; (8007b50 <prvAddNewTaskToReadyList+0xcc>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d109      	bne.n	8007ad2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007abe:	4b23      	ldr	r3, [pc, #140]	; (8007b4c <prvAddNewTaskToReadyList+0xc8>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d802      	bhi.n	8007ad2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007acc:	4a1f      	ldr	r2, [pc, #124]	; (8007b4c <prvAddNewTaskToReadyList+0xc8>)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ad2:	4b20      	ldr	r3, [pc, #128]	; (8007b54 <prvAddNewTaskToReadyList+0xd0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	4a1e      	ldr	r2, [pc, #120]	; (8007b54 <prvAddNewTaskToReadyList+0xd0>)
 8007ada:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007adc:	4b1d      	ldr	r3, [pc, #116]	; (8007b54 <prvAddNewTaskToReadyList+0xd0>)
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae8:	4b1b      	ldr	r3, [pc, #108]	; (8007b58 <prvAddNewTaskToReadyList+0xd4>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d903      	bls.n	8007af8 <prvAddNewTaskToReadyList+0x74>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	4a18      	ldr	r2, [pc, #96]	; (8007b58 <prvAddNewTaskToReadyList+0xd4>)
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afc:	4613      	mov	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4a15      	ldr	r2, [pc, #84]	; (8007b5c <prvAddNewTaskToReadyList+0xd8>)
 8007b06:	441a      	add	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	4610      	mov	r0, r2
 8007b10:	f7fe fe75 	bl	80067fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b14:	f7ff f856 	bl	8006bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b18:	4b0d      	ldr	r3, [pc, #52]	; (8007b50 <prvAddNewTaskToReadyList+0xcc>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00e      	beq.n	8007b3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b20:	4b0a      	ldr	r3, [pc, #40]	; (8007b4c <prvAddNewTaskToReadyList+0xc8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d207      	bcs.n	8007b3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b2e:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <prvAddNewTaskToReadyList+0xdc>)
 8007b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b3e:	bf00      	nop
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20004ba0 	.word	0x20004ba0
 8007b4c:	200046cc 	.word	0x200046cc
 8007b50:	20004bac 	.word	0x20004bac
 8007b54:	20004bbc 	.word	0x20004bbc
 8007b58:	20004ba8 	.word	0x20004ba8
 8007b5c:	200046d0 	.word	0x200046d0
 8007b60:	e000ed04 	.word	0xe000ed04

08007b64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d017      	beq.n	8007ba6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b76:	4b13      	ldr	r3, [pc, #76]	; (8007bc4 <vTaskDelay+0x60>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <vTaskDelay+0x30>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	60bb      	str	r3, [r7, #8]
}
 8007b90:	bf00      	nop
 8007b92:	e7fe      	b.n	8007b92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b94:	f000 f88a 	bl	8007cac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b98:	2100      	movs	r1, #0
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fcfe 	bl	800859c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ba0:	f000 f892 	bl	8007cc8 <xTaskResumeAll>
 8007ba4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d107      	bne.n	8007bbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007bac:	4b06      	ldr	r3, [pc, #24]	; (8007bc8 <vTaskDelay+0x64>)
 8007bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bbc:	bf00      	nop
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20004bc8 	.word	0x20004bc8
 8007bc8:	e000ed04 	.word	0xe000ed04

08007bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08a      	sub	sp, #40	; 0x28
 8007bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bda:	463a      	mov	r2, r7
 8007bdc:	1d39      	adds	r1, r7, #4
 8007bde:	f107 0308 	add.w	r3, r7, #8
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fe fbc0 	bl	8006368 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	9202      	str	r2, [sp, #8]
 8007bf0:	9301      	str	r3, [sp, #4]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	460a      	mov	r2, r1
 8007bfa:	4924      	ldr	r1, [pc, #144]	; (8007c8c <vTaskStartScheduler+0xc0>)
 8007bfc:	4824      	ldr	r0, [pc, #144]	; (8007c90 <vTaskStartScheduler+0xc4>)
 8007bfe:	f7ff fdf9 	bl	80077f4 <xTaskCreateStatic>
 8007c02:	4603      	mov	r3, r0
 8007c04:	4a23      	ldr	r2, [pc, #140]	; (8007c94 <vTaskStartScheduler+0xc8>)
 8007c06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c08:	4b22      	ldr	r3, [pc, #136]	; (8007c94 <vTaskStartScheduler+0xc8>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c10:	2301      	movs	r3, #1
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	e001      	b.n	8007c1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d102      	bne.n	8007c26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c20:	f000 fd10 	bl	8008644 <xTimerCreateTimerTask>
 8007c24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d11b      	bne.n	8007c64 <vTaskStartScheduler+0x98>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	613b      	str	r3, [r7, #16]
}
 8007c3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c40:	4b15      	ldr	r3, [pc, #84]	; (8007c98 <vTaskStartScheduler+0xcc>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3354      	adds	r3, #84	; 0x54
 8007c46:	4a15      	ldr	r2, [pc, #84]	; (8007c9c <vTaskStartScheduler+0xd0>)
 8007c48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c4a:	4b15      	ldr	r3, [pc, #84]	; (8007ca0 <vTaskStartScheduler+0xd4>)
 8007c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c52:	4b14      	ldr	r3, [pc, #80]	; (8007ca4 <vTaskStartScheduler+0xd8>)
 8007c54:	2201      	movs	r2, #1
 8007c56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c58:	4b13      	ldr	r3, [pc, #76]	; (8007ca8 <vTaskStartScheduler+0xdc>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c5e:	f7fe fedf 	bl	8006a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c62:	e00e      	b.n	8007c82 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6a:	d10a      	bne.n	8007c82 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	60fb      	str	r3, [r7, #12]
}
 8007c7e:	bf00      	nop
 8007c80:	e7fe      	b.n	8007c80 <vTaskStartScheduler+0xb4>
}
 8007c82:	bf00      	nop
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	0800952c 	.word	0x0800952c
 8007c90:	080082d1 	.word	0x080082d1
 8007c94:	20004bc4 	.word	0x20004bc4
 8007c98:	200046cc 	.word	0x200046cc
 8007c9c:	20000014 	.word	0x20000014
 8007ca0:	20004bc0 	.word	0x20004bc0
 8007ca4:	20004bac 	.word	0x20004bac
 8007ca8:	20004ba4 	.word	0x20004ba4

08007cac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cac:	b480      	push	{r7}
 8007cae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007cb0:	4b04      	ldr	r3, [pc, #16]	; (8007cc4 <vTaskSuspendAll+0x18>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	4a03      	ldr	r2, [pc, #12]	; (8007cc4 <vTaskSuspendAll+0x18>)
 8007cb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007cba:	bf00      	nop
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	20004bc8 	.word	0x20004bc8

08007cc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cd6:	4b42      	ldr	r3, [pc, #264]	; (8007de0 <xTaskResumeAll+0x118>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10a      	bne.n	8007cf4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	603b      	str	r3, [r7, #0]
}
 8007cf0:	bf00      	nop
 8007cf2:	e7fe      	b.n	8007cf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cf4:	f7fe ff36 	bl	8006b64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cf8:	4b39      	ldr	r3, [pc, #228]	; (8007de0 <xTaskResumeAll+0x118>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	4a38      	ldr	r2, [pc, #224]	; (8007de0 <xTaskResumeAll+0x118>)
 8007d00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d02:	4b37      	ldr	r3, [pc, #220]	; (8007de0 <xTaskResumeAll+0x118>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d162      	bne.n	8007dd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d0a:	4b36      	ldr	r3, [pc, #216]	; (8007de4 <xTaskResumeAll+0x11c>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d05e      	beq.n	8007dd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d12:	e02f      	b.n	8007d74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d14:	4b34      	ldr	r3, [pc, #208]	; (8007de8 <xTaskResumeAll+0x120>)
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3318      	adds	r3, #24
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fe fdc9 	bl	80068b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe fdc4 	bl	80068b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d34:	4b2d      	ldr	r3, [pc, #180]	; (8007dec <xTaskResumeAll+0x124>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d903      	bls.n	8007d44 <xTaskResumeAll+0x7c>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	4a2a      	ldr	r2, [pc, #168]	; (8007dec <xTaskResumeAll+0x124>)
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4a27      	ldr	r2, [pc, #156]	; (8007df0 <xTaskResumeAll+0x128>)
 8007d52:	441a      	add	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3304      	adds	r3, #4
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	f7fe fd4f 	bl	80067fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d64:	4b23      	ldr	r3, [pc, #140]	; (8007df4 <xTaskResumeAll+0x12c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d302      	bcc.n	8007d74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d6e:	4b22      	ldr	r3, [pc, #136]	; (8007df8 <xTaskResumeAll+0x130>)
 8007d70:	2201      	movs	r2, #1
 8007d72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d74:	4b1c      	ldr	r3, [pc, #112]	; (8007de8 <xTaskResumeAll+0x120>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1cb      	bne.n	8007d14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d82:	f000 fb5f 	bl	8008444 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d86:	4b1d      	ldr	r3, [pc, #116]	; (8007dfc <xTaskResumeAll+0x134>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d010      	beq.n	8007db4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d92:	f000 f847 	bl	8007e24 <xTaskIncrementTick>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007d9c:	4b16      	ldr	r3, [pc, #88]	; (8007df8 <xTaskResumeAll+0x130>)
 8007d9e:	2201      	movs	r2, #1
 8007da0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1f1      	bne.n	8007d92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007dae:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <xTaskResumeAll+0x134>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007db4:	4b10      	ldr	r3, [pc, #64]	; (8007df8 <xTaskResumeAll+0x130>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d009      	beq.n	8007dd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <xTaskResumeAll+0x138>)
 8007dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dd0:	f7fe fef8 	bl	8006bc4 <vPortExitCritical>

	return xAlreadyYielded;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20004bc8 	.word	0x20004bc8
 8007de4:	20004ba0 	.word	0x20004ba0
 8007de8:	20004b60 	.word	0x20004b60
 8007dec:	20004ba8 	.word	0x20004ba8
 8007df0:	200046d0 	.word	0x200046d0
 8007df4:	200046cc 	.word	0x200046cc
 8007df8:	20004bb4 	.word	0x20004bb4
 8007dfc:	20004bb0 	.word	0x20004bb0
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e0a:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <xTaskGetTickCount+0x1c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e10:	687b      	ldr	r3, [r7, #4]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	20004ba4 	.word	0x20004ba4

08007e24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e2e:	4b4f      	ldr	r3, [pc, #316]	; (8007f6c <xTaskIncrementTick+0x148>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f040 808f 	bne.w	8007f56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e38:	4b4d      	ldr	r3, [pc, #308]	; (8007f70 <xTaskIncrementTick+0x14c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e40:	4a4b      	ldr	r2, [pc, #300]	; (8007f70 <xTaskIncrementTick+0x14c>)
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d120      	bne.n	8007e8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e4c:	4b49      	ldr	r3, [pc, #292]	; (8007f74 <xTaskIncrementTick+0x150>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <xTaskIncrementTick+0x48>
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	603b      	str	r3, [r7, #0]
}
 8007e68:	bf00      	nop
 8007e6a:	e7fe      	b.n	8007e6a <xTaskIncrementTick+0x46>
 8007e6c:	4b41      	ldr	r3, [pc, #260]	; (8007f74 <xTaskIncrementTick+0x150>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	60fb      	str	r3, [r7, #12]
 8007e72:	4b41      	ldr	r3, [pc, #260]	; (8007f78 <xTaskIncrementTick+0x154>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a3f      	ldr	r2, [pc, #252]	; (8007f74 <xTaskIncrementTick+0x150>)
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	4a3f      	ldr	r2, [pc, #252]	; (8007f78 <xTaskIncrementTick+0x154>)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	4b3e      	ldr	r3, [pc, #248]	; (8007f7c <xTaskIncrementTick+0x158>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3301      	adds	r3, #1
 8007e86:	4a3d      	ldr	r2, [pc, #244]	; (8007f7c <xTaskIncrementTick+0x158>)
 8007e88:	6013      	str	r3, [r2, #0]
 8007e8a:	f000 fadb 	bl	8008444 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e8e:	4b3c      	ldr	r3, [pc, #240]	; (8007f80 <xTaskIncrementTick+0x15c>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d349      	bcc.n	8007f2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e98:	4b36      	ldr	r3, [pc, #216]	; (8007f74 <xTaskIncrementTick+0x150>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d104      	bne.n	8007eac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ea2:	4b37      	ldr	r3, [pc, #220]	; (8007f80 <xTaskIncrementTick+0x15c>)
 8007ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea8:	601a      	str	r2, [r3, #0]
					break;
 8007eaa:	e03f      	b.n	8007f2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eac:	4b31      	ldr	r3, [pc, #196]	; (8007f74 <xTaskIncrementTick+0x150>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d203      	bcs.n	8007ecc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ec4:	4a2e      	ldr	r2, [pc, #184]	; (8007f80 <xTaskIncrementTick+0x15c>)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007eca:	e02f      	b.n	8007f2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	3304      	adds	r3, #4
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe fcf1 	bl	80068b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d004      	beq.n	8007ee8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	3318      	adds	r3, #24
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fe fce8 	bl	80068b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eec:	4b25      	ldr	r3, [pc, #148]	; (8007f84 <xTaskIncrementTick+0x160>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d903      	bls.n	8007efc <xTaskIncrementTick+0xd8>
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef8:	4a22      	ldr	r2, [pc, #136]	; (8007f84 <xTaskIncrementTick+0x160>)
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4a1f      	ldr	r2, [pc, #124]	; (8007f88 <xTaskIncrementTick+0x164>)
 8007f0a:	441a      	add	r2, r3
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	4619      	mov	r1, r3
 8007f12:	4610      	mov	r0, r2
 8007f14:	f7fe fc73 	bl	80067fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1c:	4b1b      	ldr	r3, [pc, #108]	; (8007f8c <xTaskIncrementTick+0x168>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d3b8      	bcc.n	8007e98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f26:	2301      	movs	r3, #1
 8007f28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f2a:	e7b5      	b.n	8007e98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f2c:	4b17      	ldr	r3, [pc, #92]	; (8007f8c <xTaskIncrementTick+0x168>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f32:	4915      	ldr	r1, [pc, #84]	; (8007f88 <xTaskIncrementTick+0x164>)
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d901      	bls.n	8007f48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007f44:	2301      	movs	r3, #1
 8007f46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f48:	4b11      	ldr	r3, [pc, #68]	; (8007f90 <xTaskIncrementTick+0x16c>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d007      	beq.n	8007f60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007f50:	2301      	movs	r3, #1
 8007f52:	617b      	str	r3, [r7, #20]
 8007f54:	e004      	b.n	8007f60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f56:	4b0f      	ldr	r3, [pc, #60]	; (8007f94 <xTaskIncrementTick+0x170>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	4a0d      	ldr	r2, [pc, #52]	; (8007f94 <xTaskIncrementTick+0x170>)
 8007f5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f60:	697b      	ldr	r3, [r7, #20]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20004bc8 	.word	0x20004bc8
 8007f70:	20004ba4 	.word	0x20004ba4
 8007f74:	20004b58 	.word	0x20004b58
 8007f78:	20004b5c 	.word	0x20004b5c
 8007f7c:	20004bb8 	.word	0x20004bb8
 8007f80:	20004bc0 	.word	0x20004bc0
 8007f84:	20004ba8 	.word	0x20004ba8
 8007f88:	200046d0 	.word	0x200046d0
 8007f8c:	200046cc 	.word	0x200046cc
 8007f90:	20004bb4 	.word	0x20004bb4
 8007f94:	20004bb0 	.word	0x20004bb0

08007f98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f9e:	4b2a      	ldr	r3, [pc, #168]	; (8008048 <vTaskSwitchContext+0xb0>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fa6:	4b29      	ldr	r3, [pc, #164]	; (800804c <vTaskSwitchContext+0xb4>)
 8007fa8:	2201      	movs	r2, #1
 8007faa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fac:	e046      	b.n	800803c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007fae:	4b27      	ldr	r3, [pc, #156]	; (800804c <vTaskSwitchContext+0xb4>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fb4:	4b26      	ldr	r3, [pc, #152]	; (8008050 <vTaskSwitchContext+0xb8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	60fb      	str	r3, [r7, #12]
 8007fba:	e010      	b.n	8007fde <vTaskSwitchContext+0x46>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10a      	bne.n	8007fd8 <vTaskSwitchContext+0x40>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	607b      	str	r3, [r7, #4]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <vTaskSwitchContext+0x3e>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	60fb      	str	r3, [r7, #12]
 8007fde:	491d      	ldr	r1, [pc, #116]	; (8008054 <vTaskSwitchContext+0xbc>)
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	440b      	add	r3, r1
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0e4      	beq.n	8007fbc <vTaskSwitchContext+0x24>
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4a15      	ldr	r2, [pc, #84]	; (8008054 <vTaskSwitchContext+0xbc>)
 8007ffe:	4413      	add	r3, r2
 8008000:	60bb      	str	r3, [r7, #8]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	605a      	str	r2, [r3, #4]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	3308      	adds	r3, #8
 8008014:	429a      	cmp	r2, r3
 8008016:	d104      	bne.n	8008022 <vTaskSwitchContext+0x8a>
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	605a      	str	r2, [r3, #4]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	4a0b      	ldr	r2, [pc, #44]	; (8008058 <vTaskSwitchContext+0xc0>)
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	4a08      	ldr	r2, [pc, #32]	; (8008050 <vTaskSwitchContext+0xb8>)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008032:	4b09      	ldr	r3, [pc, #36]	; (8008058 <vTaskSwitchContext+0xc0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3354      	adds	r3, #84	; 0x54
 8008038:	4a08      	ldr	r2, [pc, #32]	; (800805c <vTaskSwitchContext+0xc4>)
 800803a:	6013      	str	r3, [r2, #0]
}
 800803c:	bf00      	nop
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	20004bc8 	.word	0x20004bc8
 800804c:	20004bb4 	.word	0x20004bb4
 8008050:	20004ba8 	.word	0x20004ba8
 8008054:	200046d0 	.word	0x200046d0
 8008058:	200046cc 	.word	0x200046cc
 800805c:	20000014 	.word	0x20000014

08008060 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10a      	bne.n	8008086 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	60fb      	str	r3, [r7, #12]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008086:	4b07      	ldr	r3, [pc, #28]	; (80080a4 <vTaskPlaceOnEventList+0x44>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3318      	adds	r3, #24
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7fe fbd9 	bl	8006846 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008094:	2101      	movs	r1, #1
 8008096:	6838      	ldr	r0, [r7, #0]
 8008098:	f000 fa80 	bl	800859c <prvAddCurrentTaskToDelayedList>
}
 800809c:	bf00      	nop
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	200046cc 	.word	0x200046cc

080080a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10a      	bne.n	80080d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	617b      	str	r3, [r7, #20]
}
 80080cc:	bf00      	nop
 80080ce:	e7fe      	b.n	80080ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080d0:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <vTaskPlaceOnEventListRestricted+0x54>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3318      	adds	r3, #24
 80080d6:	4619      	mov	r1, r3
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f7fe fb90 	bl	80067fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80080e4:	f04f 33ff 	mov.w	r3, #4294967295
 80080e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	68b8      	ldr	r0, [r7, #8]
 80080ee:	f000 fa55 	bl	800859c <prvAddCurrentTaskToDelayedList>
	}
 80080f2:	bf00      	nop
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	200046cc 	.word	0x200046cc

08008100 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10a      	bne.n	800812c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	60fb      	str	r3, [r7, #12]
}
 8008128:	bf00      	nop
 800812a:	e7fe      	b.n	800812a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	3318      	adds	r3, #24
 8008130:	4618      	mov	r0, r3
 8008132:	f7fe fbc1 	bl	80068b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008136:	4b1e      	ldr	r3, [pc, #120]	; (80081b0 <xTaskRemoveFromEventList+0xb0>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d11d      	bne.n	800817a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	3304      	adds	r3, #4
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fbb8 	bl	80068b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814c:	4b19      	ldr	r3, [pc, #100]	; (80081b4 <xTaskRemoveFromEventList+0xb4>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	429a      	cmp	r2, r3
 8008152:	d903      	bls.n	800815c <xTaskRemoveFromEventList+0x5c>
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	4a16      	ldr	r2, [pc, #88]	; (80081b4 <xTaskRemoveFromEventList+0xb4>)
 800815a:	6013      	str	r3, [r2, #0]
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008160:	4613      	mov	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4a13      	ldr	r2, [pc, #76]	; (80081b8 <xTaskRemoveFromEventList+0xb8>)
 800816a:	441a      	add	r2, r3
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	3304      	adds	r3, #4
 8008170:	4619      	mov	r1, r3
 8008172:	4610      	mov	r0, r2
 8008174:	f7fe fb43 	bl	80067fe <vListInsertEnd>
 8008178:	e005      	b.n	8008186 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	3318      	adds	r3, #24
 800817e:	4619      	mov	r1, r3
 8008180:	480e      	ldr	r0, [pc, #56]	; (80081bc <xTaskRemoveFromEventList+0xbc>)
 8008182:	f7fe fb3c 	bl	80067fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818a:	4b0d      	ldr	r3, [pc, #52]	; (80081c0 <xTaskRemoveFromEventList+0xc0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	429a      	cmp	r2, r3
 8008192:	d905      	bls.n	80081a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008194:	2301      	movs	r3, #1
 8008196:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008198:	4b0a      	ldr	r3, [pc, #40]	; (80081c4 <xTaskRemoveFromEventList+0xc4>)
 800819a:	2201      	movs	r2, #1
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	e001      	b.n	80081a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80081a0:	2300      	movs	r3, #0
 80081a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80081a4:	697b      	ldr	r3, [r7, #20]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20004bc8 	.word	0x20004bc8
 80081b4:	20004ba8 	.word	0x20004ba8
 80081b8:	200046d0 	.word	0x200046d0
 80081bc:	20004b60 	.word	0x20004b60
 80081c0:	200046cc 	.word	0x200046cc
 80081c4:	20004bb4 	.word	0x20004bb4

080081c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80081d0:	4b06      	ldr	r3, [pc, #24]	; (80081ec <vTaskInternalSetTimeOutState+0x24>)
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081d8:	4b05      	ldr	r3, [pc, #20]	; (80081f0 <vTaskInternalSetTimeOutState+0x28>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	605a      	str	r2, [r3, #4]
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	20004bb8 	.word	0x20004bb8
 80081f0:	20004ba4 	.word	0x20004ba4

080081f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b088      	sub	sp, #32
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	613b      	str	r3, [r7, #16]
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10a      	bne.n	8008236 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	60fb      	str	r3, [r7, #12]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008236:	f7fe fc95 	bl	8006b64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800823a:	4b1d      	ldr	r3, [pc, #116]	; (80082b0 <xTaskCheckForTimeOut+0xbc>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008252:	d102      	bne.n	800825a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008254:	2300      	movs	r3, #0
 8008256:	61fb      	str	r3, [r7, #28]
 8008258:	e023      	b.n	80082a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	4b15      	ldr	r3, [pc, #84]	; (80082b4 <xTaskCheckForTimeOut+0xc0>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d007      	beq.n	8008276 <xTaskCheckForTimeOut+0x82>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	429a      	cmp	r2, r3
 800826e:	d302      	bcc.n	8008276 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008270:	2301      	movs	r3, #1
 8008272:	61fb      	str	r3, [r7, #28]
 8008274:	e015      	b.n	80082a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	429a      	cmp	r2, r3
 800827e:	d20b      	bcs.n	8008298 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	1ad2      	subs	r2, r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff ff9b 	bl	80081c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008292:	2300      	movs	r3, #0
 8008294:	61fb      	str	r3, [r7, #28]
 8008296:	e004      	b.n	80082a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2200      	movs	r2, #0
 800829c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800829e:	2301      	movs	r3, #1
 80082a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80082a2:	f7fe fc8f 	bl	8006bc4 <vPortExitCritical>

	return xReturn;
 80082a6:	69fb      	ldr	r3, [r7, #28]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3720      	adds	r7, #32
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20004ba4 	.word	0x20004ba4
 80082b4:	20004bb8 	.word	0x20004bb8

080082b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80082b8:	b480      	push	{r7}
 80082ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082bc:	4b03      	ldr	r3, [pc, #12]	; (80082cc <vTaskMissedYield+0x14>)
 80082be:	2201      	movs	r2, #1
 80082c0:	601a      	str	r2, [r3, #0]
}
 80082c2:	bf00      	nop
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	20004bb4 	.word	0x20004bb4

080082d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082d8:	f000 f852 	bl	8008380 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082dc:	4b06      	ldr	r3, [pc, #24]	; (80082f8 <prvIdleTask+0x28>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d9f9      	bls.n	80082d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80082e4:	4b05      	ldr	r3, [pc, #20]	; (80082fc <prvIdleTask+0x2c>)
 80082e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082f4:	e7f0      	b.n	80082d8 <prvIdleTask+0x8>
 80082f6:	bf00      	nop
 80082f8:	200046d0 	.word	0x200046d0
 80082fc:	e000ed04 	.word	0xe000ed04

08008300 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008306:	2300      	movs	r3, #0
 8008308:	607b      	str	r3, [r7, #4]
 800830a:	e00c      	b.n	8008326 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	4613      	mov	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4a12      	ldr	r2, [pc, #72]	; (8008360 <prvInitialiseTaskLists+0x60>)
 8008318:	4413      	add	r3, r2
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fa42 	bl	80067a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3301      	adds	r3, #1
 8008324:	607b      	str	r3, [r7, #4]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b37      	cmp	r3, #55	; 0x37
 800832a:	d9ef      	bls.n	800830c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800832c:	480d      	ldr	r0, [pc, #52]	; (8008364 <prvInitialiseTaskLists+0x64>)
 800832e:	f7fe fa39 	bl	80067a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008332:	480d      	ldr	r0, [pc, #52]	; (8008368 <prvInitialiseTaskLists+0x68>)
 8008334:	f7fe fa36 	bl	80067a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008338:	480c      	ldr	r0, [pc, #48]	; (800836c <prvInitialiseTaskLists+0x6c>)
 800833a:	f7fe fa33 	bl	80067a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800833e:	480c      	ldr	r0, [pc, #48]	; (8008370 <prvInitialiseTaskLists+0x70>)
 8008340:	f7fe fa30 	bl	80067a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008344:	480b      	ldr	r0, [pc, #44]	; (8008374 <prvInitialiseTaskLists+0x74>)
 8008346:	f7fe fa2d 	bl	80067a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800834a:	4b0b      	ldr	r3, [pc, #44]	; (8008378 <prvInitialiseTaskLists+0x78>)
 800834c:	4a05      	ldr	r2, [pc, #20]	; (8008364 <prvInitialiseTaskLists+0x64>)
 800834e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008350:	4b0a      	ldr	r3, [pc, #40]	; (800837c <prvInitialiseTaskLists+0x7c>)
 8008352:	4a05      	ldr	r2, [pc, #20]	; (8008368 <prvInitialiseTaskLists+0x68>)
 8008354:	601a      	str	r2, [r3, #0]
}
 8008356:	bf00      	nop
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	200046d0 	.word	0x200046d0
 8008364:	20004b30 	.word	0x20004b30
 8008368:	20004b44 	.word	0x20004b44
 800836c:	20004b60 	.word	0x20004b60
 8008370:	20004b74 	.word	0x20004b74
 8008374:	20004b8c 	.word	0x20004b8c
 8008378:	20004b58 	.word	0x20004b58
 800837c:	20004b5c 	.word	0x20004b5c

08008380 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008386:	e019      	b.n	80083bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008388:	f7fe fbec 	bl	8006b64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800838c:	4b10      	ldr	r3, [pc, #64]	; (80083d0 <prvCheckTasksWaitingTermination+0x50>)
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	3304      	adds	r3, #4
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe fa8d 	bl	80068b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800839e:	4b0d      	ldr	r3, [pc, #52]	; (80083d4 <prvCheckTasksWaitingTermination+0x54>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	4a0b      	ldr	r2, [pc, #44]	; (80083d4 <prvCheckTasksWaitingTermination+0x54>)
 80083a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083a8:	4b0b      	ldr	r3, [pc, #44]	; (80083d8 <prvCheckTasksWaitingTermination+0x58>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	4a0a      	ldr	r2, [pc, #40]	; (80083d8 <prvCheckTasksWaitingTermination+0x58>)
 80083b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083b2:	f7fe fc07 	bl	8006bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f810 	bl	80083dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083bc:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <prvCheckTasksWaitingTermination+0x58>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1e1      	bne.n	8008388 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20004b74 	.word	0x20004b74
 80083d4:	20004ba0 	.word	0x20004ba0
 80083d8:	20004b88 	.word	0x20004b88

080083dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3354      	adds	r3, #84	; 0x54
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 fd7d 	bl	8008ee8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d108      	bne.n	800840a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe f8b3 	bl	8006568 <vPortFree>
				vPortFree( pxTCB );
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7fe f8b0 	bl	8006568 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008408:	e018      	b.n	800843c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008410:	2b01      	cmp	r3, #1
 8008412:	d103      	bne.n	800841c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7fe f8a7 	bl	8006568 <vPortFree>
	}
 800841a:	e00f      	b.n	800843c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008422:	2b02      	cmp	r3, #2
 8008424:	d00a      	beq.n	800843c <prvDeleteTCB+0x60>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	60fb      	str	r3, [r7, #12]
}
 8008438:	bf00      	nop
 800843a:	e7fe      	b.n	800843a <prvDeleteTCB+0x5e>
	}
 800843c:	bf00      	nop
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800844a:	4b0c      	ldr	r3, [pc, #48]	; (800847c <prvResetNextTaskUnblockTime+0x38>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d104      	bne.n	800845e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008454:	4b0a      	ldr	r3, [pc, #40]	; (8008480 <prvResetNextTaskUnblockTime+0x3c>)
 8008456:	f04f 32ff 	mov.w	r2, #4294967295
 800845a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800845c:	e008      	b.n	8008470 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800845e:	4b07      	ldr	r3, [pc, #28]	; (800847c <prvResetNextTaskUnblockTime+0x38>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	4a04      	ldr	r2, [pc, #16]	; (8008480 <prvResetNextTaskUnblockTime+0x3c>)
 800846e:	6013      	str	r3, [r2, #0]
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	20004b58 	.word	0x20004b58
 8008480:	20004bc0 	.word	0x20004bc0

08008484 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800848a:	4b0b      	ldr	r3, [pc, #44]	; (80084b8 <xTaskGetSchedulerState+0x34>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d102      	bne.n	8008498 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008492:	2301      	movs	r3, #1
 8008494:	607b      	str	r3, [r7, #4]
 8008496:	e008      	b.n	80084aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008498:	4b08      	ldr	r3, [pc, #32]	; (80084bc <xTaskGetSchedulerState+0x38>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d102      	bne.n	80084a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084a0:	2302      	movs	r3, #2
 80084a2:	607b      	str	r3, [r7, #4]
 80084a4:	e001      	b.n	80084aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084a6:	2300      	movs	r3, #0
 80084a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084aa:	687b      	ldr	r3, [r7, #4]
	}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	20004bac 	.word	0x20004bac
 80084bc:	20004bc8 	.word	0x20004bc8

080084c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084cc:	2300      	movs	r3, #0
 80084ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d056      	beq.n	8008584 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084d6:	4b2e      	ldr	r3, [pc, #184]	; (8008590 <xTaskPriorityDisinherit+0xd0>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d00a      	beq.n	80084f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	60fb      	str	r3, [r7, #12]
}
 80084f2:	bf00      	nop
 80084f4:	e7fe      	b.n	80084f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	60bb      	str	r3, [r7, #8]
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008518:	1e5a      	subs	r2, r3, #1
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008526:	429a      	cmp	r2, r3
 8008528:	d02c      	beq.n	8008584 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800852e:	2b00      	cmp	r3, #0
 8008530:	d128      	bne.n	8008584 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	3304      	adds	r3, #4
 8008536:	4618      	mov	r0, r3
 8008538:	f7fe f9be 	bl	80068b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008554:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <xTaskPriorityDisinherit+0xd4>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	429a      	cmp	r2, r3
 800855a:	d903      	bls.n	8008564 <xTaskPriorityDisinherit+0xa4>
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	4a0c      	ldr	r2, [pc, #48]	; (8008594 <xTaskPriorityDisinherit+0xd4>)
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4a09      	ldr	r2, [pc, #36]	; (8008598 <xTaskPriorityDisinherit+0xd8>)
 8008572:	441a      	add	r2, r3
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	3304      	adds	r3, #4
 8008578:	4619      	mov	r1, r3
 800857a:	4610      	mov	r0, r2
 800857c:	f7fe f93f 	bl	80067fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008580:	2301      	movs	r3, #1
 8008582:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008584:	697b      	ldr	r3, [r7, #20]
	}
 8008586:	4618      	mov	r0, r3
 8008588:	3718      	adds	r7, #24
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	200046cc 	.word	0x200046cc
 8008594:	20004ba8 	.word	0x20004ba8
 8008598:	200046d0 	.word	0x200046d0

0800859c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085a6:	4b21      	ldr	r3, [pc, #132]	; (800862c <prvAddCurrentTaskToDelayedList+0x90>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085ac:	4b20      	ldr	r3, [pc, #128]	; (8008630 <prvAddCurrentTaskToDelayedList+0x94>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3304      	adds	r3, #4
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fe f980 	bl	80068b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085be:	d10a      	bne.n	80085d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d007      	beq.n	80085d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085c6:	4b1a      	ldr	r3, [pc, #104]	; (8008630 <prvAddCurrentTaskToDelayedList+0x94>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3304      	adds	r3, #4
 80085cc:	4619      	mov	r1, r3
 80085ce:	4819      	ldr	r0, [pc, #100]	; (8008634 <prvAddCurrentTaskToDelayedList+0x98>)
 80085d0:	f7fe f915 	bl	80067fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085d4:	e026      	b.n	8008624 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4413      	add	r3, r2
 80085dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085de:	4b14      	ldr	r3, [pc, #80]	; (8008630 <prvAddCurrentTaskToDelayedList+0x94>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d209      	bcs.n	8008602 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085ee:	4b12      	ldr	r3, [pc, #72]	; (8008638 <prvAddCurrentTaskToDelayedList+0x9c>)
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	4b0f      	ldr	r3, [pc, #60]	; (8008630 <prvAddCurrentTaskToDelayedList+0x94>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3304      	adds	r3, #4
 80085f8:	4619      	mov	r1, r3
 80085fa:	4610      	mov	r0, r2
 80085fc:	f7fe f923 	bl	8006846 <vListInsert>
}
 8008600:	e010      	b.n	8008624 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008602:	4b0e      	ldr	r3, [pc, #56]	; (800863c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	4b0a      	ldr	r3, [pc, #40]	; (8008630 <prvAddCurrentTaskToDelayedList+0x94>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3304      	adds	r3, #4
 800860c:	4619      	mov	r1, r3
 800860e:	4610      	mov	r0, r2
 8008610:	f7fe f919 	bl	8006846 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008614:	4b0a      	ldr	r3, [pc, #40]	; (8008640 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	429a      	cmp	r2, r3
 800861c:	d202      	bcs.n	8008624 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800861e:	4a08      	ldr	r2, [pc, #32]	; (8008640 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	6013      	str	r3, [r2, #0]
}
 8008624:	bf00      	nop
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	20004ba4 	.word	0x20004ba4
 8008630:	200046cc 	.word	0x200046cc
 8008634:	20004b8c 	.word	0x20004b8c
 8008638:	20004b5c 	.word	0x20004b5c
 800863c:	20004b58 	.word	0x20004b58
 8008640:	20004bc0 	.word	0x20004bc0

08008644 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b08a      	sub	sp, #40	; 0x28
 8008648:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800864a:	2300      	movs	r3, #0
 800864c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800864e:	f000 fba1 	bl	8008d94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008652:	4b1c      	ldr	r3, [pc, #112]	; (80086c4 <xTimerCreateTimerTask+0x80>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d021      	beq.n	800869e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800865a:	2300      	movs	r3, #0
 800865c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800865e:	2300      	movs	r3, #0
 8008660:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008662:	1d3a      	adds	r2, r7, #4
 8008664:	f107 0108 	add.w	r1, r7, #8
 8008668:	f107 030c 	add.w	r3, r7, #12
 800866c:	4618      	mov	r0, r3
 800866e:	f7fd fe95 	bl	800639c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008672:	6879      	ldr	r1, [r7, #4]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	9202      	str	r2, [sp, #8]
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	2302      	movs	r3, #2
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	2300      	movs	r3, #0
 8008682:	460a      	mov	r2, r1
 8008684:	4910      	ldr	r1, [pc, #64]	; (80086c8 <xTimerCreateTimerTask+0x84>)
 8008686:	4811      	ldr	r0, [pc, #68]	; (80086cc <xTimerCreateTimerTask+0x88>)
 8008688:	f7ff f8b4 	bl	80077f4 <xTaskCreateStatic>
 800868c:	4603      	mov	r3, r0
 800868e:	4a10      	ldr	r2, [pc, #64]	; (80086d0 <xTimerCreateTimerTask+0x8c>)
 8008690:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008692:	4b0f      	ldr	r3, [pc, #60]	; (80086d0 <xTimerCreateTimerTask+0x8c>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800869a:	2301      	movs	r3, #1
 800869c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	613b      	str	r3, [r7, #16]
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80086ba:	697b      	ldr	r3, [r7, #20]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3718      	adds	r7, #24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	20004bfc 	.word	0x20004bfc
 80086c8:	08009534 	.word	0x08009534
 80086cc:	0800893d 	.word	0x0800893d
 80086d0:	20004c00 	.word	0x20004c00

080086d4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b088      	sub	sp, #32
 80086d8:	af02      	add	r7, sp, #8
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
 80086e0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80086e2:	202c      	movs	r0, #44	; 0x2c
 80086e4:	f7fd fe74 	bl	80063d0 <pvPortMalloc>
 80086e8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00d      	beq.n	800870c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	68b9      	ldr	r1, [r7, #8]
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 f843 	bl	8008792 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800870c:	697b      	ldr	r3, [r7, #20]
	}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008716:	b580      	push	{r7, lr}
 8008718:	b08a      	sub	sp, #40	; 0x28
 800871a:	af02      	add	r7, sp, #8
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	607a      	str	r2, [r7, #4]
 8008722:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008724:	232c      	movs	r3, #44	; 0x2c
 8008726:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	2b2c      	cmp	r3, #44	; 0x2c
 800872c:	d00a      	beq.n	8008744 <xTimerCreateStatic+0x2e>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	61bb      	str	r3, [r7, #24]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008744:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10a      	bne.n	8008762 <xTimerCreateStatic+0x4c>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	617b      	str	r3, [r7, #20]
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008764:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00d      	beq.n	8008788 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	9301      	str	r3, [sp, #4]
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	68b9      	ldr	r1, [r7, #8]
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f000 f805 	bl	8008792 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008788:	69fb      	ldr	r3, [r7, #28]
	}
 800878a:	4618      	mov	r0, r3
 800878c:	3720      	adds	r7, #32
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b086      	sub	sp, #24
 8008796:	af00      	add	r7, sp, #0
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	60b9      	str	r1, [r7, #8]
 800879c:	607a      	str	r2, [r7, #4]
 800879e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10a      	bne.n	80087bc <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80087a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	617b      	str	r3, [r7, #20]
}
 80087b8:	bf00      	nop
 80087ba:	e7fe      	b.n	80087ba <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d01e      	beq.n	8008800 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80087c2:	f000 fae7 	bl	8008d94 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	683a      	ldr	r2, [r7, #0]
 80087d6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	6a3a      	ldr	r2, [r7, #32]
 80087dc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	3304      	adds	r3, #4
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fd fffe 	bl	80067e4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d008      	beq.n	8008800 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087f4:	f043 0304 	orr.w	r3, r3, #4
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008800:	bf00      	nop
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08a      	sub	sp, #40	; 0x28
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008816:	2300      	movs	r3, #0
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10a      	bne.n	8008836 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	623b      	str	r3, [r7, #32]
}
 8008832:	bf00      	nop
 8008834:	e7fe      	b.n	8008834 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008836:	4b1a      	ldr	r3, [pc, #104]	; (80088a0 <xTimerGenericCommand+0x98>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d02a      	beq.n	8008894 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b05      	cmp	r3, #5
 800884e:	dc18      	bgt.n	8008882 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008850:	f7ff fe18 	bl	8008484 <xTaskGetSchedulerState>
 8008854:	4603      	mov	r3, r0
 8008856:	2b02      	cmp	r3, #2
 8008858:	d109      	bne.n	800886e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800885a:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <xTimerGenericCommand+0x98>)
 800885c:	6818      	ldr	r0, [r3, #0]
 800885e:	f107 0110 	add.w	r1, r7, #16
 8008862:	2300      	movs	r3, #0
 8008864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008866:	f7fe fbdd 	bl	8007024 <xQueueGenericSend>
 800886a:	6278      	str	r0, [r7, #36]	; 0x24
 800886c:	e012      	b.n	8008894 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800886e:	4b0c      	ldr	r3, [pc, #48]	; (80088a0 <xTimerGenericCommand+0x98>)
 8008870:	6818      	ldr	r0, [r3, #0]
 8008872:	f107 0110 	add.w	r1, r7, #16
 8008876:	2300      	movs	r3, #0
 8008878:	2200      	movs	r2, #0
 800887a:	f7fe fbd3 	bl	8007024 <xQueueGenericSend>
 800887e:	6278      	str	r0, [r7, #36]	; 0x24
 8008880:	e008      	b.n	8008894 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008882:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <xTimerGenericCommand+0x98>)
 8008884:	6818      	ldr	r0, [r3, #0]
 8008886:	f107 0110 	add.w	r1, r7, #16
 800888a:	2300      	movs	r3, #0
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	f7fe fcc7 	bl	8007220 <xQueueGenericSendFromISR>
 8008892:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008896:	4618      	mov	r0, r3
 8008898:	3728      	adds	r7, #40	; 0x28
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	20004bfc 	.word	0x20004bfc

080088a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b088      	sub	sp, #32
 80088a8:	af02      	add	r7, sp, #8
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ae:	4b22      	ldr	r3, [pc, #136]	; (8008938 <prvProcessExpiredTimer+0x94>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	3304      	adds	r3, #4
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fd fffb 	bl	80068b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088c8:	f003 0304 	and.w	r3, r3, #4
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d022      	beq.n	8008916 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	699a      	ldr	r2, [r3, #24]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	18d1      	adds	r1, r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	6978      	ldr	r0, [r7, #20]
 80088de:	f000 f8d1 	bl	8008a84 <prvInsertTimerInActiveList>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d01f      	beq.n	8008928 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088e8:	2300      	movs	r3, #0
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	2300      	movs	r3, #0
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	2100      	movs	r1, #0
 80088f2:	6978      	ldr	r0, [r7, #20]
 80088f4:	f7ff ff88 	bl	8008808 <xTimerGenericCommand>
 80088f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d113      	bne.n	8008928 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	60fb      	str	r3, [r7, #12]
}
 8008912:	bf00      	nop
 8008914:	e7fe      	b.n	8008914 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800891c:	f023 0301 	bic.w	r3, r3, #1
 8008920:	b2da      	uxtb	r2, r3
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	6978      	ldr	r0, [r7, #20]
 800892e:	4798      	blx	r3
}
 8008930:	bf00      	nop
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	20004bf4 	.word	0x20004bf4

0800893c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008944:	f107 0308 	add.w	r3, r7, #8
 8008948:	4618      	mov	r0, r3
 800894a:	f000 f857 	bl	80089fc <prvGetNextExpireTime>
 800894e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4619      	mov	r1, r3
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 f803 	bl	8008960 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800895a:	f000 f8d5 	bl	8008b08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800895e:	e7f1      	b.n	8008944 <prvTimerTask+0x8>

08008960 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800896a:	f7ff f99f 	bl	8007cac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800896e:	f107 0308 	add.w	r3, r7, #8
 8008972:	4618      	mov	r0, r3
 8008974:	f000 f866 	bl	8008a44 <prvSampleTimeNow>
 8008978:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d130      	bne.n	80089e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10a      	bne.n	800899c <prvProcessTimerOrBlockTask+0x3c>
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	429a      	cmp	r2, r3
 800898c:	d806      	bhi.n	800899c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800898e:	f7ff f99b 	bl	8007cc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008992:	68f9      	ldr	r1, [r7, #12]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff ff85 	bl	80088a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800899a:	e024      	b.n	80089e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d008      	beq.n	80089b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80089a2:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <prvProcessTimerOrBlockTask+0x90>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <prvProcessTimerOrBlockTask+0x50>
 80089ac:	2301      	movs	r3, #1
 80089ae:	e000      	b.n	80089b2 <prvProcessTimerOrBlockTask+0x52>
 80089b0:	2300      	movs	r3, #0
 80089b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80089b4:	4b0f      	ldr	r3, [pc, #60]	; (80089f4 <prvProcessTimerOrBlockTask+0x94>)
 80089b6:	6818      	ldr	r0, [r3, #0]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	4619      	mov	r1, r3
 80089c2:	f7fe fee3 	bl	800778c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80089c6:	f7ff f97f 	bl	8007cc8 <xTaskResumeAll>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10a      	bne.n	80089e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089d0:	4b09      	ldr	r3, [pc, #36]	; (80089f8 <prvProcessTimerOrBlockTask+0x98>)
 80089d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	f3bf 8f6f 	isb	sy
}
 80089e0:	e001      	b.n	80089e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80089e2:	f7ff f971 	bl	8007cc8 <xTaskResumeAll>
}
 80089e6:	bf00      	nop
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20004bf8 	.word	0x20004bf8
 80089f4:	20004bfc 	.word	0x20004bfc
 80089f8:	e000ed04 	.word	0xe000ed04

080089fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a04:	4b0e      	ldr	r3, [pc, #56]	; (8008a40 <prvGetNextExpireTime+0x44>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <prvGetNextExpireTime+0x16>
 8008a0e:	2201      	movs	r2, #1
 8008a10:	e000      	b.n	8008a14 <prvGetNextExpireTime+0x18>
 8008a12:	2200      	movs	r2, #0
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d105      	bne.n	8008a2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a20:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <prvGetNextExpireTime+0x44>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	60fb      	str	r3, [r7, #12]
 8008a2a:	e001      	b.n	8008a30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a30:	68fb      	ldr	r3, [r7, #12]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	20004bf4 	.word	0x20004bf4

08008a44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a4c:	f7ff f9da 	bl	8007e04 <xTaskGetTickCount>
 8008a50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a52:	4b0b      	ldr	r3, [pc, #44]	; (8008a80 <prvSampleTimeNow+0x3c>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d205      	bcs.n	8008a68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a5c:	f000 f936 	bl	8008ccc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	e002      	b.n	8008a6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a6e:	4a04      	ldr	r2, [pc, #16]	; (8008a80 <prvSampleTimeNow+0x3c>)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a74:	68fb      	ldr	r3, [r7, #12]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	20004c04 	.word	0x20004c04

08008a84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a92:	2300      	movs	r3, #0
 8008a94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d812      	bhi.n	8008ad0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	1ad2      	subs	r2, r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d302      	bcc.n	8008abe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	617b      	str	r3, [r7, #20]
 8008abc:	e01b      	b.n	8008af6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008abe:	4b10      	ldr	r3, [pc, #64]	; (8008b00 <prvInsertTimerInActiveList+0x7c>)
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	4610      	mov	r0, r2
 8008aca:	f7fd febc 	bl	8006846 <vListInsert>
 8008ace:	e012      	b.n	8008af6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d206      	bcs.n	8008ae6 <prvInsertTimerInActiveList+0x62>
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d302      	bcc.n	8008ae6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	617b      	str	r3, [r7, #20]
 8008ae4:	e007      	b.n	8008af6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ae6:	4b07      	ldr	r3, [pc, #28]	; (8008b04 <prvInsertTimerInActiveList+0x80>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3304      	adds	r3, #4
 8008aee:	4619      	mov	r1, r3
 8008af0:	4610      	mov	r0, r2
 8008af2:	f7fd fea8 	bl	8006846 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008af6:	697b      	ldr	r3, [r7, #20]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3718      	adds	r7, #24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	20004bf8 	.word	0x20004bf8
 8008b04:	20004bf4 	.word	0x20004bf4

08008b08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08e      	sub	sp, #56	; 0x38
 8008b0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b0e:	e0ca      	b.n	8008ca6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	da18      	bge.n	8008b48 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b16:	1d3b      	adds	r3, r7, #4
 8008b18:	3304      	adds	r3, #4
 8008b1a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10a      	bne.n	8008b38 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	61fb      	str	r3, [r7, #28]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b3e:	6850      	ldr	r0, [r2, #4]
 8008b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b42:	6892      	ldr	r2, [r2, #8]
 8008b44:	4611      	mov	r1, r2
 8008b46:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f2c0 80aa 	blt.w	8008ca4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d004      	beq.n	8008b66 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5e:	3304      	adds	r3, #4
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fd fea9 	bl	80068b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b66:	463b      	mov	r3, r7
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7ff ff6b 	bl	8008a44 <prvSampleTimeNow>
 8008b6e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b09      	cmp	r3, #9
 8008b74:	f200 8097 	bhi.w	8008ca6 <prvProcessReceivedCommands+0x19e>
 8008b78:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <prvProcessReceivedCommands+0x78>)
 8008b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7e:	bf00      	nop
 8008b80:	08008ba9 	.word	0x08008ba9
 8008b84:	08008ba9 	.word	0x08008ba9
 8008b88:	08008ba9 	.word	0x08008ba9
 8008b8c:	08008c1d 	.word	0x08008c1d
 8008b90:	08008c31 	.word	0x08008c31
 8008b94:	08008c7b 	.word	0x08008c7b
 8008b98:	08008ba9 	.word	0x08008ba9
 8008b9c:	08008ba9 	.word	0x08008ba9
 8008ba0:	08008c1d 	.word	0x08008c1d
 8008ba4:	08008c31 	.word	0x08008c31
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bae:	f043 0301 	orr.w	r3, r3, #1
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	18d1      	adds	r1, r2, r3
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bc8:	f7ff ff5c 	bl	8008a84 <prvInsertTimerInActiveList>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d069      	beq.n	8008ca6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008be0:	f003 0304 	and.w	r3, r3, #4
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d05e      	beq.n	8008ca6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	441a      	add	r2, r3
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bfa:	f7ff fe05 	bl	8008808 <xTimerGenericCommand>
 8008bfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d14f      	bne.n	8008ca6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0a:	f383 8811 	msr	BASEPRI, r3
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	f3bf 8f4f 	dsb	sy
 8008c16:	61bb      	str	r3, [r7, #24]
}
 8008c18:	bf00      	nop
 8008c1a:	e7fe      	b.n	8008c1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c22:	f023 0301 	bic.w	r3, r3, #1
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008c2e:	e03a      	b.n	8008ca6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c36:	f043 0301 	orr.w	r3, r3, #1
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10a      	bne.n	8008c66 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	617b      	str	r3, [r7, #20]
}
 8008c62:	bf00      	nop
 8008c64:	e7fe      	b.n	8008c64 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c68:	699a      	ldr	r2, [r3, #24]
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	18d1      	adds	r1, r2, r3
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c74:	f7ff ff06 	bl	8008a84 <prvInsertTimerInActiveList>
					break;
 8008c78:	e015      	b.n	8008ca6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c80:	f003 0302 	and.w	r3, r3, #2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d103      	bne.n	8008c90 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c8a:	f7fd fc6d 	bl	8006568 <vPortFree>
 8008c8e:	e00a      	b.n	8008ca6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c96:	f023 0301 	bic.w	r3, r3, #1
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ca2:	e000      	b.n	8008ca6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008ca4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ca6:	4b08      	ldr	r3, [pc, #32]	; (8008cc8 <prvProcessReceivedCommands+0x1c0>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	1d39      	adds	r1, r7, #4
 8008cac:	2200      	movs	r2, #0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe fb52 	bl	8007358 <xQueueReceive>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f47f af2a 	bne.w	8008b10 <prvProcessReceivedCommands+0x8>
	}
}
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	3730      	adds	r7, #48	; 0x30
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20004bfc 	.word	0x20004bfc

08008ccc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b088      	sub	sp, #32
 8008cd0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cd2:	e048      	b.n	8008d66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cd4:	4b2d      	ldr	r3, [pc, #180]	; (8008d8c <prvSwitchTimerLists+0xc0>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cde:	4b2b      	ldr	r3, [pc, #172]	; (8008d8c <prvSwitchTimerLists+0xc0>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3304      	adds	r3, #4
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fd fde3 	bl	80068b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d02e      	beq.n	8008d66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	4413      	add	r3, r2
 8008d10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d90e      	bls.n	8008d38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d26:	4b19      	ldr	r3, [pc, #100]	; (8008d8c <prvSwitchTimerLists+0xc0>)
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	4619      	mov	r1, r3
 8008d30:	4610      	mov	r0, r2
 8008d32:	f7fd fd88 	bl	8006846 <vListInsert>
 8008d36:	e016      	b.n	8008d66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d38:	2300      	movs	r3, #0
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	2100      	movs	r1, #0
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f7ff fd60 	bl	8008808 <xTimerGenericCommand>
 8008d48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	603b      	str	r3, [r7, #0]
}
 8008d62:	bf00      	nop
 8008d64:	e7fe      	b.n	8008d64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d66:	4b09      	ldr	r3, [pc, #36]	; (8008d8c <prvSwitchTimerLists+0xc0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1b1      	bne.n	8008cd4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d70:	4b06      	ldr	r3, [pc, #24]	; (8008d8c <prvSwitchTimerLists+0xc0>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d76:	4b06      	ldr	r3, [pc, #24]	; (8008d90 <prvSwitchTimerLists+0xc4>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a04      	ldr	r2, [pc, #16]	; (8008d8c <prvSwitchTimerLists+0xc0>)
 8008d7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d7e:	4a04      	ldr	r2, [pc, #16]	; (8008d90 <prvSwitchTimerLists+0xc4>)
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	6013      	str	r3, [r2, #0]
}
 8008d84:	bf00      	nop
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	20004bf4 	.word	0x20004bf4
 8008d90:	20004bf8 	.word	0x20004bf8

08008d94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d9a:	f7fd fee3 	bl	8006b64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d9e:	4b15      	ldr	r3, [pc, #84]	; (8008df4 <prvCheckForValidListAndQueue+0x60>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d120      	bne.n	8008de8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008da6:	4814      	ldr	r0, [pc, #80]	; (8008df8 <prvCheckForValidListAndQueue+0x64>)
 8008da8:	f7fd fcfc 	bl	80067a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008dac:	4813      	ldr	r0, [pc, #76]	; (8008dfc <prvCheckForValidListAndQueue+0x68>)
 8008dae:	f7fd fcf9 	bl	80067a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008db2:	4b13      	ldr	r3, [pc, #76]	; (8008e00 <prvCheckForValidListAndQueue+0x6c>)
 8008db4:	4a10      	ldr	r2, [pc, #64]	; (8008df8 <prvCheckForValidListAndQueue+0x64>)
 8008db6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008db8:	4b12      	ldr	r3, [pc, #72]	; (8008e04 <prvCheckForValidListAndQueue+0x70>)
 8008dba:	4a10      	ldr	r2, [pc, #64]	; (8008dfc <prvCheckForValidListAndQueue+0x68>)
 8008dbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	4b11      	ldr	r3, [pc, #68]	; (8008e08 <prvCheckForValidListAndQueue+0x74>)
 8008dc4:	4a11      	ldr	r2, [pc, #68]	; (8008e0c <prvCheckForValidListAndQueue+0x78>)
 8008dc6:	2110      	movs	r1, #16
 8008dc8:	200a      	movs	r0, #10
 8008dca:	f7fe f855 	bl	8006e78 <xQueueGenericCreateStatic>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	4a08      	ldr	r2, [pc, #32]	; (8008df4 <prvCheckForValidListAndQueue+0x60>)
 8008dd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008dd4:	4b07      	ldr	r3, [pc, #28]	; (8008df4 <prvCheckForValidListAndQueue+0x60>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d005      	beq.n	8008de8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ddc:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <prvCheckForValidListAndQueue+0x60>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	490b      	ldr	r1, [pc, #44]	; (8008e10 <prvCheckForValidListAndQueue+0x7c>)
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe fca8 	bl	8007738 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008de8:	f7fd feec 	bl	8006bc4 <vPortExitCritical>
}
 8008dec:	bf00      	nop
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20004bfc 	.word	0x20004bfc
 8008df8:	20004bcc 	.word	0x20004bcc
 8008dfc:	20004be0 	.word	0x20004be0
 8008e00:	20004bf4 	.word	0x20004bf4
 8008e04:	20004bf8 	.word	0x20004bf8
 8008e08:	20004ca8 	.word	0x20004ca8
 8008e0c:	20004c08 	.word	0x20004c08
 8008e10:	0800953c 	.word	0x0800953c

08008e14 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10a      	bne.n	8008e3c <pvTimerGetTimerID+0x28>
	__asm volatile
 8008e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	60fb      	str	r3, [r7, #12]
}
 8008e38:	bf00      	nop
 8008e3a:	e7fe      	b.n	8008e3a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008e3c:	f7fd fe92 	bl	8006b64 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008e46:	f7fd febd 	bl	8006bc4 <vPortExitCritical>

	return pvReturn;
 8008e4a:	693b      	ldr	r3, [r7, #16]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3718      	adds	r7, #24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <__libc_init_array>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	4d0d      	ldr	r5, [pc, #52]	; (8008e8c <__libc_init_array+0x38>)
 8008e58:	4c0d      	ldr	r4, [pc, #52]	; (8008e90 <__libc_init_array+0x3c>)
 8008e5a:	1b64      	subs	r4, r4, r5
 8008e5c:	10a4      	asrs	r4, r4, #2
 8008e5e:	2600      	movs	r6, #0
 8008e60:	42a6      	cmp	r6, r4
 8008e62:	d109      	bne.n	8008e78 <__libc_init_array+0x24>
 8008e64:	4d0b      	ldr	r5, [pc, #44]	; (8008e94 <__libc_init_array+0x40>)
 8008e66:	4c0c      	ldr	r4, [pc, #48]	; (8008e98 <__libc_init_array+0x44>)
 8008e68:	f000 f8f2 	bl	8009050 <_init>
 8008e6c:	1b64      	subs	r4, r4, r5
 8008e6e:	10a4      	asrs	r4, r4, #2
 8008e70:	2600      	movs	r6, #0
 8008e72:	42a6      	cmp	r6, r4
 8008e74:	d105      	bne.n	8008e82 <__libc_init_array+0x2e>
 8008e76:	bd70      	pop	{r4, r5, r6, pc}
 8008e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e7c:	4798      	blx	r3
 8008e7e:	3601      	adds	r6, #1
 8008e80:	e7ee      	b.n	8008e60 <__libc_init_array+0xc>
 8008e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e86:	4798      	blx	r3
 8008e88:	3601      	adds	r6, #1
 8008e8a:	e7f2      	b.n	8008e72 <__libc_init_array+0x1e>
 8008e8c:	08009684 	.word	0x08009684
 8008e90:	08009684 	.word	0x08009684
 8008e94:	08009684 	.word	0x08009684
 8008e98:	08009688 	.word	0x08009688

08008e9c <__retarget_lock_acquire_recursive>:
 8008e9c:	4770      	bx	lr

08008e9e <__retarget_lock_release_recursive>:
 8008e9e:	4770      	bx	lr

08008ea0 <memcpy>:
 8008ea0:	440a      	add	r2, r1
 8008ea2:	4291      	cmp	r1, r2
 8008ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ea8:	d100      	bne.n	8008eac <memcpy+0xc>
 8008eaa:	4770      	bx	lr
 8008eac:	b510      	push	{r4, lr}
 8008eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eb6:	4291      	cmp	r1, r2
 8008eb8:	d1f9      	bne.n	8008eae <memcpy+0xe>
 8008eba:	bd10      	pop	{r4, pc}

08008ebc <memset>:
 8008ebc:	4402      	add	r2, r0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d100      	bne.n	8008ec6 <memset+0xa>
 8008ec4:	4770      	bx	lr
 8008ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8008eca:	e7f9      	b.n	8008ec0 <memset+0x4>

08008ecc <cleanup_glue>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	460c      	mov	r4, r1
 8008ed0:	6809      	ldr	r1, [r1, #0]
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	b109      	cbz	r1, 8008eda <cleanup_glue+0xe>
 8008ed6:	f7ff fff9 	bl	8008ecc <cleanup_glue>
 8008eda:	4621      	mov	r1, r4
 8008edc:	4628      	mov	r0, r5
 8008ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ee2:	f000 b869 	b.w	8008fb8 <_free_r>
	...

08008ee8 <_reclaim_reent>:
 8008ee8:	4b2c      	ldr	r3, [pc, #176]	; (8008f9c <_reclaim_reent+0xb4>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4283      	cmp	r3, r0
 8008eee:	b570      	push	{r4, r5, r6, lr}
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	d051      	beq.n	8008f98 <_reclaim_reent+0xb0>
 8008ef4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008ef6:	b143      	cbz	r3, 8008f0a <_reclaim_reent+0x22>
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d14a      	bne.n	8008f94 <_reclaim_reent+0xac>
 8008efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f00:	6819      	ldr	r1, [r3, #0]
 8008f02:	b111      	cbz	r1, 8008f0a <_reclaim_reent+0x22>
 8008f04:	4620      	mov	r0, r4
 8008f06:	f000 f857 	bl	8008fb8 <_free_r>
 8008f0a:	6961      	ldr	r1, [r4, #20]
 8008f0c:	b111      	cbz	r1, 8008f14 <_reclaim_reent+0x2c>
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f000 f852 	bl	8008fb8 <_free_r>
 8008f14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f16:	b111      	cbz	r1, 8008f1e <_reclaim_reent+0x36>
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f000 f84d 	bl	8008fb8 <_free_r>
 8008f1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008f20:	b111      	cbz	r1, 8008f28 <_reclaim_reent+0x40>
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 f848 	bl	8008fb8 <_free_r>
 8008f28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008f2a:	b111      	cbz	r1, 8008f32 <_reclaim_reent+0x4a>
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f000 f843 	bl	8008fb8 <_free_r>
 8008f32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008f34:	b111      	cbz	r1, 8008f3c <_reclaim_reent+0x54>
 8008f36:	4620      	mov	r0, r4
 8008f38:	f000 f83e 	bl	8008fb8 <_free_r>
 8008f3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008f3e:	b111      	cbz	r1, 8008f46 <_reclaim_reent+0x5e>
 8008f40:	4620      	mov	r0, r4
 8008f42:	f000 f839 	bl	8008fb8 <_free_r>
 8008f46:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008f48:	b111      	cbz	r1, 8008f50 <_reclaim_reent+0x68>
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 f834 	bl	8008fb8 <_free_r>
 8008f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f52:	b111      	cbz	r1, 8008f5a <_reclaim_reent+0x72>
 8008f54:	4620      	mov	r0, r4
 8008f56:	f000 f82f 	bl	8008fb8 <_free_r>
 8008f5a:	69a3      	ldr	r3, [r4, #24]
 8008f5c:	b1e3      	cbz	r3, 8008f98 <_reclaim_reent+0xb0>
 8008f5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f60:	4620      	mov	r0, r4
 8008f62:	4798      	blx	r3
 8008f64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008f66:	b1b9      	cbz	r1, 8008f98 <_reclaim_reent+0xb0>
 8008f68:	4620      	mov	r0, r4
 8008f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f6e:	f7ff bfad 	b.w	8008ecc <cleanup_glue>
 8008f72:	5949      	ldr	r1, [r1, r5]
 8008f74:	b941      	cbnz	r1, 8008f88 <_reclaim_reent+0xa0>
 8008f76:	3504      	adds	r5, #4
 8008f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f7a:	2d80      	cmp	r5, #128	; 0x80
 8008f7c:	68d9      	ldr	r1, [r3, #12]
 8008f7e:	d1f8      	bne.n	8008f72 <_reclaim_reent+0x8a>
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 f819 	bl	8008fb8 <_free_r>
 8008f86:	e7ba      	b.n	8008efe <_reclaim_reent+0x16>
 8008f88:	680e      	ldr	r6, [r1, #0]
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f000 f814 	bl	8008fb8 <_free_r>
 8008f90:	4631      	mov	r1, r6
 8008f92:	e7ef      	b.n	8008f74 <_reclaim_reent+0x8c>
 8008f94:	2500      	movs	r5, #0
 8008f96:	e7ef      	b.n	8008f78 <_reclaim_reent+0x90>
 8008f98:	bd70      	pop	{r4, r5, r6, pc}
 8008f9a:	bf00      	nop
 8008f9c:	20000014 	.word	0x20000014

08008fa0 <__malloc_lock>:
 8008fa0:	4801      	ldr	r0, [pc, #4]	; (8008fa8 <__malloc_lock+0x8>)
 8008fa2:	f7ff bf7b 	b.w	8008e9c <__retarget_lock_acquire_recursive>
 8008fa6:	bf00      	nop
 8008fa8:	20004cf8 	.word	0x20004cf8

08008fac <__malloc_unlock>:
 8008fac:	4801      	ldr	r0, [pc, #4]	; (8008fb4 <__malloc_unlock+0x8>)
 8008fae:	f7ff bf76 	b.w	8008e9e <__retarget_lock_release_recursive>
 8008fb2:	bf00      	nop
 8008fb4:	20004cf8 	.word	0x20004cf8

08008fb8 <_free_r>:
 8008fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fba:	2900      	cmp	r1, #0
 8008fbc:	d044      	beq.n	8009048 <_free_r+0x90>
 8008fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc2:	9001      	str	r0, [sp, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8008fca:	bfb8      	it	lt
 8008fcc:	18e4      	addlt	r4, r4, r3
 8008fce:	f7ff ffe7 	bl	8008fa0 <__malloc_lock>
 8008fd2:	4a1e      	ldr	r2, [pc, #120]	; (800904c <_free_r+0x94>)
 8008fd4:	9801      	ldr	r0, [sp, #4]
 8008fd6:	6813      	ldr	r3, [r2, #0]
 8008fd8:	b933      	cbnz	r3, 8008fe8 <_free_r+0x30>
 8008fda:	6063      	str	r3, [r4, #4]
 8008fdc:	6014      	str	r4, [r2, #0]
 8008fde:	b003      	add	sp, #12
 8008fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fe4:	f7ff bfe2 	b.w	8008fac <__malloc_unlock>
 8008fe8:	42a3      	cmp	r3, r4
 8008fea:	d908      	bls.n	8008ffe <_free_r+0x46>
 8008fec:	6825      	ldr	r5, [r4, #0]
 8008fee:	1961      	adds	r1, r4, r5
 8008ff0:	428b      	cmp	r3, r1
 8008ff2:	bf01      	itttt	eq
 8008ff4:	6819      	ldreq	r1, [r3, #0]
 8008ff6:	685b      	ldreq	r3, [r3, #4]
 8008ff8:	1949      	addeq	r1, r1, r5
 8008ffa:	6021      	streq	r1, [r4, #0]
 8008ffc:	e7ed      	b.n	8008fda <_free_r+0x22>
 8008ffe:	461a      	mov	r2, r3
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	b10b      	cbz	r3, 8009008 <_free_r+0x50>
 8009004:	42a3      	cmp	r3, r4
 8009006:	d9fa      	bls.n	8008ffe <_free_r+0x46>
 8009008:	6811      	ldr	r1, [r2, #0]
 800900a:	1855      	adds	r5, r2, r1
 800900c:	42a5      	cmp	r5, r4
 800900e:	d10b      	bne.n	8009028 <_free_r+0x70>
 8009010:	6824      	ldr	r4, [r4, #0]
 8009012:	4421      	add	r1, r4
 8009014:	1854      	adds	r4, r2, r1
 8009016:	42a3      	cmp	r3, r4
 8009018:	6011      	str	r1, [r2, #0]
 800901a:	d1e0      	bne.n	8008fde <_free_r+0x26>
 800901c:	681c      	ldr	r4, [r3, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	6053      	str	r3, [r2, #4]
 8009022:	4421      	add	r1, r4
 8009024:	6011      	str	r1, [r2, #0]
 8009026:	e7da      	b.n	8008fde <_free_r+0x26>
 8009028:	d902      	bls.n	8009030 <_free_r+0x78>
 800902a:	230c      	movs	r3, #12
 800902c:	6003      	str	r3, [r0, #0]
 800902e:	e7d6      	b.n	8008fde <_free_r+0x26>
 8009030:	6825      	ldr	r5, [r4, #0]
 8009032:	1961      	adds	r1, r4, r5
 8009034:	428b      	cmp	r3, r1
 8009036:	bf04      	itt	eq
 8009038:	6819      	ldreq	r1, [r3, #0]
 800903a:	685b      	ldreq	r3, [r3, #4]
 800903c:	6063      	str	r3, [r4, #4]
 800903e:	bf04      	itt	eq
 8009040:	1949      	addeq	r1, r1, r5
 8009042:	6021      	streq	r1, [r4, #0]
 8009044:	6054      	str	r4, [r2, #4]
 8009046:	e7ca      	b.n	8008fde <_free_r+0x26>
 8009048:	b003      	add	sp, #12
 800904a:	bd30      	pop	{r4, r5, pc}
 800904c:	20004cfc 	.word	0x20004cfc

08009050 <_init>:
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009052:	bf00      	nop
 8009054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009056:	bc08      	pop	{r3}
 8009058:	469e      	mov	lr, r3
 800905a:	4770      	bx	lr

0800905c <_fini>:
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	bf00      	nop
 8009060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009062:	bc08      	pop	{r3}
 8009064:	469e      	mov	lr, r3
 8009066:	4770      	bx	lr
