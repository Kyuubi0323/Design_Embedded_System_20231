
Embedded_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001436c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002218  08014510  08014510  00024510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016728  08016728  0003020c  2**0
                  CONTENTS
  4 .ARM          00000008  08016728  08016728  00026728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016730  08016730  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016730  08016730  00026730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016734  08016734  00026734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08016738  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f08  2000020c  08016944  0003020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005114  08016944  00035114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027f6a  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b20  00000000  00000000  000581a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef0  00000000  00000000  0005dcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ce8  00000000  00000000  0005fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce45  00000000  00000000  000618a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b4f5  00000000  00000000  0007e6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0708  00000000  00000000  000a9bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a2e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009834  00000000  00000000  0014a334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080144f4 	.word	0x080144f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	080144f4 	.word	0x080144f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Touch_binary */
  Touch_binaryHandle = osSemaphoreNew(1, 1, &Touch_binary_attributes);
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_FREERTOS_Init+0x8c>)
 800100e:	2101      	movs	r1, #1
 8001010:	2001      	movs	r0, #1
 8001012:	f00a fa22 	bl	800b45a <osSemaphoreNew>
 8001016:	4603      	mov	r3, r0
 8001018:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <MX_FREERTOS_Init+0x90>)
 800101a:	6013      	str	r3, [r2, #0]

  /* creation of Uart_binary */
  Uart_binaryHandle = osSemaphoreNew(1, 1, &Uart_binary_attributes);
 800101c:	4a1f      	ldr	r2, [pc, #124]	; (800109c <MX_FREERTOS_Init+0x94>)
 800101e:	2101      	movs	r1, #1
 8001020:	2001      	movs	r0, #1
 8001022:	f00a fa1a 	bl	800b45a <osSemaphoreNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <MX_FREERTOS_Init+0x98>)
 800102a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Timer02 */
  Timer02Handle = osTimerNew(LCD_Timeout, osTimerOnce, NULL, &Timer02_attributes);
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_FREERTOS_Init+0x9c>)
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	481d      	ldr	r0, [pc, #116]	; (80010a8 <MX_FREERTOS_Init+0xa0>)
 8001034:	f00a f930 	bl	800b298 <osTimerNew>
 8001038:	4603      	mov	r3, r0
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MX_FREERTOS_Init+0xa4>)
 800103c:	6013      	str	r3, [r2, #0]

  /* creation of Timer03 */
  Timer03Handle = osTimerNew(Measure_Timer, osTimerPeriodic, NULL, &Timer03_attributes);
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <MX_FREERTOS_Init+0xa8>)
 8001040:	2200      	movs	r2, #0
 8001042:	2101      	movs	r1, #1
 8001044:	481b      	ldr	r0, [pc, #108]	; (80010b4 <MX_FREERTOS_Init+0xac>)
 8001046:	f00a f927 	bl	800b298 <osTimerNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a1a      	ldr	r2, [pc, #104]	; (80010b8 <MX_FREERTOS_Init+0xb0>)
 800104e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SuperQueue */
  SuperQueueHandle = osMessageQueueNew (64, sizeof(uint16_t), &SuperQueue_attributes);
 8001050:	4a1a      	ldr	r2, [pc, #104]	; (80010bc <MX_FREERTOS_Init+0xb4>)
 8001052:	2102      	movs	r1, #2
 8001054:	2040      	movs	r0, #64	; 0x40
 8001056:	f00a fb1f 	bl	800b698 <osMessageQueueNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <MX_FREERTOS_Init+0xb8>)
 800105e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LCD */
  LCDHandle = osThreadNew(LCD_task, NULL, &LCD_attributes);
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <MX_FREERTOS_Init+0xbc>)
 8001062:	2100      	movs	r1, #0
 8001064:	4818      	ldr	r0, [pc, #96]	; (80010c8 <MX_FREERTOS_Init+0xc0>)
 8001066:	f00a f813 	bl	800b090 <osThreadNew>
 800106a:	4603      	mov	r3, r0
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <MX_FREERTOS_Init+0xc4>)
 800106e:	6013      	str	r3, [r2, #0]

  /* creation of IRQ */
  IRQHandle = osThreadNew(IRQ_task, NULL, &IRQ_attributes);
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <MX_FREERTOS_Init+0xc8>)
 8001072:	2100      	movs	r1, #0
 8001074:	4817      	ldr	r0, [pc, #92]	; (80010d4 <MX_FREERTOS_Init+0xcc>)
 8001076:	f00a f80b 	bl	800b090 <osThreadNew>
 800107a:	4603      	mov	r3, r0
 800107c:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <MX_FREERTOS_Init+0xd0>)
 800107e:	6013      	str	r3, [r2, #0]

  /* creation of Uart_user */
  Uart_userHandle = osThreadNew(Uart_task, NULL, &Uart_user_attributes);
 8001080:	4a16      	ldr	r2, [pc, #88]	; (80010dc <MX_FREERTOS_Init+0xd4>)
 8001082:	2100      	movs	r1, #0
 8001084:	4816      	ldr	r0, [pc, #88]	; (80010e0 <MX_FREERTOS_Init+0xd8>)
 8001086:	f00a f803 	bl	800b090 <osThreadNew>
 800108a:	4603      	mov	r3, r0
 800108c:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <MX_FREERTOS_Init+0xdc>)
 800108e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	08014d50 	.word	0x08014d50
 8001098:	2000030c 	.word	0x2000030c
 800109c:	08014d60 	.word	0x08014d60
 80010a0:	20000310 	.word	0x20000310
 80010a4:	08014d30 	.word	0x08014d30
 80010a8:	0800179d 	.word	0x0800179d
 80010ac:	20000304 	.word	0x20000304
 80010b0:	08014d40 	.word	0x08014d40
 80010b4:	080017e9 	.word	0x080017e9
 80010b8:	20000308 	.word	0x20000308
 80010bc:	08014d18 	.word	0x08014d18
 80010c0:	20000300 	.word	0x20000300
 80010c4:	08014cac 	.word	0x08014cac
 80010c8:	080010e9 	.word	0x080010e9
 80010cc:	200002f4 	.word	0x200002f4
 80010d0:	08014cd0 	.word	0x08014cd0
 80010d4:	080015e1 	.word	0x080015e1
 80010d8:	200002f8 	.word	0x200002f8
 80010dc:	08014cf4 	.word	0x08014cf4
 80010e0:	0800170d 	.word	0x0800170d
 80010e4:	200002fc 	.word	0x200002fc

080010e8 <LCD_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LCD_task */
void LCD_task(void *argument)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	6078      	str	r0, [r7, #4]
	char Strgbpm[4] ;
	char Strgspo2[4];
//	char *payload = {0};

	//Display
	ILI9341_Unselect();
 80010f0:	f001 ff94 	bl	800301c <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 80010f4:	f002 fb72 	bl	80037dc <ILI9341_TouchUnselect>
	ILI9341_Init();
 80010f8:	f002 f842 	bl	8003180 <ILI9341_Init>
	ILI9341_FillScreen(ILI9341_BLACK);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f002 fb5b 	bl	80037b8 <ILI9341_FillScreen>
	//Background
	ILI9341_WriteString(10, 10, "Embedded Design System 20231", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001102:	4bb9      	ldr	r3, [pc, #740]	; (80013e8 <LCD_task+0x300>)
 8001104:	2200      	movs	r2, #0
 8001106:	9202      	str	r2, [sp, #8]
 8001108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110c:	9201      	str	r2, [sp, #4]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4ab5      	ldr	r2, [pc, #724]	; (80013ec <LCD_task+0x304>)
 8001116:	210a      	movs	r1, #10
 8001118:	200a      	movs	r0, #10
 800111a:	f002 fa92 	bl	8003642 <ILI9341_WriteString>
	ILI9341_WriteString(30, 40, "20202647", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 800111e:	4bb4      	ldr	r3, [pc, #720]	; (80013f0 <LCD_task+0x308>)
 8001120:	2200      	movs	r2, #0
 8001122:	9202      	str	r2, [sp, #8]
 8001124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001128:	9201      	str	r2, [sp, #4]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	9200      	str	r2, [sp, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4ab0      	ldr	r2, [pc, #704]	; (80013f4 <LCD_task+0x30c>)
 8001132:	2128      	movs	r1, #40	; 0x28
 8001134:	201e      	movs	r0, #30
 8001136:	f002 fa84 	bl	8003642 <ILI9341_WriteString>
	ILI9341_WriteString(235, 40, "20202543", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 800113a:	4bad      	ldr	r3, [pc, #692]	; (80013f0 <LCD_task+0x308>)
 800113c:	2200      	movs	r2, #0
 800113e:	9202      	str	r2, [sp, #8]
 8001140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001144:	9201      	str	r2, [sp, #4]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	9200      	str	r2, [sp, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4aaa      	ldr	r2, [pc, #680]	; (80013f8 <LCD_task+0x310>)
 800114e:	2128      	movs	r1, #40	; 0x28
 8001150:	20eb      	movs	r0, #235	; 0xeb
 8001152:	f002 fa76 	bl	8003642 <ILI9341_WriteString>
	ILI9341_DrawLine(0, 55, 320, 55, ILI9341_WHITE);
 8001156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2337      	movs	r3, #55	; 0x37
 800115e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001162:	2137      	movs	r1, #55	; 0x37
 8001164:	2000      	movs	r0, #0
 8001166:	f002 f972 	bl	800344e <ILI9341_DrawLine>
	ILI9341_DrawLine(0, 200, 320, 200, ILI9341_WHITE);
 800116a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	23c8      	movs	r3, #200	; 0xc8
 8001172:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001176:	21c8      	movs	r1, #200	; 0xc8
 8001178:	2000      	movs	r0, #0
 800117a:	f002 f968 	bl	800344e <ILI9341_DrawLine>
	ILI9341_DrawLine(250, 55, 250, 200, ILI9341_WHITE);
 800117e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	23c8      	movs	r3, #200	; 0xc8
 8001186:	22fa      	movs	r2, #250	; 0xfa
 8001188:	2137      	movs	r1, #55	; 0x37
 800118a:	20fa      	movs	r0, #250	; 0xfa
 800118c:	f002 f95f 	bl	800344e <ILI9341_DrawLine>
	ILI9341_WriteString(10, 180, "Mode:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001190:	4b95      	ldr	r3, [pc, #596]	; (80013e8 <LCD_task+0x300>)
 8001192:	2200      	movs	r2, #0
 8001194:	9202      	str	r2, [sp, #8]
 8001196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119a:	9201      	str	r2, [sp, #4]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	9200      	str	r2, [sp, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a96      	ldr	r2, [pc, #600]	; (80013fc <LCD_task+0x314>)
 80011a4:	21b4      	movs	r1, #180	; 0xb4
 80011a6:	200a      	movs	r0, #10
 80011a8:	f002 fa4b 	bl	8003642 <ILI9341_WriteString>
	ILI9341_WriteString(150, 180, "Hello", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 80011ac:	4b8e      	ldr	r3, [pc, #568]	; (80013e8 <LCD_task+0x300>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	9202      	str	r2, [sp, #8]
 80011b2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80011b6:	9201      	str	r2, [sp, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	9200      	str	r2, [sp, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a90      	ldr	r2, [pc, #576]	; (8001400 <LCD_task+0x318>)
 80011c0:	21b4      	movs	r1, #180	; 0xb4
 80011c2:	2096      	movs	r0, #150	; 0x96
 80011c4:	f002 fa3d 	bl	8003642 <ILI9341_WriteString>
	ILI9341_WriteString(100, 210, "MANDEVICES", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 80011c8:	4b87      	ldr	r3, [pc, #540]	; (80013e8 <LCD_task+0x300>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	9202      	str	r2, [sp, #8]
 80011ce:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80011d2:	9201      	str	r2, [sp, #4]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a8a      	ldr	r2, [pc, #552]	; (8001404 <LCD_task+0x31c>)
 80011dc:	21d2      	movs	r1, #210	; 0xd2
 80011de:	2064      	movs	r0, #100	; 0x64
 80011e0:	f002 fa2f 	bl	8003642 <ILI9341_WriteString>

	//Data
	ILI9341_WriteString(10, 60, "Temperature:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80011e4:	4b80      	ldr	r3, [pc, #512]	; (80013e8 <LCD_task+0x300>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	9202      	str	r2, [sp, #8]
 80011ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ee:	9201      	str	r2, [sp, #4]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	9200      	str	r2, [sp, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a84      	ldr	r2, [pc, #528]	; (8001408 <LCD_task+0x320>)
 80011f8:	213c      	movs	r1, #60	; 0x3c
 80011fa:	200a      	movs	r0, #10
 80011fc:	f002 fa21 	bl	8003642 <ILI9341_WriteString>
	ftoa(Node_1.Temperature, StrgTemp, 1);
 8001200:	4b82      	ldr	r3, [pc, #520]	; (800140c <LCD_task+0x324>)
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	2101      	movs	r1, #1
 800120c:	4618      	mov	r0, r3
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	f001 f981 	bl	8002518 <ftoa>
	ILI9341_WriteString(150, 60, StrgTemp, Font_11x18, ILI9341_ORANGE, ILI9341_BLACK);
 8001216:	4b74      	ldr	r3, [pc, #464]	; (80013e8 <LCD_task+0x300>)
 8001218:	f107 0114 	add.w	r1, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	9202      	str	r2, [sp, #8]
 8001220:	f64f 5220 	movw	r2, #64800	; 0xfd20
 8001224:	9201      	str	r2, [sp, #4]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	9200      	str	r2, [sp, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	460a      	mov	r2, r1
 800122e:	213c      	movs	r1, #60	; 0x3c
 8001230:	2096      	movs	r0, #150	; 0x96
 8001232:	f002 fa06 	bl	8003642 <ILI9341_WriteString>

	ILI9341_WriteString(10, 90, "Humidity:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001236:	4b6c      	ldr	r3, [pc, #432]	; (80013e8 <LCD_task+0x300>)
 8001238:	2200      	movs	r2, #0
 800123a:	9202      	str	r2, [sp, #8]
 800123c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001240:	9201      	str	r2, [sp, #4]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	9200      	str	r2, [sp, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a71      	ldr	r2, [pc, #452]	; (8001410 <LCD_task+0x328>)
 800124a:	215a      	movs	r1, #90	; 0x5a
 800124c:	200a      	movs	r0, #10
 800124e:	f002 f9f8 	bl	8003642 <ILI9341_WriteString>
	intToStr((int)Node_1.Humidity, StrgHumd, 2);
 8001252:	4b6e      	ldr	r3, [pc, #440]	; (800140c <LCD_task+0x324>)
 8001254:	edd3 7a01 	vldr	s15, [r3, #4]
 8001258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	2202      	movs	r2, #2
 8001262:	4619      	mov	r1, r3
 8001264:	ee17 0a90 	vmov	r0, s15
 8001268:	f001 f9b2 	bl	80025d0 <intToStr>
	ILI9341_WriteString(150, 90, StrgHumd, Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 800126c:	4b5e      	ldr	r3, [pc, #376]	; (80013e8 <LCD_task+0x300>)
 800126e:	f107 0110 	add.w	r1, r7, #16
 8001272:	2200      	movs	r2, #0
 8001274:	9202      	str	r2, [sp, #8]
 8001276:	221f      	movs	r2, #31
 8001278:	9201      	str	r2, [sp, #4]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	9200      	str	r2, [sp, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	460a      	mov	r2, r1
 8001282:	215a      	movs	r1, #90	; 0x5a
 8001284:	2096      	movs	r0, #150	; 0x96
 8001286:	f002 f9dc 	bl	8003642 <ILI9341_WriteString>
	ILI9341_WriteString(180, 90, "%", Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 800128a:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <LCD_task+0x300>)
 800128c:	2200      	movs	r2, #0
 800128e:	9202      	str	r2, [sp, #8]
 8001290:	221f      	movs	r2, #31
 8001292:	9201      	str	r2, [sp, #4]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	9200      	str	r2, [sp, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a5e      	ldr	r2, [pc, #376]	; (8001414 <LCD_task+0x32c>)
 800129c:	215a      	movs	r1, #90	; 0x5a
 800129e:	20b4      	movs	r0, #180	; 0xb4
 80012a0:	f002 f9cf 	bl	8003642 <ILI9341_WriteString>

	ILI9341_WriteString(10, 120, "BPM:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80012a4:	4b50      	ldr	r3, [pc, #320]	; (80013e8 <LCD_task+0x300>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	9202      	str	r2, [sp, #8]
 80012aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ae:	9201      	str	r2, [sp, #4]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	9200      	str	r2, [sp, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a58      	ldr	r2, [pc, #352]	; (8001418 <LCD_task+0x330>)
 80012b8:	2178      	movs	r1, #120	; 0x78
 80012ba:	200a      	movs	r0, #10
 80012bc:	f002 f9c1 	bl	8003642 <ILI9341_WriteString>
	intToStr(Node_1.bpm, Strgbpm, 2);
 80012c0:	4b52      	ldr	r3, [pc, #328]	; (800140c <LCD_task+0x324>)
 80012c2:	7a1b      	ldrb	r3, [r3, #8]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	2202      	movs	r2, #2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f001 f97f 	bl	80025d0 <intToStr>
	ILI9341_WriteString(150, 120, Strgbpm, Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 80012d2:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <LCD_task+0x300>)
 80012d4:	f107 010c 	add.w	r1, r7, #12
 80012d8:	2200      	movs	r2, #0
 80012da:	9202      	str	r2, [sp, #8]
 80012dc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80012e0:	9201      	str	r2, [sp, #4]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	9200      	str	r2, [sp, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	460a      	mov	r2, r1
 80012ea:	2178      	movs	r1, #120	; 0x78
 80012ec:	2096      	movs	r0, #150	; 0x96
 80012ee:	f002 f9a8 	bl	8003642 <ILI9341_WriteString>

	ILI9341_WriteString(10, 150, "Spo2:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80012f2:	4b3d      	ldr	r3, [pc, #244]	; (80013e8 <LCD_task+0x300>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	9202      	str	r2, [sp, #8]
 80012f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fc:	9201      	str	r2, [sp, #4]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	9200      	str	r2, [sp, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a45      	ldr	r2, [pc, #276]	; (800141c <LCD_task+0x334>)
 8001306:	2196      	movs	r1, #150	; 0x96
 8001308:	200a      	movs	r0, #10
 800130a:	f002 f99a 	bl	8003642 <ILI9341_WriteString>
	intToStr(Node_1.spo2, Strgspo2, 2);
 800130e:	4b3f      	ldr	r3, [pc, #252]	; (800140c <LCD_task+0x324>)
 8001310:	7a5b      	ldrb	r3, [r3, #9]
 8001312:	4618      	mov	r0, r3
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2202      	movs	r2, #2
 800131a:	4619      	mov	r1, r3
 800131c:	f001 f958 	bl	80025d0 <intToStr>
	ILI9341_WriteString(150, 150, Strgspo2, Font_11x18, ILI9341_PINK, ILI9341_BLACK);
 8001320:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <LCD_task+0x300>)
 8001322:	f107 0108 	add.w	r1, r7, #8
 8001326:	2200      	movs	r2, #0
 8001328:	9202      	str	r2, [sp, #8]
 800132a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800132e:	9201      	str	r2, [sp, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	9200      	str	r2, [sp, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	460a      	mov	r2, r1
 8001338:	2196      	movs	r1, #150	; 0x96
 800133a:	2096      	movs	r0, #150	; 0x96
 800133c:	f002 f981 	bl	8003642 <ILI9341_WriteString>
//			ILI9341_DrawCircle(Button_1.pos_x, Button_1.pos_y, Button_1.shape_r/4, ILI9341_BLACK);
//		}

	//start timer and softimer

	osTimerStart(Timer02Handle, Timeout);
 8001340:	4b37      	ldr	r3, [pc, #220]	; (8001420 <LCD_task+0x338>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001348:	4618      	mov	r0, r3
 800134a:	f00a f821 	bl	800b390 <osTimerStart>
	osTimerStart(Timer03Handle, MeasurePeriod);
 800134e:	4b35      	ldr	r3, [pc, #212]	; (8001424 <LCD_task+0x33c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f241 3188 	movw	r1, #5000	; 0x1388
 8001356:	4618      	mov	r0, r3
 8001358:	f00a f81a 	bl	800b390 <osTimerStart>

	HAL_TIM_Base_Start_IT(&htim11);
 800135c:	4832      	ldr	r0, [pc, #200]	; (8001428 <LCD_task+0x340>)
 800135e:	f007 fe25 	bl	8008fac <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	osThreadSuspend(LCDHandle);
 8001362:	4b32      	ldr	r3, [pc, #200]	; (800142c <LCD_task+0x344>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f009 ff24 	bl	800b1b4 <osThreadSuspend>
	Time_keeper.LCD_Time[0] = HAL_GetTick();
 800136c:	f002 fe90 	bl	8004090 <HAL_GetTick>
 8001370:	4603      	mov	r3, r0
 8001372:	4a2f      	ldr	r2, [pc, #188]	; (8001430 <LCD_task+0x348>)
 8001374:	6013      	str	r3, [r2, #0]
	if (HAL_GPIO_ReadPin(IRQ_MAX_GPIO_Port, IRQ_MAX_Pin) == GPIO_PIN_RESET)
 8001376:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137a:	482e      	ldr	r0, [pc, #184]	; (8001434 <LCD_task+0x34c>)
 800137c:	f003 fc3c 	bl	8004bf8 <HAL_GPIO_ReadPin>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d113      	bne.n	80013ae <LCD_task+0x2c6>
	{
		max30102_cal();
 8001386:	f002 fc97 	bl	8003cb8 <max30102_cal>
		Node_1.bpm = max30102_getHeartRate();
 800138a:	f002 fe09 	bl	8003fa0 <max30102_getHeartRate>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	4b1e      	ldr	r3, [pc, #120]	; (800140c <LCD_task+0x324>)
 8001394:	721a      	strb	r2, [r3, #8]
		Node_1.spo2 = max30102_getSpO2();
 8001396:	f002 fe0f 	bl	8003fb8 <max30102_getSpO2>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <LCD_task+0x324>)
 80013a0:	725a      	strb	r2, [r3, #9]
		HAL_UART_Transmit(&huart2, (uint8_t *) "\x1B[31m[Action]: Done\r\n", 24, 10);
 80013a2:	230a      	movs	r3, #10
 80013a4:	2218      	movs	r2, #24
 80013a6:	4924      	ldr	r1, [pc, #144]	; (8001438 <LCD_task+0x350>)
 80013a8:	4824      	ldr	r0, [pc, #144]	; (800143c <LCD_task+0x354>)
 80013aa:	f008 fd73 	bl	8009e94 <HAL_UART_Transmit>
	}
	DS18B20_ReadAll();
 80013ae:	f001 fb11 	bl	80029d4 <DS18B20_ReadAll>
	DS18B20_StartAll();
 80013b2:	f001 f98f 	bl	80026d4 <DS18B20_StartAll>

	Temperature = ds18b20[0].Temperature;
 80013b6:	4b22      	ldr	r3, [pc, #136]	; (8001440 <LCD_task+0x358>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	4a22      	ldr	r2, [pc, #136]	; (8001444 <LCD_task+0x35c>)
 80013bc:	6013      	str	r3, [r2, #0]
	memset(message, 0, sizeof(message));
 80013be:	2264      	movs	r2, #100	; 0x64
 80013c0:	2100      	movs	r1, #0
 80013c2:	4821      	ldr	r0, [pc, #132]	; (8001448 <LCD_task+0x360>)
 80013c4:	f00d fd9d 	bl	800ef02 <memset>
	sprintf(message, "Temp: %2.2f\n\r", Temperature);
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <LCD_task+0x35c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8c3 	bl	8000558 <__aeabi_f2d>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	491d      	ldr	r1, [pc, #116]	; (800144c <LCD_task+0x364>)
 80013d8:	481b      	ldr	r0, [pc, #108]	; (8001448 <LCD_task+0x360>)
 80013da:	f00e fd29 	bl	800fe30 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), 100);
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	2264      	movs	r2, #100	; 0x64
 80013e2:	4919      	ldr	r1, [pc, #100]	; (8001448 <LCD_task+0x360>)
 80013e4:	e034      	b.n	8001450 <LCD_task+0x368>
 80013e6:	bf00      	nop
 80013e8:	20000024 	.word	0x20000024
 80013ec:	08014564 	.word	0x08014564
 80013f0:	2000001c 	.word	0x2000001c
 80013f4:	08014584 	.word	0x08014584
 80013f8:	08014590 	.word	0x08014590
 80013fc:	0801459c 	.word	0x0801459c
 8001400:	080145a4 	.word	0x080145a4
 8001404:	080145ac 	.word	0x080145ac
 8001408:	080145b8 	.word	0x080145b8
 800140c:	20000228 	.word	0x20000228
 8001410:	080145c8 	.word	0x080145c8
 8001414:	080145d4 	.word	0x080145d4
 8001418:	080145d8 	.word	0x080145d8
 800141c:	080145e0 	.word	0x080145e0
 8001420:	20000304 	.word	0x20000304
 8001424:	20000308 	.word	0x20000308
 8001428:	20000454 	.word	0x20000454
 800142c:	200002f4 	.word	0x200002f4
 8001430:	20000234 	.word	0x20000234
 8001434:	40020400 	.word	0x40020400
 8001438:	080145e8 	.word	0x080145e8
 800143c:	2000049c 	.word	0x2000049c
 8001440:	200004e0 	.word	0x200004e0
 8001444:	200002f0 	.word	0x200002f0
 8001448:	2000028c 	.word	0x2000028c
 800144c:	08014600 	.word	0x08014600
 8001450:	4859      	ldr	r0, [pc, #356]	; (80015b8 <LCD_task+0x4d0>)
 8001452:	f008 fd1f 	bl	8009e94 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", sizeof("\n\r"), 100);
 8001456:	2364      	movs	r3, #100	; 0x64
 8001458:	2203      	movs	r2, #3
 800145a:	4958      	ldr	r1, [pc, #352]	; (80015bc <LCD_task+0x4d4>)
 800145c:	4856      	ldr	r0, [pc, #344]	; (80015b8 <LCD_task+0x4d0>)
 800145e:	f008 fd19 	bl	8009e94 <HAL_UART_Transmit>
	Node_1.Temperature = Temperature;
 8001462:	4b57      	ldr	r3, [pc, #348]	; (80015c0 <LCD_task+0x4d8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a57      	ldr	r2, [pc, #348]	; (80015c4 <LCD_task+0x4dc>)
 8001468:	6013      	str	r3, [r2, #0]




	//Update
	ftoa(Node_1.Temperature, StrgTemp, 1);
 800146a:	4b56      	ldr	r3, [pc, #344]	; (80015c4 <LCD_task+0x4dc>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2101      	movs	r1, #1
 8001476:	4618      	mov	r0, r3
 8001478:	eeb0 0a67 	vmov.f32	s0, s15
 800147c:	f001 f84c 	bl	8002518 <ftoa>
	ILI9341_WriteString(150, 60, StrgTemp, Font_11x18, ILI9341_ORANGE, ILI9341_BLACK);
 8001480:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <LCD_task+0x4e0>)
 8001482:	f107 0114 	add.w	r1, r7, #20
 8001486:	2200      	movs	r2, #0
 8001488:	9202      	str	r2, [sp, #8]
 800148a:	f64f 5220 	movw	r2, #64800	; 0xfd20
 800148e:	9201      	str	r2, [sp, #4]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	9200      	str	r2, [sp, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	460a      	mov	r2, r1
 8001498:	213c      	movs	r1, #60	; 0x3c
 800149a:	2096      	movs	r0, #150	; 0x96
 800149c:	f002 f8d1 	bl	8003642 <ILI9341_WriteString>

	intToStr((int)Node_1.Humidity, StrgHumd, 2);
 80014a0:	4b48      	ldr	r3, [pc, #288]	; (80015c4 <LCD_task+0x4dc>)
 80014a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80014a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	2202      	movs	r2, #2
 80014b0:	4619      	mov	r1, r3
 80014b2:	ee17 0a90 	vmov	r0, s15
 80014b6:	f001 f88b 	bl	80025d0 <intToStr>
	ILI9341_WriteString(150, 90, StrgHumd, Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 80014ba:	4b43      	ldr	r3, [pc, #268]	; (80015c8 <LCD_task+0x4e0>)
 80014bc:	f107 0110 	add.w	r1, r7, #16
 80014c0:	2200      	movs	r2, #0
 80014c2:	9202      	str	r2, [sp, #8]
 80014c4:	221f      	movs	r2, #31
 80014c6:	9201      	str	r2, [sp, #4]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	9200      	str	r2, [sp, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	460a      	mov	r2, r1
 80014d0:	215a      	movs	r1, #90	; 0x5a
 80014d2:	2096      	movs	r0, #150	; 0x96
 80014d4:	f002 f8b5 	bl	8003642 <ILI9341_WriteString>
	ILI9341_WriteString(180, 90, "%", Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 80014d8:	4b3b      	ldr	r3, [pc, #236]	; (80015c8 <LCD_task+0x4e0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	9202      	str	r2, [sp, #8]
 80014de:	221f      	movs	r2, #31
 80014e0:	9201      	str	r2, [sp, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	9200      	str	r2, [sp, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a38      	ldr	r2, [pc, #224]	; (80015cc <LCD_task+0x4e4>)
 80014ea:	215a      	movs	r1, #90	; 0x5a
 80014ec:	20b4      	movs	r0, #180	; 0xb4
 80014ee:	f002 f8a8 	bl	8003642 <ILI9341_WriteString>

	intToStr(Node_1.bpm, Strgbpm, 2);
 80014f2:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <LCD_task+0x4dc>)
 80014f4:	7a1b      	ldrb	r3, [r3, #8]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2202      	movs	r2, #2
 80014fe:	4619      	mov	r1, r3
 8001500:	f001 f866 	bl	80025d0 <intToStr>
	ILI9341_WriteString(150, 120, Strgbpm, Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 8001504:	4b30      	ldr	r3, [pc, #192]	; (80015c8 <LCD_task+0x4e0>)
 8001506:	f107 010c 	add.w	r1, r7, #12
 800150a:	2200      	movs	r2, #0
 800150c:	9202      	str	r2, [sp, #8]
 800150e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001512:	9201      	str	r2, [sp, #4]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	9200      	str	r2, [sp, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	460a      	mov	r2, r1
 800151c:	2178      	movs	r1, #120	; 0x78
 800151e:	2096      	movs	r0, #150	; 0x96
 8001520:	f002 f88f 	bl	8003642 <ILI9341_WriteString>

	intToStr(Node_1.spo2, Strgspo2, 2);
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <LCD_task+0x4dc>)
 8001526:	7a5b      	ldrb	r3, [r3, #9]
 8001528:	4618      	mov	r0, r3
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	2202      	movs	r2, #2
 8001530:	4619      	mov	r1, r3
 8001532:	f001 f84d 	bl	80025d0 <intToStr>
	ILI9341_WriteString(150, 150, Strgspo2, Font_11x18, ILI9341_PINK, ILI9341_BLACK);
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <LCD_task+0x4e0>)
 8001538:	f107 0108 	add.w	r1, r7, #8
 800153c:	2200      	movs	r2, #0
 800153e:	9202      	str	r2, [sp, #8]
 8001540:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001544:	9201      	str	r2, [sp, #4]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	9200      	str	r2, [sp, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	460a      	mov	r2, r1
 800154e:	2196      	movs	r1, #150	; 0x96
 8001550:	2096      	movs	r0, #150	; 0x96
 8001552:	f002 f876 	bl	8003642 <ILI9341_WriteString>
	//check button state
	if (Button_1.state == 1)
 8001556:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <LCD_task+0x4e8>)
 8001558:	7b1b      	ldrb	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00f      	beq.n	800157e <LCD_task+0x496>
		{
			ILI9341_WriteString(260, 120, "Bad ", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <LCD_task+0x4e0>)
 8001560:	2200      	movs	r2, #0
 8001562:	9202      	str	r2, [sp, #8]
 8001564:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001568:	9201      	str	r2, [sp, #4]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	9200      	str	r2, [sp, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <LCD_task+0x4ec>)
 8001572:	2178      	movs	r1, #120	; 0x78
 8001574:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001578:	f002 f863 	bl	8003642 <ILI9341_WriteString>
 800157c:	e00e      	b.n	800159c <LCD_task+0x4b4>
//			ILI9341_FillCircle(Button_1.pos_x, Button_1.pos_y + 0.5, Button_1.shape_r, ILI9341_BLUE);
//			ILI9341_DrawCircle(Button_1.pos_x, Button_1.pos_y, Button_1.shape_r/4, ILI9341_BLACK);
		}
	else
		{
			ILI9341_WriteString(260, 120 , "Good", Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <LCD_task+0x4e0>)
 8001580:	2200      	movs	r2, #0
 8001582:	9202      	str	r2, [sp, #8]
 8001584:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001588:	9201      	str	r2, [sp, #4]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	9200      	str	r2, [sp, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <LCD_task+0x4f0>)
 8001592:	2178      	movs	r1, #120	; 0x78
 8001594:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001598:	f002 f853 	bl	8003642 <ILI9341_WriteString>
//	sprintf(payload, "{temp}: %2.2f, {humd}: %2f %, {bpm}: %2d, {spo2}: %2d \r\n", Node_1.Temperature, Node_1.Humidity, Node_1.bpm, Node_1.spo2);
//	HAL_UART_Transmit(&huart2, (uint8_t *) payload, strlen(payload), 200);

//	memset(payload, 0, strlen(payload));

	Time_keeper.LCD_Time[1] = HAL_GetTick();
 800159c:	f002 fd78 	bl	8004090 <HAL_GetTick>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <LCD_task+0x4f4>)
 80015a4:	6053      	str	r3, [r2, #4]
	Time_keeper.LCD_Time[2] = Time_keeper.LCD_Time[1] - Time_keeper.LCD_Time[0];
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <LCD_task+0x4f4>)
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <LCD_task+0x4f4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <LCD_task+0x4f4>)
 80015b2:	6093      	str	r3, [r2, #8]
	osThreadSuspend(LCDHandle);
 80015b4:	e6d5      	b.n	8001362 <LCD_task+0x27a>
 80015b6:	bf00      	nop
 80015b8:	2000049c 	.word	0x2000049c
 80015bc:	08014610 	.word	0x08014610
 80015c0:	200002f0 	.word	0x200002f0
 80015c4:	20000228 	.word	0x20000228
 80015c8:	20000024 	.word	0x20000024
 80015cc:	080145d4 	.word	0x080145d4
 80015d0:	20000004 	.word	0x20000004
 80015d4:	08014614 	.word	0x08014614
 80015d8:	0801461c 	.word	0x0801461c
 80015dc:	20000234 	.word	0x20000234

080015e0 <IRQ_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IRQ_task */
void IRQ_task(void *argument)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IRQ_task */
	uint32_t currentTick = 0, lastTick = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	if (osSemaphoreAcquire(Touch_binaryHandle, portMAX_DELAY) == osOK)
 80015f0:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <IRQ_task+0xfc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295
 80015f8:	4618      	mov	r0, r3
 80015fa:	f009 ffb7 	bl	800b56c <osSemaphoreAcquire>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f5      	bne.n	80015f0 <IRQ_task+0x10>
	{
		Time_keeper.IRQ_Time[0] = HAL_GetTick();
 8001604:	f002 fd44 	bl	8004090 <HAL_GetTick>
 8001608:	4603      	mov	r3, r0
 800160a:	4a35      	ldr	r2, [pc, #212]	; (80016e0 <IRQ_task+0x100>)
 800160c:	60d3      	str	r3, [r2, #12]
		osDelay(100);
 800160e:	2064      	movs	r0, #100	; 0x64
 8001610:	f009 fe12 	bl	800b238 <osDelay>



		//debounce irq touch
		currentTick = HAL_GetTick();
 8001614:	f002 fd3c 	bl	8004090 <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
		if ((HAL_GPIO_ReadPin(T_IRQ_GPIO_Port, T_IRQ_Pin) == 0) && (currentTick - lastTick > 500))
 800161a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161e:	4831      	ldr	r0, [pc, #196]	; (80016e4 <IRQ_task+0x104>)
 8001620:	f003 faea 	bl	8004bf8 <HAL_GPIO_ReadPin>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1e2      	bne.n	80015f0 <IRQ_task+0x10>
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001634:	d9dc      	bls.n	80015f0 <IRQ_task+0x10>
		{
			osThreadResume(LCDHandle);
 8001636:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <IRQ_task+0x108>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f009 fddb 	bl	800b1f6 <osThreadResume>

			HAL_UART_Transmit(&huart2, (uint8_t *) "\x1b[32m[Action]: Touch\r\n", 24, 10);
 8001640:	230a      	movs	r3, #10
 8001642:	2218      	movs	r2, #24
 8001644:	4929      	ldr	r1, [pc, #164]	; (80016ec <IRQ_task+0x10c>)
 8001646:	482a      	ldr	r0, [pc, #168]	; (80016f0 <IRQ_task+0x110>)
 8001648:	f008 fc24 	bl	8009e94 <HAL_UART_Transmit>
			lastTick = currentTick;
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60fb      	str	r3, [r7, #12]

			//init spi lcd
			HAL_SPI_DeInit(&hspi1);
 8001650:	4828      	ldr	r0, [pc, #160]	; (80016f4 <IRQ_task+0x114>)
 8001652:	f006 ffdb 	bl	800860c <HAL_SPI_DeInit>
			hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001656:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <IRQ_task+0x114>)
 8001658:	2230      	movs	r2, #48	; 0x30
 800165a:	61da      	str	r2, [r3, #28]
			HAL_SPI_Init(&hspi1);
 800165c:	4825      	ldr	r0, [pc, #148]	; (80016f4 <IRQ_task+0x114>)
 800165e:	f006 fe41 	bl	80082e4 <HAL_SPI_Init>

			//reset Timeout Timer
			osTimerStop(Timer02Handle);
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <IRQ_task+0x118>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f009 fec0 	bl	800b3ec <osTimerStop>
			osTimerStart(Timer02Handle, 100);
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <IRQ_task+0x118>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2164      	movs	r1, #100	; 0x64
 8001672:	4618      	mov	r0, r3
 8001674:	f009 fe8c 	bl	800b390 <osTimerStart>

			//Handle touch
			if (Mode == SLEEP)
 8001678:	4b20      	ldr	r3, [pc, #128]	; (80016fc <IRQ_task+0x11c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d113      	bne.n	80016a8 <IRQ_task+0xc8>
			{
				Mode = ACTIVE;
 8001680:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <IRQ_task+0x11c>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, 1);
 8001686:	2201      	movs	r2, #1
 8001688:	2102      	movs	r1, #2
 800168a:	481d      	ldr	r0, [pc, #116]	; (8001700 <IRQ_task+0x120>)
 800168c:	f003 fada 	bl	8004c44 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, (uint8_t *) "\x1b[32m[Action]: Wake\r\n", 23, 10);
 8001690:	230a      	movs	r3, #10
 8001692:	2217      	movs	r2, #23
 8001694:	491b      	ldr	r1, [pc, #108]	; (8001704 <IRQ_task+0x124>)
 8001696:	4816      	ldr	r0, [pc, #88]	; (80016f0 <IRQ_task+0x110>)
 8001698:	f008 fbfc 	bl	8009e94 <HAL_UART_Transmit>
				osThreadResume(LCDHandle);
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <IRQ_task+0x108>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f009 fda8 	bl	800b1f6 <osThreadResume>
 80016a6:	e005      	b.n	80016b4 <IRQ_task+0xd4>
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t *) "\x1b[32m[Action]: Active\r\n", 24, 10);
 80016a8:	230a      	movs	r3, #10
 80016aa:	2218      	movs	r2, #24
 80016ac:	4916      	ldr	r1, [pc, #88]	; (8001708 <IRQ_task+0x128>)
 80016ae:	4810      	ldr	r0, [pc, #64]	; (80016f0 <IRQ_task+0x110>)
 80016b0:	f008 fbf0 	bl	8009e94 <HAL_UART_Transmit>
			}
			osTimerStart(Timer02Handle, Timeout);
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <IRQ_task+0x118>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f64e 2160 	movw	r1, #60000	; 0xea60
 80016bc:	4618      	mov	r0, r3
 80016be:	f009 fe67 	bl	800b390 <osTimerStart>
			Time_keeper.IRQ_Time[1] = HAL_GetTick();
 80016c2:	f002 fce5 	bl	8004090 <HAL_GetTick>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <IRQ_task+0x100>)
 80016ca:	6113      	str	r3, [r2, #16]
			Time_keeper.IRQ_Time[2] = Time_keeper.IRQ_Time[1] - Time_keeper.IRQ_Time[0];
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <IRQ_task+0x100>)
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <IRQ_task+0x100>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	4a02      	ldr	r2, [pc, #8]	; (80016e0 <IRQ_task+0x100>)
 80016d8:	6153      	str	r3, [r2, #20]
	if (osSemaphoreAcquire(Touch_binaryHandle, portMAX_DELAY) == osOK)
 80016da:	e789      	b.n	80015f0 <IRQ_task+0x10>
 80016dc:	2000030c 	.word	0x2000030c
 80016e0:	20000234 	.word	0x20000234
 80016e4:	40020000 	.word	0x40020000
 80016e8:	200002f4 	.word	0x200002f4
 80016ec:	08014624 	.word	0x08014624
 80016f0:	2000049c 	.word	0x2000049c
 80016f4:	20000368 	.word	0x20000368
 80016f8:	20000304 	.word	0x20000304
 80016fc:	20000000 	.word	0x20000000
 8001700:	40020400 	.word	0x40020400
 8001704:	0801463c 	.word	0x0801463c
 8001708:	08014654 	.word	0x08014654

0800170c <Uart_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Uart_task */
void Uart_task(void *argument)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Uart_task */

	HAL_UART_Transmit(&huart2, (uint8_t *) EDS_INFO, 282, 50);
 8001714:	2332      	movs	r3, #50	; 0x32
 8001716:	f44f 728d 	mov.w	r2, #282	; 0x11a
 800171a:	4918      	ldr	r1, [pc, #96]	; (800177c <Uart_task+0x70>)
 800171c:	4818      	ldr	r0, [pc, #96]	; (8001780 <Uart_task+0x74>)
 800171e:	f008 fbb9 	bl	8009e94 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *) EDS_INFO_FM, 143, 50);
 8001722:	2332      	movs	r3, #50	; 0x32
 8001724:	228f      	movs	r2, #143	; 0x8f
 8001726:	4917      	ldr	r1, [pc, #92]	; (8001784 <Uart_task+0x78>)
 8001728:	4815      	ldr	r0, [pc, #84]	; (8001780 <Uart_task+0x74>)
 800172a:	f008 fbb3 	bl	8009e94 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *) "[Action]: Init..\r\n", 18, 10);
 800172e:	230a      	movs	r3, #10
 8001730:	2212      	movs	r2, #18
 8001732:	4915      	ldr	r1, [pc, #84]	; (8001788 <Uart_task+0x7c>)
 8001734:	4812      	ldr	r0, [pc, #72]	; (8001780 <Uart_task+0x74>)
 8001736:	f008 fbad 	bl	8009e94 <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(Uart_binaryHandle, osWaitForever) == osOK)
 800173a:	4b14      	ldr	r3, [pc, #80]	; (800178c <Uart_task+0x80>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f04f 31ff 	mov.w	r1, #4294967295
 8001742:	4618      	mov	r0, r3
 8001744:	f009 ff12 	bl	800b56c <osSemaphoreAcquire>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f5      	bne.n	800173a <Uart_task+0x2e>
		  {
		  	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800174e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001752:	480f      	ldr	r0, [pc, #60]	; (8001790 <Uart_task+0x84>)
 8001754:	f003 faa8 	bl	8004ca8 <HAL_GPIO_TogglePin>
		  	  HAL_UART_Transmit(&huart2, (uint8_t *) action, sizeof(action), 10);
 8001758:	230a      	movs	r3, #10
 800175a:	2232      	movs	r2, #50	; 0x32
 800175c:	490d      	ldr	r1, [pc, #52]	; (8001794 <Uart_task+0x88>)
 800175e:	4808      	ldr	r0, [pc, #32]	; (8001780 <Uart_task+0x74>)
 8001760:	f008 fb98 	bl	8009e94 <HAL_UART_Transmit>
		  	  memset(action, 0, sizeof(action));
 8001764:	2232      	movs	r2, #50	; 0x32
 8001766:	2100      	movs	r1, #0
 8001768:	480a      	ldr	r0, [pc, #40]	; (8001794 <Uart_task+0x88>)
 800176a:	f00d fbca 	bl	800ef02 <memset>
		  	  HAL_UART_Transmit(&huart2, (uint8_t *) "[Action]: Acquire\r\n", 19, 10);
 800176e:	230a      	movs	r3, #10
 8001770:	2213      	movs	r2, #19
 8001772:	4909      	ldr	r1, [pc, #36]	; (8001798 <Uart_task+0x8c>)
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <Uart_task+0x74>)
 8001776:	f008 fb8d 	bl	8009e94 <HAL_UART_Transmit>
	  if (osSemaphoreAcquire(Uart_binaryHandle, osWaitForever) == osOK)
 800177a:	e7de      	b.n	800173a <Uart_task+0x2e>
 800177c:	0801466c 	.word	0x0801466c
 8001780:	2000049c 	.word	0x2000049c
 8001784:	08014788 	.word	0x08014788
 8001788:	08014818 	.word	0x08014818
 800178c:	20000310 	.word	0x20000310
 8001790:	40020800 	.word	0x40020800
 8001794:	20000258 	.word	0x20000258
 8001798:	0801482c 	.word	0x0801482c

0800179c <LCD_Timeout>:
  /* USER CODE END Uart_task */
}

/* LCD_Timeout function */
void LCD_Timeout(void *argument)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCD_Timeout */
	HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2102      	movs	r1, #2
 80017a8:	480a      	ldr	r0, [pc, #40]	; (80017d4 <LCD_Timeout+0x38>)
 80017aa:	f003 fa4b 	bl	8004c44 <HAL_GPIO_WritePin>
	Mode = SLEEP;
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <LCD_Timeout+0x3c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) "\x1B[34m[Action]: Sleep\r\n", 24, 50);
 80017b4:	2332      	movs	r3, #50	; 0x32
 80017b6:	2218      	movs	r2, #24
 80017b8:	4908      	ldr	r1, [pc, #32]	; (80017dc <LCD_Timeout+0x40>)
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <LCD_Timeout+0x44>)
 80017bc:	f008 fb6a 	bl	8009e94 <HAL_UART_Transmit>
	osThreadSuspend(LCDHandle);
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <LCD_Timeout+0x48>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f009 fcf5 	bl	800b1b4 <osThreadSuspend>
  /* USER CODE END LCD_Timeout */
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40020400 	.word	0x40020400
 80017d8:	20000000 	.word	0x20000000
 80017dc:	08014840 	.word	0x08014840
 80017e0:	2000049c 	.word	0x2000049c
 80017e4:	200002f4 	.word	0x200002f4

080017e8 <Measure_Timer>:

/* Measure_Timer function */
void Measure_Timer(void *argument)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af04      	add	r7, sp, #16
 80017ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Measure_Timer */

	ILI9341_WriteString(150, 180, "Measure", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <Measure_Timer+0x90>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	9202      	str	r2, [sp, #8]
 80017f6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80017fa:	9201      	str	r2, [sp, #4]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	9200      	str	r2, [sp, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a1e      	ldr	r2, [pc, #120]	; (800187c <Measure_Timer+0x94>)
 8001804:	21b4      	movs	r1, #180	; 0xb4
 8001806:	2096      	movs	r0, #150	; 0x96
 8001808:	f001 ff1b 	bl	8003642 <ILI9341_WriteString>
	Time_keeper.Measure_Time[0] = HAL_GetTick();
 800180c:	f002 fc40 	bl	8004090 <HAL_GetTick>
 8001810:	4603      	mov	r3, r0
 8001812:	4a1b      	ldr	r2, [pc, #108]	; (8001880 <Measure_Timer+0x98>)
 8001814:	6193      	str	r3, [r2, #24]
	HAL_UART_Transmit(&huart2, (uint8_t *) "\x1B[31m[Action]: Measure\r\n", 26, 100);
 8001816:	2364      	movs	r3, #100	; 0x64
 8001818:	221a      	movs	r2, #26
 800181a:	491a      	ldr	r1, [pc, #104]	; (8001884 <Measure_Timer+0x9c>)
 800181c:	481a      	ldr	r0, [pc, #104]	; (8001888 <Measure_Timer+0xa0>)
 800181e:	f008 fb39 	bl	8009e94 <HAL_UART_Transmit>
   	//uint16_t Presence = DHT_Check_Response ();
	//uint8_t temp = DHT.Temperature;



	Time_keeper.Measure_Time[1] = HAL_GetTick();
 8001822:	f002 fc35 	bl	8004090 <HAL_GetTick>
 8001826:	4603      	mov	r3, r0
 8001828:	4a15      	ldr	r2, [pc, #84]	; (8001880 <Measure_Timer+0x98>)
 800182a:	61d3      	str	r3, [r2, #28]
	Time_keeper.Measure_Time[2] = Time_keeper.Measure_Time[1] - Time_keeper.Measure_Time[0];
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <Measure_Timer+0x98>)
 800182e:	69da      	ldr	r2, [r3, #28]
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <Measure_Timer+0x98>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <Measure_Timer+0x98>)
 8001838:	6213      	str	r3, [r2, #32]

	osDelay(1000);
 800183a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800183e:	f009 fcfb 	bl	800b238 <osDelay>
	ILI9341_WriteString(150, 180, "Idle   ", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <Measure_Timer+0x90>)
 8001844:	2200      	movs	r2, #0
 8001846:	9202      	str	r2, [sp, #8]
 8001848:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800184c:	9201      	str	r2, [sp, #4]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	9200      	str	r2, [sp, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <Measure_Timer+0xa4>)
 8001856:	21b4      	movs	r1, #180	; 0xb4
 8001858:	2096      	movs	r0, #150	; 0x96
 800185a:	f001 fef2 	bl	8003642 <ILI9341_WriteString>
	if (Mode == ACTIVE)
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <Measure_Timer+0xa8>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d104      	bne.n	8001870 <Measure_Timer+0x88>
		osThreadResume(LCDHandle);
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <Measure_Timer+0xac>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f009 fcc3 	bl	800b1f6 <osThreadResume>
  /* USER CODE END Measure_Timer */
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000024 	.word	0x20000024
 800187c:	08014858 	.word	0x08014858
 8001880:	20000234 	.word	0x20000234
 8001884:	08014860 	.word	0x08014860
 8001888:	2000049c 	.word	0x2000049c
 800188c:	0801487c 	.word	0x0801487c
 8001890:	20000000 	.word	0x20000000
 8001894:	200002f4 	.word	0x200002f4

08001898 <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == T_IRQ_Pin)
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018a8:	d11c      	bne.n	80018e4 <HAL_GPIO_EXTI_Callback+0x4c>
  {
	  	Button_1.state = !Button_1.state;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_GPIO_EXTI_Callback+0x54>)
 80018ac:	7b1b      	ldrb	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	bf14      	ite	ne
 80018b2:	2301      	movne	r3, #1
 80018b4:	2300      	moveq	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f083 0301 	eor.w	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_GPIO_EXTI_Callback+0x54>)
 80018c6:	731a      	strb	r2, [r3, #12]
	  	//Node_1.Temperature = 28;
	  	Node_1.bpm = 110;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x58>)
 80018ca:	226e      	movs	r2, #110	; 0x6e
 80018cc:	721a      	strb	r2, [r3, #8]
	  	Node_1.Humidity = 82.0;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x58>)
 80018d0:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80018d2:	605a      	str	r2, [r3, #4]
	  	Node_1.spo2 = 85;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x58>)
 80018d6:	2255      	movs	r2, #85	; 0x55
 80018d8:	725a      	strb	r2, [r3, #9]
		osSemaphoreRelease(Touch_binaryHandle);
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x60>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f009 fe96 	bl	800b610 <osSemaphoreRelease>
  }

}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000004 	.word	0x20000004
 80018f0:	20000228 	.word	0x20000228
 80018f4:	42a40000 	.word	0x42a40000
 80018f8:	2000030c 	.word	0x2000030c

080018fc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af04      	add	r7, sp, #16
 8001902:	6078      	str	r0, [r7, #4]

	if (huart == &huart2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <HAL_UART_RxCpltCallback+0x54>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d11d      	bne.n	8001948 <HAL_UART_RxCpltCallback+0x4c>
	{
		osSemaphoreRelease(Uart_binaryHandle);
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_UART_RxCpltCallback+0x58>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f009 fe7d 	bl	800b610 <osSemaphoreRelease>
		HAL_UART_Transmit(&huart2, (uint8_t *) "\x1B[31m[Action]: UART\r\n", 24, 10);
 8001916:	230a      	movs	r3, #10
 8001918:	2218      	movs	r2, #24
 800191a:	490f      	ldr	r1, [pc, #60]	; (8001958 <HAL_UART_RxCpltCallback+0x5c>)
 800191c:	480c      	ldr	r0, [pc, #48]	; (8001950 <HAL_UART_RxCpltCallback+0x54>)
 800191e:	f008 fab9 	bl	8009e94 <HAL_UART_Transmit>
		ILI9341_WriteString(150, 180, "Uart   ", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_UART_RxCpltCallback+0x60>)
 8001924:	2200      	movs	r2, #0
 8001926:	9202      	str	r2, [sp, #8]
 8001928:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800192c:	9201      	str	r2, [sp, #4]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	9200      	str	r2, [sp, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <HAL_UART_RxCpltCallback+0x64>)
 8001936:	21b4      	movs	r1, #180	; 0xb4
 8001938:	2096      	movs	r0, #150	; 0x96
 800193a:	f001 fe82 	bl	8003642 <ILI9341_WriteString>
		HAL_UART_Receive_IT(&huart2, (uint8_t*) action, 8);
 800193e:	2208      	movs	r2, #8
 8001940:	4908      	ldr	r1, [pc, #32]	; (8001964 <HAL_UART_RxCpltCallback+0x68>)
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <HAL_UART_RxCpltCallback+0x54>)
 8001944:	f008 fb38 	bl	8009fb8 <HAL_UART_Receive_IT>
	}
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	2000049c 	.word	0x2000049c
 8001954:	20000310 	.word	0x20000310
 8001958:	08014884 	.word	0x08014884
 800195c:	20000024 	.word	0x20000024
 8001960:	0801489c 	.word	0x0801489c
 8001964:	20000258 	.word	0x20000258

08001968 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b5d      	ldr	r3, [pc, #372]	; (8001af8 <MX_GPIO_Init+0x190>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a5c      	ldr	r2, [pc, #368]	; (8001af8 <MX_GPIO_Init+0x190>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b5a      	ldr	r3, [pc, #360]	; (8001af8 <MX_GPIO_Init+0x190>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <MX_GPIO_Init+0x190>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a55      	ldr	r2, [pc, #340]	; (8001af8 <MX_GPIO_Init+0x190>)
 80019a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <MX_GPIO_Init+0x190>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b4f      	ldr	r3, [pc, #316]	; (8001af8 <MX_GPIO_Init+0x190>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a4e      	ldr	r2, [pc, #312]	; (8001af8 <MX_GPIO_Init+0x190>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b4c      	ldr	r3, [pc, #304]	; (8001af8 <MX_GPIO_Init+0x190>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b48      	ldr	r3, [pc, #288]	; (8001af8 <MX_GPIO_Init+0x190>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a47      	ldr	r2, [pc, #284]	; (8001af8 <MX_GPIO_Init+0x190>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b45      	ldr	r3, [pc, #276]	; (8001af8 <MX_GPIO_Init+0x190>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|DHT_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80019f4:	4841      	ldr	r0, [pc, #260]	; (8001afc <MX_GPIO_Init+0x194>)
 80019f6:	f003 f925 	bl	8004c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_Pin|SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	f641 0102 	movw	r1, #6146	; 0x1802
 8001a00:	483f      	ldr	r0, [pc, #252]	; (8001b00 <MX_GPIO_Init+0x198>)
 8001a02:	f003 f91f 	bl	8004c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_LED_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f240 3102 	movw	r1, #770	; 0x302
 8001a0c:	483d      	ldr	r0, [pc, #244]	; (8001b04 <MX_GPIO_Init+0x19c>)
 8001a0e:	f003 f919 	bl	8004c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4834      	ldr	r0, [pc, #208]	; (8001afc <MX_GPIO_Init+0x194>)
 8001a2c:	f002 fd4e 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT_Pin;
 8001a30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	4619      	mov	r1, r3
 8001a48:	482c      	ldr	r0, [pc, #176]	; (8001afc <MX_GPIO_Init+0x194>)
 8001a4a:	f002 fd3f 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DS18B20_Pin|SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin;
 8001a4e:	f641 0302 	movw	r3, #6146	; 0x1802
 8001a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	4826      	ldr	r0, [pc, #152]	; (8001b00 <MX_GPIO_Init+0x198>)
 8001a68:	f002 fd30 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4820      	ldr	r0, [pc, #128]	; (8001b04 <MX_GPIO_Init+0x19c>)
 8001a84:	f002 fd22 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_MAX_Pin;
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a8e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_MAX_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4819      	ldr	r0, [pc, #100]	; (8001b04 <MX_GPIO_Init+0x19c>)
 8001aa0:	f002 fd14 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aaa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4811      	ldr	r0, [pc, #68]	; (8001b00 <MX_GPIO_Init+0x198>)
 8001abc:	f002 fd06 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 8001ac0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480a      	ldr	r0, [pc, #40]	; (8001b04 <MX_GPIO_Init+0x19c>)
 8001ada:	f002 fcf7 	bl	80044cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2105      	movs	r1, #5
 8001ae2:	2017      	movs	r0, #23
 8001ae4:	f002 fbf6 	bl	80042d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ae8:	2017      	movs	r0, #23
 8001aea:	f002 fc1f 	bl	800432c <HAL_NVIC_EnableIRQ>

}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	; 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020800 	.word	0x40020800
 8001b00:	40020000 	.word	0x40020000
 8001b04:	40020400 	.word	0x40020400

08001b08 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b0e:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <MX_I2C1_Init+0x54>)
 8001b10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b14:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <MX_I2C1_Init+0x58>)
 8001b16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b46:	f003 f8ef 	bl	8004d28 <HAL_I2C_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b50:	f000 f916 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000314 	.word	0x20000314
 8001b5c:	40005400 	.word	0x40005400
 8001b60:	00061a80 	.word	0x00061a80

08001b64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a21      	ldr	r2, [pc, #132]	; (8001c08 <HAL_I2C_MspInit+0xa4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d13b      	bne.n	8001bfe <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_I2C_MspInit+0xa8>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <HAL_I2C_MspInit+0xa8>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_I2C_MspInit+0xa8>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba2:	23c0      	movs	r3, #192	; 0xc0
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba6:	2312      	movs	r3, #18
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4814      	ldr	r0, [pc, #80]	; (8001c10 <HAL_I2C_MspInit+0xac>)
 8001bbe:	f002 fc85 	bl	80044cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_I2C_MspInit+0xa8>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	4a10      	ldr	r2, [pc, #64]	; (8001c0c <HAL_I2C_MspInit+0xa8>)
 8001bcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_I2C_MspInit+0xa8>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2105      	movs	r1, #5
 8001be2:	201f      	movs	r0, #31
 8001be4:	f002 fb76 	bl	80042d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001be8:	201f      	movs	r0, #31
 8001bea:	f002 fb9f 	bl	800432c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2105      	movs	r1, #5
 8001bf2:	2020      	movs	r0, #32
 8001bf4:	f002 fb6e 	bl	80042d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001bf8:	2020      	movs	r0, #32
 8001bfa:	f002 fb97 	bl	800432c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40005400 	.word	0x40005400
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020400 	.word	0x40020400

08001c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c18:	f002 fa04 	bl	8004024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1c:	f000 f822 	bl	8001c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c20:	f7ff fea2 	bl	8001968 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c24:	f000 f8bc 	bl	8001da0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001c28:	f000 fbfa 	bl	8002420 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8001c2c:	f000 fb96 	bl	800235c <MX_TIM11_Init>
  MX_I2C1_Init();
 8001c30:	f7ff ff6a 	bl	8001b08 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001c34:	f000 fb44 	bl	80022c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  DS18B20_Init(DS18B20_Resolution_12bits);
 8001c38:	200c      	movs	r0, #12
 8001c3a:	f000 ff0b 	bl	8002a54 <DS18B20_Init>
  	max30102_init();
 8001c3e:	f001 fdd9 	bl	80037f4 <max30102_init>
  HAL_UART_Receive_IT(&huart2, (uint8_t*) action, 8);
 8001c42:	2208      	movs	r2, #8
 8001c44:	4905      	ldr	r1, [pc, #20]	; (8001c5c <main+0x48>)
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <main+0x4c>)
 8001c48:	f008 f9b6 	bl	8009fb8 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001c4c:	f009 f9d6 	bl	800affc <osKernelInitialize>
  MX_FREERTOS_Init();
 8001c50:	f7ff f9da 	bl	8001008 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001c54:	f009 f9f6 	bl	800b044 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <main+0x44>
 8001c5a:	bf00      	nop
 8001c5c:	20000258 	.word	0x20000258
 8001c60:	2000049c 	.word	0x2000049c

08001c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b094      	sub	sp, #80	; 0x50
 8001c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6a:	f107 0320 	add.w	r3, r7, #32
 8001c6e:	2230      	movs	r2, #48	; 0x30
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f00d f945 	bl	800ef02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <SystemClock_Config+0xcc>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	4a27      	ldr	r2, [pc, #156]	; (8001d30 <SystemClock_Config+0xcc>)
 8001c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c96:	6413      	str	r3, [r2, #64]	; 0x40
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <SystemClock_Config+0xcc>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <SystemClock_Config+0xd0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cb0:	4a20      	ldr	r2, [pc, #128]	; (8001d34 <SystemClock_Config+0xd0>)
 8001cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <SystemClock_Config+0xd0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ccc:	2310      	movs	r3, #16
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001cdc:	2354      	movs	r3, #84	; 0x54
 8001cde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce8:	f107 0320 	add.w	r3, r7, #32
 8001cec:	4618      	mov	r0, r3
 8001cee:	f005 fd17 	bl	8007720 <HAL_RCC_OscConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001cf8:	f000 f842 	bl	8001d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d00:	2302      	movs	r3, #2
 8001d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	2102      	movs	r1, #2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f006 f829 	bl	8007d70 <HAL_RCC_ClockConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d24:	f000 f82c 	bl	8001d80 <Error_Handler>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3750      	adds	r7, #80	; 0x50
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40007000 	.word	0x40007000

08001d38 <__io_putchar>:
	 set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10);
 8001d40:	1d39      	adds	r1, r7, #4
 8001d42:	230a      	movs	r3, #10
 8001d44:	2201      	movs	r2, #1
 8001d46:	4804      	ldr	r0, [pc, #16]	; (8001d58 <__io_putchar+0x20>)
 8001d48:	f008 f8a4 	bl	8009e94 <HAL_UART_Transmit>
  return ch;
 8001d4c:	687b      	ldr	r3, [r7, #4]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2000049c 	.word	0x2000049c

08001d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d6e:	f002 f97b 	bl	8004068 <HAL_IncTick>
  {
//	  HAL_TIM_Base_Stop_IT(htim);
//	  if (Button_1.state == false)
  }
  /* USER CODE END Callback 1 */
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40014400 	.word	0x40014400

08001d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d84:	b672      	cpsid	i
}
 8001d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <Error_Handler+0x8>

08001d8a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001da6:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <MX_SPI1_Init+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001db0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dec:	220a      	movs	r2, #10
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001df0:	4804      	ldr	r0, [pc, #16]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001df2:	f006 fa77 	bl	80082e4 <HAL_SPI_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dfc:	f7ff ffc0 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000368 	.word	0x20000368
 8001e08:	40013000 	.word	0x40013000

08001e0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1d      	ldr	r2, [pc, #116]	; (8001ea0 <HAL_SPI_MspInit+0x94>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d133      	bne.n	8001e96 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <HAL_SPI_MspInit+0x98>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <HAL_SPI_MspInit+0x98>)
 8001e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <HAL_SPI_MspInit+0x98>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_SPI_MspInit+0x98>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <HAL_SPI_MspInit+0x98>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_SPI_MspInit+0x98>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e66:	23e0      	movs	r3, #224	; 0xe0
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e76:	2305      	movs	r3, #5
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4809      	ldr	r0, [pc, #36]	; (8001ea8 <HAL_SPI_MspInit+0x9c>)
 8001e82:	f002 fb23 	bl	80044cc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2105      	movs	r1, #5
 8001e8a:	2023      	movs	r0, #35	; 0x23
 8001e8c:	f002 fa22 	bl	80042d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e90:	2023      	movs	r0, #35	; 0x23
 8001e92:	f002 fa4b 	bl	800432c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e96:	bf00      	nop
 8001e98:	3728      	adds	r7, #40	; 0x28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40013000 	.word	0x40013000
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020000 	.word	0x40020000

08001eac <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <HAL_SPI_MspDeInit+0x34>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_SPI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_SPI_MspDeInit+0x38>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <HAL_SPI_MspDeInit+0x38>)
 8001ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001eca:	21e0      	movs	r1, #224	; 0xe0
 8001ecc:	4806      	ldr	r0, [pc, #24]	; (8001ee8 <HAL_SPI_MspDeInit+0x3c>)
 8001ece:	f002 fd91 	bl	80049f4 <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8001ed2:	2023      	movs	r0, #35	; 0x23
 8001ed4:	f002 fa42 	bl	800435c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40013000 	.word	0x40013000
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020000 	.word	0x40020000

08001eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <HAL_MspInit+0x64>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <HAL_MspInit+0x64>)
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f00:	6453      	str	r3, [r2, #68]	; 0x44
 8001f02:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <HAL_MspInit+0x64>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <HAL_MspInit+0x64>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <HAL_MspInit+0x64>)
 8001f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <HAL_MspInit+0x64>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	210f      	movs	r1, #15
 8001f2e:	f06f 0001 	mvn.w	r0, #1
 8001f32:	f002 f9cf 	bl	80042d4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2105      	movs	r1, #5
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	f002 f9ca 	bl	80042d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001f40:	2001      	movs	r0, #1
 8001f42:	f002 f9f3 	bl	800432c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08c      	sub	sp, #48	; 0x30
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <HAL_InitTick+0xd0>)
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	4a2d      	ldr	r2, [pc, #180]	; (8002024 <HAL_InitTick+0xd0>)
 8001f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f72:	6453      	str	r3, [r2, #68]	; 0x44
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_InitTick+0xd0>)
 8001f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f80:	f107 020c 	add.w	r2, r7, #12
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f006 f978 	bl	8008280 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f90:	f006 f962 	bl	8008258 <HAL_RCC_GetPCLK2Freq>
 8001f94:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f98:	4a23      	ldr	r2, [pc, #140]	; (8002028 <HAL_InitTick+0xd4>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	0c9b      	lsrs	r3, r3, #18
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001fa4:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_InitTick+0xd8>)
 8001fa6:	4a22      	ldr	r2, [pc, #136]	; (8002030 <HAL_InitTick+0xdc>)
 8001fa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_InitTick+0xd8>)
 8001fac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fb0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_InitTick+0xd8>)
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	; (800202c <HAL_InitTick+0xd8>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_InitTick+0xd8>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_InitTick+0xd8>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001fca:	4818      	ldr	r0, [pc, #96]	; (800202c <HAL_InitTick+0xd8>)
 8001fcc:	f006 fe9e 	bl	8008d0c <HAL_TIM_Base_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d11b      	bne.n	8002016 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001fde:	4813      	ldr	r0, [pc, #76]	; (800202c <HAL_InitTick+0xd8>)
 8001fe0:	f006 ffe4 	bl	8008fac <HAL_TIM_Base_Start_IT>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001fea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d111      	bne.n	8002016 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ff2:	2019      	movs	r0, #25
 8001ff4:	f002 f99a 	bl	800432c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b0f      	cmp	r3, #15
 8001ffc:	d808      	bhi.n	8002010 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001ffe:	2200      	movs	r2, #0
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	2019      	movs	r0, #25
 8002004:	f002 f966 	bl	80042d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_InitTick+0xe0>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e002      	b.n	8002016 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002016:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800201a:	4618      	mov	r0, r3
 800201c:	3730      	adds	r7, #48	; 0x30
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	431bde83 	.word	0x431bde83
 800202c:	200003c0 	.word	0x200003c0
 8002030:	40014400 	.word	0x40014400
 8002034:	2000002c 	.word	0x2000002c

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800203c:	e7fe      	b.n	800203c <NMI_Handler+0x4>

0800203e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <HardFault_Handler+0x4>

08002044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <MemManage_Handler+0x4>

0800204a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <UsageFault_Handler+0x4>

08002056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002068:	f005 fb40 	bl	80076ec <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}

08002070 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 8002074:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002078:	f002 fe3e 	bl	8004cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(timeout > 0)
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <TIM1_UP_TIM10_IRQHandler+0x18>
		timeout--;
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x24>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8002096:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <TIM1_UP_TIM10_IRQHandler+0x28>)
 800209a:	f007 f819 	bl	80090d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200006ee 	.word	0x200006ee
 80020a8:	200003c0 	.word	0x200003c0

080020ac <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80020b2:	f007 f80d 	bl	80090d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000454 	.word	0x20000454

080020c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <I2C1_EV_IRQHandler+0x10>)
 80020c6:	f003 fbb1 	bl	800582c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000314 	.word	0x20000314

080020d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <I2C1_ER_IRQHandler+0x10>)
 80020da:	f003 fd18 	bl	8005b0e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000314 	.word	0x20000314

080020e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <SPI1_IRQHandler+0x10>)
 80020ee:	f006 fc25 	bl	800893c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000368 	.word	0x20000368

080020fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <USART2_IRQHandler+0x10>)
 8002102:	f007 ff89 	bl	800a018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2000049c 	.word	0x2000049c

08002110 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return 1;
 8002114:	2301      	movs	r3, #1
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_kill>:

int _kill(int pid, int sig)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800212a:	f00c fdb9 	bl	800eca0 <__errno>
 800212e:	4603      	mov	r3, r0
 8002130:	2216      	movs	r2, #22
 8002132:	601a      	str	r2, [r3, #0]
  return -1;
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_exit>:

void _exit (int status)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ffe7 	bl	8002120 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002152:	e7fe      	b.n	8002152 <_exit+0x12>

08002154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e00a      	b.n	800217c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002166:	f3af 8000 	nop.w
 800216a:	4601      	mov	r1, r0
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	60ba      	str	r2, [r7, #8]
 8002172:	b2ca      	uxtb	r2, r1
 8002174:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	dbf0      	blt.n	8002166 <_read+0x12>
  }

  return len;
 8002184:	687b      	ldr	r3, [r7, #4]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e009      	b.n	80021b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	60ba      	str	r2, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fdc5 	bl	8001d38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3301      	adds	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	dbf1      	blt.n	80021a0 <_write+0x12>
  }
  return len;
 80021bc:	687b      	ldr	r3, [r7, #4]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_close>:

int _close(int file)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ee:	605a      	str	r2, [r3, #4]
  return 0;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_isatty>:

int _isatty(int file)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002238:	4a14      	ldr	r2, [pc, #80]	; (800228c <_sbrk+0x5c>)
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <_sbrk+0x60>)
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <_sbrk+0x64>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <_sbrk+0x64>)
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <_sbrk+0x68>)
 8002250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	429a      	cmp	r2, r3
 800225e:	d207      	bcs.n	8002270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002260:	f00c fd1e 	bl	800eca0 <__errno>
 8002264:	4603      	mov	r3, r0
 8002266:	220c      	movs	r2, #12
 8002268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	e009      	b.n	8002284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <_sbrk+0x64>)
 8002280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002282:	68fb      	ldr	r3, [r7, #12]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20010000 	.word	0x20010000
 8002290:	00000400 	.word	0x00000400
 8002294:	20000408 	.word	0x20000408
 8002298:	20005118 	.word	0x20005118

0800229c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <SystemInit+0x20>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	4a05      	ldr	r2, [pc, #20]	; (80022bc <SystemInit+0x20>)
 80022a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022c6:	f107 0308 	add.w	r3, r7, #8
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d4:	463b      	mov	r3, r7
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <MX_TIM3_Init+0x94>)
 80022de:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <MX_TIM3_Init+0x98>)
 80022e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 62;
 80022e2:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <MX_TIM3_Init+0x94>)
 80022e4:	223e      	movs	r2, #62	; 0x3e
 80022e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <MX_TIM3_Init+0x94>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022ee:	4b19      	ldr	r3, [pc, #100]	; (8002354 <MX_TIM3_Init+0x94>)
 80022f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <MX_TIM3_Init+0x94>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fc:	4b15      	ldr	r3, [pc, #84]	; (8002354 <MX_TIM3_Init+0x94>)
 80022fe:	2200      	movs	r2, #0
 8002300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002302:	4814      	ldr	r0, [pc, #80]	; (8002354 <MX_TIM3_Init+0x94>)
 8002304:	f006 fd02 	bl	8008d0c <HAL_TIM_Base_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800230e:	f7ff fd37 	bl	8001d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002316:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002318:	f107 0308 	add.w	r3, r7, #8
 800231c:	4619      	mov	r1, r3
 800231e:	480d      	ldr	r0, [pc, #52]	; (8002354 <MX_TIM3_Init+0x94>)
 8002320:	f006 ffde 	bl	80092e0 <HAL_TIM_ConfigClockSource>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800232a:	f7ff fd29 	bl	8001d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002336:	463b      	mov	r3, r7
 8002338:	4619      	mov	r1, r3
 800233a:	4806      	ldr	r0, [pc, #24]	; (8002354 <MX_TIM3_Init+0x94>)
 800233c:	f007 fc22 	bl	8009b84 <HAL_TIMEx_MasterConfigSynchronization>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002346:	f7ff fd1b 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800234a:	bf00      	nop
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	2000040c 	.word	0x2000040c
 8002358:	40000400 	.word	0x40000400

0800235c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <MX_TIM11_Init+0x40>)
 8002362:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <MX_TIM11_Init+0x44>)
 8002364:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 83;
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <MX_TIM11_Init+0x40>)
 8002368:	2253      	movs	r2, #83	; 0x53
 800236a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MX_TIM11_Init+0x40>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0xffff-1;
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <MX_TIM11_Init+0x40>)
 8002374:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002378:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <MX_TIM11_Init+0x40>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <MX_TIM11_Init+0x40>)
 8002382:	2200      	movs	r2, #0
 8002384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <MX_TIM11_Init+0x40>)
 8002388:	f006 fcc0 	bl	8008d0c <HAL_TIM_Base_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002392:	f7ff fcf5 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000454 	.word	0x20000454
 80023a0:	40014800 	.word	0x40014800

080023a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a18      	ldr	r2, [pc, #96]	; (8002414 <HAL_TIM_Base_MspInit+0x70>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d10e      	bne.n	80023d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b17      	ldr	r3, [pc, #92]	; (8002418 <HAL_TIM_Base_MspInit+0x74>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	4a16      	ldr	r2, [pc, #88]	; (8002418 <HAL_TIM_Base_MspInit+0x74>)
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	6413      	str	r3, [r2, #64]	; 0x40
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_TIM_Base_MspInit+0x74>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80023d2:	e01a      	b.n	800240a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM11)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a10      	ldr	r2, [pc, #64]	; (800241c <HAL_TIM_Base_MspInit+0x78>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d115      	bne.n	800240a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <HAL_TIM_Base_MspInit+0x74>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <HAL_TIM_Base_MspInit+0x74>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_TIM_Base_MspInit+0x74>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2105      	movs	r1, #5
 80023fe:	201a      	movs	r0, #26
 8002400:	f001 ff68 	bl	80042d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002404:	201a      	movs	r0, #26
 8002406:	f001 ff91 	bl	800432c <HAL_NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40000400 	.word	0x40000400
 8002418:	40023800 	.word	0x40023800
 800241c:	40014800 	.word	0x40014800

08002420 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <MX_USART2_UART_Init+0x4c>)
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <MX_USART2_UART_Init+0x50>)
 8002428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <MX_USART2_UART_Init+0x4c>)
 800242c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <MX_USART2_UART_Init+0x4c>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <MX_USART2_UART_Init+0x4c>)
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <MX_USART2_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <MX_USART2_UART_Init+0x4c>)
 8002446:	220c      	movs	r2, #12
 8002448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <MX_USART2_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <MX_USART2_UART_Init+0x4c>)
 8002452:	2200      	movs	r2, #0
 8002454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002456:	4805      	ldr	r0, [pc, #20]	; (800246c <MX_USART2_UART_Init+0x4c>)
 8002458:	f007 fc66 	bl	8009d28 <HAL_UART_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002462:	f7ff fc8d 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000049c 	.word	0x2000049c
 8002470:	40004400 	.word	0x40004400

08002474 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <HAL_UART_MspInit+0x94>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d133      	bne.n	80024fe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	4b1c      	ldr	r3, [pc, #112]	; (800250c <HAL_UART_MspInit+0x98>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a1b      	ldr	r2, [pc, #108]	; (800250c <HAL_UART_MspInit+0x98>)
 80024a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_UART_MspInit+0x98>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_UART_MspInit+0x98>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a14      	ldr	r2, [pc, #80]	; (800250c <HAL_UART_MspInit+0x98>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_UART_MspInit+0x98>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024ce:	230c      	movs	r3, #12
 80024d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024da:	2303      	movs	r3, #3
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024de:	2307      	movs	r3, #7
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4619      	mov	r1, r3
 80024e8:	4809      	ldr	r0, [pc, #36]	; (8002510 <HAL_UART_MspInit+0x9c>)
 80024ea:	f001 ffef 	bl	80044cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 80024ee:	2200      	movs	r2, #0
 80024f0:	210a      	movs	r1, #10
 80024f2:	2026      	movs	r0, #38	; 0x26
 80024f4:	f001 feee 	bl	80042d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024f8:	2026      	movs	r0, #38	; 0x26
 80024fa:	f001 ff17 	bl	800432c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80024fe:	bf00      	nop
 8002500:	3728      	adds	r7, #40	; 0x28
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40004400 	.word	0x40004400
 800250c:	40023800 	.word	0x40023800
 8002510:	40020000 	.word	0x40020000
 8002514:	00000000 	.word	0x00000000

08002518 <ftoa>:
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 8002518:	b5b0      	push	{r4, r5, r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002522:	60b8      	str	r0, [r7, #8]
 8002524:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8002526:	edd7 7a03 	vldr	s15, [r7, #12]
 800252a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800252e:	ee17 3a90 	vmov	r3, s15
 8002532:	61fb      	str	r3, [r7, #28]
    // Extract floating part
    float fpart = n - (float)ipart;
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002546:	edc7 7a06 	vstr	s15, [r7, #24]
    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	69f8      	ldr	r0, [r7, #28]
 8002550:	f000 f83e 	bl	80025d0 <intToStr>
 8002554:	6178      	str	r0, [r7, #20]
    // check for display option after point
    if (afterpoint != 0)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d030      	beq.n	80025be <ftoa+0xa6>
    {
        res[i] = '.'; // add dot
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	4413      	add	r3, r2
 8002562:	222e      	movs	r2, #46	; 0x2e
 8002564:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 8002566:	69b8      	ldr	r0, [r7, #24]
 8002568:	f7fd fff6 	bl	8000558 <__aeabi_f2d>
 800256c:	4604      	mov	r4, r0
 800256e:	460d      	mov	r5, r1
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7fd ffdf 	bl	8000534 <__aeabi_i2d>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	ec43 2b11 	vmov	d1, r2, r3
 800257e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80025c8 <ftoa+0xb0>
 8002582:	f011 f89b 	bl	80136bc <pow>
 8002586:	ec53 2b10 	vmov	r2, r3, d0
 800258a:	4620      	mov	r0, r4
 800258c:	4629      	mov	r1, r5
 800258e:	f7fe f83b 	bl	8000608 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	f7fe fb2d 	bl	8000bf8 <__aeabi_d2f>
 800259e:	4603      	mov	r3, r0
 80025a0:	61bb      	str	r3, [r7, #24]
        intToStr((int)fpart, res + i + 1, afterpoint);
 80025a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80025a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3301      	adds	r3, #1
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	4413      	add	r3, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	4619      	mov	r1, r3
 80025b6:	ee17 0a90 	vmov	r0, s15
 80025ba:	f000 f809 	bl	80025d0 <intToStr>
    }
}
 80025be:	bf00      	nop
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bdb0      	pop	{r4, r5, r7, pc}
 80025c6:	bf00      	nop
 80025c8:	00000000 	.word	0x00000000
 80025cc:	40240000 	.word	0x40240000

080025d0 <intToStr>:

int intToStr(int x, char str[], int d)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
    int i = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
    if (x == 0)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d126      	bne.n	8002634 <intToStr+0x64>
    {
        str[i++] = '0';
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	617a      	str	r2, [r7, #20]
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	4413      	add	r3, r2
 80025f2:	2230      	movs	r2, #48	; 0x30
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	e029      	b.n	800264c <intToStr+0x7c>
    }
    else
    {
        while (x)
        {
            str[i++] = (x % 10) + '0';
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <intToStr+0xa0>)
 80025fc:	fb83 1302 	smull	r1, r3, r3, r2
 8002600:	1099      	asrs	r1, r3, #2
 8002602:	17d3      	asrs	r3, r2, #31
 8002604:	1ac9      	subs	r1, r1, r3
 8002606:	460b      	mov	r3, r1
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	1ad1      	subs	r1, r2, r3
 8002610:	b2ca      	uxtb	r2, r1
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	1c59      	adds	r1, r3, #1
 8002616:	6179      	str	r1, [r7, #20]
 8002618:	4619      	mov	r1, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	440b      	add	r3, r1
 800261e:	3230      	adds	r2, #48	; 0x30
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	701a      	strb	r2, [r3, #0]
            x = x / 10;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <intToStr+0xa0>)
 8002628:	fb82 1203 	smull	r1, r2, r2, r3
 800262c:	1092      	asrs	r2, r2, #2
 800262e:	17db      	asrs	r3, r3, #31
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	60fb      	str	r3, [r7, #12]
        while (x)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1de      	bne.n	80025f8 <intToStr+0x28>
        }
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 800263a:	e007      	b.n	800264c <intToStr+0x7c>
        str[i++] = '0';
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	617a      	str	r2, [r7, #20]
 8002642:	461a      	mov	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4413      	add	r3, r2
 8002648:	2230      	movs	r2, #48	; 0x30
 800264a:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	dbf3      	blt.n	800263c <intToStr+0x6c>

    reverse(str, i);
 8002654:	6979      	ldr	r1, [r7, #20]
 8002656:	68b8      	ldr	r0, [r7, #8]
 8002658:	f000 f80c 	bl	8002674 <reverse>
    str[i] = '\0';
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	4413      	add	r3, r2
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
    return i;
 8002666:	697b      	ldr	r3, [r7, #20]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	66666667 	.word	0x66666667

08002674 <reverse>:

void reverse(char* str, int len)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	3b01      	subs	r3, #1
 8002686:	613b      	str	r3, [r7, #16]
    while (i < j)
 8002688:	e018      	b.n	80026bc <reverse+0x48>
    {
        temp = str[i];
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	441a      	add	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	440b      	add	r3, r1
 80026a0:	7812      	ldrb	r2, [r2, #0]
 80026a2:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	701a      	strb	r2, [r3, #0]
        i++;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3301      	adds	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
        j--;
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	613b      	str	r3, [r7, #16]
    while (i < j)
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	dbe2      	blt.n	800268a <reverse+0x16>
    }
}
 80026c4:	bf00      	nop
 80026c6:	bf00      	nop
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 80026d8:	4806      	ldr	r0, [pc, #24]	; (80026f4 <DS18B20_StartAll+0x20>)
 80026da:	f000 fa78 	bl	8002bce <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 80026de:	21cc      	movs	r1, #204	; 0xcc
 80026e0:	4804      	ldr	r0, [pc, #16]	; (80026f4 <DS18B20_StartAll+0x20>)
 80026e2:	f000 faf1 	bl	8002cc8 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 80026e6:	2144      	movs	r1, #68	; 0x44
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <DS18B20_StartAll+0x20>)
 80026ea:	f000 faed 	bl	8002cc8 <OneWire_WriteByte>
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000520 	.word	0x20000520

080026f8 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	6039      	str	r1, [r7, #0]
 8002702:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8002704:	4b4d      	ldr	r3, [pc, #308]	; (800283c <DS18B20_Read+0x144>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	79fa      	ldrb	r2, [r7, #7]
 800270a:	429a      	cmp	r2, r3
 800270c:	d301      	bcc.n	8002712 <DS18B20_Read+0x1a>
		return 0;
 800270e:	2300      	movs	r3, #0
 8002710:	e090      	b.n	8002834 <DS18B20_Read+0x13c>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	4a49      	ldr	r2, [pc, #292]	; (8002840 <DS18B20_Read+0x148>)
 800271c:	4413      	add	r3, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f93c 	bl	800299c <DS18B20_Is>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <DS18B20_Read+0x36>
		return 0;
 800272a:	2300      	movs	r3, #0
 800272c:	e082      	b.n	8002834 <DS18B20_Read+0x13c>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 800272e:	4845      	ldr	r0, [pc, #276]	; (8002844 <DS18B20_Read+0x14c>)
 8002730:	f000 faa0 	bl	8002c74 <OneWire_ReadBit>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 800273a:	2300      	movs	r3, #0
 800273c:	e07a      	b.n	8002834 <DS18B20_Read+0x13c>

	OneWire_Reset(&OneWire); // Reset the bus
 800273e:	4841      	ldr	r0, [pc, #260]	; (8002844 <DS18B20_Read+0x14c>)
 8002740:	f000 fa45 	bl	8002bce <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	4a3d      	ldr	r2, [pc, #244]	; (8002840 <DS18B20_Read+0x148>)
 800274a:	4413      	add	r3, r2
 800274c:	4619      	mov	r1, r3
 800274e:	483d      	ldr	r0, [pc, #244]	; (8002844 <DS18B20_Read+0x14c>)
 8002750:	f000 fbef 	bl	8002f32 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8002754:	21be      	movs	r1, #190	; 0xbe
 8002756:	483b      	ldr	r0, [pc, #236]	; (8002844 <DS18B20_Read+0x14c>)
 8002758:	f000 fab6 	bl	8002cc8 <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 800275c:	2300      	movs	r3, #0
 800275e:	74fb      	strb	r3, [r7, #19]
 8002760:	e00d      	b.n	800277e <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8002762:	7cfc      	ldrb	r4, [r7, #19]
 8002764:	4837      	ldr	r0, [pc, #220]	; (8002844 <DS18B20_Read+0x14c>)
 8002766:	f000 facd 	bl	8002d04 <OneWire_ReadByte>
 800276a:	4603      	mov	r3, r0
 800276c:	461a      	mov	r2, r3
 800276e:	f104 0318 	add.w	r3, r4, #24
 8002772:	443b      	add	r3, r7
 8002774:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	3301      	adds	r3, #1
 800277c:	74fb      	strb	r3, [r7, #19]
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d9ee      	bls.n	8002762 <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8002784:	7a3b      	ldrb	r3, [r7, #8]
 8002786:	b21a      	sxth	r2, r3
 8002788:	7a7b      	ldrb	r3, [r7, #9]
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	b21b      	sxth	r3, r3
 800278e:	4313      	orrs	r3, r2
 8002790:	b21b      	sxth	r3, r3
 8002792:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8002794:	482b      	ldr	r0, [pc, #172]	; (8002844 <DS18B20_Read+0x14c>)
 8002796:	f000 fa1a 	bl	8002bce <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 800279a:	7b3b      	ldrb	r3, [r7, #12]
 800279c:	115b      	asrs	r3, r3, #5
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	3309      	adds	r3, #9
 80027a8:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	3b09      	subs	r3, #9
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d83a      	bhi.n	8002828 <DS18B20_Read+0x130>
 80027b2:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <DS18B20_Read+0xc0>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	080027c9 	.word	0x080027c9
 80027bc:	080027e1 	.word	0x080027e1
 80027c0:	080027f9 	.word	0x080027f9
 80027c4:	08002811 	.word	0x08002811
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 80027c8:	8a3b      	ldrh	r3, [r7, #16]
 80027ca:	ee07 3a90 	vmov	s15, r3
 80027ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027da:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 80027de:	e025      	b.n	800282c <DS18B20_Read+0x134>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 80027e0:	8a3b      	ldrh	r3, [r7, #16]
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ea:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80027ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027f2:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 80027f6:	e019      	b.n	800282c <DS18B20_Read+0x134>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 80027f8:	8a3b      	ldrh	r3, [r7, #16]
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002802:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800280a:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 800280e:	e00d      	b.n	800282c <DS18B20_Read+0x134>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8002810:	8a3b      	ldrh	r3, [r7, #16]
 8002812:	ee07 3a90 	vmov	s15, r3
 8002816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800281a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002848 <DS18B20_Read+0x150>
 800281e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002822:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 8002826:	e001      	b.n	800282c <DS18B20_Read+0x134>
		default:
			result = 0xFF;
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <DS18B20_Read+0x154>)
 800282a:	617b      	str	r3, [r7, #20]
	}

	*destination = result;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 8002832:	2301      	movs	r3, #1
}
 8002834:	4618      	mov	r0, r3
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	bd90      	pop	{r4, r7, pc}
 800283c:	20000534 	.word	0x20000534
 8002840:	200004e0 	.word	0x200004e0
 8002844:	20000520 	.word	0x20000520
 8002848:	3d800000 	.word	0x3d800000
 800284c:	437f0000 	.word	0x437f0000

08002850 <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	460a      	mov	r2, r1
 800285a:	71fb      	strb	r3, [r7, #7]
 800285c:	4613      	mov	r3, r2
 800285e:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8002860:	4b4b      	ldr	r3, [pc, #300]	; (8002990 <DS18B20_SetResolution+0x140>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	79fa      	ldrb	r2, [r7, #7]
 8002866:	429a      	cmp	r2, r3
 8002868:	d301      	bcc.n	800286e <DS18B20_SetResolution+0x1e>
		return 0;
 800286a:	2300      	movs	r3, #0
 800286c:	e08c      	b.n	8002988 <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	4a48      	ldr	r2, [pc, #288]	; (8002994 <DS18B20_SetResolution+0x144>)
 8002874:	4413      	add	r3, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f890 	bl	800299c <DS18B20_Is>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <DS18B20_SetResolution+0x36>
		return 0;
 8002882:	2300      	movs	r3, #0
 8002884:	e080      	b.n	8002988 <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 8002886:	4844      	ldr	r0, [pc, #272]	; (8002998 <DS18B20_SetResolution+0x148>)
 8002888:	f000 f9a1 	bl	8002bce <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	4a40      	ldr	r2, [pc, #256]	; (8002994 <DS18B20_SetResolution+0x144>)
 8002892:	4413      	add	r3, r2
 8002894:	4619      	mov	r1, r3
 8002896:	4840      	ldr	r0, [pc, #256]	; (8002998 <DS18B20_SetResolution+0x148>)
 8002898:	f000 fb4b 	bl	8002f32 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 800289c:	21be      	movs	r1, #190	; 0xbe
 800289e:	483e      	ldr	r0, [pc, #248]	; (8002998 <DS18B20_SetResolution+0x148>)
 80028a0:	f000 fa12 	bl	8002cc8 <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 80028a4:	483c      	ldr	r0, [pc, #240]	; (8002998 <DS18B20_SetResolution+0x148>)
 80028a6:	f000 fa2d 	bl	8002d04 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 80028aa:	483b      	ldr	r0, [pc, #236]	; (8002998 <DS18B20_SetResolution+0x148>)
 80028ac:	f000 fa2a 	bl	8002d04 <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 80028b0:	4839      	ldr	r0, [pc, #228]	; (8002998 <DS18B20_SetResolution+0x148>)
 80028b2:	f000 fa27 	bl	8002d04 <OneWire_ReadByte>
 80028b6:	4603      	mov	r3, r0
 80028b8:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 80028ba:	4837      	ldr	r0, [pc, #220]	; (8002998 <DS18B20_SetResolution+0x148>)
 80028bc:	f000 fa22 	bl	8002d04 <OneWire_ReadByte>
 80028c0:	4603      	mov	r3, r0
 80028c2:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 80028c4:	4834      	ldr	r0, [pc, #208]	; (8002998 <DS18B20_SetResolution+0x148>)
 80028c6:	f000 fa1d 	bl	8002d04 <OneWire_ReadByte>
 80028ca:	4603      	mov	r3, r0
 80028cc:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 80028ce:	79bb      	ldrb	r3, [r7, #6]
 80028d0:	2b09      	cmp	r3, #9
 80028d2:	d108      	bne.n	80028e6 <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028da:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	f023 0320 	bic.w	r3, r3, #32
 80028e2:	73fb      	strb	r3, [r7, #15]
 80028e4:	e022      	b.n	800292c <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 80028e6:	79bb      	ldrb	r3, [r7, #6]
 80028e8:	2b0a      	cmp	r3, #10
 80028ea:	d108      	bne.n	80028fe <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028f2:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	f043 0320 	orr.w	r3, r3, #32
 80028fa:	73fb      	strb	r3, [r7, #15]
 80028fc:	e016      	b.n	800292c <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 80028fe:	79bb      	ldrb	r3, [r7, #6]
 8002900:	2b0b      	cmp	r3, #11
 8002902:	d108      	bne.n	8002916 <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800290a:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	f023 0320 	bic.w	r3, r3, #32
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	e00a      	b.n	800292c <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8002916:	79bb      	ldrb	r3, [r7, #6]
 8002918:	2b0c      	cmp	r3, #12
 800291a:	d107      	bne.n	800292c <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002922:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	f043 0320 	orr.w	r3, r3, #32
 800292a:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 800292c:	481a      	ldr	r0, [pc, #104]	; (8002998 <DS18B20_SetResolution+0x148>)
 800292e:	f000 f94e 	bl	8002bce <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	4a17      	ldr	r2, [pc, #92]	; (8002994 <DS18B20_SetResolution+0x144>)
 8002938:	4413      	add	r3, r2
 800293a:	4619      	mov	r1, r3
 800293c:	4816      	ldr	r0, [pc, #88]	; (8002998 <DS18B20_SetResolution+0x148>)
 800293e:	f000 faf8 	bl	8002f32 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8002942:	214e      	movs	r1, #78	; 0x4e
 8002944:	4814      	ldr	r0, [pc, #80]	; (8002998 <DS18B20_SetResolution+0x148>)
 8002946:	f000 f9bf 	bl	8002cc8 <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 800294a:	7bbb      	ldrb	r3, [r7, #14]
 800294c:	4619      	mov	r1, r3
 800294e:	4812      	ldr	r0, [pc, #72]	; (8002998 <DS18B20_SetResolution+0x148>)
 8002950:	f000 f9ba 	bl	8002cc8 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8002954:	7b7b      	ldrb	r3, [r7, #13]
 8002956:	4619      	mov	r1, r3
 8002958:	480f      	ldr	r0, [pc, #60]	; (8002998 <DS18B20_SetResolution+0x148>)
 800295a:	f000 f9b5 	bl	8002cc8 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	4619      	mov	r1, r3
 8002962:	480d      	ldr	r0, [pc, #52]	; (8002998 <DS18B20_SetResolution+0x148>)
 8002964:	f000 f9b0 	bl	8002cc8 <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 8002968:	480b      	ldr	r0, [pc, #44]	; (8002998 <DS18B20_SetResolution+0x148>)
 800296a:	f000 f930 	bl	8002bce <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	4a08      	ldr	r2, [pc, #32]	; (8002994 <DS18B20_SetResolution+0x144>)
 8002974:	4413      	add	r3, r2
 8002976:	4619      	mov	r1, r3
 8002978:	4807      	ldr	r0, [pc, #28]	; (8002998 <DS18B20_SetResolution+0x148>)
 800297a:	f000 fada 	bl	8002f32 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 800297e:	2148      	movs	r1, #72	; 0x48
 8002980:	4805      	ldr	r0, [pc, #20]	; (8002998 <DS18B20_SetResolution+0x148>)
 8002982:	f000 f9a1 	bl	8002cc8 <OneWire_WriteByte>

	return 1;
 8002986:	2301      	movs	r3, #1
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000534 	.word	0x20000534
 8002994:	200004e0 	.word	0x200004e0
 8002998:	20000520 	.word	0x20000520

0800299c <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b28      	cmp	r3, #40	; 0x28
 80029aa:	d101      	bne.n	80029b0 <DS18B20_Is+0x14>
		return 1;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <DS18B20_Is+0x16>
	return 0;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 80029c4:	4802      	ldr	r0, [pc, #8]	; (80029d0 <DS18B20_AllDone+0x10>)
 80029c6:	f000 f955 	bl	8002c74 <OneWire_ReadBit>
 80029ca:	4603      	mov	r3, r0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000520 	.word	0x20000520

080029d4 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 80029da:	f7ff fff1 	bl	80029c0 <DS18B20_AllDone>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d02e      	beq.n	8002a42 <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 80029e4:	2300      	movs	r3, #0
 80029e6:	71fb      	strb	r3, [r7, #7]
 80029e8:	e026      	b.n	8002a38 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	4a17      	ldr	r2, [pc, #92]	; (8002a4c <DS18B20_ReadAll+0x78>)
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	4413      	add	r3, r2
 80029f2:	330c      	adds	r3, #12
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <DS18B20_ReadAll+0x78>)
 80029fe:	4413      	add	r3, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ffcb 	bl	800299c <DS18B20_Is>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d012      	beq.n	8002a32 <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	3308      	adds	r3, #8
 8002a12:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <DS18B20_ReadAll+0x78>)
 8002a14:	441a      	add	r2, r3
 8002a16:	79fc      	ldrb	r4, [r7, #7]
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fe6b 	bl	80026f8 <DS18B20_Read>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4619      	mov	r1, r3
 8002a26:	4a09      	ldr	r2, [pc, #36]	; (8002a4c <DS18B20_ReadAll+0x78>)
 8002a28:	0123      	lsls	r3, r4, #4
 8002a2a:	4413      	add	r3, r2
 8002a2c:	330c      	adds	r3, #12
 8002a2e:	460a      	mov	r2, r1
 8002a30:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	3301      	adds	r3, #1
 8002a36:	71fb      	strb	r3, [r7, #7]
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <DS18B20_ReadAll+0x7c>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	79fa      	ldrb	r2, [r7, #7]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d3d3      	bcc.n	80029ea <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd90      	pop	{r4, r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	200004e0 	.word	0x200004e0
 8002a50:	20000534 	.word	0x20000534

08002a54 <DS18B20_Init>:
	return 1;

}

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	2300      	movs	r3, #0
 8002a64:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin); // Init OneWire bus
 8002a66:	2202      	movs	r2, #2
 8002a68:	491f      	ldr	r1, [pc, #124]	; (8002ae8 <DS18B20_Init+0x94>)
 8002a6a:	4820      	ldr	r0, [pc, #128]	; (8002aec <DS18B20_Init+0x98>)
 8002a6c:	f000 fa9e 	bl	8002fac <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 8002a70:	481e      	ldr	r0, [pc, #120]	; (8002aec <DS18B20_Init+0x98>)
 8002a72:	f000 fa41 	bl	8002ef8 <OneWire_First>
 8002a76:	4603      	mov	r3, r0
 8002a78:	73fb      	strb	r3, [r7, #15]
	while(next)
 8002a7a:	e018      	b.n	8002aae <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <DS18B20_Init+0x9c>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <DS18B20_Init+0x9c>)
 8002a86:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8002a88:	7bbb      	ldrb	r3, [r7, #14]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	73ba      	strb	r2, [r7, #14]
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <DS18B20_Init+0xa0>)
 8002a92:	4413      	add	r3, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	4815      	ldr	r0, [pc, #84]	; (8002aec <DS18B20_Init+0x98>)
 8002a98:	f000 fa6a 	bl	8002f70 <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8002a9c:	4813      	ldr	r0, [pc, #76]	; (8002aec <DS18B20_Init+0x98>)
 8002a9e:	f000 fa3b 	bl	8002f18 <OneWire_Next>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <DS18B20_Init+0x9c>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d803      	bhi.n	8002ab6 <DS18B20_Init+0x62>
	while(next)
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1e3      	bne.n	8002a7c <DS18B20_Init+0x28>
 8002ab4:	e000      	b.n	8002ab8 <DS18B20_Init+0x64>
			break;
 8002ab6:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	737b      	strb	r3, [r7, #13]
 8002abc:	e00a      	b.n	8002ad4 <DS18B20_Init+0x80>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8002abe:	79fa      	ldrb	r2, [r7, #7]
 8002ac0:	7b7b      	ldrb	r3, [r7, #13]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fec3 	bl	8002850 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 8002aca:	f7ff fe03 	bl	80026d4 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8002ace:	7b7b      	ldrb	r3, [r7, #13]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	737b      	strb	r3, [r7, #13]
 8002ad4:	7b7a      	ldrb	r2, [r7, #13]
 8002ad6:	7bbb      	ldrb	r3, [r7, #14]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d3f0      	bcc.n	8002abe <DS18B20_Init+0x6a>
	}
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	20000520 	.word	0x20000520
 8002af0:	20000534 	.word	0x20000534
 8002af4:	200004e0 	.word	0x200004e0

08002af8 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <OneWire_Delay+0x30>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2200      	movs	r2, #0
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 8002b0a:	bf00      	nop
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <OneWire_Delay+0x30>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b12:	88fb      	ldrh	r3, [r7, #6]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d9f9      	bls.n	8002b0c <OneWire_Delay+0x14>
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	2000040c 	.word	0x2000040c

08002b2c <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	889b      	ldrh	r3, [r3, #4]
 8002b44:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f107 020c 	add.w	r2, r7, #12
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f001 fcbb 	bl	80044cc <HAL_GPIO_Init>
}
 8002b56:	bf00      	nop
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b088      	sub	sp, #32
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8002b66:	2311      	movs	r3, #17
 8002b68:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	889b      	ldrh	r3, [r3, #4]
 8002b76:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f107 020c 	add.w	r2, r7, #12
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f001 fca2 	bl	80044cc <HAL_GPIO_Init>
}
 8002b88:	bf00      	nop
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	889b      	ldrh	r3, [r3, #4]
 8002b9c:	041a      	lsls	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	619a      	str	r2, [r3, #24]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	889a      	ldrh	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	619a      	str	r2, [r3, #24]
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ffda 	bl	8002b90 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ffbe 	bl	8002b5e <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 8002be2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002be6:	f7ff ff87 	bl	8002af8 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ff9e 	bl	8002b2c <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8002bf0:	2046      	movs	r0, #70	; 0x46
 8002bf2:	f7ff ff81 	bl	8002af8 <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	889b      	ldrh	r3, [r3, #4]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f001 fff9 	bl	8004bf8 <HAL_GPIO_ReadPin>
 8002c06:	4603      	mov	r3, r0
 8002c08:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8002c0a:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8002c0e:	f7ff ff73 	bl	8002af8 <OneWire_Delay>

	return i;
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00f      	beq.n	8002c4e <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ffae 	bl	8002b90 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ff92 	bl	8002b5e <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8002c3a:	2006      	movs	r0, #6
 8002c3c:	f7ff ff5c 	bl	8002af8 <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ff73 	bl	8002b2c <OneWire_BusInputDirection>
		OneWire_Delay(64);
 8002c46:	2040      	movs	r0, #64	; 0x40
 8002c48:	f7ff ff56 	bl	8002af8 <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 8002c4c:	e00e      	b.n	8002c6c <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff ff9e 	bl	8002b90 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff82 	bl	8002b5e <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8002c5a:	203c      	movs	r0, #60	; 0x3c
 8002c5c:	f7ff ff4c 	bl	8002af8 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ff63 	bl	8002b2c <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8002c66:	200a      	movs	r0, #10
 8002c68:	f7ff ff46 	bl	8002af8 <OneWire_Delay>
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff85 	bl	8002b90 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ff69 	bl	8002b5e <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8002c8c:	2002      	movs	r0, #2
 8002c8e:	f7ff ff33 	bl	8002af8 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ff4a 	bl	8002b2c <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8002c98:	200a      	movs	r0, #10
 8002c9a:	f7ff ff2d 	bl	8002af8 <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	889b      	ldrh	r3, [r3, #4]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f001 ffa5 	bl	8004bf8 <HAL_GPIO_ReadPin>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <OneWire_ReadBit+0x44>
		bit = 1;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]

	OneWire_Delay(50); // Wait for end of read cycle
 8002cb8:	2032      	movs	r0, #50	; 0x32
 8002cba:	f7ff ff1d 	bl	8002af8 <OneWire_Delay>

	return bit;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff ff9a 	bl	8002c1c <OneWire_WriteBit>
		byte >>= 1;
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ee      	bne.n	8002cd8 <OneWire_WriteByte+0x10>
}
 8002cfa:	bf00      	nop
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8002d0c:	2308      	movs	r3, #8
 8002d0e:	73fb      	strb	r3, [r7, #15]
 8002d10:	2300      	movs	r3, #0
 8002d12:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 8002d14:	7bbb      	ldrb	r3, [r7, #14]
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff ffaa 	bl	8002c74 <OneWire_ReadBit>
 8002d20:	4603      	mov	r3, r0
 8002d22:	01db      	lsls	r3, r3, #7
 8002d24:	b25a      	sxtb	r2, r3
 8002d26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	b25b      	sxtb	r3, r3
 8002d2e:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1eb      	bne.n	8002d14 <OneWire_ReadByte+0x10>

	return byte;
 8002d3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	71da      	strb	r2, [r3, #7]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8002d84:	2301      	movs	r3, #1
 8002d86:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	7a1b      	ldrb	r3, [r3, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f040 809a 	bne.w	8002eca <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff ff19 	bl	8002bce <OneWire_Reset>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	71da      	strb	r2, [r3, #7]
			return 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e09b      	b.n	8002ef0 <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff83 	bl	8002cc8 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ff56 	bl	8002c74 <OneWire_ReadBit>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff ff51 	bl	8002c74 <OneWire_ReadBit>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8002dd6:	7a7b      	ldrb	r3, [r7, #9]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d102      	bne.n	8002de2 <OneWire_Search+0x76>
 8002ddc:	7a3b      	ldrb	r3, [r7, #8]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d064      	beq.n	8002eac <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 8002de2:	7a7a      	ldrb	r2, [r7, #9]
 8002de4:	7a3b      	ldrb	r3, [r7, #8]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d002      	beq.n	8002df0 <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8002dea:	7a7b      	ldrb	r3, [r7, #9]
 8002dec:	72bb      	strb	r3, [r7, #10]
 8002dee:	e026      	b.n	8002e3e <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	799b      	ldrb	r3, [r3, #6]
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d20d      	bcs.n	8002e16 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8002dfa:	7b7b      	ldrb	r3, [r7, #13]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	4413      	add	r3, r2
 8002e00:	7a5a      	ldrb	r2, [r3, #9]
 8002e02:	7afb      	ldrb	r3, [r7, #11]
 8002e04:	4013      	ands	r3, r2
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	bf14      	ite	ne
 8002e0c:	2301      	movne	r3, #1
 8002e0e:	2300      	moveq	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	72bb      	strb	r3, [r7, #10]
 8002e14:	e008      	b.n	8002e28 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	799b      	ldrb	r3, [r3, #6]
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8002e28:	7abb      	ldrb	r3, [r7, #10]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d107      	bne.n	8002e3e <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 8002e32:	7bbb      	ldrb	r3, [r7, #14]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d802      	bhi.n	8002e3e <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7bba      	ldrb	r2, [r7, #14]
 8002e3c:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8002e3e:	7abb      	ldrb	r3, [r7, #10]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d10c      	bne.n	8002e5e <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8002e44:	7b7b      	ldrb	r3, [r7, #13]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	7a59      	ldrb	r1, [r3, #9]
 8002e4c:	7b7b      	ldrb	r3, [r7, #13]
 8002e4e:	7afa      	ldrb	r2, [r7, #11]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	b2d1      	uxtb	r1, r2
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	4413      	add	r3, r2
 8002e58:	460a      	mov	r2, r1
 8002e5a:	725a      	strb	r2, [r3, #9]
 8002e5c:	e010      	b.n	8002e80 <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8002e5e:	7b7b      	ldrb	r3, [r7, #13]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	7a5b      	ldrb	r3, [r3, #9]
 8002e66:	b25a      	sxtb	r2, r3
 8002e68:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	b25b      	sxtb	r3, r3
 8002e70:	4013      	ands	r3, r2
 8002e72:	b25a      	sxtb	r2, r3
 8002e74:	7b7b      	ldrb	r3, [r7, #13]
 8002e76:	b2d1      	uxtb	r1, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	460a      	mov	r2, r1
 8002e7e:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8002e80:	7abb      	ldrb	r3, [r7, #10]
 8002e82:	4619      	mov	r1, r3
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff fec9 	bl	8002c1c <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8002e90:	7afb      	ldrb	r3, [r7, #11]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8002e96:	7afb      	ldrb	r3, [r7, #11]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d104      	bne.n	8002ea6 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 8002e9c:	7b7b      	ldrb	r3, [r7, #13]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 8002ea6:	7b7b      	ldrb	r3, [r7, #13]
 8002ea8:	2b07      	cmp	r3, #7
 8002eaa:	d98a      	bls.n	8002dc2 <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2b40      	cmp	r3, #64	; 0x40
 8002eb0:	d90b      	bls.n	8002eca <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7bba      	ldrb	r2, [r7, #14]
 8002eb6:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	799b      	ldrb	r3, [r3, #6]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8002eca:	7b3b      	ldrb	r3, [r7, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <OneWire_Search+0x16c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7a5b      	ldrb	r3, [r3, #9]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8002eee:	7b3b      	ldrb	r3, [r7, #12]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff ff20 	bl	8002d46 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8002f06:	21f0      	movs	r1, #240	; 0xf0
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff2f 	bl	8002d6c <OneWire_Search>
 8002f0e:	4603      	mov	r3, r0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8002f20:	21f0      	movs	r1, #240	; 0xf0
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff ff22 	bl	8002d6c <OneWire_Search>
 8002f28:	4603      	mov	r3, r0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8002f3c:	2155      	movs	r1, #85	; 0x55
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff fec2 	bl	8002cc8 <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	e00a      	b.n	8002f60 <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	4619      	mov	r1, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff feb7 	bl	8002cc8 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2b07      	cmp	r3, #7
 8002f64:	d9f1      	bls.n	8002f4a <OneWire_SelectWithPointer+0x18>
	}
}
 8002f66:	bf00      	nop
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	73fb      	strb	r3, [r7, #15]
 8002f7e:	e00a      	b.n	8002f96 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	6839      	ldr	r1, [r7, #0]
 8002f86:	440b      	add	r3, r1
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	440a      	add	r2, r1
 8002f8c:	7a52      	ldrb	r2, [r2, #9]
 8002f8e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	3301      	adds	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	2b07      	cmp	r3, #7
 8002f9a:	d9f1      	bls.n	8002f80 <OneWire_GetFullROM+0x10>
	}
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8002fba:	4811      	ldr	r0, [pc, #68]	; (8003000 <OneWire_Init+0x54>)
 8002fbc:	f005 ff6c 	bl	8008e98 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f7ff fdc6 	bl	8002b5e <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7ff fdec 	bl	8002bb0 <OneWire_OutputHigh>
	HAL_Delay(100);
 8002fd8:	2064      	movs	r0, #100	; 0x64
 8002fda:	f001 f865 	bl	80040a8 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f7ff fdd6 	bl	8002b90 <OneWire_OutputLow>
	HAL_Delay(100);
 8002fe4:	2064      	movs	r0, #100	; 0x64
 8002fe6:	f001 f85f 	bl	80040a8 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7ff fde0 	bl	8002bb0 <OneWire_OutputHigh>
	HAL_Delay(200);
 8002ff0:	20c8      	movs	r0, #200	; 0xc8
 8002ff2:	f001 f859 	bl	80040a8 <HAL_Delay>
}
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	2000040c 	.word	0x2000040c

08003004 <ILI9341_Select>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"


static void ILI9341_Select()
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8003008:	2200      	movs	r2, #0
 800300a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800300e:	4802      	ldr	r0, [pc, #8]	; (8003018 <ILI9341_Select+0x14>)
 8003010:	f001 fe18 	bl	8004c44 <HAL_GPIO_WritePin>

}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40020000 	.word	0x40020000

0800301c <ILI9341_Unselect>:

void ILI9341_Unselect()
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8003020:	2201      	movs	r2, #1
 8003022:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003026:	4802      	ldr	r0, [pc, #8]	; (8003030 <ILI9341_Unselect+0x14>)
 8003028:	f001 fe0c 	bl	8004c44 <HAL_GPIO_WritePin>
}
 800302c:	bf00      	nop
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40020000 	.word	0x40020000

08003034 <ILI9341_Reset>:

static void ILI9341_Reset()
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8003038:	2200      	movs	r2, #0
 800303a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800303e:	4807      	ldr	r0, [pc, #28]	; (800305c <ILI9341_Reset+0x28>)
 8003040:	f001 fe00 	bl	8004c44 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8003044:	200a      	movs	r0, #10
 8003046:	f001 f82f 	bl	80040a8 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 800304a:	2201      	movs	r2, #1
 800304c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003050:	4802      	ldr	r0, [pc, #8]	; (800305c <ILI9341_Reset+0x28>)
 8003052:	f001 fdf7 	bl	8004c44 <HAL_GPIO_WritePin>
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40020400 	.word	0x40020400

08003060 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800306a:	2200      	movs	r2, #0
 800306c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003070:	4806      	ldr	r0, [pc, #24]	; (800308c <ILI9341_WriteCommand+0x2c>)
 8003072:	f001 fde7 	bl	8004c44 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003076:	1df9      	adds	r1, r7, #7
 8003078:	f04f 33ff 	mov.w	r3, #4294967295
 800307c:	2201      	movs	r2, #1
 800307e:	4804      	ldr	r0, [pc, #16]	; (8003090 <ILI9341_WriteCommand+0x30>)
 8003080:	f005 fb10 	bl	80086a4 <HAL_SPI_Transmit>
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40020400 	.word	0x40020400
 8003090:	20000368 	.word	0x20000368

08003094 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800309e:	2201      	movs	r2, #1
 80030a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030a4:	4810      	ldr	r0, [pc, #64]	; (80030e8 <ILI9341_WriteData+0x54>)
 80030a6:	f001 fdcd 	bl	8004c44 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80030aa:	e015      	b.n	80030d8 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b2:	bf28      	it	cs
 80030b4:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80030b8:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80030ba:	89fa      	ldrh	r2, [r7, #14]
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	480a      	ldr	r0, [pc, #40]	; (80030ec <ILI9341_WriteData+0x58>)
 80030c4:	f005 faee 	bl	80086a4 <HAL_SPI_Transmit>
        buff += chunk_size;
 80030c8:	89fb      	ldrh	r3, [r7, #14]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80030d0:	89fb      	ldrh	r3, [r7, #14]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1e6      	bne.n	80030ac <ILI9341_WriteData+0x18>
    }
}
 80030de:	bf00      	nop
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40020400 	.word	0x40020400
 80030ec:	20000368 	.word	0x20000368

080030f0 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4604      	mov	r4, r0
 80030f8:	4608      	mov	r0, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	461a      	mov	r2, r3
 80030fe:	4623      	mov	r3, r4
 8003100:	80fb      	strh	r3, [r7, #6]
 8003102:	4603      	mov	r3, r0
 8003104:	80bb      	strh	r3, [r7, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	807b      	strh	r3, [r7, #2]
 800310a:	4613      	mov	r3, r2
 800310c:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800310e:	202a      	movs	r0, #42	; 0x2a
 8003110:	f7ff ffa6 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8003114:	88fb      	ldrh	r3, [r7, #6]
 8003116:	0a1b      	lsrs	r3, r3, #8
 8003118:	b29b      	uxth	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	733b      	strb	r3, [r7, #12]
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	737b      	strb	r3, [r7, #13]
 8003124:	887b      	ldrh	r3, [r7, #2]
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	b29b      	uxth	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	73bb      	strb	r3, [r7, #14]
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8003134:	f107 030c 	add.w	r3, r7, #12
 8003138:	2104      	movs	r1, #4
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ffaa 	bl	8003094 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8003140:	202b      	movs	r0, #43	; 0x2b
 8003142:	f7ff ff8d 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8003146:	88bb      	ldrh	r3, [r7, #4]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	b29b      	uxth	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	723b      	strb	r3, [r7, #8]
 8003150:	88bb      	ldrh	r3, [r7, #4]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	727b      	strb	r3, [r7, #9]
 8003156:	883b      	ldrh	r3, [r7, #0]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	b29b      	uxth	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	72bb      	strb	r3, [r7, #10]
 8003160:	883b      	ldrh	r3, [r7, #0]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8003166:	f107 0308 	add.w	r3, r7, #8
 800316a:	2104      	movs	r1, #4
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff91 	bl	8003094 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8003172:	202c      	movs	r0, #44	; 0x2c
 8003174:	f7ff ff74 	bl	8003060 <ILI9341_WriteCommand>
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	bd90      	pop	{r4, r7, pc}

08003180 <ILI9341_Init>:

void ILI9341_Init()
{
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b09b      	sub	sp, #108	; 0x6c
 8003184:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8003186:	f7ff ff3d 	bl	8003004 <ILI9341_Select>
    ILI9341_Reset();
 800318a:	f7ff ff53 	bl	8003034 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800318e:	2001      	movs	r0, #1
 8003190:	f7ff ff66 	bl	8003060 <ILI9341_WriteCommand>
    HAL_Delay(500);
 8003194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003198:	f000 ff86 	bl	80040a8 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 800319c:	20cb      	movs	r0, #203	; 0xcb
 800319e:	f7ff ff5f 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80031a2:	4a8a      	ldr	r2, [pc, #552]	; (80033cc <ILI9341_Init+0x24c>)
 80031a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80031a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031ac:	6018      	str	r0, [r3, #0]
 80031ae:	3304      	adds	r3, #4
 80031b0:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80031b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80031b6:	2105      	movs	r1, #5
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff6b 	bl	8003094 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80031be:	20cf      	movs	r0, #207	; 0xcf
 80031c0:	f7ff ff4e 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80031c4:	4a82      	ldr	r2, [pc, #520]	; (80033d0 <ILI9341_Init+0x250>)
 80031c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	4611      	mov	r1, r2
 80031ce:	8019      	strh	r1, [r3, #0]
 80031d0:	3302      	adds	r3, #2
 80031d2:	0c12      	lsrs	r2, r2, #16
 80031d4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80031d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031da:	2103      	movs	r1, #3
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff59 	bl	8003094 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80031e2:	20e8      	movs	r0, #232	; 0xe8
 80031e4:	f7ff ff3c 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80031e8:	4a7a      	ldr	r2, [pc, #488]	; (80033d4 <ILI9341_Init+0x254>)
 80031ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	4611      	mov	r1, r2
 80031f2:	8019      	strh	r1, [r3, #0]
 80031f4:	3302      	adds	r3, #2
 80031f6:	0c12      	lsrs	r2, r2, #16
 80031f8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80031fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031fe:	2103      	movs	r1, #3
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ff47 	bl	8003094 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8003206:	20ea      	movs	r0, #234	; 0xea
 8003208:	f7ff ff2a 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 800320c:	2300      	movs	r3, #0
 800320e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 8003212:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003216:	2102      	movs	r1, #2
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff3b 	bl	8003094 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800321e:	20ed      	movs	r0, #237	; 0xed
 8003220:	f7ff ff1e 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8003224:	4b6c      	ldr	r3, [pc, #432]	; (80033d8 <ILI9341_Init+0x258>)
 8003226:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 8003228:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800322c:	2104      	movs	r1, #4
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff ff30 	bl	8003094 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8003234:	20f7      	movs	r0, #247	; 0xf7
 8003236:	f7ff ff13 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 800323a:	2320      	movs	r3, #32
 800323c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8003240:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003244:	2101      	movs	r1, #1
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ff24 	bl	8003094 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 800324c:	20c0      	movs	r0, #192	; 0xc0
 800324e:	f7ff ff07 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8003252:	2323      	movs	r3, #35	; 0x23
 8003254:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8003258:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800325c:	2101      	movs	r1, #1
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff ff18 	bl	8003094 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8003264:	20c1      	movs	r0, #193	; 0xc1
 8003266:	f7ff fefb 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 800326a:	2310      	movs	r3, #16
 800326c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8003270:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003274:	2101      	movs	r1, #1
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ff0c 	bl	8003094 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 800327c:	20c5      	movs	r0, #197	; 0xc5
 800327e:	f7ff feef 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8003282:	f642 033e 	movw	r3, #10302	; 0x283e
 8003286:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 800328a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800328e:	2102      	movs	r1, #2
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff feff 	bl	8003094 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8003296:	20c7      	movs	r0, #199	; 0xc7
 8003298:	f7ff fee2 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 800329c:	2386      	movs	r3, #134	; 0x86
 800329e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80032a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032a6:	2101      	movs	r1, #1
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fef3 	bl	8003094 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80032ae:	2036      	movs	r0, #54	; 0x36
 80032b0:	f7ff fed6 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80032b4:	2348      	movs	r3, #72	; 0x48
 80032b6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 80032ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032be:	2101      	movs	r1, #1
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fee7 	bl	8003094 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80032c6:	203a      	movs	r0, #58	; 0x3a
 80032c8:	f7ff feca 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80032cc:	2355      	movs	r3, #85	; 0x55
 80032ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 80032d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032d6:	2101      	movs	r1, #1
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fedb 	bl	8003094 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80032de:	20b1      	movs	r0, #177	; 0xb1
 80032e0:	f7ff febe 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80032e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80032e8:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 80032ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032ee:	2102      	movs	r1, #2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fecf 	bl	8003094 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80032f6:	20b6      	movs	r0, #182	; 0xb6
 80032f8:	f7ff feb2 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80032fc:	4a37      	ldr	r2, [pc, #220]	; (80033dc <ILI9341_Init+0x25c>)
 80032fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	4611      	mov	r1, r2
 8003306:	8019      	strh	r1, [r3, #0]
 8003308:	3302      	adds	r3, #2
 800330a:	0c12      	lsrs	r2, r2, #16
 800330c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800330e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003312:	2103      	movs	r1, #3
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff febd 	bl	8003094 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800331a:	20f2      	movs	r0, #242	; 0xf2
 800331c:	f7ff fea0 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8003320:	2300      	movs	r3, #0
 8003322:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 8003326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800332a:	2101      	movs	r1, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff feb1 	bl	8003094 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8003332:	2026      	movs	r0, #38	; 0x26
 8003334:	f7ff fe94 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8003338:	2301      	movs	r3, #1
 800333a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 800333e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003342:	2101      	movs	r1, #1
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fea5 	bl	8003094 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 800334a:	20e0      	movs	r0, #224	; 0xe0
 800334c:	f7ff fe88 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8003350:	4b23      	ldr	r3, [pc, #140]	; (80033e0 <ILI9341_Init+0x260>)
 8003352:	f107 0414 	add.w	r4, r7, #20
 8003356:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003358:	c407      	stmia	r4!, {r0, r1, r2}
 800335a:	8023      	strh	r3, [r4, #0]
 800335c:	3402      	adds	r4, #2
 800335e:	0c1b      	lsrs	r3, r3, #16
 8003360:	7023      	strb	r3, [r4, #0]
                            0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	210f      	movs	r1, #15
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fe93 	bl	8003094 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 800336e:	20e1      	movs	r0, #225	; 0xe1
 8003370:	f7ff fe76 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <ILI9341_Init+0x264>)
 8003376:	1d3c      	adds	r4, r7, #4
 8003378:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800337a:	c407      	stmia	r4!, {r0, r1, r2}
 800337c:	8023      	strh	r3, [r4, #0]
 800337e:	3402      	adds	r4, #2
 8003380:	0c1b      	lsrs	r3, r3, #16
 8003382:	7023      	strb	r3, [r4, #0]
                            0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8003384:	1d3b      	adds	r3, r7, #4
 8003386:	210f      	movs	r1, #15
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fe83 	bl	8003094 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800338e:	2011      	movs	r0, #17
 8003390:	f7ff fe66 	bl	8003060 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8003394:	2078      	movs	r0, #120	; 0x78
 8003396:	f000 fe87 	bl	80040a8 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 800339a:	2029      	movs	r0, #41	; 0x29
 800339c:	f7ff fe60 	bl	8003060 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80033a0:	2036      	movs	r0, #54	; 0x36
 80033a2:	f7ff fe5d 	bl	8003060 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80033a6:	23e8      	movs	r3, #232	; 0xe8
 80033a8:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80033aa:	463b      	mov	r3, r7
 80033ac:	2101      	movs	r1, #1
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fe70 	bl	8003094 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80033b4:	f7ff fe32 	bl	800301c <ILI9341_Unselect>

    HAL_GPIO_WritePin(ILI9341_LED_GPIO_Port, ILI9341_LED_Pin, SET);
 80033b8:	2201      	movs	r2, #1
 80033ba:	2102      	movs	r1, #2
 80033bc:	480a      	ldr	r0, [pc, #40]	; (80033e8 <ILI9341_Init+0x268>)
 80033be:	f001 fc41 	bl	8004c44 <HAL_GPIO_WritePin>
}
 80033c2:	bf00      	nop
 80033c4:	376c      	adds	r7, #108	; 0x6c
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd90      	pop	{r4, r7, pc}
 80033ca:	bf00      	nop
 80033cc:	080148a4 	.word	0x080148a4
 80033d0:	080148ac 	.word	0x080148ac
 80033d4:	080148b0 	.word	0x080148b0
 80033d8:	81120364 	.word	0x81120364
 80033dc:	080148b4 	.word	0x080148b4
 80033e0:	080148b8 	.word	0x080148b8
 80033e4:	080148c8 	.word	0x080148c8
 80033e8:	40020400 	.word	0x40020400

080033ec <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	80fb      	strh	r3, [r7, #6]
 80033f6:	460b      	mov	r3, r1
 80033f8:	80bb      	strh	r3, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003404:	d21f      	bcs.n	8003446 <ILI9341_DrawPixel+0x5a>
 8003406:	88bb      	ldrh	r3, [r7, #4]
 8003408:	2bef      	cmp	r3, #239	; 0xef
 800340a:	d81c      	bhi.n	8003446 <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 800340c:	f7ff fdfa 	bl	8003004 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	3301      	adds	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	88bb      	ldrh	r3, [r7, #4]
 8003418:	3301      	adds	r3, #1
 800341a:	b29b      	uxth	r3, r3
 800341c:	88b9      	ldrh	r1, [r7, #4]
 800341e:	88f8      	ldrh	r0, [r7, #6]
 8003420:	f7ff fe66 	bl	80030f0 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8003424:	887b      	ldrh	r3, [r7, #2]
 8003426:	0a1b      	lsrs	r3, r3, #8
 8003428:	b29b      	uxth	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	733b      	strb	r3, [r7, #12]
 800342e:	887b      	ldrh	r3, [r7, #2]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 8003434:	f107 030c 	add.w	r3, r7, #12
 8003438:	2102      	movs	r1, #2
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fe2a 	bl	8003094 <ILI9341_WriteData>

    ILI9341_Unselect();
 8003440:	f7ff fdec 	bl	800301c <ILI9341_Unselect>
 8003444:	e000      	b.n	8003448 <ILI9341_DrawPixel+0x5c>
        return;
 8003446:	bf00      	nop
}
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <ILI9341_DrawLine>:

void ILI9341_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 800344e:	b590      	push	{r4, r7, lr}
 8003450:	b08d      	sub	sp, #52	; 0x34
 8003452:	af00      	add	r7, sp, #0
 8003454:	4604      	mov	r4, r0
 8003456:	4608      	mov	r0, r1
 8003458:	4611      	mov	r1, r2
 800345a:	461a      	mov	r2, r3
 800345c:	4623      	mov	r3, r4
 800345e:	80fb      	strh	r3, [r7, #6]
 8003460:	4603      	mov	r3, r0
 8003462:	80bb      	strh	r3, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	807b      	strh	r3, [r7, #2]
 8003468:	4613      	mov	r3, r2
 800346a:	803b      	strh	r3, [r7, #0]
    uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 800346c:	2300      	movs	r3, #0
 800346e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003470:	2300      	movs	r3, #0
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;

	delta_x = x2 - x1;
 8003474:	887a      	ldrh	r2, [r7, #2]
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 800347c:	883a      	ldrh	r2, [r7, #0]
 800347e:	88bb      	ldrh	r3, [r7, #4]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8003488:	88bb      	ldrh	r3, [r7, #4]
 800348a:	60bb      	str	r3, [r7, #8]

	if (delta_x > 0)
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	2b00      	cmp	r3, #0
 8003490:	dd02      	ble.n	8003498 <ILI9341_DrawLine+0x4a>
        incx = 1;
 8003492:	2301      	movs	r3, #1
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	e00b      	b.n	80034b0 <ILI9341_DrawLine+0x62>
	else if (delta_x == 0)
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d102      	bne.n	80034a4 <ILI9341_DrawLine+0x56>
        incx = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	e005      	b.n	80034b0 <ILI9341_DrawLine+0x62>
	else
    {
        incx = -1;
 80034a4:	f04f 33ff 	mov.w	r3, #4294967295
 80034a8:	617b      	str	r3, [r7, #20]
        delta_x = -delta_x;
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	425b      	negs	r3, r3
 80034ae:	623b      	str	r3, [r7, #32]
    }

    if (delta_y > 0)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	dd02      	ble.n	80034bc <ILI9341_DrawLine+0x6e>
        incy = 1;
 80034b6:	2301      	movs	r3, #1
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	e00b      	b.n	80034d4 <ILI9341_DrawLine+0x86>
	else if (delta_y==0)
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <ILI9341_DrawLine+0x7a>
        incy = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	e005      	b.n	80034d4 <ILI9341_DrawLine+0x86>
	else
    {
        incy = -1;
 80034c8:	f04f 33ff 	mov.w	r3, #4294967295
 80034cc:	613b      	str	r3, [r7, #16]
        delta_y = -delta_y;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	425b      	negs	r3, r3
 80034d2:	61fb      	str	r3, [r7, #28]
    }

	if (delta_x > delta_y)
 80034d4:	6a3a      	ldr	r2, [r7, #32]
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	429a      	cmp	r2, r3
 80034da:	dd02      	ble.n	80034e2 <ILI9341_DrawLine+0x94>
        distance = delta_x;
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	61bb      	str	r3, [r7, #24]
 80034e0:	e001      	b.n	80034e6 <ILI9341_DrawLine+0x98>
	else
        distance = delta_y;
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	61bb      	str	r3, [r7, #24]

	for(t = 0; t <= distance + 1; t++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80034ea:	e02b      	b.n	8003544 <ILI9341_DrawLine+0xf6>
	{
		ILI9341_DrawPixel(uRow, uCol, color);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	b291      	uxth	r1, r2
 80034f4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff77 	bl	80033ec <ILI9341_DrawPixel>

		xerr += delta_x;
 80034fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	4413      	add	r3, r2
 8003504:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 8003506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	4413      	add	r3, r2
 800350c:	627b      	str	r3, [r7, #36]	; 0x24

		if (xerr > distance)
 800350e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	429a      	cmp	r2, r3
 8003514:	dd07      	ble.n	8003526 <ILI9341_DrawLine+0xd8>
		{
			xerr -= distance;
 8003516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	4413      	add	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance)
 8003526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	429a      	cmp	r2, r3
 800352c:	dd07      	ble.n	800353e <ILI9341_DrawLine+0xf0>
		{
			yerr -= distance;
 800352e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	60bb      	str	r3, [r7, #8]
	for(t = 0; t <= distance + 1; t++)
 800353e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003540:	3301      	adds	r3, #1
 8003542:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003544:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	3301      	adds	r3, #1
 800354a:	429a      	cmp	r2, r3
 800354c:	ddce      	ble.n	80034ec <ILI9341_DrawLine+0x9e>
		}
	}
}
 800354e:	bf00      	nop
 8003550:	bf00      	nop
 8003552:	3734      	adds	r7, #52	; 0x34
 8003554:	46bd      	mov	sp, r7
 8003556:	bd90      	pop	{r4, r7, pc}

08003558 <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003558:	b082      	sub	sp, #8
 800355a:	b590      	push	{r4, r7, lr}
 800355c:	b089      	sub	sp, #36	; 0x24
 800355e:	af00      	add	r7, sp, #0
 8003560:	637b      	str	r3, [r7, #52]	; 0x34
 8003562:	4603      	mov	r3, r0
 8003564:	80fb      	strh	r3, [r7, #6]
 8003566:	460b      	mov	r3, r1
 8003568:	80bb      	strh	r3, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800356e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003572:	b29a      	uxth	r2, r3
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	4413      	add	r3, r2
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29c      	uxth	r4, r3
 800357e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003582:	b29a      	uxth	r2, r3
 8003584:	88bb      	ldrh	r3, [r7, #4]
 8003586:	4413      	add	r3, r2
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29b      	uxth	r3, r3
 800358e:	88b9      	ldrh	r1, [r7, #4]
 8003590:	88f8      	ldrh	r0, [r7, #6]
 8003592:	4622      	mov	r2, r4
 8003594:	f7ff fdac 	bl	80030f0 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8003598:	2300      	movs	r3, #0
 800359a:	61fb      	str	r3, [r7, #28]
 800359c:	e043      	b.n	8003626 <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 800359e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	3b20      	subs	r3, #32
 80035a4:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	4619      	mov	r1, r3
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	440b      	add	r3, r1
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4413      	add	r3, r2
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	e029      	b.n	8003614 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00e      	beq.n	80035ee <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80035d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	743b      	strb	r3, [r7, #16]
 80035da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 80035e0:	f107 0310 	add.w	r3, r7, #16
 80035e4:	2102      	movs	r1, #2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fd54 	bl	8003094 <ILI9341_WriteData>
 80035ec:	e00f      	b.n	800360e <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80035ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035f2:	0a1b      	lsrs	r3, r3, #8
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	733b      	strb	r3, [r7, #12]
 80035fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8003602:	f107 030c 	add.w	r3, r7, #12
 8003606:	2102      	movs	r1, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fd43 	bl	8003094 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	3301      	adds	r3, #1
 8003612:	61bb      	str	r3, [r7, #24]
 8003614:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003618:	461a      	mov	r2, r3
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	4293      	cmp	r3, r2
 800361e:	d3cf      	bcc.n	80035c0 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	3301      	adds	r3, #1
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800362a:	461a      	mov	r2, r3
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	4293      	cmp	r3, r2
 8003630:	d3b5      	bcc.n	800359e <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	3724      	adds	r7, #36	; 0x24
 8003638:	46bd      	mov	sp, r7
 800363a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800363e:	b002      	add	sp, #8
 8003640:	4770      	bx	lr

08003642 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003642:	b082      	sub	sp, #8
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af04      	add	r7, sp, #16
 800364a:	603a      	str	r2, [r7, #0]
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	4603      	mov	r3, r0
 8003650:	80fb      	strh	r3, [r7, #6]
 8003652:	460b      	mov	r3, r1
 8003654:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8003656:	f7ff fcd5 	bl	8003004 <ILI9341_Select>

    while(*str) {
 800365a:	e02e      	b.n	80036ba <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	7d3a      	ldrb	r2, [r7, #20]
 8003660:	4413      	add	r3, r2
 8003662:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003666:	db13      	blt.n	8003690 <ILI9341_WriteString+0x4e>
            x = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800366c:	7d7b      	ldrb	r3, [r7, #21]
 800366e:	b29a      	uxth	r2, r3
 8003670:	88bb      	ldrh	r3, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8003676:	88bb      	ldrh	r3, [r7, #4]
 8003678:	7d7a      	ldrb	r2, [r7, #21]
 800367a:	4413      	add	r3, r2
 800367c:	2bef      	cmp	r3, #239	; 0xef
 800367e:	dc21      	bgt.n	80036c4 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b20      	cmp	r3, #32
 8003686:	d103      	bne.n	8003690 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	3301      	adds	r3, #1
 800368c:	603b      	str	r3, [r7, #0]
                continue;
 800368e:	e014      	b.n	80036ba <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	781a      	ldrb	r2, [r3, #0]
 8003694:	88b9      	ldrh	r1, [r7, #4]
 8003696:	88f8      	ldrh	r0, [r7, #6]
 8003698:	8c3b      	ldrh	r3, [r7, #32]
 800369a:	9302      	str	r3, [sp, #8]
 800369c:	8bbb      	ldrh	r3, [r7, #28]
 800369e:	9301      	str	r3, [sp, #4]
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f7ff ff57 	bl	8003558 <ILI9341_WriteChar>
        x += font.width;
 80036aa:	7d3b      	ldrb	r3, [r7, #20]
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	4413      	add	r3, r2
 80036b2:	80fb      	strh	r3, [r7, #6]
        str++;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	3301      	adds	r3, #1
 80036b8:	603b      	str	r3, [r7, #0]
    while(*str) {
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1cc      	bne.n	800365c <ILI9341_WriteString+0x1a>
 80036c2:	e000      	b.n	80036c6 <ILI9341_WriteString+0x84>
                break;
 80036c4:	bf00      	nop
    }

    ILI9341_Unselect();
 80036c6:	f7ff fca9 	bl	800301c <ILI9341_Unselect>
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036d4:	b002      	add	sp, #8
 80036d6:	4770      	bx	lr

080036d8 <ILI9341_FillRectangle>:
    ILI9341_DrawLine(x, y, x, y + h, color);
    ILI9341_DrawLine(x, y + h, x + w, y + h, color);
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4604      	mov	r4, r0
 80036e0:	4608      	mov	r0, r1
 80036e2:	4611      	mov	r1, r2
 80036e4:	461a      	mov	r2, r3
 80036e6:	4623      	mov	r3, r4
 80036e8:	80fb      	strh	r3, [r7, #6]
 80036ea:	4603      	mov	r3, r0
 80036ec:	80bb      	strh	r3, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	807b      	strh	r3, [r7, #2]
 80036f2:	4613      	mov	r3, r2
 80036f4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80036fc:	d253      	bcs.n	80037a6 <ILI9341_FillRectangle+0xce>
 80036fe:	88bb      	ldrh	r3, [r7, #4]
 8003700:	2bef      	cmp	r3, #239	; 0xef
 8003702:	d850      	bhi.n	80037a6 <ILI9341_FillRectangle+0xce>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8003704:	88fa      	ldrh	r2, [r7, #6]
 8003706:	887b      	ldrh	r3, [r7, #2]
 8003708:	4413      	add	r3, r2
 800370a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800370e:	dd03      	ble.n	8003718 <ILI9341_FillRectangle+0x40>
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003716:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8003718:	88ba      	ldrh	r2, [r7, #4]
 800371a:	883b      	ldrh	r3, [r7, #0]
 800371c:	4413      	add	r3, r2
 800371e:	2bf0      	cmp	r3, #240	; 0xf0
 8003720:	dd03      	ble.n	800372a <ILI9341_FillRectangle+0x52>
 8003722:	88bb      	ldrh	r3, [r7, #4]
 8003724:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003728:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 800372a:	f7ff fc6b 	bl	8003004 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 800372e:	88fa      	ldrh	r2, [r7, #6]
 8003730:	887b      	ldrh	r3, [r7, #2]
 8003732:	4413      	add	r3, r2
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29c      	uxth	r4, r3
 800373a:	88ba      	ldrh	r2, [r7, #4]
 800373c:	883b      	ldrh	r3, [r7, #0]
 800373e:	4413      	add	r3, r2
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29b      	uxth	r3, r3
 8003746:	88b9      	ldrh	r1, [r7, #4]
 8003748:	88f8      	ldrh	r0, [r7, #6]
 800374a:	4622      	mov	r2, r4
 800374c:	f7ff fcd0 	bl	80030f0 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8003750:	8c3b      	ldrh	r3, [r7, #32]
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	b29b      	uxth	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	733b      	strb	r3, [r7, #12]
 800375a:	8c3b      	ldrh	r3, [r7, #32]
 800375c:	b2db      	uxtb	r3, r3
 800375e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8003760:	2201      	movs	r2, #1
 8003762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003766:	4812      	ldr	r0, [pc, #72]	; (80037b0 <ILI9341_FillRectangle+0xd8>)
 8003768:	f001 fa6c 	bl	8004c44 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800376c:	883b      	ldrh	r3, [r7, #0]
 800376e:	80bb      	strh	r3, [r7, #4]
 8003770:	e013      	b.n	800379a <ILI9341_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 8003772:	887b      	ldrh	r3, [r7, #2]
 8003774:	80fb      	strh	r3, [r7, #6]
 8003776:	e00a      	b.n	800378e <ILI9341_FillRectangle+0xb6>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003778:	f107 010c 	add.w	r1, r7, #12
 800377c:	f04f 33ff 	mov.w	r3, #4294967295
 8003780:	2202      	movs	r2, #2
 8003782:	480c      	ldr	r0, [pc, #48]	; (80037b4 <ILI9341_FillRectangle+0xdc>)
 8003784:	f004 ff8e 	bl	80086a4 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	3b01      	subs	r3, #1
 800378c:	80fb      	strh	r3, [r7, #6]
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f1      	bne.n	8003778 <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8003794:	88bb      	ldrh	r3, [r7, #4]
 8003796:	3b01      	subs	r3, #1
 8003798:	80bb      	strh	r3, [r7, #4]
 800379a:	88bb      	ldrh	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e8      	bne.n	8003772 <ILI9341_FillRectangle+0x9a>
        }
    }

    ILI9341_Unselect();
 80037a0:	f7ff fc3c 	bl	800301c <ILI9341_Unselect>
 80037a4:	e000      	b.n	80037a8 <ILI9341_FillRectangle+0xd0>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80037a6:	bf00      	nop
}
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd90      	pop	{r4, r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40020400 	.word	0x40020400
 80037b4:	20000368 	.word	0x20000368

080037b8 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af02      	add	r7, sp, #8
 80037be:	4603      	mov	r3, r0
 80037c0:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	23f0      	movs	r3, #240	; 0xf0
 80037c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037cc:	2100      	movs	r1, #0
 80037ce:	2000      	movs	r0, #0
 80037d0:	f7ff ff82 	bl	80036d8 <ILI9341_FillRectangle>
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 80037e0:	2201      	movs	r2, #1
 80037e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037e6:	4802      	ldr	r0, [pc, #8]	; (80037f0 <ILI9341_TouchUnselect+0x14>)
 80037e8:	f001 fa2c 	bl	8004c44 <HAL_GPIO_WritePin>
}
 80037ec:	bf00      	nop
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40020000 	.word	0x40020000

080037f4 <max30102_init>:
#define RES_PART_ID 0xff

extern I2C_HandleTypeDef hi2c1;

void max30102_init()
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af02      	add	r7, sp, #8
    uint8_t data = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	71fb      	strb	r3, [r7, #7]
    /*reset*/
    data = 0x40;
 80037fe:	2340      	movs	r3, #64	; 0x40
 8003800:	71fb      	strb	r3, [r7, #7]

    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8003802:	2301      	movs	r3, #1
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	1dfb      	adds	r3, r7, #7
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	2301      	movs	r3, #1
 800380c:	2209      	movs	r2, #9
 800380e:	21ae      	movs	r1, #174	; 0xae
 8003810:	4840      	ldr	r0, [pc, #256]	; (8003914 <max30102_init+0x120>)
 8003812:	f001 fe87 	bl	8005524 <HAL_I2C_Mem_Write_IT>
    //osDelay(1);
    do
    {
        HAL_I2C_Mem_Read_IT(&hi2c1, MAX30102_ADDR_READ, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8003816:	2301      	movs	r3, #1
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	1dfb      	adds	r3, r7, #7
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	2301      	movs	r3, #1
 8003820:	2209      	movs	r2, #9
 8003822:	21af      	movs	r1, #175	; 0xaf
 8003824:	483b      	ldr	r0, [pc, #236]	; (8003914 <max30102_init+0x120>)
 8003826:	f001 ff39 	bl	800569c <HAL_I2C_Mem_Read_IT>
    } while (data & 0x40);
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f0      	bne.n	8003816 <max30102_init+0x22>

    /*新数据中断*/
    data = 0x40;
 8003834:	2340      	movs	r3, #64	; 0x40
 8003836:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_INTERRUPT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8003838:	2301      	movs	r3, #1
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	1dfb      	adds	r3, r7, #7
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	2301      	movs	r3, #1
 8003842:	2202      	movs	r2, #2
 8003844:	21ae      	movs	r1, #174	; 0xae
 8003846:	4833      	ldr	r0, [pc, #204]	; (8003914 <max30102_init+0x120>)
 8003848:	f001 fe6c 	bl	8005524 <HAL_I2C_Mem_Write_IT>
    //    /* 快满中断*/
    //    data = 0x80;
    //    HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_INTERRUPT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    //    HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_FIFO_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    /*16384量程 50Hz 18位adc分辨率*/
    data = 0x63;
 800384c:	2363      	movs	r3, #99	; 0x63
 800384e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_SPO2_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8003850:	2301      	movs	r3, #1
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2301      	movs	r3, #1
 800385a:	220a      	movs	r2, #10
 800385c:	21ae      	movs	r1, #174	; 0xae
 800385e:	482d      	ldr	r0, [pc, #180]	; (8003914 <max30102_init+0x120>)
 8003860:	f001 fe60 	bl	8005524 <HAL_I2C_Mem_Write_IT>
    /*灯的亮度*/
    data = 0x47;
 8003864:	2347      	movs	r3, #71	; 0x47
 8003866:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_LED_PULSE_AMPLITUDE_1, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8003868:	2301      	movs	r3, #1
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	1dfb      	adds	r3, r7, #7
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	2301      	movs	r3, #1
 8003872:	220c      	movs	r2, #12
 8003874:	21ae      	movs	r1, #174	; 0xae
 8003876:	4827      	ldr	r0, [pc, #156]	; (8003914 <max30102_init+0x120>)
 8003878:	f001 fe54 	bl	8005524 <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_LED_PULSE_AMPLITUDE_2, I2C_MEMADD_SIZE_8BIT, &data, 1);
 800387c:	2301      	movs	r3, #1
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	1dfb      	adds	r3, r7, #7
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2301      	movs	r3, #1
 8003886:	220d      	movs	r2, #13
 8003888:	21ae      	movs	r1, #174	; 0xae
 800388a:	4822      	ldr	r0, [pc, #136]	; (8003914 <max30102_init+0x120>)
 800388c:	f001 fe4a 	bl	8005524 <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_PROXIMITY_MODE_LED_PULSE_AMPLITUDE, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8003890:	2301      	movs	r3, #1
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	1dfb      	adds	r3, r7, #7
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2301      	movs	r3, #1
 800389a:	2210      	movs	r2, #16
 800389c:	21ae      	movs	r1, #174	; 0xae
 800389e:	481d      	ldr	r0, [pc, #116]	; (8003914 <max30102_init+0x120>)
 80038a0:	f001 fe40 	bl	8005524 <HAL_I2C_Mem_Write_IT>
    /*FIFO clear*/
    data = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_FIFO_WRITE_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1);
 80038a8:	2301      	movs	r3, #1
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	1dfb      	adds	r3, r7, #7
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	2301      	movs	r3, #1
 80038b2:	2204      	movs	r2, #4
 80038b4:	21ae      	movs	r1, #174	; 0xae
 80038b6:	4817      	ldr	r0, [pc, #92]	; (8003914 <max30102_init+0x120>)
 80038b8:	f001 fe34 	bl	8005524 <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_OVERFLOW_COUNTER, I2C_MEMADD_SIZE_8BIT, &data, 1);
 80038bc:	2301      	movs	r3, #1
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2301      	movs	r3, #1
 80038c6:	2205      	movs	r2, #5
 80038c8:	21ae      	movs	r1, #174	; 0xae
 80038ca:	4812      	ldr	r0, [pc, #72]	; (8003914 <max30102_init+0x120>)
 80038cc:	f001 fe2a 	bl	8005524 <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_FIFO_READ_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1);
 80038d0:	2301      	movs	r3, #1
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	1dfb      	adds	r3, r7, #7
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	2301      	movs	r3, #1
 80038da:	2206      	movs	r2, #6
 80038dc:	21ae      	movs	r1, #174	; 0xae
 80038de:	480d      	ldr	r0, [pc, #52]	; (8003914 <max30102_init+0x120>)
 80038e0:	f001 fe20 	bl	8005524 <HAL_I2C_Mem_Write_IT>

    /*interrupt status clear*/
    max30102_getStatus();
 80038e4:	f000 f8e0 	bl	8003aa8 <max30102_getStatus>

    // /*转换温度*/
    // data = 1;
    // HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_DIE_TEMPERATURE_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    /*SPO2 Mode*/
    data = 0x03;
 80038e8:	2303      	movs	r3, #3
 80038ea:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 80038ec:	2301      	movs	r3, #1
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	1dfb      	adds	r3, r7, #7
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	2301      	movs	r3, #1
 80038f6:	2209      	movs	r2, #9
 80038f8:	21ae      	movs	r1, #174	; 0xae
 80038fa:	4806      	ldr	r0, [pc, #24]	; (8003914 <max30102_init+0x120>)
 80038fc:	f001 fe12 	bl	8005524 <HAL_I2C_Mem_Write_IT>
    HAL_UART_Transmit(&huart2, (uint8_t *) "\x1B[34m[Action]: Max30102\r\n", 27, 50);
 8003900:	2332      	movs	r3, #50	; 0x32
 8003902:	221b      	movs	r2, #27
 8003904:	4904      	ldr	r1, [pc, #16]	; (8003918 <max30102_init+0x124>)
 8003906:	4805      	ldr	r0, [pc, #20]	; (800391c <max30102_init+0x128>)
 8003908:	f006 fac4 	bl	8009e94 <HAL_UART_Transmit>
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20000314 	.word	0x20000314
 8003918:	080148d8 	.word	0x080148d8
 800391c:	2000049c 	.word	0x2000049c

08003920 <max30102_getUnreadSampleCount>:

uint8_t max30102_getUnreadSampleCount()
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af04      	add	r7, sp, #16
    uint8_t wr = 0, rd = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	71fb      	strb	r3, [r7, #7]
 800392a:	2300      	movs	r3, #0
 800392c:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_FIFO_WRITE_POINTER, I2C_MEMADD_SIZE_8BIT, &wr, 1, 10);
 800392e:	230a      	movs	r3, #10
 8003930:	9302      	str	r3, [sp, #8]
 8003932:	2301      	movs	r3, #1
 8003934:	9301      	str	r3, [sp, #4]
 8003936:	1dfb      	adds	r3, r7, #7
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	2301      	movs	r3, #1
 800393c:	2204      	movs	r2, #4
 800393e:	21af      	movs	r1, #175	; 0xaf
 8003940:	4811      	ldr	r0, [pc, #68]	; (8003988 <max30102_getUnreadSampleCount+0x68>)
 8003942:	f001 fbbd 	bl	80050c0 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_FIFO_READ_POINTER, I2C_MEMADD_SIZE_8BIT, &rd, 1, 10);
 8003946:	230a      	movs	r3, #10
 8003948:	9302      	str	r3, [sp, #8]
 800394a:	2301      	movs	r3, #1
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	1dbb      	adds	r3, r7, #6
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	2301      	movs	r3, #1
 8003954:	2206      	movs	r2, #6
 8003956:	21af      	movs	r1, #175	; 0xaf
 8003958:	480b      	ldr	r0, [pc, #44]	; (8003988 <max30102_getUnreadSampleCount+0x68>)
 800395a:	f001 fbb1 	bl	80050c0 <HAL_I2C_Mem_Read>
    if ((wr - rd) < 0)
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	461a      	mov	r2, r3
 8003962:	79bb      	ldrb	r3, [r7, #6]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	da06      	bge.n	8003978 <max30102_getUnreadSampleCount+0x58>
        return wr - rd + 32;
 800396a:	79fa      	ldrb	r2, [r7, #7]
 800396c:	79bb      	ldrb	r3, [r7, #6]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	b2db      	uxtb	r3, r3
 8003972:	3320      	adds	r3, #32
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e003      	b.n	8003980 <max30102_getUnreadSampleCount+0x60>
    else
        return wr - rd;
 8003978:	79fa      	ldrb	r2, [r7, #7]
 800397a:	79bb      	ldrb	r3, [r7, #6]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	b2db      	uxtb	r3, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20000314 	.word	0x20000314

0800398c <max30102_getFIFO>:

void max30102_getFIFO(SAMPLE *data, uint8_t sampleCount)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08e      	sub	sp, #56	; 0x38
 8003990:	af04      	add	r7, sp, #16
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	70fb      	strb	r3, [r7, #3]
    uint8_t dataTemp[5 * 6];
    if (sampleCount > 5)
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	2b05      	cmp	r3, #5
 800399c:	d901      	bls.n	80039a2 <max30102_getFIFO+0x16>
        sampleCount = 5;
 800399e:	2305      	movs	r3, #5
 80039a0:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_FIFO_DATA_REGISTER,
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	0052      	lsls	r2, r2, #1
 80039aa:	4413      	add	r3, r2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2219      	movs	r2, #25
 80039b2:	9202      	str	r2, [sp, #8]
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	f107 0308 	add.w	r3, r7, #8
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	2301      	movs	r3, #1
 80039be:	2207      	movs	r2, #7
 80039c0:	21af      	movs	r1, #175	; 0xaf
 80039c2:	4838      	ldr	r0, [pc, #224]	; (8003aa4 <max30102_getFIFO+0x118>)
 80039c4:	f001 fb7c 	bl	80050c0 <HAL_I2C_Mem_Read>
                     I2C_MEMADD_SIZE_8BIT, dataTemp,
                     6 * sampleCount, 25);
    uint8_t i;
    for (i = 0; i < sampleCount; i++)
 80039c8:	2300      	movs	r3, #0
 80039ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039ce:	e05f      	b.n	8003a90 <max30102_getFIFO+0x104>
    {
        data[i].red = (((uint32_t)dataTemp[i * 6]) << 16 | ((uint32_t)dataTemp[i * 6 + 1]) << 8 | dataTemp[i * 6 + 2]) & 0x3ffff;
 80039d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80039d4:	4613      	mov	r3, r2
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4413      	add	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	3328      	adds	r3, #40	; 0x28
 80039de:	443b      	add	r3, r7
 80039e0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80039e4:	0419      	lsls	r1, r3, #16
 80039e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	3301      	adds	r3, #1
 80039f4:	3328      	adds	r3, #40	; 0x28
 80039f6:	443b      	add	r3, r7
 80039f8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	4319      	orrs	r1, r3
 8003a00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	3328      	adds	r3, #40	; 0x28
 8003a10:	443b      	add	r3, r7
 8003a12:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003a16:	ea41 0203 	orr.w	r2, r1, r3
 8003a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	440b      	add	r3, r1
 8003a24:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8003a28:	601a      	str	r2, [r3, #0]
        data[i].iRed = (((uint32_t)dataTemp[i * 6 + 3]) << 16 | ((uint32_t)dataTemp[i * 6 + 4]) << 8 | dataTemp[i * 6 + 5]) & 0x3ffff;
 8003a2a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a2e:	4613      	mov	r3, r2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	4413      	add	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	3303      	adds	r3, #3
 8003a38:	3328      	adds	r3, #40	; 0x28
 8003a3a:	443b      	add	r3, r7
 8003a3c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003a40:	0419      	lsls	r1, r3, #16
 8003a42:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a46:	4613      	mov	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	3304      	adds	r3, #4
 8003a50:	3328      	adds	r3, #40	; 0x28
 8003a52:	443b      	add	r3, r7
 8003a54:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	4319      	orrs	r1, r3
 8003a5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	3305      	adds	r3, #5
 8003a6a:	3328      	adds	r3, #40	; 0x28
 8003a6c:	443b      	add	r3, r7
 8003a6e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003a72:	ea41 0203 	orr.w	r2, r1, r3
 8003a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	440b      	add	r3, r1
 8003a80:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8003a84:	605a      	str	r2, [r3, #4]
    for (i = 0; i < sampleCount; i++)
 8003a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d39a      	bcc.n	80039d0 <max30102_getFIFO+0x44>
    }
}
 8003a9a:	bf00      	nop
 8003a9c:	bf00      	nop
 8003a9e:	3728      	adds	r7, #40	; 0x28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20000314 	.word	0x20000314

08003aa8 <max30102_getStatus>:

uint8_t max30102_getStatus()
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af04      	add	r7, sp, #16
    uint8_t data = 0, dataTemp = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	71fb      	strb	r3, [r7, #7]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_INTERRUPT_STATUS_1, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 8003ab6:	230a      	movs	r3, #10
 8003ab8:	9302      	str	r3, [sp, #8]
 8003aba:	2301      	movs	r3, #1
 8003abc:	9301      	str	r3, [sp, #4]
 8003abe:	1dbb      	adds	r3, r7, #6
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	21af      	movs	r1, #175	; 0xaf
 8003ac8:	480c      	ldr	r0, [pc, #48]	; (8003afc <max30102_getStatus+0x54>)
 8003aca:	f001 faf9 	bl	80050c0 <HAL_I2C_Mem_Read>
    data = dataTemp;
 8003ace:	79bb      	ldrb	r3, [r7, #6]
 8003ad0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_INTERRUPT_STATUS_2, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 8003ad2:	230a      	movs	r3, #10
 8003ad4:	9302      	str	r3, [sp, #8]
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	1dbb      	adds	r3, r7, #6
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	2301      	movs	r3, #1
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	21af      	movs	r1, #175	; 0xaf
 8003ae4:	4805      	ldr	r0, [pc, #20]	; (8003afc <max30102_getStatus+0x54>)
 8003ae6:	f001 faeb 	bl	80050c0 <HAL_I2C_Mem_Read>
    return data | dataTemp;
 8003aea:	79ba      	ldrb	r2, [r7, #6]
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	b2db      	uxtb	r3, r3
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000314 	.word	0x20000314

08003b00 <filter>:
uint16_t iRedAC = 0;
uint32_t iRedDC = 0;

#define FILTER_LEVEL 8 /*滤波等级*/
void filter(SAMPLE *s)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t red = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]
    uint32_t ired = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < FILTER_LEVEL - 1; i++)
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
 8003b14:	e011      	b.n	8003b3a <filter+0x3a>
    {
        red += sampleBuff[i].red;
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <filter+0x68>)
 8003b1a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4413      	add	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        ired += sampleBuff[i].iRed;
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	4a10      	ldr	r2, [pc, #64]	; (8003b68 <filter+0x68>)
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < FILTER_LEVEL - 1; i++)
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
 8003b36:	3301      	adds	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d9ea      	bls.n	8003b16 <filter+0x16>
    }
    s->red = (red + s->red) / FILTER_LEVEL;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4413      	add	r3, r2
 8003b48:	08da      	lsrs	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	601a      	str	r2, [r3, #0]
    s->iRed = (ired + s->iRed) / FILTER_LEVEL;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	08da      	lsrs	r2, r3, #3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]
}
 8003b5c:	bf00      	nop
 8003b5e:	371c      	adds	r7, #28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	20000538 	.word	0x20000538

08003b6c <buffInsert>:

void buffInsert(SAMPLE s)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	463b      	mov	r3, r7
 8003b74:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t i;
    for (i = BUFF_SIZE - 1; i > 0; i--)
 8003b78:	2331      	movs	r3, #49	; 0x31
 8003b7a:	73fb      	strb	r3, [r7, #15]
 8003b7c:	e016      	b.n	8003bac <buffInsert+0x40>
    {
        sampleBuff[i].red = sampleBuff[i - 1].red;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	1e5a      	subs	r2, r3, #1
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	4911      	ldr	r1, [pc, #68]	; (8003bcc <buffInsert+0x60>)
 8003b86:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8003b8a:	4910      	ldr	r1, [pc, #64]	; (8003bcc <buffInsert+0x60>)
 8003b8c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        sampleBuff[i].iRed = sampleBuff[i - 1].iRed;
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	7bf9      	ldrb	r1, [r7, #15]
 8003b96:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <buffInsert+0x60>)
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	480b      	ldr	r0, [pc, #44]	; (8003bcc <buffInsert+0x60>)
 8003ba0:	00cb      	lsls	r3, r1, #3
 8003ba2:	4403      	add	r3, r0
 8003ba4:	605a      	str	r2, [r3, #4]
    for (i = BUFF_SIZE - 1; i > 0; i--)
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e5      	bne.n	8003b7e <buffInsert+0x12>
    }
    sampleBuff[0].red = s.red;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	4a05      	ldr	r2, [pc, #20]	; (8003bcc <buffInsert+0x60>)
 8003bb6:	6013      	str	r3, [r2, #0]
    sampleBuff[0].iRed = s.iRed;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a04      	ldr	r2, [pc, #16]	; (8003bcc <buffInsert+0x60>)
 8003bbc:	6053      	str	r3, [r2, #4]
}
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	20000538 	.word	0x20000538

08003bd0 <calAcDc>:

void calAcDc(uint16_t *rac, uint32_t *rdc, uint16_t *iac, uint32_t *idc)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b08b      	sub	sp, #44	; 0x2c
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
    uint32_t rMax = sampleBuff[0].red;
 8003bde:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <calAcDc+0xe4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rMin = sampleBuff[0].red;
 8003be4:	4b33      	ldr	r3, [pc, #204]	; (8003cb4 <calAcDc+0xe4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	623b      	str	r3, [r7, #32]
    uint32_t iMax = sampleBuff[0].iRed;
 8003bea:	4b32      	ldr	r3, [pc, #200]	; (8003cb4 <calAcDc+0xe4>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	61fb      	str	r3, [r7, #28]
    uint32_t iMin = sampleBuff[0].iRed;
 8003bf0:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <calAcDc+0xe4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	61bb      	str	r3, [r7, #24]

    uint8_t i;
    for (i = 0; i < BUFF_SIZE; i++)
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]
 8003bfa:	e036      	b.n	8003c6a <calAcDc+0x9a>
    {
        if (sampleBuff[i].red > rMax)
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	4a2d      	ldr	r2, [pc, #180]	; (8003cb4 <calAcDc+0xe4>)
 8003c00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d204      	bcs.n	8003c14 <calAcDc+0x44>
            rMax = sampleBuff[i].red;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	4a29      	ldr	r2, [pc, #164]	; (8003cb4 <calAcDc+0xe4>)
 8003c0e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
        if (sampleBuff[i].red < rMin)
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	4a27      	ldr	r2, [pc, #156]	; (8003cb4 <calAcDc+0xe4>)
 8003c18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d904      	bls.n	8003c2c <calAcDc+0x5c>
            rMin = sampleBuff[i].red;
 8003c22:	7dfb      	ldrb	r3, [r7, #23]
 8003c24:	4a23      	ldr	r2, [pc, #140]	; (8003cb4 <calAcDc+0xe4>)
 8003c26:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c2a:	623b      	str	r3, [r7, #32]
        if (sampleBuff[i].iRed > iMax)
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	4a21      	ldr	r2, [pc, #132]	; (8003cb4 <calAcDc+0xe4>)
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4413      	add	r3, r2
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d205      	bcs.n	8003c48 <calAcDc+0x78>
            iMax = sampleBuff[i].iRed;
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <calAcDc+0xe4>)
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	61fb      	str	r3, [r7, #28]
        if (sampleBuff[i].iRed < iMin)
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	4a1a      	ldr	r2, [pc, #104]	; (8003cb4 <calAcDc+0xe4>)
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4413      	add	r3, r2
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d905      	bls.n	8003c64 <calAcDc+0x94>
            iMin = sampleBuff[i].iRed;
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	4a16      	ldr	r2, [pc, #88]	; (8003cb4 <calAcDc+0xe4>)
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4413      	add	r3, r2
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < BUFF_SIZE; i++)
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	3301      	adds	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
 8003c6c:	2b31      	cmp	r3, #49	; 0x31
 8003c6e:	d9c5      	bls.n	8003bfc <calAcDc+0x2c>
    }
    *rac = rMax - rMin;
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	801a      	strh	r2, [r3, #0]
    *rdc = (rMax + rMin) / 2;
 8003c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	4413      	add	r3, r2
 8003c86:	085a      	lsrs	r2, r3, #1
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	601a      	str	r2, [r3, #0]
    *iac = iMax - iMin;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	801a      	strh	r2, [r3, #0]
    *idc = (iMax + iMin) / 2;
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	085a      	lsrs	r2, r3, #1
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	601a      	str	r2, [r3, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	372c      	adds	r7, #44	; 0x2c
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	20000538 	.word	0x20000538

08003cb8 <max30102_cal>:

int16_t eachSampleDiff = 0; //和上一个样本相差了多少
void max30102_cal()
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b090      	sub	sp, #64	; 0x40
 8003cbc:	af00      	add	r7, sp, #0
    uint8_t unreadSampleCount = max30102_getUnreadSampleCount();
 8003cbe:	f7ff fe2f 	bl	8003920 <max30102_getUnreadSampleCount>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    SAMPLE sampleBuffTemp[5];
    max30102_getFIFO(sampleBuffTemp, unreadSampleCount);
 8003cc8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003ccc:	f107 0308 	add.w	r3, r7, #8
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff fe5a 	bl	800398c <max30102_getFIFO>
    static uint8_t eachBeatSampleCount = 0;    //这次心跳历经了多少个样本
    static uint8_t lastTenBeatSampleCount[10]; //过去十次心跳每一次的样本数
    static uint32_t last_iRed = 0;             //上一次红外的值，过滤后的
    uint8_t i, ii;
    for (i = 0; i < unreadSampleCount; i++)
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003cde:	e128      	b.n	8003f32 <max30102_cal+0x27a>
    {
        if (sampleBuffTemp[i].iRed < 40000) //无手指不计算，跳过
 8003ce0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	3338      	adds	r3, #56	; 0x38
 8003ce8:	f107 0208 	add.w	r2, r7, #8
 8003cec:	4413      	add	r3, r2
 8003cee:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003cf2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d809      	bhi.n	8003d0e <max30102_cal+0x56>
        {
            heartRate = 0;
 8003cfa:	4b9d      	ldr	r3, [pc, #628]	; (8003f70 <max30102_cal+0x2b8>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
            spo2 = 0;
 8003d00:	4b9c      	ldr	r3, [pc, #624]	; (8003f74 <max30102_cal+0x2bc>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
            eachSampleDiff = 0;
 8003d06:	4b9c      	ldr	r3, [pc, #624]	; (8003f78 <max30102_cal+0x2c0>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	801a      	strh	r2, [r3, #0]
            continue;
 8003d0c:	e10c      	b.n	8003f28 <max30102_cal+0x270>
        }
        buffInsert(sampleBuffTemp[i]);
 8003d0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	3338      	adds	r3, #56	; 0x38
 8003d16:	f107 0208 	add.w	r2, r7, #8
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3b38      	subs	r3, #56	; 0x38
 8003d1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003d22:	f7ff ff23 	bl	8003b6c <buffInsert>
        calAcDc(&redAC, &redDC, &iRedAC, &iRedDC);
 8003d26:	4b95      	ldr	r3, [pc, #596]	; (8003f7c <max30102_cal+0x2c4>)
 8003d28:	4a95      	ldr	r2, [pc, #596]	; (8003f80 <max30102_cal+0x2c8>)
 8003d2a:	4996      	ldr	r1, [pc, #600]	; (8003f84 <max30102_cal+0x2cc>)
 8003d2c:	4896      	ldr	r0, [pc, #600]	; (8003f88 <max30102_cal+0x2d0>)
 8003d2e:	f7ff ff4f 	bl	8003bd0 <calAcDc>
        filter(&sampleBuffTemp[i]);
 8003d32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d36:	f107 0208 	add.w	r2, r7, #8
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff fede 	bl	8003b00 <filter>
        //计算spo2
        float R = (((float)(redAC)) / ((float)(redDC))) / (((float)(iRedAC)) / ((float)(iRedDC)));
 8003d44:	4b90      	ldr	r3, [pc, #576]	; (8003f88 <max30102_cal+0x2d0>)
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	ee07 3a90 	vmov	s15, r3
 8003d4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d50:	4b8c      	ldr	r3, [pc, #560]	; (8003f84 <max30102_cal+0x2cc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	ee07 3a90 	vmov	s15, r3
 8003d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d60:	4b87      	ldr	r3, [pc, #540]	; (8003f80 <max30102_cal+0x2c8>)
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	ee07 3a90 	vmov	s15, r3
 8003d68:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8003d6c:	4b83      	ldr	r3, [pc, #524]	; (8003f7c <max30102_cal+0x2c4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	ee07 3a90 	vmov	s15, r3
 8003d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d78:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8003d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d80:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        if (R >= 0.36 && R < 0.66)
 8003d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d86:	f7fc fbe7 	bl	8000558 <__aeabi_f2d>
 8003d8a:	a371      	add	r3, pc, #452	; (adr r3, 8003f50 <max30102_cal+0x298>)
 8003d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d90:	f7fc fec0 	bl	8000b14 <__aeabi_dcmpge>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01d      	beq.n	8003dd6 <max30102_cal+0x11e>
 8003d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d9c:	f7fc fbdc 	bl	8000558 <__aeabi_f2d>
 8003da0:	a36d      	add	r3, pc, #436	; (adr r3, 8003f58 <max30102_cal+0x2a0>)
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	f7fc fea1 	bl	8000aec <__aeabi_dcmplt>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d012      	beq.n	8003dd6 <max30102_cal+0x11e>
            spo2 = (uint8_t)(107 - 20 * R);
 8003db0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003db4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003db8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dbc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003f8c <max30102_cal+0x2d4>
 8003dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003dcc:	793b      	ldrb	r3, [r7, #4]
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	4b68      	ldr	r3, [pc, #416]	; (8003f74 <max30102_cal+0x2bc>)
 8003dd2:	701a      	strb	r2, [r3, #0]
 8003dd4:	e02e      	b.n	8003e34 <max30102_cal+0x17c>
        else if (R >= 0.66 && R < 1)
 8003dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dd8:	f7fc fbbe 	bl	8000558 <__aeabi_f2d>
 8003ddc:	a35e      	add	r3, pc, #376	; (adr r3, 8003f58 <max30102_cal+0x2a0>)
 8003dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de2:	f7fc fe97 	bl	8000b14 <__aeabi_dcmpge>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d023      	beq.n	8003e34 <max30102_cal+0x17c>
 8003dec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfc:	d51a      	bpl.n	8003e34 <max30102_cal+0x17c>
            spo2 = (uint8_t)(129.64 - 54 * R);
 8003dfe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003e02:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003f90 <max30102_cal+0x2d8>
 8003e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e0a:	ee17 0a90 	vmov	r0, s15
 8003e0e:	f7fc fba3 	bl	8000558 <__aeabi_f2d>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	a152      	add	r1, pc, #328	; (adr r1, 8003f60 <max30102_cal+0x2a8>)
 8003e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e1c:	f7fc fa3c 	bl	8000298 <__aeabi_dsub>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4610      	mov	r0, r2
 8003e26:	4619      	mov	r1, r3
 8003e28:	f7fc fec6 	bl	8000bb8 <__aeabi_d2uiz>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <max30102_cal+0x2bc>)
 8003e32:	701a      	strb	r2, [r3, #0]
        //计算心率,30-250ppm  count:200-12
        eachSampleDiff = last_iRed - sampleBuffTemp[i].iRed;
 8003e34:	4b57      	ldr	r3, [pc, #348]	; (8003f94 <max30102_cal+0x2dc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	3338      	adds	r3, #56	; 0x38
 8003e42:	f107 0108 	add.w	r1, r7, #8
 8003e46:	440b      	add	r3, r1
 8003e48:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	b21a      	sxth	r2, r3
 8003e54:	4b48      	ldr	r3, [pc, #288]	; (8003f78 <max30102_cal+0x2c0>)
 8003e56:	801a      	strh	r2, [r3, #0]
        if (eachSampleDiff > 50 && eachBeatSampleCount > 12)
 8003e58:	4b47      	ldr	r3, [pc, #284]	; (8003f78 <max30102_cal+0x2c0>)
 8003e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e5e:	2b32      	cmp	r3, #50	; 0x32
 8003e60:	dd51      	ble.n	8003f06 <max30102_cal+0x24e>
 8003e62:	4b4d      	ldr	r3, [pc, #308]	; (8003f98 <max30102_cal+0x2e0>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d94d      	bls.n	8003f06 <max30102_cal+0x24e>
        {
            for (ii = 9; ii > 0; ii--)
 8003e6a:	2309      	movs	r3, #9
 8003e6c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003e70:	e00d      	b.n	8003e8e <max30102_cal+0x1d6>
                lastTenBeatSampleCount[i] = lastTenBeatSampleCount[i - 1];
 8003e72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e76:	1e5a      	subs	r2, r3, #1
 8003e78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e7c:	4947      	ldr	r1, [pc, #284]	; (8003f9c <max30102_cal+0x2e4>)
 8003e7e:	5c89      	ldrb	r1, [r1, r2]
 8003e80:	4a46      	ldr	r2, [pc, #280]	; (8003f9c <max30102_cal+0x2e4>)
 8003e82:	54d1      	strb	r1, [r2, r3]
            for (ii = 9; ii > 0; ii--)
 8003e84:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003e8e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1ed      	bne.n	8003e72 <max30102_cal+0x1ba>
            lastTenBeatSampleCount[0] = eachBeatSampleCount;
 8003e96:	4b40      	ldr	r3, [pc, #256]	; (8003f98 <max30102_cal+0x2e0>)
 8003e98:	781a      	ldrb	r2, [r3, #0]
 8003e9a:	4b40      	ldr	r3, [pc, #256]	; (8003f9c <max30102_cal+0x2e4>)
 8003e9c:	701a      	strb	r2, [r3, #0]
            uint32_t totalTime = 0;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	63bb      	str	r3, [r7, #56]	; 0x38
            for (ii = 0; ii < 10; ii++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003ea8:	e00c      	b.n	8003ec4 <max30102_cal+0x20c>
                totalTime += lastTenBeatSampleCount[i];
 8003eaa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003eae:	4a3b      	ldr	r2, [pc, #236]	; (8003f9c <max30102_cal+0x2e4>)
 8003eb0:	5cd3      	ldrb	r3, [r2, r3]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb6:	4413      	add	r3, r2
 8003eb8:	63bb      	str	r3, [r7, #56]	; 0x38
            for (ii = 0; ii < 10; ii++)
 8003eba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003ec4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003ec8:	2b09      	cmp	r3, #9
 8003eca:	d9ee      	bls.n	8003eaa <max30102_cal+0x1f2>
            heartRate = (uint8_t)(60.0 * 10 / 0.02 / ((float)totalTime));
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed6:	ee17 0a90 	vmov	r0, s15
 8003eda:	f7fc fb3d 	bl	8000558 <__aeabi_f2d>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	a121      	add	r1, pc, #132	; (adr r1, 8003f68 <max30102_cal+0x2b0>)
 8003ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ee8:	f7fc fcb8 	bl	800085c <__aeabi_ddiv>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f7fc fe60 	bl	8000bb8 <__aeabi_d2uiz>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <max30102_cal+0x2b8>)
 8003efe:	701a      	strb	r2, [r3, #0]
            eachBeatSampleCount = 0;
 8003f00:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <max30102_cal+0x2e0>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	701a      	strb	r2, [r3, #0]
        }
        last_iRed = sampleBuffTemp[i].iRed;
 8003f06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	3338      	adds	r3, #56	; 0x38
 8003f0e:	f107 0208 	add.w	r2, r7, #8
 8003f12:	4413      	add	r3, r2
 8003f14:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003f18:	4a1e      	ldr	r2, [pc, #120]	; (8003f94 <max30102_cal+0x2dc>)
 8003f1a:	6013      	str	r3, [r2, #0]
        eachBeatSampleCount++;
 8003f1c:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <max30102_cal+0x2e0>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	3301      	adds	r3, #1
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <max30102_cal+0x2e0>)
 8003f26:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < unreadSampleCount; i++)
 8003f28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003f32:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003f36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	f4ff aed0 	bcc.w	8003ce0 <max30102_cal+0x28>
    }
}
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
 8003f44:	3740      	adds	r7, #64	; 0x40
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	f3af 8000 	nop.w
 8003f50:	70a3d70a 	.word	0x70a3d70a
 8003f54:	3fd70a3d 	.word	0x3fd70a3d
 8003f58:	51eb851f 	.word	0x51eb851f
 8003f5c:	3fe51eb8 	.word	0x3fe51eb8
 8003f60:	e147ae14 	.word	0xe147ae14
 8003f64:	4060347a 	.word	0x4060347a
 8003f68:	00000000 	.word	0x00000000
 8003f6c:	40dd4c00 	.word	0x40dd4c00
 8003f70:	200006c8 	.word	0x200006c8
 8003f74:	200006c9 	.word	0x200006c9
 8003f78:	200006d8 	.word	0x200006d8
 8003f7c:	200006d4 	.word	0x200006d4
 8003f80:	200006d0 	.word	0x200006d0
 8003f84:	200006cc 	.word	0x200006cc
 8003f88:	200006ca 	.word	0x200006ca
 8003f8c:	42d60000 	.word	0x42d60000
 8003f90:	42580000 	.word	0x42580000
 8003f94:	200006dc 	.word	0x200006dc
 8003f98:	200006e0 	.word	0x200006e0
 8003f9c:	200006e4 	.word	0x200006e4

08003fa0 <max30102_getHeartRate>:

uint8_t max30102_getHeartRate() { return heartRate; }
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <max30102_getHeartRate+0x14>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	200006c8 	.word	0x200006c8

08003fb8 <max30102_getSpO2>:
uint8_t max30102_getSpO2() { return spo2; }
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	4b03      	ldr	r3, [pc, #12]	; (8003fcc <max30102_getSpO2+0x14>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	200006c9 	.word	0x200006c9

08003fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004008 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fd4:	480d      	ldr	r0, [pc, #52]	; (800400c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003fd6:	490e      	ldr	r1, [pc, #56]	; (8004010 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003fd8:	4a0e      	ldr	r2, [pc, #56]	; (8004014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fdc:	e002      	b.n	8003fe4 <LoopCopyDataInit>

08003fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fe2:	3304      	adds	r3, #4

08003fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fe8:	d3f9      	bcc.n	8003fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fea:	4a0b      	ldr	r2, [pc, #44]	; (8004018 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003fec:	4c0b      	ldr	r4, [pc, #44]	; (800401c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ff0:	e001      	b.n	8003ff6 <LoopFillZerobss>

08003ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ff4:	3204      	adds	r2, #4

08003ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ff8:	d3fb      	bcc.n	8003ff2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ffa:	f7fe f94f 	bl	800229c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ffe:	f00a ff4b 	bl	800ee98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004002:	f7fd fe07 	bl	8001c14 <main>
  bx  lr    
 8004006:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004008:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800400c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004010:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8004014:	08016738 	.word	0x08016738
  ldr r2, =_sbss
 8004018:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 800401c:	20005114 	.word	0x20005114

08004020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004020:	e7fe      	b.n	8004020 <ADC_IRQHandler>
	...

08004024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004028:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <HAL_Init+0x40>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a0d      	ldr	r2, [pc, #52]	; (8004064 <HAL_Init+0x40>)
 800402e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_Init+0x40>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <HAL_Init+0x40>)
 800403a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800403e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004040:	4b08      	ldr	r3, [pc, #32]	; (8004064 <HAL_Init+0x40>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a07      	ldr	r2, [pc, #28]	; (8004064 <HAL_Init+0x40>)
 8004046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800404c:	2003      	movs	r0, #3
 800404e:	f000 f921 	bl	8004294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004052:	2005      	movs	r0, #5
 8004054:	f7fd ff7e 	bl	8001f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004058:	f7fd ff48 	bl	8001eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40023c00 	.word	0x40023c00

08004068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_IncTick+0x20>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_IncTick+0x24>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4413      	add	r3, r2
 8004078:	4a04      	ldr	r2, [pc, #16]	; (800408c <HAL_IncTick+0x24>)
 800407a:	6013      	str	r3, [r2, #0]
}
 800407c:	bf00      	nop
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000030 	.word	0x20000030
 800408c:	200006f0 	.word	0x200006f0

08004090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return uwTick;
 8004094:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_GetTick+0x14>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	200006f0 	.word	0x200006f0

080040a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040b0:	f7ff ffee 	bl	8004090 <HAL_GetTick>
 80040b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d005      	beq.n	80040ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <HAL_Delay+0x44>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040ce:	bf00      	nop
 80040d0:	f7ff ffde 	bl	8004090 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d8f7      	bhi.n	80040d0 <HAL_Delay+0x28>
  {
  }
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000030 	.word	0x20000030

080040f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <__NVIC_SetPriorityGrouping+0x44>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800410c:	4013      	ands	r3, r2
 800410e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800411c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004122:	4a04      	ldr	r2, [pc, #16]	; (8004134 <__NVIC_SetPriorityGrouping+0x44>)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	60d3      	str	r3, [r2, #12]
}
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	e000ed00 	.word	0xe000ed00

08004138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800413c:	4b04      	ldr	r3, [pc, #16]	; (8004150 <__NVIC_GetPriorityGrouping+0x18>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	0a1b      	lsrs	r3, r3, #8
 8004142:	f003 0307 	and.w	r3, r3, #7
}
 8004146:	4618      	mov	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	e000ed00 	.word	0xe000ed00

08004154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800415e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004162:	2b00      	cmp	r3, #0
 8004164:	db0b      	blt.n	800417e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	f003 021f 	and.w	r2, r3, #31
 800416c:	4907      	ldr	r1, [pc, #28]	; (800418c <__NVIC_EnableIRQ+0x38>)
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2001      	movs	r0, #1
 8004176:	fa00 f202 	lsl.w	r2, r0, r2
 800417a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	e000e100 	.word	0xe000e100

08004190 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800419a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	db12      	blt.n	80041c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	f003 021f 	and.w	r2, r3, #31
 80041a8:	490a      	ldr	r1, [pc, #40]	; (80041d4 <__NVIC_DisableIRQ+0x44>)
 80041aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	2001      	movs	r0, #1
 80041b2:	fa00 f202 	lsl.w	r2, r0, r2
 80041b6:	3320      	adds	r3, #32
 80041b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80041bc:	f3bf 8f4f 	dsb	sy
}
 80041c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041c2:	f3bf 8f6f 	isb	sy
}
 80041c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	e000e100 	.word	0xe000e100

080041d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	6039      	str	r1, [r7, #0]
 80041e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	db0a      	blt.n	8004202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	490c      	ldr	r1, [pc, #48]	; (8004224 <__NVIC_SetPriority+0x4c>)
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f6:	0112      	lsls	r2, r2, #4
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	440b      	add	r3, r1
 80041fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004200:	e00a      	b.n	8004218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	4908      	ldr	r1, [pc, #32]	; (8004228 <__NVIC_SetPriority+0x50>)
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	3b04      	subs	r3, #4
 8004210:	0112      	lsls	r2, r2, #4
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	440b      	add	r3, r1
 8004216:	761a      	strb	r2, [r3, #24]
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	e000e100 	.word	0xe000e100
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800422c:	b480      	push	{r7}
 800422e:	b089      	sub	sp, #36	; 0x24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f1c3 0307 	rsb	r3, r3, #7
 8004246:	2b04      	cmp	r3, #4
 8004248:	bf28      	it	cs
 800424a:	2304      	movcs	r3, #4
 800424c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3304      	adds	r3, #4
 8004252:	2b06      	cmp	r3, #6
 8004254:	d902      	bls.n	800425c <NVIC_EncodePriority+0x30>
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	3b03      	subs	r3, #3
 800425a:	e000      	b.n	800425e <NVIC_EncodePriority+0x32>
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004260:	f04f 32ff 	mov.w	r2, #4294967295
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43da      	mvns	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	401a      	ands	r2, r3
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004274:	f04f 31ff 	mov.w	r1, #4294967295
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	fa01 f303 	lsl.w	r3, r1, r3
 800427e:	43d9      	mvns	r1, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004284:	4313      	orrs	r3, r2
         );
}
 8004286:	4618      	mov	r0, r3
 8004288:	3724      	adds	r7, #36	; 0x24
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b07      	cmp	r3, #7
 80042a0:	d00f      	beq.n	80042c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b06      	cmp	r3, #6
 80042a6:	d00c      	beq.n	80042c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d009      	beq.n	80042c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d006      	beq.n	80042c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d003      	beq.n	80042c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80042ba:	2190      	movs	r1, #144	; 0x90
 80042bc:	4804      	ldr	r0, [pc, #16]	; (80042d0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80042be:	f7fd fd64 	bl	8001d8a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ff14 	bl	80040f0 <__NVIC_SetPriorityGrouping>
}
 80042c8:	bf00      	nop
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	080148f4 	.word	0x080148f4

080042d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b0f      	cmp	r3, #15
 80042ea:	d903      	bls.n	80042f4 <HAL_NVIC_SetPriority+0x20>
 80042ec:	21a8      	movs	r1, #168	; 0xa8
 80042ee:	480e      	ldr	r0, [pc, #56]	; (8004328 <HAL_NVIC_SetPriority+0x54>)
 80042f0:	f7fd fd4b 	bl	8001d8a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b0f      	cmp	r3, #15
 80042f8:	d903      	bls.n	8004302 <HAL_NVIC_SetPriority+0x2e>
 80042fa:	21a9      	movs	r1, #169	; 0xa9
 80042fc:	480a      	ldr	r0, [pc, #40]	; (8004328 <HAL_NVIC_SetPriority+0x54>)
 80042fe:	f7fd fd44 	bl	8001d8a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004302:	f7ff ff19 	bl	8004138 <__NVIC_GetPriorityGrouping>
 8004306:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	6978      	ldr	r0, [r7, #20]
 800430e:	f7ff ff8d 	bl	800422c <NVIC_EncodePriority>
 8004312:	4602      	mov	r2, r0
 8004314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004318:	4611      	mov	r1, r2
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff ff5c 	bl	80041d8 <__NVIC_SetPriority>
}
 8004320:	bf00      	nop
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	080148f4 	.word	0x080148f4

0800432c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433a:	2b00      	cmp	r3, #0
 800433c:	da03      	bge.n	8004346 <HAL_NVIC_EnableIRQ+0x1a>
 800433e:	21bc      	movs	r1, #188	; 0xbc
 8004340:	4805      	ldr	r0, [pc, #20]	; (8004358 <HAL_NVIC_EnableIRQ+0x2c>)
 8004342:	f7fd fd22 	bl	8001d8a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff ff02 	bl	8004154 <__NVIC_EnableIRQ>
}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	080148f4 	.word	0x080148f4

0800435c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436a:	2b00      	cmp	r3, #0
 800436c:	da03      	bge.n	8004376 <HAL_NVIC_DisableIRQ+0x1a>
 800436e:	21cc      	movs	r1, #204	; 0xcc
 8004370:	4805      	ldr	r0, [pc, #20]	; (8004388 <HAL_NVIC_DisableIRQ+0x2c>)
 8004372:	f7fd fd0a 	bl	8001d8a <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ff08 	bl	8004190 <__NVIC_DisableIRQ>
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	080148f4 	.word	0x080148f4

0800438c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800439a:	f7ff fe79 	bl	8004090 <HAL_GetTick>
 800439e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d008      	beq.n	80043be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2280      	movs	r2, #128	; 0x80
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e052      	b.n	8004464 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0216 	bic.w	r2, r2, #22
 80043cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d103      	bne.n	80043ee <HAL_DMA_Abort+0x62>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d007      	beq.n	80043fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0208 	bic.w	r2, r2, #8
 80043fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0201 	bic.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800440e:	e013      	b.n	8004438 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004410:	f7ff fe3e 	bl	8004090 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b05      	cmp	r3, #5
 800441c:	d90c      	bls.n	8004438 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2203      	movs	r2, #3
 8004428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e015      	b.n	8004464 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e4      	bne.n	8004410 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444a:	223f      	movs	r2, #63	; 0x3f
 800444c:	409a      	lsls	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d004      	beq.n	800448a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2280      	movs	r2, #128	; 0x80
 8004484:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e00c      	b.n	80044a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2205      	movs	r2, #5
 800448e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044be:	b2db      	uxtb	r3, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044de:	2300      	movs	r3, #0
 80044e0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a33      	ldr	r2, [pc, #204]	; (80045b4 <HAL_GPIO_Init+0xe8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d017      	beq.n	800451a <HAL_GPIO_Init+0x4e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a32      	ldr	r2, [pc, #200]	; (80045b8 <HAL_GPIO_Init+0xec>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <HAL_GPIO_Init+0x4e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a31      	ldr	r2, [pc, #196]	; (80045bc <HAL_GPIO_Init+0xf0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00f      	beq.n	800451a <HAL_GPIO_Init+0x4e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a30      	ldr	r2, [pc, #192]	; (80045c0 <HAL_GPIO_Init+0xf4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00b      	beq.n	800451a <HAL_GPIO_Init+0x4e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2f      	ldr	r2, [pc, #188]	; (80045c4 <HAL_GPIO_Init+0xf8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d007      	beq.n	800451a <HAL_GPIO_Init+0x4e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2e      	ldr	r2, [pc, #184]	; (80045c8 <HAL_GPIO_Init+0xfc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d003      	beq.n	800451a <HAL_GPIO_Init+0x4e>
 8004512:	21ac      	movs	r1, #172	; 0xac
 8004514:	482d      	ldr	r0, [pc, #180]	; (80045cc <HAL_GPIO_Init+0x100>)
 8004516:	f7fd fc38 	bl	8001d8a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_GPIO_Init+0x64>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	041b      	lsls	r3, r3, #16
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_GPIO_Init+0x6c>
 8004530:	21ad      	movs	r1, #173	; 0xad
 8004532:	4826      	ldr	r0, [pc, #152]	; (80045cc <HAL_GPIO_Init+0x100>)
 8004534:	f7fd fc29 	bl	8001d8a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d035      	beq.n	80045ac <HAL_GPIO_Init+0xe0>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d031      	beq.n	80045ac <HAL_GPIO_Init+0xe0>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b11      	cmp	r3, #17
 800454e:	d02d      	beq.n	80045ac <HAL_GPIO_Init+0xe0>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d029      	beq.n	80045ac <HAL_GPIO_Init+0xe0>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b12      	cmp	r3, #18
 800455e:	d025      	beq.n	80045ac <HAL_GPIO_Init+0xe0>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004568:	d020      	beq.n	80045ac <HAL_GPIO_Init+0xe0>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004572:	d01b      	beq.n	80045ac <HAL_GPIO_Init+0xe0>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800457c:	d016      	beq.n	80045ac <HAL_GPIO_Init+0xe0>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8004586:	d011      	beq.n	80045ac <HAL_GPIO_Init+0xe0>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8004590:	d00c      	beq.n	80045ac <HAL_GPIO_Init+0xe0>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800459a:	d007      	beq.n	80045ac <HAL_GPIO_Init+0xe0>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d003      	beq.n	80045ac <HAL_GPIO_Init+0xe0>
 80045a4:	21ae      	movs	r1, #174	; 0xae
 80045a6:	4809      	ldr	r0, [pc, #36]	; (80045cc <HAL_GPIO_Init+0x100>)
 80045a8:	f7fd fbef 	bl	8001d8a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ac:	2300      	movs	r3, #0
 80045ae:	61fb      	str	r3, [r7, #28]
 80045b0:	e206      	b.n	80049c0 <HAL_GPIO_Init+0x4f4>
 80045b2:	bf00      	nop
 80045b4:	40020000 	.word	0x40020000
 80045b8:	40020400 	.word	0x40020400
 80045bc:	40020800 	.word	0x40020800
 80045c0:	40020c00 	.word	0x40020c00
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40021c00 	.word	0x40021c00
 80045cc:	08014968 	.word	0x08014968
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045d0:	2201      	movs	r2, #1
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4013      	ands	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	f040 81e6 	bne.w	80049ba <HAL_GPIO_Init+0x4ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d005      	beq.n	8004606 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004602:	2b02      	cmp	r3, #2
 8004604:	d144      	bne.n	8004690 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00f      	beq.n	800462e <HAL_GPIO_Init+0x162>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d00b      	beq.n	800462e <HAL_GPIO_Init+0x162>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d007      	beq.n	800462e <HAL_GPIO_Init+0x162>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b03      	cmp	r3, #3
 8004624:	d003      	beq.n	800462e <HAL_GPIO_Init+0x162>
 8004626:	21c0      	movs	r1, #192	; 0xc0
 8004628:	4894      	ldr	r0, [pc, #592]	; (800487c <HAL_GPIO_Init+0x3b0>)
 800462a:	f7fd fbae 	bl	8001d8a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	2203      	movs	r2, #3
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43db      	mvns	r3, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4013      	ands	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004664:	2201      	movs	r2, #1
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4013      	ands	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 0201 	and.w	r2, r3, #1
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4313      	orrs	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	2b03      	cmp	r3, #3
 800469a:	d027      	beq.n	80046ec <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <HAL_GPIO_Init+0x1f0>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d007      	beq.n	80046bc <HAL_GPIO_Init+0x1f0>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d003      	beq.n	80046bc <HAL_GPIO_Init+0x1f0>
 80046b4:	21d1      	movs	r1, #209	; 0xd1
 80046b6:	4871      	ldr	r0, [pc, #452]	; (800487c <HAL_GPIO_Init+0x3b0>)
 80046b8:	f7fd fb67 	bl	8001d8a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	2203      	movs	r2, #3
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4013      	ands	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	f040 8098 	bne.w	800482a <HAL_GPIO_Init+0x35e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d06f      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b0c      	cmp	r3, #12
 8004708:	d06b      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d067      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d063      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d05f      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d05b      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d057      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d053      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d04f      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d04b      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d047      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b03      	cmp	r3, #3
 8004758:	d043      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b03      	cmp	r3, #3
 8004760:	d03f      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b03      	cmp	r3, #3
 8004768:	d03b      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b04      	cmp	r3, #4
 8004770:	d037      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b04      	cmp	r3, #4
 8004778:	d033      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b04      	cmp	r3, #4
 8004780:	d02f      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b05      	cmp	r3, #5
 8004788:	d02b      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b05      	cmp	r3, #5
 8004790:	d027      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b05      	cmp	r3, #5
 8004798:	d023      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b06      	cmp	r3, #6
 80047a0:	d01f      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b07      	cmp	r3, #7
 80047a8:	d01b      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b07      	cmp	r3, #7
 80047b0:	d017      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d013      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b09      	cmp	r3, #9
 80047c0:	d00f      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b09      	cmp	r3, #9
 80047c8:	d00b      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b0a      	cmp	r3, #10
 80047d0:	d007      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b0f      	cmp	r3, #15
 80047d8:	d003      	beq.n	80047e2 <HAL_GPIO_Init+0x316>
 80047da:	21de      	movs	r1, #222	; 0xde
 80047dc:	4827      	ldr	r0, [pc, #156]	; (800487c <HAL_GPIO_Init+0x3b0>)
 80047de:	f7fd fad4 	bl	8001d8a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	08da      	lsrs	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3208      	adds	r2, #8
 80047ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	220f      	movs	r2, #15
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	43db      	mvns	r3, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4013      	ands	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4313      	orrs	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	08da      	lsrs	r2, r3, #3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3208      	adds	r2, #8
 8004824:	69b9      	ldr	r1, [r7, #24]
 8004826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	2203      	movs	r2, #3
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4013      	ands	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 0203 	and.w	r2, r3, #3
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4313      	orrs	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80a7 	beq.w	80049ba <HAL_GPIO_Init+0x4ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	4b03      	ldr	r3, [pc, #12]	; (8004880 <HAL_GPIO_Init+0x3b4>)
 8004872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004874:	4a02      	ldr	r2, [pc, #8]	; (8004880 <HAL_GPIO_Init+0x3b4>)
 8004876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800487a:	e003      	b.n	8004884 <HAL_GPIO_Init+0x3b8>
 800487c:	08014968 	.word	0x08014968
 8004880:	40023800 	.word	0x40023800
 8004884:	6453      	str	r3, [r2, #68]	; 0x44
 8004886:	4b53      	ldr	r3, [pc, #332]	; (80049d4 <HAL_GPIO_Init+0x508>)
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004892:	4a51      	ldr	r2, [pc, #324]	; (80049d8 <HAL_GPIO_Init+0x50c>)
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	089b      	lsrs	r3, r3, #2
 8004898:	3302      	adds	r3, #2
 800489a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	220f      	movs	r2, #15
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	43db      	mvns	r3, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4013      	ands	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a48      	ldr	r2, [pc, #288]	; (80049dc <HAL_GPIO_Init+0x510>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d019      	beq.n	80048f2 <HAL_GPIO_Init+0x426>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a47      	ldr	r2, [pc, #284]	; (80049e0 <HAL_GPIO_Init+0x514>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <HAL_GPIO_Init+0x422>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a46      	ldr	r2, [pc, #280]	; (80049e4 <HAL_GPIO_Init+0x518>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00d      	beq.n	80048ea <HAL_GPIO_Init+0x41e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a45      	ldr	r2, [pc, #276]	; (80049e8 <HAL_GPIO_Init+0x51c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d007      	beq.n	80048e6 <HAL_GPIO_Init+0x41a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a44      	ldr	r2, [pc, #272]	; (80049ec <HAL_GPIO_Init+0x520>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d101      	bne.n	80048e2 <HAL_GPIO_Init+0x416>
 80048de:	2304      	movs	r3, #4
 80048e0:	e008      	b.n	80048f4 <HAL_GPIO_Init+0x428>
 80048e2:	2307      	movs	r3, #7
 80048e4:	e006      	b.n	80048f4 <HAL_GPIO_Init+0x428>
 80048e6:	2303      	movs	r3, #3
 80048e8:	e004      	b.n	80048f4 <HAL_GPIO_Init+0x428>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e002      	b.n	80048f4 <HAL_GPIO_Init+0x428>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <HAL_GPIO_Init+0x428>
 80048f2:	2300      	movs	r3, #0
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	f002 0203 	and.w	r2, r2, #3
 80048fa:	0092      	lsls	r2, r2, #2
 80048fc:	4093      	lsls	r3, r2
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004904:	4934      	ldr	r1, [pc, #208]	; (80049d8 <HAL_GPIO_Init+0x50c>)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	089b      	lsrs	r3, r3, #2
 800490a:	3302      	adds	r3, #2
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004912:	4b37      	ldr	r3, [pc, #220]	; (80049f0 <HAL_GPIO_Init+0x524>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	43db      	mvns	r3, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4013      	ands	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_GPIO_Init+0x46a>
        {
          temp |= iocurrent;
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004936:	4a2e      	ldr	r2, [pc, #184]	; (80049f0 <HAL_GPIO_Init+0x524>)
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800493c:	4b2c      	ldr	r3, [pc, #176]	; (80049f0 <HAL_GPIO_Init+0x524>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	43db      	mvns	r3, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4013      	ands	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_GPIO_Init+0x494>
        {
          temp |= iocurrent;
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004960:	4a23      	ldr	r2, [pc, #140]	; (80049f0 <HAL_GPIO_Init+0x524>)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004966:	4b22      	ldr	r3, [pc, #136]	; (80049f0 <HAL_GPIO_Init+0x524>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	43db      	mvns	r3, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4013      	ands	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_GPIO_Init+0x4be>
        {
          temp |= iocurrent;
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	4313      	orrs	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800498a:	4a19      	ldr	r2, [pc, #100]	; (80049f0 <HAL_GPIO_Init+0x524>)
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004990:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <HAL_GPIO_Init+0x524>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	43db      	mvns	r3, r3
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	4013      	ands	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_GPIO_Init+0x4e8>
        {
          temp |= iocurrent;
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049b4:	4a0e      	ldr	r2, [pc, #56]	; (80049f0 <HAL_GPIO_Init+0x524>)
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3301      	adds	r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b0f      	cmp	r3, #15
 80049c4:	f67f ae04 	bls.w	80045d0 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40013800 	.word	0x40013800
 80049dc:	40020000 	.word	0x40020000
 80049e0:	40020400 	.word	0x40020400
 80049e4:	40020800 	.word	0x40020800
 80049e8:	40020c00 	.word	0x40020c00
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40013c00 	.word	0x40013c00

080049f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a71      	ldr	r2, [pc, #452]	; (8004bd4 <HAL_GPIO_DeInit+0x1e0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d018      	beq.n	8004a44 <HAL_GPIO_DeInit+0x50>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a70      	ldr	r2, [pc, #448]	; (8004bd8 <HAL_GPIO_DeInit+0x1e4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d014      	beq.n	8004a44 <HAL_GPIO_DeInit+0x50>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a6f      	ldr	r2, [pc, #444]	; (8004bdc <HAL_GPIO_DeInit+0x1e8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d010      	beq.n	8004a44 <HAL_GPIO_DeInit+0x50>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a6e      	ldr	r2, [pc, #440]	; (8004be0 <HAL_GPIO_DeInit+0x1ec>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00c      	beq.n	8004a44 <HAL_GPIO_DeInit+0x50>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a6d      	ldr	r2, [pc, #436]	; (8004be4 <HAL_GPIO_DeInit+0x1f0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d008      	beq.n	8004a44 <HAL_GPIO_DeInit+0x50>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a6c      	ldr	r2, [pc, #432]	; (8004be8 <HAL_GPIO_DeInit+0x1f4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d004      	beq.n	8004a44 <HAL_GPIO_DeInit+0x50>
 8004a3a:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8004a3e:	486b      	ldr	r0, [pc, #428]	; (8004bec <HAL_GPIO_DeInit+0x1f8>)
 8004a40:	f7fd f9a3 	bl	8001d8a <assert_failed>
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	e0bb      	b.n	8004bc2 <HAL_GPIO_DeInit+0x1ce>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	f040 80ab 	bne.w	8004bbc <HAL_GPIO_DeInit+0x1c8>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004a66:	4a62      	ldr	r2, [pc, #392]	; (8004bf0 <HAL_GPIO_DeInit+0x1fc>)
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	089b      	lsrs	r3, r3, #2
 8004a6c:	3302      	adds	r3, #2
 8004a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a72:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	220f      	movs	r2, #15
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	4013      	ands	r3, r2
 8004a86:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a52      	ldr	r2, [pc, #328]	; (8004bd4 <HAL_GPIO_DeInit+0x1e0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d019      	beq.n	8004ac4 <HAL_GPIO_DeInit+0xd0>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a51      	ldr	r2, [pc, #324]	; (8004bd8 <HAL_GPIO_DeInit+0x1e4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d013      	beq.n	8004ac0 <HAL_GPIO_DeInit+0xcc>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a50      	ldr	r2, [pc, #320]	; (8004bdc <HAL_GPIO_DeInit+0x1e8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00d      	beq.n	8004abc <HAL_GPIO_DeInit+0xc8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a4f      	ldr	r2, [pc, #316]	; (8004be0 <HAL_GPIO_DeInit+0x1ec>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d007      	beq.n	8004ab8 <HAL_GPIO_DeInit+0xc4>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a4e      	ldr	r2, [pc, #312]	; (8004be4 <HAL_GPIO_DeInit+0x1f0>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d101      	bne.n	8004ab4 <HAL_GPIO_DeInit+0xc0>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	e008      	b.n	8004ac6 <HAL_GPIO_DeInit+0xd2>
 8004ab4:	2307      	movs	r3, #7
 8004ab6:	e006      	b.n	8004ac6 <HAL_GPIO_DeInit+0xd2>
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e004      	b.n	8004ac6 <HAL_GPIO_DeInit+0xd2>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e002      	b.n	8004ac6 <HAL_GPIO_DeInit+0xd2>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <HAL_GPIO_DeInit+0xd2>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	f002 0203 	and.w	r2, r2, #3
 8004acc:	0092      	lsls	r2, r2, #2
 8004ace:	4093      	lsls	r3, r2
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d132      	bne.n	8004b3c <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004ad6:	4b47      	ldr	r3, [pc, #284]	; (8004bf4 <HAL_GPIO_DeInit+0x200>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	43db      	mvns	r3, r3
 8004ade:	4945      	ldr	r1, [pc, #276]	; (8004bf4 <HAL_GPIO_DeInit+0x200>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004ae4:	4b43      	ldr	r3, [pc, #268]	; (8004bf4 <HAL_GPIO_DeInit+0x200>)
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	43db      	mvns	r3, r3
 8004aec:	4941      	ldr	r1, [pc, #260]	; (8004bf4 <HAL_GPIO_DeInit+0x200>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004af2:	4b40      	ldr	r3, [pc, #256]	; (8004bf4 <HAL_GPIO_DeInit+0x200>)
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	43db      	mvns	r3, r3
 8004afa:	493e      	ldr	r1, [pc, #248]	; (8004bf4 <HAL_GPIO_DeInit+0x200>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004b00:	4b3c      	ldr	r3, [pc, #240]	; (8004bf4 <HAL_GPIO_DeInit+0x200>)
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	43db      	mvns	r3, r3
 8004b08:	493a      	ldr	r1, [pc, #232]	; (8004bf4 <HAL_GPIO_DeInit+0x200>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	220f      	movs	r2, #15
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004b1e:	4a34      	ldr	r2, [pc, #208]	; (8004bf0 <HAL_GPIO_DeInit+0x1fc>)
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	089b      	lsrs	r3, r3, #2
 8004b24:	3302      	adds	r3, #2
 8004b26:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	43da      	mvns	r2, r3
 8004b2e:	4830      	ldr	r0, [pc, #192]	; (8004bf0 <HAL_GPIO_DeInit+0x1fc>)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	089b      	lsrs	r3, r3, #2
 8004b34:	400a      	ands	r2, r1
 8004b36:	3302      	adds	r3, #2
 8004b38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	2103      	movs	r1, #3
 8004b46:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4a:	43db      	mvns	r3, r3
 8004b4c:	401a      	ands	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	08da      	lsrs	r2, r3, #3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3208      	adds	r2, #8
 8004b5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	220f      	movs	r2, #15
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	08d2      	lsrs	r2, r2, #3
 8004b72:	4019      	ands	r1, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3208      	adds	r2, #8
 8004b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	2103      	movs	r1, #3
 8004b86:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	401a      	ands	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	2101      	movs	r1, #1
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	401a      	ands	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	2103      	movs	r1, #3
 8004bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	401a      	ands	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b0f      	cmp	r3, #15
 8004bc6:	f67f af40 	bls.w	8004a4a <HAL_GPIO_DeInit+0x56>
    }
  }
}
 8004bca:	bf00      	nop
 8004bcc:	bf00      	nop
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40020000 	.word	0x40020000
 8004bd8:	40020400 	.word	0x40020400
 8004bdc:	40020800 	.word	0x40020800
 8004be0:	40020c00 	.word	0x40020c00
 8004be4:	40021000 	.word	0x40021000
 8004be8:	40021c00 	.word	0x40021c00
 8004bec:	08014968 	.word	0x08014968
 8004bf0:	40013800 	.word	0x40013800
 8004bf4:	40013c00 	.word	0x40013c00

08004bf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004c04:	887b      	ldrh	r3, [r7, #2]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <HAL_GPIO_ReadPin+0x1c>
 8004c0a:	887b      	ldrh	r3, [r7, #2]
 8004c0c:	0c1b      	lsrs	r3, r3, #16
 8004c0e:	041b      	lsls	r3, r3, #16
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d004      	beq.n	8004c1e <HAL_GPIO_ReadPin+0x26>
 8004c14:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8004c18:	4809      	ldr	r0, [pc, #36]	; (8004c40 <HAL_GPIO_ReadPin+0x48>)
 8004c1a:	f7fd f8b6 	bl	8001d8a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	887b      	ldrh	r3, [r7, #2]
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
 8004c2e:	e001      	b.n	8004c34 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c30:	2300      	movs	r3, #0
 8004c32:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	08014968 	.word	0x08014968

08004c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	807b      	strh	r3, [r7, #2]
 8004c50:	4613      	mov	r3, r2
 8004c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004c54:	887b      	ldrh	r3, [r7, #2]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <HAL_GPIO_WritePin+0x20>
 8004c5a:	887b      	ldrh	r3, [r7, #2]
 8004c5c:	0c1b      	lsrs	r3, r3, #16
 8004c5e:	041b      	lsls	r3, r3, #16
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d004      	beq.n	8004c6e <HAL_GPIO_WritePin+0x2a>
 8004c64:	f240 119d 	movw	r1, #413	; 0x19d
 8004c68:	480e      	ldr	r0, [pc, #56]	; (8004ca4 <HAL_GPIO_WritePin+0x60>)
 8004c6a:	f7fd f88e 	bl	8001d8a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004c6e:	787b      	ldrb	r3, [r7, #1]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d007      	beq.n	8004c84 <HAL_GPIO_WritePin+0x40>
 8004c74:	787b      	ldrb	r3, [r7, #1]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d004      	beq.n	8004c84 <HAL_GPIO_WritePin+0x40>
 8004c7a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8004c7e:	4809      	ldr	r0, [pc, #36]	; (8004ca4 <HAL_GPIO_WritePin+0x60>)
 8004c80:	f7fd f883 	bl	8001d8a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004c84:	787b      	ldrb	r3, [r7, #1]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c8a:	887a      	ldrh	r2, [r7, #2]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c90:	e003      	b.n	8004c9a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c92:	887b      	ldrh	r3, [r7, #2]
 8004c94:	041a      	lsls	r2, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	619a      	str	r2, [r3, #24]
}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	08014968 	.word	0x08014968

08004ca8 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004cb4:	887b      	ldrh	r3, [r7, #2]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d004      	beq.n	8004cc4 <HAL_GPIO_TogglePin+0x1c>
 8004cba:	887b      	ldrh	r3, [r7, #2]
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d004      	beq.n	8004cce <HAL_GPIO_TogglePin+0x26>
 8004cc4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8004cc8:	480a      	ldr	r0, [pc, #40]	; (8004cf4 <HAL_GPIO_TogglePin+0x4c>)
 8004cca:	f7fd f85e 	bl	8001d8a <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cd4:	887a      	ldrh	r2, [r7, #2]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	041a      	lsls	r2, r3, #16
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	43d9      	mvns	r1, r3
 8004ce0:	887b      	ldrh	r3, [r7, #2]
 8004ce2:	400b      	ands	r3, r1
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	619a      	str	r2, [r3, #24]
}
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	08014968 	.word	0x08014968

08004cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d02:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d04:	695a      	ldr	r2, [r3, #20]
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d006      	beq.n	8004d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d0e:	4a05      	ldr	r2, [pc, #20]	; (8004d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d14:	88fb      	ldrh	r3, [r7, #6]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fc fdbe 	bl	8001898 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d1c:	bf00      	nop
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40013c00 	.word	0x40013c00

08004d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e1bd      	b.n	80050b6 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a93      	ldr	r2, [pc, #588]	; (8004f8c <HAL_I2C_Init+0x264>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00e      	beq.n	8004d62 <HAL_I2C_Init+0x3a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a91      	ldr	r2, [pc, #580]	; (8004f90 <HAL_I2C_Init+0x268>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d009      	beq.n	8004d62 <HAL_I2C_Init+0x3a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a90      	ldr	r2, [pc, #576]	; (8004f94 <HAL_I2C_Init+0x26c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_I2C_Init+0x3a>
 8004d58:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8004d5c:	488e      	ldr	r0, [pc, #568]	; (8004f98 <HAL_I2C_Init+0x270>)
 8004d5e:	f7fd f814 	bl	8001d8a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d004      	beq.n	8004d74 <HAL_I2C_Init+0x4c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4a8b      	ldr	r2, [pc, #556]	; (8004f9c <HAL_I2C_Init+0x274>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d904      	bls.n	8004d7e <HAL_I2C_Init+0x56>
 8004d74:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004d78:	4887      	ldr	r0, [pc, #540]	; (8004f98 <HAL_I2C_Init+0x270>)
 8004d7a:	f7fd f806 	bl	8001d8a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d009      	beq.n	8004d9a <HAL_I2C_Init+0x72>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d8e:	d004      	beq.n	8004d9a <HAL_I2C_Init+0x72>
 8004d90:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004d94:	4880      	ldr	r0, [pc, #512]	; (8004f98 <HAL_I2C_Init+0x270>)
 8004d96:	f7fc fff8 	bl	8001d8a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004da2:	f023 0303 	bic.w	r3, r3, #3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d004      	beq.n	8004db4 <HAL_I2C_Init+0x8c>
 8004daa:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004dae:	487a      	ldr	r0, [pc, #488]	; (8004f98 <HAL_I2C_Init+0x270>)
 8004db0:	f7fc ffeb 	bl	8001d8a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dbc:	d009      	beq.n	8004dd2 <HAL_I2C_Init+0xaa>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004dc6:	d004      	beq.n	8004dd2 <HAL_I2C_Init+0xaa>
 8004dc8:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004dcc:	4872      	ldr	r0, [pc, #456]	; (8004f98 <HAL_I2C_Init+0x270>)
 8004dce:	f7fc ffdc 	bl	8001d8a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <HAL_I2C_Init+0xc4>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d004      	beq.n	8004dec <HAL_I2C_Init+0xc4>
 8004de2:	f240 11c3 	movw	r1, #451	; 0x1c3
 8004de6:	486c      	ldr	r0, [pc, #432]	; (8004f98 <HAL_I2C_Init+0x270>)
 8004de8:	f7fc ffcf 	bl	8001d8a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d004      	beq.n	8004e02 <HAL_I2C_Init+0xda>
 8004df8:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8004dfc:	4866      	ldr	r0, [pc, #408]	; (8004f98 <HAL_I2C_Init+0x270>)
 8004dfe:	f7fc ffc4 	bl	8001d8a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d008      	beq.n	8004e1c <HAL_I2C_Init+0xf4>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	2b40      	cmp	r3, #64	; 0x40
 8004e10:	d004      	beq.n	8004e1c <HAL_I2C_Init+0xf4>
 8004e12:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004e16:	4860      	ldr	r0, [pc, #384]	; (8004f98 <HAL_I2C_Init+0x270>)
 8004e18:	f7fc ffb7 	bl	8001d8a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_I2C_Init+0x10e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	2b80      	cmp	r3, #128	; 0x80
 8004e2a:	d004      	beq.n	8004e36 <HAL_I2C_Init+0x10e>
 8004e2c:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8004e30:	4859      	ldr	r0, [pc, #356]	; (8004f98 <HAL_I2C_Init+0x270>)
 8004e32:	f7fc ffaa 	bl	8001d8a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fc fe8a 	bl	8001b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2224      	movs	r2, #36	; 0x24
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0201 	bic.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e88:	f003 f9d2 	bl	8008230 <HAL_RCC_GetPCLK1Freq>
 8004e8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	4a43      	ldr	r2, [pc, #268]	; (8004fa0 <HAL_I2C_Init+0x278>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d807      	bhi.n	8004ea8 <HAL_I2C_Init+0x180>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4a42      	ldr	r2, [pc, #264]	; (8004fa4 <HAL_I2C_Init+0x27c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	bf94      	ite	ls
 8004ea0:	2301      	movls	r3, #1
 8004ea2:	2300      	movhi	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	e006      	b.n	8004eb6 <HAL_I2C_Init+0x18e>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4a3f      	ldr	r2, [pc, #252]	; (8004fa8 <HAL_I2C_Init+0x280>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	bf94      	ite	ls
 8004eb0:	2301      	movls	r3, #1
 8004eb2:	2300      	movhi	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e0fb      	b.n	80050b6 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4a3a      	ldr	r2, [pc, #232]	; (8004fac <HAL_I2C_Init+0x284>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	0c9b      	lsrs	r3, r3, #18
 8004ec8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4a2c      	ldr	r2, [pc, #176]	; (8004fa0 <HAL_I2C_Init+0x278>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d802      	bhi.n	8004ef8 <HAL_I2C_Init+0x1d0>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	e009      	b.n	8004f0c <HAL_I2C_Init+0x1e4>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004efe:	fb02 f303 	mul.w	r3, r2, r3
 8004f02:	4a2b      	ldr	r2, [pc, #172]	; (8004fb0 <HAL_I2C_Init+0x288>)
 8004f04:	fba2 2303 	umull	r2, r3, r2, r3
 8004f08:	099b      	lsrs	r3, r3, #6
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	430b      	orrs	r3, r1
 8004f12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	491e      	ldr	r1, [pc, #120]	; (8004fa0 <HAL_I2C_Init+0x278>)
 8004f28:	428b      	cmp	r3, r1
 8004f2a:	d819      	bhi.n	8004f60 <HAL_I2C_Init+0x238>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1e59      	subs	r1, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f3a:	1c59      	adds	r1, r3, #1
 8004f3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f40:	400b      	ands	r3, r1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HAL_I2C_Init+0x234>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1e59      	subs	r1, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f54:	3301      	adds	r3, #1
 8004f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f5a:	e065      	b.n	8005028 <HAL_I2C_Init+0x300>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	e063      	b.n	8005028 <HAL_I2C_Init+0x300>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d125      	bne.n	8004fb4 <HAL_I2C_Init+0x28c>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	1e58      	subs	r0, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6859      	ldr	r1, [r3, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	440b      	add	r3, r1
 8004f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf0c      	ite	eq
 8004f84:	2301      	moveq	r3, #1
 8004f86:	2300      	movne	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	e026      	b.n	8004fda <HAL_I2C_Init+0x2b2>
 8004f8c:	40005400 	.word	0x40005400
 8004f90:	40005800 	.word	0x40005800
 8004f94:	40005c00 	.word	0x40005c00
 8004f98:	080149dc 	.word	0x080149dc
 8004f9c:	00061a80 	.word	0x00061a80
 8004fa0:	000186a0 	.word	0x000186a0
 8004fa4:	001e847f 	.word	0x001e847f
 8004fa8:	003d08ff 	.word	0x003d08ff
 8004fac:	431bde83 	.word	0x431bde83
 8004fb0:	10624dd3 	.word	0x10624dd3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	1e58      	subs	r0, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6859      	ldr	r1, [r3, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	0099      	lsls	r1, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fca:	3301      	adds	r3, #1
 8004fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2301      	moveq	r3, #1
 8004fd6:	2300      	movne	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_I2C_Init+0x2ba>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e022      	b.n	8005028 <HAL_I2C_Init+0x300>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10e      	bne.n	8005008 <HAL_I2C_Init+0x2e0>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1e58      	subs	r0, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6859      	ldr	r1, [r3, #4]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	440b      	add	r3, r1
 8004ff8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005006:	e00f      	b.n	8005028 <HAL_I2C_Init+0x300>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	1e58      	subs	r0, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6859      	ldr	r1, [r3, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	0099      	lsls	r1, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	fbb0 f3f3 	udiv	r3, r0, r3
 800501e:	3301      	adds	r3, #1
 8005020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	6809      	ldr	r1, [r1, #0]
 800502c:	4313      	orrs	r3, r2
 800502e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005056:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6911      	ldr	r1, [r2, #16]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	68d2      	ldr	r2, [r2, #12]
 8005062:	4311      	orrs	r1, r2
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	430b      	orrs	r3, r1
 800506a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695a      	ldr	r2, [r3, #20]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop

080050c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08c      	sub	sp, #48	; 0x30
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	461a      	mov	r2, r3
 80050ce:	4603      	mov	r3, r0
 80050d0:	817b      	strh	r3, [r7, #10]
 80050d2:	460b      	mov	r3, r1
 80050d4:	813b      	strh	r3, [r7, #8]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050da:	f7fe ffd9 	bl	8004090 <HAL_GetTick>
 80050de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80050e0:	88fb      	ldrh	r3, [r7, #6]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d007      	beq.n	80050f6 <HAL_I2C_Mem_Read+0x36>
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	2b10      	cmp	r3, #16
 80050ea:	d004      	beq.n	80050f6 <HAL_I2C_Mem_Read+0x36>
 80050ec:	f640 2134 	movw	r1, #2612	; 0xa34
 80050f0:	4881      	ldr	r0, [pc, #516]	; (80052f8 <HAL_I2C_Mem_Read+0x238>)
 80050f2:	f7fc fe4a 	bl	8001d8a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b20      	cmp	r3, #32
 8005100:	f040 8209 	bne.w	8005516 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	2319      	movs	r3, #25
 800510a:	2201      	movs	r2, #1
 800510c:	497b      	ldr	r1, [pc, #492]	; (80052fc <HAL_I2C_Mem_Read+0x23c>)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f002 f902 	bl	8007318 <I2C_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 800511a:	2302      	movs	r3, #2
 800511c:	e1fc      	b.n	8005518 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_I2C_Mem_Read+0x6c>
 8005128:	2302      	movs	r3, #2
 800512a:	e1f5      	b.n	8005518 <HAL_I2C_Mem_Read+0x458>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b01      	cmp	r3, #1
 8005140:	d007      	beq.n	8005152 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005160:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2222      	movs	r2, #34	; 0x22
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2240      	movs	r2, #64	; 0x40
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a5b      	ldr	r2, [pc, #364]	; (8005300 <HAL_I2C_Mem_Read+0x240>)
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005194:	88f8      	ldrh	r0, [r7, #6]
 8005196:	893a      	ldrh	r2, [r7, #8]
 8005198:	8979      	ldrh	r1, [r7, #10]
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	4603      	mov	r3, r0
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f001 ff27 	bl	8006ff8 <I2C_RequestMemoryRead>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e1b1      	b.n	8005518 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d113      	bne.n	80051e4 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051bc:	2300      	movs	r3, #0
 80051be:	623b      	str	r3, [r7, #32]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	623b      	str	r3, [r7, #32]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	e185      	b.n	80054f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d11b      	bne.n	8005224 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051fa:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051fc:	2300      	movs	r3, #0
 80051fe:	61fb      	str	r3, [r7, #28]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	e165      	b.n	80054f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005228:	2b02      	cmp	r3, #2
 800522a:	d11b      	bne.n	8005264 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523a:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800524a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800524c:	2300      	movs	r3, #0
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	61bb      	str	r3, [r7, #24]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	61bb      	str	r3, [r7, #24]
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	e145      	b.n	80054f0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005264:	2300      	movs	r3, #0
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800527a:	e139      	b.n	80054f0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005280:	2b03      	cmp	r3, #3
 8005282:	f200 80f2 	bhi.w	800546a <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528a:	2b01      	cmp	r3, #1
 800528c:	d123      	bne.n	80052d6 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800528e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005290:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f002 f98a 	bl	80075ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e13a      	b.n	8005518 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052d4:	e10c      	b.n	80054f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d14f      	bne.n	800537e <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	2200      	movs	r2, #0
 80052e6:	4907      	ldr	r1, [pc, #28]	; (8005304 <HAL_I2C_Mem_Read+0x244>)
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f002 f815 	bl	8007318 <I2C_WaitOnFlagUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d009      	beq.n	8005308 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e10f      	b.n	8005518 <HAL_I2C_Mem_Read+0x458>
 80052f8:	080149dc 	.word	0x080149dc
 80052fc:	00100002 	.word	0x00100002
 8005300:	ffff0000 	.word	0xffff0000
 8005304:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005316:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800537c:	e0b8      	b.n	80054f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	2200      	movs	r2, #0
 8005386:	4966      	ldr	r1, [pc, #408]	; (8005520 <HAL_I2C_Mem_Read+0x460>)
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f001 ffc5 	bl	8007318 <I2C_WaitOnFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0bf      	b.n	8005518 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e0:	2200      	movs	r2, #0
 80053e2:	494f      	ldr	r1, [pc, #316]	; (8005520 <HAL_I2C_Mem_Read+0x460>)
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f001 ff97 	bl	8007318 <I2C_WaitOnFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e091      	b.n	8005518 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542c:	b29b      	uxth	r3, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005468:	e042      	b.n	80054f0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800546a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f002 f89c 	bl	80075ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e04c      	b.n	8005518 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549a:	3b01      	subs	r3, #1
 800549c:	b29a      	uxth	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d118      	bne.n	80054f0 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f47f aec1 	bne.w	800527c <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	e000      	b.n	8005518 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005516:	2302      	movs	r3, #2
  }
}
 8005518:	4618      	mov	r0, r3
 800551a:	3728      	adds	r7, #40	; 0x28
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	00010004 	.word	0x00010004

08005524 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	4608      	mov	r0, r1
 800552e:	4611      	mov	r1, r2
 8005530:	461a      	mov	r2, r3
 8005532:	4603      	mov	r3, r0
 8005534:	817b      	strh	r3, [r7, #10]
 8005536:	460b      	mov	r3, r1
 8005538:	813b      	strh	r3, [r7, #8]
 800553a:	4613      	mov	r3, r2
 800553c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d007      	beq.n	8005558 <HAL_I2C_Mem_Write_IT+0x34>
 8005548:	88fb      	ldrh	r3, [r7, #6]
 800554a:	2b10      	cmp	r3, #16
 800554c:	d004      	beq.n	8005558 <HAL_I2C_Mem_Write_IT+0x34>
 800554e:	f640 312a 	movw	r1, #2858	; 0xb2a
 8005552:	484e      	ldr	r0, [pc, #312]	; (800568c <HAL_I2C_Mem_Write_IT+0x168>)
 8005554:	f7fc fc19 	bl	8001d8a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b20      	cmp	r3, #32
 8005562:	f040 808e 	bne.w	8005682 <HAL_I2C_Mem_Write_IT+0x15e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005566:	4b4a      	ldr	r3, [pc, #296]	; (8005690 <HAL_I2C_Mem_Write_IT+0x16c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	08db      	lsrs	r3, r3, #3
 800556c:	4a49      	ldr	r2, [pc, #292]	; (8005694 <HAL_I2C_Mem_Write_IT+0x170>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	0a1a      	lsrs	r2, r3, #8
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	009a      	lsls	r2, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	3b01      	subs	r3, #1
 8005584:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d116      	bne.n	80055ba <HAL_I2C_Mem_Write_IT+0x96>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f043 0220 	orr.w	r2, r3, #32
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e064      	b.n	8005684 <HAL_I2C_Mem_Write_IT+0x160>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d0db      	beq.n	8005580 <HAL_I2C_Mem_Write_IT+0x5c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_I2C_Mem_Write_IT+0xb2>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e056      	b.n	8005684 <HAL_I2C_Mem_Write_IT+0x160>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d007      	beq.n	80055fc <HAL_I2C_Mem_Write_IT+0xd8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800560a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2221      	movs	r2, #33	; 0x21
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2240      	movs	r2, #64	; 0x40
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a3a      	ldr	r2, [r7, #32]
 8005626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800562c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a17      	ldr	r2, [pc, #92]	; (8005698 <HAL_I2C_Mem_Write_IT+0x174>)
 800563c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800563e:	897a      	ldrh	r2, [r7, #10]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8005644:	893a      	ldrh	r2, [r7, #8]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800564a:	88fa      	ldrh	r2, [r7, #6]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005664:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800567c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	e000      	b.n	8005684 <HAL_I2C_Mem_Write_IT+0x160>
  }
  else
  {
    return HAL_BUSY;
 8005682:	2302      	movs	r3, #2
  }
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	080149dc 	.word	0x080149dc
 8005690:	20000018 	.word	0x20000018
 8005694:	14f8b589 	.word	0x14f8b589
 8005698:	ffff0000 	.word	0xffff0000

0800569c <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	4608      	mov	r0, r1
 80056a6:	4611      	mov	r1, r2
 80056a8:	461a      	mov	r2, r3
 80056aa:	4603      	mov	r3, r0
 80056ac:	817b      	strh	r3, [r7, #10]
 80056ae:	460b      	mov	r3, r1
 80056b0:	813b      	strh	r3, [r7, #8]
 80056b2:	4613      	mov	r3, r2
 80056b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d007      	beq.n	80056d0 <HAL_I2C_Mem_Read_IT+0x34>
 80056c0:	88fb      	ldrh	r3, [r7, #6]
 80056c2:	2b10      	cmp	r3, #16
 80056c4:	d004      	beq.n	80056d0 <HAL_I2C_Mem_Read_IT+0x34>
 80056c6:	f640 3182 	movw	r1, #2946	; 0xb82
 80056ca:	4854      	ldr	r0, [pc, #336]	; (800581c <HAL_I2C_Mem_Read_IT+0x180>)
 80056cc:	f7fc fb5d 	bl	8001d8a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b20      	cmp	r3, #32
 80056da:	f040 809a 	bne.w	8005812 <HAL_I2C_Mem_Read_IT+0x176>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80056de:	4b50      	ldr	r3, [pc, #320]	; (8005820 <HAL_I2C_Mem_Read_IT+0x184>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	08db      	lsrs	r3, r3, #3
 80056e4:	4a4f      	ldr	r2, [pc, #316]	; (8005824 <HAL_I2C_Mem_Read_IT+0x188>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	0a1a      	lsrs	r2, r3, #8
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	009a      	lsls	r2, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d116      	bne.n	8005732 <HAL_I2C_Mem_Read_IT+0x96>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f043 0220 	orr.w	r2, r3, #32
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e070      	b.n	8005814 <HAL_I2C_Mem_Read_IT+0x178>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b02      	cmp	r3, #2
 800573e:	d0db      	beq.n	80056f8 <HAL_I2C_Mem_Read_IT+0x5c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_I2C_Mem_Read_IT+0xb2>
 800574a:	2302      	movs	r3, #2
 800574c:	e062      	b.n	8005814 <HAL_I2C_Mem_Read_IT+0x178>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b01      	cmp	r3, #1
 8005762:	d007      	beq.n	8005774 <HAL_I2C_Mem_Read_IT+0xd8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005782:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2222      	movs	r2, #34	; 0x22
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2240      	movs	r2, #64	; 0x40
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a3a      	ldr	r2, [r7, #32]
 800579e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4a1d      	ldr	r2, [pc, #116]	; (8005828 <HAL_I2C_Mem_Read_IT+0x18c>)
 80057b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80057b6:	897a      	ldrh	r2, [r7, #10]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80057bc:	893a      	ldrh	r2, [r7, #8]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80057c2:	88fa      	ldrh	r2, [r7, #6]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057dc:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ec:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <HAL_I2C_Mem_Read_IT+0x172>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800580c:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	e000      	b.n	8005814 <HAL_I2C_Mem_Read_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8005812:	2302      	movs	r3, #2
  }
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	080149dc 	.word	0x080149dc
 8005820:	20000018 	.word	0x20000018
 8005824:	14f8b589 	.word	0x14f8b589
 8005828:	ffff0000 	.word	0xffff0000

0800582c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800584c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005854:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	2b10      	cmp	r3, #16
 800585a:	d003      	beq.n	8005864 <HAL_I2C_EV_IRQHandler+0x38>
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	2b40      	cmp	r3, #64	; 0x40
 8005860:	f040 80c1 	bne.w	80059e6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10d      	bne.n	800589a <HAL_I2C_EV_IRQHandler+0x6e>
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005884:	d003      	beq.n	800588e <HAL_I2C_EV_IRQHandler+0x62>
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800588c:	d101      	bne.n	8005892 <HAL_I2C_EV_IRQHandler+0x66>
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <HAL_I2C_EV_IRQHandler+0x68>
 8005892:	2300      	movs	r3, #0
 8005894:	2b01      	cmp	r3, #1
 8005896:	f000 8132 	beq.w	8005afe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00c      	beq.n	80058be <HAL_I2C_EV_IRQHandler+0x92>
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	0a5b      	lsrs	r3, r3, #9
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d006      	beq.n	80058be <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f001 ff00 	bl	80076b6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fd83 	bl	80063c2 <I2C_Master_SB>
 80058bc:	e092      	b.n	80059e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	08db      	lsrs	r3, r3, #3
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <HAL_I2C_EV_IRQHandler+0xb2>
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	0a5b      	lsrs	r3, r3, #9
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fdf9 	bl	80064ce <I2C_Master_ADD10>
 80058dc:	e082      	b.n	80059e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	085b      	lsrs	r3, r3, #1
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <HAL_I2C_EV_IRQHandler+0xd2>
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	0a5b      	lsrs	r3, r3, #9
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fe13 	bl	8006522 <I2C_Master_ADDR>
 80058fc:	e072      	b.n	80059e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	089b      	lsrs	r3, r3, #2
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d03b      	beq.n	8005982 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005918:	f000 80f3 	beq.w	8005b02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	09db      	lsrs	r3, r3, #7
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00f      	beq.n	8005948 <HAL_I2C_EV_IRQHandler+0x11c>
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	0a9b      	lsrs	r3, r3, #10
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <HAL_I2C_EV_IRQHandler+0x11c>
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	089b      	lsrs	r3, r3, #2
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d103      	bne.n	8005948 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f9f3 	bl	8005d2c <I2C_MasterTransmit_TXE>
 8005946:	e04d      	b.n	80059e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	089b      	lsrs	r3, r3, #2
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 80d6 	beq.w	8005b02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	0a5b      	lsrs	r3, r3, #9
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 80cf 	beq.w	8005b02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005964:	7bbb      	ldrb	r3, [r7, #14]
 8005966:	2b21      	cmp	r3, #33	; 0x21
 8005968:	d103      	bne.n	8005972 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fa7a 	bl	8005e64 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005970:	e0c7      	b.n	8005b02 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	f040 80c4 	bne.w	8005b02 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fae8 	bl	8005f50 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005980:	e0bf      	b.n	8005b02 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800598c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005990:	f000 80b7 	beq.w	8005b02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	099b      	lsrs	r3, r3, #6
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00f      	beq.n	80059c0 <HAL_I2C_EV_IRQHandler+0x194>
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	0a9b      	lsrs	r3, r3, #10
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d009      	beq.n	80059c0 <HAL_I2C_EV_IRQHandler+0x194>
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	089b      	lsrs	r3, r3, #2
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fb5d 	bl	8006078 <I2C_MasterReceive_RXNE>
 80059be:	e011      	b.n	80059e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	089b      	lsrs	r3, r3, #2
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 809a 	beq.w	8005b02 <HAL_I2C_EV_IRQHandler+0x2d6>
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	0a5b      	lsrs	r3, r3, #9
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 8093 	beq.w	8005b02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fc06 	bl	80061ee <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059e2:	e08e      	b.n	8005b02 <HAL_I2C_EV_IRQHandler+0x2d6>
 80059e4:	e08d      	b.n	8005b02 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	61fb      	str	r3, [r7, #28]
 80059f6:	e007      	b.n	8005a08 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d012      	beq.n	8005a3a <HAL_I2C_EV_IRQHandler+0x20e>
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	0a5b      	lsrs	r3, r3, #9
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00c      	beq.n	8005a3a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005a30:	69b9      	ldr	r1, [r7, #24]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 ffc4 	bl	80069c0 <I2C_Slave_ADDR>
 8005a38:	e066      	b.n	8005b08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	091b      	lsrs	r3, r3, #4
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <HAL_I2C_EV_IRQHandler+0x22e>
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	0a5b      	lsrs	r3, r3, #9
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fffe 	bl	8006a54 <I2C_Slave_STOPF>
 8005a58:	e056      	b.n	8005b08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a5a:	7bbb      	ldrb	r3, [r7, #14]
 8005a5c:	2b21      	cmp	r3, #33	; 0x21
 8005a5e:	d002      	beq.n	8005a66 <HAL_I2C_EV_IRQHandler+0x23a>
 8005a60:	7bbb      	ldrb	r3, [r7, #14]
 8005a62:	2b29      	cmp	r3, #41	; 0x29
 8005a64:	d125      	bne.n	8005ab2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	09db      	lsrs	r3, r3, #7
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00f      	beq.n	8005a92 <HAL_I2C_EV_IRQHandler+0x266>
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	0a9b      	lsrs	r3, r3, #10
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <HAL_I2C_EV_IRQHandler+0x266>
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	089b      	lsrs	r3, r3, #2
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 feda 	bl	8006844 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a90:	e039      	b.n	8005b06 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	089b      	lsrs	r3, r3, #2
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d033      	beq.n	8005b06 <HAL_I2C_EV_IRQHandler+0x2da>
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	0a5b      	lsrs	r3, r3, #9
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d02d      	beq.n	8005b06 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 ff07 	bl	80068be <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ab0:	e029      	b.n	8005b06 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	099b      	lsrs	r3, r3, #6
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00f      	beq.n	8005ade <HAL_I2C_EV_IRQHandler+0x2b2>
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	0a9b      	lsrs	r3, r3, #10
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <HAL_I2C_EV_IRQHandler+0x2b2>
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	089b      	lsrs	r3, r3, #2
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 ff12 	bl	8006900 <I2C_SlaveReceive_RXNE>
 8005adc:	e014      	b.n	8005b08 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	089b      	lsrs	r3, r3, #2
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00e      	beq.n	8005b08 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	0a5b      	lsrs	r3, r3, #9
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d008      	beq.n	8005b08 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 ff40 	bl	800697c <I2C_SlaveReceive_BTF>
 8005afc:	e004      	b.n	8005b08 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005afe:	bf00      	nop
 8005b00:	e002      	b.n	8005b08 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b02:	bf00      	nop
 8005b04:	e000      	b.n	8005b08 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b06:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005b08:	3720      	adds	r7, #32
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b08a      	sub	sp, #40	; 0x28
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005b26:	2300      	movs	r3, #0
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b30:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	0a1b      	lsrs	r3, r3, #8
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00e      	beq.n	8005b5c <HAL_I2C_ER_IRQHandler+0x4e>
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	0a1b      	lsrs	r3, r3, #8
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d008      	beq.n	8005b5c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	f043 0301 	orr.w	r3, r3, #1
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b5a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	0a5b      	lsrs	r3, r3, #9
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00e      	beq.n	8005b86 <HAL_I2C_ER_IRQHandler+0x78>
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	0a1b      	lsrs	r3, r3, #8
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	f043 0302 	orr.w	r3, r3, #2
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005b84:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	0a9b      	lsrs	r3, r3, #10
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d03f      	beq.n	8005c12 <HAL_I2C_ER_IRQHandler+0x104>
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	0a1b      	lsrs	r3, r3, #8
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d039      	beq.n	8005c12 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005b9e:	7efb      	ldrb	r3, [r7, #27]
 8005ba0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005bb8:	7ebb      	ldrb	r3, [r7, #26]
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d112      	bne.n	8005be4 <HAL_I2C_ER_IRQHandler+0xd6>
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10f      	bne.n	8005be4 <HAL_I2C_ER_IRQHandler+0xd6>
 8005bc4:	7cfb      	ldrb	r3, [r7, #19]
 8005bc6:	2b21      	cmp	r3, #33	; 0x21
 8005bc8:	d008      	beq.n	8005bdc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005bca:	7cfb      	ldrb	r3, [r7, #19]
 8005bcc:	2b29      	cmp	r3, #41	; 0x29
 8005bce:	d005      	beq.n	8005bdc <HAL_I2C_ER_IRQHandler+0xce>
 8005bd0:	7cfb      	ldrb	r3, [r7, #19]
 8005bd2:	2b28      	cmp	r3, #40	; 0x28
 8005bd4:	d106      	bne.n	8005be4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b21      	cmp	r3, #33	; 0x21
 8005bda:	d103      	bne.n	8005be4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f001 f869 	bl	8006cb4 <I2C_Slave_AF>
 8005be2:	e016      	b.n	8005c12 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	f043 0304 	orr.w	r3, r3, #4
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005bf6:	7efb      	ldrb	r3, [r7, #27]
 8005bf8:	2b10      	cmp	r3, #16
 8005bfa:	d002      	beq.n	8005c02 <HAL_I2C_ER_IRQHandler+0xf4>
 8005bfc:	7efb      	ldrb	r3, [r7, #27]
 8005bfe:	2b40      	cmp	r3, #64	; 0x40
 8005c00:	d107      	bne.n	8005c12 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c10:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	0adb      	lsrs	r3, r3, #11
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00e      	beq.n	8005c3c <HAL_I2C_ER_IRQHandler+0x12e>
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	0a1b      	lsrs	r3, r3, #8
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d008      	beq.n	8005c3c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	f043 0308 	orr.w	r3, r3, #8
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005c3a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d008      	beq.n	8005c54 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f001 f8a0 	bl	8006d94 <I2C_ITError>
  }
}
 8005c54:	bf00      	nop
 8005c56:	3728      	adds	r7, #40	; 0x28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	70fb      	strb	r3, [r7, #3]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d150      	bne.n	8005df4 <I2C_MasterTransmit_TXE+0xc8>
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
 8005d54:	2b21      	cmp	r3, #33	; 0x21
 8005d56:	d14d      	bne.n	8005df4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d01d      	beq.n	8005d9a <I2C_MasterTransmit_TXE+0x6e>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	d01a      	beq.n	8005d9a <I2C_MasterTransmit_TXE+0x6e>
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d6a:	d016      	beq.n	8005d9a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d7a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2211      	movs	r2, #17
 8005d80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff ff62 	bl	8005c5c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d98:	e060      	b.n	8005e5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005da8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b40      	cmp	r3, #64	; 0x40
 8005dd2:	d107      	bne.n	8005de4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff ff7d 	bl	8005cdc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005de2:	e03b      	b.n	8005e5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff ff35 	bl	8005c5c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005df2:	e033      	b.n	8005e5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	2b21      	cmp	r3, #33	; 0x21
 8005df8:	d005      	beq.n	8005e06 <I2C_MasterTransmit_TXE+0xda>
 8005dfa:	7bbb      	ldrb	r3, [r7, #14]
 8005dfc:	2b40      	cmp	r3, #64	; 0x40
 8005dfe:	d12d      	bne.n	8005e5c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	2b22      	cmp	r3, #34	; 0x22
 8005e04:	d12a      	bne.n	8005e5c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d108      	bne.n	8005e22 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005e20:	e01c      	b.n	8005e5c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d103      	bne.n	8005e36 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f88e 	bl	8005f50 <I2C_MemoryTransmit_TXE_BTF>
}
 8005e34:	e012      	b.n	8005e5c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	781a      	ldrb	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e5a:	e7ff      	b.n	8005e5c <I2C_MasterTransmit_TXE+0x130>
 8005e5c:	bf00      	nop
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b21      	cmp	r3, #33	; 0x21
 8005e7c:	d164      	bne.n	8005f48 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d012      	beq.n	8005eae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	781a      	ldrb	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005eac:	e04c      	b.n	8005f48 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d01d      	beq.n	8005ef0 <I2C_MasterTransmit_BTF+0x8c>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	d01a      	beq.n	8005ef0 <I2C_MasterTransmit_BTF+0x8c>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ec0:	d016      	beq.n	8005ef0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ed0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2211      	movs	r2, #17
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff feb7 	bl	8005c5c <HAL_I2C_MasterTxCpltCallback>
}
 8005eee:	e02b      	b.n	8005f48 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005efe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f0e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b40      	cmp	r3, #64	; 0x40
 8005f28:	d107      	bne.n	8005f3a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff fed2 	bl	8005cdc <HAL_I2C_MemTxCpltCallback>
}
 8005f38:	e006      	b.n	8005f48 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff fe8a 	bl	8005c5c <HAL_I2C_MasterTxCpltCallback>
}
 8005f48:	bf00      	nop
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d11d      	bne.n	8005fa4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d10b      	bne.n	8005f88 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f80:	1c9a      	adds	r2, r3, #2
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005f86:	e073      	b.n	8006070 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	121b      	asrs	r3, r3, #8
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005fa2:	e065      	b.n	8006070 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d10b      	bne.n	8005fc4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005fc2:	e055      	b.n	8006070 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d151      	bne.n	8006070 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	2b22      	cmp	r3, #34	; 0x22
 8005fd0:	d10d      	bne.n	8005fee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fe0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005fec:	e040      	b.n	8006070 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d015      	beq.n	8006024 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	2b21      	cmp	r3, #33	; 0x21
 8005ffc:	d112      	bne.n	8006024 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	781a      	ldrb	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006018:	b29b      	uxth	r3, r3
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006022:	e025      	b.n	8006070 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d120      	bne.n	8006070 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	2b21      	cmp	r3, #33	; 0x21
 8006032:	d11d      	bne.n	8006070 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006042:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006052:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff fe36 	bl	8005cdc <HAL_I2C_MemTxCpltCallback>
}
 8006070:	bf00      	nop
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b22      	cmp	r3, #34	; 0x22
 800608a:	f040 80ac 	bne.w	80061e6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006092:	b29b      	uxth	r3, r3
 8006094:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b03      	cmp	r3, #3
 800609a:	d921      	bls.n	80060e0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691a      	ldr	r2, [r3, #16]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	f040 808c 	bne.w	80061e6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060dc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80060de:	e082      	b.n	80061e6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d075      	beq.n	80061d4 <I2C_MasterReceive_RXNE+0x15c>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d002      	beq.n	80060f4 <I2C_MasterReceive_RXNE+0x7c>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d16f      	bne.n	80061d4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 fa27 	bl	8007548 <I2C_WaitOnSTOPRequestThroughIT>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d142      	bne.n	8006186 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800610e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800611e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691a      	ldr	r2, [r3, #16]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	b2d2      	uxtb	r2, r2
 800612c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	d10a      	bne.n	8006170 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff fdc1 	bl	8005cf0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800616e:	e03a      	b.n	80061e6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2212      	movs	r2, #18
 800617c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff fd76 	bl	8005c70 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006184:	e02f      	b.n	80061e6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006194:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2220      	movs	r2, #32
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff fd99 	bl	8005d04 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80061d2:	e008      	b.n	80061e6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e2:	605a      	str	r2, [r3, #4]
}
 80061e4:	e7ff      	b.n	80061e6 <I2C_MasterReceive_RXNE+0x16e>
 80061e6:	bf00      	nop
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b04      	cmp	r3, #4
 8006204:	d11b      	bne.n	800623e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006214:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691a      	ldr	r2, [r3, #16]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006232:	b29b      	uxth	r3, r3
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800623c:	e0bd      	b.n	80063ba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b03      	cmp	r3, #3
 8006246:	d129      	bne.n	800629c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006256:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b04      	cmp	r3, #4
 800625c:	d00a      	beq.n	8006274 <I2C_MasterReceive_BTF+0x86>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d007      	beq.n	8006274 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006272:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691a      	ldr	r2, [r3, #16]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800629a:	e08e      	b.n	80063ba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d176      	bne.n	8006394 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d002      	beq.n	80062b2 <I2C_MasterReceive_BTF+0xc4>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b10      	cmp	r3, #16
 80062b0:	d108      	bne.n	80062c4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e019      	b.n	80062f8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d002      	beq.n	80062d0 <I2C_MasterReceive_BTF+0xe2>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d108      	bne.n	80062e2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	e00a      	b.n	80062f8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b10      	cmp	r3, #16
 80062e6:	d007      	beq.n	80062f8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691a      	ldr	r2, [r3, #16]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006352:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b40      	cmp	r3, #64	; 0x40
 8006366:	d10a      	bne.n	800637e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff fcba 	bl	8005cf0 <HAL_I2C_MemRxCpltCallback>
}
 800637c:	e01d      	b.n	80063ba <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2212      	movs	r2, #18
 800638a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff fc6f 	bl	8005c70 <HAL_I2C_MasterRxCpltCallback>
}
 8006392:	e012      	b.n	80063ba <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80063ba:	bf00      	nop
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b40      	cmp	r3, #64	; 0x40
 80063d4:	d117      	bne.n	8006406 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d109      	bne.n	80063f2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063ee:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80063f0:	e067      	b.n	80064c2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f043 0301 	orr.w	r3, r3, #1
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	611a      	str	r2, [r3, #16]
}
 8006404:	e05d      	b.n	80064c2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800640e:	d133      	bne.n	8006478 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b21      	cmp	r3, #33	; 0x21
 800641a:	d109      	bne.n	8006430 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006420:	b2db      	uxtb	r3, r3
 8006422:	461a      	mov	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800642c:	611a      	str	r2, [r3, #16]
 800642e:	e008      	b.n	8006442 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f043 0301 	orr.w	r3, r3, #1
 800643a:	b2da      	uxtb	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006446:	2b00      	cmp	r3, #0
 8006448:	d004      	beq.n	8006454 <I2C_Master_SB+0x92>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d108      	bne.n	8006466 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	2b00      	cmp	r3, #0
 800645a:	d032      	beq.n	80064c2 <I2C_Master_SB+0x100>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d02d      	beq.n	80064c2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006474:	605a      	str	r2, [r3, #4]
}
 8006476:	e024      	b.n	80064c2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10e      	bne.n	800649e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006484:	b29b      	uxth	r3, r3
 8006486:	11db      	asrs	r3, r3, #7
 8006488:	b2db      	uxtb	r3, r3
 800648a:	f003 0306 	and.w	r3, r3, #6
 800648e:	b2db      	uxtb	r3, r3
 8006490:	f063 030f 	orn	r3, r3, #15
 8006494:	b2da      	uxtb	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	611a      	str	r2, [r3, #16]
}
 800649c:	e011      	b.n	80064c2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d10d      	bne.n	80064c2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	11db      	asrs	r3, r3, #7
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	f003 0306 	and.w	r3, r3, #6
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	f063 030e 	orn	r3, r3, #14
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	611a      	str	r2, [r3, #16]
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b083      	sub	sp, #12
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d004      	beq.n	80064f4 <I2C_Master_ADD10+0x26>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d108      	bne.n	8006506 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00c      	beq.n	8006516 <I2C_Master_ADD10+0x48>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	2b00      	cmp	r3, #0
 8006504:	d007      	beq.n	8006516 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006514:	605a      	str	r2, [r3, #4]
  }
}
 8006516:	bf00      	nop
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006522:	b480      	push	{r7}
 8006524:	b091      	sub	sp, #68	; 0x44
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b22      	cmp	r3, #34	; 0x22
 800654a:	f040 8169 	bne.w	8006820 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10f      	bne.n	8006576 <I2C_Master_ADDR+0x54>
 8006556:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d10b      	bne.n	8006576 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800655e:	2300      	movs	r3, #0
 8006560:	633b      	str	r3, [r7, #48]	; 0x30
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	633b      	str	r3, [r7, #48]	; 0x30
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	633b      	str	r3, [r7, #48]	; 0x30
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	e160      	b.n	8006838 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657a:	2b00      	cmp	r3, #0
 800657c:	d11d      	bne.n	80065ba <I2C_Master_ADDR+0x98>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006586:	d118      	bne.n	80065ba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006588:	2300      	movs	r3, #0
 800658a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	651a      	str	r2, [r3, #80]	; 0x50
 80065b8:	e13e      	b.n	8006838 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065be:	b29b      	uxth	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d113      	bne.n	80065ec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065c4:	2300      	movs	r3, #0
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	e115      	b.n	8006818 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	f040 808a 	bne.w	800670c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065fe:	d137      	bne.n	8006670 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800660e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800661a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800661e:	d113      	bne.n	8006648 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800662e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006630:	2300      	movs	r3, #0
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	627b      	str	r3, [r7, #36]	; 0x24
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	e0e7      	b.n	8006818 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006648:	2300      	movs	r3, #0
 800664a:	623b      	str	r3, [r7, #32]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	623b      	str	r3, [r7, #32]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	623b      	str	r3, [r7, #32]
 800665c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e0d3      	b.n	8006818 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006672:	2b08      	cmp	r3, #8
 8006674:	d02e      	beq.n	80066d4 <I2C_Master_ADDR+0x1b2>
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	2b20      	cmp	r3, #32
 800667a:	d02b      	beq.n	80066d4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800667c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667e:	2b12      	cmp	r3, #18
 8006680:	d102      	bne.n	8006688 <I2C_Master_ADDR+0x166>
 8006682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006684:	2b01      	cmp	r3, #1
 8006686:	d125      	bne.n	80066d4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	2b04      	cmp	r3, #4
 800668c:	d00e      	beq.n	80066ac <I2C_Master_ADDR+0x18a>
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	2b02      	cmp	r3, #2
 8006692:	d00b      	beq.n	80066ac <I2C_Master_ADDR+0x18a>
 8006694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006696:	2b10      	cmp	r3, #16
 8006698:	d008      	beq.n	80066ac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	e007      	b.n	80066bc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066ba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066bc:	2300      	movs	r3, #0
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	61fb      	str	r3, [r7, #28]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	61fb      	str	r3, [r7, #28]
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	e0a1      	b.n	8006818 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066e2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066e4:	2300      	movs	r3, #0
 80066e6:	61bb      	str	r3, [r7, #24]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	61bb      	str	r3, [r7, #24]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	61bb      	str	r3, [r7, #24]
 80066f8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	e085      	b.n	8006818 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d14d      	bne.n	80067b2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	2b04      	cmp	r3, #4
 800671a:	d016      	beq.n	800674a <I2C_Master_ADDR+0x228>
 800671c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671e:	2b02      	cmp	r3, #2
 8006720:	d013      	beq.n	800674a <I2C_Master_ADDR+0x228>
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	2b10      	cmp	r3, #16
 8006726:	d010      	beq.n	800674a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006736:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	e007      	b.n	800675a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006758:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006768:	d117      	bne.n	800679a <I2C_Master_ADDR+0x278>
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006770:	d00b      	beq.n	800678a <I2C_Master_ADDR+0x268>
 8006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006774:	2b01      	cmp	r3, #1
 8006776:	d008      	beq.n	800678a <I2C_Master_ADDR+0x268>
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	2b08      	cmp	r3, #8
 800677c:	d005      	beq.n	800678a <I2C_Master_ADDR+0x268>
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	2b10      	cmp	r3, #16
 8006782:	d002      	beq.n	800678a <I2C_Master_ADDR+0x268>
 8006784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006786:	2b20      	cmp	r3, #32
 8006788:	d107      	bne.n	800679a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006798:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	e032      	b.n	8006818 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067c0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d0:	d117      	bne.n	8006802 <I2C_Master_ADDR+0x2e0>
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067d8:	d00b      	beq.n	80067f2 <I2C_Master_ADDR+0x2d0>
 80067da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d008      	beq.n	80067f2 <I2C_Master_ADDR+0x2d0>
 80067e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d005      	beq.n	80067f2 <I2C_Master_ADDR+0x2d0>
 80067e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e8:	2b10      	cmp	r3, #16
 80067ea:	d002      	beq.n	80067f2 <I2C_Master_ADDR+0x2d0>
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	d107      	bne.n	8006802 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006800:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006802:	2300      	movs	r3, #0
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800681e:	e00b      	b.n	8006838 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006820:	2300      	movs	r3, #0
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	68fb      	ldr	r3, [r7, #12]
}
 8006836:	e7ff      	b.n	8006838 <I2C_Master_ADDR+0x316>
 8006838:	bf00      	nop
 800683a:	3744      	adds	r7, #68	; 0x44
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006852:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d02b      	beq.n	80068b6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	781a      	ldrb	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006878:	b29b      	uxth	r3, r3
 800687a:	3b01      	subs	r3, #1
 800687c:	b29a      	uxth	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006886:	b29b      	uxth	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d114      	bne.n	80068b6 <I2C_SlaveTransmit_TXE+0x72>
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	2b29      	cmp	r3, #41	; 0x29
 8006890:	d111      	bne.n	80068b6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2221      	movs	r2, #33	; 0x21
 80068a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2228      	movs	r2, #40	; 0x28
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff f9e7 	bl	8005c84 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d011      	beq.n	80068f4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	781a      	ldrb	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d02c      	beq.n	8006974 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	691a      	ldr	r2, [r3, #16]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006936:	b29b      	uxth	r3, r3
 8006938:	3b01      	subs	r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d114      	bne.n	8006974 <I2C_SlaveReceive_RXNE+0x74>
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	2b2a      	cmp	r3, #42	; 0x2a
 800694e:	d111      	bne.n	8006974 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800695e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2222      	movs	r2, #34	; 0x22
 8006964:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2228      	movs	r2, #40	; 0x28
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff f992 	bl	8005c98 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006974:	bf00      	nop
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d012      	beq.n	80069b4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	b2d2      	uxtb	r2, r2
 800699a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80069da:	2b28      	cmp	r3, #40	; 0x28
 80069dc:	d127      	bne.n	8006a2e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ec:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	089b      	lsrs	r3, r3, #2
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80069fa:	2301      	movs	r3, #1
 80069fc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	09db      	lsrs	r3, r3, #7
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d103      	bne.n	8006a12 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	81bb      	strh	r3, [r7, #12]
 8006a10:	e002      	b.n	8006a18 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006a20:	89ba      	ldrh	r2, [r7, #12]
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff f940 	bl	8005cac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006a2c:	e00e      	b.n	8006a4c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	60bb      	str	r3, [r7, #8]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	60bb      	str	r3, [r7, #8]
 8006a42:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a62:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a72:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006a74:	2300      	movs	r3, #0
 8006a76:	60bb      	str	r3, [r7, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	60bb      	str	r3, [r7, #8]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0201 	orr.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ab0:	d172      	bne.n	8006b98 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	2b22      	cmp	r3, #34	; 0x22
 8006ab6:	d002      	beq.n	8006abe <I2C_Slave_STOPF+0x6a>
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	2b2a      	cmp	r3, #42	; 0x2a
 8006abc:	d135      	bne.n	8006b2a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d005      	beq.n	8006ae2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	f043 0204 	orr.w	r2, r3, #4
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006af0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fd fcda 	bl	80044b0 <HAL_DMA_GetState>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d049      	beq.n	8006b96 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	4a69      	ldr	r2, [pc, #420]	; (8006cac <I2C_Slave_STOPF+0x258>)
 8006b08:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fd fcac 	bl	800446c <HAL_DMA_Abort_IT>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d03d      	beq.n	8006b96 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b24:	4610      	mov	r0, r2
 8006b26:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b28:	e035      	b.n	8006b96 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d005      	beq.n	8006b4e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	f043 0204 	orr.w	r2, r3, #4
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fd fca4 	bl	80044b0 <HAL_DMA_GetState>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d014      	beq.n	8006b98 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b72:	4a4e      	ldr	r2, [pc, #312]	; (8006cac <I2C_Slave_STOPF+0x258>)
 8006b74:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fd fc76 	bl	800446c <HAL_DMA_Abort_IT>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d008      	beq.n	8006b98 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b90:	4610      	mov	r0, r2
 8006b92:	4798      	blx	r3
 8006b94:	e000      	b.n	8006b98 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b96:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d03e      	beq.n	8006c20 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d112      	bne.n	8006bd6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691a      	ldr	r2, [r3, #16]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be0:	2b40      	cmp	r3, #64	; 0x40
 8006be2:	d112      	bne.n	8006c0a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	691a      	ldr	r2, [r3, #16]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	f043 0204 	orr.w	r2, r3, #4
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f8b3 	bl	8006d94 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006c2e:	e039      	b.n	8006ca4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	2b2a      	cmp	r3, #42	; 0x2a
 8006c34:	d109      	bne.n	8006c4a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2228      	movs	r2, #40	; 0x28
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff f827 	bl	8005c98 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b28      	cmp	r3, #40	; 0x28
 8006c54:	d111      	bne.n	8006c7a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a15      	ldr	r2, [pc, #84]	; (8006cb0 <I2C_Slave_STOPF+0x25c>)
 8006c5a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff f828 	bl	8005cc8 <HAL_I2C_ListenCpltCallback>
}
 8006c78:	e014      	b.n	8006ca4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7e:	2b22      	cmp	r3, #34	; 0x22
 8006c80:	d002      	beq.n	8006c88 <I2C_Slave_STOPF+0x234>
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	2b22      	cmp	r3, #34	; 0x22
 8006c86:	d10d      	bne.n	8006ca4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fe fffa 	bl	8005c98 <HAL_I2C_SlaveRxCpltCallback>
}
 8006ca4:	bf00      	nop
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	080071c9 	.word	0x080071c9
 8006cb0:	ffff0000 	.word	0xffff0000

08006cb4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d002      	beq.n	8006cd6 <I2C_Slave_AF+0x22>
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d129      	bne.n	8006d2a <I2C_Slave_AF+0x76>
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	2b28      	cmp	r3, #40	; 0x28
 8006cda:	d126      	bne.n	8006d2a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a2c      	ldr	r2, [pc, #176]	; (8006d90 <I2C_Slave_AF+0xdc>)
 8006ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cf0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cfa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d0a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fe ffd0 	bl	8005cc8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006d28:	e02e      	b.n	8006d88 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	2b21      	cmp	r3, #33	; 0x21
 8006d2e:	d126      	bne.n	8006d7e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a17      	ldr	r2, [pc, #92]	; (8006d90 <I2C_Slave_AF+0xdc>)
 8006d34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2221      	movs	r2, #33	; 0x21
 8006d3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d5a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d64:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d74:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fe ff84 	bl	8005c84 <HAL_I2C_SlaveTxCpltCallback>
}
 8006d7c:	e004      	b.n	8006d88 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d86:	615a      	str	r2, [r3, #20]
}
 8006d88:	bf00      	nop
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	ffff0000 	.word	0xffff0000

08006d94 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006daa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	2b10      	cmp	r3, #16
 8006db0:	d002      	beq.n	8006db8 <I2C_ITError+0x24>
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	2b40      	cmp	r3, #64	; 0x40
 8006db6:	d10a      	bne.n	8006dce <I2C_ITError+0x3a>
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	2b22      	cmp	r3, #34	; 0x22
 8006dbc:	d107      	bne.n	8006dce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dcc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006dce:	7bfb      	ldrb	r3, [r7, #15]
 8006dd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006dd4:	2b28      	cmp	r3, #40	; 0x28
 8006dd6:	d107      	bne.n	8006de8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2228      	movs	r2, #40	; 0x28
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006de6:	e015      	b.n	8006e14 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006df6:	d00a      	beq.n	8006e0e <I2C_ITError+0x7a>
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
 8006dfa:	2b60      	cmp	r3, #96	; 0x60
 8006dfc:	d007      	beq.n	8006e0e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e22:	d162      	bne.n	8006eea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e32:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d020      	beq.n	8006e84 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e46:	4a6a      	ldr	r2, [pc, #424]	; (8006ff0 <I2C_ITError+0x25c>)
 8006e48:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fd fb0c 	bl	800446c <HAL_DMA_Abort_IT>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 8089 	beq.w	8006f6e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0201 	bic.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e7e:	4610      	mov	r0, r2
 8006e80:	4798      	blx	r3
 8006e82:	e074      	b.n	8006f6e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e88:	4a59      	ldr	r2, [pc, #356]	; (8006ff0 <I2C_ITError+0x25c>)
 8006e8a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fd faeb 	bl	800446c <HAL_DMA_Abort_IT>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d068      	beq.n	8006f6e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea6:	2b40      	cmp	r3, #64	; 0x40
 8006ea8:	d10b      	bne.n	8006ec2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	b2d2      	uxtb	r2, r2
 8006eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0201 	bic.w	r2, r2, #1
 8006ed0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4798      	blx	r3
 8006ee8:	e041      	b.n	8006f6e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b60      	cmp	r3, #96	; 0x60
 8006ef4:	d125      	bne.n	8006f42 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0e:	2b40      	cmp	r3, #64	; 0x40
 8006f10:	d10b      	bne.n	8006f2a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	691a      	ldr	r2, [r3, #16]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1c:	b2d2      	uxtb	r2, r2
 8006f1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0201 	bic.w	r2, r2, #1
 8006f38:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fe feec 	bl	8005d18 <HAL_I2C_AbortCpltCallback>
 8006f40:	e015      	b.n	8006f6e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4c:	2b40      	cmp	r3, #64	; 0x40
 8006f4e:	d10b      	bne.n	8006f68 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691a      	ldr	r2, [r3, #16]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7fe fecb 	bl	8005d04 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10e      	bne.n	8006f9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d109      	bne.n	8006f9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d007      	beq.n	8006fac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006faa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	2b04      	cmp	r3, #4
 8006fbe:	d113      	bne.n	8006fe8 <I2C_ITError+0x254>
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	2b28      	cmp	r3, #40	; 0x28
 8006fc4:	d110      	bne.n	8006fe8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a0a      	ldr	r2, [pc, #40]	; (8006ff4 <I2C_ITError+0x260>)
 8006fca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fe fe70 	bl	8005cc8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fe8:	bf00      	nop
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	080071c9 	.word	0x080071c9
 8006ff4:	ffff0000 	.word	0xffff0000

08006ff8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b088      	sub	sp, #32
 8006ffc:	af02      	add	r7, sp, #8
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	4608      	mov	r0, r1
 8007002:	4611      	mov	r1, r2
 8007004:	461a      	mov	r2, r3
 8007006:	4603      	mov	r3, r0
 8007008:	817b      	strh	r3, [r7, #10]
 800700a:	460b      	mov	r3, r1
 800700c:	813b      	strh	r3, [r7, #8]
 800700e:	4613      	mov	r3, r2
 8007010:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007020:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007030:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	2200      	movs	r2, #0
 800703a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 f96a 	bl	8007318 <I2C_WaitOnFlagUntilTimeout>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00d      	beq.n	8007066 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007058:	d103      	bne.n	8007062 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007060:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e0aa      	b.n	80071bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007066:	897b      	ldrh	r3, [r7, #10]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007074:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	6a3a      	ldr	r2, [r7, #32]
 800707a:	4952      	ldr	r1, [pc, #328]	; (80071c4 <I2C_RequestMemoryRead+0x1cc>)
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 f9a2 	bl	80073c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e097      	b.n	80071bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800708c:	2300      	movs	r3, #0
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	617b      	str	r3, [r7, #20]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	617b      	str	r3, [r7, #20]
 80070a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a4:	6a39      	ldr	r1, [r7, #32]
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 fa0c 	bl	80074c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00d      	beq.n	80070ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d107      	bne.n	80070ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e076      	b.n	80071bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070ce:	88fb      	ldrh	r3, [r7, #6]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d105      	bne.n	80070e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070d4:	893b      	ldrh	r3, [r7, #8]
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	611a      	str	r2, [r3, #16]
 80070de:	e021      	b.n	8007124 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80070e0:	893b      	ldrh	r3, [r7, #8]
 80070e2:	0a1b      	lsrs	r3, r3, #8
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f0:	6a39      	ldr	r1, [r7, #32]
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 f9e6 	bl	80074c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00d      	beq.n	800711a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	2b04      	cmp	r3, #4
 8007104:	d107      	bne.n	8007116 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007114:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e050      	b.n	80071bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800711a:	893b      	ldrh	r3, [r7, #8]
 800711c:	b2da      	uxtb	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007126:	6a39      	ldr	r1, [r7, #32]
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f9cb 	bl	80074c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00d      	beq.n	8007150 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007138:	2b04      	cmp	r3, #4
 800713a:	d107      	bne.n	800714c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800714a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e035      	b.n	80071bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800715e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	2200      	movs	r2, #0
 8007168:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f8d3 	bl	8007318 <I2C_WaitOnFlagUntilTimeout>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00d      	beq.n	8007194 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007186:	d103      	bne.n	8007190 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800718e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e013      	b.n	80071bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007194:	897b      	ldrh	r3, [r7, #10]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	f043 0301 	orr.w	r3, r3, #1
 800719c:	b2da      	uxtb	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	6a3a      	ldr	r2, [r7, #32]
 80071a8:	4906      	ldr	r1, [pc, #24]	; (80071c4 <I2C_RequestMemoryRead+0x1cc>)
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f90b 	bl	80073c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e000      	b.n	80071bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	00010002 	.word	0x00010002

080071c8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80071e2:	4b4b      	ldr	r3, [pc, #300]	; (8007310 <I2C_DMAAbort+0x148>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	08db      	lsrs	r3, r3, #3
 80071e8:	4a4a      	ldr	r2, [pc, #296]	; (8007314 <I2C_DMAAbort+0x14c>)
 80071ea:	fba2 2303 	umull	r2, r3, r2, r3
 80071ee:	0a1a      	lsrs	r2, r3, #8
 80071f0:	4613      	mov	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	00da      	lsls	r2, r3, #3
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d106      	bne.n	8007210 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	f043 0220 	orr.w	r2, r3, #32
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800720e:	e00a      	b.n	8007226 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3b01      	subs	r3, #1
 8007214:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007224:	d0ea      	beq.n	80071fc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007232:	2200      	movs	r2, #0
 8007234:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007242:	2200      	movs	r2, #0
 8007244:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007254:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2200      	movs	r2, #0
 800725a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007268:	2200      	movs	r2, #0
 800726a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	2200      	movs	r2, #0
 800727a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0201 	bic.w	r2, r2, #1
 800728a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b60      	cmp	r3, #96	; 0x60
 8007296:	d10e      	bne.n	80072b6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2220      	movs	r2, #32
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2200      	movs	r2, #0
 80072ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80072ae:	6978      	ldr	r0, [r7, #20]
 80072b0:	f7fe fd32 	bl	8005d18 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80072b4:	e027      	b.n	8007306 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80072b6:	7cfb      	ldrb	r3, [r7, #19]
 80072b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80072bc:	2b28      	cmp	r3, #40	; 0x28
 80072be:	d117      	bne.n	80072f0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0201 	orr.w	r2, r2, #1
 80072ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2200      	movs	r2, #0
 80072e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2228      	movs	r2, #40	; 0x28
 80072ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80072ee:	e007      	b.n	8007300 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007300:	6978      	ldr	r0, [r7, #20]
 8007302:	f7fe fcff 	bl	8005d04 <HAL_I2C_ErrorCallback>
}
 8007306:	bf00      	nop
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000018 	.word	0x20000018
 8007314:	14f8b589 	.word	0x14f8b589

08007318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	603b      	str	r3, [r7, #0]
 8007324:	4613      	mov	r3, r2
 8007326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007328:	e025      	b.n	8007376 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007330:	d021      	beq.n	8007376 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007332:	f7fc fead 	bl	8004090 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	429a      	cmp	r2, r3
 8007340:	d302      	bcc.n	8007348 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d116      	bne.n	8007376 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2220      	movs	r2, #32
 8007352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	f043 0220 	orr.w	r2, r3, #32
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e023      	b.n	80073be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	0c1b      	lsrs	r3, r3, #16
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b01      	cmp	r3, #1
 800737e:	d10d      	bne.n	800739c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	43da      	mvns	r2, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4013      	ands	r3, r2
 800738c:	b29b      	uxth	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	bf0c      	ite	eq
 8007392:	2301      	moveq	r3, #1
 8007394:	2300      	movne	r3, #0
 8007396:	b2db      	uxtb	r3, r3
 8007398:	461a      	mov	r2, r3
 800739a:	e00c      	b.n	80073b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	43da      	mvns	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4013      	ands	r3, r2
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	bf0c      	ite	eq
 80073ae:	2301      	moveq	r3, #1
 80073b0:	2300      	movne	r3, #0
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	461a      	mov	r2, r3
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d0b6      	beq.n	800732a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	607a      	str	r2, [r7, #4]
 80073d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073d4:	e051      	b.n	800747a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e4:	d123      	bne.n	800742e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2220      	movs	r2, #32
 800740a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	f043 0204 	orr.w	r2, r3, #4
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e046      	b.n	80074bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007434:	d021      	beq.n	800747a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007436:	f7fc fe2b 	bl	8004090 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	429a      	cmp	r2, r3
 8007444:	d302      	bcc.n	800744c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d116      	bne.n	800747a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2220      	movs	r2, #32
 8007456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	f043 0220 	orr.w	r2, r3, #32
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e020      	b.n	80074bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	0c1b      	lsrs	r3, r3, #16
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b01      	cmp	r3, #1
 8007482:	d10c      	bne.n	800749e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	43da      	mvns	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	4013      	ands	r3, r2
 8007490:	b29b      	uxth	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	bf14      	ite	ne
 8007496:	2301      	movne	r3, #1
 8007498:	2300      	moveq	r3, #0
 800749a:	b2db      	uxtb	r3, r3
 800749c:	e00b      	b.n	80074b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	43da      	mvns	r2, r3
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	4013      	ands	r3, r2
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	bf14      	ite	ne
 80074b0:	2301      	movne	r3, #1
 80074b2:	2300      	moveq	r3, #0
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d18d      	bne.n	80073d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074d0:	e02d      	b.n	800752e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f000 f8c0 	bl	8007658 <I2C_IsAcknowledgeFailed>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e02d      	b.n	800753e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e8:	d021      	beq.n	800752e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ea:	f7fc fdd1 	bl	8004090 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d302      	bcc.n	8007500 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d116      	bne.n	800752e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2220      	movs	r2, #32
 800750a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f043 0220 	orr.w	r2, r3, #32
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e007      	b.n	800753e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007538:	2b80      	cmp	r3, #128	; 0x80
 800753a:	d1ca      	bne.n	80074d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
	...

08007548 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007554:	4b13      	ldr	r3, [pc, #76]	; (80075a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	08db      	lsrs	r3, r3, #3
 800755a:	4a13      	ldr	r2, [pc, #76]	; (80075a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800755c:	fba2 2303 	umull	r2, r3, r2, r3
 8007560:	0a1a      	lsrs	r2, r3, #8
 8007562:	4613      	mov	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3b01      	subs	r3, #1
 800756e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d107      	bne.n	8007586 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	f043 0220 	orr.w	r2, r3, #32
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e008      	b.n	8007598 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007594:	d0e9      	beq.n	800756a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	20000018 	.word	0x20000018
 80075a8:	14f8b589 	.word	0x14f8b589

080075ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075b8:	e042      	b.n	8007640 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b10      	cmp	r3, #16
 80075c6:	d119      	bne.n	80075fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f06f 0210 	mvn.w	r2, #16
 80075d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e029      	b.n	8007650 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fc:	f7fc fd48 	bl	8004090 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	429a      	cmp	r2, r3
 800760a:	d302      	bcc.n	8007612 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d116      	bne.n	8007640 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2220      	movs	r2, #32
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762c:	f043 0220 	orr.w	r2, r3, #32
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e007      	b.n	8007650 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764a:	2b40      	cmp	r3, #64	; 0x40
 800764c:	d1b5      	bne.n	80075ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800766a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800766e:	d11b      	bne.n	80076a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007678:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007694:	f043 0204 	orr.w	r2, r3, #4
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e000      	b.n	80076aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80076c6:	d103      	bne.n	80076d0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80076ce:	e007      	b.n	80076e0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80076d8:	d102      	bne.n	80076e0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2208      	movs	r2, #8
 80076de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80076f0:	4b06      	ldr	r3, [pc, #24]	; (800770c <HAL_PWR_PVD_IRQHandler+0x20>)
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d005      	beq.n	8007708 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80076fc:	f000 f808 	bl	8007710 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8007700:	4b02      	ldr	r3, [pc, #8]	; (800770c <HAL_PWR_PVD_IRQHandler+0x20>)
 8007702:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007706:	615a      	str	r2, [r3, #20]
  }
}
 8007708:	bf00      	nop
 800770a:	bd80      	pop	{r7, pc}
 800770c:	40013c00 	.word	0x40013c00

08007710 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8007710:	b480      	push	{r7}
 8007712:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8007714:	bf00      	nop
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
	...

08007720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e314      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b0f      	cmp	r3, #15
 8007738:	d903      	bls.n	8007742 <HAL_RCC_OscConfig+0x22>
 800773a:	21e6      	movs	r1, #230	; 0xe6
 800773c:	4897      	ldr	r0, [pc, #604]	; (800799c <HAL_RCC_OscConfig+0x27c>)
 800773e:	f7fa fb24 	bl	8001d8a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 8088 	beq.w	8007860 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00d      	beq.n	8007774 <HAL_RCC_OscConfig+0x54>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007760:	d008      	beq.n	8007774 <HAL_RCC_OscConfig+0x54>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800776a:	d003      	beq.n	8007774 <HAL_RCC_OscConfig+0x54>
 800776c:	21eb      	movs	r1, #235	; 0xeb
 800776e:	488b      	ldr	r0, [pc, #556]	; (800799c <HAL_RCC_OscConfig+0x27c>)
 8007770:	f7fa fb0b 	bl	8001d8a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007774:	4b8a      	ldr	r3, [pc, #552]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f003 030c 	and.w	r3, r3, #12
 800777c:	2b04      	cmp	r3, #4
 800777e:	d00c      	beq.n	800779a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007780:	4b87      	ldr	r3, [pc, #540]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007788:	2b08      	cmp	r3, #8
 800778a:	d112      	bne.n	80077b2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800778c:	4b84      	ldr	r3, [pc, #528]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007798:	d10b      	bne.n	80077b2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800779a:	4b81      	ldr	r3, [pc, #516]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d05b      	beq.n	800785e <HAL_RCC_OscConfig+0x13e>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d157      	bne.n	800785e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e2d4      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ba:	d106      	bne.n	80077ca <HAL_RCC_OscConfig+0xaa>
 80077bc:	4b78      	ldr	r3, [pc, #480]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a77      	ldr	r2, [pc, #476]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 80077c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c6:	6013      	str	r3, [r2, #0]
 80077c8:	e01d      	b.n	8007806 <HAL_RCC_OscConfig+0xe6>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077d2:	d10c      	bne.n	80077ee <HAL_RCC_OscConfig+0xce>
 80077d4:	4b72      	ldr	r3, [pc, #456]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a71      	ldr	r2, [pc, #452]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 80077da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	4b6f      	ldr	r3, [pc, #444]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a6e      	ldr	r2, [pc, #440]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 80077e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	e00b      	b.n	8007806 <HAL_RCC_OscConfig+0xe6>
 80077ee:	4b6c      	ldr	r3, [pc, #432]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a6b      	ldr	r2, [pc, #428]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 80077f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	4b69      	ldr	r3, [pc, #420]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a68      	ldr	r2, [pc, #416]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 8007800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007804:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d013      	beq.n	8007836 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800780e:	f7fc fc3f 	bl	8004090 <HAL_GetTick>
 8007812:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007814:	e008      	b.n	8007828 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007816:	f7fc fc3b 	bl	8004090 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b64      	cmp	r3, #100	; 0x64
 8007822:	d901      	bls.n	8007828 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e299      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007828:	4b5d      	ldr	r3, [pc, #372]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d0f0      	beq.n	8007816 <HAL_RCC_OscConfig+0xf6>
 8007834:	e014      	b.n	8007860 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007836:	f7fc fc2b 	bl	8004090 <HAL_GetTick>
 800783a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800783c:	e008      	b.n	8007850 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800783e:	f7fc fc27 	bl	8004090 <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	2b64      	cmp	r3, #100	; 0x64
 800784a:	d901      	bls.n	8007850 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e285      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007850:	4b53      	ldr	r3, [pc, #332]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1f0      	bne.n	800783e <HAL_RCC_OscConfig+0x11e>
 800785c:	e000      	b.n	8007860 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800785e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d079      	beq.n	8007960 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d008      	beq.n	8007886 <HAL_RCC_OscConfig+0x166>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d004      	beq.n	8007886 <HAL_RCC_OscConfig+0x166>
 800787c:	f240 111d 	movw	r1, #285	; 0x11d
 8007880:	4846      	ldr	r0, [pc, #280]	; (800799c <HAL_RCC_OscConfig+0x27c>)
 8007882:	f7fa fa82 	bl	8001d8a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	2b1f      	cmp	r3, #31
 800788c:	d904      	bls.n	8007898 <HAL_RCC_OscConfig+0x178>
 800788e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8007892:	4842      	ldr	r0, [pc, #264]	; (800799c <HAL_RCC_OscConfig+0x27c>)
 8007894:	f7fa fa79 	bl	8001d8a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007898:	4b41      	ldr	r3, [pc, #260]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f003 030c 	and.w	r3, r3, #12
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00b      	beq.n	80078bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078a4:	4b3e      	ldr	r3, [pc, #248]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d11c      	bne.n	80078ea <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078b0:	4b3b      	ldr	r3, [pc, #236]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d116      	bne.n	80078ea <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078bc:	4b38      	ldr	r3, [pc, #224]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d005      	beq.n	80078d4 <HAL_RCC_OscConfig+0x1b4>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d001      	beq.n	80078d4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e243      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078d4:	4b32      	ldr	r3, [pc, #200]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	00db      	lsls	r3, r3, #3
 80078e2:	492f      	ldr	r1, [pc, #188]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078e8:	e03a      	b.n	8007960 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d020      	beq.n	8007934 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078f2:	4b2c      	ldr	r3, [pc, #176]	; (80079a4 <HAL_RCC_OscConfig+0x284>)
 80078f4:	2201      	movs	r2, #1
 80078f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f8:	f7fc fbca 	bl	8004090 <HAL_GetTick>
 80078fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078fe:	e008      	b.n	8007912 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007900:	f7fc fbc6 	bl	8004090 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e224      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007912:	4b23      	ldr	r3, [pc, #140]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0f0      	beq.n	8007900 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800791e:	4b20      	ldr	r3, [pc, #128]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	491c      	ldr	r1, [pc, #112]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 800792e:	4313      	orrs	r3, r2
 8007930:	600b      	str	r3, [r1, #0]
 8007932:	e015      	b.n	8007960 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007934:	4b1b      	ldr	r3, [pc, #108]	; (80079a4 <HAL_RCC_OscConfig+0x284>)
 8007936:	2200      	movs	r2, #0
 8007938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793a:	f7fc fba9 	bl	8004090 <HAL_GetTick>
 800793e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007940:	e008      	b.n	8007954 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007942:	f7fc fba5 	bl	8004090 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d901      	bls.n	8007954 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e203      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007954:	4b12      	ldr	r3, [pc, #72]	; (80079a0 <HAL_RCC_OscConfig+0x280>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1f0      	bne.n	8007942 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0308 	and.w	r3, r3, #8
 8007968:	2b00      	cmp	r3, #0
 800796a:	d045      	beq.n	80079f8 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d008      	beq.n	8007986 <HAL_RCC_OscConfig+0x266>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d004      	beq.n	8007986 <HAL_RCC_OscConfig+0x266>
 800797c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007980:	4806      	ldr	r0, [pc, #24]	; (800799c <HAL_RCC_OscConfig+0x27c>)
 8007982:	f7fa fa02 	bl	8001d8a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d01e      	beq.n	80079cc <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800798e:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 8007990:	2201      	movs	r2, #1
 8007992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007994:	f7fc fb7c 	bl	8004090 <HAL_GetTick>
 8007998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800799a:	e010      	b.n	80079be <HAL_RCC_OscConfig+0x29e>
 800799c:	08014a50 	.word	0x08014a50
 80079a0:	40023800 	.word	0x40023800
 80079a4:	42470000 	.word	0x42470000
 80079a8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079ac:	f7fc fb70 	bl	8004090 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e1ce      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079be:	4b5e      	ldr	r3, [pc, #376]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 80079c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0f0      	beq.n	80079ac <HAL_RCC_OscConfig+0x28c>
 80079ca:	e015      	b.n	80079f8 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079cc:	4b5b      	ldr	r3, [pc, #364]	; (8007b3c <HAL_RCC_OscConfig+0x41c>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079d2:	f7fc fb5d 	bl	8004090 <HAL_GetTick>
 80079d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079d8:	e008      	b.n	80079ec <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079da:	f7fc fb59 	bl	8004090 <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d901      	bls.n	80079ec <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e1b7      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079ec:	4b52      	ldr	r3, [pc, #328]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 80079ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1f0      	bne.n	80079da <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 80b0 	beq.w	8007b66 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a06:	2300      	movs	r3, #0
 8007a08:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00c      	beq.n	8007a2c <HAL_RCC_OscConfig+0x30c>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d008      	beq.n	8007a2c <HAL_RCC_OscConfig+0x30c>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	d004      	beq.n	8007a2c <HAL_RCC_OscConfig+0x30c>
 8007a22:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8007a26:	4846      	ldr	r0, [pc, #280]	; (8007b40 <HAL_RCC_OscConfig+0x420>)
 8007a28:	f7fa f9af 	bl	8001d8a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a2c:	4b42      	ldr	r3, [pc, #264]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 8007a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10f      	bne.n	8007a58 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60bb      	str	r3, [r7, #8]
 8007a3c:	4b3e      	ldr	r3, [pc, #248]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a40:	4a3d      	ldr	r2, [pc, #244]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 8007a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a46:	6413      	str	r3, [r2, #64]	; 0x40
 8007a48:	4b3b      	ldr	r3, [pc, #236]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a50:	60bb      	str	r3, [r7, #8]
 8007a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a54:	2301      	movs	r3, #1
 8007a56:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a58:	4b3a      	ldr	r3, [pc, #232]	; (8007b44 <HAL_RCC_OscConfig+0x424>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d118      	bne.n	8007a96 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a64:	4b37      	ldr	r3, [pc, #220]	; (8007b44 <HAL_RCC_OscConfig+0x424>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a36      	ldr	r2, [pc, #216]	; (8007b44 <HAL_RCC_OscConfig+0x424>)
 8007a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a70:	f7fc fb0e 	bl	8004090 <HAL_GetTick>
 8007a74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a76:	e008      	b.n	8007a8a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a78:	f7fc fb0a 	bl	8004090 <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d901      	bls.n	8007a8a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e168      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a8a:	4b2e      	ldr	r3, [pc, #184]	; (8007b44 <HAL_RCC_OscConfig+0x424>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0f0      	beq.n	8007a78 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d106      	bne.n	8007aac <HAL_RCC_OscConfig+0x38c>
 8007a9e:	4b26      	ldr	r3, [pc, #152]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 8007aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa2:	4a25      	ldr	r2, [pc, #148]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 8007aa4:	f043 0301 	orr.w	r3, r3, #1
 8007aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8007aaa:	e01c      	b.n	8007ae6 <HAL_RCC_OscConfig+0x3c6>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	2b05      	cmp	r3, #5
 8007ab2:	d10c      	bne.n	8007ace <HAL_RCC_OscConfig+0x3ae>
 8007ab4:	4b20      	ldr	r3, [pc, #128]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 8007ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab8:	4a1f      	ldr	r2, [pc, #124]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 8007aba:	f043 0304 	orr.w	r3, r3, #4
 8007abe:	6713      	str	r3, [r2, #112]	; 0x70
 8007ac0:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 8007ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac4:	4a1c      	ldr	r2, [pc, #112]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 8007ac6:	f043 0301 	orr.w	r3, r3, #1
 8007aca:	6713      	str	r3, [r2, #112]	; 0x70
 8007acc:	e00b      	b.n	8007ae6 <HAL_RCC_OscConfig+0x3c6>
 8007ace:	4b1a      	ldr	r3, [pc, #104]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 8007ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad2:	4a19      	ldr	r2, [pc, #100]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 8007ad4:	f023 0301 	bic.w	r3, r3, #1
 8007ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8007ada:	4b17      	ldr	r3, [pc, #92]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 8007adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ade:	4a16      	ldr	r2, [pc, #88]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 8007ae0:	f023 0304 	bic.w	r3, r3, #4
 8007ae4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d015      	beq.n	8007b1a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aee:	f7fc facf 	bl	8004090 <HAL_GetTick>
 8007af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007af4:	e00a      	b.n	8007b0c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007af6:	f7fc facb 	bl	8004090 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e127      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b0c:	4b0a      	ldr	r3, [pc, #40]	; (8007b38 <HAL_RCC_OscConfig+0x418>)
 8007b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0ee      	beq.n	8007af6 <HAL_RCC_OscConfig+0x3d6>
 8007b18:	e01c      	b.n	8007b54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b1a:	f7fc fab9 	bl	8004090 <HAL_GetTick>
 8007b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b20:	e012      	b.n	8007b48 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b22:	f7fc fab5 	bl	8004090 <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d909      	bls.n	8007b48 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e111      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
 8007b38:	40023800 	.word	0x40023800
 8007b3c:	42470e80 	.word	0x42470e80
 8007b40:	08014a50 	.word	0x08014a50
 8007b44:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b48:	4b86      	ldr	r3, [pc, #536]	; (8007d64 <HAL_RCC_OscConfig+0x644>)
 8007b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e6      	bne.n	8007b22 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d105      	bne.n	8007b66 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b5a:	4b82      	ldr	r3, [pc, #520]	; (8007d64 <HAL_RCC_OscConfig+0x644>)
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	4a81      	ldr	r2, [pc, #516]	; (8007d64 <HAL_RCC_OscConfig+0x644>)
 8007b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00c      	beq.n	8007b88 <HAL_RCC_OscConfig+0x468>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d008      	beq.n	8007b88 <HAL_RCC_OscConfig+0x468>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d004      	beq.n	8007b88 <HAL_RCC_OscConfig+0x468>
 8007b7e:	f240 11cd 	movw	r1, #461	; 0x1cd
 8007b82:	4879      	ldr	r0, [pc, #484]	; (8007d68 <HAL_RCC_OscConfig+0x648>)
 8007b84:	f7fa f901 	bl	8001d8a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 80e4 	beq.w	8007d5a <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b92:	4b74      	ldr	r3, [pc, #464]	; (8007d64 <HAL_RCC_OscConfig+0x644>)
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f003 030c 	and.w	r3, r3, #12
 8007b9a:	2b08      	cmp	r3, #8
 8007b9c:	f000 80a5 	beq.w	8007cea <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	f040 8089 	bne.w	8007cbc <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d009      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x4a6>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bba:	d004      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x4a6>
 8007bbc:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8007bc0:	4869      	ldr	r0, [pc, #420]	; (8007d68 <HAL_RCC_OscConfig+0x648>)
 8007bc2:	f7fa f8e2 	bl	8001d8a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	2b3f      	cmp	r3, #63	; 0x3f
 8007bcc:	d904      	bls.n	8007bd8 <HAL_RCC_OscConfig+0x4b8>
 8007bce:	f240 11d7 	movw	r1, #471	; 0x1d7
 8007bd2:	4865      	ldr	r0, [pc, #404]	; (8007d68 <HAL_RCC_OscConfig+0x648>)
 8007bd4:	f7fa f8d9 	bl	8001d8a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	2b31      	cmp	r3, #49	; 0x31
 8007bde:	d904      	bls.n	8007bea <HAL_RCC_OscConfig+0x4ca>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007be8:	d904      	bls.n	8007bf4 <HAL_RCC_OscConfig+0x4d4>
 8007bea:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8007bee:	485e      	ldr	r0, [pc, #376]	; (8007d68 <HAL_RCC_OscConfig+0x648>)
 8007bf0:	f7fa f8cb 	bl	8001d8a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d010      	beq.n	8007c1e <HAL_RCC_OscConfig+0x4fe>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c00:	2b04      	cmp	r3, #4
 8007c02:	d00c      	beq.n	8007c1e <HAL_RCC_OscConfig+0x4fe>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	2b06      	cmp	r3, #6
 8007c0a:	d008      	beq.n	8007c1e <HAL_RCC_OscConfig+0x4fe>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	d004      	beq.n	8007c1e <HAL_RCC_OscConfig+0x4fe>
 8007c14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007c18:	4853      	ldr	r0, [pc, #332]	; (8007d68 <HAL_RCC_OscConfig+0x648>)
 8007c1a:	f7fa f8b6 	bl	8001d8a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d903      	bls.n	8007c2e <HAL_RCC_OscConfig+0x50e>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	2b0f      	cmp	r3, #15
 8007c2c:	d904      	bls.n	8007c38 <HAL_RCC_OscConfig+0x518>
 8007c2e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8007c32:	484d      	ldr	r0, [pc, #308]	; (8007d68 <HAL_RCC_OscConfig+0x648>)
 8007c34:	f7fa f8a9 	bl	8001d8a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c38:	4b4c      	ldr	r3, [pc, #304]	; (8007d6c <HAL_RCC_OscConfig+0x64c>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c3e:	f7fc fa27 	bl	8004090 <HAL_GetTick>
 8007c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c44:	e008      	b.n	8007c58 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c46:	f7fc fa23 	bl	8004090 <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d901      	bls.n	8007c58 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e081      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c58:	4b42      	ldr	r3, [pc, #264]	; (8007d64 <HAL_RCC_OscConfig+0x644>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1f0      	bne.n	8007c46 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	69da      	ldr	r2, [r3, #28]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	019b      	lsls	r3, r3, #6
 8007c74:	431a      	orrs	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7a:	085b      	lsrs	r3, r3, #1
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	041b      	lsls	r3, r3, #16
 8007c80:	431a      	orrs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c86:	061b      	lsls	r3, r3, #24
 8007c88:	4936      	ldr	r1, [pc, #216]	; (8007d64 <HAL_RCC_OscConfig+0x644>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c8e:	4b37      	ldr	r3, [pc, #220]	; (8007d6c <HAL_RCC_OscConfig+0x64c>)
 8007c90:	2201      	movs	r2, #1
 8007c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c94:	f7fc f9fc 	bl	8004090 <HAL_GetTick>
 8007c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c9a:	e008      	b.n	8007cae <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c9c:	f7fc f9f8 	bl	8004090 <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e056      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cae:	4b2d      	ldr	r3, [pc, #180]	; (8007d64 <HAL_RCC_OscConfig+0x644>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0f0      	beq.n	8007c9c <HAL_RCC_OscConfig+0x57c>
 8007cba:	e04e      	b.n	8007d5a <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cbc:	4b2b      	ldr	r3, [pc, #172]	; (8007d6c <HAL_RCC_OscConfig+0x64c>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cc2:	f7fc f9e5 	bl	8004090 <HAL_GetTick>
 8007cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cc8:	e008      	b.n	8007cdc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cca:	f7fc f9e1 	bl	8004090 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d901      	bls.n	8007cdc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e03f      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cdc:	4b21      	ldr	r3, [pc, #132]	; (8007d64 <HAL_RCC_OscConfig+0x644>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1f0      	bne.n	8007cca <HAL_RCC_OscConfig+0x5aa>
 8007ce8:	e037      	b.n	8007d5a <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d101      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e032      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007cf6:	4b1b      	ldr	r3, [pc, #108]	; (8007d64 <HAL_RCC_OscConfig+0x644>)
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d028      	beq.n	8007d56 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d121      	bne.n	8007d56 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d11a      	bne.n	8007d56 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d26:	4013      	ands	r3, r2
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d111      	bne.n	8007d56 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3c:	085b      	lsrs	r3, r3, #1
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d107      	bne.n	8007d56 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d001      	beq.n	8007d5a <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e000      	b.n	8007d5c <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	40023800 	.word	0x40023800
 8007d68:	08014a50 	.word	0x08014a50
 8007d6c:	42470060 	.word	0x42470060

08007d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e174      	b.n	800806e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <HAL_RCC_ClockConfig+0x24>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b0f      	cmp	r3, #15
 8007d92:	d904      	bls.n	8007d9e <HAL_RCC_ClockConfig+0x2e>
 8007d94:	f240 215a 	movw	r1, #602	; 0x25a
 8007d98:	487b      	ldr	r0, [pc, #492]	; (8007f88 <HAL_RCC_ClockConfig+0x218>)
 8007d9a:	f7f9 fff6 	bl	8001d8a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d019      	beq.n	8007dd8 <HAL_RCC_ClockConfig+0x68>
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d016      	beq.n	8007dd8 <HAL_RCC_ClockConfig+0x68>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d013      	beq.n	8007dd8 <HAL_RCC_ClockConfig+0x68>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d010      	beq.n	8007dd8 <HAL_RCC_ClockConfig+0x68>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d00d      	beq.n	8007dd8 <HAL_RCC_ClockConfig+0x68>
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2b05      	cmp	r3, #5
 8007dc0:	d00a      	beq.n	8007dd8 <HAL_RCC_ClockConfig+0x68>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b06      	cmp	r3, #6
 8007dc6:	d007      	beq.n	8007dd8 <HAL_RCC_ClockConfig+0x68>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2b07      	cmp	r3, #7
 8007dcc:	d004      	beq.n	8007dd8 <HAL_RCC_ClockConfig+0x68>
 8007dce:	f240 215b 	movw	r1, #603	; 0x25b
 8007dd2:	486d      	ldr	r0, [pc, #436]	; (8007f88 <HAL_RCC_ClockConfig+0x218>)
 8007dd4:	f7f9 ffd9 	bl	8001d8a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007dd8:	4b6c      	ldr	r3, [pc, #432]	; (8007f8c <HAL_RCC_ClockConfig+0x21c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0307 	and.w	r3, r3, #7
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d90c      	bls.n	8007e00 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007de6:	4b69      	ldr	r3, [pc, #420]	; (8007f8c <HAL_RCC_ClockConfig+0x21c>)
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	b2d2      	uxtb	r2, r2
 8007dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dee:	4b67      	ldr	r3, [pc, #412]	; (8007f8c <HAL_RCC_ClockConfig+0x21c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d001      	beq.n	8007e00 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e136      	b.n	800806e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d049      	beq.n	8007ea0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d005      	beq.n	8007e24 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e18:	4b5d      	ldr	r3, [pc, #372]	; (8007f90 <HAL_RCC_ClockConfig+0x220>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	4a5c      	ldr	r2, [pc, #368]	; (8007f90 <HAL_RCC_ClockConfig+0x220>)
 8007e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0308 	and.w	r3, r3, #8
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d005      	beq.n	8007e3c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e30:	4b57      	ldr	r3, [pc, #348]	; (8007f90 <HAL_RCC_ClockConfig+0x220>)
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	4a56      	ldr	r2, [pc, #344]	; (8007f90 <HAL_RCC_ClockConfig+0x220>)
 8007e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d024      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x11e>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	2b80      	cmp	r3, #128	; 0x80
 8007e4a:	d020      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x11e>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	2b90      	cmp	r3, #144	; 0x90
 8007e52:	d01c      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x11e>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	2ba0      	cmp	r3, #160	; 0xa0
 8007e5a:	d018      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x11e>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	2bb0      	cmp	r3, #176	; 0xb0
 8007e62:	d014      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x11e>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	2bc0      	cmp	r3, #192	; 0xc0
 8007e6a:	d010      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x11e>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	2bd0      	cmp	r3, #208	; 0xd0
 8007e72:	d00c      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x11e>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	2be0      	cmp	r3, #224	; 0xe0
 8007e7a:	d008      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x11e>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	2bf0      	cmp	r3, #240	; 0xf0
 8007e82:	d004      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x11e>
 8007e84:	f240 217e 	movw	r1, #638	; 0x27e
 8007e88:	483f      	ldr	r0, [pc, #252]	; (8007f88 <HAL_RCC_ClockConfig+0x218>)
 8007e8a:	f7f9 ff7e 	bl	8001d8a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e8e:	4b40      	ldr	r3, [pc, #256]	; (8007f90 <HAL_RCC_ClockConfig+0x220>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	493d      	ldr	r1, [pc, #244]	; (8007f90 <HAL_RCC_ClockConfig+0x220>)
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d059      	beq.n	8007f60 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d010      	beq.n	8007ed6 <HAL_RCC_ClockConfig+0x166>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d00c      	beq.n	8007ed6 <HAL_RCC_ClockConfig+0x166>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d008      	beq.n	8007ed6 <HAL_RCC_ClockConfig+0x166>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	2b03      	cmp	r3, #3
 8007eca:	d004      	beq.n	8007ed6 <HAL_RCC_ClockConfig+0x166>
 8007ecc:	f240 2185 	movw	r1, #645	; 0x285
 8007ed0:	482d      	ldr	r0, [pc, #180]	; (8007f88 <HAL_RCC_ClockConfig+0x218>)
 8007ed2:	f7f9 ff5a 	bl	8001d8a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d107      	bne.n	8007eee <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ede:	4b2c      	ldr	r3, [pc, #176]	; (8007f90 <HAL_RCC_ClockConfig+0x220>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d119      	bne.n	8007f1e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e0bf      	b.n	800806e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d003      	beq.n	8007efe <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d107      	bne.n	8007f0e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007efe:	4b24      	ldr	r3, [pc, #144]	; (8007f90 <HAL_RCC_ClockConfig+0x220>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d109      	bne.n	8007f1e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e0af      	b.n	800806e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f0e:	4b20      	ldr	r3, [pc, #128]	; (8007f90 <HAL_RCC_ClockConfig+0x220>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e0a7      	b.n	800806e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f1e:	4b1c      	ldr	r3, [pc, #112]	; (8007f90 <HAL_RCC_ClockConfig+0x220>)
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f023 0203 	bic.w	r2, r3, #3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	4919      	ldr	r1, [pc, #100]	; (8007f90 <HAL_RCC_ClockConfig+0x220>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f30:	f7fc f8ae 	bl	8004090 <HAL_GetTick>
 8007f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f36:	e00a      	b.n	8007f4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f38:	f7fc f8aa 	bl	8004090 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d901      	bls.n	8007f4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e08f      	b.n	800806e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f4e:	4b10      	ldr	r3, [pc, #64]	; (8007f90 <HAL_RCC_ClockConfig+0x220>)
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 020c 	and.w	r2, r3, #12
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d1eb      	bne.n	8007f38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f60:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <HAL_RCC_ClockConfig+0x21c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d212      	bcs.n	8007f94 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f6e:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <HAL_RCC_ClockConfig+0x21c>)
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	b2d2      	uxtb	r2, r2
 8007f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f76:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <HAL_RCC_ClockConfig+0x21c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d007      	beq.n	8007f94 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e072      	b.n	800806e <HAL_RCC_ClockConfig+0x2fe>
 8007f88:	08014a50 	.word	0x08014a50
 8007f8c:	40023c00 	.word	0x40023c00
 8007f90:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d025      	beq.n	8007fec <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d018      	beq.n	8007fda <HAL_RCC_ClockConfig+0x26a>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb0:	d013      	beq.n	8007fda <HAL_RCC_ClockConfig+0x26a>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007fba:	d00e      	beq.n	8007fda <HAL_RCC_ClockConfig+0x26a>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007fc4:	d009      	beq.n	8007fda <HAL_RCC_ClockConfig+0x26a>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007fce:	d004      	beq.n	8007fda <HAL_RCC_ClockConfig+0x26a>
 8007fd0:	f240 21c3 	movw	r1, #707	; 0x2c3
 8007fd4:	4828      	ldr	r0, [pc, #160]	; (8008078 <HAL_RCC_ClockConfig+0x308>)
 8007fd6:	f7f9 fed8 	bl	8001d8a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fda:	4b28      	ldr	r3, [pc, #160]	; (800807c <HAL_RCC_ClockConfig+0x30c>)
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	4925      	ldr	r1, [pc, #148]	; (800807c <HAL_RCC_ClockConfig+0x30c>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0308 	and.w	r3, r3, #8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d026      	beq.n	8008046 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d018      	beq.n	8008032 <HAL_RCC_ClockConfig+0x2c2>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008008:	d013      	beq.n	8008032 <HAL_RCC_ClockConfig+0x2c2>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008012:	d00e      	beq.n	8008032 <HAL_RCC_ClockConfig+0x2c2>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800801c:	d009      	beq.n	8008032 <HAL_RCC_ClockConfig+0x2c2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008026:	d004      	beq.n	8008032 <HAL_RCC_ClockConfig+0x2c2>
 8008028:	f240 21ca 	movw	r1, #714	; 0x2ca
 800802c:	4812      	ldr	r0, [pc, #72]	; (8008078 <HAL_RCC_ClockConfig+0x308>)
 800802e:	f7f9 feac 	bl	8001d8a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008032:	4b12      	ldr	r3, [pc, #72]	; (800807c <HAL_RCC_ClockConfig+0x30c>)
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	490e      	ldr	r1, [pc, #56]	; (800807c <HAL_RCC_ClockConfig+0x30c>)
 8008042:	4313      	orrs	r3, r2
 8008044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008046:	f000 f821 	bl	800808c <HAL_RCC_GetSysClockFreq>
 800804a:	4602      	mov	r2, r0
 800804c:	4b0b      	ldr	r3, [pc, #44]	; (800807c <HAL_RCC_ClockConfig+0x30c>)
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	091b      	lsrs	r3, r3, #4
 8008052:	f003 030f 	and.w	r3, r3, #15
 8008056:	490a      	ldr	r1, [pc, #40]	; (8008080 <HAL_RCC_ClockConfig+0x310>)
 8008058:	5ccb      	ldrb	r3, [r1, r3]
 800805a:	fa22 f303 	lsr.w	r3, r2, r3
 800805e:	4a09      	ldr	r2, [pc, #36]	; (8008084 <HAL_RCC_ClockConfig+0x314>)
 8008060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008062:	4b09      	ldr	r3, [pc, #36]	; (8008088 <HAL_RCC_ClockConfig+0x318>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	f7f9 ff74 	bl	8001f54 <HAL_InitTick>

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	08014a50 	.word	0x08014a50
 800807c:	40023800 	.word	0x40023800
 8008080:	08014d70 	.word	0x08014d70
 8008084:	20000018 	.word	0x20000018
 8008088:	2000002c 	.word	0x2000002c

0800808c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800808c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008090:	b090      	sub	sp, #64	; 0x40
 8008092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	637b      	str	r3, [r7, #52]	; 0x34
 8008098:	2300      	movs	r3, #0
 800809a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800809c:	2300      	movs	r3, #0
 800809e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80080a0:	2300      	movs	r3, #0
 80080a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080a4:	4b59      	ldr	r3, [pc, #356]	; (800820c <HAL_RCC_GetSysClockFreq+0x180>)
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f003 030c 	and.w	r3, r3, #12
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d00d      	beq.n	80080cc <HAL_RCC_GetSysClockFreq+0x40>
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	f200 80a1 	bhi.w	80081f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <HAL_RCC_GetSysClockFreq+0x34>
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d003      	beq.n	80080c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80080be:	e09b      	b.n	80081f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080c0:	4b53      	ldr	r3, [pc, #332]	; (8008210 <HAL_RCC_GetSysClockFreq+0x184>)
 80080c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80080c4:	e09b      	b.n	80081fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080c6:	4b53      	ldr	r3, [pc, #332]	; (8008214 <HAL_RCC_GetSysClockFreq+0x188>)
 80080c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80080ca:	e098      	b.n	80081fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080cc:	4b4f      	ldr	r3, [pc, #316]	; (800820c <HAL_RCC_GetSysClockFreq+0x180>)
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080d6:	4b4d      	ldr	r3, [pc, #308]	; (800820c <HAL_RCC_GetSysClockFreq+0x180>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d028      	beq.n	8008134 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080e2:	4b4a      	ldr	r3, [pc, #296]	; (800820c <HAL_RCC_GetSysClockFreq+0x180>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	099b      	lsrs	r3, r3, #6
 80080e8:	2200      	movs	r2, #0
 80080ea:	623b      	str	r3, [r7, #32]
 80080ec:	627a      	str	r2, [r7, #36]	; 0x24
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80080f4:	2100      	movs	r1, #0
 80080f6:	4b47      	ldr	r3, [pc, #284]	; (8008214 <HAL_RCC_GetSysClockFreq+0x188>)
 80080f8:	fb03 f201 	mul.w	r2, r3, r1
 80080fc:	2300      	movs	r3, #0
 80080fe:	fb00 f303 	mul.w	r3, r0, r3
 8008102:	4413      	add	r3, r2
 8008104:	4a43      	ldr	r2, [pc, #268]	; (8008214 <HAL_RCC_GetSysClockFreq+0x188>)
 8008106:	fba0 1202 	umull	r1, r2, r0, r2
 800810a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800810c:	460a      	mov	r2, r1
 800810e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008112:	4413      	add	r3, r2
 8008114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008118:	2200      	movs	r2, #0
 800811a:	61bb      	str	r3, [r7, #24]
 800811c:	61fa      	str	r2, [r7, #28]
 800811e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008122:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008126:	f7f8 fdb7 	bl	8000c98 <__aeabi_uldivmod>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	4613      	mov	r3, r2
 8008130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008132:	e053      	b.n	80081dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008134:	4b35      	ldr	r3, [pc, #212]	; (800820c <HAL_RCC_GetSysClockFreq+0x180>)
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	099b      	lsrs	r3, r3, #6
 800813a:	2200      	movs	r2, #0
 800813c:	613b      	str	r3, [r7, #16]
 800813e:	617a      	str	r2, [r7, #20]
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008146:	f04f 0b00 	mov.w	fp, #0
 800814a:	4652      	mov	r2, sl
 800814c:	465b      	mov	r3, fp
 800814e:	f04f 0000 	mov.w	r0, #0
 8008152:	f04f 0100 	mov.w	r1, #0
 8008156:	0159      	lsls	r1, r3, #5
 8008158:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800815c:	0150      	lsls	r0, r2, #5
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	ebb2 080a 	subs.w	r8, r2, sl
 8008166:	eb63 090b 	sbc.w	r9, r3, fp
 800816a:	f04f 0200 	mov.w	r2, #0
 800816e:	f04f 0300 	mov.w	r3, #0
 8008172:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008176:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800817a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800817e:	ebb2 0408 	subs.w	r4, r2, r8
 8008182:	eb63 0509 	sbc.w	r5, r3, r9
 8008186:	f04f 0200 	mov.w	r2, #0
 800818a:	f04f 0300 	mov.w	r3, #0
 800818e:	00eb      	lsls	r3, r5, #3
 8008190:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008194:	00e2      	lsls	r2, r4, #3
 8008196:	4614      	mov	r4, r2
 8008198:	461d      	mov	r5, r3
 800819a:	eb14 030a 	adds.w	r3, r4, sl
 800819e:	603b      	str	r3, [r7, #0]
 80081a0:	eb45 030b 	adc.w	r3, r5, fp
 80081a4:	607b      	str	r3, [r7, #4]
 80081a6:	f04f 0200 	mov.w	r2, #0
 80081aa:	f04f 0300 	mov.w	r3, #0
 80081ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80081b2:	4629      	mov	r1, r5
 80081b4:	028b      	lsls	r3, r1, #10
 80081b6:	4621      	mov	r1, r4
 80081b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80081bc:	4621      	mov	r1, r4
 80081be:	028a      	lsls	r2, r1, #10
 80081c0:	4610      	mov	r0, r2
 80081c2:	4619      	mov	r1, r3
 80081c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c6:	2200      	movs	r2, #0
 80081c8:	60bb      	str	r3, [r7, #8]
 80081ca:	60fa      	str	r2, [r7, #12]
 80081cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081d0:	f7f8 fd62 	bl	8000c98 <__aeabi_uldivmod>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4613      	mov	r3, r2
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80081dc:	4b0b      	ldr	r3, [pc, #44]	; (800820c <HAL_RCC_GetSysClockFreq+0x180>)
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	0c1b      	lsrs	r3, r3, #16
 80081e2:	f003 0303 	and.w	r3, r3, #3
 80081e6:	3301      	adds	r3, #1
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80081ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80081f6:	e002      	b.n	80081fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081f8:	4b05      	ldr	r3, [pc, #20]	; (8008210 <HAL_RCC_GetSysClockFreq+0x184>)
 80081fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80081fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008200:	4618      	mov	r0, r3
 8008202:	3740      	adds	r7, #64	; 0x40
 8008204:	46bd      	mov	sp, r7
 8008206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800820a:	bf00      	nop
 800820c:	40023800 	.word	0x40023800
 8008210:	00f42400 	.word	0x00f42400
 8008214:	017d7840 	.word	0x017d7840

08008218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008218:	b480      	push	{r7}
 800821a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800821c:	4b03      	ldr	r3, [pc, #12]	; (800822c <HAL_RCC_GetHCLKFreq+0x14>)
 800821e:	681b      	ldr	r3, [r3, #0]
}
 8008220:	4618      	mov	r0, r3
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	20000018 	.word	0x20000018

08008230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008234:	f7ff fff0 	bl	8008218 <HAL_RCC_GetHCLKFreq>
 8008238:	4602      	mov	r2, r0
 800823a:	4b05      	ldr	r3, [pc, #20]	; (8008250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	0a9b      	lsrs	r3, r3, #10
 8008240:	f003 0307 	and.w	r3, r3, #7
 8008244:	4903      	ldr	r1, [pc, #12]	; (8008254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008246:	5ccb      	ldrb	r3, [r1, r3]
 8008248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800824c:	4618      	mov	r0, r3
 800824e:	bd80      	pop	{r7, pc}
 8008250:	40023800 	.word	0x40023800
 8008254:	08014d80 	.word	0x08014d80

08008258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800825c:	f7ff ffdc 	bl	8008218 <HAL_RCC_GetHCLKFreq>
 8008260:	4602      	mov	r2, r0
 8008262:	4b05      	ldr	r3, [pc, #20]	; (8008278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	0b5b      	lsrs	r3, r3, #13
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	4903      	ldr	r1, [pc, #12]	; (800827c <HAL_RCC_GetPCLK2Freq+0x24>)
 800826e:	5ccb      	ldrb	r3, [r1, r3]
 8008270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008274:	4618      	mov	r0, r3
 8008276:	bd80      	pop	{r7, pc}
 8008278:	40023800 	.word	0x40023800
 800827c:	08014d80 	.word	0x08014d80

08008280 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	220f      	movs	r2, #15
 800828e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008290:	4b12      	ldr	r3, [pc, #72]	; (80082dc <HAL_RCC_GetClockConfig+0x5c>)
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f003 0203 	and.w	r2, r3, #3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800829c:	4b0f      	ldr	r3, [pc, #60]	; (80082dc <HAL_RCC_GetClockConfig+0x5c>)
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80082a8:	4b0c      	ldr	r3, [pc, #48]	; (80082dc <HAL_RCC_GetClockConfig+0x5c>)
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80082b4:	4b09      	ldr	r3, [pc, #36]	; (80082dc <HAL_RCC_GetClockConfig+0x5c>)
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	08db      	lsrs	r3, r3, #3
 80082ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80082c2:	4b07      	ldr	r3, [pc, #28]	; (80082e0 <HAL_RCC_GetClockConfig+0x60>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0207 	and.w	r2, r3, #7
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	601a      	str	r2, [r3, #0]
}
 80082ce:	bf00      	nop
 80082d0:	370c      	adds	r7, #12
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	40023800 	.word	0x40023800
 80082e0:	40023c00 	.word	0x40023c00

080082e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e184      	b.n	8008600 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a72      	ldr	r2, [pc, #456]	; (80084c4 <HAL_SPI_Init+0x1e0>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d013      	beq.n	8008328 <HAL_SPI_Init+0x44>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a70      	ldr	r2, [pc, #448]	; (80084c8 <HAL_SPI_Init+0x1e4>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00e      	beq.n	8008328 <HAL_SPI_Init+0x44>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a6f      	ldr	r2, [pc, #444]	; (80084cc <HAL_SPI_Init+0x1e8>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d009      	beq.n	8008328 <HAL_SPI_Init+0x44>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a6d      	ldr	r2, [pc, #436]	; (80084d0 <HAL_SPI_Init+0x1ec>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d004      	beq.n	8008328 <HAL_SPI_Init+0x44>
 800831e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008322:	486c      	ldr	r0, [pc, #432]	; (80084d4 <HAL_SPI_Init+0x1f0>)
 8008324:	f7f9 fd31 	bl	8001d8a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d009      	beq.n	8008344 <HAL_SPI_Init+0x60>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008338:	d004      	beq.n	8008344 <HAL_SPI_Init+0x60>
 800833a:	f240 1141 	movw	r1, #321	; 0x141
 800833e:	4865      	ldr	r0, [pc, #404]	; (80084d4 <HAL_SPI_Init+0x1f0>)
 8008340:	f7f9 fd23 	bl	8001d8a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00e      	beq.n	800836a <HAL_SPI_Init+0x86>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008354:	d009      	beq.n	800836a <HAL_SPI_Init+0x86>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800835e:	d004      	beq.n	800836a <HAL_SPI_Init+0x86>
 8008360:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8008364:	485b      	ldr	r0, [pc, #364]	; (80084d4 <HAL_SPI_Init+0x1f0>)
 8008366:	f7f9 fd10 	bl	8001d8a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008372:	d008      	beq.n	8008386 <HAL_SPI_Init+0xa2>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d004      	beq.n	8008386 <HAL_SPI_Init+0xa2>
 800837c:	f240 1143 	movw	r1, #323	; 0x143
 8008380:	4854      	ldr	r0, [pc, #336]	; (80084d4 <HAL_SPI_Init+0x1f0>)
 8008382:	f7f9 fd02 	bl	8001d8a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800838e:	d00d      	beq.n	80083ac <HAL_SPI_Init+0xc8>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d009      	beq.n	80083ac <HAL_SPI_Init+0xc8>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083a0:	d004      	beq.n	80083ac <HAL_SPI_Init+0xc8>
 80083a2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80083a6:	484b      	ldr	r0, [pc, #300]	; (80084d4 <HAL_SPI_Init+0x1f0>)
 80083a8:	f7f9 fcef 	bl	8001d8a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d020      	beq.n	80083f6 <HAL_SPI_Init+0x112>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d01c      	beq.n	80083f6 <HAL_SPI_Init+0x112>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	2b10      	cmp	r3, #16
 80083c2:	d018      	beq.n	80083f6 <HAL_SPI_Init+0x112>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	2b18      	cmp	r3, #24
 80083ca:	d014      	beq.n	80083f6 <HAL_SPI_Init+0x112>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	2b20      	cmp	r3, #32
 80083d2:	d010      	beq.n	80083f6 <HAL_SPI_Init+0x112>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	2b28      	cmp	r3, #40	; 0x28
 80083da:	d00c      	beq.n	80083f6 <HAL_SPI_Init+0x112>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	69db      	ldr	r3, [r3, #28]
 80083e0:	2b30      	cmp	r3, #48	; 0x30
 80083e2:	d008      	beq.n	80083f6 <HAL_SPI_Init+0x112>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	2b38      	cmp	r3, #56	; 0x38
 80083ea:	d004      	beq.n	80083f6 <HAL_SPI_Init+0x112>
 80083ec:	f240 1145 	movw	r1, #325	; 0x145
 80083f0:	4838      	ldr	r0, [pc, #224]	; (80084d4 <HAL_SPI_Init+0x1f0>)
 80083f2:	f7f9 fcca 	bl	8001d8a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d008      	beq.n	8008410 <HAL_SPI_Init+0x12c>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	2b80      	cmp	r3, #128	; 0x80
 8008404:	d004      	beq.n	8008410 <HAL_SPI_Init+0x12c>
 8008406:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800840a:	4832      	ldr	r0, [pc, #200]	; (80084d4 <HAL_SPI_Init+0x1f0>)
 800840c:	f7f9 fcbd 	bl	8001d8a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	2b00      	cmp	r3, #0
 8008416:	d008      	beq.n	800842a <HAL_SPI_Init+0x146>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841c:	2b10      	cmp	r3, #16
 800841e:	d004      	beq.n	800842a <HAL_SPI_Init+0x146>
 8008420:	f240 1147 	movw	r1, #327	; 0x147
 8008424:	482b      	ldr	r0, [pc, #172]	; (80084d4 <HAL_SPI_Init+0x1f0>)
 8008426:	f7f9 fcb0 	bl	8001d8a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842e:	2b00      	cmp	r3, #0
 8008430:	d152      	bne.n	80084d8 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d008      	beq.n	800844c <HAL_SPI_Init+0x168>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	2b02      	cmp	r3, #2
 8008440:	d004      	beq.n	800844c <HAL_SPI_Init+0x168>
 8008442:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008446:	4823      	ldr	r0, [pc, #140]	; (80084d4 <HAL_SPI_Init+0x1f0>)
 8008448:	f7f9 fc9f 	bl	8001d8a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d008      	beq.n	8008466 <HAL_SPI_Init+0x182>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d004      	beq.n	8008466 <HAL_SPI_Init+0x182>
 800845c:	f240 114b 	movw	r1, #331	; 0x14b
 8008460:	481c      	ldr	r0, [pc, #112]	; (80084d4 <HAL_SPI_Init+0x1f0>)
 8008462:	f7f9 fc92 	bl	8001d8a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800846e:	d125      	bne.n	80084bc <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	69db      	ldr	r3, [r3, #28]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d05a      	beq.n	800852e <HAL_SPI_Init+0x24a>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	2b08      	cmp	r3, #8
 800847e:	d056      	beq.n	800852e <HAL_SPI_Init+0x24a>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	69db      	ldr	r3, [r3, #28]
 8008484:	2b10      	cmp	r3, #16
 8008486:	d052      	beq.n	800852e <HAL_SPI_Init+0x24a>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	69db      	ldr	r3, [r3, #28]
 800848c:	2b18      	cmp	r3, #24
 800848e:	d04e      	beq.n	800852e <HAL_SPI_Init+0x24a>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	2b20      	cmp	r3, #32
 8008496:	d04a      	beq.n	800852e <HAL_SPI_Init+0x24a>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	2b28      	cmp	r3, #40	; 0x28
 800849e:	d046      	beq.n	800852e <HAL_SPI_Init+0x24a>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	2b30      	cmp	r3, #48	; 0x30
 80084a6:	d042      	beq.n	800852e <HAL_SPI_Init+0x24a>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	69db      	ldr	r3, [r3, #28]
 80084ac:	2b38      	cmp	r3, #56	; 0x38
 80084ae:	d03e      	beq.n	800852e <HAL_SPI_Init+0x24a>
 80084b0:	f240 114f 	movw	r1, #335	; 0x14f
 80084b4:	4807      	ldr	r0, [pc, #28]	; (80084d4 <HAL_SPI_Init+0x1f0>)
 80084b6:	f7f9 fc68 	bl	8001d8a <assert_failed>
 80084ba:	e038      	b.n	800852e <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	61da      	str	r2, [r3, #28]
 80084c2:	e034      	b.n	800852e <HAL_SPI_Init+0x24a>
 80084c4:	40013000 	.word	0x40013000
 80084c8:	40003800 	.word	0x40003800
 80084cc:	40003c00 	.word	0x40003c00
 80084d0:	40013400 	.word	0x40013400
 80084d4:	08014ac4 	.word	0x08014ac4
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d020      	beq.n	8008522 <HAL_SPI_Init+0x23e>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	69db      	ldr	r3, [r3, #28]
 80084e4:	2b08      	cmp	r3, #8
 80084e6:	d01c      	beq.n	8008522 <HAL_SPI_Init+0x23e>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	2b10      	cmp	r3, #16
 80084ee:	d018      	beq.n	8008522 <HAL_SPI_Init+0x23e>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	2b18      	cmp	r3, #24
 80084f6:	d014      	beq.n	8008522 <HAL_SPI_Init+0x23e>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	d010      	beq.n	8008522 <HAL_SPI_Init+0x23e>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	2b28      	cmp	r3, #40	; 0x28
 8008506:	d00c      	beq.n	8008522 <HAL_SPI_Init+0x23e>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	69db      	ldr	r3, [r3, #28]
 800850c:	2b30      	cmp	r3, #48	; 0x30
 800850e:	d008      	beq.n	8008522 <HAL_SPI_Init+0x23e>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	69db      	ldr	r3, [r3, #28]
 8008514:	2b38      	cmp	r3, #56	; 0x38
 8008516:	d004      	beq.n	8008522 <HAL_SPI_Init+0x23e>
 8008518:	f240 1159 	movw	r1, #345	; 0x159
 800851c:	483a      	ldr	r0, [pc, #232]	; (8008608 <HAL_SPI_Init+0x324>)
 800851e:	f7f9 fc34 	bl	8001d8a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b00      	cmp	r3, #0
 800853e:	d106      	bne.n	800854e <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7f9 fc5f 	bl	8001e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2202      	movs	r2, #2
 8008552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008564:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008576:	431a      	orrs	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008580:	431a      	orrs	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	431a      	orrs	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	431a      	orrs	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800859e:	431a      	orrs	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	69db      	ldr	r3, [r3, #28]
 80085a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085a8:	431a      	orrs	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b2:	ea42 0103 	orr.w	r1, r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	0c1b      	lsrs	r3, r3, #16
 80085cc:	f003 0104 	and.w	r1, r3, #4
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	f003 0210 	and.w	r2, r3, #16
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	69da      	ldr	r2, [r3, #28]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	08014ac4 	.word	0x08014ac4

0800860c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e033      	b.n	8008686 <HAL_SPI_DeInit+0x7a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a1b      	ldr	r2, [pc, #108]	; (8008690 <HAL_SPI_DeInit+0x84>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d013      	beq.n	8008650 <HAL_SPI_DeInit+0x44>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a19      	ldr	r2, [pc, #100]	; (8008694 <HAL_SPI_DeInit+0x88>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d00e      	beq.n	8008650 <HAL_SPI_DeInit+0x44>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a18      	ldr	r2, [pc, #96]	; (8008698 <HAL_SPI_DeInit+0x8c>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d009      	beq.n	8008650 <HAL_SPI_DeInit+0x44>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a16      	ldr	r2, [pc, #88]	; (800869c <HAL_SPI_DeInit+0x90>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d004      	beq.n	8008650 <HAL_SPI_DeInit+0x44>
 8008646:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800864a:	4815      	ldr	r0, [pc, #84]	; (80086a0 <HAL_SPI_DeInit+0x94>)
 800864c:	f7f9 fb9d 	bl	8001d8a <assert_failed>

  hspi->State = HAL_SPI_STATE_BUSY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2202      	movs	r2, #2
 8008654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008666:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7f9 fc1f 	bl	8001eac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	40013000 	.word	0x40013000
 8008694:	40003800 	.word	0x40003800
 8008698:	40003c00 	.word	0x40003c00
 800869c:	40013400 	.word	0x40013400
 80086a0:	08014ac4 	.word	0x08014ac4

080086a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	603b      	str	r3, [r7, #0]
 80086b0:	4613      	mov	r3, r2
 80086b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d009      	beq.n	80086d4 <HAL_SPI_Transmit+0x30>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086c8:	d004      	beq.n	80086d4 <HAL_SPI_Transmit+0x30>
 80086ca:	f44f 7142 	mov.w	r1, #776	; 0x308
 80086ce:	4880      	ldr	r0, [pc, #512]	; (80088d0 <HAL_SPI_Transmit+0x22c>)
 80086d0:	f7f9 fb5b 	bl	8001d8a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d101      	bne.n	80086e2 <HAL_SPI_Transmit+0x3e>
 80086de:	2302      	movs	r3, #2
 80086e0:	e128      	b.n	8008934 <HAL_SPI_Transmit+0x290>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086ea:	f7fb fcd1 	bl	8004090 <HAL_GetTick>
 80086ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80086f0:	88fb      	ldrh	r3, [r7, #6]
 80086f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d002      	beq.n	8008706 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8008700:	2302      	movs	r3, #2
 8008702:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008704:	e10d      	b.n	8008922 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <HAL_SPI_Transmit+0x6e>
 800870c:	88fb      	ldrh	r3, [r7, #6]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d102      	bne.n	8008718 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008716:	e104      	b.n	8008922 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2203      	movs	r2, #3
 800871c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	88fa      	ldrh	r2, [r7, #6]
 8008730:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	88fa      	ldrh	r2, [r7, #6]
 8008736:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800875e:	d10f      	bne.n	8008780 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800876e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800877e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878a:	2b40      	cmp	r3, #64	; 0x40
 800878c:	d007      	beq.n	800879e <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800879c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087a6:	d14b      	bne.n	8008840 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <HAL_SPI_Transmit+0x112>
 80087b0:	8afb      	ldrh	r3, [r7, #22]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d13e      	bne.n	8008834 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ba:	881a      	ldrh	r2, [r3, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c6:	1c9a      	adds	r2, r3, #2
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	3b01      	subs	r3, #1
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80087da:	e02b      	b.n	8008834 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d112      	bne.n	8008810 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ee:	881a      	ldrh	r2, [r3, #0]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fa:	1c9a      	adds	r2, r3, #2
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008804:	b29b      	uxth	r3, r3
 8008806:	3b01      	subs	r3, #1
 8008808:	b29a      	uxth	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	86da      	strh	r2, [r3, #54]	; 0x36
 800880e:	e011      	b.n	8008834 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008810:	f7fb fc3e 	bl	8004090 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	429a      	cmp	r2, r3
 800881e:	d803      	bhi.n	8008828 <HAL_SPI_Transmit+0x184>
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008826:	d102      	bne.n	800882e <HAL_SPI_Transmit+0x18a>
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d102      	bne.n	8008834 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008832:	e076      	b.n	8008922 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008838:	b29b      	uxth	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1ce      	bne.n	80087dc <HAL_SPI_Transmit+0x138>
 800883e:	e04e      	b.n	80088de <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <HAL_SPI_Transmit+0x1aa>
 8008848:	8afb      	ldrh	r3, [r7, #22]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d142      	bne.n	80088d4 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	330c      	adds	r3, #12
 8008858:	7812      	ldrb	r2, [r2, #0]
 800885a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800886a:	b29b      	uxth	r3, r3
 800886c:	3b01      	subs	r3, #1
 800886e:	b29a      	uxth	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008874:	e02e      	b.n	80088d4 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	f003 0302 	and.w	r3, r3, #2
 8008880:	2b02      	cmp	r3, #2
 8008882:	d113      	bne.n	80088ac <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	330c      	adds	r3, #12
 800888e:	7812      	ldrb	r2, [r2, #0]
 8008890:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	3b01      	subs	r3, #1
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80088aa:	e013      	b.n	80088d4 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088ac:	f7fb fbf0 	bl	8004090 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d803      	bhi.n	80088c4 <HAL_SPI_Transmit+0x220>
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c2:	d102      	bne.n	80088ca <HAL_SPI_Transmit+0x226>
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d104      	bne.n	80088d4 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80088ce:	e028      	b.n	8008922 <HAL_SPI_Transmit+0x27e>
 80088d0:	08014ac4 	.word	0x08014ac4
    while (hspi->TxXferCount > 0U)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088d8:	b29b      	uxth	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1cb      	bne.n	8008876 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088de:	69ba      	ldr	r2, [r7, #24]
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 f9d0 	bl	8008c88 <SPI_EndRxTxTransaction>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2220      	movs	r2, #32
 80088f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10a      	bne.n	8008912 <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088fc:	2300      	movs	r3, #0
 80088fe:	613b      	str	r3, [r7, #16]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	613b      	str	r3, [r7, #16]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	613b      	str	r3, [r7, #16]
 8008910:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008916:	2b00      	cmp	r3, #0
 8008918:	d002      	beq.n	8008920 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	77fb      	strb	r3, [r7, #31]
 800891e:	e000      	b.n	8008922 <HAL_SPI_Transmit+0x27e>
  }

error:
 8008920:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008932:	7ffb      	ldrb	r3, [r7, #31]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3720      	adds	r7, #32
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	099b      	lsrs	r3, r3, #6
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10f      	bne.n	8008980 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00a      	beq.n	8008980 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	099b      	lsrs	r3, r3, #6
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d004      	beq.n	8008980 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	4798      	blx	r3
    return;
 800897e:	e0d7      	b.n	8008b30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	085b      	lsrs	r3, r3, #1
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00a      	beq.n	80089a2 <HAL_SPI_IRQHandler+0x66>
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	09db      	lsrs	r3, r3, #7
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	2b00      	cmp	r3, #0
 8008996:	d004      	beq.n	80089a2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	4798      	blx	r3
    return;
 80089a0:	e0c6      	b.n	8008b30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	095b      	lsrs	r3, r3, #5
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10c      	bne.n	80089c8 <HAL_SPI_IRQHandler+0x8c>
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	099b      	lsrs	r3, r3, #6
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d106      	bne.n	80089c8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	0a1b      	lsrs	r3, r3, #8
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f000 80b4 	beq.w	8008b30 <HAL_SPI_IRQHandler+0x1f4>
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	095b      	lsrs	r3, r3, #5
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f000 80ad 	beq.w	8008b30 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	099b      	lsrs	r3, r3, #6
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d023      	beq.n	8008a2a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d011      	beq.n	8008a12 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f2:	f043 0204 	orr.w	r2, r3, #4
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089fa:	2300      	movs	r3, #0
 80089fc:	617b      	str	r3, [r7, #20]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	617b      	str	r3, [r7, #20]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	617b      	str	r3, [r7, #20]
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	e00b      	b.n	8008a2a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a12:	2300      	movs	r3, #0
 8008a14:	613b      	str	r3, [r7, #16]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	613b      	str	r3, [r7, #16]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	613b      	str	r3, [r7, #16]
 8008a26:	693b      	ldr	r3, [r7, #16]
        return;
 8008a28:	e082      	b.n	8008b30 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	095b      	lsrs	r3, r3, #5
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d014      	beq.n	8008a60 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3a:	f043 0201 	orr.w	r2, r3, #1
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	60fb      	str	r3, [r7, #12]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	0a1b      	lsrs	r3, r3, #8
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00c      	beq.n	8008a86 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a70:	f043 0208 	orr.w	r2, r3, #8
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a78:	2300      	movs	r3, #0
 8008a7a:	60bb      	str	r3, [r7, #8]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	60bb      	str	r3, [r7, #8]
 8008a84:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d04f      	beq.n	8008b2e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a9c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	f003 0302 	and.w	r3, r3, #2
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d104      	bne.n	8008aba <HAL_SPI_IRQHandler+0x17e>
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d034      	beq.n	8008b24 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f022 0203 	bic.w	r2, r2, #3
 8008ac8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d011      	beq.n	8008af6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad6:	4a18      	ldr	r2, [pc, #96]	; (8008b38 <HAL_SPI_IRQHandler+0x1fc>)
 8008ad8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fb fcc4 	bl	800446c <HAL_DMA_Abort_IT>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d005      	beq.n	8008af6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d016      	beq.n	8008b2c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b02:	4a0d      	ldr	r2, [pc, #52]	; (8008b38 <HAL_SPI_IRQHandler+0x1fc>)
 8008b04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fb fcae 	bl	800446c <HAL_DMA_Abort_IT>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00a      	beq.n	8008b2c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008b22:	e003      	b.n	8008b2c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f809 	bl	8008b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008b2a:	e000      	b.n	8008b2e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008b2c:	bf00      	nop
    return;
 8008b2e:	bf00      	nop
  }
}
 8008b30:	3720      	adds	r7, #32
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	08008b51 	.word	0x08008b51

08008b3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f7ff ffe6 	bl	8008b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b70:	bf00      	nop
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	603b      	str	r3, [r7, #0]
 8008b84:	4613      	mov	r3, r2
 8008b86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008b88:	f7fb fa82 	bl	8004090 <HAL_GetTick>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	1a9b      	subs	r3, r3, r2
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	4413      	add	r3, r2
 8008b96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008b98:	f7fb fa7a 	bl	8004090 <HAL_GetTick>
 8008b9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008b9e:	4b39      	ldr	r3, [pc, #228]	; (8008c84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	015b      	lsls	r3, r3, #5
 8008ba4:	0d1b      	lsrs	r3, r3, #20
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	fb02 f303 	mul.w	r3, r2, r3
 8008bac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008bae:	e054      	b.n	8008c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb6:	d050      	beq.n	8008c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008bb8:	f7fb fa6a 	bl	8004090 <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d902      	bls.n	8008bce <SPI_WaitFlagStateUntilTimeout+0x56>
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d13d      	bne.n	8008c4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008bdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008be6:	d111      	bne.n	8008c0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bf0:	d004      	beq.n	8008bfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bfa:	d107      	bne.n	8008c0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c14:	d10f      	bne.n	8008c36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e017      	b.n	8008c7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	689a      	ldr	r2, [r3, #8]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	4013      	ands	r3, r2
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	bf0c      	ite	eq
 8008c6a:	2301      	moveq	r3, #1
 8008c6c:	2300      	movne	r3, #0
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	461a      	mov	r2, r3
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d19b      	bne.n	8008bb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3720      	adds	r7, #32
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20000018 	.word	0x20000018

08008c88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af02      	add	r7, sp, #8
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008c94:	4b1b      	ldr	r3, [pc, #108]	; (8008d04 <SPI_EndRxTxTransaction+0x7c>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a1b      	ldr	r2, [pc, #108]	; (8008d08 <SPI_EndRxTxTransaction+0x80>)
 8008c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9e:	0d5b      	lsrs	r3, r3, #21
 8008ca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ca4:	fb02 f303 	mul.w	r3, r2, r3
 8008ca8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cb2:	d112      	bne.n	8008cda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2180      	movs	r1, #128	; 0x80
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f7ff ff5a 	bl	8008b78 <SPI_WaitFlagStateUntilTimeout>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d016      	beq.n	8008cf8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cce:	f043 0220 	orr.w	r2, r3, #32
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e00f      	b.n	8008cfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00a      	beq.n	8008cf6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cf0:	2b80      	cmp	r3, #128	; 0x80
 8008cf2:	d0f2      	beq.n	8008cda <SPI_EndRxTxTransaction+0x52>
 8008cf4:	e000      	b.n	8008cf8 <SPI_EndRxTxTransaction+0x70>
        break;
 8008cf6:	bf00      	nop
  }

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3718      	adds	r7, #24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20000018 	.word	0x20000018
 8008d08:	165e9f81 	.word	0x165e9f81

08008d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e0a7      	b.n	8008e6e <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a55      	ldr	r2, [pc, #340]	; (8008e78 <HAL_TIM_Base_Init+0x16c>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d027      	beq.n	8008d78 <HAL_TIM_Base_Init+0x6c>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d30:	d022      	beq.n	8008d78 <HAL_TIM_Base_Init+0x6c>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a51      	ldr	r2, [pc, #324]	; (8008e7c <HAL_TIM_Base_Init+0x170>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d01d      	beq.n	8008d78 <HAL_TIM_Base_Init+0x6c>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a4f      	ldr	r2, [pc, #316]	; (8008e80 <HAL_TIM_Base_Init+0x174>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d018      	beq.n	8008d78 <HAL_TIM_Base_Init+0x6c>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a4e      	ldr	r2, [pc, #312]	; (8008e84 <HAL_TIM_Base_Init+0x178>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d013      	beq.n	8008d78 <HAL_TIM_Base_Init+0x6c>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a4c      	ldr	r2, [pc, #304]	; (8008e88 <HAL_TIM_Base_Init+0x17c>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00e      	beq.n	8008d78 <HAL_TIM_Base_Init+0x6c>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a4b      	ldr	r2, [pc, #300]	; (8008e8c <HAL_TIM_Base_Init+0x180>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d009      	beq.n	8008d78 <HAL_TIM_Base_Init+0x6c>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a49      	ldr	r2, [pc, #292]	; (8008e90 <HAL_TIM_Base_Init+0x184>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d004      	beq.n	8008d78 <HAL_TIM_Base_Init+0x6c>
 8008d6e:	f240 1113 	movw	r1, #275	; 0x113
 8008d72:	4848      	ldr	r0, [pc, #288]	; (8008e94 <HAL_TIM_Base_Init+0x188>)
 8008d74:	f7f9 f809 	bl	8001d8a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d014      	beq.n	8008daa <HAL_TIM_Base_Init+0x9e>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	2b10      	cmp	r3, #16
 8008d86:	d010      	beq.n	8008daa <HAL_TIM_Base_Init+0x9e>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	d00c      	beq.n	8008daa <HAL_TIM_Base_Init+0x9e>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	2b40      	cmp	r3, #64	; 0x40
 8008d96:	d008      	beq.n	8008daa <HAL_TIM_Base_Init+0x9e>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	2b60      	cmp	r3, #96	; 0x60
 8008d9e:	d004      	beq.n	8008daa <HAL_TIM_Base_Init+0x9e>
 8008da0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008da4:	483b      	ldr	r0, [pc, #236]	; (8008e94 <HAL_TIM_Base_Init+0x188>)
 8008da6:	f7f8 fff0 	bl	8001d8a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00e      	beq.n	8008dd0 <HAL_TIM_Base_Init+0xc4>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dba:	d009      	beq.n	8008dd0 <HAL_TIM_Base_Init+0xc4>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dc4:	d004      	beq.n	8008dd0 <HAL_TIM_Base_Init+0xc4>
 8008dc6:	f240 1115 	movw	r1, #277	; 0x115
 8008dca:	4832      	ldr	r0, [pc, #200]	; (8008e94 <HAL_TIM_Base_Init+0x188>)
 8008dcc:	f7f8 ffdd 	bl	8001d8a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d008      	beq.n	8008dea <HAL_TIM_Base_Init+0xde>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	2b80      	cmp	r3, #128	; 0x80
 8008dde:	d004      	beq.n	8008dea <HAL_TIM_Base_Init+0xde>
 8008de0:	f44f 718b 	mov.w	r1, #278	; 0x116
 8008de4:	482b      	ldr	r0, [pc, #172]	; (8008e94 <HAL_TIM_Base_Init+0x188>)
 8008de6:	f7f8 ffd0 	bl	8001d8a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d106      	bne.n	8008e04 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7f9 fad0 	bl	80023a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3304      	adds	r3, #4
 8008e14:	4619      	mov	r1, r3
 8008e16:	4610      	mov	r0, r2
 8008e18:	f000 fd9a 	bl	8009950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	40010000 	.word	0x40010000
 8008e7c:	40000400 	.word	0x40000400
 8008e80:	40000800 	.word	0x40000800
 8008e84:	40000c00 	.word	0x40000c00
 8008e88:	40014000 	.word	0x40014000
 8008e8c:	40014400 	.word	0x40014400
 8008e90:	40014800 	.word	0x40014800
 8008e94:	08014b38 	.word	0x08014b38

08008e98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a39      	ldr	r2, [pc, #228]	; (8008f8c <HAL_TIM_Base_Start+0xf4>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d027      	beq.n	8008efa <HAL_TIM_Base_Start+0x62>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eb2:	d022      	beq.n	8008efa <HAL_TIM_Base_Start+0x62>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a35      	ldr	r2, [pc, #212]	; (8008f90 <HAL_TIM_Base_Start+0xf8>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d01d      	beq.n	8008efa <HAL_TIM_Base_Start+0x62>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a34      	ldr	r2, [pc, #208]	; (8008f94 <HAL_TIM_Base_Start+0xfc>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d018      	beq.n	8008efa <HAL_TIM_Base_Start+0x62>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a32      	ldr	r2, [pc, #200]	; (8008f98 <HAL_TIM_Base_Start+0x100>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d013      	beq.n	8008efa <HAL_TIM_Base_Start+0x62>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a31      	ldr	r2, [pc, #196]	; (8008f9c <HAL_TIM_Base_Start+0x104>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d00e      	beq.n	8008efa <HAL_TIM_Base_Start+0x62>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a2f      	ldr	r2, [pc, #188]	; (8008fa0 <HAL_TIM_Base_Start+0x108>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d009      	beq.n	8008efa <HAL_TIM_Base_Start+0x62>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a2e      	ldr	r2, [pc, #184]	; (8008fa4 <HAL_TIM_Base_Start+0x10c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d004      	beq.n	8008efa <HAL_TIM_Base_Start+0x62>
 8008ef0:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8008ef4:	482c      	ldr	r0, [pc, #176]	; (8008fa8 <HAL_TIM_Base_Start+0x110>)
 8008ef6:	f7f8 ff48 	bl	8001d8a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d001      	beq.n	8008f0a <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e03c      	b.n	8008f84 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a1d      	ldr	r2, [pc, #116]	; (8008f8c <HAL_TIM_Base_Start+0xf4>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d018      	beq.n	8008f4e <HAL_TIM_Base_Start+0xb6>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f24:	d013      	beq.n	8008f4e <HAL_TIM_Base_Start+0xb6>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a19      	ldr	r2, [pc, #100]	; (8008f90 <HAL_TIM_Base_Start+0xf8>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d00e      	beq.n	8008f4e <HAL_TIM_Base_Start+0xb6>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a17      	ldr	r2, [pc, #92]	; (8008f94 <HAL_TIM_Base_Start+0xfc>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d009      	beq.n	8008f4e <HAL_TIM_Base_Start+0xb6>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a16      	ldr	r2, [pc, #88]	; (8008f98 <HAL_TIM_Base_Start+0x100>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d004      	beq.n	8008f4e <HAL_TIM_Base_Start+0xb6>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a14      	ldr	r2, [pc, #80]	; (8008f9c <HAL_TIM_Base_Start+0x104>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d111      	bne.n	8008f72 <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f003 0307 	and.w	r3, r3, #7
 8008f58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2b06      	cmp	r3, #6
 8008f5e:	d010      	beq.n	8008f82 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f042 0201 	orr.w	r2, r2, #1
 8008f6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f70:	e007      	b.n	8008f82 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f042 0201 	orr.w	r2, r2, #1
 8008f80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	40010000 	.word	0x40010000
 8008f90:	40000400 	.word	0x40000400
 8008f94:	40000800 	.word	0x40000800
 8008f98:	40000c00 	.word	0x40000c00
 8008f9c:	40014000 	.word	0x40014000
 8008fa0:	40014400 	.word	0x40014400
 8008fa4:	40014800 	.word	0x40014800
 8008fa8:	08014b38 	.word	0x08014b38

08008fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a3d      	ldr	r2, [pc, #244]	; (80090b0 <HAL_TIM_Base_Start_IT+0x104>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d027      	beq.n	800900e <HAL_TIM_Base_Start_IT+0x62>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fc6:	d022      	beq.n	800900e <HAL_TIM_Base_Start_IT+0x62>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a39      	ldr	r2, [pc, #228]	; (80090b4 <HAL_TIM_Base_Start_IT+0x108>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d01d      	beq.n	800900e <HAL_TIM_Base_Start_IT+0x62>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a38      	ldr	r2, [pc, #224]	; (80090b8 <HAL_TIM_Base_Start_IT+0x10c>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d018      	beq.n	800900e <HAL_TIM_Base_Start_IT+0x62>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a36      	ldr	r2, [pc, #216]	; (80090bc <HAL_TIM_Base_Start_IT+0x110>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d013      	beq.n	800900e <HAL_TIM_Base_Start_IT+0x62>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a35      	ldr	r2, [pc, #212]	; (80090c0 <HAL_TIM_Base_Start_IT+0x114>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d00e      	beq.n	800900e <HAL_TIM_Base_Start_IT+0x62>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a33      	ldr	r2, [pc, #204]	; (80090c4 <HAL_TIM_Base_Start_IT+0x118>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d009      	beq.n	800900e <HAL_TIM_Base_Start_IT+0x62>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a32      	ldr	r2, [pc, #200]	; (80090c8 <HAL_TIM_Base_Start_IT+0x11c>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d004      	beq.n	800900e <HAL_TIM_Base_Start_IT+0x62>
 8009004:	f240 11cf 	movw	r1, #463	; 0x1cf
 8009008:	4830      	ldr	r0, [pc, #192]	; (80090cc <HAL_TIM_Base_Start_IT+0x120>)
 800900a:	f7f8 febe 	bl	8001d8a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b01      	cmp	r3, #1
 8009018:	d001      	beq.n	800901e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e044      	b.n	80090a8 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2202      	movs	r2, #2
 8009022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68da      	ldr	r2, [r3, #12]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f042 0201 	orr.w	r2, r2, #1
 8009034:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a1d      	ldr	r2, [pc, #116]	; (80090b0 <HAL_TIM_Base_Start_IT+0x104>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d018      	beq.n	8009072 <HAL_TIM_Base_Start_IT+0xc6>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009048:	d013      	beq.n	8009072 <HAL_TIM_Base_Start_IT+0xc6>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a19      	ldr	r2, [pc, #100]	; (80090b4 <HAL_TIM_Base_Start_IT+0x108>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d00e      	beq.n	8009072 <HAL_TIM_Base_Start_IT+0xc6>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a17      	ldr	r2, [pc, #92]	; (80090b8 <HAL_TIM_Base_Start_IT+0x10c>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d009      	beq.n	8009072 <HAL_TIM_Base_Start_IT+0xc6>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a16      	ldr	r2, [pc, #88]	; (80090bc <HAL_TIM_Base_Start_IT+0x110>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d004      	beq.n	8009072 <HAL_TIM_Base_Start_IT+0xc6>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a14      	ldr	r2, [pc, #80]	; (80090c0 <HAL_TIM_Base_Start_IT+0x114>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d111      	bne.n	8009096 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f003 0307 	and.w	r3, r3, #7
 800907c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2b06      	cmp	r3, #6
 8009082:	d010      	beq.n	80090a6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f042 0201 	orr.w	r2, r2, #1
 8009092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009094:	e007      	b.n	80090a6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f042 0201 	orr.w	r2, r2, #1
 80090a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	40010000 	.word	0x40010000
 80090b4:	40000400 	.word	0x40000400
 80090b8:	40000800 	.word	0x40000800
 80090bc:	40000c00 	.word	0x40000c00
 80090c0:	40014000 	.word	0x40014000
 80090c4:	40014400 	.word	0x40014400
 80090c8:	40014800 	.word	0x40014800
 80090cc:	08014b38 	.word	0x08014b38

080090d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d122      	bne.n	800912c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	f003 0302 	and.w	r3, r3, #2
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d11b      	bne.n	800912c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f06f 0202 	mvn.w	r2, #2
 80090fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fbfe 	bl	8009914 <HAL_TIM_IC_CaptureCallback>
 8009118:	e005      	b.n	8009126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fbf0 	bl	8009900 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fc01 	bl	8009928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	f003 0304 	and.w	r3, r3, #4
 8009136:	2b04      	cmp	r3, #4
 8009138:	d122      	bne.n	8009180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b04      	cmp	r3, #4
 8009146:	d11b      	bne.n	8009180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f06f 0204 	mvn.w	r2, #4
 8009150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2202      	movs	r2, #2
 8009156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fbd4 	bl	8009914 <HAL_TIM_IC_CaptureCallback>
 800916c:	e005      	b.n	800917a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fbc6 	bl	8009900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fbd7 	bl	8009928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	f003 0308 	and.w	r3, r3, #8
 800918a:	2b08      	cmp	r3, #8
 800918c:	d122      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f003 0308 	and.w	r3, r3, #8
 8009198:	2b08      	cmp	r3, #8
 800919a:	d11b      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f06f 0208 	mvn.w	r2, #8
 80091a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2204      	movs	r2, #4
 80091aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	f003 0303 	and.w	r3, r3, #3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fbaa 	bl	8009914 <HAL_TIM_IC_CaptureCallback>
 80091c0:	e005      	b.n	80091ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fb9c 	bl	8009900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fbad 	bl	8009928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	f003 0310 	and.w	r3, r3, #16
 80091de:	2b10      	cmp	r3, #16
 80091e0:	d122      	bne.n	8009228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f003 0310 	and.w	r3, r3, #16
 80091ec:	2b10      	cmp	r3, #16
 80091ee:	d11b      	bne.n	8009228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f06f 0210 	mvn.w	r2, #16
 80091f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2208      	movs	r2, #8
 80091fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fb80 	bl	8009914 <HAL_TIM_IC_CaptureCallback>
 8009214:	e005      	b.n	8009222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fb72 	bl	8009900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fb83 	bl	8009928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b01      	cmp	r3, #1
 8009234:	d10e      	bne.n	8009254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f003 0301 	and.w	r3, r3, #1
 8009240:	2b01      	cmp	r3, #1
 8009242:	d107      	bne.n	8009254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f06f 0201 	mvn.w	r2, #1
 800924c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7f8 fd84 	bl	8001d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800925e:	2b80      	cmp	r3, #128	; 0x80
 8009260:	d10e      	bne.n	8009280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800926c:	2b80      	cmp	r3, #128	; 0x80
 800926e:	d107      	bne.n	8009280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fd4a 	bl	8009d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928a:	2b40      	cmp	r3, #64	; 0x40
 800928c:	d10e      	bne.n	80092ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009298:	2b40      	cmp	r3, #64	; 0x40
 800929a:	d107      	bne.n	80092ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fb48 	bl	800993c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	f003 0320 	and.w	r3, r3, #32
 80092b6:	2b20      	cmp	r3, #32
 80092b8:	d10e      	bne.n	80092d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	f003 0320 	and.w	r3, r3, #32
 80092c4:	2b20      	cmp	r3, #32
 80092c6:	d107      	bne.n	80092d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f06f 0220 	mvn.w	r2, #32
 80092d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fd14 	bl	8009d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092d8:	bf00      	nop
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d101      	bne.n	80092fc <HAL_TIM_ConfigClockSource+0x1c>
 80092f8:	2302      	movs	r3, #2
 80092fa:	e2f0      	b.n	80098de <HAL_TIM_ConfigClockSource+0x5fe>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009314:	d029      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x8a>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b70      	cmp	r3, #112	; 0x70
 800931c:	d025      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x8a>
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009326:	d020      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x8a>
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b40      	cmp	r3, #64	; 0x40
 800932e:	d01c      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x8a>
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b50      	cmp	r3, #80	; 0x50
 8009336:	d018      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x8a>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b60      	cmp	r3, #96	; 0x60
 800933e:	d014      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x8a>
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d010      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x8a>
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b10      	cmp	r3, #16
 800934e:	d00c      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x8a>
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b20      	cmp	r3, #32
 8009356:	d008      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x8a>
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b30      	cmp	r3, #48	; 0x30
 800935e:	d004      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x8a>
 8009360:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8009364:	487c      	ldr	r0, [pc, #496]	; (8009558 <HAL_TIM_ConfigClockSource+0x278>)
 8009366:	f7f8 fd10 	bl	8001d8a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009378:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009380:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009392:	f000 80f1 	beq.w	8009578 <HAL_TIM_ConfigClockSource+0x298>
 8009396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800939a:	f200 8293 	bhi.w	80098c4 <HAL_TIM_ConfigClockSource+0x5e4>
 800939e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093a2:	d02d      	beq.n	8009400 <HAL_TIM_ConfigClockSource+0x120>
 80093a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093a8:	f200 828c 	bhi.w	80098c4 <HAL_TIM_ConfigClockSource+0x5e4>
 80093ac:	2b70      	cmp	r3, #112	; 0x70
 80093ae:	d05d      	beq.n	800946c <HAL_TIM_ConfigClockSource+0x18c>
 80093b0:	2b70      	cmp	r3, #112	; 0x70
 80093b2:	f200 8287 	bhi.w	80098c4 <HAL_TIM_ConfigClockSource+0x5e4>
 80093b6:	2b60      	cmp	r3, #96	; 0x60
 80093b8:	f000 81a0 	beq.w	80096fc <HAL_TIM_ConfigClockSource+0x41c>
 80093bc:	2b60      	cmp	r3, #96	; 0x60
 80093be:	f200 8281 	bhi.w	80098c4 <HAL_TIM_ConfigClockSource+0x5e4>
 80093c2:	2b50      	cmp	r3, #80	; 0x50
 80093c4:	f000 8144 	beq.w	8009650 <HAL_TIM_ConfigClockSource+0x370>
 80093c8:	2b50      	cmp	r3, #80	; 0x50
 80093ca:	f200 827b 	bhi.w	80098c4 <HAL_TIM_ConfigClockSource+0x5e4>
 80093ce:	2b40      	cmp	r3, #64	; 0x40
 80093d0:	f000 81f6 	beq.w	80097c0 <HAL_TIM_ConfigClockSource+0x4e0>
 80093d4:	2b40      	cmp	r3, #64	; 0x40
 80093d6:	f200 8275 	bhi.w	80098c4 <HAL_TIM_ConfigClockSource+0x5e4>
 80093da:	2b30      	cmp	r3, #48	; 0x30
 80093dc:	f000 8246 	beq.w	800986c <HAL_TIM_ConfigClockSource+0x58c>
 80093e0:	2b30      	cmp	r3, #48	; 0x30
 80093e2:	f200 826f 	bhi.w	80098c4 <HAL_TIM_ConfigClockSource+0x5e4>
 80093e6:	2b20      	cmp	r3, #32
 80093e8:	f000 8240 	beq.w	800986c <HAL_TIM_ConfigClockSource+0x58c>
 80093ec:	2b20      	cmp	r3, #32
 80093ee:	f200 8269 	bhi.w	80098c4 <HAL_TIM_ConfigClockSource+0x5e4>
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 823a 	beq.w	800986c <HAL_TIM_ConfigClockSource+0x58c>
 80093f8:	2b10      	cmp	r3, #16
 80093fa:	f000 8237 	beq.w	800986c <HAL_TIM_ConfigClockSource+0x58c>
 80093fe:	e261      	b.n	80098c4 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a55      	ldr	r2, [pc, #340]	; (800955c <HAL_TIM_ConfigClockSource+0x27c>)
 8009406:	4293      	cmp	r3, r2
 8009408:	f000 825f 	beq.w	80098ca <HAL_TIM_ConfigClockSource+0x5ea>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009414:	f000 8259 	beq.w	80098ca <HAL_TIM_ConfigClockSource+0x5ea>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a50      	ldr	r2, [pc, #320]	; (8009560 <HAL_TIM_ConfigClockSource+0x280>)
 800941e:	4293      	cmp	r3, r2
 8009420:	f000 8253 	beq.w	80098ca <HAL_TIM_ConfigClockSource+0x5ea>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a4e      	ldr	r2, [pc, #312]	; (8009564 <HAL_TIM_ConfigClockSource+0x284>)
 800942a:	4293      	cmp	r3, r2
 800942c:	f000 824d 	beq.w	80098ca <HAL_TIM_ConfigClockSource+0x5ea>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a4c      	ldr	r2, [pc, #304]	; (8009568 <HAL_TIM_ConfigClockSource+0x288>)
 8009436:	4293      	cmp	r3, r2
 8009438:	f000 8247 	beq.w	80098ca <HAL_TIM_ConfigClockSource+0x5ea>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a4a      	ldr	r2, [pc, #296]	; (800956c <HAL_TIM_ConfigClockSource+0x28c>)
 8009442:	4293      	cmp	r3, r2
 8009444:	f000 8241 	beq.w	80098ca <HAL_TIM_ConfigClockSource+0x5ea>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a48      	ldr	r2, [pc, #288]	; (8009570 <HAL_TIM_ConfigClockSource+0x290>)
 800944e:	4293      	cmp	r3, r2
 8009450:	f000 823b 	beq.w	80098ca <HAL_TIM_ConfigClockSource+0x5ea>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a46      	ldr	r2, [pc, #280]	; (8009574 <HAL_TIM_ConfigClockSource+0x294>)
 800945a:	4293      	cmp	r3, r2
 800945c:	f000 8235 	beq.w	80098ca <HAL_TIM_ConfigClockSource+0x5ea>
 8009460:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8009464:	483c      	ldr	r0, [pc, #240]	; (8009558 <HAL_TIM_ConfigClockSource+0x278>)
 8009466:	f7f8 fc90 	bl	8001d8a <assert_failed>
      break;
 800946a:	e22e      	b.n	80098ca <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a3a      	ldr	r2, [pc, #232]	; (800955c <HAL_TIM_ConfigClockSource+0x27c>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d01d      	beq.n	80094b2 <HAL_TIM_ConfigClockSource+0x1d2>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800947e:	d018      	beq.n	80094b2 <HAL_TIM_ConfigClockSource+0x1d2>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a36      	ldr	r2, [pc, #216]	; (8009560 <HAL_TIM_ConfigClockSource+0x280>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d013      	beq.n	80094b2 <HAL_TIM_ConfigClockSource+0x1d2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a35      	ldr	r2, [pc, #212]	; (8009564 <HAL_TIM_ConfigClockSource+0x284>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d00e      	beq.n	80094b2 <HAL_TIM_ConfigClockSource+0x1d2>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a33      	ldr	r2, [pc, #204]	; (8009568 <HAL_TIM_ConfigClockSource+0x288>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d009      	beq.n	80094b2 <HAL_TIM_ConfigClockSource+0x1d2>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a32      	ldr	r2, [pc, #200]	; (800956c <HAL_TIM_ConfigClockSource+0x28c>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d004      	beq.n	80094b2 <HAL_TIM_ConfigClockSource+0x1d2>
 80094a8:	f241 41ca 	movw	r1, #5322	; 0x14ca
 80094ac:	482a      	ldr	r0, [pc, #168]	; (8009558 <HAL_TIM_ConfigClockSource+0x278>)
 80094ae:	f7f8 fc6c 	bl	8001d8a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d013      	beq.n	80094e2 <HAL_TIM_ConfigClockSource+0x202>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094c2:	d00e      	beq.n	80094e2 <HAL_TIM_ConfigClockSource+0x202>
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094cc:	d009      	beq.n	80094e2 <HAL_TIM_ConfigClockSource+0x202>
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094d6:	d004      	beq.n	80094e2 <HAL_TIM_ConfigClockSource+0x202>
 80094d8:	f241 41cd 	movw	r1, #5325	; 0x14cd
 80094dc:	481e      	ldr	r0, [pc, #120]	; (8009558 <HAL_TIM_ConfigClockSource+0x278>)
 80094de:	f7f8 fc54 	bl	8001d8a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094ea:	d014      	beq.n	8009516 <HAL_TIM_ConfigClockSource+0x236>
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d010      	beq.n	8009516 <HAL_TIM_ConfigClockSource+0x236>
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00c      	beq.n	8009516 <HAL_TIM_ConfigClockSource+0x236>
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	2b02      	cmp	r3, #2
 8009502:	d008      	beq.n	8009516 <HAL_TIM_ConfigClockSource+0x236>
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	2b0a      	cmp	r3, #10
 800950a:	d004      	beq.n	8009516 <HAL_TIM_ConfigClockSource+0x236>
 800950c:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8009510:	4811      	ldr	r0, [pc, #68]	; (8009558 <HAL_TIM_ConfigClockSource+0x278>)
 8009512:	f7f8 fc3a 	bl	8001d8a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	2b0f      	cmp	r3, #15
 800951c:	d904      	bls.n	8009528 <HAL_TIM_ConfigClockSource+0x248>
 800951e:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8009522:	480d      	ldr	r0, [pc, #52]	; (8009558 <HAL_TIM_ConfigClockSource+0x278>)
 8009524:	f7f8 fc31 	bl	8001d8a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	6899      	ldr	r1, [r3, #8]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	685a      	ldr	r2, [r3, #4]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f000 fb04 	bl	8009b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800954a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	609a      	str	r2, [r3, #8]
      break;
 8009554:	e1ba      	b.n	80098cc <HAL_TIM_ConfigClockSource+0x5ec>
 8009556:	bf00      	nop
 8009558:	08014b38 	.word	0x08014b38
 800955c:	40010000 	.word	0x40010000
 8009560:	40000400 	.word	0x40000400
 8009564:	40000800 	.word	0x40000800
 8009568:	40000c00 	.word	0x40000c00
 800956c:	40014000 	.word	0x40014000
 8009570:	40014400 	.word	0x40014400
 8009574:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a8a      	ldr	r2, [pc, #552]	; (80097a8 <HAL_TIM_ConfigClockSource+0x4c8>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d018      	beq.n	80095b4 <HAL_TIM_ConfigClockSource+0x2d4>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800958a:	d013      	beq.n	80095b4 <HAL_TIM_ConfigClockSource+0x2d4>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a86      	ldr	r2, [pc, #536]	; (80097ac <HAL_TIM_ConfigClockSource+0x4cc>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d00e      	beq.n	80095b4 <HAL_TIM_ConfigClockSource+0x2d4>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a85      	ldr	r2, [pc, #532]	; (80097b0 <HAL_TIM_ConfigClockSource+0x4d0>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d009      	beq.n	80095b4 <HAL_TIM_ConfigClockSource+0x2d4>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a83      	ldr	r2, [pc, #524]	; (80097b4 <HAL_TIM_ConfigClockSource+0x4d4>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d004      	beq.n	80095b4 <HAL_TIM_ConfigClockSource+0x2d4>
 80095aa:	f241 41e2 	movw	r1, #5346	; 0x14e2
 80095ae:	4882      	ldr	r0, [pc, #520]	; (80097b8 <HAL_TIM_ConfigClockSource+0x4d8>)
 80095b0:	f7f8 fbeb 	bl	8001d8a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d013      	beq.n	80095e4 <HAL_TIM_ConfigClockSource+0x304>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095c4:	d00e      	beq.n	80095e4 <HAL_TIM_ConfigClockSource+0x304>
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095ce:	d009      	beq.n	80095e4 <HAL_TIM_ConfigClockSource+0x304>
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80095d8:	d004      	beq.n	80095e4 <HAL_TIM_ConfigClockSource+0x304>
 80095da:	f241 41e5 	movw	r1, #5349	; 0x14e5
 80095de:	4876      	ldr	r0, [pc, #472]	; (80097b8 <HAL_TIM_ConfigClockSource+0x4d8>)
 80095e0:	f7f8 fbd3 	bl	8001d8a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ec:	d014      	beq.n	8009618 <HAL_TIM_ConfigClockSource+0x338>
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d010      	beq.n	8009618 <HAL_TIM_ConfigClockSource+0x338>
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00c      	beq.n	8009618 <HAL_TIM_ConfigClockSource+0x338>
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	2b02      	cmp	r3, #2
 8009604:	d008      	beq.n	8009618 <HAL_TIM_ConfigClockSource+0x338>
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	2b0a      	cmp	r3, #10
 800960c:	d004      	beq.n	8009618 <HAL_TIM_ConfigClockSource+0x338>
 800960e:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8009612:	4869      	ldr	r0, [pc, #420]	; (80097b8 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009614:	f7f8 fbb9 	bl	8001d8a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	2b0f      	cmp	r3, #15
 800961e:	d904      	bls.n	800962a <HAL_TIM_ConfigClockSource+0x34a>
 8009620:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8009624:	4864      	ldr	r0, [pc, #400]	; (80097b8 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009626:	f7f8 fbb0 	bl	8001d8a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6818      	ldr	r0, [r3, #0]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	6899      	ldr	r1, [r3, #8]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	685a      	ldr	r2, [r3, #4]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	f000 fa83 	bl	8009b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689a      	ldr	r2, [r3, #8]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800964c:	609a      	str	r2, [r3, #8]
      break;
 800964e:	e13d      	b.n	80098cc <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a54      	ldr	r2, [pc, #336]	; (80097a8 <HAL_TIM_ConfigClockSource+0x4c8>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d01d      	beq.n	8009696 <HAL_TIM_ConfigClockSource+0x3b6>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009662:	d018      	beq.n	8009696 <HAL_TIM_ConfigClockSource+0x3b6>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a50      	ldr	r2, [pc, #320]	; (80097ac <HAL_TIM_ConfigClockSource+0x4cc>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d013      	beq.n	8009696 <HAL_TIM_ConfigClockSource+0x3b6>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a4f      	ldr	r2, [pc, #316]	; (80097b0 <HAL_TIM_ConfigClockSource+0x4d0>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d00e      	beq.n	8009696 <HAL_TIM_ConfigClockSource+0x3b6>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a4d      	ldr	r2, [pc, #308]	; (80097b4 <HAL_TIM_ConfigClockSource+0x4d4>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d009      	beq.n	8009696 <HAL_TIM_ConfigClockSource+0x3b6>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a4d      	ldr	r2, [pc, #308]	; (80097bc <HAL_TIM_ConfigClockSource+0x4dc>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d004      	beq.n	8009696 <HAL_TIM_ConfigClockSource+0x3b6>
 800968c:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8009690:	4849      	ldr	r0, [pc, #292]	; (80097b8 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009692:	f7f8 fb7a 	bl	8001d8a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800969e:	d014      	beq.n	80096ca <HAL_TIM_ConfigClockSource+0x3ea>
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d010      	beq.n	80096ca <HAL_TIM_ConfigClockSource+0x3ea>
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00c      	beq.n	80096ca <HAL_TIM_ConfigClockSource+0x3ea>
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d008      	beq.n	80096ca <HAL_TIM_ConfigClockSource+0x3ea>
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	2b0a      	cmp	r3, #10
 80096be:	d004      	beq.n	80096ca <HAL_TIM_ConfigClockSource+0x3ea>
 80096c0:	f241 41f9 	movw	r1, #5369	; 0x14f9
 80096c4:	483c      	ldr	r0, [pc, #240]	; (80097b8 <HAL_TIM_ConfigClockSource+0x4d8>)
 80096c6:	f7f8 fb60 	bl	8001d8a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	2b0f      	cmp	r3, #15
 80096d0:	d904      	bls.n	80096dc <HAL_TIM_ConfigClockSource+0x3fc>
 80096d2:	f241 41fa 	movw	r1, #5370	; 0x14fa
 80096d6:	4838      	ldr	r0, [pc, #224]	; (80097b8 <HAL_TIM_ConfigClockSource+0x4d8>)
 80096d8:	f7f8 fb57 	bl	8001d8a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6818      	ldr	r0, [r3, #0]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	6859      	ldr	r1, [r3, #4]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	461a      	mov	r2, r3
 80096ea:	f000 f9b1 	bl	8009a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2150      	movs	r1, #80	; 0x50
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 fa0a 	bl	8009b0e <TIM_ITRx_SetConfig>
      break;
 80096fa:	e0e7      	b.n	80098cc <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a29      	ldr	r2, [pc, #164]	; (80097a8 <HAL_TIM_ConfigClockSource+0x4c8>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d01d      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0x462>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800970e:	d018      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0x462>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a25      	ldr	r2, [pc, #148]	; (80097ac <HAL_TIM_ConfigClockSource+0x4cc>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d013      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0x462>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a24      	ldr	r2, [pc, #144]	; (80097b0 <HAL_TIM_ConfigClockSource+0x4d0>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d00e      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0x462>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a22      	ldr	r2, [pc, #136]	; (80097b4 <HAL_TIM_ConfigClockSource+0x4d4>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d009      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0x462>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a22      	ldr	r2, [pc, #136]	; (80097bc <HAL_TIM_ConfigClockSource+0x4dc>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d004      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0x462>
 8009738:	f241 5106 	movw	r1, #5382	; 0x1506
 800973c:	481e      	ldr	r0, [pc, #120]	; (80097b8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800973e:	f7f8 fb24 	bl	8001d8a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800974a:	d014      	beq.n	8009776 <HAL_TIM_ConfigClockSource+0x496>
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d010      	beq.n	8009776 <HAL_TIM_ConfigClockSource+0x496>
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00c      	beq.n	8009776 <HAL_TIM_ConfigClockSource+0x496>
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	2b02      	cmp	r3, #2
 8009762:	d008      	beq.n	8009776 <HAL_TIM_ConfigClockSource+0x496>
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	2b0a      	cmp	r3, #10
 800976a:	d004      	beq.n	8009776 <HAL_TIM_ConfigClockSource+0x496>
 800976c:	f241 5109 	movw	r1, #5385	; 0x1509
 8009770:	4811      	ldr	r0, [pc, #68]	; (80097b8 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009772:	f7f8 fb0a 	bl	8001d8a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	2b0f      	cmp	r3, #15
 800977c:	d904      	bls.n	8009788 <HAL_TIM_ConfigClockSource+0x4a8>
 800977e:	f241 510a 	movw	r1, #5386	; 0x150a
 8009782:	480d      	ldr	r0, [pc, #52]	; (80097b8 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009784:	f7f8 fb01 	bl	8001d8a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	6859      	ldr	r1, [r3, #4]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	461a      	mov	r2, r3
 8009796:	f000 f98a 	bl	8009aae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2160      	movs	r1, #96	; 0x60
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 f9b4 	bl	8009b0e <TIM_ITRx_SetConfig>
      break;
 80097a6:	e091      	b.n	80098cc <HAL_TIM_ConfigClockSource+0x5ec>
 80097a8:	40010000 	.word	0x40010000
 80097ac:	40000400 	.word	0x40000400
 80097b0:	40000800 	.word	0x40000800
 80097b4:	40000c00 	.word	0x40000c00
 80097b8:	08014b38 	.word	0x08014b38
 80097bc:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a48      	ldr	r2, [pc, #288]	; (80098e8 <HAL_TIM_ConfigClockSource+0x608>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d01d      	beq.n	8009806 <HAL_TIM_ConfigClockSource+0x526>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097d2:	d018      	beq.n	8009806 <HAL_TIM_ConfigClockSource+0x526>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a44      	ldr	r2, [pc, #272]	; (80098ec <HAL_TIM_ConfigClockSource+0x60c>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d013      	beq.n	8009806 <HAL_TIM_ConfigClockSource+0x526>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a43      	ldr	r2, [pc, #268]	; (80098f0 <HAL_TIM_ConfigClockSource+0x610>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d00e      	beq.n	8009806 <HAL_TIM_ConfigClockSource+0x526>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a41      	ldr	r2, [pc, #260]	; (80098f4 <HAL_TIM_ConfigClockSource+0x614>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d009      	beq.n	8009806 <HAL_TIM_ConfigClockSource+0x526>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a40      	ldr	r2, [pc, #256]	; (80098f8 <HAL_TIM_ConfigClockSource+0x618>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d004      	beq.n	8009806 <HAL_TIM_ConfigClockSource+0x526>
 80097fc:	f241 5116 	movw	r1, #5398	; 0x1516
 8009800:	483e      	ldr	r0, [pc, #248]	; (80098fc <HAL_TIM_ConfigClockSource+0x61c>)
 8009802:	f7f8 fac2 	bl	8001d8a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800980e:	d014      	beq.n	800983a <HAL_TIM_ConfigClockSource+0x55a>
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d010      	beq.n	800983a <HAL_TIM_ConfigClockSource+0x55a>
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00c      	beq.n	800983a <HAL_TIM_ConfigClockSource+0x55a>
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	2b02      	cmp	r3, #2
 8009826:	d008      	beq.n	800983a <HAL_TIM_ConfigClockSource+0x55a>
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	2b0a      	cmp	r3, #10
 800982e:	d004      	beq.n	800983a <HAL_TIM_ConfigClockSource+0x55a>
 8009830:	f241 5119 	movw	r1, #5401	; 0x1519
 8009834:	4831      	ldr	r0, [pc, #196]	; (80098fc <HAL_TIM_ConfigClockSource+0x61c>)
 8009836:	f7f8 faa8 	bl	8001d8a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	2b0f      	cmp	r3, #15
 8009840:	d904      	bls.n	800984c <HAL_TIM_ConfigClockSource+0x56c>
 8009842:	f241 511a 	movw	r1, #5402	; 0x151a
 8009846:	482d      	ldr	r0, [pc, #180]	; (80098fc <HAL_TIM_ConfigClockSource+0x61c>)
 8009848:	f7f8 fa9f 	bl	8001d8a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	6859      	ldr	r1, [r3, #4]
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	461a      	mov	r2, r3
 800985a:	f000 f8f9 	bl	8009a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2140      	movs	r1, #64	; 0x40
 8009864:	4618      	mov	r0, r3
 8009866:	f000 f952 	bl	8009b0e <TIM_ITRx_SetConfig>
      break;
 800986a:	e02f      	b.n	80098cc <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a1d      	ldr	r2, [pc, #116]	; (80098e8 <HAL_TIM_ConfigClockSource+0x608>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d01d      	beq.n	80098b2 <HAL_TIM_ConfigClockSource+0x5d2>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800987e:	d018      	beq.n	80098b2 <HAL_TIM_ConfigClockSource+0x5d2>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a19      	ldr	r2, [pc, #100]	; (80098ec <HAL_TIM_ConfigClockSource+0x60c>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d013      	beq.n	80098b2 <HAL_TIM_ConfigClockSource+0x5d2>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a18      	ldr	r2, [pc, #96]	; (80098f0 <HAL_TIM_ConfigClockSource+0x610>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d00e      	beq.n	80098b2 <HAL_TIM_ConfigClockSource+0x5d2>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a16      	ldr	r2, [pc, #88]	; (80098f4 <HAL_TIM_ConfigClockSource+0x614>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d009      	beq.n	80098b2 <HAL_TIM_ConfigClockSource+0x5d2>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a15      	ldr	r2, [pc, #84]	; (80098f8 <HAL_TIM_ConfigClockSource+0x618>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d004      	beq.n	80098b2 <HAL_TIM_ConfigClockSource+0x5d2>
 80098a8:	f241 5129 	movw	r1, #5417	; 0x1529
 80098ac:	4813      	ldr	r0, [pc, #76]	; (80098fc <HAL_TIM_ConfigClockSource+0x61c>)
 80098ae:	f7f8 fa6c 	bl	8001d8a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4619      	mov	r1, r3
 80098bc:	4610      	mov	r0, r2
 80098be:	f000 f926 	bl	8009b0e <TIM_ITRx_SetConfig>
      break;
 80098c2:	e003      	b.n	80098cc <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	73fb      	strb	r3, [r7, #15]
      break;
 80098c8:	e000      	b.n	80098cc <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 80098ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	40010000 	.word	0x40010000
 80098ec:	40000400 	.word	0x40000400
 80098f0:	40000800 	.word	0x40000800
 80098f4:	40000c00 	.word	0x40000c00
 80098f8:	40014000 	.word	0x40014000
 80098fc:	08014b38 	.word	0x08014b38

08009900 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a34      	ldr	r2, [pc, #208]	; (8009a34 <TIM_Base_SetConfig+0xe4>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d00f      	beq.n	8009988 <TIM_Base_SetConfig+0x38>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800996e:	d00b      	beq.n	8009988 <TIM_Base_SetConfig+0x38>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a31      	ldr	r2, [pc, #196]	; (8009a38 <TIM_Base_SetConfig+0xe8>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d007      	beq.n	8009988 <TIM_Base_SetConfig+0x38>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a30      	ldr	r2, [pc, #192]	; (8009a3c <TIM_Base_SetConfig+0xec>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d003      	beq.n	8009988 <TIM_Base_SetConfig+0x38>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a2f      	ldr	r2, [pc, #188]	; (8009a40 <TIM_Base_SetConfig+0xf0>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d108      	bne.n	800999a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800998e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	4313      	orrs	r3, r2
 8009998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a25      	ldr	r2, [pc, #148]	; (8009a34 <TIM_Base_SetConfig+0xe4>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d01b      	beq.n	80099da <TIM_Base_SetConfig+0x8a>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099a8:	d017      	beq.n	80099da <TIM_Base_SetConfig+0x8a>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a22      	ldr	r2, [pc, #136]	; (8009a38 <TIM_Base_SetConfig+0xe8>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d013      	beq.n	80099da <TIM_Base_SetConfig+0x8a>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a21      	ldr	r2, [pc, #132]	; (8009a3c <TIM_Base_SetConfig+0xec>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d00f      	beq.n	80099da <TIM_Base_SetConfig+0x8a>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a20      	ldr	r2, [pc, #128]	; (8009a40 <TIM_Base_SetConfig+0xf0>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d00b      	beq.n	80099da <TIM_Base_SetConfig+0x8a>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a1f      	ldr	r2, [pc, #124]	; (8009a44 <TIM_Base_SetConfig+0xf4>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d007      	beq.n	80099da <TIM_Base_SetConfig+0x8a>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a1e      	ldr	r2, [pc, #120]	; (8009a48 <TIM_Base_SetConfig+0xf8>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d003      	beq.n	80099da <TIM_Base_SetConfig+0x8a>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a1d      	ldr	r2, [pc, #116]	; (8009a4c <TIM_Base_SetConfig+0xfc>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d108      	bne.n	80099ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	695b      	ldr	r3, [r3, #20]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	689a      	ldr	r2, [r3, #8]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a08      	ldr	r2, [pc, #32]	; (8009a34 <TIM_Base_SetConfig+0xe4>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d103      	bne.n	8009a20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	691a      	ldr	r2, [r3, #16]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	615a      	str	r2, [r3, #20]
}
 8009a26:	bf00      	nop
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	40010000 	.word	0x40010000
 8009a38:	40000400 	.word	0x40000400
 8009a3c:	40000800 	.word	0x40000800
 8009a40:	40000c00 	.word	0x40000c00
 8009a44:	40014000 	.word	0x40014000
 8009a48:	40014400 	.word	0x40014400
 8009a4c:	40014800 	.word	0x40014800

08009a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6a1b      	ldr	r3, [r3, #32]
 8009a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	f023 0201 	bic.w	r2, r3, #1
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	011b      	lsls	r3, r3, #4
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f023 030a 	bic.w	r3, r3, #10
 8009a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	621a      	str	r2, [r3, #32]
}
 8009aa2:	bf00      	nop
 8009aa4:	371c      	adds	r7, #28
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b087      	sub	sp, #28
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	60f8      	str	r0, [r7, #12]
 8009ab6:	60b9      	str	r1, [r7, #8]
 8009ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	f023 0210 	bic.w	r2, r3, #16
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	031b      	lsls	r3, r3, #12
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009aea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	011b      	lsls	r3, r3, #4
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	621a      	str	r2, [r3, #32]
}
 8009b02:	bf00      	nop
 8009b04:	371c      	adds	r7, #28
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b085      	sub	sp, #20
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	f043 0307 	orr.w	r3, r3, #7
 8009b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	609a      	str	r2, [r3, #8]
}
 8009b38:	bf00      	nop
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b087      	sub	sp, #28
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
 8009b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	021a      	lsls	r2, r3, #8
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	431a      	orrs	r2, r3
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	609a      	str	r2, [r3, #8]
}
 8009b78:	bf00      	nop
 8009b7a:	371c      	adds	r7, #28
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a55      	ldr	r2, [pc, #340]	; (8009ce8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d018      	beq.n	8009bca <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ba0:	d013      	beq.n	8009bca <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a51      	ldr	r2, [pc, #324]	; (8009cec <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d00e      	beq.n	8009bca <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a4f      	ldr	r2, [pc, #316]	; (8009cf0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d009      	beq.n	8009bca <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a4e      	ldr	r2, [pc, #312]	; (8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d004      	beq.n	8009bca <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009bc0:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8009bc4:	484c      	ldr	r0, [pc, #304]	; (8009cf8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009bc6:	f7f8 f8e0 	bl	8001d8a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d020      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b10      	cmp	r3, #16
 8009bd8:	d01c      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b20      	cmp	r3, #32
 8009be0:	d018      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b30      	cmp	r3, #48	; 0x30
 8009be8:	d014      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b40      	cmp	r3, #64	; 0x40
 8009bf0:	d010      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b50      	cmp	r3, #80	; 0x50
 8009bf8:	d00c      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b60      	cmp	r3, #96	; 0x60
 8009c00:	d008      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b70      	cmp	r3, #112	; 0x70
 8009c08:	d004      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009c0a:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8009c0e:	483a      	ldr	r0, [pc, #232]	; (8009cf8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009c10:	f7f8 f8bb 	bl	8001d8a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	2b80      	cmp	r3, #128	; 0x80
 8009c1a:	d008      	beq.n	8009c2e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d004      	beq.n	8009c2e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8009c24:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8009c28:	4833      	ldr	r0, [pc, #204]	; (8009cf8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009c2a:	f7f8 f8ae 	bl	8001d8a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d101      	bne.n	8009c3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e050      	b.n	8009cde <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a1b      	ldr	r2, [pc, #108]	; (8009ce8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d018      	beq.n	8009cb2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c88:	d013      	beq.n	8009cb2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a17      	ldr	r2, [pc, #92]	; (8009cec <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d00e      	beq.n	8009cb2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a15      	ldr	r2, [pc, #84]	; (8009cf0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d009      	beq.n	8009cb2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a14      	ldr	r2, [pc, #80]	; (8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d004      	beq.n	8009cb2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a13      	ldr	r2, [pc, #76]	; (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d10c      	bne.n	8009ccc <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	40010000 	.word	0x40010000
 8009cec:	40000400 	.word	0x40000400
 8009cf0:	40000800 	.word	0x40000800
 8009cf4:	40000c00 	.word	0x40000c00
 8009cf8:	08014bac 	.word	0x08014bac
 8009cfc:	40014000 	.word	0x40014000

08009d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e0a0      	b.n	8009e7c <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d02c      	beq.n	8009d9c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a4f      	ldr	r2, [pc, #316]	; (8009e84 <HAL_UART_Init+0x15c>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d00e      	beq.n	8009d6a <HAL_UART_Init+0x42>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a4d      	ldr	r2, [pc, #308]	; (8009e88 <HAL_UART_Init+0x160>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d009      	beq.n	8009d6a <HAL_UART_Init+0x42>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a4c      	ldr	r2, [pc, #304]	; (8009e8c <HAL_UART_Init+0x164>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d004      	beq.n	8009d6a <HAL_UART_Init+0x42>
 8009d60:	f240 1173 	movw	r1, #371	; 0x173
 8009d64:	484a      	ldr	r0, [pc, #296]	; (8009e90 <HAL_UART_Init+0x168>)
 8009d66:	f7f8 f810 	bl	8001d8a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d028      	beq.n	8009dc4 <HAL_UART_Init+0x9c>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	699b      	ldr	r3, [r3, #24]
 8009d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d7a:	d023      	beq.n	8009dc4 <HAL_UART_Init+0x9c>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d84:	d01e      	beq.n	8009dc4 <HAL_UART_Init+0x9c>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d8e:	d019      	beq.n	8009dc4 <HAL_UART_Init+0x9c>
 8009d90:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8009d94:	483e      	ldr	r0, [pc, #248]	; (8009e90 <HAL_UART_Init+0x168>)
 8009d96:	f7f7 fff8 	bl	8001d8a <assert_failed>
 8009d9a:	e013      	b.n	8009dc4 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a38      	ldr	r2, [pc, #224]	; (8009e84 <HAL_UART_Init+0x15c>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d00e      	beq.n	8009dc4 <HAL_UART_Init+0x9c>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a37      	ldr	r2, [pc, #220]	; (8009e88 <HAL_UART_Init+0x160>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d009      	beq.n	8009dc4 <HAL_UART_Init+0x9c>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a35      	ldr	r2, [pc, #212]	; (8009e8c <HAL_UART_Init+0x164>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d004      	beq.n	8009dc4 <HAL_UART_Init+0x9c>
 8009dba:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8009dbe:	4834      	ldr	r0, [pc, #208]	; (8009e90 <HAL_UART_Init+0x168>)
 8009dc0:	f7f7 ffe3 	bl	8001d8a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d009      	beq.n	8009de0 <HAL_UART_Init+0xb8>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dd4:	d004      	beq.n	8009de0 <HAL_UART_Init+0xb8>
 8009dd6:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8009dda:	482d      	ldr	r0, [pc, #180]	; (8009e90 <HAL_UART_Init+0x168>)
 8009ddc:	f7f7 ffd5 	bl	8001d8a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	69db      	ldr	r3, [r3, #28]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d009      	beq.n	8009dfc <HAL_UART_Init+0xd4>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	69db      	ldr	r3, [r3, #28]
 8009dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009df0:	d004      	beq.n	8009dfc <HAL_UART_Init+0xd4>
 8009df2:	f240 117b 	movw	r1, #379	; 0x17b
 8009df6:	4826      	ldr	r0, [pc, #152]	; (8009e90 <HAL_UART_Init+0x168>)
 8009df8:	f7f7 ffc7 	bl	8001d8a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d106      	bne.n	8009e16 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f7f8 fb2f 	bl	8002474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2224      	movs	r2, #36	; 0x24
 8009e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68da      	ldr	r2, [r3, #12]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e2c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fde6 	bl	800aa00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	691a      	ldr	r2, [r3, #16]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e42:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	695a      	ldr	r2, [r3, #20]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e52:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68da      	ldr	r2, [r3, #12]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e62:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2220      	movs	r2, #32
 8009e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	40011000 	.word	0x40011000
 8009e88:	40004400 	.word	0x40004400
 8009e8c:	40011400 	.word	0x40011400
 8009e90:	08014c20 	.word	0x08014c20

08009e94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08a      	sub	sp, #40	; 0x28
 8009e98:	af02      	add	r7, sp, #8
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	603b      	str	r3, [r7, #0]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b20      	cmp	r3, #32
 8009eb2:	d17c      	bne.n	8009fae <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d002      	beq.n	8009ec0 <HAL_UART_Transmit+0x2c>
 8009eba:	88fb      	ldrh	r3, [r7, #6]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e075      	b.n	8009fb0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d101      	bne.n	8009ed2 <HAL_UART_Transmit+0x3e>
 8009ece:	2302      	movs	r3, #2
 8009ed0:	e06e      	b.n	8009fb0 <HAL_UART_Transmit+0x11c>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2221      	movs	r2, #33	; 0x21
 8009ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ee8:	f7fa f8d2 	bl	8004090 <HAL_GetTick>
 8009eec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	88fa      	ldrh	r2, [r7, #6]
 8009ef2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	88fa      	ldrh	r2, [r7, #6]
 8009ef8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f02:	d108      	bne.n	8009f16 <HAL_UART_Transmit+0x82>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d104      	bne.n	8009f16 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	61bb      	str	r3, [r7, #24]
 8009f14:	e003      	b.n	8009f1e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009f26:	e02a      	b.n	8009f7e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	2180      	movs	r1, #128	; 0x80
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 fb1e 	bl	800a574 <UART_WaitOnFlagUntilTimeout>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e036      	b.n	8009fb0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10b      	bne.n	8009f60 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	881b      	ldrh	r3, [r3, #0]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f56:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	3302      	adds	r3, #2
 8009f5c:	61bb      	str	r3, [r7, #24]
 8009f5e:	e007      	b.n	8009f70 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	781a      	ldrb	r2, [r3, #0]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	3b01      	subs	r3, #1
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1cf      	bne.n	8009f28 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	2140      	movs	r1, #64	; 0x40
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f000 faee 	bl	800a574 <UART_WaitOnFlagUntilTimeout>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e006      	b.n	8009fb0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2220      	movs	r2, #32
 8009fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	e000      	b.n	8009fb0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009fae:	2302      	movs	r3, #2
  }
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3720      	adds	r7, #32
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b20      	cmp	r3, #32
 8009fd0:	d11d      	bne.n	800a00e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <HAL_UART_Receive_IT+0x26>
 8009fd8:	88fb      	ldrh	r3, [r7, #6]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e016      	b.n	800a010 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d101      	bne.n	8009ff0 <HAL_UART_Receive_IT+0x38>
 8009fec:	2302      	movs	r3, #2
 8009fee:	e00f      	b.n	800a010 <HAL_UART_Receive_IT+0x58>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009ffe:	88fb      	ldrh	r3, [r7, #6]
 800a000:	461a      	mov	r2, r3
 800a002:	68b9      	ldr	r1, [r7, #8]
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f000 fb23 	bl	800a650 <UART_Start_Receive_IT>
 800a00a:	4603      	mov	r3, r0
 800a00c:	e000      	b.n	800a010 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a00e:	2302      	movs	r3, #2
  }
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b0ba      	sub	sp, #232	; 0xe8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a03e:	2300      	movs	r3, #0
 800a040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a044:	2300      	movs	r3, #0
 800a046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a04e:	f003 030f 	and.w	r3, r3, #15
 800a052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10f      	bne.n	800a07e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a062:	f003 0320 	and.w	r3, r3, #32
 800a066:	2b00      	cmp	r3, #0
 800a068:	d009      	beq.n	800a07e <HAL_UART_IRQHandler+0x66>
 800a06a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a06e:	f003 0320 	and.w	r3, r3, #32
 800a072:	2b00      	cmp	r3, #0
 800a074:	d003      	beq.n	800a07e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fc07 	bl	800a88a <UART_Receive_IT>
      return;
 800a07c:	e256      	b.n	800a52c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a07e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a082:	2b00      	cmp	r3, #0
 800a084:	f000 80de 	beq.w	800a244 <HAL_UART_IRQHandler+0x22c>
 800a088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a08c:	f003 0301 	and.w	r3, r3, #1
 800a090:	2b00      	cmp	r3, #0
 800a092:	d106      	bne.n	800a0a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a098:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 80d1 	beq.w	800a244 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a0a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0a6:	f003 0301 	and.w	r3, r3, #1
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00b      	beq.n	800a0c6 <HAL_UART_IRQHandler+0xae>
 800a0ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d005      	beq.n	800a0c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0be:	f043 0201 	orr.w	r2, r3, #1
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ca:	f003 0304 	and.w	r3, r3, #4
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00b      	beq.n	800a0ea <HAL_UART_IRQHandler+0xd2>
 800a0d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0d6:	f003 0301 	and.w	r3, r3, #1
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d005      	beq.n	800a0ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e2:	f043 0202 	orr.w	r2, r3, #2
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a0ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00b      	beq.n	800a10e <HAL_UART_IRQHandler+0xf6>
 800a0f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0fa:	f003 0301 	and.w	r3, r3, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d005      	beq.n	800a10e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a106:	f043 0204 	orr.w	r2, r3, #4
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a112:	f003 0308 	and.w	r3, r3, #8
 800a116:	2b00      	cmp	r3, #0
 800a118:	d011      	beq.n	800a13e <HAL_UART_IRQHandler+0x126>
 800a11a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a11e:	f003 0320 	and.w	r3, r3, #32
 800a122:	2b00      	cmp	r3, #0
 800a124:	d105      	bne.n	800a132 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d005      	beq.n	800a13e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a136:	f043 0208 	orr.w	r2, r3, #8
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a142:	2b00      	cmp	r3, #0
 800a144:	f000 81ed 	beq.w	800a522 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a14c:	f003 0320 	and.w	r3, r3, #32
 800a150:	2b00      	cmp	r3, #0
 800a152:	d008      	beq.n	800a166 <HAL_UART_IRQHandler+0x14e>
 800a154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a158:	f003 0320 	and.w	r3, r3, #32
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fb92 	bl	800a88a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	695b      	ldr	r3, [r3, #20]
 800a16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a170:	2b40      	cmp	r3, #64	; 0x40
 800a172:	bf0c      	ite	eq
 800a174:	2301      	moveq	r3, #1
 800a176:	2300      	movne	r3, #0
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a182:	f003 0308 	and.w	r3, r3, #8
 800a186:	2b00      	cmp	r3, #0
 800a188:	d103      	bne.n	800a192 <HAL_UART_IRQHandler+0x17a>
 800a18a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d04f      	beq.n	800a232 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fa9a 	bl	800a6cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a2:	2b40      	cmp	r3, #64	; 0x40
 800a1a4:	d141      	bne.n	800a22a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3314      	adds	r3, #20
 800a1ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a1b4:	e853 3f00 	ldrex	r3, [r3]
 800a1b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a1bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a1c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3314      	adds	r3, #20
 800a1ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a1d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a1d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a1de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a1e2:	e841 2300 	strex	r3, r2, [r1]
 800a1e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a1ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1d9      	bne.n	800a1a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d013      	beq.n	800a222 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fe:	4a7d      	ldr	r2, [pc, #500]	; (800a3f4 <HAL_UART_IRQHandler+0x3dc>)
 800a200:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a206:	4618      	mov	r0, r3
 800a208:	f7fa f930 	bl	800446c <HAL_DMA_Abort_IT>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d016      	beq.n	800a240 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a21c:	4610      	mov	r0, r2
 800a21e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a220:	e00e      	b.n	800a240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f990 	bl	800a548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a228:	e00a      	b.n	800a240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f98c 	bl	800a548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a230:	e006      	b.n	800a240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f988 	bl	800a548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a23e:	e170      	b.n	800a522 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a240:	bf00      	nop
    return;
 800a242:	e16e      	b.n	800a522 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a248:	2b01      	cmp	r3, #1
 800a24a:	f040 814a 	bne.w	800a4e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a252:	f003 0310 	and.w	r3, r3, #16
 800a256:	2b00      	cmp	r3, #0
 800a258:	f000 8143 	beq.w	800a4e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a25c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a260:	f003 0310 	and.w	r3, r3, #16
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 813c 	beq.w	800a4e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a26a:	2300      	movs	r3, #0
 800a26c:	60bb      	str	r3, [r7, #8]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	60bb      	str	r3, [r7, #8]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	60bb      	str	r3, [r7, #8]
 800a27e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28a:	2b40      	cmp	r3, #64	; 0x40
 800a28c:	f040 80b4 	bne.w	800a3f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a29c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 8140 	beq.w	800a526 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a2aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	f080 8139 	bcs.w	800a526 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a2ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c0:	69db      	ldr	r3, [r3, #28]
 800a2c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2c6:	f000 8088 	beq.w	800a3da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	330c      	adds	r3, #12
 800a2d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2d8:	e853 3f00 	ldrex	r3, [r3]
 800a2dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a2e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a2e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	330c      	adds	r3, #12
 800a2f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a2f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a2fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a302:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a306:	e841 2300 	strex	r3, r2, [r1]
 800a30a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a30e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1d9      	bne.n	800a2ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3314      	adds	r3, #20
 800a31c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a320:	e853 3f00 	ldrex	r3, [r3]
 800a324:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a328:	f023 0301 	bic.w	r3, r3, #1
 800a32c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3314      	adds	r3, #20
 800a336:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a33a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a33e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a342:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a346:	e841 2300 	strex	r3, r2, [r1]
 800a34a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a34c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1e1      	bne.n	800a316 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3314      	adds	r3, #20
 800a358:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a35c:	e853 3f00 	ldrex	r3, [r3]
 800a360:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	3314      	adds	r3, #20
 800a372:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a376:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a378:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a37c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a37e:	e841 2300 	strex	r3, r2, [r1]
 800a382:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1e3      	bne.n	800a352 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2220      	movs	r2, #32
 800a38e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	330c      	adds	r3, #12
 800a39e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3a2:	e853 3f00 	ldrex	r3, [r3]
 800a3a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a3a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3aa:	f023 0310 	bic.w	r3, r3, #16
 800a3ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	330c      	adds	r3, #12
 800a3b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a3bc:	65ba      	str	r2, [r7, #88]	; 0x58
 800a3be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a3c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3c4:	e841 2300 	strex	r3, r2, [r1]
 800a3c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e3      	bne.n	800a398 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7f9 ffd9 	bl	800438c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f8b6 	bl	800a55c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a3f0:	e099      	b.n	800a526 <HAL_UART_IRQHandler+0x50e>
 800a3f2:	bf00      	nop
 800a3f4:	0800a793 	.word	0x0800a793
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a400:	b29b      	uxth	r3, r3
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f000 808b 	beq.w	800a52a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f000 8086 	beq.w	800a52a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	330c      	adds	r3, #12
 800a424:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a428:	e853 3f00 	ldrex	r3, [r3]
 800a42c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a430:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a434:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	330c      	adds	r3, #12
 800a43e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a442:	647a      	str	r2, [r7, #68]	; 0x44
 800a444:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a446:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a448:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a44a:	e841 2300 	strex	r3, r2, [r1]
 800a44e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1e3      	bne.n	800a41e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	3314      	adds	r3, #20
 800a45c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a460:	e853 3f00 	ldrex	r3, [r3]
 800a464:	623b      	str	r3, [r7, #32]
   return(result);
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	f023 0301 	bic.w	r3, r3, #1
 800a46c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3314      	adds	r3, #20
 800a476:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a47a:	633a      	str	r2, [r7, #48]	; 0x30
 800a47c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a482:	e841 2300 	strex	r3, r2, [r1]
 800a486:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1e3      	bne.n	800a456 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2220      	movs	r2, #32
 800a492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	330c      	adds	r3, #12
 800a4a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	e853 3f00 	ldrex	r3, [r3]
 800a4aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f023 0310 	bic.w	r3, r3, #16
 800a4b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	330c      	adds	r3, #12
 800a4bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a4c0:	61fa      	str	r2, [r7, #28]
 800a4c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c4:	69b9      	ldr	r1, [r7, #24]
 800a4c6:	69fa      	ldr	r2, [r7, #28]
 800a4c8:	e841 2300 	strex	r3, r2, [r1]
 800a4cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e3      	bne.n	800a49c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a4d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f83e 	bl	800a55c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a4e0:	e023      	b.n	800a52a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d009      	beq.n	800a502 <HAL_UART_IRQHandler+0x4ea>
 800a4ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f95d 	bl	800a7ba <UART_Transmit_IT>
    return;
 800a500:	e014      	b.n	800a52c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00e      	beq.n	800a52c <HAL_UART_IRQHandler+0x514>
 800a50e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a516:	2b00      	cmp	r3, #0
 800a518:	d008      	beq.n	800a52c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f99d 	bl	800a85a <UART_EndTransmit_IT>
    return;
 800a520:	e004      	b.n	800a52c <HAL_UART_IRQHandler+0x514>
    return;
 800a522:	bf00      	nop
 800a524:	e002      	b.n	800a52c <HAL_UART_IRQHandler+0x514>
      return;
 800a526:	bf00      	nop
 800a528:	e000      	b.n	800a52c <HAL_UART_IRQHandler+0x514>
      return;
 800a52a:	bf00      	nop
  }
}
 800a52c:	37e8      	adds	r7, #232	; 0xe8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop

0800a534 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	460b      	mov	r3, r1
 800a566:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b090      	sub	sp, #64	; 0x40
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	603b      	str	r3, [r7, #0]
 800a580:	4613      	mov	r3, r2
 800a582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a584:	e050      	b.n	800a628 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58c:	d04c      	beq.n	800a628 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a58e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a590:	2b00      	cmp	r3, #0
 800a592:	d007      	beq.n	800a5a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a594:	f7f9 fd7c 	bl	8004090 <HAL_GetTick>
 800a598:	4602      	mov	r2, r0
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d241      	bcs.n	800a628 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	330c      	adds	r3, #12
 800a5aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	e853 3f00 	ldrex	r3, [r3]
 800a5b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	330c      	adds	r3, #12
 800a5c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a5c4:	637a      	str	r2, [r7, #52]	; 0x34
 800a5c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5cc:	e841 2300 	strex	r3, r2, [r1]
 800a5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1e5      	bne.n	800a5a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3314      	adds	r3, #20
 800a5de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	e853 3f00 	ldrex	r3, [r3]
 800a5e6:	613b      	str	r3, [r7, #16]
   return(result);
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	f023 0301 	bic.w	r3, r3, #1
 800a5ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3314      	adds	r3, #20
 800a5f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5f8:	623a      	str	r2, [r7, #32]
 800a5fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fc:	69f9      	ldr	r1, [r7, #28]
 800a5fe:	6a3a      	ldr	r2, [r7, #32]
 800a600:	e841 2300 	strex	r3, r2, [r1]
 800a604:	61bb      	str	r3, [r7, #24]
   return(result);
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1e5      	bne.n	800a5d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2220      	movs	r2, #32
 800a610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2220      	movs	r2, #32
 800a618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a624:	2303      	movs	r3, #3
 800a626:	e00f      	b.n	800a648 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	4013      	ands	r3, r2
 800a632:	68ba      	ldr	r2, [r7, #8]
 800a634:	429a      	cmp	r2, r3
 800a636:	bf0c      	ite	eq
 800a638:	2301      	moveq	r3, #1
 800a63a:	2300      	movne	r3, #0
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	461a      	mov	r2, r3
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	429a      	cmp	r2, r3
 800a644:	d09f      	beq.n	800a586 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3740      	adds	r7, #64	; 0x40
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	4613      	mov	r3, r2
 800a65c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	88fa      	ldrh	r2, [r7, #6]
 800a668:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	88fa      	ldrh	r2, [r7, #6]
 800a66e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2222      	movs	r2, #34	; 0x22
 800a67a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d007      	beq.n	800a69e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68da      	ldr	r2, [r3, #12]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a69c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	695a      	ldr	r2, [r3, #20]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f042 0201 	orr.w	r2, r2, #1
 800a6ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68da      	ldr	r2, [r3, #12]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f042 0220 	orr.w	r2, r2, #32
 800a6bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b095      	sub	sp, #84	; 0x54
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	330c      	adds	r3, #12
 800a6da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6de:	e853 3f00 	ldrex	r3, [r3]
 800a6e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	330c      	adds	r3, #12
 800a6f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6f4:	643a      	str	r2, [r7, #64]	; 0x40
 800a6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a6fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6fc:	e841 2300 	strex	r3, r2, [r1]
 800a700:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1e5      	bne.n	800a6d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	3314      	adds	r3, #20
 800a70e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	e853 3f00 	ldrex	r3, [r3]
 800a716:	61fb      	str	r3, [r7, #28]
   return(result);
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	f023 0301 	bic.w	r3, r3, #1
 800a71e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3314      	adds	r3, #20
 800a726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a728:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a72a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a72e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a730:	e841 2300 	strex	r3, r2, [r1]
 800a734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1e5      	bne.n	800a708 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a740:	2b01      	cmp	r3, #1
 800a742:	d119      	bne.n	800a778 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	330c      	adds	r3, #12
 800a74a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	e853 3f00 	ldrex	r3, [r3]
 800a752:	60bb      	str	r3, [r7, #8]
   return(result);
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	f023 0310 	bic.w	r3, r3, #16
 800a75a:	647b      	str	r3, [r7, #68]	; 0x44
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	330c      	adds	r3, #12
 800a762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a764:	61ba      	str	r2, [r7, #24]
 800a766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a768:	6979      	ldr	r1, [r7, #20]
 800a76a:	69ba      	ldr	r2, [r7, #24]
 800a76c:	e841 2300 	strex	r3, r2, [r1]
 800a770:	613b      	str	r3, [r7, #16]
   return(result);
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1e5      	bne.n	800a744 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2220      	movs	r2, #32
 800a77c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a786:	bf00      	nop
 800a788:	3754      	adds	r7, #84	; 0x54
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr

0800a792 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b084      	sub	sp, #16
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a79e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f7ff fecb 	bl	800a548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7b2:	bf00      	nop
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b085      	sub	sp, #20
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	2b21      	cmp	r3, #33	; 0x21
 800a7cc:	d13e      	bne.n	800a84c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7d6:	d114      	bne.n	800a802 <UART_Transmit_IT+0x48>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d110      	bne.n	800a802 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a1b      	ldr	r3, [r3, #32]
 800a7e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	881b      	ldrh	r3, [r3, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a1b      	ldr	r3, [r3, #32]
 800a7fa:	1c9a      	adds	r2, r3, #2
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	621a      	str	r2, [r3, #32]
 800a800:	e008      	b.n	800a814 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a1b      	ldr	r3, [r3, #32]
 800a806:	1c59      	adds	r1, r3, #1
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	6211      	str	r1, [r2, #32]
 800a80c:	781a      	ldrb	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a818:	b29b      	uxth	r3, r3
 800a81a:	3b01      	subs	r3, #1
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	4619      	mov	r1, r3
 800a822:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10f      	bne.n	800a848 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68da      	ldr	r2, [r3, #12]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a836:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68da      	ldr	r2, [r3, #12]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a846:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	e000      	b.n	800a84e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a84c:	2302      	movs	r3, #2
  }
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b082      	sub	sp, #8
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68da      	ldr	r2, [r3, #12]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a870:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2220      	movs	r2, #32
 800a876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7ff fe5a 	bl	800a534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b08c      	sub	sp, #48	; 0x30
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b22      	cmp	r3, #34	; 0x22
 800a89c:	f040 80ab 	bne.w	800a9f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8a8:	d117      	bne.n	800a8da <UART_Receive_IT+0x50>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d113      	bne.n	800a8da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d2:	1c9a      	adds	r2, r3, #2
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	629a      	str	r2, [r3, #40]	; 0x28
 800a8d8:	e026      	b.n	800a928 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8ec:	d007      	beq.n	800a8fe <UART_Receive_IT+0x74>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10a      	bne.n	800a90c <UART_Receive_IT+0x82>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d106      	bne.n	800a90c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	b2da      	uxtb	r2, r3
 800a906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a908:	701a      	strb	r2, [r3, #0]
 800a90a:	e008      	b.n	800a91e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	b2db      	uxtb	r3, r3
 800a914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a918:	b2da      	uxtb	r2, r3
 800a91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a922:	1c5a      	adds	r2, r3, #1
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	3b01      	subs	r3, #1
 800a930:	b29b      	uxth	r3, r3
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	4619      	mov	r1, r3
 800a936:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d15a      	bne.n	800a9f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68da      	ldr	r2, [r3, #12]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f022 0220 	bic.w	r2, r2, #32
 800a94a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68da      	ldr	r2, [r3, #12]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a95a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	695a      	ldr	r2, [r3, #20]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f022 0201 	bic.w	r2, r2, #1
 800a96a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2220      	movs	r2, #32
 800a970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d135      	bne.n	800a9e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	330c      	adds	r3, #12
 800a988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	e853 3f00 	ldrex	r3, [r3]
 800a990:	613b      	str	r3, [r7, #16]
   return(result);
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	f023 0310 	bic.w	r3, r3, #16
 800a998:	627b      	str	r3, [r7, #36]	; 0x24
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	330c      	adds	r3, #12
 800a9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9a2:	623a      	str	r2, [r7, #32]
 800a9a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a6:	69f9      	ldr	r1, [r7, #28]
 800a9a8:	6a3a      	ldr	r2, [r7, #32]
 800a9aa:	e841 2300 	strex	r3, r2, [r1]
 800a9ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1e5      	bne.n	800a982 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 0310 	and.w	r3, r3, #16
 800a9c0:	2b10      	cmp	r3, #16
 800a9c2:	d10a      	bne.n	800a9da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	60fb      	str	r3, [r7, #12]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f7ff fdbb 	bl	800a55c <HAL_UARTEx_RxEventCallback>
 800a9e6:	e002      	b.n	800a9ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7f6 ff87 	bl	80018fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	e002      	b.n	800a9f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	e000      	b.n	800a9f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a9f6:	2302      	movs	r3, #2
  }
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3730      	adds	r7, #48	; 0x30
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa04:	b0c0      	sub	sp, #256	; 0x100
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800aa0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa10:	685a      	ldr	r2, [r3, #4]
 800aa12:	4bcf      	ldr	r3, [pc, #828]	; (800ad50 <UART_SetConfig+0x350>)
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d904      	bls.n	800aa22 <UART_SetConfig+0x22>
 800aa18:	f640 6161 	movw	r1, #3681	; 0xe61
 800aa1c:	48cd      	ldr	r0, [pc, #820]	; (800ad54 <UART_SetConfig+0x354>)
 800aa1e:	f7f7 f9b4 	bl	8001d8a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800aa22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00a      	beq.n	800aa42 <UART_SetConfig+0x42>
 800aa2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa36:	d004      	beq.n	800aa42 <UART_SetConfig+0x42>
 800aa38:	f640 6162 	movw	r1, #3682	; 0xe62
 800aa3c:	48c5      	ldr	r0, [pc, #788]	; (800ad54 <UART_SetConfig+0x354>)
 800aa3e:	f7f7 f9a4 	bl	8001d8a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800aa42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d010      	beq.n	800aa6e <UART_SetConfig+0x6e>
 800aa4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa56:	d00a      	beq.n	800aa6e <UART_SetConfig+0x6e>
 800aa58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800aa62:	d004      	beq.n	800aa6e <UART_SetConfig+0x6e>
 800aa64:	f640 6163 	movw	r1, #3683	; 0xe63
 800aa68:	48ba      	ldr	r0, [pc, #744]	; (800ad54 <UART_SetConfig+0x354>)
 800aa6a:	f7f7 f98e 	bl	8001d8a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800aa6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa72:	695a      	ldr	r2, [r3, #20]
 800aa74:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800aa78:	4013      	ands	r3, r2
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d104      	bne.n	800aa88 <UART_SetConfig+0x88>
 800aa7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa82:	695b      	ldr	r3, [r3, #20]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d104      	bne.n	800aa92 <UART_SetConfig+0x92>
 800aa88:	f640 6164 	movw	r1, #3684	; 0xe64
 800aa8c:	48b1      	ldr	r0, [pc, #708]	; (800ad54 <UART_SetConfig+0x354>)
 800aa8e:	f7f7 f97c 	bl	8001d8a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aa9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaa2:	68d9      	ldr	r1, [r3, #12]
 800aaa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	ea40 0301 	orr.w	r3, r0, r1
 800aaae:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aab4:	689a      	ldr	r2, [r3, #8]
 800aab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	431a      	orrs	r2, r3
 800aabe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aac2:	695b      	ldr	r3, [r3, #20]
 800aac4:	431a      	orrs	r2, r3
 800aac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaca:	69db      	ldr	r3, [r3, #28]
 800aacc:	4313      	orrs	r3, r2
 800aace:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aade:	f021 010c 	bic.w	r1, r1, #12
 800aae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aaec:	430b      	orrs	r3, r1
 800aaee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aaf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	695b      	ldr	r3, [r3, #20]
 800aaf8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aafc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab00:	6999      	ldr	r1, [r3, #24]
 800ab02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	ea40 0301 	orr.w	r3, r0, r1
 800ab0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	4b90      	ldr	r3, [pc, #576]	; (800ad58 <UART_SetConfig+0x358>)
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d005      	beq.n	800ab26 <UART_SetConfig+0x126>
 800ab1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	4b8e      	ldr	r3, [pc, #568]	; (800ad5c <UART_SetConfig+0x35c>)
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d104      	bne.n	800ab30 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab26:	f7fd fb97 	bl	8008258 <HAL_RCC_GetPCLK2Freq>
 800ab2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ab2e:	e003      	b.n	800ab38 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab30:	f7fd fb7e 	bl	8008230 <HAL_RCC_GetPCLK1Freq>
 800ab34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab42:	f040 810f 	bne.w	800ad64 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab50:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ab54:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ab58:	4622      	mov	r2, r4
 800ab5a:	462b      	mov	r3, r5
 800ab5c:	1891      	adds	r1, r2, r2
 800ab5e:	65b9      	str	r1, [r7, #88]	; 0x58
 800ab60:	415b      	adcs	r3, r3
 800ab62:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ab68:	4621      	mov	r1, r4
 800ab6a:	eb12 0801 	adds.w	r8, r2, r1
 800ab6e:	4629      	mov	r1, r5
 800ab70:	eb43 0901 	adc.w	r9, r3, r1
 800ab74:	f04f 0200 	mov.w	r2, #0
 800ab78:	f04f 0300 	mov.w	r3, #0
 800ab7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ab88:	4690      	mov	r8, r2
 800ab8a:	4699      	mov	r9, r3
 800ab8c:	4623      	mov	r3, r4
 800ab8e:	eb18 0303 	adds.w	r3, r8, r3
 800ab92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab96:	462b      	mov	r3, r5
 800ab98:	eb49 0303 	adc.w	r3, r9, r3
 800ab9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800abac:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800abb0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800abb4:	460b      	mov	r3, r1
 800abb6:	18db      	adds	r3, r3, r3
 800abb8:	653b      	str	r3, [r7, #80]	; 0x50
 800abba:	4613      	mov	r3, r2
 800abbc:	eb42 0303 	adc.w	r3, r2, r3
 800abc0:	657b      	str	r3, [r7, #84]	; 0x54
 800abc2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800abc6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800abca:	f7f6 f865 	bl	8000c98 <__aeabi_uldivmod>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	4b63      	ldr	r3, [pc, #396]	; (800ad60 <UART_SetConfig+0x360>)
 800abd4:	fba3 2302 	umull	r2, r3, r3, r2
 800abd8:	095b      	lsrs	r3, r3, #5
 800abda:	011c      	lsls	r4, r3, #4
 800abdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abe0:	2200      	movs	r2, #0
 800abe2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800abe6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800abea:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800abee:	4642      	mov	r2, r8
 800abf0:	464b      	mov	r3, r9
 800abf2:	1891      	adds	r1, r2, r2
 800abf4:	64b9      	str	r1, [r7, #72]	; 0x48
 800abf6:	415b      	adcs	r3, r3
 800abf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abfa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800abfe:	4641      	mov	r1, r8
 800ac00:	eb12 0a01 	adds.w	sl, r2, r1
 800ac04:	4649      	mov	r1, r9
 800ac06:	eb43 0b01 	adc.w	fp, r3, r1
 800ac0a:	f04f 0200 	mov.w	r2, #0
 800ac0e:	f04f 0300 	mov.w	r3, #0
 800ac12:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ac16:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ac1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac1e:	4692      	mov	sl, r2
 800ac20:	469b      	mov	fp, r3
 800ac22:	4643      	mov	r3, r8
 800ac24:	eb1a 0303 	adds.w	r3, sl, r3
 800ac28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac2c:	464b      	mov	r3, r9
 800ac2e:	eb4b 0303 	adc.w	r3, fp, r3
 800ac32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac42:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ac46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	18db      	adds	r3, r3, r3
 800ac4e:	643b      	str	r3, [r7, #64]	; 0x40
 800ac50:	4613      	mov	r3, r2
 800ac52:	eb42 0303 	adc.w	r3, r2, r3
 800ac56:	647b      	str	r3, [r7, #68]	; 0x44
 800ac58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ac5c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ac60:	f7f6 f81a 	bl	8000c98 <__aeabi_uldivmod>
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	4611      	mov	r1, r2
 800ac6a:	4b3d      	ldr	r3, [pc, #244]	; (800ad60 <UART_SetConfig+0x360>)
 800ac6c:	fba3 2301 	umull	r2, r3, r3, r1
 800ac70:	095b      	lsrs	r3, r3, #5
 800ac72:	2264      	movs	r2, #100	; 0x64
 800ac74:	fb02 f303 	mul.w	r3, r2, r3
 800ac78:	1acb      	subs	r3, r1, r3
 800ac7a:	00db      	lsls	r3, r3, #3
 800ac7c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ac80:	4b37      	ldr	r3, [pc, #220]	; (800ad60 <UART_SetConfig+0x360>)
 800ac82:	fba3 2302 	umull	r2, r3, r3, r2
 800ac86:	095b      	lsrs	r3, r3, #5
 800ac88:	005b      	lsls	r3, r3, #1
 800ac8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ac8e:	441c      	add	r4, r3
 800ac90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac94:	2200      	movs	r2, #0
 800ac96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac9a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ac9e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aca2:	4642      	mov	r2, r8
 800aca4:	464b      	mov	r3, r9
 800aca6:	1891      	adds	r1, r2, r2
 800aca8:	63b9      	str	r1, [r7, #56]	; 0x38
 800acaa:	415b      	adcs	r3, r3
 800acac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800acb2:	4641      	mov	r1, r8
 800acb4:	1851      	adds	r1, r2, r1
 800acb6:	6339      	str	r1, [r7, #48]	; 0x30
 800acb8:	4649      	mov	r1, r9
 800acba:	414b      	adcs	r3, r1
 800acbc:	637b      	str	r3, [r7, #52]	; 0x34
 800acbe:	f04f 0200 	mov.w	r2, #0
 800acc2:	f04f 0300 	mov.w	r3, #0
 800acc6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800acca:	4659      	mov	r1, fp
 800accc:	00cb      	lsls	r3, r1, #3
 800acce:	4651      	mov	r1, sl
 800acd0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800acd4:	4651      	mov	r1, sl
 800acd6:	00ca      	lsls	r2, r1, #3
 800acd8:	4610      	mov	r0, r2
 800acda:	4619      	mov	r1, r3
 800acdc:	4603      	mov	r3, r0
 800acde:	4642      	mov	r2, r8
 800ace0:	189b      	adds	r3, r3, r2
 800ace2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ace6:	464b      	mov	r3, r9
 800ace8:	460a      	mov	r2, r1
 800acea:	eb42 0303 	adc.w	r3, r2, r3
 800acee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800acf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800acfe:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ad02:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ad06:	460b      	mov	r3, r1
 800ad08:	18db      	adds	r3, r3, r3
 800ad0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	eb42 0303 	adc.w	r3, r2, r3
 800ad12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ad18:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ad1c:	f7f5 ffbc 	bl	8000c98 <__aeabi_uldivmod>
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	4b0e      	ldr	r3, [pc, #56]	; (800ad60 <UART_SetConfig+0x360>)
 800ad26:	fba3 1302 	umull	r1, r3, r3, r2
 800ad2a:	095b      	lsrs	r3, r3, #5
 800ad2c:	2164      	movs	r1, #100	; 0x64
 800ad2e:	fb01 f303 	mul.w	r3, r1, r3
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	3332      	adds	r3, #50	; 0x32
 800ad38:	4a09      	ldr	r2, [pc, #36]	; (800ad60 <UART_SetConfig+0x360>)
 800ad3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad3e:	095b      	lsrs	r3, r3, #5
 800ad40:	f003 0207 	and.w	r2, r3, #7
 800ad44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4422      	add	r2, r4
 800ad4c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ad4e:	e108      	b.n	800af62 <UART_SetConfig+0x562>
 800ad50:	00a037a0 	.word	0x00a037a0
 800ad54:	08014c20 	.word	0x08014c20
 800ad58:	40011000 	.word	0x40011000
 800ad5c:	40011400 	.word	0x40011400
 800ad60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ad72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ad76:	4642      	mov	r2, r8
 800ad78:	464b      	mov	r3, r9
 800ad7a:	1891      	adds	r1, r2, r2
 800ad7c:	6239      	str	r1, [r7, #32]
 800ad7e:	415b      	adcs	r3, r3
 800ad80:	627b      	str	r3, [r7, #36]	; 0x24
 800ad82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad86:	4641      	mov	r1, r8
 800ad88:	1854      	adds	r4, r2, r1
 800ad8a:	4649      	mov	r1, r9
 800ad8c:	eb43 0501 	adc.w	r5, r3, r1
 800ad90:	f04f 0200 	mov.w	r2, #0
 800ad94:	f04f 0300 	mov.w	r3, #0
 800ad98:	00eb      	lsls	r3, r5, #3
 800ad9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad9e:	00e2      	lsls	r2, r4, #3
 800ada0:	4614      	mov	r4, r2
 800ada2:	461d      	mov	r5, r3
 800ada4:	4643      	mov	r3, r8
 800ada6:	18e3      	adds	r3, r4, r3
 800ada8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800adac:	464b      	mov	r3, r9
 800adae:	eb45 0303 	adc.w	r3, r5, r3
 800adb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800adb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800adc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800adc6:	f04f 0200 	mov.w	r2, #0
 800adca:	f04f 0300 	mov.w	r3, #0
 800adce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800add2:	4629      	mov	r1, r5
 800add4:	008b      	lsls	r3, r1, #2
 800add6:	4621      	mov	r1, r4
 800add8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800addc:	4621      	mov	r1, r4
 800adde:	008a      	lsls	r2, r1, #2
 800ade0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ade4:	f7f5 ff58 	bl	8000c98 <__aeabi_uldivmod>
 800ade8:	4602      	mov	r2, r0
 800adea:	460b      	mov	r3, r1
 800adec:	4b60      	ldr	r3, [pc, #384]	; (800af70 <UART_SetConfig+0x570>)
 800adee:	fba3 2302 	umull	r2, r3, r3, r2
 800adf2:	095b      	lsrs	r3, r3, #5
 800adf4:	011c      	lsls	r4, r3, #4
 800adf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adfa:	2200      	movs	r2, #0
 800adfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ae00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ae04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ae08:	4642      	mov	r2, r8
 800ae0a:	464b      	mov	r3, r9
 800ae0c:	1891      	adds	r1, r2, r2
 800ae0e:	61b9      	str	r1, [r7, #24]
 800ae10:	415b      	adcs	r3, r3
 800ae12:	61fb      	str	r3, [r7, #28]
 800ae14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae18:	4641      	mov	r1, r8
 800ae1a:	1851      	adds	r1, r2, r1
 800ae1c:	6139      	str	r1, [r7, #16]
 800ae1e:	4649      	mov	r1, r9
 800ae20:	414b      	adcs	r3, r1
 800ae22:	617b      	str	r3, [r7, #20]
 800ae24:	f04f 0200 	mov.w	r2, #0
 800ae28:	f04f 0300 	mov.w	r3, #0
 800ae2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ae30:	4659      	mov	r1, fp
 800ae32:	00cb      	lsls	r3, r1, #3
 800ae34:	4651      	mov	r1, sl
 800ae36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae3a:	4651      	mov	r1, sl
 800ae3c:	00ca      	lsls	r2, r1, #3
 800ae3e:	4610      	mov	r0, r2
 800ae40:	4619      	mov	r1, r3
 800ae42:	4603      	mov	r3, r0
 800ae44:	4642      	mov	r2, r8
 800ae46:	189b      	adds	r3, r3, r2
 800ae48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ae4c:	464b      	mov	r3, r9
 800ae4e:	460a      	mov	r2, r1
 800ae50:	eb42 0303 	adc.w	r3, r2, r3
 800ae54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae62:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ae64:	f04f 0200 	mov.w	r2, #0
 800ae68:	f04f 0300 	mov.w	r3, #0
 800ae6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ae70:	4649      	mov	r1, r9
 800ae72:	008b      	lsls	r3, r1, #2
 800ae74:	4641      	mov	r1, r8
 800ae76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae7a:	4641      	mov	r1, r8
 800ae7c:	008a      	lsls	r2, r1, #2
 800ae7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ae82:	f7f5 ff09 	bl	8000c98 <__aeabi_uldivmod>
 800ae86:	4602      	mov	r2, r0
 800ae88:	460b      	mov	r3, r1
 800ae8a:	4b39      	ldr	r3, [pc, #228]	; (800af70 <UART_SetConfig+0x570>)
 800ae8c:	fba3 1302 	umull	r1, r3, r3, r2
 800ae90:	095b      	lsrs	r3, r3, #5
 800ae92:	2164      	movs	r1, #100	; 0x64
 800ae94:	fb01 f303 	mul.w	r3, r1, r3
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	011b      	lsls	r3, r3, #4
 800ae9c:	3332      	adds	r3, #50	; 0x32
 800ae9e:	4a34      	ldr	r2, [pc, #208]	; (800af70 <UART_SetConfig+0x570>)
 800aea0:	fba2 2303 	umull	r2, r3, r2, r3
 800aea4:	095b      	lsrs	r3, r3, #5
 800aea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aeaa:	441c      	add	r4, r3
 800aeac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	673b      	str	r3, [r7, #112]	; 0x70
 800aeb4:	677a      	str	r2, [r7, #116]	; 0x74
 800aeb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800aeba:	4642      	mov	r2, r8
 800aebc:	464b      	mov	r3, r9
 800aebe:	1891      	adds	r1, r2, r2
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	415b      	adcs	r3, r3
 800aec4:	60fb      	str	r3, [r7, #12]
 800aec6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aeca:	4641      	mov	r1, r8
 800aecc:	1851      	adds	r1, r2, r1
 800aece:	6039      	str	r1, [r7, #0]
 800aed0:	4649      	mov	r1, r9
 800aed2:	414b      	adcs	r3, r1
 800aed4:	607b      	str	r3, [r7, #4]
 800aed6:	f04f 0200 	mov.w	r2, #0
 800aeda:	f04f 0300 	mov.w	r3, #0
 800aede:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aee2:	4659      	mov	r1, fp
 800aee4:	00cb      	lsls	r3, r1, #3
 800aee6:	4651      	mov	r1, sl
 800aee8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aeec:	4651      	mov	r1, sl
 800aeee:	00ca      	lsls	r2, r1, #3
 800aef0:	4610      	mov	r0, r2
 800aef2:	4619      	mov	r1, r3
 800aef4:	4603      	mov	r3, r0
 800aef6:	4642      	mov	r2, r8
 800aef8:	189b      	adds	r3, r3, r2
 800aefa:	66bb      	str	r3, [r7, #104]	; 0x68
 800aefc:	464b      	mov	r3, r9
 800aefe:	460a      	mov	r2, r1
 800af00:	eb42 0303 	adc.w	r3, r2, r3
 800af04:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	663b      	str	r3, [r7, #96]	; 0x60
 800af10:	667a      	str	r2, [r7, #100]	; 0x64
 800af12:	f04f 0200 	mov.w	r2, #0
 800af16:	f04f 0300 	mov.w	r3, #0
 800af1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800af1e:	4649      	mov	r1, r9
 800af20:	008b      	lsls	r3, r1, #2
 800af22:	4641      	mov	r1, r8
 800af24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af28:	4641      	mov	r1, r8
 800af2a:	008a      	lsls	r2, r1, #2
 800af2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800af30:	f7f5 feb2 	bl	8000c98 <__aeabi_uldivmod>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	4b0d      	ldr	r3, [pc, #52]	; (800af70 <UART_SetConfig+0x570>)
 800af3a:	fba3 1302 	umull	r1, r3, r3, r2
 800af3e:	095b      	lsrs	r3, r3, #5
 800af40:	2164      	movs	r1, #100	; 0x64
 800af42:	fb01 f303 	mul.w	r3, r1, r3
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	011b      	lsls	r3, r3, #4
 800af4a:	3332      	adds	r3, #50	; 0x32
 800af4c:	4a08      	ldr	r2, [pc, #32]	; (800af70 <UART_SetConfig+0x570>)
 800af4e:	fba2 2303 	umull	r2, r3, r2, r3
 800af52:	095b      	lsrs	r3, r3, #5
 800af54:	f003 020f 	and.w	r2, r3, #15
 800af58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4422      	add	r2, r4
 800af60:	609a      	str	r2, [r3, #8]
}
 800af62:	bf00      	nop
 800af64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800af68:	46bd      	mov	sp, r7
 800af6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af6e:	bf00      	nop
 800af70:	51eb851f 	.word	0x51eb851f

0800af74 <__NVIC_SetPriority>:
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	4603      	mov	r3, r0
 800af7c:	6039      	str	r1, [r7, #0]
 800af7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af84:	2b00      	cmp	r3, #0
 800af86:	db0a      	blt.n	800af9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	b2da      	uxtb	r2, r3
 800af8c:	490c      	ldr	r1, [pc, #48]	; (800afc0 <__NVIC_SetPriority+0x4c>)
 800af8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af92:	0112      	lsls	r2, r2, #4
 800af94:	b2d2      	uxtb	r2, r2
 800af96:	440b      	add	r3, r1
 800af98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800af9c:	e00a      	b.n	800afb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	b2da      	uxtb	r2, r3
 800afa2:	4908      	ldr	r1, [pc, #32]	; (800afc4 <__NVIC_SetPriority+0x50>)
 800afa4:	79fb      	ldrb	r3, [r7, #7]
 800afa6:	f003 030f 	and.w	r3, r3, #15
 800afaa:	3b04      	subs	r3, #4
 800afac:	0112      	lsls	r2, r2, #4
 800afae:	b2d2      	uxtb	r2, r2
 800afb0:	440b      	add	r3, r1
 800afb2:	761a      	strb	r2, [r3, #24]
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	e000e100 	.word	0xe000e100
 800afc4:	e000ed00 	.word	0xe000ed00

0800afc8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800afcc:	4b05      	ldr	r3, [pc, #20]	; (800afe4 <SysTick_Handler+0x1c>)
 800afce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800afd0:	f003 f856 	bl	800e080 <xTaskGetSchedulerState>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d001      	beq.n	800afde <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800afda:	f001 f865 	bl	800c0a8 <xPortSysTickHandler>
  }
}
 800afde:	bf00      	nop
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	e000e010 	.word	0xe000e010

0800afe8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800afe8:	b580      	push	{r7, lr}
 800afea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800afec:	2100      	movs	r1, #0
 800afee:	f06f 0004 	mvn.w	r0, #4
 800aff2:	f7ff ffbf 	bl	800af74 <__NVIC_SetPriority>
#endif
}
 800aff6:	bf00      	nop
 800aff8:	bd80      	pop	{r7, pc}
	...

0800affc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b002:	f3ef 8305 	mrs	r3, IPSR
 800b006:	603b      	str	r3, [r7, #0]
  return(result);
 800b008:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d003      	beq.n	800b016 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b00e:	f06f 0305 	mvn.w	r3, #5
 800b012:	607b      	str	r3, [r7, #4]
 800b014:	e00c      	b.n	800b030 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b016:	4b0a      	ldr	r3, [pc, #40]	; (800b040 <osKernelInitialize+0x44>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d105      	bne.n	800b02a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b01e:	4b08      	ldr	r3, [pc, #32]	; (800b040 <osKernelInitialize+0x44>)
 800b020:	2201      	movs	r2, #1
 800b022:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b024:	2300      	movs	r3, #0
 800b026:	607b      	str	r3, [r7, #4]
 800b028:	e002      	b.n	800b030 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b02a:	f04f 33ff 	mov.w	r3, #4294967295
 800b02e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b030:	687b      	ldr	r3, [r7, #4]
}
 800b032:	4618      	mov	r0, r3
 800b034:	370c      	adds	r7, #12
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	200006f4 	.word	0x200006f4

0800b044 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b04a:	f3ef 8305 	mrs	r3, IPSR
 800b04e:	603b      	str	r3, [r7, #0]
  return(result);
 800b050:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <osKernelStart+0x1a>
    stat = osErrorISR;
 800b056:	f06f 0305 	mvn.w	r3, #5
 800b05a:	607b      	str	r3, [r7, #4]
 800b05c:	e010      	b.n	800b080 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b05e:	4b0b      	ldr	r3, [pc, #44]	; (800b08c <osKernelStart+0x48>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2b01      	cmp	r3, #1
 800b064:	d109      	bne.n	800b07a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b066:	f7ff ffbf 	bl	800afe8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b06a:	4b08      	ldr	r3, [pc, #32]	; (800b08c <osKernelStart+0x48>)
 800b06c:	2202      	movs	r2, #2
 800b06e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b070:	f002 fbaa 	bl	800d7c8 <vTaskStartScheduler>
      stat = osOK;
 800b074:	2300      	movs	r3, #0
 800b076:	607b      	str	r3, [r7, #4]
 800b078:	e002      	b.n	800b080 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b07a:	f04f 33ff 	mov.w	r3, #4294967295
 800b07e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b080:	687b      	ldr	r3, [r7, #4]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	200006f4 	.word	0x200006f4

0800b090 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b090:	b580      	push	{r7, lr}
 800b092:	b08e      	sub	sp, #56	; 0x38
 800b094:	af04      	add	r7, sp, #16
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b09c:	2300      	movs	r3, #0
 800b09e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0a0:	f3ef 8305 	mrs	r3, IPSR
 800b0a4:	617b      	str	r3, [r7, #20]
  return(result);
 800b0a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d17e      	bne.n	800b1aa <osThreadNew+0x11a>
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d07b      	beq.n	800b1aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b0b2:	2380      	movs	r3, #128	; 0x80
 800b0b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b0b6:	2318      	movs	r3, #24
 800b0b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b0be:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d045      	beq.n	800b156 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d002      	beq.n	800b0d8 <osThreadNew+0x48>
        name = attr->name;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d002      	beq.n	800b0e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d008      	beq.n	800b0fe <osThreadNew+0x6e>
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	2b38      	cmp	r3, #56	; 0x38
 800b0f0:	d805      	bhi.n	800b0fe <osThreadNew+0x6e>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	f003 0301 	and.w	r3, r3, #1
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <osThreadNew+0x72>
        return (NULL);
 800b0fe:	2300      	movs	r3, #0
 800b100:	e054      	b.n	800b1ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d003      	beq.n	800b112 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	089b      	lsrs	r3, r3, #2
 800b110:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00e      	beq.n	800b138 <osThreadNew+0xa8>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	2bbb      	cmp	r3, #187	; 0xbb
 800b120:	d90a      	bls.n	800b138 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b126:	2b00      	cmp	r3, #0
 800b128:	d006      	beq.n	800b138 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	695b      	ldr	r3, [r3, #20]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d002      	beq.n	800b138 <osThreadNew+0xa8>
        mem = 1;
 800b132:	2301      	movs	r3, #1
 800b134:	61bb      	str	r3, [r7, #24]
 800b136:	e010      	b.n	800b15a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10c      	bne.n	800b15a <osThreadNew+0xca>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d108      	bne.n	800b15a <osThreadNew+0xca>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d104      	bne.n	800b15a <osThreadNew+0xca>
          mem = 0;
 800b150:	2300      	movs	r3, #0
 800b152:	61bb      	str	r3, [r7, #24]
 800b154:	e001      	b.n	800b15a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d110      	bne.n	800b182 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b168:	9202      	str	r2, [sp, #8]
 800b16a:	9301      	str	r3, [sp, #4]
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	6a3a      	ldr	r2, [r7, #32]
 800b174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f002 f834 	bl	800d1e4 <xTaskCreateStatic>
 800b17c:	4603      	mov	r3, r0
 800b17e:	613b      	str	r3, [r7, #16]
 800b180:	e013      	b.n	800b1aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d110      	bne.n	800b1aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b188:	6a3b      	ldr	r3, [r7, #32]
 800b18a:	b29a      	uxth	r2, r3
 800b18c:	f107 0310 	add.w	r3, r7, #16
 800b190:	9301      	str	r3, [sp, #4]
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	9300      	str	r3, [sp, #0]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f002 f87f 	bl	800d29e <xTaskCreate>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d001      	beq.n	800b1aa <osThreadNew+0x11a>
            hTask = NULL;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b1aa:	693b      	ldr	r3, [r7, #16]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3728      	adds	r7, #40	; 0x28
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1c0:	f3ef 8305 	mrs	r3, IPSR
 800b1c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d003      	beq.n	800b1d4 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800b1cc:	f06f 0305 	mvn.w	r3, #5
 800b1d0:	617b      	str	r3, [r7, #20]
 800b1d2:	e00b      	b.n	800b1ec <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d103      	bne.n	800b1e2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800b1da:	f06f 0303 	mvn.w	r3, #3
 800b1de:	617b      	str	r3, [r7, #20]
 800b1e0:	e004      	b.n	800b1ec <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800b1e6:	6938      	ldr	r0, [r7, #16]
 800b1e8:	f002 f9e8 	bl	800d5bc <vTaskSuspend>
  }

  return (stat);
 800b1ec:	697b      	ldr	r3, [r7, #20]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b086      	sub	sp, #24
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b202:	f3ef 8305 	mrs	r3, IPSR
 800b206:	60fb      	str	r3, [r7, #12]
  return(result);
 800b208:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <osThreadResume+0x20>
    stat = osErrorISR;
 800b20e:	f06f 0305 	mvn.w	r3, #5
 800b212:	617b      	str	r3, [r7, #20]
 800b214:	e00b      	b.n	800b22e <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d103      	bne.n	800b224 <osThreadResume+0x2e>
    stat = osErrorParameter;
 800b21c:	f06f 0303 	mvn.w	r3, #3
 800b220:	617b      	str	r3, [r7, #20]
 800b222:	e004      	b.n	800b22e <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800b224:	2300      	movs	r3, #0
 800b226:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800b228:	6938      	ldr	r0, [r7, #16]
 800b22a:	f002 fa6f 	bl	800d70c <vTaskResume>
  }

  return (stat);
 800b22e:	697b      	ldr	r3, [r7, #20]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b240:	f3ef 8305 	mrs	r3, IPSR
 800b244:	60bb      	str	r3, [r7, #8]
  return(result);
 800b246:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d003      	beq.n	800b254 <osDelay+0x1c>
    stat = osErrorISR;
 800b24c:	f06f 0305 	mvn.w	r3, #5
 800b250:	60fb      	str	r3, [r7, #12]
 800b252:	e007      	b.n	800b264 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b254:	2300      	movs	r3, #0
 800b256:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f002 f978 	bl	800d554 <vTaskDelay>
    }
  }

  return (stat);
 800b264:	68fb      	ldr	r3, [r7, #12]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800b26e:	b580      	push	{r7, lr}
 800b270:	b084      	sub	sp, #16
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f003 fcf1 	bl	800ec5e <pvTimerGetTimerID>
 800b27c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d005      	beq.n	800b290 <TimerCallback+0x22>
    callb->func (callb->arg);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	6852      	ldr	r2, [r2, #4]
 800b28c:	4610      	mov	r0, r2
 800b28e:	4798      	blx	r3
  }
}
 800b290:	bf00      	nop
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08c      	sub	sp, #48	; 0x30
 800b29c:	af02      	add	r7, sp, #8
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	607a      	str	r2, [r7, #4]
 800b2a2:	603b      	str	r3, [r7, #0]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2ac:	f3ef 8305 	mrs	r3, IPSR
 800b2b0:	613b      	str	r3, [r7, #16]
  return(result);
 800b2b2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d163      	bne.n	800b380 <osTimerNew+0xe8>
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d060      	beq.n	800b380 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800b2be:	2008      	movs	r0, #8
 800b2c0:	f000 fa92 	bl	800b7e8 <pvPortMalloc>
 800b2c4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d059      	beq.n	800b380 <osTimerNew+0xe8>
      callb->func = func;
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b2d8:	7afb      	ldrb	r3, [r7, #11]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d102      	bne.n	800b2e4 <osTimerNew+0x4c>
        reload = pdFALSE;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	61fb      	str	r3, [r7, #28]
 800b2e2:	e001      	b.n	800b2e8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800b2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ec:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d01c      	beq.n	800b332 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <osTimerNew+0x6e>
          name = attr->name;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d006      	beq.n	800b31c <osTimerNew+0x84>
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	2b2b      	cmp	r3, #43	; 0x2b
 800b314:	d902      	bls.n	800b31c <osTimerNew+0x84>
          mem = 1;
 800b316:	2301      	movs	r3, #1
 800b318:	61bb      	str	r3, [r7, #24]
 800b31a:	e00c      	b.n	800b336 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d108      	bne.n	800b336 <osTimerNew+0x9e>
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d104      	bne.n	800b336 <osTimerNew+0x9e>
            mem = 0;
 800b32c:	2300      	movs	r3, #0
 800b32e:	61bb      	str	r3, [r7, #24]
 800b330:	e001      	b.n	800b336 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800b332:	2300      	movs	r3, #0
 800b334:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d10c      	bne.n	800b356 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	9301      	str	r3, [sp, #4]
 800b342:	4b12      	ldr	r3, [pc, #72]	; (800b38c <osTimerNew+0xf4>)
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	69fa      	ldr	r2, [r7, #28]
 800b34a:	2101      	movs	r1, #1
 800b34c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b34e:	f003 f8de 	bl	800e50e <xTimerCreateStatic>
 800b352:	6238      	str	r0, [r7, #32]
 800b354:	e00b      	b.n	800b36e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d108      	bne.n	800b36e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800b35c:	4b0b      	ldr	r3, [pc, #44]	; (800b38c <osTimerNew+0xf4>)
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	69fa      	ldr	r2, [r7, #28]
 800b364:	2101      	movs	r1, #1
 800b366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b368:	f003 f8b0 	bl	800e4cc <xTimerCreate>
 800b36c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800b36e:	6a3b      	ldr	r3, [r7, #32]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d105      	bne.n	800b380 <osTimerNew+0xe8>
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d002      	beq.n	800b380 <osTimerNew+0xe8>
        vPortFree (callb);
 800b37a:	6978      	ldr	r0, [r7, #20]
 800b37c:	f000 fb00 	bl	800b980 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800b380:	6a3b      	ldr	r3, [r7, #32]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3728      	adds	r7, #40	; 0x28
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	0800b26f 	.word	0x0800b26f

0800b390 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800b390:	b580      	push	{r7, lr}
 800b392:	b088      	sub	sp, #32
 800b394:	af02      	add	r7, sp, #8
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b39e:	f3ef 8305 	mrs	r3, IPSR
 800b3a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d003      	beq.n	800b3b2 <osTimerStart+0x22>
    stat = osErrorISR;
 800b3aa:	f06f 0305 	mvn.w	r3, #5
 800b3ae:	617b      	str	r3, [r7, #20]
 800b3b0:	e017      	b.n	800b3e2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d103      	bne.n	800b3c0 <osTimerStart+0x30>
    stat = osErrorParameter;
 800b3b8:	f06f 0303 	mvn.w	r3, #3
 800b3bc:	617b      	str	r3, [r7, #20]
 800b3be:	e010      	b.n	800b3e2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	683a      	ldr	r2, [r7, #0]
 800b3c8:	2104      	movs	r1, #4
 800b3ca:	6938      	ldr	r0, [r7, #16]
 800b3cc:	f003 f918 	bl	800e600 <xTimerGenericCommand>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d102      	bne.n	800b3dc <osTimerStart+0x4c>
      stat = osOK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	617b      	str	r3, [r7, #20]
 800b3da:	e002      	b.n	800b3e2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800b3dc:	f06f 0302 	mvn.w	r3, #2
 800b3e0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b3e2:	697b      	ldr	r3, [r7, #20]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3718      	adds	r7, #24
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b088      	sub	sp, #32
 800b3f0:	af02      	add	r7, sp, #8
 800b3f2:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3f8:	f3ef 8305 	mrs	r3, IPSR
 800b3fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b400:	2b00      	cmp	r3, #0
 800b402:	d003      	beq.n	800b40c <osTimerStop+0x20>
    stat = osErrorISR;
 800b404:	f06f 0305 	mvn.w	r3, #5
 800b408:	617b      	str	r3, [r7, #20]
 800b40a:	e021      	b.n	800b450 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d103      	bne.n	800b41a <osTimerStop+0x2e>
    stat = osErrorParameter;
 800b412:	f06f 0303 	mvn.w	r3, #3
 800b416:	617b      	str	r3, [r7, #20]
 800b418:	e01a      	b.n	800b450 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800b41a:	6938      	ldr	r0, [r7, #16]
 800b41c:	f003 fbf6 	bl	800ec0c <xTimerIsTimerActive>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d103      	bne.n	800b42e <osTimerStop+0x42>
      stat = osErrorResource;
 800b426:	f06f 0302 	mvn.w	r3, #2
 800b42a:	617b      	str	r3, [r7, #20]
 800b42c:	e010      	b.n	800b450 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800b42e:	2300      	movs	r3, #0
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	2300      	movs	r3, #0
 800b434:	2200      	movs	r2, #0
 800b436:	2103      	movs	r1, #3
 800b438:	6938      	ldr	r0, [r7, #16]
 800b43a:	f003 f8e1 	bl	800e600 <xTimerGenericCommand>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b01      	cmp	r3, #1
 800b442:	d102      	bne.n	800b44a <osTimerStop+0x5e>
        stat = osOK;
 800b444:	2300      	movs	r3, #0
 800b446:	617b      	str	r3, [r7, #20]
 800b448:	e002      	b.n	800b450 <osTimerStop+0x64>
      } else {
        stat = osError;
 800b44a:	f04f 33ff 	mov.w	r3, #4294967295
 800b44e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b450:	697b      	ldr	r3, [r7, #20]
}
 800b452:	4618      	mov	r0, r3
 800b454:	3718      	adds	r7, #24
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b08a      	sub	sp, #40	; 0x28
 800b45e:	af02      	add	r7, sp, #8
 800b460:	60f8      	str	r0, [r7, #12]
 800b462:	60b9      	str	r1, [r7, #8]
 800b464:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b466:	2300      	movs	r3, #0
 800b468:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b46a:	f3ef 8305 	mrs	r3, IPSR
 800b46e:	613b      	str	r3, [r7, #16]
  return(result);
 800b470:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b472:	2b00      	cmp	r3, #0
 800b474:	d175      	bne.n	800b562 <osSemaphoreNew+0x108>
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d072      	beq.n	800b562 <osSemaphoreNew+0x108>
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	429a      	cmp	r2, r3
 800b482:	d86e      	bhi.n	800b562 <osSemaphoreNew+0x108>
    mem = -1;
 800b484:	f04f 33ff 	mov.w	r3, #4294967295
 800b488:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d015      	beq.n	800b4bc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d006      	beq.n	800b4a6 <osSemaphoreNew+0x4c>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	2b4f      	cmp	r3, #79	; 0x4f
 800b49e:	d902      	bls.n	800b4a6 <osSemaphoreNew+0x4c>
        mem = 1;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	61bb      	str	r3, [r7, #24]
 800b4a4:	e00c      	b.n	800b4c0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d108      	bne.n	800b4c0 <osSemaphoreNew+0x66>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d104      	bne.n	800b4c0 <osSemaphoreNew+0x66>
          mem = 0;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	61bb      	str	r3, [r7, #24]
 800b4ba:	e001      	b.n	800b4c0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c6:	d04c      	beq.n	800b562 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d128      	bne.n	800b520 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d10a      	bne.n	800b4ea <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	2203      	movs	r2, #3
 800b4da:	9200      	str	r2, [sp, #0]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	2100      	movs	r1, #0
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	f000 fed9 	bl	800c298 <xQueueGenericCreateStatic>
 800b4e6:	61f8      	str	r0, [r7, #28]
 800b4e8:	e005      	b.n	800b4f6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b4ea:	2203      	movs	r2, #3
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	2001      	movs	r0, #1
 800b4f0:	f000 ff4a 	bl	800c388 <xQueueGenericCreate>
 800b4f4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d022      	beq.n	800b542 <osSemaphoreNew+0xe8>
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d01f      	beq.n	800b542 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b502:	2300      	movs	r3, #0
 800b504:	2200      	movs	r2, #0
 800b506:	2100      	movs	r1, #0
 800b508:	69f8      	ldr	r0, [r7, #28]
 800b50a:	f001 f805 	bl	800c518 <xQueueGenericSend>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b01      	cmp	r3, #1
 800b512:	d016      	beq.n	800b542 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b514:	69f8      	ldr	r0, [r7, #28]
 800b516:	f001 fc91 	bl	800ce3c <vQueueDelete>
            hSemaphore = NULL;
 800b51a:	2300      	movs	r3, #0
 800b51c:	61fb      	str	r3, [r7, #28]
 800b51e:	e010      	b.n	800b542 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	2b01      	cmp	r3, #1
 800b524:	d108      	bne.n	800b538 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	461a      	mov	r2, r3
 800b52c:	68b9      	ldr	r1, [r7, #8]
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f000 ff87 	bl	800c442 <xQueueCreateCountingSemaphoreStatic>
 800b534:	61f8      	str	r0, [r7, #28]
 800b536:	e004      	b.n	800b542 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b538:	68b9      	ldr	r1, [r7, #8]
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f000 ffb8 	bl	800c4b0 <xQueueCreateCountingSemaphore>
 800b540:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00c      	beq.n	800b562 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d003      	beq.n	800b556 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	617b      	str	r3, [r7, #20]
 800b554:	e001      	b.n	800b55a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b556:	2300      	movs	r3, #0
 800b558:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b55a:	6979      	ldr	r1, [r7, #20]
 800b55c:	69f8      	ldr	r0, [r7, #28]
 800b55e:	f001 fdb9 	bl	800d0d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b562:	69fb      	ldr	r3, [r7, #28]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3720      	adds	r7, #32
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b57a:	2300      	movs	r3, #0
 800b57c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d103      	bne.n	800b58c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b584:	f06f 0303 	mvn.w	r3, #3
 800b588:	617b      	str	r3, [r7, #20]
 800b58a:	e039      	b.n	800b600 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b58c:	f3ef 8305 	mrs	r3, IPSR
 800b590:	60fb      	str	r3, [r7, #12]
  return(result);
 800b592:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b594:	2b00      	cmp	r3, #0
 800b596:	d022      	beq.n	800b5de <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d003      	beq.n	800b5a6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b59e:	f06f 0303 	mvn.w	r3, #3
 800b5a2:	617b      	str	r3, [r7, #20]
 800b5a4:	e02c      	b.n	800b600 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b5aa:	f107 0308 	add.w	r3, r7, #8
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	6938      	ldr	r0, [r7, #16]
 800b5b4:	f001 fbc2 	bl	800cd3c <xQueueReceiveFromISR>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d003      	beq.n	800b5c6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b5be:	f06f 0302 	mvn.w	r3, #2
 800b5c2:	617b      	str	r3, [r7, #20]
 800b5c4:	e01c      	b.n	800b600 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d019      	beq.n	800b600 <osSemaphoreAcquire+0x94>
 800b5cc:	4b0f      	ldr	r3, [pc, #60]	; (800b60c <osSemaphoreAcquire+0xa0>)
 800b5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	f3bf 8f4f 	dsb	sy
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	e010      	b.n	800b600 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b5de:	6839      	ldr	r1, [r7, #0]
 800b5e0:	6938      	ldr	r0, [r7, #16]
 800b5e2:	f001 fa9f 	bl	800cb24 <xQueueSemaphoreTake>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d009      	beq.n	800b600 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d003      	beq.n	800b5fa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b5f2:	f06f 0301 	mvn.w	r3, #1
 800b5f6:	617b      	str	r3, [r7, #20]
 800b5f8:	e002      	b.n	800b600 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b5fa:	f06f 0302 	mvn.w	r3, #2
 800b5fe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b600:	697b      	ldr	r3, [r7, #20]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3718      	adds	r7, #24
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	e000ed04 	.word	0xe000ed04

0800b610 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d103      	bne.n	800b62e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b626:	f06f 0303 	mvn.w	r3, #3
 800b62a:	617b      	str	r3, [r7, #20]
 800b62c:	e02c      	b.n	800b688 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b62e:	f3ef 8305 	mrs	r3, IPSR
 800b632:	60fb      	str	r3, [r7, #12]
  return(result);
 800b634:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b636:	2b00      	cmp	r3, #0
 800b638:	d01a      	beq.n	800b670 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b63a:	2300      	movs	r3, #0
 800b63c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b63e:	f107 0308 	add.w	r3, r7, #8
 800b642:	4619      	mov	r1, r3
 800b644:	6938      	ldr	r0, [r7, #16]
 800b646:	f001 f900 	bl	800c84a <xQueueGiveFromISR>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d003      	beq.n	800b658 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b650:	f06f 0302 	mvn.w	r3, #2
 800b654:	617b      	str	r3, [r7, #20]
 800b656:	e017      	b.n	800b688 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d014      	beq.n	800b688 <osSemaphoreRelease+0x78>
 800b65e:	4b0d      	ldr	r3, [pc, #52]	; (800b694 <osSemaphoreRelease+0x84>)
 800b660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b664:	601a      	str	r2, [r3, #0]
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	f3bf 8f6f 	isb	sy
 800b66e:	e00b      	b.n	800b688 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b670:	2300      	movs	r3, #0
 800b672:	2200      	movs	r2, #0
 800b674:	2100      	movs	r1, #0
 800b676:	6938      	ldr	r0, [r7, #16]
 800b678:	f000 ff4e 	bl	800c518 <xQueueGenericSend>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d002      	beq.n	800b688 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b682:	f06f 0302 	mvn.w	r3, #2
 800b686:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b688:	697b      	ldr	r3, [r7, #20]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3718      	adds	r7, #24
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	e000ed04 	.word	0xe000ed04

0800b698 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b698:	b580      	push	{r7, lr}
 800b69a:	b08a      	sub	sp, #40	; 0x28
 800b69c:	af02      	add	r7, sp, #8
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6a8:	f3ef 8305 	mrs	r3, IPSR
 800b6ac:	613b      	str	r3, [r7, #16]
  return(result);
 800b6ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d15f      	bne.n	800b774 <osMessageQueueNew+0xdc>
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d05c      	beq.n	800b774 <osMessageQueueNew+0xdc>
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d059      	beq.n	800b774 <osMessageQueueNew+0xdc>
    mem = -1;
 800b6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d029      	beq.n	800b720 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d012      	beq.n	800b6fa <osMessageQueueNew+0x62>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	2b4f      	cmp	r3, #79	; 0x4f
 800b6da:	d90e      	bls.n	800b6fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00a      	beq.n	800b6fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	695a      	ldr	r2, [r3, #20]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	68b9      	ldr	r1, [r7, #8]
 800b6ec:	fb01 f303 	mul.w	r3, r1, r3
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d302      	bcc.n	800b6fa <osMessageQueueNew+0x62>
        mem = 1;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	61bb      	str	r3, [r7, #24]
 800b6f8:	e014      	b.n	800b724 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d110      	bne.n	800b724 <osMessageQueueNew+0x8c>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d10c      	bne.n	800b724 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d108      	bne.n	800b724 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d104      	bne.n	800b724 <osMessageQueueNew+0x8c>
          mem = 0;
 800b71a:	2300      	movs	r3, #0
 800b71c:	61bb      	str	r3, [r7, #24]
 800b71e:	e001      	b.n	800b724 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b720:	2300      	movs	r3, #0
 800b722:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	2b01      	cmp	r3, #1
 800b728:	d10b      	bne.n	800b742 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	691a      	ldr	r2, [r3, #16]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	2100      	movs	r1, #0
 800b734:	9100      	str	r1, [sp, #0]
 800b736:	68b9      	ldr	r1, [r7, #8]
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f000 fdad 	bl	800c298 <xQueueGenericCreateStatic>
 800b73e:	61f8      	str	r0, [r7, #28]
 800b740:	e008      	b.n	800b754 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d105      	bne.n	800b754 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b748:	2200      	movs	r2, #0
 800b74a:	68b9      	ldr	r1, [r7, #8]
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f000 fe1b 	bl	800c388 <xQueueGenericCreate>
 800b752:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00c      	beq.n	800b774 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d003      	beq.n	800b768 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	617b      	str	r3, [r7, #20]
 800b766:	e001      	b.n	800b76c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b768:	2300      	movs	r3, #0
 800b76a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b76c:	6979      	ldr	r1, [r7, #20]
 800b76e:	69f8      	ldr	r0, [r7, #28]
 800b770:	f001 fcb0 	bl	800d0d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b774:	69fb      	ldr	r3, [r7, #28]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3720      	adds	r7, #32
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
	...

0800b780 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	4a07      	ldr	r2, [pc, #28]	; (800b7ac <vApplicationGetIdleTaskMemory+0x2c>)
 800b790:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	4a06      	ldr	r2, [pc, #24]	; (800b7b0 <vApplicationGetIdleTaskMemory+0x30>)
 800b796:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2280      	movs	r2, #128	; 0x80
 800b79c:	601a      	str	r2, [r3, #0]
}
 800b79e:	bf00      	nop
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	200006f8 	.word	0x200006f8
 800b7b0:	200007b4 	.word	0x200007b4

0800b7b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	4a07      	ldr	r2, [pc, #28]	; (800b7e0 <vApplicationGetTimerTaskMemory+0x2c>)
 800b7c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	4a06      	ldr	r2, [pc, #24]	; (800b7e4 <vApplicationGetTimerTaskMemory+0x30>)
 800b7ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b7d2:	601a      	str	r2, [r3, #0]
}
 800b7d4:	bf00      	nop
 800b7d6:	3714      	adds	r7, #20
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	200009b4 	.word	0x200009b4
 800b7e4:	20000a70 	.word	0x20000a70

0800b7e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b08a      	sub	sp, #40	; 0x28
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b7f4:	f002 f858 	bl	800d8a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b7f8:	4b5b      	ldr	r3, [pc, #364]	; (800b968 <pvPortMalloc+0x180>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d101      	bne.n	800b804 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b800:	f000 f920 	bl	800ba44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b804:	4b59      	ldr	r3, [pc, #356]	; (800b96c <pvPortMalloc+0x184>)
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4013      	ands	r3, r2
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f040 8093 	bne.w	800b938 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d01d      	beq.n	800b854 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b818:	2208      	movs	r2, #8
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4413      	add	r3, r2
 800b81e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f003 0307 	and.w	r3, r3, #7
 800b826:	2b00      	cmp	r3, #0
 800b828:	d014      	beq.n	800b854 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f023 0307 	bic.w	r3, r3, #7
 800b830:	3308      	adds	r3, #8
 800b832:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f003 0307 	and.w	r3, r3, #7
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00a      	beq.n	800b854 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b850:	bf00      	nop
 800b852:	e7fe      	b.n	800b852 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d06e      	beq.n	800b938 <pvPortMalloc+0x150>
 800b85a:	4b45      	ldr	r3, [pc, #276]	; (800b970 <pvPortMalloc+0x188>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	429a      	cmp	r2, r3
 800b862:	d869      	bhi.n	800b938 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b864:	4b43      	ldr	r3, [pc, #268]	; (800b974 <pvPortMalloc+0x18c>)
 800b866:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b868:	4b42      	ldr	r3, [pc, #264]	; (800b974 <pvPortMalloc+0x18c>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b86e:	e004      	b.n	800b87a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b872:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	429a      	cmp	r2, r3
 800b882:	d903      	bls.n	800b88c <pvPortMalloc+0xa4>
 800b884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1f1      	bne.n	800b870 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b88c:	4b36      	ldr	r3, [pc, #216]	; (800b968 <pvPortMalloc+0x180>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b892:	429a      	cmp	r2, r3
 800b894:	d050      	beq.n	800b938 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b896:	6a3b      	ldr	r3, [r7, #32]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2208      	movs	r2, #8
 800b89c:	4413      	add	r3, r2
 800b89e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8aa:	685a      	ldr	r2, [r3, #4]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	1ad2      	subs	r2, r2, r3
 800b8b0:	2308      	movs	r3, #8
 800b8b2:	005b      	lsls	r3, r3, #1
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d91f      	bls.n	800b8f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4413      	add	r3, r2
 800b8be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	f003 0307 	and.w	r3, r3, #7
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00a      	beq.n	800b8e0 <pvPortMalloc+0xf8>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	613b      	str	r3, [r7, #16]
}
 800b8dc:	bf00      	nop
 800b8de:	e7fe      	b.n	800b8de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e2:	685a      	ldr	r2, [r3, #4]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	1ad2      	subs	r2, r2, r3
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b8f2:	69b8      	ldr	r0, [r7, #24]
 800b8f4:	f000 f908 	bl	800bb08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b8f8:	4b1d      	ldr	r3, [pc, #116]	; (800b970 <pvPortMalloc+0x188>)
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	4a1b      	ldr	r2, [pc, #108]	; (800b970 <pvPortMalloc+0x188>)
 800b904:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b906:	4b1a      	ldr	r3, [pc, #104]	; (800b970 <pvPortMalloc+0x188>)
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	4b1b      	ldr	r3, [pc, #108]	; (800b978 <pvPortMalloc+0x190>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d203      	bcs.n	800b91a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b912:	4b17      	ldr	r3, [pc, #92]	; (800b970 <pvPortMalloc+0x188>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a18      	ldr	r2, [pc, #96]	; (800b978 <pvPortMalloc+0x190>)
 800b918:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91c:	685a      	ldr	r2, [r3, #4]
 800b91e:	4b13      	ldr	r3, [pc, #76]	; (800b96c <pvPortMalloc+0x184>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	431a      	orrs	r2, r3
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	2200      	movs	r2, #0
 800b92c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b92e:	4b13      	ldr	r3, [pc, #76]	; (800b97c <pvPortMalloc+0x194>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	3301      	adds	r3, #1
 800b934:	4a11      	ldr	r2, [pc, #68]	; (800b97c <pvPortMalloc+0x194>)
 800b936:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b938:	f001 ffc4 	bl	800d8c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	f003 0307 	and.w	r3, r3, #7
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00a      	beq.n	800b95c <pvPortMalloc+0x174>
	__asm volatile
 800b946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94a:	f383 8811 	msr	BASEPRI, r3
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f3bf 8f4f 	dsb	sy
 800b956:	60fb      	str	r3, [r7, #12]
}
 800b958:	bf00      	nop
 800b95a:	e7fe      	b.n	800b95a <pvPortMalloc+0x172>
	return pvReturn;
 800b95c:	69fb      	ldr	r3, [r7, #28]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3728      	adds	r7, #40	; 0x28
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	20004a78 	.word	0x20004a78
 800b96c:	20004a8c 	.word	0x20004a8c
 800b970:	20004a7c 	.word	0x20004a7c
 800b974:	20004a70 	.word	0x20004a70
 800b978:	20004a80 	.word	0x20004a80
 800b97c:	20004a84 	.word	0x20004a84

0800b980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d04d      	beq.n	800ba2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b992:	2308      	movs	r3, #8
 800b994:	425b      	negs	r3, r3
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	4413      	add	r3, r2
 800b99a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	685a      	ldr	r2, [r3, #4]
 800b9a4:	4b24      	ldr	r3, [pc, #144]	; (800ba38 <vPortFree+0xb8>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d10a      	bne.n	800b9c4 <vPortFree+0x44>
	__asm volatile
 800b9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b2:	f383 8811 	msr	BASEPRI, r3
 800b9b6:	f3bf 8f6f 	isb	sy
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	60fb      	str	r3, [r7, #12]
}
 800b9c0:	bf00      	nop
 800b9c2:	e7fe      	b.n	800b9c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00a      	beq.n	800b9e2 <vPortFree+0x62>
	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	60bb      	str	r3, [r7, #8]
}
 800b9de:	bf00      	nop
 800b9e0:	e7fe      	b.n	800b9e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	685a      	ldr	r2, [r3, #4]
 800b9e6:	4b14      	ldr	r3, [pc, #80]	; (800ba38 <vPortFree+0xb8>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d01e      	beq.n	800ba2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d11a      	bne.n	800ba2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	685a      	ldr	r2, [r3, #4]
 800b9fc:	4b0e      	ldr	r3, [pc, #56]	; (800ba38 <vPortFree+0xb8>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	43db      	mvns	r3, r3
 800ba02:	401a      	ands	r2, r3
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba08:	f001 ff4e 	bl	800d8a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	685a      	ldr	r2, [r3, #4]
 800ba10:	4b0a      	ldr	r3, [pc, #40]	; (800ba3c <vPortFree+0xbc>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4413      	add	r3, r2
 800ba16:	4a09      	ldr	r2, [pc, #36]	; (800ba3c <vPortFree+0xbc>)
 800ba18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba1a:	6938      	ldr	r0, [r7, #16]
 800ba1c:	f000 f874 	bl	800bb08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba20:	4b07      	ldr	r3, [pc, #28]	; (800ba40 <vPortFree+0xc0>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	3301      	adds	r3, #1
 800ba26:	4a06      	ldr	r2, [pc, #24]	; (800ba40 <vPortFree+0xc0>)
 800ba28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ba2a:	f001 ff4b 	bl	800d8c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba2e:	bf00      	nop
 800ba30:	3718      	adds	r7, #24
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	20004a8c 	.word	0x20004a8c
 800ba3c:	20004a7c 	.word	0x20004a7c
 800ba40:	20004a88 	.word	0x20004a88

0800ba44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ba4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba50:	4b27      	ldr	r3, [pc, #156]	; (800baf0 <prvHeapInit+0xac>)
 800ba52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f003 0307 	and.w	r3, r3, #7
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00c      	beq.n	800ba78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	3307      	adds	r3, #7
 800ba62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f023 0307 	bic.w	r3, r3, #7
 800ba6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba6c:	68ba      	ldr	r2, [r7, #8]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	4a1f      	ldr	r2, [pc, #124]	; (800baf0 <prvHeapInit+0xac>)
 800ba74:	4413      	add	r3, r2
 800ba76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba7c:	4a1d      	ldr	r2, [pc, #116]	; (800baf4 <prvHeapInit+0xb0>)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba82:	4b1c      	ldr	r3, [pc, #112]	; (800baf4 <prvHeapInit+0xb0>)
 800ba84:	2200      	movs	r2, #0
 800ba86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba90:	2208      	movs	r2, #8
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	1a9b      	subs	r3, r3, r2
 800ba96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f023 0307 	bic.w	r3, r3, #7
 800ba9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	4a15      	ldr	r2, [pc, #84]	; (800baf8 <prvHeapInit+0xb4>)
 800baa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800baa6:	4b14      	ldr	r3, [pc, #80]	; (800baf8 <prvHeapInit+0xb4>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2200      	movs	r2, #0
 800baac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800baae:	4b12      	ldr	r3, [pc, #72]	; (800baf8 <prvHeapInit+0xb4>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2200      	movs	r2, #0
 800bab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	1ad2      	subs	r2, r2, r3
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bac4:	4b0c      	ldr	r3, [pc, #48]	; (800baf8 <prvHeapInit+0xb4>)
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	4a0a      	ldr	r2, [pc, #40]	; (800bafc <prvHeapInit+0xb8>)
 800bad2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	4a09      	ldr	r2, [pc, #36]	; (800bb00 <prvHeapInit+0xbc>)
 800bada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800badc:	4b09      	ldr	r3, [pc, #36]	; (800bb04 <prvHeapInit+0xc0>)
 800bade:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bae2:	601a      	str	r2, [r3, #0]
}
 800bae4:	bf00      	nop
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr
 800baf0:	20000e70 	.word	0x20000e70
 800baf4:	20004a70 	.word	0x20004a70
 800baf8:	20004a78 	.word	0x20004a78
 800bafc:	20004a80 	.word	0x20004a80
 800bb00:	20004a7c 	.word	0x20004a7c
 800bb04:	20004a8c 	.word	0x20004a8c

0800bb08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb10:	4b28      	ldr	r3, [pc, #160]	; (800bbb4 <prvInsertBlockIntoFreeList+0xac>)
 800bb12:	60fb      	str	r3, [r7, #12]
 800bb14:	e002      	b.n	800bb1c <prvInsertBlockIntoFreeList+0x14>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	60fb      	str	r3, [r7, #12]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d8f7      	bhi.n	800bb16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	68ba      	ldr	r2, [r7, #8]
 800bb30:	4413      	add	r3, r2
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d108      	bne.n	800bb4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	441a      	add	r2, r3
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	441a      	add	r2, r3
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d118      	bne.n	800bb90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	4b15      	ldr	r3, [pc, #84]	; (800bbb8 <prvInsertBlockIntoFreeList+0xb0>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d00d      	beq.n	800bb86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	685a      	ldr	r2, [r3, #4]
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	441a      	add	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	601a      	str	r2, [r3, #0]
 800bb84:	e008      	b.n	800bb98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb86:	4b0c      	ldr	r3, [pc, #48]	; (800bbb8 <prvInsertBlockIntoFreeList+0xb0>)
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	601a      	str	r2, [r3, #0]
 800bb8e:	e003      	b.n	800bb98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d002      	beq.n	800bba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bba6:	bf00      	nop
 800bba8:	3714      	adds	r7, #20
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	20004a70 	.word	0x20004a70
 800bbb8:	20004a78 	.word	0x20004a78

0800bbbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f103 0208 	add.w	r2, r3, #8
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f103 0208 	add.w	r2, r3, #8
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f103 0208 	add.w	r2, r3, #8
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bbf0:	bf00      	nop
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc0a:	bf00      	nop
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr

0800bc16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc16:	b480      	push	{r7}
 800bc18:	b085      	sub	sp, #20
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
 800bc1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	689a      	ldr	r2, [r3, #8]
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	683a      	ldr	r2, [r7, #0]
 800bc3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	1c5a      	adds	r2, r3, #1
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	601a      	str	r2, [r3, #0]
}
 800bc52:	bf00      	nop
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc5e:	b480      	push	{r7}
 800bc60:	b085      	sub	sp, #20
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc74:	d103      	bne.n	800bc7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	60fb      	str	r3, [r7, #12]
 800bc7c:	e00c      	b.n	800bc98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	3308      	adds	r3, #8
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	e002      	b.n	800bc8c <vListInsert+0x2e>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	60fb      	str	r3, [r7, #12]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d2f6      	bcs.n	800bc86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	685a      	ldr	r2, [r3, #4]
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	683a      	ldr	r2, [r7, #0]
 800bca6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	68fa      	ldr	r2, [r7, #12]
 800bcac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	1c5a      	adds	r2, r3, #1
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	601a      	str	r2, [r3, #0]
}
 800bcc4:	bf00      	nop
 800bcc6:	3714      	adds	r7, #20
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	6892      	ldr	r2, [r2, #8]
 800bce6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	6852      	ldr	r2, [r2, #4]
 800bcf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d103      	bne.n	800bd04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	689a      	ldr	r2, [r3, #8]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	1e5a      	subs	r2, r3, #1
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3714      	adds	r7, #20
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3b04      	subs	r3, #4
 800bd34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bd3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	3b04      	subs	r3, #4
 800bd42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	f023 0201 	bic.w	r2, r3, #1
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	3b04      	subs	r3, #4
 800bd52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bd54:	4a0c      	ldr	r2, [pc, #48]	; (800bd88 <pxPortInitialiseStack+0x64>)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	3b14      	subs	r3, #20
 800bd5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	3b04      	subs	r3, #4
 800bd6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f06f 0202 	mvn.w	r2, #2
 800bd72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	3b20      	subs	r3, #32
 800bd78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3714      	adds	r7, #20
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	0800bd8d 	.word	0x0800bd8d

0800bd8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bd96:	4b12      	ldr	r3, [pc, #72]	; (800bde0 <prvTaskExitError+0x54>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd9e:	d00a      	beq.n	800bdb6 <prvTaskExitError+0x2a>
	__asm volatile
 800bda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	60fb      	str	r3, [r7, #12]
}
 800bdb2:	bf00      	nop
 800bdb4:	e7fe      	b.n	800bdb4 <prvTaskExitError+0x28>
	__asm volatile
 800bdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdba:	f383 8811 	msr	BASEPRI, r3
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	60bb      	str	r3, [r7, #8]
}
 800bdc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bdca:	bf00      	nop
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d0fc      	beq.n	800bdcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	20000034 	.word	0x20000034
	...

0800bdf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bdf0:	4b07      	ldr	r3, [pc, #28]	; (800be10 <pxCurrentTCBConst2>)
 800bdf2:	6819      	ldr	r1, [r3, #0]
 800bdf4:	6808      	ldr	r0, [r1, #0]
 800bdf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdfa:	f380 8809 	msr	PSP, r0
 800bdfe:	f3bf 8f6f 	isb	sy
 800be02:	f04f 0000 	mov.w	r0, #0
 800be06:	f380 8811 	msr	BASEPRI, r0
 800be0a:	4770      	bx	lr
 800be0c:	f3af 8000 	nop.w

0800be10 <pxCurrentTCBConst2>:
 800be10:	20004ad8 	.word	0x20004ad8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be14:	bf00      	nop
 800be16:	bf00      	nop

0800be18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be18:	4808      	ldr	r0, [pc, #32]	; (800be3c <prvPortStartFirstTask+0x24>)
 800be1a:	6800      	ldr	r0, [r0, #0]
 800be1c:	6800      	ldr	r0, [r0, #0]
 800be1e:	f380 8808 	msr	MSP, r0
 800be22:	f04f 0000 	mov.w	r0, #0
 800be26:	f380 8814 	msr	CONTROL, r0
 800be2a:	b662      	cpsie	i
 800be2c:	b661      	cpsie	f
 800be2e:	f3bf 8f4f 	dsb	sy
 800be32:	f3bf 8f6f 	isb	sy
 800be36:	df00      	svc	0
 800be38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be3a:	bf00      	nop
 800be3c:	e000ed08 	.word	0xe000ed08

0800be40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b086      	sub	sp, #24
 800be44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800be46:	4b46      	ldr	r3, [pc, #280]	; (800bf60 <xPortStartScheduler+0x120>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a46      	ldr	r2, [pc, #280]	; (800bf64 <xPortStartScheduler+0x124>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d10a      	bne.n	800be66 <xPortStartScheduler+0x26>
	__asm volatile
 800be50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	613b      	str	r3, [r7, #16]
}
 800be62:	bf00      	nop
 800be64:	e7fe      	b.n	800be64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800be66:	4b3e      	ldr	r3, [pc, #248]	; (800bf60 <xPortStartScheduler+0x120>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a3f      	ldr	r2, [pc, #252]	; (800bf68 <xPortStartScheduler+0x128>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d10a      	bne.n	800be86 <xPortStartScheduler+0x46>
	__asm volatile
 800be70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be74:	f383 8811 	msr	BASEPRI, r3
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	60fb      	str	r3, [r7, #12]
}
 800be82:	bf00      	nop
 800be84:	e7fe      	b.n	800be84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be86:	4b39      	ldr	r3, [pc, #228]	; (800bf6c <xPortStartScheduler+0x12c>)
 800be88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	22ff      	movs	r2, #255	; 0xff
 800be96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bea0:	78fb      	ldrb	r3, [r7, #3]
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	4b31      	ldr	r3, [pc, #196]	; (800bf70 <xPortStartScheduler+0x130>)
 800beac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800beae:	4b31      	ldr	r3, [pc, #196]	; (800bf74 <xPortStartScheduler+0x134>)
 800beb0:	2207      	movs	r2, #7
 800beb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800beb4:	e009      	b.n	800beca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800beb6:	4b2f      	ldr	r3, [pc, #188]	; (800bf74 <xPortStartScheduler+0x134>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	3b01      	subs	r3, #1
 800bebc:	4a2d      	ldr	r2, [pc, #180]	; (800bf74 <xPortStartScheduler+0x134>)
 800bebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bec0:	78fb      	ldrb	r3, [r7, #3]
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	005b      	lsls	r3, r3, #1
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800beca:	78fb      	ldrb	r3, [r7, #3]
 800becc:	b2db      	uxtb	r3, r3
 800bece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bed2:	2b80      	cmp	r3, #128	; 0x80
 800bed4:	d0ef      	beq.n	800beb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bed6:	4b27      	ldr	r3, [pc, #156]	; (800bf74 <xPortStartScheduler+0x134>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f1c3 0307 	rsb	r3, r3, #7
 800bede:	2b04      	cmp	r3, #4
 800bee0:	d00a      	beq.n	800bef8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee6:	f383 8811 	msr	BASEPRI, r3
 800beea:	f3bf 8f6f 	isb	sy
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	60bb      	str	r3, [r7, #8]
}
 800bef4:	bf00      	nop
 800bef6:	e7fe      	b.n	800bef6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bef8:	4b1e      	ldr	r3, [pc, #120]	; (800bf74 <xPortStartScheduler+0x134>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	021b      	lsls	r3, r3, #8
 800befe:	4a1d      	ldr	r2, [pc, #116]	; (800bf74 <xPortStartScheduler+0x134>)
 800bf00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf02:	4b1c      	ldr	r3, [pc, #112]	; (800bf74 <xPortStartScheduler+0x134>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf0a:	4a1a      	ldr	r2, [pc, #104]	; (800bf74 <xPortStartScheduler+0x134>)
 800bf0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	b2da      	uxtb	r2, r3
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf16:	4b18      	ldr	r3, [pc, #96]	; (800bf78 <xPortStartScheduler+0x138>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a17      	ldr	r2, [pc, #92]	; (800bf78 <xPortStartScheduler+0x138>)
 800bf1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bf20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf22:	4b15      	ldr	r3, [pc, #84]	; (800bf78 <xPortStartScheduler+0x138>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a14      	ldr	r2, [pc, #80]	; (800bf78 <xPortStartScheduler+0x138>)
 800bf28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bf2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf2e:	f000 f8dd 	bl	800c0ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf32:	4b12      	ldr	r3, [pc, #72]	; (800bf7c <xPortStartScheduler+0x13c>)
 800bf34:	2200      	movs	r2, #0
 800bf36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf38:	f000 f8fc 	bl	800c134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bf3c:	4b10      	ldr	r3, [pc, #64]	; (800bf80 <xPortStartScheduler+0x140>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a0f      	ldr	r2, [pc, #60]	; (800bf80 <xPortStartScheduler+0x140>)
 800bf42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bf46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bf48:	f7ff ff66 	bl	800be18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bf4c:	f001 fe22 	bl	800db94 <vTaskSwitchContext>
	prvTaskExitError();
 800bf50:	f7ff ff1c 	bl	800bd8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3718      	adds	r7, #24
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	e000ed00 	.word	0xe000ed00
 800bf64:	410fc271 	.word	0x410fc271
 800bf68:	410fc270 	.word	0x410fc270
 800bf6c:	e000e400 	.word	0xe000e400
 800bf70:	20004a90 	.word	0x20004a90
 800bf74:	20004a94 	.word	0x20004a94
 800bf78:	e000ed20 	.word	0xe000ed20
 800bf7c:	20000034 	.word	0x20000034
 800bf80:	e000ef34 	.word	0xe000ef34

0800bf84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
	__asm volatile
 800bf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8e:	f383 8811 	msr	BASEPRI, r3
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	f3bf 8f4f 	dsb	sy
 800bf9a:	607b      	str	r3, [r7, #4]
}
 800bf9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf9e:	4b0f      	ldr	r3, [pc, #60]	; (800bfdc <vPortEnterCritical+0x58>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	4a0d      	ldr	r2, [pc, #52]	; (800bfdc <vPortEnterCritical+0x58>)
 800bfa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bfa8:	4b0c      	ldr	r3, [pc, #48]	; (800bfdc <vPortEnterCritical+0x58>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d10f      	bne.n	800bfd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bfb0:	4b0b      	ldr	r3, [pc, #44]	; (800bfe0 <vPortEnterCritical+0x5c>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00a      	beq.n	800bfd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbe:	f383 8811 	msr	BASEPRI, r3
 800bfc2:	f3bf 8f6f 	isb	sy
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	603b      	str	r3, [r7, #0]
}
 800bfcc:	bf00      	nop
 800bfce:	e7fe      	b.n	800bfce <vPortEnterCritical+0x4a>
	}
}
 800bfd0:	bf00      	nop
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr
 800bfdc:	20000034 	.word	0x20000034
 800bfe0:	e000ed04 	.word	0xe000ed04

0800bfe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bfea:	4b12      	ldr	r3, [pc, #72]	; (800c034 <vPortExitCritical+0x50>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d10a      	bne.n	800c008 <vPortExitCritical+0x24>
	__asm volatile
 800bff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff6:	f383 8811 	msr	BASEPRI, r3
 800bffa:	f3bf 8f6f 	isb	sy
 800bffe:	f3bf 8f4f 	dsb	sy
 800c002:	607b      	str	r3, [r7, #4]
}
 800c004:	bf00      	nop
 800c006:	e7fe      	b.n	800c006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c008:	4b0a      	ldr	r3, [pc, #40]	; (800c034 <vPortExitCritical+0x50>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	3b01      	subs	r3, #1
 800c00e:	4a09      	ldr	r2, [pc, #36]	; (800c034 <vPortExitCritical+0x50>)
 800c010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c012:	4b08      	ldr	r3, [pc, #32]	; (800c034 <vPortExitCritical+0x50>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d105      	bne.n	800c026 <vPortExitCritical+0x42>
 800c01a:	2300      	movs	r3, #0
 800c01c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c026:	bf00      	nop
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	20000034 	.word	0x20000034
	...

0800c040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c040:	f3ef 8009 	mrs	r0, PSP
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	4b15      	ldr	r3, [pc, #84]	; (800c0a0 <pxCurrentTCBConst>)
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	f01e 0f10 	tst.w	lr, #16
 800c050:	bf08      	it	eq
 800c052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c05a:	6010      	str	r0, [r2, #0]
 800c05c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c060:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c064:	f380 8811 	msr	BASEPRI, r0
 800c068:	f3bf 8f4f 	dsb	sy
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	f001 fd90 	bl	800db94 <vTaskSwitchContext>
 800c074:	f04f 0000 	mov.w	r0, #0
 800c078:	f380 8811 	msr	BASEPRI, r0
 800c07c:	bc09      	pop	{r0, r3}
 800c07e:	6819      	ldr	r1, [r3, #0]
 800c080:	6808      	ldr	r0, [r1, #0]
 800c082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c086:	f01e 0f10 	tst.w	lr, #16
 800c08a:	bf08      	it	eq
 800c08c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c090:	f380 8809 	msr	PSP, r0
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	f3af 8000 	nop.w

0800c0a0 <pxCurrentTCBConst>:
 800c0a0:	20004ad8 	.word	0x20004ad8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c0a4:	bf00      	nop
 800c0a6:	bf00      	nop

0800c0a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b2:	f383 8811 	msr	BASEPRI, r3
 800c0b6:	f3bf 8f6f 	isb	sy
 800c0ba:	f3bf 8f4f 	dsb	sy
 800c0be:	607b      	str	r3, [r7, #4]
}
 800c0c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c0c2:	f001 fcad 	bl	800da20 <xTaskIncrementTick>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d003      	beq.n	800c0d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c0cc:	4b06      	ldr	r3, [pc, #24]	; (800c0e8 <xPortSysTickHandler+0x40>)
 800c0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0d2:	601a      	str	r2, [r3, #0]
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	f383 8811 	msr	BASEPRI, r3
}
 800c0de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c0e0:	bf00      	nop
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	e000ed04 	.word	0xe000ed04

0800c0ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c0f0:	4b0b      	ldr	r3, [pc, #44]	; (800c120 <vPortSetupTimerInterrupt+0x34>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c0f6:	4b0b      	ldr	r3, [pc, #44]	; (800c124 <vPortSetupTimerInterrupt+0x38>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c0fc:	4b0a      	ldr	r3, [pc, #40]	; (800c128 <vPortSetupTimerInterrupt+0x3c>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a0a      	ldr	r2, [pc, #40]	; (800c12c <vPortSetupTimerInterrupt+0x40>)
 800c102:	fba2 2303 	umull	r2, r3, r2, r3
 800c106:	099b      	lsrs	r3, r3, #6
 800c108:	4a09      	ldr	r2, [pc, #36]	; (800c130 <vPortSetupTimerInterrupt+0x44>)
 800c10a:	3b01      	subs	r3, #1
 800c10c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c10e:	4b04      	ldr	r3, [pc, #16]	; (800c120 <vPortSetupTimerInterrupt+0x34>)
 800c110:	2207      	movs	r2, #7
 800c112:	601a      	str	r2, [r3, #0]
}
 800c114:	bf00      	nop
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	e000e010 	.word	0xe000e010
 800c124:	e000e018 	.word	0xe000e018
 800c128:	20000018 	.word	0x20000018
 800c12c:	10624dd3 	.word	0x10624dd3
 800c130:	e000e014 	.word	0xe000e014

0800c134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c144 <vPortEnableVFP+0x10>
 800c138:	6801      	ldr	r1, [r0, #0]
 800c13a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c13e:	6001      	str	r1, [r0, #0]
 800c140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c142:	bf00      	nop
 800c144:	e000ed88 	.word	0xe000ed88

0800c148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c14e:	f3ef 8305 	mrs	r3, IPSR
 800c152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2b0f      	cmp	r3, #15
 800c158:	d914      	bls.n	800c184 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c15a:	4a17      	ldr	r2, [pc, #92]	; (800c1b8 <vPortValidateInterruptPriority+0x70>)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	4413      	add	r3, r2
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c164:	4b15      	ldr	r3, [pc, #84]	; (800c1bc <vPortValidateInterruptPriority+0x74>)
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	7afa      	ldrb	r2, [r7, #11]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d20a      	bcs.n	800c184 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	607b      	str	r3, [r7, #4]
}
 800c180:	bf00      	nop
 800c182:	e7fe      	b.n	800c182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c184:	4b0e      	ldr	r3, [pc, #56]	; (800c1c0 <vPortValidateInterruptPriority+0x78>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c18c:	4b0d      	ldr	r3, [pc, #52]	; (800c1c4 <vPortValidateInterruptPriority+0x7c>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	429a      	cmp	r2, r3
 800c192:	d90a      	bls.n	800c1aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	603b      	str	r3, [r7, #0]
}
 800c1a6:	bf00      	nop
 800c1a8:	e7fe      	b.n	800c1a8 <vPortValidateInterruptPriority+0x60>
	}
 800c1aa:	bf00      	nop
 800c1ac:	3714      	adds	r7, #20
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	e000e3f0 	.word	0xe000e3f0
 800c1bc:	20004a90 	.word	0x20004a90
 800c1c0:	e000ed0c 	.word	0xe000ed0c
 800c1c4:	20004a94 	.word	0x20004a94

0800c1c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10a      	bne.n	800c1f2 <xQueueGenericReset+0x2a>
	__asm volatile
 800c1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e0:	f383 8811 	msr	BASEPRI, r3
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	60bb      	str	r3, [r7, #8]
}
 800c1ee:	bf00      	nop
 800c1f0:	e7fe      	b.n	800c1f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c1f2:	f7ff fec7 	bl	800bf84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1fe:	68f9      	ldr	r1, [r7, #12]
 800c200:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c202:	fb01 f303 	mul.w	r3, r1, r3
 800c206:	441a      	add	r2, r3
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2200      	movs	r2, #0
 800c210:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c222:	3b01      	subs	r3, #1
 800c224:	68f9      	ldr	r1, [r7, #12]
 800c226:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c228:	fb01 f303 	mul.w	r3, r1, r3
 800c22c:	441a      	add	r2, r3
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	22ff      	movs	r2, #255	; 0xff
 800c236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	22ff      	movs	r2, #255	; 0xff
 800c23e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d114      	bne.n	800c272 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d01a      	beq.n	800c286 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	3310      	adds	r3, #16
 800c254:	4618      	mov	r0, r3
 800c256:	f001 fd51 	bl	800dcfc <xTaskRemoveFromEventList>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d012      	beq.n	800c286 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c260:	4b0c      	ldr	r3, [pc, #48]	; (800c294 <xQueueGenericReset+0xcc>)
 800c262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c266:	601a      	str	r2, [r3, #0]
 800c268:	f3bf 8f4f 	dsb	sy
 800c26c:	f3bf 8f6f 	isb	sy
 800c270:	e009      	b.n	800c286 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	3310      	adds	r3, #16
 800c276:	4618      	mov	r0, r3
 800c278:	f7ff fca0 	bl	800bbbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	3324      	adds	r3, #36	; 0x24
 800c280:	4618      	mov	r0, r3
 800c282:	f7ff fc9b 	bl	800bbbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c286:	f7ff fead 	bl	800bfe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c28a:	2301      	movs	r3, #1
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3710      	adds	r7, #16
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	e000ed04 	.word	0xe000ed04

0800c298 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b08e      	sub	sp, #56	; 0x38
 800c29c:	af02      	add	r7, sp, #8
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
 800c2a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d10a      	bne.n	800c2c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c2be:	bf00      	nop
 800c2c0:	e7fe      	b.n	800c2c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d10a      	bne.n	800c2de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2cc:	f383 8811 	msr	BASEPRI, r3
 800c2d0:	f3bf 8f6f 	isb	sy
 800c2d4:	f3bf 8f4f 	dsb	sy
 800c2d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2da:	bf00      	nop
 800c2dc:	e7fe      	b.n	800c2dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d002      	beq.n	800c2ea <xQueueGenericCreateStatic+0x52>
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d001      	beq.n	800c2ee <xQueueGenericCreateStatic+0x56>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e000      	b.n	800c2f0 <xQueueGenericCreateStatic+0x58>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10a      	bne.n	800c30a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	623b      	str	r3, [r7, #32]
}
 800c306:	bf00      	nop
 800c308:	e7fe      	b.n	800c308 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d102      	bne.n	800c316 <xQueueGenericCreateStatic+0x7e>
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d101      	bne.n	800c31a <xQueueGenericCreateStatic+0x82>
 800c316:	2301      	movs	r3, #1
 800c318:	e000      	b.n	800c31c <xQueueGenericCreateStatic+0x84>
 800c31a:	2300      	movs	r3, #0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10a      	bne.n	800c336 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	61fb      	str	r3, [r7, #28]
}
 800c332:	bf00      	nop
 800c334:	e7fe      	b.n	800c334 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c336:	2350      	movs	r3, #80	; 0x50
 800c338:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	2b50      	cmp	r3, #80	; 0x50
 800c33e:	d00a      	beq.n	800c356 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c344:	f383 8811 	msr	BASEPRI, r3
 800c348:	f3bf 8f6f 	isb	sy
 800c34c:	f3bf 8f4f 	dsb	sy
 800c350:	61bb      	str	r3, [r7, #24]
}
 800c352:	bf00      	nop
 800c354:	e7fe      	b.n	800c354 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c356:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00d      	beq.n	800c37e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c364:	2201      	movs	r2, #1
 800c366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c36a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	4613      	mov	r3, r2
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	68b9      	ldr	r1, [r7, #8]
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f000 f83f 	bl	800c3fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c380:	4618      	mov	r0, r3
 800c382:	3730      	adds	r7, #48	; 0x30
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b08a      	sub	sp, #40	; 0x28
 800c38c:	af02      	add	r7, sp, #8
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	4613      	mov	r3, r2
 800c394:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10a      	bne.n	800c3b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	613b      	str	r3, [r7, #16]
}
 800c3ae:	bf00      	nop
 800c3b0:	e7fe      	b.n	800c3b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	68ba      	ldr	r2, [r7, #8]
 800c3b6:	fb02 f303 	mul.w	r3, r2, r3
 800c3ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	3350      	adds	r3, #80	; 0x50
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7ff fa11 	bl	800b7e8 <pvPortMalloc>
 800c3c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d011      	beq.n	800c3f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	3350      	adds	r3, #80	; 0x50
 800c3d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c3e0:	79fa      	ldrb	r2, [r7, #7]
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	697a      	ldr	r2, [r7, #20]
 800c3ea:	68b9      	ldr	r1, [r7, #8]
 800c3ec:	68f8      	ldr	r0, [r7, #12]
 800c3ee:	f000 f805 	bl	800c3fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c3f2:	69bb      	ldr	r3, [r7, #24]
	}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3720      	adds	r7, #32
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	607a      	str	r2, [r7, #4]
 800c408:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d103      	bne.n	800c418 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	69ba      	ldr	r2, [r7, #24]
 800c414:	601a      	str	r2, [r3, #0]
 800c416:	e002      	b.n	800c41e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	68ba      	ldr	r2, [r7, #8]
 800c428:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c42a:	2101      	movs	r1, #1
 800c42c:	69b8      	ldr	r0, [r7, #24]
 800c42e:	f7ff fecb 	bl	800c1c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	78fa      	ldrb	r2, [r7, #3]
 800c436:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c43a:	bf00      	nop
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c442:	b580      	push	{r7, lr}
 800c444:	b08a      	sub	sp, #40	; 0x28
 800c446:	af02      	add	r7, sp, #8
 800c448:	60f8      	str	r0, [r7, #12]
 800c44a:	60b9      	str	r1, [r7, #8]
 800c44c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10a      	bne.n	800c46a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c458:	f383 8811 	msr	BASEPRI, r3
 800c45c:	f3bf 8f6f 	isb	sy
 800c460:	f3bf 8f4f 	dsb	sy
 800c464:	61bb      	str	r3, [r7, #24]
}
 800c466:	bf00      	nop
 800c468:	e7fe      	b.n	800c468 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	429a      	cmp	r2, r3
 800c470:	d90a      	bls.n	800c488 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	617b      	str	r3, [r7, #20]
}
 800c484:	bf00      	nop
 800c486:	e7fe      	b.n	800c486 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c488:	2302      	movs	r3, #2
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	2100      	movs	r1, #0
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f7ff ff00 	bl	800c298 <xQueueGenericCreateStatic>
 800c498:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d002      	beq.n	800c4a6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	68ba      	ldr	r2, [r7, #8]
 800c4a4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c4a6:	69fb      	ldr	r3, [r7, #28]
	}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3720      	adds	r7, #32
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10a      	bne.n	800c4d6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	613b      	str	r3, [r7, #16]
}
 800c4d2:	bf00      	nop
 800c4d4:	e7fe      	b.n	800c4d4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c4d6:	683a      	ldr	r2, [r7, #0]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d90a      	bls.n	800c4f4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	60fb      	str	r3, [r7, #12]
}
 800c4f0:	bf00      	nop
 800c4f2:	e7fe      	b.n	800c4f2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c4f4:	2202      	movs	r2, #2
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f7ff ff45 	bl	800c388 <xQueueGenericCreate>
 800c4fe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d002      	beq.n	800c50c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	683a      	ldr	r2, [r7, #0]
 800c50a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c50c:	697b      	ldr	r3, [r7, #20]
	}
 800c50e:	4618      	mov	r0, r3
 800c510:	3718      	adds	r7, #24
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b08e      	sub	sp, #56	; 0x38
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
 800c524:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c526:	2300      	movs	r3, #0
 800c528:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c530:	2b00      	cmp	r3, #0
 800c532:	d10a      	bne.n	800c54a <xQueueGenericSend+0x32>
	__asm volatile
 800c534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c538:	f383 8811 	msr	BASEPRI, r3
 800c53c:	f3bf 8f6f 	isb	sy
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c546:	bf00      	nop
 800c548:	e7fe      	b.n	800c548 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d103      	bne.n	800c558 <xQueueGenericSend+0x40>
 800c550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c554:	2b00      	cmp	r3, #0
 800c556:	d101      	bne.n	800c55c <xQueueGenericSend+0x44>
 800c558:	2301      	movs	r3, #1
 800c55a:	e000      	b.n	800c55e <xQueueGenericSend+0x46>
 800c55c:	2300      	movs	r3, #0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10a      	bne.n	800c578 <xQueueGenericSend+0x60>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c566:	f383 8811 	msr	BASEPRI, r3
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c574:	bf00      	nop
 800c576:	e7fe      	b.n	800c576 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d103      	bne.n	800c586 <xQueueGenericSend+0x6e>
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c582:	2b01      	cmp	r3, #1
 800c584:	d101      	bne.n	800c58a <xQueueGenericSend+0x72>
 800c586:	2301      	movs	r3, #1
 800c588:	e000      	b.n	800c58c <xQueueGenericSend+0x74>
 800c58a:	2300      	movs	r3, #0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d10a      	bne.n	800c5a6 <xQueueGenericSend+0x8e>
	__asm volatile
 800c590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c594:	f383 8811 	msr	BASEPRI, r3
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	623b      	str	r3, [r7, #32]
}
 800c5a2:	bf00      	nop
 800c5a4:	e7fe      	b.n	800c5a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5a6:	f001 fd6b 	bl	800e080 <xTaskGetSchedulerState>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d102      	bne.n	800c5b6 <xQueueGenericSend+0x9e>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d101      	bne.n	800c5ba <xQueueGenericSend+0xa2>
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e000      	b.n	800c5bc <xQueueGenericSend+0xa4>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10a      	bne.n	800c5d6 <xQueueGenericSend+0xbe>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	61fb      	str	r3, [r7, #28]
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5d6:	f7ff fcd5 	bl	800bf84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d302      	bcc.n	800c5ec <xQueueGenericSend+0xd4>
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	2b02      	cmp	r3, #2
 800c5ea:	d129      	bne.n	800c640 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5ec:	683a      	ldr	r2, [r7, #0]
 800c5ee:	68b9      	ldr	r1, [r7, #8]
 800c5f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5f2:	f000 fc5e 	bl	800ceb2 <prvCopyDataToQueue>
 800c5f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d010      	beq.n	800c622 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c602:	3324      	adds	r3, #36	; 0x24
 800c604:	4618      	mov	r0, r3
 800c606:	f001 fb79 	bl	800dcfc <xTaskRemoveFromEventList>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d013      	beq.n	800c638 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c610:	4b3f      	ldr	r3, [pc, #252]	; (800c710 <xQueueGenericSend+0x1f8>)
 800c612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c616:	601a      	str	r2, [r3, #0]
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	e00a      	b.n	800c638 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c624:	2b00      	cmp	r3, #0
 800c626:	d007      	beq.n	800c638 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c628:	4b39      	ldr	r3, [pc, #228]	; (800c710 <xQueueGenericSend+0x1f8>)
 800c62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c62e:	601a      	str	r2, [r3, #0]
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c638:	f7ff fcd4 	bl	800bfe4 <vPortExitCritical>
				return pdPASS;
 800c63c:	2301      	movs	r3, #1
 800c63e:	e063      	b.n	800c708 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d103      	bne.n	800c64e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c646:	f7ff fccd 	bl	800bfe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c64a:	2300      	movs	r3, #0
 800c64c:	e05c      	b.n	800c708 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c650:	2b00      	cmp	r3, #0
 800c652:	d106      	bne.n	800c662 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c654:	f107 0314 	add.w	r3, r7, #20
 800c658:	4618      	mov	r0, r3
 800c65a:	f001 fbb3 	bl	800ddc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c65e:	2301      	movs	r3, #1
 800c660:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c662:	f7ff fcbf 	bl	800bfe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c666:	f001 f91f 	bl	800d8a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c66a:	f7ff fc8b 	bl	800bf84 <vPortEnterCritical>
 800c66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c674:	b25b      	sxtb	r3, r3
 800c676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c67a:	d103      	bne.n	800c684 <xQueueGenericSend+0x16c>
 800c67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67e:	2200      	movs	r2, #0
 800c680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c68a:	b25b      	sxtb	r3, r3
 800c68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c690:	d103      	bne.n	800c69a <xQueueGenericSend+0x182>
 800c692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c694:	2200      	movs	r2, #0
 800c696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c69a:	f7ff fca3 	bl	800bfe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c69e:	1d3a      	adds	r2, r7, #4
 800c6a0:	f107 0314 	add.w	r3, r7, #20
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f001 fba2 	bl	800ddf0 <xTaskCheckForTimeOut>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d124      	bne.n	800c6fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c6b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6b4:	f000 fcf5 	bl	800d0a2 <prvIsQueueFull>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d018      	beq.n	800c6f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c0:	3310      	adds	r3, #16
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	4611      	mov	r1, r2
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f001 fac8 	bl	800dc5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c6cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6ce:	f000 fc80 	bl	800cfd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c6d2:	f001 f8f7 	bl	800d8c4 <xTaskResumeAll>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f47f af7c 	bne.w	800c5d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c6de:	4b0c      	ldr	r3, [pc, #48]	; (800c710 <xQueueGenericSend+0x1f8>)
 800c6e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6e4:	601a      	str	r2, [r3, #0]
 800c6e6:	f3bf 8f4f 	dsb	sy
 800c6ea:	f3bf 8f6f 	isb	sy
 800c6ee:	e772      	b.n	800c5d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c6f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6f2:	f000 fc6e 	bl	800cfd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6f6:	f001 f8e5 	bl	800d8c4 <xTaskResumeAll>
 800c6fa:	e76c      	b.n	800c5d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c6fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6fe:	f000 fc68 	bl	800cfd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c702:	f001 f8df 	bl	800d8c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c706:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3738      	adds	r7, #56	; 0x38
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	e000ed04 	.word	0xe000ed04

0800c714 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b090      	sub	sp, #64	; 0x40
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	607a      	str	r2, [r7, #4]
 800c720:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10a      	bne.n	800c742 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c730:	f383 8811 	msr	BASEPRI, r3
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c73e:	bf00      	nop
 800c740:	e7fe      	b.n	800c740 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d103      	bne.n	800c750 <xQueueGenericSendFromISR+0x3c>
 800c748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d101      	bne.n	800c754 <xQueueGenericSendFromISR+0x40>
 800c750:	2301      	movs	r3, #1
 800c752:	e000      	b.n	800c756 <xQueueGenericSendFromISR+0x42>
 800c754:	2300      	movs	r3, #0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10a      	bne.n	800c770 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75e:	f383 8811 	msr	BASEPRI, r3
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	f3bf 8f4f 	dsb	sy
 800c76a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c76c:	bf00      	nop
 800c76e:	e7fe      	b.n	800c76e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	2b02      	cmp	r3, #2
 800c774:	d103      	bne.n	800c77e <xQueueGenericSendFromISR+0x6a>
 800c776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d101      	bne.n	800c782 <xQueueGenericSendFromISR+0x6e>
 800c77e:	2301      	movs	r3, #1
 800c780:	e000      	b.n	800c784 <xQueueGenericSendFromISR+0x70>
 800c782:	2300      	movs	r3, #0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d10a      	bne.n	800c79e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78c:	f383 8811 	msr	BASEPRI, r3
 800c790:	f3bf 8f6f 	isb	sy
 800c794:	f3bf 8f4f 	dsb	sy
 800c798:	623b      	str	r3, [r7, #32]
}
 800c79a:	bf00      	nop
 800c79c:	e7fe      	b.n	800c79c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c79e:	f7ff fcd3 	bl	800c148 <vPortValidateInterruptPriority>
	__asm volatile
 800c7a2:	f3ef 8211 	mrs	r2, BASEPRI
 800c7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7aa:	f383 8811 	msr	BASEPRI, r3
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f3bf 8f4f 	dsb	sy
 800c7b6:	61fa      	str	r2, [r7, #28]
 800c7b8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c7ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d302      	bcc.n	800c7d0 <xQueueGenericSendFromISR+0xbc>
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	d12f      	bne.n	800c830 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7e0:	683a      	ldr	r2, [r7, #0]
 800c7e2:	68b9      	ldr	r1, [r7, #8]
 800c7e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c7e6:	f000 fb64 	bl	800ceb2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c7ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f2:	d112      	bne.n	800c81a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d016      	beq.n	800c82a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fe:	3324      	adds	r3, #36	; 0x24
 800c800:	4618      	mov	r0, r3
 800c802:	f001 fa7b 	bl	800dcfc <xTaskRemoveFromEventList>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00e      	beq.n	800c82a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d00b      	beq.n	800c82a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2201      	movs	r2, #1
 800c816:	601a      	str	r2, [r3, #0]
 800c818:	e007      	b.n	800c82a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c81a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c81e:	3301      	adds	r3, #1
 800c820:	b2db      	uxtb	r3, r3
 800c822:	b25a      	sxtb	r2, r3
 800c824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c82a:	2301      	movs	r3, #1
 800c82c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c82e:	e001      	b.n	800c834 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c830:	2300      	movs	r3, #0
 800c832:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c836:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	f383 8811 	msr	BASEPRI, r3
}
 800c83e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c842:	4618      	mov	r0, r3
 800c844:	3740      	adds	r7, #64	; 0x40
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b08e      	sub	sp, #56	; 0x38
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
 800c852:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d10a      	bne.n	800c874 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	623b      	str	r3, [r7, #32]
}
 800c870:	bf00      	nop
 800c872:	e7fe      	b.n	800c872 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d00a      	beq.n	800c892 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c880:	f383 8811 	msr	BASEPRI, r3
 800c884:	f3bf 8f6f 	isb	sy
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	61fb      	str	r3, [r7, #28]
}
 800c88e:	bf00      	nop
 800c890:	e7fe      	b.n	800c890 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d103      	bne.n	800c8a2 <xQueueGiveFromISR+0x58>
 800c89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d101      	bne.n	800c8a6 <xQueueGiveFromISR+0x5c>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e000      	b.n	800c8a8 <xQueueGiveFromISR+0x5e>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10a      	bne.n	800c8c2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b0:	f383 8811 	msr	BASEPRI, r3
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	61bb      	str	r3, [r7, #24]
}
 800c8be:	bf00      	nop
 800c8c0:	e7fe      	b.n	800c8c0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8c2:	f7ff fc41 	bl	800c148 <vPortValidateInterruptPriority>
	__asm volatile
 800c8c6:	f3ef 8211 	mrs	r2, BASEPRI
 800c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	617a      	str	r2, [r7, #20]
 800c8dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c8de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d22b      	bcs.n	800c94a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fe:	1c5a      	adds	r2, r3, #1
 800c900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c902:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c904:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c90c:	d112      	bne.n	800c934 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c912:	2b00      	cmp	r3, #0
 800c914:	d016      	beq.n	800c944 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c918:	3324      	adds	r3, #36	; 0x24
 800c91a:	4618      	mov	r0, r3
 800c91c:	f001 f9ee 	bl	800dcfc <xTaskRemoveFromEventList>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d00e      	beq.n	800c944 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d00b      	beq.n	800c944 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	2201      	movs	r2, #1
 800c930:	601a      	str	r2, [r3, #0]
 800c932:	e007      	b.n	800c944 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c938:	3301      	adds	r3, #1
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	b25a      	sxtb	r2, r3
 800c93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c944:	2301      	movs	r3, #1
 800c946:	637b      	str	r3, [r7, #52]	; 0x34
 800c948:	e001      	b.n	800c94e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c94a:	2300      	movs	r3, #0
 800c94c:	637b      	str	r3, [r7, #52]	; 0x34
 800c94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c950:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f383 8811 	msr	BASEPRI, r3
}
 800c958:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3738      	adds	r7, #56	; 0x38
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b08c      	sub	sp, #48	; 0x30
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c970:	2300      	movs	r3, #0
 800c972:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d10a      	bne.n	800c994 <xQueueReceive+0x30>
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	623b      	str	r3, [r7, #32]
}
 800c990:	bf00      	nop
 800c992:	e7fe      	b.n	800c992 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d103      	bne.n	800c9a2 <xQueueReceive+0x3e>
 800c99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d101      	bne.n	800c9a6 <xQueueReceive+0x42>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e000      	b.n	800c9a8 <xQueueReceive+0x44>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d10a      	bne.n	800c9c2 <xQueueReceive+0x5e>
	__asm volatile
 800c9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b0:	f383 8811 	msr	BASEPRI, r3
 800c9b4:	f3bf 8f6f 	isb	sy
 800c9b8:	f3bf 8f4f 	dsb	sy
 800c9bc:	61fb      	str	r3, [r7, #28]
}
 800c9be:	bf00      	nop
 800c9c0:	e7fe      	b.n	800c9c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9c2:	f001 fb5d 	bl	800e080 <xTaskGetSchedulerState>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d102      	bne.n	800c9d2 <xQueueReceive+0x6e>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d101      	bne.n	800c9d6 <xQueueReceive+0x72>
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	e000      	b.n	800c9d8 <xQueueReceive+0x74>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10a      	bne.n	800c9f2 <xQueueReceive+0x8e>
	__asm volatile
 800c9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e0:	f383 8811 	msr	BASEPRI, r3
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	61bb      	str	r3, [r7, #24]
}
 800c9ee:	bf00      	nop
 800c9f0:	e7fe      	b.n	800c9f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c9f2:	f7ff fac7 	bl	800bf84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d01f      	beq.n	800ca42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca02:	68b9      	ldr	r1, [r7, #8]
 800ca04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca06:	f000 fabe 	bl	800cf86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0c:	1e5a      	subs	r2, r3, #1
 800ca0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca14:	691b      	ldr	r3, [r3, #16]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00f      	beq.n	800ca3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1c:	3310      	adds	r3, #16
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f001 f96c 	bl	800dcfc <xTaskRemoveFromEventList>
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d007      	beq.n	800ca3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca2a:	4b3d      	ldr	r3, [pc, #244]	; (800cb20 <xQueueReceive+0x1bc>)
 800ca2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca30:	601a      	str	r2, [r3, #0]
 800ca32:	f3bf 8f4f 	dsb	sy
 800ca36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca3a:	f7ff fad3 	bl	800bfe4 <vPortExitCritical>
				return pdPASS;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e069      	b.n	800cb16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d103      	bne.n	800ca50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca48:	f7ff facc 	bl	800bfe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	e062      	b.n	800cb16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d106      	bne.n	800ca64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca56:	f107 0310 	add.w	r3, r7, #16
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f001 f9b2 	bl	800ddc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca60:	2301      	movs	r3, #1
 800ca62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca64:	f7ff fabe 	bl	800bfe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca68:	f000 ff1e 	bl	800d8a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca6c:	f7ff fa8a 	bl	800bf84 <vPortEnterCritical>
 800ca70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca76:	b25b      	sxtb	r3, r3
 800ca78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca7c:	d103      	bne.n	800ca86 <xQueueReceive+0x122>
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca80:	2200      	movs	r2, #0
 800ca82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca8c:	b25b      	sxtb	r3, r3
 800ca8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca92:	d103      	bne.n	800ca9c <xQueueReceive+0x138>
 800ca94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca9c:	f7ff faa2 	bl	800bfe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800caa0:	1d3a      	adds	r2, r7, #4
 800caa2:	f107 0310 	add.w	r3, r7, #16
 800caa6:	4611      	mov	r1, r2
 800caa8:	4618      	mov	r0, r3
 800caaa:	f001 f9a1 	bl	800ddf0 <xTaskCheckForTimeOut>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d123      	bne.n	800cafc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cab6:	f000 fade 	bl	800d076 <prvIsQueueEmpty>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d017      	beq.n	800caf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac2:	3324      	adds	r3, #36	; 0x24
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	4611      	mov	r1, r2
 800cac8:	4618      	mov	r0, r3
 800caca:	f001 f8c7 	bl	800dc5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cad0:	f000 fa7f 	bl	800cfd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cad4:	f000 fef6 	bl	800d8c4 <xTaskResumeAll>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d189      	bne.n	800c9f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cade:	4b10      	ldr	r3, [pc, #64]	; (800cb20 <xQueueReceive+0x1bc>)
 800cae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cae4:	601a      	str	r2, [r3, #0]
 800cae6:	f3bf 8f4f 	dsb	sy
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	e780      	b.n	800c9f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800caf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caf2:	f000 fa6e 	bl	800cfd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800caf6:	f000 fee5 	bl	800d8c4 <xTaskResumeAll>
 800cafa:	e77a      	b.n	800c9f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cafc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cafe:	f000 fa68 	bl	800cfd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb02:	f000 fedf 	bl	800d8c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb08:	f000 fab5 	bl	800d076 <prvIsQueueEmpty>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f43f af6f 	beq.w	800c9f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cb14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3730      	adds	r7, #48	; 0x30
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	e000ed04 	.word	0xe000ed04

0800cb24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b08e      	sub	sp, #56	; 0x38
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cb36:	2300      	movs	r3, #0
 800cb38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10a      	bne.n	800cb56 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800cb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb44:	f383 8811 	msr	BASEPRI, r3
 800cb48:	f3bf 8f6f 	isb	sy
 800cb4c:	f3bf 8f4f 	dsb	sy
 800cb50:	623b      	str	r3, [r7, #32]
}
 800cb52:	bf00      	nop
 800cb54:	e7fe      	b.n	800cb54 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00a      	beq.n	800cb74 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800cb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb62:	f383 8811 	msr	BASEPRI, r3
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	f3bf 8f4f 	dsb	sy
 800cb6e:	61fb      	str	r3, [r7, #28]
}
 800cb70:	bf00      	nop
 800cb72:	e7fe      	b.n	800cb72 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb74:	f001 fa84 	bl	800e080 <xTaskGetSchedulerState>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d102      	bne.n	800cb84 <xQueueSemaphoreTake+0x60>
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d101      	bne.n	800cb88 <xQueueSemaphoreTake+0x64>
 800cb84:	2301      	movs	r3, #1
 800cb86:	e000      	b.n	800cb8a <xQueueSemaphoreTake+0x66>
 800cb88:	2300      	movs	r3, #0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d10a      	bne.n	800cba4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800cb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb92:	f383 8811 	msr	BASEPRI, r3
 800cb96:	f3bf 8f6f 	isb	sy
 800cb9a:	f3bf 8f4f 	dsb	sy
 800cb9e:	61bb      	str	r3, [r7, #24]
}
 800cba0:	bf00      	nop
 800cba2:	e7fe      	b.n	800cba2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cba4:	f7ff f9ee 	bl	800bf84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d024      	beq.n	800cbfe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb6:	1e5a      	subs	r2, r3, #1
 800cbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d104      	bne.n	800cbce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cbc4:	f001 fbd2 	bl	800e36c <pvTaskIncrementMutexHeldCount>
 800cbc8:	4602      	mov	r2, r0
 800cbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbcc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00f      	beq.n	800cbf6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd8:	3310      	adds	r3, #16
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f001 f88e 	bl	800dcfc <xTaskRemoveFromEventList>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d007      	beq.n	800cbf6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cbe6:	4b54      	ldr	r3, [pc, #336]	; (800cd38 <xQueueSemaphoreTake+0x214>)
 800cbe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbec:	601a      	str	r2, [r3, #0]
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cbf6:	f7ff f9f5 	bl	800bfe4 <vPortExitCritical>
				return pdPASS;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e097      	b.n	800cd2e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d111      	bne.n	800cc28 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00a      	beq.n	800cc20 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0e:	f383 8811 	msr	BASEPRI, r3
 800cc12:	f3bf 8f6f 	isb	sy
 800cc16:	f3bf 8f4f 	dsb	sy
 800cc1a:	617b      	str	r3, [r7, #20]
}
 800cc1c:	bf00      	nop
 800cc1e:	e7fe      	b.n	800cc1e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cc20:	f7ff f9e0 	bl	800bfe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc24:	2300      	movs	r3, #0
 800cc26:	e082      	b.n	800cd2e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d106      	bne.n	800cc3c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc2e:	f107 030c 	add.w	r3, r7, #12
 800cc32:	4618      	mov	r0, r3
 800cc34:	f001 f8c6 	bl	800ddc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc3c:	f7ff f9d2 	bl	800bfe4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc40:	f000 fe32 	bl	800d8a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc44:	f7ff f99e 	bl	800bf84 <vPortEnterCritical>
 800cc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc4e:	b25b      	sxtb	r3, r3
 800cc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc54:	d103      	bne.n	800cc5e <xQueueSemaphoreTake+0x13a>
 800cc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc64:	b25b      	sxtb	r3, r3
 800cc66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc6a:	d103      	bne.n	800cc74 <xQueueSemaphoreTake+0x150>
 800cc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc74:	f7ff f9b6 	bl	800bfe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc78:	463a      	mov	r2, r7
 800cc7a:	f107 030c 	add.w	r3, r7, #12
 800cc7e:	4611      	mov	r1, r2
 800cc80:	4618      	mov	r0, r3
 800cc82:	f001 f8b5 	bl	800ddf0 <xTaskCheckForTimeOut>
 800cc86:	4603      	mov	r3, r0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d132      	bne.n	800ccf2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc8e:	f000 f9f2 	bl	800d076 <prvIsQueueEmpty>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d026      	beq.n	800cce6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d109      	bne.n	800ccb4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cca0:	f7ff f970 	bl	800bf84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f001 fa07 	bl	800e0bc <xTaskPriorityInherit>
 800ccae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ccb0:	f7ff f998 	bl	800bfe4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ccb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb6:	3324      	adds	r3, #36	; 0x24
 800ccb8:	683a      	ldr	r2, [r7, #0]
 800ccba:	4611      	mov	r1, r2
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f000 ffcd 	bl	800dc5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ccc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccc4:	f000 f985 	bl	800cfd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ccc8:	f000 fdfc 	bl	800d8c4 <xTaskResumeAll>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f47f af68 	bne.w	800cba4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ccd4:	4b18      	ldr	r3, [pc, #96]	; (800cd38 <xQueueSemaphoreTake+0x214>)
 800ccd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccda:	601a      	str	r2, [r3, #0]
 800ccdc:	f3bf 8f4f 	dsb	sy
 800cce0:	f3bf 8f6f 	isb	sy
 800cce4:	e75e      	b.n	800cba4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cce6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cce8:	f000 f973 	bl	800cfd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ccec:	f000 fdea 	bl	800d8c4 <xTaskResumeAll>
 800ccf0:	e758      	b.n	800cba4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ccf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccf4:	f000 f96d 	bl	800cfd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ccf8:	f000 fde4 	bl	800d8c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccfe:	f000 f9ba 	bl	800d076 <prvIsQueueEmpty>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	f43f af4d 	beq.w	800cba4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d00d      	beq.n	800cd2c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800cd10:	f7ff f938 	bl	800bf84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cd14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd16:	f000 f8b4 	bl	800ce82 <prvGetDisinheritPriorityAfterTimeout>
 800cd1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd22:	4618      	mov	r0, r3
 800cd24:	f001 faa0 	bl	800e268 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cd28:	f7ff f95c 	bl	800bfe4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3738      	adds	r7, #56	; 0x38
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	e000ed04 	.word	0xe000ed04

0800cd3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08e      	sub	sp, #56	; 0x38
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d10a      	bne.n	800cd68 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	623b      	str	r3, [r7, #32]
}
 800cd64:	bf00      	nop
 800cd66:	e7fe      	b.n	800cd66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d103      	bne.n	800cd76 <xQueueReceiveFromISR+0x3a>
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d101      	bne.n	800cd7a <xQueueReceiveFromISR+0x3e>
 800cd76:	2301      	movs	r3, #1
 800cd78:	e000      	b.n	800cd7c <xQueueReceiveFromISR+0x40>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d10a      	bne.n	800cd96 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	61fb      	str	r3, [r7, #28]
}
 800cd92:	bf00      	nop
 800cd94:	e7fe      	b.n	800cd94 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd96:	f7ff f9d7 	bl	800c148 <vPortValidateInterruptPriority>
	__asm volatile
 800cd9a:	f3ef 8211 	mrs	r2, BASEPRI
 800cd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	61ba      	str	r2, [r7, #24]
 800cdb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cdb2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d02f      	beq.n	800ce22 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cdcc:	68b9      	ldr	r1, [r7, #8]
 800cdce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdd0:	f000 f8d9 	bl	800cf86 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd6:	1e5a      	subs	r2, r3, #1
 800cdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdda:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cddc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde4:	d112      	bne.n	800ce0c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde8:	691b      	ldr	r3, [r3, #16]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d016      	beq.n	800ce1c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	3310      	adds	r3, #16
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f000 ff82 	bl	800dcfc <xTaskRemoveFromEventList>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00e      	beq.n	800ce1c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d00b      	beq.n	800ce1c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	601a      	str	r2, [r3, #0]
 800ce0a:	e007      	b.n	800ce1c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ce0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce10:	3301      	adds	r3, #1
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	b25a      	sxtb	r2, r3
 800ce16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce20:	e001      	b.n	800ce26 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ce22:	2300      	movs	r3, #0
 800ce24:	637b      	str	r3, [r7, #52]	; 0x34
 800ce26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce28:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	f383 8811 	msr	BASEPRI, r3
}
 800ce30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3738      	adds	r7, #56	; 0x38
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10a      	bne.n	800ce64 <vQueueDelete+0x28>
	__asm volatile
 800ce4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	60bb      	str	r3, [r7, #8]
}
 800ce60:	bf00      	nop
 800ce62:	e7fe      	b.n	800ce62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ce64:	68f8      	ldr	r0, [r7, #12]
 800ce66:	f000 f95f 	bl	800d128 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d102      	bne.n	800ce7a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ce74:	68f8      	ldr	r0, [r7, #12]
 800ce76:	f7fe fd83 	bl	800b980 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ce7a:	bf00      	nop
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ce82:	b480      	push	{r7}
 800ce84:	b085      	sub	sp, #20
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d006      	beq.n	800cea0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ce9c:	60fb      	str	r3, [r7, #12]
 800ce9e:	e001      	b.n	800cea4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cea0:	2300      	movs	r3, #0
 800cea2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cea4:	68fb      	ldr	r3, [r7, #12]
	}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b086      	sub	sp, #24
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	60f8      	str	r0, [r7, #12]
 800ceba:	60b9      	str	r1, [r7, #8]
 800cebc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cebe:	2300      	movs	r3, #0
 800cec0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d10d      	bne.n	800ceec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d14d      	bne.n	800cf74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	4618      	mov	r0, r3
 800cede:	f001 f955 	bl	800e18c <xTaskPriorityDisinherit>
 800cee2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	609a      	str	r2, [r3, #8]
 800ceea:	e043      	b.n	800cf74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d119      	bne.n	800cf26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	6858      	ldr	r0, [r3, #4]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cefa:	461a      	mov	r2, r3
 800cefc:	68b9      	ldr	r1, [r7, #8]
 800cefe:	f001 fff2 	bl	800eee6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	685a      	ldr	r2, [r3, #4]
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf0a:	441a      	add	r2, r3
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	685a      	ldr	r2, [r3, #4]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d32b      	bcc.n	800cf74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	605a      	str	r2, [r3, #4]
 800cf24:	e026      	b.n	800cf74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	68d8      	ldr	r0, [r3, #12]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf2e:	461a      	mov	r2, r3
 800cf30:	68b9      	ldr	r1, [r7, #8]
 800cf32:	f001 ffd8 	bl	800eee6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	68da      	ldr	r2, [r3, #12]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3e:	425b      	negs	r3, r3
 800cf40:	441a      	add	r2, r3
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	68da      	ldr	r2, [r3, #12]
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d207      	bcs.n	800cf62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	689a      	ldr	r2, [r3, #8]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf5a:	425b      	negs	r3, r3
 800cf5c:	441a      	add	r2, r3
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b02      	cmp	r3, #2
 800cf66:	d105      	bne.n	800cf74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d002      	beq.n	800cf74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	3b01      	subs	r3, #1
 800cf72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	1c5a      	adds	r2, r3, #1
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cf7c:	697b      	ldr	r3, [r7, #20]
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3718      	adds	r7, #24
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b082      	sub	sp, #8
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
 800cf8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d018      	beq.n	800cfca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	68da      	ldr	r2, [r3, #12]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa0:	441a      	add	r2, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	68da      	ldr	r2, [r3, #12]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d303      	bcc.n	800cfba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	68d9      	ldr	r1, [r3, #12]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	6838      	ldr	r0, [r7, #0]
 800cfc6:	f001 ff8e 	bl	800eee6 <memcpy>
	}
}
 800cfca:	bf00      	nop
 800cfcc:	3708      	adds	r7, #8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b084      	sub	sp, #16
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cfda:	f7fe ffd3 	bl	800bf84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfe4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfe6:	e011      	b.n	800d00c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d012      	beq.n	800d016 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	3324      	adds	r3, #36	; 0x24
 800cff4:	4618      	mov	r0, r3
 800cff6:	f000 fe81 	bl	800dcfc <xTaskRemoveFromEventList>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d001      	beq.n	800d004 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d000:	f000 ff58 	bl	800deb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d004:	7bfb      	ldrb	r3, [r7, #15]
 800d006:	3b01      	subs	r3, #1
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d00c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d010:	2b00      	cmp	r3, #0
 800d012:	dce9      	bgt.n	800cfe8 <prvUnlockQueue+0x16>
 800d014:	e000      	b.n	800d018 <prvUnlockQueue+0x46>
					break;
 800d016:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	22ff      	movs	r2, #255	; 0xff
 800d01c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d020:	f7fe ffe0 	bl	800bfe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d024:	f7fe ffae 	bl	800bf84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d02e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d030:	e011      	b.n	800d056 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	691b      	ldr	r3, [r3, #16]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d012      	beq.n	800d060 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	3310      	adds	r3, #16
 800d03e:	4618      	mov	r0, r3
 800d040:	f000 fe5c 	bl	800dcfc <xTaskRemoveFromEventList>
 800d044:	4603      	mov	r3, r0
 800d046:	2b00      	cmp	r3, #0
 800d048:	d001      	beq.n	800d04e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d04a:	f000 ff33 	bl	800deb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d04e:	7bbb      	ldrb	r3, [r7, #14]
 800d050:	3b01      	subs	r3, #1
 800d052:	b2db      	uxtb	r3, r3
 800d054:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d056:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	dce9      	bgt.n	800d032 <prvUnlockQueue+0x60>
 800d05e:	e000      	b.n	800d062 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d060:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	22ff      	movs	r2, #255	; 0xff
 800d066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d06a:	f7fe ffbb 	bl	800bfe4 <vPortExitCritical>
}
 800d06e:	bf00      	nop
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}

0800d076 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d076:	b580      	push	{r7, lr}
 800d078:	b084      	sub	sp, #16
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d07e:	f7fe ff81 	bl	800bf84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d086:	2b00      	cmp	r3, #0
 800d088:	d102      	bne.n	800d090 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d08a:	2301      	movs	r3, #1
 800d08c:	60fb      	str	r3, [r7, #12]
 800d08e:	e001      	b.n	800d094 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d090:	2300      	movs	r3, #0
 800d092:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d094:	f7fe ffa6 	bl	800bfe4 <vPortExitCritical>

	return xReturn;
 800d098:	68fb      	ldr	r3, [r7, #12]
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b084      	sub	sp, #16
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d0aa:	f7fe ff6b 	bl	800bf84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d102      	bne.n	800d0c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	60fb      	str	r3, [r7, #12]
 800d0be:	e001      	b.n	800d0c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0c4:	f7fe ff8e 	bl	800bfe4 <vPortExitCritical>

	return xReturn;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
	...

0800d0d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b085      	sub	sp, #20
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0de:	2300      	movs	r3, #0
 800d0e0:	60fb      	str	r3, [r7, #12]
 800d0e2:	e014      	b.n	800d10e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d0e4:	4a0f      	ldr	r2, [pc, #60]	; (800d124 <vQueueAddToRegistry+0x50>)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10b      	bne.n	800d108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d0f0:	490c      	ldr	r1, [pc, #48]	; (800d124 <vQueueAddToRegistry+0x50>)
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	683a      	ldr	r2, [r7, #0]
 800d0f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0fa:	4a0a      	ldr	r2, [pc, #40]	; (800d124 <vQueueAddToRegistry+0x50>)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	00db      	lsls	r3, r3, #3
 800d100:	4413      	add	r3, r2
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d106:	e006      	b.n	800d116 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	3301      	adds	r3, #1
 800d10c:	60fb      	str	r3, [r7, #12]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2b07      	cmp	r3, #7
 800d112:	d9e7      	bls.n	800d0e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d114:	bf00      	nop
 800d116:	bf00      	nop
 800d118:	3714      	adds	r7, #20
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr
 800d122:	bf00      	nop
 800d124:	20004a98 	.word	0x20004a98

0800d128 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d128:	b480      	push	{r7}
 800d12a:	b085      	sub	sp, #20
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d130:	2300      	movs	r3, #0
 800d132:	60fb      	str	r3, [r7, #12]
 800d134:	e016      	b.n	800d164 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d136:	4a10      	ldr	r2, [pc, #64]	; (800d178 <vQueueUnregisterQueue+0x50>)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	00db      	lsls	r3, r3, #3
 800d13c:	4413      	add	r3, r2
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	429a      	cmp	r2, r3
 800d144:	d10b      	bne.n	800d15e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d146:	4a0c      	ldr	r2, [pc, #48]	; (800d178 <vQueueUnregisterQueue+0x50>)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2100      	movs	r1, #0
 800d14c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d150:	4a09      	ldr	r2, [pc, #36]	; (800d178 <vQueueUnregisterQueue+0x50>)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	00db      	lsls	r3, r3, #3
 800d156:	4413      	add	r3, r2
 800d158:	2200      	movs	r2, #0
 800d15a:	605a      	str	r2, [r3, #4]
				break;
 800d15c:	e006      	b.n	800d16c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	3301      	adds	r3, #1
 800d162:	60fb      	str	r3, [r7, #12]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2b07      	cmp	r3, #7
 800d168:	d9e5      	bls.n	800d136 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d16a:	bf00      	nop
 800d16c:	bf00      	nop
 800d16e:	3714      	adds	r7, #20
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr
 800d178:	20004a98 	.word	0x20004a98

0800d17c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b086      	sub	sp, #24
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d18c:	f7fe fefa 	bl	800bf84 <vPortEnterCritical>
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d196:	b25b      	sxtb	r3, r3
 800d198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d19c:	d103      	bne.n	800d1a6 <vQueueWaitForMessageRestricted+0x2a>
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1ac:	b25b      	sxtb	r3, r3
 800d1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1b2:	d103      	bne.n	800d1bc <vQueueWaitForMessageRestricted+0x40>
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1bc:	f7fe ff12 	bl	800bfe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d106      	bne.n	800d1d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	3324      	adds	r3, #36	; 0x24
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	68b9      	ldr	r1, [r7, #8]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f000 fd67 	bl	800dca4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d1d6:	6978      	ldr	r0, [r7, #20]
 800d1d8:	f7ff fefb 	bl	800cfd2 <prvUnlockQueue>
	}
 800d1dc:	bf00      	nop
 800d1de:	3718      	adds	r7, #24
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08e      	sub	sp, #56	; 0x38
 800d1e8:	af04      	add	r7, sp, #16
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
 800d1f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d10a      	bne.n	800d20e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fc:	f383 8811 	msr	BASEPRI, r3
 800d200:	f3bf 8f6f 	isb	sy
 800d204:	f3bf 8f4f 	dsb	sy
 800d208:	623b      	str	r3, [r7, #32]
}
 800d20a:	bf00      	nop
 800d20c:	e7fe      	b.n	800d20c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d210:	2b00      	cmp	r3, #0
 800d212:	d10a      	bne.n	800d22a <xTaskCreateStatic+0x46>
	__asm volatile
 800d214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d218:	f383 8811 	msr	BASEPRI, r3
 800d21c:	f3bf 8f6f 	isb	sy
 800d220:	f3bf 8f4f 	dsb	sy
 800d224:	61fb      	str	r3, [r7, #28]
}
 800d226:	bf00      	nop
 800d228:	e7fe      	b.n	800d228 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d22a:	23bc      	movs	r3, #188	; 0xbc
 800d22c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	2bbc      	cmp	r3, #188	; 0xbc
 800d232:	d00a      	beq.n	800d24a <xTaskCreateStatic+0x66>
	__asm volatile
 800d234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d238:	f383 8811 	msr	BASEPRI, r3
 800d23c:	f3bf 8f6f 	isb	sy
 800d240:	f3bf 8f4f 	dsb	sy
 800d244:	61bb      	str	r3, [r7, #24]
}
 800d246:	bf00      	nop
 800d248:	e7fe      	b.n	800d248 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d24a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d01e      	beq.n	800d290 <xTaskCreateStatic+0xac>
 800d252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d254:	2b00      	cmp	r3, #0
 800d256:	d01b      	beq.n	800d290 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d260:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d264:	2202      	movs	r2, #2
 800d266:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d26a:	2300      	movs	r3, #0
 800d26c:	9303      	str	r3, [sp, #12]
 800d26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d270:	9302      	str	r3, [sp, #8]
 800d272:	f107 0314 	add.w	r3, r7, #20
 800d276:	9301      	str	r3, [sp, #4]
 800d278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	68b9      	ldr	r1, [r7, #8]
 800d282:	68f8      	ldr	r0, [r7, #12]
 800d284:	f000 f850 	bl	800d328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d28a:	f000 f8f3 	bl	800d474 <prvAddNewTaskToReadyList>
 800d28e:	e001      	b.n	800d294 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d290:	2300      	movs	r3, #0
 800d292:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d294:	697b      	ldr	r3, [r7, #20]
	}
 800d296:	4618      	mov	r0, r3
 800d298:	3728      	adds	r7, #40	; 0x28
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b08c      	sub	sp, #48	; 0x30
 800d2a2:	af04      	add	r7, sp, #16
 800d2a4:	60f8      	str	r0, [r7, #12]
 800d2a6:	60b9      	str	r1, [r7, #8]
 800d2a8:	603b      	str	r3, [r7, #0]
 800d2aa:	4613      	mov	r3, r2
 800d2ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d2ae:	88fb      	ldrh	r3, [r7, #6]
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7fe fa98 	bl	800b7e8 <pvPortMalloc>
 800d2b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d00e      	beq.n	800d2de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d2c0:	20bc      	movs	r0, #188	; 0xbc
 800d2c2:	f7fe fa91 	bl	800b7e8 <pvPortMalloc>
 800d2c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d003      	beq.n	800d2d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	697a      	ldr	r2, [r7, #20]
 800d2d2:	631a      	str	r2, [r3, #48]	; 0x30
 800d2d4:	e005      	b.n	800d2e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d2d6:	6978      	ldr	r0, [r7, #20]
 800d2d8:	f7fe fb52 	bl	800b980 <vPortFree>
 800d2dc:	e001      	b.n	800d2e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d017      	beq.n	800d318 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d2f0:	88fa      	ldrh	r2, [r7, #6]
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	9303      	str	r3, [sp, #12]
 800d2f6:	69fb      	ldr	r3, [r7, #28]
 800d2f8:	9302      	str	r3, [sp, #8]
 800d2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fc:	9301      	str	r3, [sp, #4]
 800d2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	68b9      	ldr	r1, [r7, #8]
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f000 f80e 	bl	800d328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d30c:	69f8      	ldr	r0, [r7, #28]
 800d30e:	f000 f8b1 	bl	800d474 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d312:	2301      	movs	r3, #1
 800d314:	61bb      	str	r3, [r7, #24]
 800d316:	e002      	b.n	800d31e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d318:	f04f 33ff 	mov.w	r3, #4294967295
 800d31c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d31e:	69bb      	ldr	r3, [r7, #24]
	}
 800d320:	4618      	mov	r0, r3
 800d322:	3720      	adds	r7, #32
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b088      	sub	sp, #32
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
 800d334:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d338:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	461a      	mov	r2, r3
 800d340:	21a5      	movs	r1, #165	; 0xa5
 800d342:	f001 fdde 	bl	800ef02 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d350:	3b01      	subs	r3, #1
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	4413      	add	r3, r2
 800d356:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	f023 0307 	bic.w	r3, r3, #7
 800d35e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	f003 0307 	and.w	r3, r3, #7
 800d366:	2b00      	cmp	r3, #0
 800d368:	d00a      	beq.n	800d380 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36e:	f383 8811 	msr	BASEPRI, r3
 800d372:	f3bf 8f6f 	isb	sy
 800d376:	f3bf 8f4f 	dsb	sy
 800d37a:	617b      	str	r3, [r7, #20]
}
 800d37c:	bf00      	nop
 800d37e:	e7fe      	b.n	800d37e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d01f      	beq.n	800d3c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d386:	2300      	movs	r3, #0
 800d388:	61fb      	str	r3, [r7, #28]
 800d38a:	e012      	b.n	800d3b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d38c:	68ba      	ldr	r2, [r7, #8]
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	4413      	add	r3, r2
 800d392:	7819      	ldrb	r1, [r3, #0]
 800d394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	4413      	add	r3, r2
 800d39a:	3334      	adds	r3, #52	; 0x34
 800d39c:	460a      	mov	r2, r1
 800d39e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d3a0:	68ba      	ldr	r2, [r7, #8]
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	4413      	add	r3, r2
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d006      	beq.n	800d3ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	61fb      	str	r3, [r7, #28]
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	2b0f      	cmp	r3, #15
 800d3b6:	d9e9      	bls.n	800d38c <prvInitialiseNewTask+0x64>
 800d3b8:	e000      	b.n	800d3bc <prvInitialiseNewTask+0x94>
			{
				break;
 800d3ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d3c4:	e003      	b.n	800d3ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d0:	2b37      	cmp	r3, #55	; 0x37
 800d3d2:	d901      	bls.n	800d3d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d3d4:	2337      	movs	r3, #55	; 0x37
 800d3d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ec:	3304      	adds	r3, #4
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7fe fc04 	bl	800bbfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f6:	3318      	adds	r3, #24
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fe fbff 	bl	800bbfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d402:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d406:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d412:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d416:	2200      	movs	r2, #0
 800d418:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41e:	2200      	movs	r2, #0
 800d420:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d426:	3354      	adds	r3, #84	; 0x54
 800d428:	2260      	movs	r2, #96	; 0x60
 800d42a:	2100      	movs	r1, #0
 800d42c:	4618      	mov	r0, r3
 800d42e:	f001 fd68 	bl	800ef02 <memset>
 800d432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d434:	4a0c      	ldr	r2, [pc, #48]	; (800d468 <prvInitialiseNewTask+0x140>)
 800d436:	659a      	str	r2, [r3, #88]	; 0x58
 800d438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43a:	4a0c      	ldr	r2, [pc, #48]	; (800d46c <prvInitialiseNewTask+0x144>)
 800d43c:	65da      	str	r2, [r3, #92]	; 0x5c
 800d43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d440:	4a0b      	ldr	r2, [pc, #44]	; (800d470 <prvInitialiseNewTask+0x148>)
 800d442:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d444:	683a      	ldr	r2, [r7, #0]
 800d446:	68f9      	ldr	r1, [r7, #12]
 800d448:	69b8      	ldr	r0, [r7, #24]
 800d44a:	f7fe fc6b 	bl	800bd24 <pxPortInitialiseStack>
 800d44e:	4602      	mov	r2, r0
 800d450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d452:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d456:	2b00      	cmp	r3, #0
 800d458:	d002      	beq.n	800d460 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d45e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d460:	bf00      	nop
 800d462:	3720      	adds	r7, #32
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	08016270 	.word	0x08016270
 800d46c:	08016290 	.word	0x08016290
 800d470:	08016250 	.word	0x08016250

0800d474 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d47c:	f7fe fd82 	bl	800bf84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d480:	4b2d      	ldr	r3, [pc, #180]	; (800d538 <prvAddNewTaskToReadyList+0xc4>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	3301      	adds	r3, #1
 800d486:	4a2c      	ldr	r2, [pc, #176]	; (800d538 <prvAddNewTaskToReadyList+0xc4>)
 800d488:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d48a:	4b2c      	ldr	r3, [pc, #176]	; (800d53c <prvAddNewTaskToReadyList+0xc8>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d109      	bne.n	800d4a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d492:	4a2a      	ldr	r2, [pc, #168]	; (800d53c <prvAddNewTaskToReadyList+0xc8>)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d498:	4b27      	ldr	r3, [pc, #156]	; (800d538 <prvAddNewTaskToReadyList+0xc4>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d110      	bne.n	800d4c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d4a0:	f000 fd2c 	bl	800defc <prvInitialiseTaskLists>
 800d4a4:	e00d      	b.n	800d4c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d4a6:	4b26      	ldr	r3, [pc, #152]	; (800d540 <prvAddNewTaskToReadyList+0xcc>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d109      	bne.n	800d4c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d4ae:	4b23      	ldr	r3, [pc, #140]	; (800d53c <prvAddNewTaskToReadyList+0xc8>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d802      	bhi.n	800d4c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d4bc:	4a1f      	ldr	r2, [pc, #124]	; (800d53c <prvAddNewTaskToReadyList+0xc8>)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d4c2:	4b20      	ldr	r3, [pc, #128]	; (800d544 <prvAddNewTaskToReadyList+0xd0>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	4a1e      	ldr	r2, [pc, #120]	; (800d544 <prvAddNewTaskToReadyList+0xd0>)
 800d4ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d4cc:	4b1d      	ldr	r3, [pc, #116]	; (800d544 <prvAddNewTaskToReadyList+0xd0>)
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d8:	4b1b      	ldr	r3, [pc, #108]	; (800d548 <prvAddNewTaskToReadyList+0xd4>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d903      	bls.n	800d4e8 <prvAddNewTaskToReadyList+0x74>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e4:	4a18      	ldr	r2, [pc, #96]	; (800d548 <prvAddNewTaskToReadyList+0xd4>)
 800d4e6:	6013      	str	r3, [r2, #0]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	4a15      	ldr	r2, [pc, #84]	; (800d54c <prvAddNewTaskToReadyList+0xd8>)
 800d4f6:	441a      	add	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	4610      	mov	r0, r2
 800d500:	f7fe fb89 	bl	800bc16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d504:	f7fe fd6e 	bl	800bfe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d508:	4b0d      	ldr	r3, [pc, #52]	; (800d540 <prvAddNewTaskToReadyList+0xcc>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00e      	beq.n	800d52e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d510:	4b0a      	ldr	r3, [pc, #40]	; (800d53c <prvAddNewTaskToReadyList+0xc8>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d207      	bcs.n	800d52e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d51e:	4b0c      	ldr	r3, [pc, #48]	; (800d550 <prvAddNewTaskToReadyList+0xdc>)
 800d520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d524:	601a      	str	r2, [r3, #0]
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d52e:	bf00      	nop
 800d530:	3708      	adds	r7, #8
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	20004fac 	.word	0x20004fac
 800d53c:	20004ad8 	.word	0x20004ad8
 800d540:	20004fb8 	.word	0x20004fb8
 800d544:	20004fc8 	.word	0x20004fc8
 800d548:	20004fb4 	.word	0x20004fb4
 800d54c:	20004adc 	.word	0x20004adc
 800d550:	e000ed04 	.word	0xe000ed04

0800d554 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d55c:	2300      	movs	r3, #0
 800d55e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d017      	beq.n	800d596 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d566:	4b13      	ldr	r3, [pc, #76]	; (800d5b4 <vTaskDelay+0x60>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d00a      	beq.n	800d584 <vTaskDelay+0x30>
	__asm volatile
 800d56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d572:	f383 8811 	msr	BASEPRI, r3
 800d576:	f3bf 8f6f 	isb	sy
 800d57a:	f3bf 8f4f 	dsb	sy
 800d57e:	60bb      	str	r3, [r7, #8]
}
 800d580:	bf00      	nop
 800d582:	e7fe      	b.n	800d582 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d584:	f000 f990 	bl	800d8a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d588:	2100      	movs	r1, #0
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 ff02 	bl	800e394 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d590:	f000 f998 	bl	800d8c4 <xTaskResumeAll>
 800d594:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d107      	bne.n	800d5ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d59c:	4b06      	ldr	r3, [pc, #24]	; (800d5b8 <vTaskDelay+0x64>)
 800d59e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5a2:	601a      	str	r2, [r3, #0]
 800d5a4:	f3bf 8f4f 	dsb	sy
 800d5a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d5ac:	bf00      	nop
 800d5ae:	3710      	adds	r7, #16
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	20004fd4 	.word	0x20004fd4
 800d5b8:	e000ed04 	.word	0xe000ed04

0800d5bc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d5c4:	f7fe fcde 	bl	800bf84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d102      	bne.n	800d5d4 <vTaskSuspend+0x18>
 800d5ce:	4b30      	ldr	r3, [pc, #192]	; (800d690 <vTaskSuspend+0xd4>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	e000      	b.n	800d5d6 <vTaskSuspend+0x1a>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	3304      	adds	r3, #4
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7fe fb77 	bl	800bcd0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d004      	beq.n	800d5f4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	3318      	adds	r3, #24
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7fe fb6e 	bl	800bcd0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	3304      	adds	r3, #4
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	4826      	ldr	r0, [pc, #152]	; (800d694 <vTaskSuspend+0xd8>)
 800d5fc:	f7fe fb0b 	bl	800bc16 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d606:	b2db      	uxtb	r3, r3
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d103      	bne.n	800d614 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2200      	movs	r2, #0
 800d610:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d614:	f7fe fce6 	bl	800bfe4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d618:	4b1f      	ldr	r3, [pc, #124]	; (800d698 <vTaskSuspend+0xdc>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d005      	beq.n	800d62c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d620:	f7fe fcb0 	bl	800bf84 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d624:	f000 fd0c 	bl	800e040 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d628:	f7fe fcdc 	bl	800bfe4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800d62c:	4b18      	ldr	r3, [pc, #96]	; (800d690 <vTaskSuspend+0xd4>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	68fa      	ldr	r2, [r7, #12]
 800d632:	429a      	cmp	r2, r3
 800d634:	d127      	bne.n	800d686 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800d636:	4b18      	ldr	r3, [pc, #96]	; (800d698 <vTaskSuspend+0xdc>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d017      	beq.n	800d66e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800d63e:	4b17      	ldr	r3, [pc, #92]	; (800d69c <vTaskSuspend+0xe0>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00a      	beq.n	800d65c <vTaskSuspend+0xa0>
	__asm volatile
 800d646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64a:	f383 8811 	msr	BASEPRI, r3
 800d64e:	f3bf 8f6f 	isb	sy
 800d652:	f3bf 8f4f 	dsb	sy
 800d656:	60bb      	str	r3, [r7, #8]
}
 800d658:	bf00      	nop
 800d65a:	e7fe      	b.n	800d65a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800d65c:	4b10      	ldr	r3, [pc, #64]	; (800d6a0 <vTaskSuspend+0xe4>)
 800d65e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d662:	601a      	str	r2, [r3, #0]
 800d664:	f3bf 8f4f 	dsb	sy
 800d668:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d66c:	e00b      	b.n	800d686 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800d66e:	4b09      	ldr	r3, [pc, #36]	; (800d694 <vTaskSuspend+0xd8>)
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	4b0c      	ldr	r3, [pc, #48]	; (800d6a4 <vTaskSuspend+0xe8>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	429a      	cmp	r2, r3
 800d678:	d103      	bne.n	800d682 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800d67a:	4b05      	ldr	r3, [pc, #20]	; (800d690 <vTaskSuspend+0xd4>)
 800d67c:	2200      	movs	r2, #0
 800d67e:	601a      	str	r2, [r3, #0]
	}
 800d680:	e001      	b.n	800d686 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800d682:	f000 fa87 	bl	800db94 <vTaskSwitchContext>
	}
 800d686:	bf00      	nop
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	20004ad8 	.word	0x20004ad8
 800d694:	20004f98 	.word	0x20004f98
 800d698:	20004fb8 	.word	0x20004fb8
 800d69c:	20004fd4 	.word	0x20004fd4
 800d6a0:	e000ed04 	.word	0xe000ed04
 800d6a4:	20004fac 	.word	0x20004fac

0800d6a8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b087      	sub	sp, #28
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d10a      	bne.n	800d6d4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	60fb      	str	r3, [r7, #12]
}
 800d6d0:	bf00      	nop
 800d6d2:	e7fe      	b.n	800d6d2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	695b      	ldr	r3, [r3, #20]
 800d6d8:	4a0a      	ldr	r2, [pc, #40]	; (800d704 <prvTaskIsTaskSuspended+0x5c>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d10a      	bne.n	800d6f4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e2:	4a09      	ldr	r2, [pc, #36]	; (800d708 <prvTaskIsTaskSuspended+0x60>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d005      	beq.n	800d6f4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d101      	bne.n	800d6f4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6f4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	371c      	adds	r7, #28
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr
 800d702:	bf00      	nop
 800d704:	20004f98 	.word	0x20004f98
 800d708:	20004f6c 	.word	0x20004f6c

0800d70c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d10a      	bne.n	800d734 <vTaskResume+0x28>
	__asm volatile
 800d71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d722:	f383 8811 	msr	BASEPRI, r3
 800d726:	f3bf 8f6f 	isb	sy
 800d72a:	f3bf 8f4f 	dsb	sy
 800d72e:	60bb      	str	r3, [r7, #8]
}
 800d730:	bf00      	nop
 800d732:	e7fe      	b.n	800d732 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800d734:	4b20      	ldr	r3, [pc, #128]	; (800d7b8 <vTaskResume+0xac>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	68fa      	ldr	r2, [r7, #12]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d038      	beq.n	800d7b0 <vTaskResume+0xa4>
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d035      	beq.n	800d7b0 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800d744:	f7fe fc1e 	bl	800bf84 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f7ff ffad 	bl	800d6a8 <prvTaskIsTaskSuspended>
 800d74e:	4603      	mov	r3, r0
 800d750:	2b00      	cmp	r3, #0
 800d752:	d02b      	beq.n	800d7ac <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	3304      	adds	r3, #4
 800d758:	4618      	mov	r0, r3
 800d75a:	f7fe fab9 	bl	800bcd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d762:	4b16      	ldr	r3, [pc, #88]	; (800d7bc <vTaskResume+0xb0>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	429a      	cmp	r2, r3
 800d768:	d903      	bls.n	800d772 <vTaskResume+0x66>
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d76e:	4a13      	ldr	r2, [pc, #76]	; (800d7bc <vTaskResume+0xb0>)
 800d770:	6013      	str	r3, [r2, #0]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d776:	4613      	mov	r3, r2
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	4413      	add	r3, r2
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	4a10      	ldr	r2, [pc, #64]	; (800d7c0 <vTaskResume+0xb4>)
 800d780:	441a      	add	r2, r3
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	3304      	adds	r3, #4
 800d786:	4619      	mov	r1, r3
 800d788:	4610      	mov	r0, r2
 800d78a:	f7fe fa44 	bl	800bc16 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d792:	4b09      	ldr	r3, [pc, #36]	; (800d7b8 <vTaskResume+0xac>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d798:	429a      	cmp	r2, r3
 800d79a:	d307      	bcc.n	800d7ac <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800d79c:	4b09      	ldr	r3, [pc, #36]	; (800d7c4 <vTaskResume+0xb8>)
 800d79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7a2:	601a      	str	r2, [r3, #0]
 800d7a4:	f3bf 8f4f 	dsb	sy
 800d7a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800d7ac:	f7fe fc1a 	bl	800bfe4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d7b0:	bf00      	nop
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	20004ad8 	.word	0x20004ad8
 800d7bc:	20004fb4 	.word	0x20004fb4
 800d7c0:	20004adc 	.word	0x20004adc
 800d7c4:	e000ed04 	.word	0xe000ed04

0800d7c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b08a      	sub	sp, #40	; 0x28
 800d7cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d7d6:	463a      	mov	r2, r7
 800d7d8:	1d39      	adds	r1, r7, #4
 800d7da:	f107 0308 	add.w	r3, r7, #8
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fd ffce 	bl	800b780 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d7e4:	6839      	ldr	r1, [r7, #0]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	9202      	str	r2, [sp, #8]
 800d7ec:	9301      	str	r3, [sp, #4]
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	9300      	str	r3, [sp, #0]
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	460a      	mov	r2, r1
 800d7f6:	4924      	ldr	r1, [pc, #144]	; (800d888 <vTaskStartScheduler+0xc0>)
 800d7f8:	4824      	ldr	r0, [pc, #144]	; (800d88c <vTaskStartScheduler+0xc4>)
 800d7fa:	f7ff fcf3 	bl	800d1e4 <xTaskCreateStatic>
 800d7fe:	4603      	mov	r3, r0
 800d800:	4a23      	ldr	r2, [pc, #140]	; (800d890 <vTaskStartScheduler+0xc8>)
 800d802:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d804:	4b22      	ldr	r3, [pc, #136]	; (800d890 <vTaskStartScheduler+0xc8>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d80c:	2301      	movs	r3, #1
 800d80e:	617b      	str	r3, [r7, #20]
 800d810:	e001      	b.n	800d816 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d812:	2300      	movs	r3, #0
 800d814:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d102      	bne.n	800d822 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d81c:	f000 fe0e 	bl	800e43c <xTimerCreateTimerTask>
 800d820:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	2b01      	cmp	r3, #1
 800d826:	d11b      	bne.n	800d860 <vTaskStartScheduler+0x98>
	__asm volatile
 800d828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82c:	f383 8811 	msr	BASEPRI, r3
 800d830:	f3bf 8f6f 	isb	sy
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	613b      	str	r3, [r7, #16]
}
 800d83a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d83c:	4b15      	ldr	r3, [pc, #84]	; (800d894 <vTaskStartScheduler+0xcc>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	3354      	adds	r3, #84	; 0x54
 800d842:	4a15      	ldr	r2, [pc, #84]	; (800d898 <vTaskStartScheduler+0xd0>)
 800d844:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d846:	4b15      	ldr	r3, [pc, #84]	; (800d89c <vTaskStartScheduler+0xd4>)
 800d848:	f04f 32ff 	mov.w	r2, #4294967295
 800d84c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d84e:	4b14      	ldr	r3, [pc, #80]	; (800d8a0 <vTaskStartScheduler+0xd8>)
 800d850:	2201      	movs	r2, #1
 800d852:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d854:	4b13      	ldr	r3, [pc, #76]	; (800d8a4 <vTaskStartScheduler+0xdc>)
 800d856:	2200      	movs	r2, #0
 800d858:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d85a:	f7fe faf1 	bl	800be40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d85e:	e00e      	b.n	800d87e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d866:	d10a      	bne.n	800d87e <vTaskStartScheduler+0xb6>
	__asm volatile
 800d868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86c:	f383 8811 	msr	BASEPRI, r3
 800d870:	f3bf 8f6f 	isb	sy
 800d874:	f3bf 8f4f 	dsb	sy
 800d878:	60fb      	str	r3, [r7, #12]
}
 800d87a:	bf00      	nop
 800d87c:	e7fe      	b.n	800d87c <vTaskStartScheduler+0xb4>
}
 800d87e:	bf00      	nop
 800d880:	3718      	adds	r7, #24
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	08014c94 	.word	0x08014c94
 800d88c:	0800decd 	.word	0x0800decd
 800d890:	20004fd0 	.word	0x20004fd0
 800d894:	20004ad8 	.word	0x20004ad8
 800d898:	20000038 	.word	0x20000038
 800d89c:	20004fcc 	.word	0x20004fcc
 800d8a0:	20004fb8 	.word	0x20004fb8
 800d8a4:	20004fb0 	.word	0x20004fb0

0800d8a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d8ac:	4b04      	ldr	r3, [pc, #16]	; (800d8c0 <vTaskSuspendAll+0x18>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	4a03      	ldr	r2, [pc, #12]	; (800d8c0 <vTaskSuspendAll+0x18>)
 800d8b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d8b6:	bf00      	nop
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr
 800d8c0:	20004fd4 	.word	0x20004fd4

0800d8c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d8d2:	4b42      	ldr	r3, [pc, #264]	; (800d9dc <xTaskResumeAll+0x118>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d10a      	bne.n	800d8f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800d8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8de:	f383 8811 	msr	BASEPRI, r3
 800d8e2:	f3bf 8f6f 	isb	sy
 800d8e6:	f3bf 8f4f 	dsb	sy
 800d8ea:	603b      	str	r3, [r7, #0]
}
 800d8ec:	bf00      	nop
 800d8ee:	e7fe      	b.n	800d8ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d8f0:	f7fe fb48 	bl	800bf84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d8f4:	4b39      	ldr	r3, [pc, #228]	; (800d9dc <xTaskResumeAll+0x118>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	3b01      	subs	r3, #1
 800d8fa:	4a38      	ldr	r2, [pc, #224]	; (800d9dc <xTaskResumeAll+0x118>)
 800d8fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8fe:	4b37      	ldr	r3, [pc, #220]	; (800d9dc <xTaskResumeAll+0x118>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d162      	bne.n	800d9cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d906:	4b36      	ldr	r3, [pc, #216]	; (800d9e0 <xTaskResumeAll+0x11c>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d05e      	beq.n	800d9cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d90e:	e02f      	b.n	800d970 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d910:	4b34      	ldr	r3, [pc, #208]	; (800d9e4 <xTaskResumeAll+0x120>)
 800d912:	68db      	ldr	r3, [r3, #12]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	3318      	adds	r3, #24
 800d91c:	4618      	mov	r0, r3
 800d91e:	f7fe f9d7 	bl	800bcd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	3304      	adds	r3, #4
 800d926:	4618      	mov	r0, r3
 800d928:	f7fe f9d2 	bl	800bcd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d930:	4b2d      	ldr	r3, [pc, #180]	; (800d9e8 <xTaskResumeAll+0x124>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	429a      	cmp	r2, r3
 800d936:	d903      	bls.n	800d940 <xTaskResumeAll+0x7c>
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93c:	4a2a      	ldr	r2, [pc, #168]	; (800d9e8 <xTaskResumeAll+0x124>)
 800d93e:	6013      	str	r3, [r2, #0]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d944:	4613      	mov	r3, r2
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	4413      	add	r3, r2
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	4a27      	ldr	r2, [pc, #156]	; (800d9ec <xTaskResumeAll+0x128>)
 800d94e:	441a      	add	r2, r3
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	3304      	adds	r3, #4
 800d954:	4619      	mov	r1, r3
 800d956:	4610      	mov	r0, r2
 800d958:	f7fe f95d 	bl	800bc16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d960:	4b23      	ldr	r3, [pc, #140]	; (800d9f0 <xTaskResumeAll+0x12c>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d966:	429a      	cmp	r2, r3
 800d968:	d302      	bcc.n	800d970 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d96a:	4b22      	ldr	r3, [pc, #136]	; (800d9f4 <xTaskResumeAll+0x130>)
 800d96c:	2201      	movs	r2, #1
 800d96e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d970:	4b1c      	ldr	r3, [pc, #112]	; (800d9e4 <xTaskResumeAll+0x120>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1cb      	bne.n	800d910 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d001      	beq.n	800d982 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d97e:	f000 fb5f 	bl	800e040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d982:	4b1d      	ldr	r3, [pc, #116]	; (800d9f8 <xTaskResumeAll+0x134>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d010      	beq.n	800d9b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d98e:	f000 f847 	bl	800da20 <xTaskIncrementTick>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d002      	beq.n	800d99e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d998:	4b16      	ldr	r3, [pc, #88]	; (800d9f4 <xTaskResumeAll+0x130>)
 800d99a:	2201      	movs	r2, #1
 800d99c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	3b01      	subs	r3, #1
 800d9a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d1f1      	bne.n	800d98e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d9aa:	4b13      	ldr	r3, [pc, #76]	; (800d9f8 <xTaskResumeAll+0x134>)
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d9b0:	4b10      	ldr	r3, [pc, #64]	; (800d9f4 <xTaskResumeAll+0x130>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d009      	beq.n	800d9cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d9bc:	4b0f      	ldr	r3, [pc, #60]	; (800d9fc <xTaskResumeAll+0x138>)
 800d9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9c2:	601a      	str	r2, [r3, #0]
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d9cc:	f7fe fb0a 	bl	800bfe4 <vPortExitCritical>

	return xAlreadyYielded;
 800d9d0:	68bb      	ldr	r3, [r7, #8]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3710      	adds	r7, #16
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	20004fd4 	.word	0x20004fd4
 800d9e0:	20004fac 	.word	0x20004fac
 800d9e4:	20004f6c 	.word	0x20004f6c
 800d9e8:	20004fb4 	.word	0x20004fb4
 800d9ec:	20004adc 	.word	0x20004adc
 800d9f0:	20004ad8 	.word	0x20004ad8
 800d9f4:	20004fc0 	.word	0x20004fc0
 800d9f8:	20004fbc 	.word	0x20004fbc
 800d9fc:	e000ed04 	.word	0xe000ed04

0800da00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800da06:	4b05      	ldr	r3, [pc, #20]	; (800da1c <xTaskGetTickCount+0x1c>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800da0c:	687b      	ldr	r3, [r7, #4]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	370c      	adds	r7, #12
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	20004fb0 	.word	0x20004fb0

0800da20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b086      	sub	sp, #24
 800da24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800da26:	2300      	movs	r3, #0
 800da28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da2a:	4b4f      	ldr	r3, [pc, #316]	; (800db68 <xTaskIncrementTick+0x148>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	f040 808f 	bne.w	800db52 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da34:	4b4d      	ldr	r3, [pc, #308]	; (800db6c <xTaskIncrementTick+0x14c>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	3301      	adds	r3, #1
 800da3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800da3c:	4a4b      	ldr	r2, [pc, #300]	; (800db6c <xTaskIncrementTick+0x14c>)
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d120      	bne.n	800da8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800da48:	4b49      	ldr	r3, [pc, #292]	; (800db70 <xTaskIncrementTick+0x150>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d00a      	beq.n	800da68 <xTaskIncrementTick+0x48>
	__asm volatile
 800da52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da56:	f383 8811 	msr	BASEPRI, r3
 800da5a:	f3bf 8f6f 	isb	sy
 800da5e:	f3bf 8f4f 	dsb	sy
 800da62:	603b      	str	r3, [r7, #0]
}
 800da64:	bf00      	nop
 800da66:	e7fe      	b.n	800da66 <xTaskIncrementTick+0x46>
 800da68:	4b41      	ldr	r3, [pc, #260]	; (800db70 <xTaskIncrementTick+0x150>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	60fb      	str	r3, [r7, #12]
 800da6e:	4b41      	ldr	r3, [pc, #260]	; (800db74 <xTaskIncrementTick+0x154>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	4a3f      	ldr	r2, [pc, #252]	; (800db70 <xTaskIncrementTick+0x150>)
 800da74:	6013      	str	r3, [r2, #0]
 800da76:	4a3f      	ldr	r2, [pc, #252]	; (800db74 <xTaskIncrementTick+0x154>)
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6013      	str	r3, [r2, #0]
 800da7c:	4b3e      	ldr	r3, [pc, #248]	; (800db78 <xTaskIncrementTick+0x158>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	3301      	adds	r3, #1
 800da82:	4a3d      	ldr	r2, [pc, #244]	; (800db78 <xTaskIncrementTick+0x158>)
 800da84:	6013      	str	r3, [r2, #0]
 800da86:	f000 fadb 	bl	800e040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800da8a:	4b3c      	ldr	r3, [pc, #240]	; (800db7c <xTaskIncrementTick+0x15c>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	693a      	ldr	r2, [r7, #16]
 800da90:	429a      	cmp	r2, r3
 800da92:	d349      	bcc.n	800db28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da94:	4b36      	ldr	r3, [pc, #216]	; (800db70 <xTaskIncrementTick+0x150>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d104      	bne.n	800daa8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da9e:	4b37      	ldr	r3, [pc, #220]	; (800db7c <xTaskIncrementTick+0x15c>)
 800daa0:	f04f 32ff 	mov.w	r2, #4294967295
 800daa4:	601a      	str	r2, [r3, #0]
					break;
 800daa6:	e03f      	b.n	800db28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daa8:	4b31      	ldr	r3, [pc, #196]	; (800db70 <xTaskIncrementTick+0x150>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	68db      	ldr	r3, [r3, #12]
 800dab0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dab8:	693a      	ldr	r2, [r7, #16]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d203      	bcs.n	800dac8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dac0:	4a2e      	ldr	r2, [pc, #184]	; (800db7c <xTaskIncrementTick+0x15c>)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dac6:	e02f      	b.n	800db28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	3304      	adds	r3, #4
 800dacc:	4618      	mov	r0, r3
 800dace:	f7fe f8ff 	bl	800bcd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d004      	beq.n	800dae4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	3318      	adds	r3, #24
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fe f8f6 	bl	800bcd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dae8:	4b25      	ldr	r3, [pc, #148]	; (800db80 <xTaskIncrementTick+0x160>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	429a      	cmp	r2, r3
 800daee:	d903      	bls.n	800daf8 <xTaskIncrementTick+0xd8>
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf4:	4a22      	ldr	r2, [pc, #136]	; (800db80 <xTaskIncrementTick+0x160>)
 800daf6:	6013      	str	r3, [r2, #0]
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dafc:	4613      	mov	r3, r2
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	4413      	add	r3, r2
 800db02:	009b      	lsls	r3, r3, #2
 800db04:	4a1f      	ldr	r2, [pc, #124]	; (800db84 <xTaskIncrementTick+0x164>)
 800db06:	441a      	add	r2, r3
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	3304      	adds	r3, #4
 800db0c:	4619      	mov	r1, r3
 800db0e:	4610      	mov	r0, r2
 800db10:	f7fe f881 	bl	800bc16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db18:	4b1b      	ldr	r3, [pc, #108]	; (800db88 <xTaskIncrementTick+0x168>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db1e:	429a      	cmp	r2, r3
 800db20:	d3b8      	bcc.n	800da94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800db22:	2301      	movs	r3, #1
 800db24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db26:	e7b5      	b.n	800da94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800db28:	4b17      	ldr	r3, [pc, #92]	; (800db88 <xTaskIncrementTick+0x168>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db2e:	4915      	ldr	r1, [pc, #84]	; (800db84 <xTaskIncrementTick+0x164>)
 800db30:	4613      	mov	r3, r2
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	4413      	add	r3, r2
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	440b      	add	r3, r1
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d901      	bls.n	800db44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800db40:	2301      	movs	r3, #1
 800db42:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800db44:	4b11      	ldr	r3, [pc, #68]	; (800db8c <xTaskIncrementTick+0x16c>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d007      	beq.n	800db5c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800db4c:	2301      	movs	r3, #1
 800db4e:	617b      	str	r3, [r7, #20]
 800db50:	e004      	b.n	800db5c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800db52:	4b0f      	ldr	r3, [pc, #60]	; (800db90 <xTaskIncrementTick+0x170>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	3301      	adds	r3, #1
 800db58:	4a0d      	ldr	r2, [pc, #52]	; (800db90 <xTaskIncrementTick+0x170>)
 800db5a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800db5c:	697b      	ldr	r3, [r7, #20]
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3718      	adds	r7, #24
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	20004fd4 	.word	0x20004fd4
 800db6c:	20004fb0 	.word	0x20004fb0
 800db70:	20004f64 	.word	0x20004f64
 800db74:	20004f68 	.word	0x20004f68
 800db78:	20004fc4 	.word	0x20004fc4
 800db7c:	20004fcc 	.word	0x20004fcc
 800db80:	20004fb4 	.word	0x20004fb4
 800db84:	20004adc 	.word	0x20004adc
 800db88:	20004ad8 	.word	0x20004ad8
 800db8c:	20004fc0 	.word	0x20004fc0
 800db90:	20004fbc 	.word	0x20004fbc

0800db94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800db9a:	4b2a      	ldr	r3, [pc, #168]	; (800dc44 <vTaskSwitchContext+0xb0>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d003      	beq.n	800dbaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dba2:	4b29      	ldr	r3, [pc, #164]	; (800dc48 <vTaskSwitchContext+0xb4>)
 800dba4:	2201      	movs	r2, #1
 800dba6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dba8:	e046      	b.n	800dc38 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800dbaa:	4b27      	ldr	r3, [pc, #156]	; (800dc48 <vTaskSwitchContext+0xb4>)
 800dbac:	2200      	movs	r2, #0
 800dbae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbb0:	4b26      	ldr	r3, [pc, #152]	; (800dc4c <vTaskSwitchContext+0xb8>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	60fb      	str	r3, [r7, #12]
 800dbb6:	e010      	b.n	800dbda <vTaskSwitchContext+0x46>
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d10a      	bne.n	800dbd4 <vTaskSwitchContext+0x40>
	__asm volatile
 800dbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc2:	f383 8811 	msr	BASEPRI, r3
 800dbc6:	f3bf 8f6f 	isb	sy
 800dbca:	f3bf 8f4f 	dsb	sy
 800dbce:	607b      	str	r3, [r7, #4]
}
 800dbd0:	bf00      	nop
 800dbd2:	e7fe      	b.n	800dbd2 <vTaskSwitchContext+0x3e>
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	3b01      	subs	r3, #1
 800dbd8:	60fb      	str	r3, [r7, #12]
 800dbda:	491d      	ldr	r1, [pc, #116]	; (800dc50 <vTaskSwitchContext+0xbc>)
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	4613      	mov	r3, r2
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	4413      	add	r3, r2
 800dbe4:	009b      	lsls	r3, r3, #2
 800dbe6:	440b      	add	r3, r1
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d0e4      	beq.n	800dbb8 <vTaskSwitchContext+0x24>
 800dbee:	68fa      	ldr	r2, [r7, #12]
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4413      	add	r3, r2
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4a15      	ldr	r2, [pc, #84]	; (800dc50 <vTaskSwitchContext+0xbc>)
 800dbfa:	4413      	add	r3, r2
 800dbfc:	60bb      	str	r3, [r7, #8]
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	685a      	ldr	r2, [r3, #4]
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	605a      	str	r2, [r3, #4]
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	3308      	adds	r3, #8
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d104      	bne.n	800dc1e <vTaskSwitchContext+0x8a>
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	685a      	ldr	r2, [r3, #4]
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	605a      	str	r2, [r3, #4]
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	4a0b      	ldr	r2, [pc, #44]	; (800dc54 <vTaskSwitchContext+0xc0>)
 800dc26:	6013      	str	r3, [r2, #0]
 800dc28:	4a08      	ldr	r2, [pc, #32]	; (800dc4c <vTaskSwitchContext+0xb8>)
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dc2e:	4b09      	ldr	r3, [pc, #36]	; (800dc54 <vTaskSwitchContext+0xc0>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	3354      	adds	r3, #84	; 0x54
 800dc34:	4a08      	ldr	r2, [pc, #32]	; (800dc58 <vTaskSwitchContext+0xc4>)
 800dc36:	6013      	str	r3, [r2, #0]
}
 800dc38:	bf00      	nop
 800dc3a:	3714      	adds	r7, #20
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr
 800dc44:	20004fd4 	.word	0x20004fd4
 800dc48:	20004fc0 	.word	0x20004fc0
 800dc4c:	20004fb4 	.word	0x20004fb4
 800dc50:	20004adc 	.word	0x20004adc
 800dc54:	20004ad8 	.word	0x20004ad8
 800dc58:	20000038 	.word	0x20000038

0800dc5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10a      	bne.n	800dc82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc70:	f383 8811 	msr	BASEPRI, r3
 800dc74:	f3bf 8f6f 	isb	sy
 800dc78:	f3bf 8f4f 	dsb	sy
 800dc7c:	60fb      	str	r3, [r7, #12]
}
 800dc7e:	bf00      	nop
 800dc80:	e7fe      	b.n	800dc80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc82:	4b07      	ldr	r3, [pc, #28]	; (800dca0 <vTaskPlaceOnEventList+0x44>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	3318      	adds	r3, #24
 800dc88:	4619      	mov	r1, r3
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f7fd ffe7 	bl	800bc5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dc90:	2101      	movs	r1, #1
 800dc92:	6838      	ldr	r0, [r7, #0]
 800dc94:	f000 fb7e 	bl	800e394 <prvAddCurrentTaskToDelayedList>
}
 800dc98:	bf00      	nop
 800dc9a:	3710      	adds	r7, #16
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	20004ad8 	.word	0x20004ad8

0800dca4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b086      	sub	sp, #24
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d10a      	bne.n	800dccc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcba:	f383 8811 	msr	BASEPRI, r3
 800dcbe:	f3bf 8f6f 	isb	sy
 800dcc2:	f3bf 8f4f 	dsb	sy
 800dcc6:	617b      	str	r3, [r7, #20]
}
 800dcc8:	bf00      	nop
 800dcca:	e7fe      	b.n	800dcca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dccc:	4b0a      	ldr	r3, [pc, #40]	; (800dcf8 <vTaskPlaceOnEventListRestricted+0x54>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	3318      	adds	r3, #24
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	68f8      	ldr	r0, [r7, #12]
 800dcd6:	f7fd ff9e 	bl	800bc16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d002      	beq.n	800dce6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dce0:	f04f 33ff 	mov.w	r3, #4294967295
 800dce4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dce6:	6879      	ldr	r1, [r7, #4]
 800dce8:	68b8      	ldr	r0, [r7, #8]
 800dcea:	f000 fb53 	bl	800e394 <prvAddCurrentTaskToDelayedList>
	}
 800dcee:	bf00      	nop
 800dcf0:	3718      	adds	r7, #24
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	20004ad8 	.word	0x20004ad8

0800dcfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	68db      	ldr	r3, [r3, #12]
 800dd08:	68db      	ldr	r3, [r3, #12]
 800dd0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d10a      	bne.n	800dd28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd16:	f383 8811 	msr	BASEPRI, r3
 800dd1a:	f3bf 8f6f 	isb	sy
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	60fb      	str	r3, [r7, #12]
}
 800dd24:	bf00      	nop
 800dd26:	e7fe      	b.n	800dd26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	3318      	adds	r3, #24
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fd ffcf 	bl	800bcd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd32:	4b1e      	ldr	r3, [pc, #120]	; (800ddac <xTaskRemoveFromEventList+0xb0>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d11d      	bne.n	800dd76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	3304      	adds	r3, #4
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7fd ffc6 	bl	800bcd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd48:	4b19      	ldr	r3, [pc, #100]	; (800ddb0 <xTaskRemoveFromEventList+0xb4>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d903      	bls.n	800dd58 <xTaskRemoveFromEventList+0x5c>
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd54:	4a16      	ldr	r2, [pc, #88]	; (800ddb0 <xTaskRemoveFromEventList+0xb4>)
 800dd56:	6013      	str	r3, [r2, #0]
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd5c:	4613      	mov	r3, r2
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	4413      	add	r3, r2
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	4a13      	ldr	r2, [pc, #76]	; (800ddb4 <xTaskRemoveFromEventList+0xb8>)
 800dd66:	441a      	add	r2, r3
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	3304      	adds	r3, #4
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	4610      	mov	r0, r2
 800dd70:	f7fd ff51 	bl	800bc16 <vListInsertEnd>
 800dd74:	e005      	b.n	800dd82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	3318      	adds	r3, #24
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	480e      	ldr	r0, [pc, #56]	; (800ddb8 <xTaskRemoveFromEventList+0xbc>)
 800dd7e:	f7fd ff4a 	bl	800bc16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd86:	4b0d      	ldr	r3, [pc, #52]	; (800ddbc <xTaskRemoveFromEventList+0xc0>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d905      	bls.n	800dd9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dd90:	2301      	movs	r3, #1
 800dd92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dd94:	4b0a      	ldr	r3, [pc, #40]	; (800ddc0 <xTaskRemoveFromEventList+0xc4>)
 800dd96:	2201      	movs	r2, #1
 800dd98:	601a      	str	r2, [r3, #0]
 800dd9a:	e001      	b.n	800dda0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dda0:	697b      	ldr	r3, [r7, #20]
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3718      	adds	r7, #24
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	20004fd4 	.word	0x20004fd4
 800ddb0:	20004fb4 	.word	0x20004fb4
 800ddb4:	20004adc 	.word	0x20004adc
 800ddb8:	20004f6c 	.word	0x20004f6c
 800ddbc:	20004ad8 	.word	0x20004ad8
 800ddc0:	20004fc0 	.word	0x20004fc0

0800ddc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ddcc:	4b06      	ldr	r3, [pc, #24]	; (800dde8 <vTaskInternalSetTimeOutState+0x24>)
 800ddce:	681a      	ldr	r2, [r3, #0]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ddd4:	4b05      	ldr	r3, [pc, #20]	; (800ddec <vTaskInternalSetTimeOutState+0x28>)
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	605a      	str	r2, [r3, #4]
}
 800dddc:	bf00      	nop
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr
 800dde8:	20004fc4 	.word	0x20004fc4
 800ddec:	20004fb0 	.word	0x20004fb0

0800ddf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b088      	sub	sp, #32
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d10a      	bne.n	800de16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800de00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de04:	f383 8811 	msr	BASEPRI, r3
 800de08:	f3bf 8f6f 	isb	sy
 800de0c:	f3bf 8f4f 	dsb	sy
 800de10:	613b      	str	r3, [r7, #16]
}
 800de12:	bf00      	nop
 800de14:	e7fe      	b.n	800de14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d10a      	bne.n	800de32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800de1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de20:	f383 8811 	msr	BASEPRI, r3
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	60fb      	str	r3, [r7, #12]
}
 800de2e:	bf00      	nop
 800de30:	e7fe      	b.n	800de30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800de32:	f7fe f8a7 	bl	800bf84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800de36:	4b1d      	ldr	r3, [pc, #116]	; (800deac <xTaskCheckForTimeOut+0xbc>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	69ba      	ldr	r2, [r7, #24]
 800de42:	1ad3      	subs	r3, r2, r3
 800de44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de4e:	d102      	bne.n	800de56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800de50:	2300      	movs	r3, #0
 800de52:	61fb      	str	r3, [r7, #28]
 800de54:	e023      	b.n	800de9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	4b15      	ldr	r3, [pc, #84]	; (800deb0 <xTaskCheckForTimeOut+0xc0>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d007      	beq.n	800de72 <xTaskCheckForTimeOut+0x82>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	69ba      	ldr	r2, [r7, #24]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d302      	bcc.n	800de72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800de6c:	2301      	movs	r3, #1
 800de6e:	61fb      	str	r3, [r7, #28]
 800de70:	e015      	b.n	800de9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	697a      	ldr	r2, [r7, #20]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d20b      	bcs.n	800de94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	681a      	ldr	r2, [r3, #0]
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	1ad2      	subs	r2, r2, r3
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f7ff ff9b 	bl	800ddc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800de8e:	2300      	movs	r3, #0
 800de90:	61fb      	str	r3, [r7, #28]
 800de92:	e004      	b.n	800de9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	2200      	movs	r2, #0
 800de98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800de9a:	2301      	movs	r3, #1
 800de9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800de9e:	f7fe f8a1 	bl	800bfe4 <vPortExitCritical>

	return xReturn;
 800dea2:	69fb      	ldr	r3, [r7, #28]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3720      	adds	r7, #32
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	20004fb0 	.word	0x20004fb0
 800deb0:	20004fc4 	.word	0x20004fc4

0800deb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800deb4:	b480      	push	{r7}
 800deb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800deb8:	4b03      	ldr	r3, [pc, #12]	; (800dec8 <vTaskMissedYield+0x14>)
 800deba:	2201      	movs	r2, #1
 800debc:	601a      	str	r2, [r3, #0]
}
 800debe:	bf00      	nop
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr
 800dec8:	20004fc0 	.word	0x20004fc0

0800decc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ded4:	f000 f852 	bl	800df7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ded8:	4b06      	ldr	r3, [pc, #24]	; (800def4 <prvIdleTask+0x28>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d9f9      	bls.n	800ded4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dee0:	4b05      	ldr	r3, [pc, #20]	; (800def8 <prvIdleTask+0x2c>)
 800dee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dee6:	601a      	str	r2, [r3, #0]
 800dee8:	f3bf 8f4f 	dsb	sy
 800deec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800def0:	e7f0      	b.n	800ded4 <prvIdleTask+0x8>
 800def2:	bf00      	nop
 800def4:	20004adc 	.word	0x20004adc
 800def8:	e000ed04 	.word	0xe000ed04

0800defc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df02:	2300      	movs	r3, #0
 800df04:	607b      	str	r3, [r7, #4]
 800df06:	e00c      	b.n	800df22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800df08:	687a      	ldr	r2, [r7, #4]
 800df0a:	4613      	mov	r3, r2
 800df0c:	009b      	lsls	r3, r3, #2
 800df0e:	4413      	add	r3, r2
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	4a12      	ldr	r2, [pc, #72]	; (800df5c <prvInitialiseTaskLists+0x60>)
 800df14:	4413      	add	r3, r2
 800df16:	4618      	mov	r0, r3
 800df18:	f7fd fe50 	bl	800bbbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	3301      	adds	r3, #1
 800df20:	607b      	str	r3, [r7, #4]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2b37      	cmp	r3, #55	; 0x37
 800df26:	d9ef      	bls.n	800df08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800df28:	480d      	ldr	r0, [pc, #52]	; (800df60 <prvInitialiseTaskLists+0x64>)
 800df2a:	f7fd fe47 	bl	800bbbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800df2e:	480d      	ldr	r0, [pc, #52]	; (800df64 <prvInitialiseTaskLists+0x68>)
 800df30:	f7fd fe44 	bl	800bbbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800df34:	480c      	ldr	r0, [pc, #48]	; (800df68 <prvInitialiseTaskLists+0x6c>)
 800df36:	f7fd fe41 	bl	800bbbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800df3a:	480c      	ldr	r0, [pc, #48]	; (800df6c <prvInitialiseTaskLists+0x70>)
 800df3c:	f7fd fe3e 	bl	800bbbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800df40:	480b      	ldr	r0, [pc, #44]	; (800df70 <prvInitialiseTaskLists+0x74>)
 800df42:	f7fd fe3b 	bl	800bbbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800df46:	4b0b      	ldr	r3, [pc, #44]	; (800df74 <prvInitialiseTaskLists+0x78>)
 800df48:	4a05      	ldr	r2, [pc, #20]	; (800df60 <prvInitialiseTaskLists+0x64>)
 800df4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df4c:	4b0a      	ldr	r3, [pc, #40]	; (800df78 <prvInitialiseTaskLists+0x7c>)
 800df4e:	4a05      	ldr	r2, [pc, #20]	; (800df64 <prvInitialiseTaskLists+0x68>)
 800df50:	601a      	str	r2, [r3, #0]
}
 800df52:	bf00      	nop
 800df54:	3708      	adds	r7, #8
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	20004adc 	.word	0x20004adc
 800df60:	20004f3c 	.word	0x20004f3c
 800df64:	20004f50 	.word	0x20004f50
 800df68:	20004f6c 	.word	0x20004f6c
 800df6c:	20004f80 	.word	0x20004f80
 800df70:	20004f98 	.word	0x20004f98
 800df74:	20004f64 	.word	0x20004f64
 800df78:	20004f68 	.word	0x20004f68

0800df7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df82:	e019      	b.n	800dfb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800df84:	f7fd fffe 	bl	800bf84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df88:	4b10      	ldr	r3, [pc, #64]	; (800dfcc <prvCheckTasksWaitingTermination+0x50>)
 800df8a:	68db      	ldr	r3, [r3, #12]
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	3304      	adds	r3, #4
 800df94:	4618      	mov	r0, r3
 800df96:	f7fd fe9b 	bl	800bcd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df9a:	4b0d      	ldr	r3, [pc, #52]	; (800dfd0 <prvCheckTasksWaitingTermination+0x54>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	4a0b      	ldr	r2, [pc, #44]	; (800dfd0 <prvCheckTasksWaitingTermination+0x54>)
 800dfa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dfa4:	4b0b      	ldr	r3, [pc, #44]	; (800dfd4 <prvCheckTasksWaitingTermination+0x58>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	4a0a      	ldr	r2, [pc, #40]	; (800dfd4 <prvCheckTasksWaitingTermination+0x58>)
 800dfac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dfae:	f7fe f819 	bl	800bfe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f000 f810 	bl	800dfd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dfb8:	4b06      	ldr	r3, [pc, #24]	; (800dfd4 <prvCheckTasksWaitingTermination+0x58>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d1e1      	bne.n	800df84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dfc0:	bf00      	nop
 800dfc2:	bf00      	nop
 800dfc4:	3708      	adds	r7, #8
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	20004f80 	.word	0x20004f80
 800dfd0:	20004fac 	.word	0x20004fac
 800dfd4:	20004f94 	.word	0x20004f94

0800dfd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	3354      	adds	r3, #84	; 0x54
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f001 feb1 	bl	800fd4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d108      	bne.n	800e006 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fd fcc1 	bl	800b980 <vPortFree>
				vPortFree( pxTCB );
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f7fd fcbe 	bl	800b980 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e004:	e018      	b.n	800e038 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e00c:	2b01      	cmp	r3, #1
 800e00e:	d103      	bne.n	800e018 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f7fd fcb5 	bl	800b980 <vPortFree>
	}
 800e016:	e00f      	b.n	800e038 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e01e:	2b02      	cmp	r3, #2
 800e020:	d00a      	beq.n	800e038 <prvDeleteTCB+0x60>
	__asm volatile
 800e022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e026:	f383 8811 	msr	BASEPRI, r3
 800e02a:	f3bf 8f6f 	isb	sy
 800e02e:	f3bf 8f4f 	dsb	sy
 800e032:	60fb      	str	r3, [r7, #12]
}
 800e034:	bf00      	nop
 800e036:	e7fe      	b.n	800e036 <prvDeleteTCB+0x5e>
	}
 800e038:	bf00      	nop
 800e03a:	3710      	adds	r7, #16
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e046:	4b0c      	ldr	r3, [pc, #48]	; (800e078 <prvResetNextTaskUnblockTime+0x38>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d104      	bne.n	800e05a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e050:	4b0a      	ldr	r3, [pc, #40]	; (800e07c <prvResetNextTaskUnblockTime+0x3c>)
 800e052:	f04f 32ff 	mov.w	r2, #4294967295
 800e056:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e058:	e008      	b.n	800e06c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e05a:	4b07      	ldr	r3, [pc, #28]	; (800e078 <prvResetNextTaskUnblockTime+0x38>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	68db      	ldr	r3, [r3, #12]
 800e062:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	4a04      	ldr	r2, [pc, #16]	; (800e07c <prvResetNextTaskUnblockTime+0x3c>)
 800e06a:	6013      	str	r3, [r2, #0]
}
 800e06c:	bf00      	nop
 800e06e:	370c      	adds	r7, #12
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr
 800e078:	20004f64 	.word	0x20004f64
 800e07c:	20004fcc 	.word	0x20004fcc

0800e080 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e086:	4b0b      	ldr	r3, [pc, #44]	; (800e0b4 <xTaskGetSchedulerState+0x34>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d102      	bne.n	800e094 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e08e:	2301      	movs	r3, #1
 800e090:	607b      	str	r3, [r7, #4]
 800e092:	e008      	b.n	800e0a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e094:	4b08      	ldr	r3, [pc, #32]	; (800e0b8 <xTaskGetSchedulerState+0x38>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d102      	bne.n	800e0a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e09c:	2302      	movs	r3, #2
 800e09e:	607b      	str	r3, [r7, #4]
 800e0a0:	e001      	b.n	800e0a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e0a6:	687b      	ldr	r3, [r7, #4]
	}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	370c      	adds	r7, #12
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr
 800e0b4:	20004fb8 	.word	0x20004fb8
 800e0b8:	20004fd4 	.word	0x20004fd4

0800e0bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b084      	sub	sp, #16
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d051      	beq.n	800e176 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0d6:	4b2a      	ldr	r3, [pc, #168]	; (800e180 <xTaskPriorityInherit+0xc4>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d241      	bcs.n	800e164 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	699b      	ldr	r3, [r3, #24]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	db06      	blt.n	800e0f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0e8:	4b25      	ldr	r3, [pc, #148]	; (800e180 <xTaskPriorityInherit+0xc4>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	6959      	ldr	r1, [r3, #20]
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0fe:	4613      	mov	r3, r2
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	4413      	add	r3, r2
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	4a1f      	ldr	r2, [pc, #124]	; (800e184 <xTaskPriorityInherit+0xc8>)
 800e108:	4413      	add	r3, r2
 800e10a:	4299      	cmp	r1, r3
 800e10c:	d122      	bne.n	800e154 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	3304      	adds	r3, #4
 800e112:	4618      	mov	r0, r3
 800e114:	f7fd fddc 	bl	800bcd0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e118:	4b19      	ldr	r3, [pc, #100]	; (800e180 <xTaskPriorityInherit+0xc4>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e126:	4b18      	ldr	r3, [pc, #96]	; (800e188 <xTaskPriorityInherit+0xcc>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d903      	bls.n	800e136 <xTaskPriorityInherit+0x7a>
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e132:	4a15      	ldr	r2, [pc, #84]	; (800e188 <xTaskPriorityInherit+0xcc>)
 800e134:	6013      	str	r3, [r2, #0]
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e13a:	4613      	mov	r3, r2
 800e13c:	009b      	lsls	r3, r3, #2
 800e13e:	4413      	add	r3, r2
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	4a10      	ldr	r2, [pc, #64]	; (800e184 <xTaskPriorityInherit+0xc8>)
 800e144:	441a      	add	r2, r3
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	3304      	adds	r3, #4
 800e14a:	4619      	mov	r1, r3
 800e14c:	4610      	mov	r0, r2
 800e14e:	f7fd fd62 	bl	800bc16 <vListInsertEnd>
 800e152:	e004      	b.n	800e15e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e154:	4b0a      	ldr	r3, [pc, #40]	; (800e180 <xTaskPriorityInherit+0xc4>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e15e:	2301      	movs	r3, #1
 800e160:	60fb      	str	r3, [r7, #12]
 800e162:	e008      	b.n	800e176 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e168:	4b05      	ldr	r3, [pc, #20]	; (800e180 <xTaskPriorityInherit+0xc4>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e16e:	429a      	cmp	r2, r3
 800e170:	d201      	bcs.n	800e176 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e172:	2301      	movs	r3, #1
 800e174:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e176:	68fb      	ldr	r3, [r7, #12]
	}
 800e178:	4618      	mov	r0, r3
 800e17a:	3710      	adds	r7, #16
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	20004ad8 	.word	0x20004ad8
 800e184:	20004adc 	.word	0x20004adc
 800e188:	20004fb4 	.word	0x20004fb4

0800e18c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b086      	sub	sp, #24
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e198:	2300      	movs	r3, #0
 800e19a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d056      	beq.n	800e250 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e1a2:	4b2e      	ldr	r3, [pc, #184]	; (800e25c <xTaskPriorityDisinherit+0xd0>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	693a      	ldr	r2, [r7, #16]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d00a      	beq.n	800e1c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b0:	f383 8811 	msr	BASEPRI, r3
 800e1b4:	f3bf 8f6f 	isb	sy
 800e1b8:	f3bf 8f4f 	dsb	sy
 800e1bc:	60fb      	str	r3, [r7, #12]
}
 800e1be:	bf00      	nop
 800e1c0:	e7fe      	b.n	800e1c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d10a      	bne.n	800e1e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ce:	f383 8811 	msr	BASEPRI, r3
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	f3bf 8f4f 	dsb	sy
 800e1da:	60bb      	str	r3, [r7, #8]
}
 800e1dc:	bf00      	nop
 800e1de:	e7fe      	b.n	800e1de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1e4:	1e5a      	subs	r2, r3, #1
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d02c      	beq.n	800e250 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d128      	bne.n	800e250 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	3304      	adds	r3, #4
 800e202:	4618      	mov	r0, r3
 800e204:	f7fd fd64 	bl	800bcd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e214:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e220:	4b0f      	ldr	r3, [pc, #60]	; (800e260 <xTaskPriorityDisinherit+0xd4>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	429a      	cmp	r2, r3
 800e226:	d903      	bls.n	800e230 <xTaskPriorityDisinherit+0xa4>
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e22c:	4a0c      	ldr	r2, [pc, #48]	; (800e260 <xTaskPriorityDisinherit+0xd4>)
 800e22e:	6013      	str	r3, [r2, #0]
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e234:	4613      	mov	r3, r2
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	4413      	add	r3, r2
 800e23a:	009b      	lsls	r3, r3, #2
 800e23c:	4a09      	ldr	r2, [pc, #36]	; (800e264 <xTaskPriorityDisinherit+0xd8>)
 800e23e:	441a      	add	r2, r3
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	3304      	adds	r3, #4
 800e244:	4619      	mov	r1, r3
 800e246:	4610      	mov	r0, r2
 800e248:	f7fd fce5 	bl	800bc16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e24c:	2301      	movs	r3, #1
 800e24e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e250:	697b      	ldr	r3, [r7, #20]
	}
 800e252:	4618      	mov	r0, r3
 800e254:	3718      	adds	r7, #24
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	20004ad8 	.word	0x20004ad8
 800e260:	20004fb4 	.word	0x20004fb4
 800e264:	20004adc 	.word	0x20004adc

0800e268 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b088      	sub	sp, #32
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e276:	2301      	movs	r3, #1
 800e278:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d06a      	beq.n	800e356 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e280:	69bb      	ldr	r3, [r7, #24]
 800e282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e284:	2b00      	cmp	r3, #0
 800e286:	d10a      	bne.n	800e29e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28c:	f383 8811 	msr	BASEPRI, r3
 800e290:	f3bf 8f6f 	isb	sy
 800e294:	f3bf 8f4f 	dsb	sy
 800e298:	60fb      	str	r3, [r7, #12]
}
 800e29a:	bf00      	nop
 800e29c:	e7fe      	b.n	800e29c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e29e:	69bb      	ldr	r3, [r7, #24]
 800e2a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2a2:	683a      	ldr	r2, [r7, #0]
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d902      	bls.n	800e2ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	61fb      	str	r3, [r7, #28]
 800e2ac:	e002      	b.n	800e2b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e2ae:	69bb      	ldr	r3, [r7, #24]
 800e2b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e2b4:	69bb      	ldr	r3, [r7, #24]
 800e2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2b8:	69fa      	ldr	r2, [r7, #28]
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d04b      	beq.n	800e356 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e2be:	69bb      	ldr	r3, [r7, #24]
 800e2c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2c2:	697a      	ldr	r2, [r7, #20]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d146      	bne.n	800e356 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e2c8:	4b25      	ldr	r3, [pc, #148]	; (800e360 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	69ba      	ldr	r2, [r7, #24]
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d10a      	bne.n	800e2e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d6:	f383 8811 	msr	BASEPRI, r3
 800e2da:	f3bf 8f6f 	isb	sy
 800e2de:	f3bf 8f4f 	dsb	sy
 800e2e2:	60bb      	str	r3, [r7, #8]
}
 800e2e4:	bf00      	nop
 800e2e6:	e7fe      	b.n	800e2e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e2e8:	69bb      	ldr	r3, [r7, #24]
 800e2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	69fa      	ldr	r2, [r7, #28]
 800e2f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e2f4:	69bb      	ldr	r3, [r7, #24]
 800e2f6:	699b      	ldr	r3, [r3, #24]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	db04      	blt.n	800e306 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e302:	69bb      	ldr	r3, [r7, #24]
 800e304:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	6959      	ldr	r1, [r3, #20]
 800e30a:	693a      	ldr	r2, [r7, #16]
 800e30c:	4613      	mov	r3, r2
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	4413      	add	r3, r2
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	4a13      	ldr	r2, [pc, #76]	; (800e364 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e316:	4413      	add	r3, r2
 800e318:	4299      	cmp	r1, r3
 800e31a:	d11c      	bne.n	800e356 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e31c:	69bb      	ldr	r3, [r7, #24]
 800e31e:	3304      	adds	r3, #4
 800e320:	4618      	mov	r0, r3
 800e322:	f7fd fcd5 	bl	800bcd0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e326:	69bb      	ldr	r3, [r7, #24]
 800e328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e32a:	4b0f      	ldr	r3, [pc, #60]	; (800e368 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	429a      	cmp	r2, r3
 800e330:	d903      	bls.n	800e33a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e332:	69bb      	ldr	r3, [r7, #24]
 800e334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e336:	4a0c      	ldr	r2, [pc, #48]	; (800e368 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e338:	6013      	str	r3, [r2, #0]
 800e33a:	69bb      	ldr	r3, [r7, #24]
 800e33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e33e:	4613      	mov	r3, r2
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	4413      	add	r3, r2
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	4a07      	ldr	r2, [pc, #28]	; (800e364 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e348:	441a      	add	r2, r3
 800e34a:	69bb      	ldr	r3, [r7, #24]
 800e34c:	3304      	adds	r3, #4
 800e34e:	4619      	mov	r1, r3
 800e350:	4610      	mov	r0, r2
 800e352:	f7fd fc60 	bl	800bc16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e356:	bf00      	nop
 800e358:	3720      	adds	r7, #32
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop
 800e360:	20004ad8 	.word	0x20004ad8
 800e364:	20004adc 	.word	0x20004adc
 800e368:	20004fb4 	.word	0x20004fb4

0800e36c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e36c:	b480      	push	{r7}
 800e36e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e370:	4b07      	ldr	r3, [pc, #28]	; (800e390 <pvTaskIncrementMutexHeldCount+0x24>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d004      	beq.n	800e382 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e378:	4b05      	ldr	r3, [pc, #20]	; (800e390 <pvTaskIncrementMutexHeldCount+0x24>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e37e:	3201      	adds	r2, #1
 800e380:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e382:	4b03      	ldr	r3, [pc, #12]	; (800e390 <pvTaskIncrementMutexHeldCount+0x24>)
 800e384:	681b      	ldr	r3, [r3, #0]
	}
 800e386:	4618      	mov	r0, r3
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr
 800e390:	20004ad8 	.word	0x20004ad8

0800e394 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e39e:	4b21      	ldr	r3, [pc, #132]	; (800e424 <prvAddCurrentTaskToDelayedList+0x90>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3a4:	4b20      	ldr	r3, [pc, #128]	; (800e428 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	3304      	adds	r3, #4
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7fd fc90 	bl	800bcd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b6:	d10a      	bne.n	800e3ce <prvAddCurrentTaskToDelayedList+0x3a>
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d007      	beq.n	800e3ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3be:	4b1a      	ldr	r3, [pc, #104]	; (800e428 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	3304      	adds	r3, #4
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	4819      	ldr	r0, [pc, #100]	; (800e42c <prvAddCurrentTaskToDelayedList+0x98>)
 800e3c8:	f7fd fc25 	bl	800bc16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e3cc:	e026      	b.n	800e41c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e3ce:	68fa      	ldr	r2, [r7, #12]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	4413      	add	r3, r2
 800e3d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e3d6:	4b14      	ldr	r3, [pc, #80]	; (800e428 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	68ba      	ldr	r2, [r7, #8]
 800e3dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e3de:	68ba      	ldr	r2, [r7, #8]
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d209      	bcs.n	800e3fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3e6:	4b12      	ldr	r3, [pc, #72]	; (800e430 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	4b0f      	ldr	r3, [pc, #60]	; (800e428 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	3304      	adds	r3, #4
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	4610      	mov	r0, r2
 800e3f4:	f7fd fc33 	bl	800bc5e <vListInsert>
}
 800e3f8:	e010      	b.n	800e41c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3fa:	4b0e      	ldr	r3, [pc, #56]	; (800e434 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	4b0a      	ldr	r3, [pc, #40]	; (800e428 <prvAddCurrentTaskToDelayedList+0x94>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	3304      	adds	r3, #4
 800e404:	4619      	mov	r1, r3
 800e406:	4610      	mov	r0, r2
 800e408:	f7fd fc29 	bl	800bc5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e40c:	4b0a      	ldr	r3, [pc, #40]	; (800e438 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	68ba      	ldr	r2, [r7, #8]
 800e412:	429a      	cmp	r2, r3
 800e414:	d202      	bcs.n	800e41c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e416:	4a08      	ldr	r2, [pc, #32]	; (800e438 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	6013      	str	r3, [r2, #0]
}
 800e41c:	bf00      	nop
 800e41e:	3710      	adds	r7, #16
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	20004fb0 	.word	0x20004fb0
 800e428:	20004ad8 	.word	0x20004ad8
 800e42c:	20004f98 	.word	0x20004f98
 800e430:	20004f68 	.word	0x20004f68
 800e434:	20004f64 	.word	0x20004f64
 800e438:	20004fcc 	.word	0x20004fcc

0800e43c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b08a      	sub	sp, #40	; 0x28
 800e440:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e442:	2300      	movs	r3, #0
 800e444:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e446:	f000 fba1 	bl	800eb8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e44a:	4b1c      	ldr	r3, [pc, #112]	; (800e4bc <xTimerCreateTimerTask+0x80>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d021      	beq.n	800e496 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e452:	2300      	movs	r3, #0
 800e454:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e456:	2300      	movs	r3, #0
 800e458:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e45a:	1d3a      	adds	r2, r7, #4
 800e45c:	f107 0108 	add.w	r1, r7, #8
 800e460:	f107 030c 	add.w	r3, r7, #12
 800e464:	4618      	mov	r0, r3
 800e466:	f7fd f9a5 	bl	800b7b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e46a:	6879      	ldr	r1, [r7, #4]
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	68fa      	ldr	r2, [r7, #12]
 800e470:	9202      	str	r2, [sp, #8]
 800e472:	9301      	str	r3, [sp, #4]
 800e474:	2302      	movs	r3, #2
 800e476:	9300      	str	r3, [sp, #0]
 800e478:	2300      	movs	r3, #0
 800e47a:	460a      	mov	r2, r1
 800e47c:	4910      	ldr	r1, [pc, #64]	; (800e4c0 <xTimerCreateTimerTask+0x84>)
 800e47e:	4811      	ldr	r0, [pc, #68]	; (800e4c4 <xTimerCreateTimerTask+0x88>)
 800e480:	f7fe feb0 	bl	800d1e4 <xTaskCreateStatic>
 800e484:	4603      	mov	r3, r0
 800e486:	4a10      	ldr	r2, [pc, #64]	; (800e4c8 <xTimerCreateTimerTask+0x8c>)
 800e488:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e48a:	4b0f      	ldr	r3, [pc, #60]	; (800e4c8 <xTimerCreateTimerTask+0x8c>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d001      	beq.n	800e496 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e492:	2301      	movs	r3, #1
 800e494:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d10a      	bne.n	800e4b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a0:	f383 8811 	msr	BASEPRI, r3
 800e4a4:	f3bf 8f6f 	isb	sy
 800e4a8:	f3bf 8f4f 	dsb	sy
 800e4ac:	613b      	str	r3, [r7, #16]
}
 800e4ae:	bf00      	nop
 800e4b0:	e7fe      	b.n	800e4b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e4b2:	697b      	ldr	r3, [r7, #20]
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3718      	adds	r7, #24
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	20005008 	.word	0x20005008
 800e4c0:	08014c9c 	.word	0x08014c9c
 800e4c4:	0800e735 	.word	0x0800e735
 800e4c8:	2000500c 	.word	0x2000500c

0800e4cc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b088      	sub	sp, #32
 800e4d0:	af02      	add	r7, sp, #8
 800e4d2:	60f8      	str	r0, [r7, #12]
 800e4d4:	60b9      	str	r1, [r7, #8]
 800e4d6:	607a      	str	r2, [r7, #4]
 800e4d8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800e4da:	202c      	movs	r0, #44	; 0x2c
 800e4dc:	f7fd f984 	bl	800b7e8 <pvPortMalloc>
 800e4e0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d00d      	beq.n	800e504 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	9301      	str	r3, [sp, #4]
 800e4f4:	6a3b      	ldr	r3, [r7, #32]
 800e4f6:	9300      	str	r3, [sp, #0]
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	68b9      	ldr	r1, [r7, #8]
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f000 f843 	bl	800e58a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e504:	697b      	ldr	r3, [r7, #20]
	}
 800e506:	4618      	mov	r0, r3
 800e508:	3718      	adds	r7, #24
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}

0800e50e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800e50e:	b580      	push	{r7, lr}
 800e510:	b08a      	sub	sp, #40	; 0x28
 800e512:	af02      	add	r7, sp, #8
 800e514:	60f8      	str	r0, [r7, #12]
 800e516:	60b9      	str	r1, [r7, #8]
 800e518:	607a      	str	r2, [r7, #4]
 800e51a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800e51c:	232c      	movs	r3, #44	; 0x2c
 800e51e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	2b2c      	cmp	r3, #44	; 0x2c
 800e524:	d00a      	beq.n	800e53c <xTimerCreateStatic+0x2e>
	__asm volatile
 800e526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52a:	f383 8811 	msr	BASEPRI, r3
 800e52e:	f3bf 8f6f 	isb	sy
 800e532:	f3bf 8f4f 	dsb	sy
 800e536:	61bb      	str	r3, [r7, #24]
}
 800e538:	bf00      	nop
 800e53a:	e7fe      	b.n	800e53a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e53c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800e53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e540:	2b00      	cmp	r3, #0
 800e542:	d10a      	bne.n	800e55a <xTimerCreateStatic+0x4c>
	__asm volatile
 800e544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e548:	f383 8811 	msr	BASEPRI, r3
 800e54c:	f3bf 8f6f 	isb	sy
 800e550:	f3bf 8f4f 	dsb	sy
 800e554:	617b      	str	r3, [r7, #20]
}
 800e556:	bf00      	nop
 800e558:	e7fe      	b.n	800e558 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800e55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d00d      	beq.n	800e580 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800e564:	69fb      	ldr	r3, [r7, #28]
 800e566:	2202      	movs	r2, #2
 800e568:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e56c:	69fb      	ldr	r3, [r7, #28]
 800e56e:	9301      	str	r3, [sp, #4]
 800e570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e572:	9300      	str	r3, [sp, #0]
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	687a      	ldr	r2, [r7, #4]
 800e578:	68b9      	ldr	r1, [r7, #8]
 800e57a:	68f8      	ldr	r0, [r7, #12]
 800e57c:	f000 f805 	bl	800e58a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e580:	69fb      	ldr	r3, [r7, #28]
	}
 800e582:	4618      	mov	r0, r3
 800e584:	3720      	adds	r7, #32
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}

0800e58a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800e58a:	b580      	push	{r7, lr}
 800e58c:	b086      	sub	sp, #24
 800e58e:	af00      	add	r7, sp, #0
 800e590:	60f8      	str	r0, [r7, #12]
 800e592:	60b9      	str	r1, [r7, #8]
 800e594:	607a      	str	r2, [r7, #4]
 800e596:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d10a      	bne.n	800e5b4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800e59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a2:	f383 8811 	msr	BASEPRI, r3
 800e5a6:	f3bf 8f6f 	isb	sy
 800e5aa:	f3bf 8f4f 	dsb	sy
 800e5ae:	617b      	str	r3, [r7, #20]
}
 800e5b0:	bf00      	nop
 800e5b2:	e7fe      	b.n	800e5b2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800e5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d01e      	beq.n	800e5f8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800e5ba:	f000 fae7 	bl	800eb8c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800e5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c0:	68fa      	ldr	r2, [r7, #12]
 800e5c2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c6:	68ba      	ldr	r2, [r7, #8]
 800e5c8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5cc:	683a      	ldr	r2, [r7, #0]
 800e5ce:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d2:	6a3a      	ldr	r2, [r7, #32]
 800e5d4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d8:	3304      	adds	r3, #4
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fd fb0e 	bl	800bbfc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d008      	beq.n	800e5f8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5ec:	f043 0304 	orr.w	r3, r3, #4
 800e5f0:	b2da      	uxtb	r2, r3
 800e5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e5f8:	bf00      	nop
 800e5fa:	3718      	adds	r7, #24
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b08a      	sub	sp, #40	; 0x28
 800e604:	af00      	add	r7, sp, #0
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	60b9      	str	r1, [r7, #8]
 800e60a:	607a      	str	r2, [r7, #4]
 800e60c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e60e:	2300      	movs	r3, #0
 800e610:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10a      	bne.n	800e62e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	623b      	str	r3, [r7, #32]
}
 800e62a:	bf00      	nop
 800e62c:	e7fe      	b.n	800e62c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e62e:	4b1a      	ldr	r3, [pc, #104]	; (800e698 <xTimerGenericCommand+0x98>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d02a      	beq.n	800e68c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	2b05      	cmp	r3, #5
 800e646:	dc18      	bgt.n	800e67a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e648:	f7ff fd1a 	bl	800e080 <xTaskGetSchedulerState>
 800e64c:	4603      	mov	r3, r0
 800e64e:	2b02      	cmp	r3, #2
 800e650:	d109      	bne.n	800e666 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e652:	4b11      	ldr	r3, [pc, #68]	; (800e698 <xTimerGenericCommand+0x98>)
 800e654:	6818      	ldr	r0, [r3, #0]
 800e656:	f107 0110 	add.w	r1, r7, #16
 800e65a:	2300      	movs	r3, #0
 800e65c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e65e:	f7fd ff5b 	bl	800c518 <xQueueGenericSend>
 800e662:	6278      	str	r0, [r7, #36]	; 0x24
 800e664:	e012      	b.n	800e68c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e666:	4b0c      	ldr	r3, [pc, #48]	; (800e698 <xTimerGenericCommand+0x98>)
 800e668:	6818      	ldr	r0, [r3, #0]
 800e66a:	f107 0110 	add.w	r1, r7, #16
 800e66e:	2300      	movs	r3, #0
 800e670:	2200      	movs	r2, #0
 800e672:	f7fd ff51 	bl	800c518 <xQueueGenericSend>
 800e676:	6278      	str	r0, [r7, #36]	; 0x24
 800e678:	e008      	b.n	800e68c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e67a:	4b07      	ldr	r3, [pc, #28]	; (800e698 <xTimerGenericCommand+0x98>)
 800e67c:	6818      	ldr	r0, [r3, #0]
 800e67e:	f107 0110 	add.w	r1, r7, #16
 800e682:	2300      	movs	r3, #0
 800e684:	683a      	ldr	r2, [r7, #0]
 800e686:	f7fe f845 	bl	800c714 <xQueueGenericSendFromISR>
 800e68a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3728      	adds	r7, #40	; 0x28
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	20005008 	.word	0x20005008

0800e69c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b088      	sub	sp, #32
 800e6a0:	af02      	add	r7, sp, #8
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6a6:	4b22      	ldr	r3, [pc, #136]	; (800e730 <prvProcessExpiredTimer+0x94>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	68db      	ldr	r3, [r3, #12]
 800e6ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	3304      	adds	r3, #4
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fd fb0b 	bl	800bcd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6c0:	f003 0304 	and.w	r3, r3, #4
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d022      	beq.n	800e70e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	699a      	ldr	r2, [r3, #24]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	18d1      	adds	r1, r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	683a      	ldr	r2, [r7, #0]
 800e6d4:	6978      	ldr	r0, [r7, #20]
 800e6d6:	f000 f8d1 	bl	800e87c <prvInsertTimerInActiveList>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d01f      	beq.n	800e720 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	6978      	ldr	r0, [r7, #20]
 800e6ec:	f7ff ff88 	bl	800e600 <xTimerGenericCommand>
 800e6f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d113      	bne.n	800e720 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fc:	f383 8811 	msr	BASEPRI, r3
 800e700:	f3bf 8f6f 	isb	sy
 800e704:	f3bf 8f4f 	dsb	sy
 800e708:	60fb      	str	r3, [r7, #12]
}
 800e70a:	bf00      	nop
 800e70c:	e7fe      	b.n	800e70c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e714:	f023 0301 	bic.w	r3, r3, #1
 800e718:	b2da      	uxtb	r2, r3
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	6a1b      	ldr	r3, [r3, #32]
 800e724:	6978      	ldr	r0, [r7, #20]
 800e726:	4798      	blx	r3
}
 800e728:	bf00      	nop
 800e72a:	3718      	adds	r7, #24
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	20005000 	.word	0x20005000

0800e734 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b084      	sub	sp, #16
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e73c:	f107 0308 	add.w	r3, r7, #8
 800e740:	4618      	mov	r0, r3
 800e742:	f000 f857 	bl	800e7f4 <prvGetNextExpireTime>
 800e746:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	4619      	mov	r1, r3
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f000 f803 	bl	800e758 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e752:	f000 f8d5 	bl	800e900 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e756:	e7f1      	b.n	800e73c <prvTimerTask+0x8>

0800e758 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e762:	f7ff f8a1 	bl	800d8a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e766:	f107 0308 	add.w	r3, r7, #8
 800e76a:	4618      	mov	r0, r3
 800e76c:	f000 f866 	bl	800e83c <prvSampleTimeNow>
 800e770:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d130      	bne.n	800e7da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d10a      	bne.n	800e794 <prvProcessTimerOrBlockTask+0x3c>
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	429a      	cmp	r2, r3
 800e784:	d806      	bhi.n	800e794 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e786:	f7ff f89d 	bl	800d8c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e78a:	68f9      	ldr	r1, [r7, #12]
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f7ff ff85 	bl	800e69c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e792:	e024      	b.n	800e7de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d008      	beq.n	800e7ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e79a:	4b13      	ldr	r3, [pc, #76]	; (800e7e8 <prvProcessTimerOrBlockTask+0x90>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d101      	bne.n	800e7a8 <prvProcessTimerOrBlockTask+0x50>
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	e000      	b.n	800e7aa <prvProcessTimerOrBlockTask+0x52>
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e7ac:	4b0f      	ldr	r3, [pc, #60]	; (800e7ec <prvProcessTimerOrBlockTask+0x94>)
 800e7ae:	6818      	ldr	r0, [r3, #0]
 800e7b0:	687a      	ldr	r2, [r7, #4]
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	1ad3      	subs	r3, r2, r3
 800e7b6:	683a      	ldr	r2, [r7, #0]
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	f7fe fcdf 	bl	800d17c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e7be:	f7ff f881 	bl	800d8c4 <xTaskResumeAll>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d10a      	bne.n	800e7de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e7c8:	4b09      	ldr	r3, [pc, #36]	; (800e7f0 <prvProcessTimerOrBlockTask+0x98>)
 800e7ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7ce:	601a      	str	r2, [r3, #0]
 800e7d0:	f3bf 8f4f 	dsb	sy
 800e7d4:	f3bf 8f6f 	isb	sy
}
 800e7d8:	e001      	b.n	800e7de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e7da:	f7ff f873 	bl	800d8c4 <xTaskResumeAll>
}
 800e7de:	bf00      	nop
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	20005004 	.word	0x20005004
 800e7ec:	20005008 	.word	0x20005008
 800e7f0:	e000ed04 	.word	0xe000ed04

0800e7f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e7fc:	4b0e      	ldr	r3, [pc, #56]	; (800e838 <prvGetNextExpireTime+0x44>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d101      	bne.n	800e80a <prvGetNextExpireTime+0x16>
 800e806:	2201      	movs	r2, #1
 800e808:	e000      	b.n	800e80c <prvGetNextExpireTime+0x18>
 800e80a:	2200      	movs	r2, #0
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d105      	bne.n	800e824 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e818:	4b07      	ldr	r3, [pc, #28]	; (800e838 <prvGetNextExpireTime+0x44>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	60fb      	str	r3, [r7, #12]
 800e822:	e001      	b.n	800e828 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e824:	2300      	movs	r3, #0
 800e826:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e828:	68fb      	ldr	r3, [r7, #12]
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3714      	adds	r7, #20
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop
 800e838:	20005000 	.word	0x20005000

0800e83c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e844:	f7ff f8dc 	bl	800da00 <xTaskGetTickCount>
 800e848:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e84a:	4b0b      	ldr	r3, [pc, #44]	; (800e878 <prvSampleTimeNow+0x3c>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	68fa      	ldr	r2, [r7, #12]
 800e850:	429a      	cmp	r2, r3
 800e852:	d205      	bcs.n	800e860 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e854:	f000 f936 	bl	800eac4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2201      	movs	r2, #1
 800e85c:	601a      	str	r2, [r3, #0]
 800e85e:	e002      	b.n	800e866 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e866:	4a04      	ldr	r2, [pc, #16]	; (800e878 <prvSampleTimeNow+0x3c>)
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e86c:	68fb      	ldr	r3, [r7, #12]
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	20005010 	.word	0x20005010

0800e87c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b086      	sub	sp, #24
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
 800e888:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e88a:	2300      	movs	r3, #0
 800e88c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	68ba      	ldr	r2, [r7, #8]
 800e892:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	68fa      	ldr	r2, [r7, #12]
 800e898:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d812      	bhi.n	800e8c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8a2:	687a      	ldr	r2, [r7, #4]
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	1ad2      	subs	r2, r2, r3
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	699b      	ldr	r3, [r3, #24]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d302      	bcc.n	800e8b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	617b      	str	r3, [r7, #20]
 800e8b4:	e01b      	b.n	800e8ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e8b6:	4b10      	ldr	r3, [pc, #64]	; (800e8f8 <prvInsertTimerInActiveList+0x7c>)
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	3304      	adds	r3, #4
 800e8be:	4619      	mov	r1, r3
 800e8c0:	4610      	mov	r0, r2
 800e8c2:	f7fd f9cc 	bl	800bc5e <vListInsert>
 800e8c6:	e012      	b.n	800e8ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e8c8:	687a      	ldr	r2, [r7, #4]
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d206      	bcs.n	800e8de <prvInsertTimerInActiveList+0x62>
 800e8d0:	68ba      	ldr	r2, [r7, #8]
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d302      	bcc.n	800e8de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	617b      	str	r3, [r7, #20]
 800e8dc:	e007      	b.n	800e8ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8de:	4b07      	ldr	r3, [pc, #28]	; (800e8fc <prvInsertTimerInActiveList+0x80>)
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	3304      	adds	r3, #4
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	4610      	mov	r0, r2
 800e8ea:	f7fd f9b8 	bl	800bc5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e8ee:	697b      	ldr	r3, [r7, #20]
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3718      	adds	r7, #24
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	20005004 	.word	0x20005004
 800e8fc:	20005000 	.word	0x20005000

0800e900 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b08e      	sub	sp, #56	; 0x38
 800e904:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e906:	e0ca      	b.n	800ea9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	da18      	bge.n	800e940 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e90e:	1d3b      	adds	r3, r7, #4
 800e910:	3304      	adds	r3, #4
 800e912:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e916:	2b00      	cmp	r3, #0
 800e918:	d10a      	bne.n	800e930 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e91e:	f383 8811 	msr	BASEPRI, r3
 800e922:	f3bf 8f6f 	isb	sy
 800e926:	f3bf 8f4f 	dsb	sy
 800e92a:	61fb      	str	r3, [r7, #28]
}
 800e92c:	bf00      	nop
 800e92e:	e7fe      	b.n	800e92e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e936:	6850      	ldr	r0, [r2, #4]
 800e938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e93a:	6892      	ldr	r2, [r2, #8]
 800e93c:	4611      	mov	r1, r2
 800e93e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	f2c0 80aa 	blt.w	800ea9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94e:	695b      	ldr	r3, [r3, #20]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d004      	beq.n	800e95e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e956:	3304      	adds	r3, #4
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fd f9b9 	bl	800bcd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e95e:	463b      	mov	r3, r7
 800e960:	4618      	mov	r0, r3
 800e962:	f7ff ff6b 	bl	800e83c <prvSampleTimeNow>
 800e966:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2b09      	cmp	r3, #9
 800e96c:	f200 8097 	bhi.w	800ea9e <prvProcessReceivedCommands+0x19e>
 800e970:	a201      	add	r2, pc, #4	; (adr r2, 800e978 <prvProcessReceivedCommands+0x78>)
 800e972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e976:	bf00      	nop
 800e978:	0800e9a1 	.word	0x0800e9a1
 800e97c:	0800e9a1 	.word	0x0800e9a1
 800e980:	0800e9a1 	.word	0x0800e9a1
 800e984:	0800ea15 	.word	0x0800ea15
 800e988:	0800ea29 	.word	0x0800ea29
 800e98c:	0800ea73 	.word	0x0800ea73
 800e990:	0800e9a1 	.word	0x0800e9a1
 800e994:	0800e9a1 	.word	0x0800e9a1
 800e998:	0800ea15 	.word	0x0800ea15
 800e99c:	0800ea29 	.word	0x0800ea29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9a6:	f043 0301 	orr.w	r3, r3, #1
 800e9aa:	b2da      	uxtb	r2, r3
 800e9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e9b2:	68ba      	ldr	r2, [r7, #8]
 800e9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b6:	699b      	ldr	r3, [r3, #24]
 800e9b8:	18d1      	adds	r1, r2, r3
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9c0:	f7ff ff5c 	bl	800e87c <prvInsertTimerInActiveList>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d069      	beq.n	800ea9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9cc:	6a1b      	ldr	r3, [r3, #32]
 800e9ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9d8:	f003 0304 	and.w	r3, r3, #4
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d05e      	beq.n	800ea9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e9e0:	68ba      	ldr	r2, [r7, #8]
 800e9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e4:	699b      	ldr	r3, [r3, #24]
 800e9e6:	441a      	add	r2, r3
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	9300      	str	r3, [sp, #0]
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	2100      	movs	r1, #0
 800e9f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9f2:	f7ff fe05 	bl	800e600 <xTimerGenericCommand>
 800e9f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e9f8:	6a3b      	ldr	r3, [r7, #32]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d14f      	bne.n	800ea9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea02:	f383 8811 	msr	BASEPRI, r3
 800ea06:	f3bf 8f6f 	isb	sy
 800ea0a:	f3bf 8f4f 	dsb	sy
 800ea0e:	61bb      	str	r3, [r7, #24]
}
 800ea10:	bf00      	nop
 800ea12:	e7fe      	b.n	800ea12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea1a:	f023 0301 	bic.w	r3, r3, #1
 800ea1e:	b2da      	uxtb	r2, r3
 800ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ea26:	e03a      	b.n	800ea9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea2e:	f043 0301 	orr.w	r3, r3, #1
 800ea32:	b2da      	uxtb	r2, r3
 800ea34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ea3a:	68ba      	ldr	r2, [r7, #8]
 800ea3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ea40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea42:	699b      	ldr	r3, [r3, #24]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d10a      	bne.n	800ea5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ea48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4c:	f383 8811 	msr	BASEPRI, r3
 800ea50:	f3bf 8f6f 	isb	sy
 800ea54:	f3bf 8f4f 	dsb	sy
 800ea58:	617b      	str	r3, [r7, #20]
}
 800ea5a:	bf00      	nop
 800ea5c:	e7fe      	b.n	800ea5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ea5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea60:	699a      	ldr	r2, [r3, #24]
 800ea62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea64:	18d1      	adds	r1, r2, r3
 800ea66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea6c:	f7ff ff06 	bl	800e87c <prvInsertTimerInActiveList>
					break;
 800ea70:	e015      	b.n	800ea9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ea72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea78:	f003 0302 	and.w	r3, r3, #2
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d103      	bne.n	800ea88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ea80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea82:	f7fc ff7d 	bl	800b980 <vPortFree>
 800ea86:	e00a      	b.n	800ea9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea8e:	f023 0301 	bic.w	r3, r3, #1
 800ea92:	b2da      	uxtb	r2, r3
 800ea94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ea9a:	e000      	b.n	800ea9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ea9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea9e:	4b08      	ldr	r3, [pc, #32]	; (800eac0 <prvProcessReceivedCommands+0x1c0>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	1d39      	adds	r1, r7, #4
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7fd ff5c 	bl	800c964 <xQueueReceive>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	f47f af2a 	bne.w	800e908 <prvProcessReceivedCommands+0x8>
	}
}
 800eab4:	bf00      	nop
 800eab6:	bf00      	nop
 800eab8:	3730      	adds	r7, #48	; 0x30
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	20005008 	.word	0x20005008

0800eac4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b088      	sub	sp, #32
 800eac8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eaca:	e048      	b.n	800eb5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eacc:	4b2d      	ldr	r3, [pc, #180]	; (800eb84 <prvSwitchTimerLists+0xc0>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	68db      	ldr	r3, [r3, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ead6:	4b2b      	ldr	r3, [pc, #172]	; (800eb84 <prvSwitchTimerLists+0xc0>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	68db      	ldr	r3, [r3, #12]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	3304      	adds	r3, #4
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7fd f8f3 	bl	800bcd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	6a1b      	ldr	r3, [r3, #32]
 800eaee:	68f8      	ldr	r0, [r7, #12]
 800eaf0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eaf8:	f003 0304 	and.w	r3, r3, #4
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d02e      	beq.n	800eb5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	699b      	ldr	r3, [r3, #24]
 800eb04:	693a      	ldr	r2, [r7, #16]
 800eb06:	4413      	add	r3, r2
 800eb08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eb0a:	68ba      	ldr	r2, [r7, #8]
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d90e      	bls.n	800eb30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	68ba      	ldr	r2, [r7, #8]
 800eb16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	68fa      	ldr	r2, [r7, #12]
 800eb1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eb1e:	4b19      	ldr	r3, [pc, #100]	; (800eb84 <prvSwitchTimerLists+0xc0>)
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	3304      	adds	r3, #4
 800eb26:	4619      	mov	r1, r3
 800eb28:	4610      	mov	r0, r2
 800eb2a:	f7fd f898 	bl	800bc5e <vListInsert>
 800eb2e:	e016      	b.n	800eb5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb30:	2300      	movs	r3, #0
 800eb32:	9300      	str	r3, [sp, #0]
 800eb34:	2300      	movs	r3, #0
 800eb36:	693a      	ldr	r2, [r7, #16]
 800eb38:	2100      	movs	r1, #0
 800eb3a:	68f8      	ldr	r0, [r7, #12]
 800eb3c:	f7ff fd60 	bl	800e600 <xTimerGenericCommand>
 800eb40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d10a      	bne.n	800eb5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb4c:	f383 8811 	msr	BASEPRI, r3
 800eb50:	f3bf 8f6f 	isb	sy
 800eb54:	f3bf 8f4f 	dsb	sy
 800eb58:	603b      	str	r3, [r7, #0]
}
 800eb5a:	bf00      	nop
 800eb5c:	e7fe      	b.n	800eb5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb5e:	4b09      	ldr	r3, [pc, #36]	; (800eb84 <prvSwitchTimerLists+0xc0>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1b1      	bne.n	800eacc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eb68:	4b06      	ldr	r3, [pc, #24]	; (800eb84 <prvSwitchTimerLists+0xc0>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eb6e:	4b06      	ldr	r3, [pc, #24]	; (800eb88 <prvSwitchTimerLists+0xc4>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	4a04      	ldr	r2, [pc, #16]	; (800eb84 <prvSwitchTimerLists+0xc0>)
 800eb74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eb76:	4a04      	ldr	r2, [pc, #16]	; (800eb88 <prvSwitchTimerLists+0xc4>)
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	6013      	str	r3, [r2, #0]
}
 800eb7c:	bf00      	nop
 800eb7e:	3718      	adds	r7, #24
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}
 800eb84:	20005000 	.word	0x20005000
 800eb88:	20005004 	.word	0x20005004

0800eb8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eb92:	f7fd f9f7 	bl	800bf84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eb96:	4b15      	ldr	r3, [pc, #84]	; (800ebec <prvCheckForValidListAndQueue+0x60>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d120      	bne.n	800ebe0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eb9e:	4814      	ldr	r0, [pc, #80]	; (800ebf0 <prvCheckForValidListAndQueue+0x64>)
 800eba0:	f7fd f80c 	bl	800bbbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eba4:	4813      	ldr	r0, [pc, #76]	; (800ebf4 <prvCheckForValidListAndQueue+0x68>)
 800eba6:	f7fd f809 	bl	800bbbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ebaa:	4b13      	ldr	r3, [pc, #76]	; (800ebf8 <prvCheckForValidListAndQueue+0x6c>)
 800ebac:	4a10      	ldr	r2, [pc, #64]	; (800ebf0 <prvCheckForValidListAndQueue+0x64>)
 800ebae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ebb0:	4b12      	ldr	r3, [pc, #72]	; (800ebfc <prvCheckForValidListAndQueue+0x70>)
 800ebb2:	4a10      	ldr	r2, [pc, #64]	; (800ebf4 <prvCheckForValidListAndQueue+0x68>)
 800ebb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	9300      	str	r3, [sp, #0]
 800ebba:	4b11      	ldr	r3, [pc, #68]	; (800ec00 <prvCheckForValidListAndQueue+0x74>)
 800ebbc:	4a11      	ldr	r2, [pc, #68]	; (800ec04 <prvCheckForValidListAndQueue+0x78>)
 800ebbe:	2110      	movs	r1, #16
 800ebc0:	200a      	movs	r0, #10
 800ebc2:	f7fd fb69 	bl	800c298 <xQueueGenericCreateStatic>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	4a08      	ldr	r2, [pc, #32]	; (800ebec <prvCheckForValidListAndQueue+0x60>)
 800ebca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ebcc:	4b07      	ldr	r3, [pc, #28]	; (800ebec <prvCheckForValidListAndQueue+0x60>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d005      	beq.n	800ebe0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ebd4:	4b05      	ldr	r3, [pc, #20]	; (800ebec <prvCheckForValidListAndQueue+0x60>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	490b      	ldr	r1, [pc, #44]	; (800ec08 <prvCheckForValidListAndQueue+0x7c>)
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7fe fa7a 	bl	800d0d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ebe0:	f7fd fa00 	bl	800bfe4 <vPortExitCritical>
}
 800ebe4:	bf00      	nop
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	20005008 	.word	0x20005008
 800ebf0:	20004fd8 	.word	0x20004fd8
 800ebf4:	20004fec 	.word	0x20004fec
 800ebf8:	20005000 	.word	0x20005000
 800ebfc:	20005004 	.word	0x20005004
 800ec00:	200050b4 	.word	0x200050b4
 800ec04:	20005014 	.word	0x20005014
 800ec08:	08014ca4 	.word	0x08014ca4

0800ec0c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b086      	sub	sp, #24
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d10a      	bne.n	800ec34 <xTimerIsTimerActive+0x28>
	__asm volatile
 800ec1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec22:	f383 8811 	msr	BASEPRI, r3
 800ec26:	f3bf 8f6f 	isb	sy
 800ec2a:	f3bf 8f4f 	dsb	sy
 800ec2e:	60fb      	str	r3, [r7, #12]
}
 800ec30:	bf00      	nop
 800ec32:	e7fe      	b.n	800ec32 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800ec34:	f7fd f9a6 	bl	800bf84 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec3e:	f003 0301 	and.w	r3, r3, #1
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d102      	bne.n	800ec4c <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800ec46:	2300      	movs	r3, #0
 800ec48:	617b      	str	r3, [r7, #20]
 800ec4a:	e001      	b.n	800ec50 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800ec50:	f7fd f9c8 	bl	800bfe4 <vPortExitCritical>

	return xReturn;
 800ec54:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800ec56:	4618      	mov	r0, r3
 800ec58:	3718      	adds	r7, #24
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}

0800ec5e <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ec5e:	b580      	push	{r7, lr}
 800ec60:	b086      	sub	sp, #24
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d10a      	bne.n	800ec86 <pvTimerGetTimerID+0x28>
	__asm volatile
 800ec70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec74:	f383 8811 	msr	BASEPRI, r3
 800ec78:	f3bf 8f6f 	isb	sy
 800ec7c:	f3bf 8f4f 	dsb	sy
 800ec80:	60fb      	str	r3, [r7, #12]
}
 800ec82:	bf00      	nop
 800ec84:	e7fe      	b.n	800ec84 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800ec86:	f7fd f97d 	bl	800bf84 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	69db      	ldr	r3, [r3, #28]
 800ec8e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ec90:	f7fd f9a8 	bl	800bfe4 <vPortExitCritical>

	return pvReturn;
 800ec94:	693b      	ldr	r3, [r7, #16]
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3718      	adds	r7, #24
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}
	...

0800eca0 <__errno>:
 800eca0:	4b01      	ldr	r3, [pc, #4]	; (800eca8 <__errno+0x8>)
 800eca2:	6818      	ldr	r0, [r3, #0]
 800eca4:	4770      	bx	lr
 800eca6:	bf00      	nop
 800eca8:	20000038 	.word	0x20000038

0800ecac <std>:
 800ecac:	2300      	movs	r3, #0
 800ecae:	b510      	push	{r4, lr}
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	e9c0 3300 	strd	r3, r3, [r0]
 800ecb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecba:	6083      	str	r3, [r0, #8]
 800ecbc:	8181      	strh	r1, [r0, #12]
 800ecbe:	6643      	str	r3, [r0, #100]	; 0x64
 800ecc0:	81c2      	strh	r2, [r0, #14]
 800ecc2:	6183      	str	r3, [r0, #24]
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	2208      	movs	r2, #8
 800ecc8:	305c      	adds	r0, #92	; 0x5c
 800ecca:	f000 f91a 	bl	800ef02 <memset>
 800ecce:	4b05      	ldr	r3, [pc, #20]	; (800ece4 <std+0x38>)
 800ecd0:	6263      	str	r3, [r4, #36]	; 0x24
 800ecd2:	4b05      	ldr	r3, [pc, #20]	; (800ece8 <std+0x3c>)
 800ecd4:	62a3      	str	r3, [r4, #40]	; 0x28
 800ecd6:	4b05      	ldr	r3, [pc, #20]	; (800ecec <std+0x40>)
 800ecd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ecda:	4b05      	ldr	r3, [pc, #20]	; (800ecf0 <std+0x44>)
 800ecdc:	6224      	str	r4, [r4, #32]
 800ecde:	6323      	str	r3, [r4, #48]	; 0x30
 800ece0:	bd10      	pop	{r4, pc}
 800ece2:	bf00      	nop
 800ece4:	0800fe71 	.word	0x0800fe71
 800ece8:	0800fe93 	.word	0x0800fe93
 800ecec:	0800fecb 	.word	0x0800fecb
 800ecf0:	0800feef 	.word	0x0800feef

0800ecf4 <_cleanup_r>:
 800ecf4:	4901      	ldr	r1, [pc, #4]	; (800ecfc <_cleanup_r+0x8>)
 800ecf6:	f000 b8af 	b.w	800ee58 <_fwalk_reent>
 800ecfa:	bf00      	nop
 800ecfc:	08011a99 	.word	0x08011a99

0800ed00 <__sfmoreglue>:
 800ed00:	b570      	push	{r4, r5, r6, lr}
 800ed02:	2268      	movs	r2, #104	; 0x68
 800ed04:	1e4d      	subs	r5, r1, #1
 800ed06:	4355      	muls	r5, r2
 800ed08:	460e      	mov	r6, r1
 800ed0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed0e:	f000 f921 	bl	800ef54 <_malloc_r>
 800ed12:	4604      	mov	r4, r0
 800ed14:	b140      	cbz	r0, 800ed28 <__sfmoreglue+0x28>
 800ed16:	2100      	movs	r1, #0
 800ed18:	e9c0 1600 	strd	r1, r6, [r0]
 800ed1c:	300c      	adds	r0, #12
 800ed1e:	60a0      	str	r0, [r4, #8]
 800ed20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed24:	f000 f8ed 	bl	800ef02 <memset>
 800ed28:	4620      	mov	r0, r4
 800ed2a:	bd70      	pop	{r4, r5, r6, pc}

0800ed2c <__sfp_lock_acquire>:
 800ed2c:	4801      	ldr	r0, [pc, #4]	; (800ed34 <__sfp_lock_acquire+0x8>)
 800ed2e:	f000 b8d8 	b.w	800eee2 <__retarget_lock_acquire_recursive>
 800ed32:	bf00      	nop
 800ed34:	20005105 	.word	0x20005105

0800ed38 <__sfp_lock_release>:
 800ed38:	4801      	ldr	r0, [pc, #4]	; (800ed40 <__sfp_lock_release+0x8>)
 800ed3a:	f000 b8d3 	b.w	800eee4 <__retarget_lock_release_recursive>
 800ed3e:	bf00      	nop
 800ed40:	20005105 	.word	0x20005105

0800ed44 <__sinit_lock_acquire>:
 800ed44:	4801      	ldr	r0, [pc, #4]	; (800ed4c <__sinit_lock_acquire+0x8>)
 800ed46:	f000 b8cc 	b.w	800eee2 <__retarget_lock_acquire_recursive>
 800ed4a:	bf00      	nop
 800ed4c:	20005106 	.word	0x20005106

0800ed50 <__sinit_lock_release>:
 800ed50:	4801      	ldr	r0, [pc, #4]	; (800ed58 <__sinit_lock_release+0x8>)
 800ed52:	f000 b8c7 	b.w	800eee4 <__retarget_lock_release_recursive>
 800ed56:	bf00      	nop
 800ed58:	20005106 	.word	0x20005106

0800ed5c <__sinit>:
 800ed5c:	b510      	push	{r4, lr}
 800ed5e:	4604      	mov	r4, r0
 800ed60:	f7ff fff0 	bl	800ed44 <__sinit_lock_acquire>
 800ed64:	69a3      	ldr	r3, [r4, #24]
 800ed66:	b11b      	cbz	r3, 800ed70 <__sinit+0x14>
 800ed68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed6c:	f7ff bff0 	b.w	800ed50 <__sinit_lock_release>
 800ed70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ed74:	6523      	str	r3, [r4, #80]	; 0x50
 800ed76:	4b13      	ldr	r3, [pc, #76]	; (800edc4 <__sinit+0x68>)
 800ed78:	4a13      	ldr	r2, [pc, #76]	; (800edc8 <__sinit+0x6c>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ed7e:	42a3      	cmp	r3, r4
 800ed80:	bf04      	itt	eq
 800ed82:	2301      	moveq	r3, #1
 800ed84:	61a3      	streq	r3, [r4, #24]
 800ed86:	4620      	mov	r0, r4
 800ed88:	f000 f820 	bl	800edcc <__sfp>
 800ed8c:	6060      	str	r0, [r4, #4]
 800ed8e:	4620      	mov	r0, r4
 800ed90:	f000 f81c 	bl	800edcc <__sfp>
 800ed94:	60a0      	str	r0, [r4, #8]
 800ed96:	4620      	mov	r0, r4
 800ed98:	f000 f818 	bl	800edcc <__sfp>
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	60e0      	str	r0, [r4, #12]
 800eda0:	2104      	movs	r1, #4
 800eda2:	6860      	ldr	r0, [r4, #4]
 800eda4:	f7ff ff82 	bl	800ecac <std>
 800eda8:	68a0      	ldr	r0, [r4, #8]
 800edaa:	2201      	movs	r2, #1
 800edac:	2109      	movs	r1, #9
 800edae:	f7ff ff7d 	bl	800ecac <std>
 800edb2:	68e0      	ldr	r0, [r4, #12]
 800edb4:	2202      	movs	r2, #2
 800edb6:	2112      	movs	r1, #18
 800edb8:	f7ff ff78 	bl	800ecac <std>
 800edbc:	2301      	movs	r3, #1
 800edbe:	61a3      	str	r3, [r4, #24]
 800edc0:	e7d2      	b.n	800ed68 <__sinit+0xc>
 800edc2:	bf00      	nop
 800edc4:	080162b0 	.word	0x080162b0
 800edc8:	0800ecf5 	.word	0x0800ecf5

0800edcc <__sfp>:
 800edcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edce:	4607      	mov	r7, r0
 800edd0:	f7ff ffac 	bl	800ed2c <__sfp_lock_acquire>
 800edd4:	4b1e      	ldr	r3, [pc, #120]	; (800ee50 <__sfp+0x84>)
 800edd6:	681e      	ldr	r6, [r3, #0]
 800edd8:	69b3      	ldr	r3, [r6, #24]
 800edda:	b913      	cbnz	r3, 800ede2 <__sfp+0x16>
 800eddc:	4630      	mov	r0, r6
 800edde:	f7ff ffbd 	bl	800ed5c <__sinit>
 800ede2:	3648      	adds	r6, #72	; 0x48
 800ede4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ede8:	3b01      	subs	r3, #1
 800edea:	d503      	bpl.n	800edf4 <__sfp+0x28>
 800edec:	6833      	ldr	r3, [r6, #0]
 800edee:	b30b      	cbz	r3, 800ee34 <__sfp+0x68>
 800edf0:	6836      	ldr	r6, [r6, #0]
 800edf2:	e7f7      	b.n	800ede4 <__sfp+0x18>
 800edf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800edf8:	b9d5      	cbnz	r5, 800ee30 <__sfp+0x64>
 800edfa:	4b16      	ldr	r3, [pc, #88]	; (800ee54 <__sfp+0x88>)
 800edfc:	60e3      	str	r3, [r4, #12]
 800edfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee02:	6665      	str	r5, [r4, #100]	; 0x64
 800ee04:	f000 f86c 	bl	800eee0 <__retarget_lock_init_recursive>
 800ee08:	f7ff ff96 	bl	800ed38 <__sfp_lock_release>
 800ee0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee14:	6025      	str	r5, [r4, #0]
 800ee16:	61a5      	str	r5, [r4, #24]
 800ee18:	2208      	movs	r2, #8
 800ee1a:	4629      	mov	r1, r5
 800ee1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee20:	f000 f86f 	bl	800ef02 <memset>
 800ee24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee30:	3468      	adds	r4, #104	; 0x68
 800ee32:	e7d9      	b.n	800ede8 <__sfp+0x1c>
 800ee34:	2104      	movs	r1, #4
 800ee36:	4638      	mov	r0, r7
 800ee38:	f7ff ff62 	bl	800ed00 <__sfmoreglue>
 800ee3c:	4604      	mov	r4, r0
 800ee3e:	6030      	str	r0, [r6, #0]
 800ee40:	2800      	cmp	r0, #0
 800ee42:	d1d5      	bne.n	800edf0 <__sfp+0x24>
 800ee44:	f7ff ff78 	bl	800ed38 <__sfp_lock_release>
 800ee48:	230c      	movs	r3, #12
 800ee4a:	603b      	str	r3, [r7, #0]
 800ee4c:	e7ee      	b.n	800ee2c <__sfp+0x60>
 800ee4e:	bf00      	nop
 800ee50:	080162b0 	.word	0x080162b0
 800ee54:	ffff0001 	.word	0xffff0001

0800ee58 <_fwalk_reent>:
 800ee58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee5c:	4606      	mov	r6, r0
 800ee5e:	4688      	mov	r8, r1
 800ee60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee64:	2700      	movs	r7, #0
 800ee66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee6a:	f1b9 0901 	subs.w	r9, r9, #1
 800ee6e:	d505      	bpl.n	800ee7c <_fwalk_reent+0x24>
 800ee70:	6824      	ldr	r4, [r4, #0]
 800ee72:	2c00      	cmp	r4, #0
 800ee74:	d1f7      	bne.n	800ee66 <_fwalk_reent+0xe>
 800ee76:	4638      	mov	r0, r7
 800ee78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee7c:	89ab      	ldrh	r3, [r5, #12]
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d907      	bls.n	800ee92 <_fwalk_reent+0x3a>
 800ee82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee86:	3301      	adds	r3, #1
 800ee88:	d003      	beq.n	800ee92 <_fwalk_reent+0x3a>
 800ee8a:	4629      	mov	r1, r5
 800ee8c:	4630      	mov	r0, r6
 800ee8e:	47c0      	blx	r8
 800ee90:	4307      	orrs	r7, r0
 800ee92:	3568      	adds	r5, #104	; 0x68
 800ee94:	e7e9      	b.n	800ee6a <_fwalk_reent+0x12>
	...

0800ee98 <__libc_init_array>:
 800ee98:	b570      	push	{r4, r5, r6, lr}
 800ee9a:	4d0d      	ldr	r5, [pc, #52]	; (800eed0 <__libc_init_array+0x38>)
 800ee9c:	4c0d      	ldr	r4, [pc, #52]	; (800eed4 <__libc_init_array+0x3c>)
 800ee9e:	1b64      	subs	r4, r4, r5
 800eea0:	10a4      	asrs	r4, r4, #2
 800eea2:	2600      	movs	r6, #0
 800eea4:	42a6      	cmp	r6, r4
 800eea6:	d109      	bne.n	800eebc <__libc_init_array+0x24>
 800eea8:	4d0b      	ldr	r5, [pc, #44]	; (800eed8 <__libc_init_array+0x40>)
 800eeaa:	4c0c      	ldr	r4, [pc, #48]	; (800eedc <__libc_init_array+0x44>)
 800eeac:	f005 fb22 	bl	80144f4 <_init>
 800eeb0:	1b64      	subs	r4, r4, r5
 800eeb2:	10a4      	asrs	r4, r4, #2
 800eeb4:	2600      	movs	r6, #0
 800eeb6:	42a6      	cmp	r6, r4
 800eeb8:	d105      	bne.n	800eec6 <__libc_init_array+0x2e>
 800eeba:	bd70      	pop	{r4, r5, r6, pc}
 800eebc:	f855 3b04 	ldr.w	r3, [r5], #4
 800eec0:	4798      	blx	r3
 800eec2:	3601      	adds	r6, #1
 800eec4:	e7ee      	b.n	800eea4 <__libc_init_array+0xc>
 800eec6:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeca:	4798      	blx	r3
 800eecc:	3601      	adds	r6, #1
 800eece:	e7f2      	b.n	800eeb6 <__libc_init_array+0x1e>
 800eed0:	08016730 	.word	0x08016730
 800eed4:	08016730 	.word	0x08016730
 800eed8:	08016730 	.word	0x08016730
 800eedc:	08016734 	.word	0x08016734

0800eee0 <__retarget_lock_init_recursive>:
 800eee0:	4770      	bx	lr

0800eee2 <__retarget_lock_acquire_recursive>:
 800eee2:	4770      	bx	lr

0800eee4 <__retarget_lock_release_recursive>:
 800eee4:	4770      	bx	lr

0800eee6 <memcpy>:
 800eee6:	440a      	add	r2, r1
 800eee8:	4291      	cmp	r1, r2
 800eeea:	f100 33ff 	add.w	r3, r0, #4294967295
 800eeee:	d100      	bne.n	800eef2 <memcpy+0xc>
 800eef0:	4770      	bx	lr
 800eef2:	b510      	push	{r4, lr}
 800eef4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eef8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eefc:	4291      	cmp	r1, r2
 800eefe:	d1f9      	bne.n	800eef4 <memcpy+0xe>
 800ef00:	bd10      	pop	{r4, pc}

0800ef02 <memset>:
 800ef02:	4402      	add	r2, r0
 800ef04:	4603      	mov	r3, r0
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d100      	bne.n	800ef0c <memset+0xa>
 800ef0a:	4770      	bx	lr
 800ef0c:	f803 1b01 	strb.w	r1, [r3], #1
 800ef10:	e7f9      	b.n	800ef06 <memset+0x4>
	...

0800ef14 <sbrk_aligned>:
 800ef14:	b570      	push	{r4, r5, r6, lr}
 800ef16:	4e0e      	ldr	r6, [pc, #56]	; (800ef50 <sbrk_aligned+0x3c>)
 800ef18:	460c      	mov	r4, r1
 800ef1a:	6831      	ldr	r1, [r6, #0]
 800ef1c:	4605      	mov	r5, r0
 800ef1e:	b911      	cbnz	r1, 800ef26 <sbrk_aligned+0x12>
 800ef20:	f000 ff70 	bl	800fe04 <_sbrk_r>
 800ef24:	6030      	str	r0, [r6, #0]
 800ef26:	4621      	mov	r1, r4
 800ef28:	4628      	mov	r0, r5
 800ef2a:	f000 ff6b 	bl	800fe04 <_sbrk_r>
 800ef2e:	1c43      	adds	r3, r0, #1
 800ef30:	d00a      	beq.n	800ef48 <sbrk_aligned+0x34>
 800ef32:	1cc4      	adds	r4, r0, #3
 800ef34:	f024 0403 	bic.w	r4, r4, #3
 800ef38:	42a0      	cmp	r0, r4
 800ef3a:	d007      	beq.n	800ef4c <sbrk_aligned+0x38>
 800ef3c:	1a21      	subs	r1, r4, r0
 800ef3e:	4628      	mov	r0, r5
 800ef40:	f000 ff60 	bl	800fe04 <_sbrk_r>
 800ef44:	3001      	adds	r0, #1
 800ef46:	d101      	bne.n	800ef4c <sbrk_aligned+0x38>
 800ef48:	f04f 34ff 	mov.w	r4, #4294967295
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	bd70      	pop	{r4, r5, r6, pc}
 800ef50:	2000510c 	.word	0x2000510c

0800ef54 <_malloc_r>:
 800ef54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef58:	1ccd      	adds	r5, r1, #3
 800ef5a:	f025 0503 	bic.w	r5, r5, #3
 800ef5e:	3508      	adds	r5, #8
 800ef60:	2d0c      	cmp	r5, #12
 800ef62:	bf38      	it	cc
 800ef64:	250c      	movcc	r5, #12
 800ef66:	2d00      	cmp	r5, #0
 800ef68:	4607      	mov	r7, r0
 800ef6a:	db01      	blt.n	800ef70 <_malloc_r+0x1c>
 800ef6c:	42a9      	cmp	r1, r5
 800ef6e:	d905      	bls.n	800ef7c <_malloc_r+0x28>
 800ef70:	230c      	movs	r3, #12
 800ef72:	603b      	str	r3, [r7, #0]
 800ef74:	2600      	movs	r6, #0
 800ef76:	4630      	mov	r0, r6
 800ef78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef7c:	4e2e      	ldr	r6, [pc, #184]	; (800f038 <_malloc_r+0xe4>)
 800ef7e:	f003 f967 	bl	8012250 <__malloc_lock>
 800ef82:	6833      	ldr	r3, [r6, #0]
 800ef84:	461c      	mov	r4, r3
 800ef86:	bb34      	cbnz	r4, 800efd6 <_malloc_r+0x82>
 800ef88:	4629      	mov	r1, r5
 800ef8a:	4638      	mov	r0, r7
 800ef8c:	f7ff ffc2 	bl	800ef14 <sbrk_aligned>
 800ef90:	1c43      	adds	r3, r0, #1
 800ef92:	4604      	mov	r4, r0
 800ef94:	d14d      	bne.n	800f032 <_malloc_r+0xde>
 800ef96:	6834      	ldr	r4, [r6, #0]
 800ef98:	4626      	mov	r6, r4
 800ef9a:	2e00      	cmp	r6, #0
 800ef9c:	d140      	bne.n	800f020 <_malloc_r+0xcc>
 800ef9e:	6823      	ldr	r3, [r4, #0]
 800efa0:	4631      	mov	r1, r6
 800efa2:	4638      	mov	r0, r7
 800efa4:	eb04 0803 	add.w	r8, r4, r3
 800efa8:	f000 ff2c 	bl	800fe04 <_sbrk_r>
 800efac:	4580      	cmp	r8, r0
 800efae:	d13a      	bne.n	800f026 <_malloc_r+0xd2>
 800efb0:	6821      	ldr	r1, [r4, #0]
 800efb2:	3503      	adds	r5, #3
 800efb4:	1a6d      	subs	r5, r5, r1
 800efb6:	f025 0503 	bic.w	r5, r5, #3
 800efba:	3508      	adds	r5, #8
 800efbc:	2d0c      	cmp	r5, #12
 800efbe:	bf38      	it	cc
 800efc0:	250c      	movcc	r5, #12
 800efc2:	4629      	mov	r1, r5
 800efc4:	4638      	mov	r0, r7
 800efc6:	f7ff ffa5 	bl	800ef14 <sbrk_aligned>
 800efca:	3001      	adds	r0, #1
 800efcc:	d02b      	beq.n	800f026 <_malloc_r+0xd2>
 800efce:	6823      	ldr	r3, [r4, #0]
 800efd0:	442b      	add	r3, r5
 800efd2:	6023      	str	r3, [r4, #0]
 800efd4:	e00e      	b.n	800eff4 <_malloc_r+0xa0>
 800efd6:	6822      	ldr	r2, [r4, #0]
 800efd8:	1b52      	subs	r2, r2, r5
 800efda:	d41e      	bmi.n	800f01a <_malloc_r+0xc6>
 800efdc:	2a0b      	cmp	r2, #11
 800efde:	d916      	bls.n	800f00e <_malloc_r+0xba>
 800efe0:	1961      	adds	r1, r4, r5
 800efe2:	42a3      	cmp	r3, r4
 800efe4:	6025      	str	r5, [r4, #0]
 800efe6:	bf18      	it	ne
 800efe8:	6059      	strne	r1, [r3, #4]
 800efea:	6863      	ldr	r3, [r4, #4]
 800efec:	bf08      	it	eq
 800efee:	6031      	streq	r1, [r6, #0]
 800eff0:	5162      	str	r2, [r4, r5]
 800eff2:	604b      	str	r3, [r1, #4]
 800eff4:	4638      	mov	r0, r7
 800eff6:	f104 060b 	add.w	r6, r4, #11
 800effa:	f003 f92f 	bl	801225c <__malloc_unlock>
 800effe:	f026 0607 	bic.w	r6, r6, #7
 800f002:	1d23      	adds	r3, r4, #4
 800f004:	1af2      	subs	r2, r6, r3
 800f006:	d0b6      	beq.n	800ef76 <_malloc_r+0x22>
 800f008:	1b9b      	subs	r3, r3, r6
 800f00a:	50a3      	str	r3, [r4, r2]
 800f00c:	e7b3      	b.n	800ef76 <_malloc_r+0x22>
 800f00e:	6862      	ldr	r2, [r4, #4]
 800f010:	42a3      	cmp	r3, r4
 800f012:	bf0c      	ite	eq
 800f014:	6032      	streq	r2, [r6, #0]
 800f016:	605a      	strne	r2, [r3, #4]
 800f018:	e7ec      	b.n	800eff4 <_malloc_r+0xa0>
 800f01a:	4623      	mov	r3, r4
 800f01c:	6864      	ldr	r4, [r4, #4]
 800f01e:	e7b2      	b.n	800ef86 <_malloc_r+0x32>
 800f020:	4634      	mov	r4, r6
 800f022:	6876      	ldr	r6, [r6, #4]
 800f024:	e7b9      	b.n	800ef9a <_malloc_r+0x46>
 800f026:	230c      	movs	r3, #12
 800f028:	603b      	str	r3, [r7, #0]
 800f02a:	4638      	mov	r0, r7
 800f02c:	f003 f916 	bl	801225c <__malloc_unlock>
 800f030:	e7a1      	b.n	800ef76 <_malloc_r+0x22>
 800f032:	6025      	str	r5, [r4, #0]
 800f034:	e7de      	b.n	800eff4 <_malloc_r+0xa0>
 800f036:	bf00      	nop
 800f038:	20005108 	.word	0x20005108

0800f03c <__cvt>:
 800f03c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f040:	ec55 4b10 	vmov	r4, r5, d0
 800f044:	2d00      	cmp	r5, #0
 800f046:	460e      	mov	r6, r1
 800f048:	4619      	mov	r1, r3
 800f04a:	462b      	mov	r3, r5
 800f04c:	bfbb      	ittet	lt
 800f04e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f052:	461d      	movlt	r5, r3
 800f054:	2300      	movge	r3, #0
 800f056:	232d      	movlt	r3, #45	; 0x2d
 800f058:	700b      	strb	r3, [r1, #0]
 800f05a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f05c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f060:	4691      	mov	r9, r2
 800f062:	f023 0820 	bic.w	r8, r3, #32
 800f066:	bfbc      	itt	lt
 800f068:	4622      	movlt	r2, r4
 800f06a:	4614      	movlt	r4, r2
 800f06c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f070:	d005      	beq.n	800f07e <__cvt+0x42>
 800f072:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f076:	d100      	bne.n	800f07a <__cvt+0x3e>
 800f078:	3601      	adds	r6, #1
 800f07a:	2102      	movs	r1, #2
 800f07c:	e000      	b.n	800f080 <__cvt+0x44>
 800f07e:	2103      	movs	r1, #3
 800f080:	ab03      	add	r3, sp, #12
 800f082:	9301      	str	r3, [sp, #4]
 800f084:	ab02      	add	r3, sp, #8
 800f086:	9300      	str	r3, [sp, #0]
 800f088:	ec45 4b10 	vmov	d0, r4, r5
 800f08c:	4653      	mov	r3, sl
 800f08e:	4632      	mov	r2, r6
 800f090:	f001 fe8e 	bl	8010db0 <_dtoa_r>
 800f094:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f098:	4607      	mov	r7, r0
 800f09a:	d102      	bne.n	800f0a2 <__cvt+0x66>
 800f09c:	f019 0f01 	tst.w	r9, #1
 800f0a0:	d022      	beq.n	800f0e8 <__cvt+0xac>
 800f0a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f0a6:	eb07 0906 	add.w	r9, r7, r6
 800f0aa:	d110      	bne.n	800f0ce <__cvt+0x92>
 800f0ac:	783b      	ldrb	r3, [r7, #0]
 800f0ae:	2b30      	cmp	r3, #48	; 0x30
 800f0b0:	d10a      	bne.n	800f0c8 <__cvt+0x8c>
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	4629      	mov	r1, r5
 800f0ba:	f7f1 fd0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800f0be:	b918      	cbnz	r0, 800f0c8 <__cvt+0x8c>
 800f0c0:	f1c6 0601 	rsb	r6, r6, #1
 800f0c4:	f8ca 6000 	str.w	r6, [sl]
 800f0c8:	f8da 3000 	ldr.w	r3, [sl]
 800f0cc:	4499      	add	r9, r3
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	4629      	mov	r1, r5
 800f0d6:	f7f1 fcff 	bl	8000ad8 <__aeabi_dcmpeq>
 800f0da:	b108      	cbz	r0, 800f0e0 <__cvt+0xa4>
 800f0dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0e0:	2230      	movs	r2, #48	; 0x30
 800f0e2:	9b03      	ldr	r3, [sp, #12]
 800f0e4:	454b      	cmp	r3, r9
 800f0e6:	d307      	bcc.n	800f0f8 <__cvt+0xbc>
 800f0e8:	9b03      	ldr	r3, [sp, #12]
 800f0ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0ec:	1bdb      	subs	r3, r3, r7
 800f0ee:	4638      	mov	r0, r7
 800f0f0:	6013      	str	r3, [r2, #0]
 800f0f2:	b004      	add	sp, #16
 800f0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0f8:	1c59      	adds	r1, r3, #1
 800f0fa:	9103      	str	r1, [sp, #12]
 800f0fc:	701a      	strb	r2, [r3, #0]
 800f0fe:	e7f0      	b.n	800f0e2 <__cvt+0xa6>

0800f100 <__exponent>:
 800f100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f102:	4603      	mov	r3, r0
 800f104:	2900      	cmp	r1, #0
 800f106:	bfb8      	it	lt
 800f108:	4249      	neglt	r1, r1
 800f10a:	f803 2b02 	strb.w	r2, [r3], #2
 800f10e:	bfb4      	ite	lt
 800f110:	222d      	movlt	r2, #45	; 0x2d
 800f112:	222b      	movge	r2, #43	; 0x2b
 800f114:	2909      	cmp	r1, #9
 800f116:	7042      	strb	r2, [r0, #1]
 800f118:	dd2a      	ble.n	800f170 <__exponent+0x70>
 800f11a:	f10d 0407 	add.w	r4, sp, #7
 800f11e:	46a4      	mov	ip, r4
 800f120:	270a      	movs	r7, #10
 800f122:	46a6      	mov	lr, r4
 800f124:	460a      	mov	r2, r1
 800f126:	fb91 f6f7 	sdiv	r6, r1, r7
 800f12a:	fb07 1516 	mls	r5, r7, r6, r1
 800f12e:	3530      	adds	r5, #48	; 0x30
 800f130:	2a63      	cmp	r2, #99	; 0x63
 800f132:	f104 34ff 	add.w	r4, r4, #4294967295
 800f136:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f13a:	4631      	mov	r1, r6
 800f13c:	dcf1      	bgt.n	800f122 <__exponent+0x22>
 800f13e:	3130      	adds	r1, #48	; 0x30
 800f140:	f1ae 0502 	sub.w	r5, lr, #2
 800f144:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f148:	1c44      	adds	r4, r0, #1
 800f14a:	4629      	mov	r1, r5
 800f14c:	4561      	cmp	r1, ip
 800f14e:	d30a      	bcc.n	800f166 <__exponent+0x66>
 800f150:	f10d 0209 	add.w	r2, sp, #9
 800f154:	eba2 020e 	sub.w	r2, r2, lr
 800f158:	4565      	cmp	r5, ip
 800f15a:	bf88      	it	hi
 800f15c:	2200      	movhi	r2, #0
 800f15e:	4413      	add	r3, r2
 800f160:	1a18      	subs	r0, r3, r0
 800f162:	b003      	add	sp, #12
 800f164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f166:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f16a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f16e:	e7ed      	b.n	800f14c <__exponent+0x4c>
 800f170:	2330      	movs	r3, #48	; 0x30
 800f172:	3130      	adds	r1, #48	; 0x30
 800f174:	7083      	strb	r3, [r0, #2]
 800f176:	70c1      	strb	r1, [r0, #3]
 800f178:	1d03      	adds	r3, r0, #4
 800f17a:	e7f1      	b.n	800f160 <__exponent+0x60>

0800f17c <_printf_float>:
 800f17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f180:	ed2d 8b02 	vpush	{d8}
 800f184:	b08d      	sub	sp, #52	; 0x34
 800f186:	460c      	mov	r4, r1
 800f188:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f18c:	4616      	mov	r6, r2
 800f18e:	461f      	mov	r7, r3
 800f190:	4605      	mov	r5, r0
 800f192:	f003 f82d 	bl	80121f0 <_localeconv_r>
 800f196:	f8d0 a000 	ldr.w	sl, [r0]
 800f19a:	4650      	mov	r0, sl
 800f19c:	f7f1 f820 	bl	80001e0 <strlen>
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	930a      	str	r3, [sp, #40]	; 0x28
 800f1a4:	6823      	ldr	r3, [r4, #0]
 800f1a6:	9305      	str	r3, [sp, #20]
 800f1a8:	f8d8 3000 	ldr.w	r3, [r8]
 800f1ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f1b0:	3307      	adds	r3, #7
 800f1b2:	f023 0307 	bic.w	r3, r3, #7
 800f1b6:	f103 0208 	add.w	r2, r3, #8
 800f1ba:	f8c8 2000 	str.w	r2, [r8]
 800f1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f1c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f1ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f1ce:	9307      	str	r3, [sp, #28]
 800f1d0:	f8cd 8018 	str.w	r8, [sp, #24]
 800f1d4:	ee08 0a10 	vmov	s16, r0
 800f1d8:	4b9f      	ldr	r3, [pc, #636]	; (800f458 <_printf_float+0x2dc>)
 800f1da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1de:	f04f 32ff 	mov.w	r2, #4294967295
 800f1e2:	f7f1 fcab 	bl	8000b3c <__aeabi_dcmpun>
 800f1e6:	bb88      	cbnz	r0, 800f24c <_printf_float+0xd0>
 800f1e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1ec:	4b9a      	ldr	r3, [pc, #616]	; (800f458 <_printf_float+0x2dc>)
 800f1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f1f2:	f7f1 fc85 	bl	8000b00 <__aeabi_dcmple>
 800f1f6:	bb48      	cbnz	r0, 800f24c <_printf_float+0xd0>
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	4640      	mov	r0, r8
 800f1fe:	4649      	mov	r1, r9
 800f200:	f7f1 fc74 	bl	8000aec <__aeabi_dcmplt>
 800f204:	b110      	cbz	r0, 800f20c <_printf_float+0x90>
 800f206:	232d      	movs	r3, #45	; 0x2d
 800f208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f20c:	4b93      	ldr	r3, [pc, #588]	; (800f45c <_printf_float+0x2e0>)
 800f20e:	4894      	ldr	r0, [pc, #592]	; (800f460 <_printf_float+0x2e4>)
 800f210:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f214:	bf94      	ite	ls
 800f216:	4698      	movls	r8, r3
 800f218:	4680      	movhi	r8, r0
 800f21a:	2303      	movs	r3, #3
 800f21c:	6123      	str	r3, [r4, #16]
 800f21e:	9b05      	ldr	r3, [sp, #20]
 800f220:	f023 0204 	bic.w	r2, r3, #4
 800f224:	6022      	str	r2, [r4, #0]
 800f226:	f04f 0900 	mov.w	r9, #0
 800f22a:	9700      	str	r7, [sp, #0]
 800f22c:	4633      	mov	r3, r6
 800f22e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f230:	4621      	mov	r1, r4
 800f232:	4628      	mov	r0, r5
 800f234:	f000 f9d8 	bl	800f5e8 <_printf_common>
 800f238:	3001      	adds	r0, #1
 800f23a:	f040 8090 	bne.w	800f35e <_printf_float+0x1e2>
 800f23e:	f04f 30ff 	mov.w	r0, #4294967295
 800f242:	b00d      	add	sp, #52	; 0x34
 800f244:	ecbd 8b02 	vpop	{d8}
 800f248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f24c:	4642      	mov	r2, r8
 800f24e:	464b      	mov	r3, r9
 800f250:	4640      	mov	r0, r8
 800f252:	4649      	mov	r1, r9
 800f254:	f7f1 fc72 	bl	8000b3c <__aeabi_dcmpun>
 800f258:	b140      	cbz	r0, 800f26c <_printf_float+0xf0>
 800f25a:	464b      	mov	r3, r9
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	bfbc      	itt	lt
 800f260:	232d      	movlt	r3, #45	; 0x2d
 800f262:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f266:	487f      	ldr	r0, [pc, #508]	; (800f464 <_printf_float+0x2e8>)
 800f268:	4b7f      	ldr	r3, [pc, #508]	; (800f468 <_printf_float+0x2ec>)
 800f26a:	e7d1      	b.n	800f210 <_printf_float+0x94>
 800f26c:	6863      	ldr	r3, [r4, #4]
 800f26e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f272:	9206      	str	r2, [sp, #24]
 800f274:	1c5a      	adds	r2, r3, #1
 800f276:	d13f      	bne.n	800f2f8 <_printf_float+0x17c>
 800f278:	2306      	movs	r3, #6
 800f27a:	6063      	str	r3, [r4, #4]
 800f27c:	9b05      	ldr	r3, [sp, #20]
 800f27e:	6861      	ldr	r1, [r4, #4]
 800f280:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f284:	2300      	movs	r3, #0
 800f286:	9303      	str	r3, [sp, #12]
 800f288:	ab0a      	add	r3, sp, #40	; 0x28
 800f28a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f28e:	ab09      	add	r3, sp, #36	; 0x24
 800f290:	ec49 8b10 	vmov	d0, r8, r9
 800f294:	9300      	str	r3, [sp, #0]
 800f296:	6022      	str	r2, [r4, #0]
 800f298:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f29c:	4628      	mov	r0, r5
 800f29e:	f7ff fecd 	bl	800f03c <__cvt>
 800f2a2:	9b06      	ldr	r3, [sp, #24]
 800f2a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2a6:	2b47      	cmp	r3, #71	; 0x47
 800f2a8:	4680      	mov	r8, r0
 800f2aa:	d108      	bne.n	800f2be <_printf_float+0x142>
 800f2ac:	1cc8      	adds	r0, r1, #3
 800f2ae:	db02      	blt.n	800f2b6 <_printf_float+0x13a>
 800f2b0:	6863      	ldr	r3, [r4, #4]
 800f2b2:	4299      	cmp	r1, r3
 800f2b4:	dd41      	ble.n	800f33a <_printf_float+0x1be>
 800f2b6:	f1ab 0b02 	sub.w	fp, fp, #2
 800f2ba:	fa5f fb8b 	uxtb.w	fp, fp
 800f2be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f2c2:	d820      	bhi.n	800f306 <_printf_float+0x18a>
 800f2c4:	3901      	subs	r1, #1
 800f2c6:	465a      	mov	r2, fp
 800f2c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f2cc:	9109      	str	r1, [sp, #36]	; 0x24
 800f2ce:	f7ff ff17 	bl	800f100 <__exponent>
 800f2d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2d4:	1813      	adds	r3, r2, r0
 800f2d6:	2a01      	cmp	r2, #1
 800f2d8:	4681      	mov	r9, r0
 800f2da:	6123      	str	r3, [r4, #16]
 800f2dc:	dc02      	bgt.n	800f2e4 <_printf_float+0x168>
 800f2de:	6822      	ldr	r2, [r4, #0]
 800f2e0:	07d2      	lsls	r2, r2, #31
 800f2e2:	d501      	bpl.n	800f2e8 <_printf_float+0x16c>
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	6123      	str	r3, [r4, #16]
 800f2e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d09c      	beq.n	800f22a <_printf_float+0xae>
 800f2f0:	232d      	movs	r3, #45	; 0x2d
 800f2f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2f6:	e798      	b.n	800f22a <_printf_float+0xae>
 800f2f8:	9a06      	ldr	r2, [sp, #24]
 800f2fa:	2a47      	cmp	r2, #71	; 0x47
 800f2fc:	d1be      	bne.n	800f27c <_printf_float+0x100>
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d1bc      	bne.n	800f27c <_printf_float+0x100>
 800f302:	2301      	movs	r3, #1
 800f304:	e7b9      	b.n	800f27a <_printf_float+0xfe>
 800f306:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f30a:	d118      	bne.n	800f33e <_printf_float+0x1c2>
 800f30c:	2900      	cmp	r1, #0
 800f30e:	6863      	ldr	r3, [r4, #4]
 800f310:	dd0b      	ble.n	800f32a <_printf_float+0x1ae>
 800f312:	6121      	str	r1, [r4, #16]
 800f314:	b913      	cbnz	r3, 800f31c <_printf_float+0x1a0>
 800f316:	6822      	ldr	r2, [r4, #0]
 800f318:	07d0      	lsls	r0, r2, #31
 800f31a:	d502      	bpl.n	800f322 <_printf_float+0x1a6>
 800f31c:	3301      	adds	r3, #1
 800f31e:	440b      	add	r3, r1
 800f320:	6123      	str	r3, [r4, #16]
 800f322:	65a1      	str	r1, [r4, #88]	; 0x58
 800f324:	f04f 0900 	mov.w	r9, #0
 800f328:	e7de      	b.n	800f2e8 <_printf_float+0x16c>
 800f32a:	b913      	cbnz	r3, 800f332 <_printf_float+0x1b6>
 800f32c:	6822      	ldr	r2, [r4, #0]
 800f32e:	07d2      	lsls	r2, r2, #31
 800f330:	d501      	bpl.n	800f336 <_printf_float+0x1ba>
 800f332:	3302      	adds	r3, #2
 800f334:	e7f4      	b.n	800f320 <_printf_float+0x1a4>
 800f336:	2301      	movs	r3, #1
 800f338:	e7f2      	b.n	800f320 <_printf_float+0x1a4>
 800f33a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f340:	4299      	cmp	r1, r3
 800f342:	db05      	blt.n	800f350 <_printf_float+0x1d4>
 800f344:	6823      	ldr	r3, [r4, #0]
 800f346:	6121      	str	r1, [r4, #16]
 800f348:	07d8      	lsls	r0, r3, #31
 800f34a:	d5ea      	bpl.n	800f322 <_printf_float+0x1a6>
 800f34c:	1c4b      	adds	r3, r1, #1
 800f34e:	e7e7      	b.n	800f320 <_printf_float+0x1a4>
 800f350:	2900      	cmp	r1, #0
 800f352:	bfd4      	ite	le
 800f354:	f1c1 0202 	rsble	r2, r1, #2
 800f358:	2201      	movgt	r2, #1
 800f35a:	4413      	add	r3, r2
 800f35c:	e7e0      	b.n	800f320 <_printf_float+0x1a4>
 800f35e:	6823      	ldr	r3, [r4, #0]
 800f360:	055a      	lsls	r2, r3, #21
 800f362:	d407      	bmi.n	800f374 <_printf_float+0x1f8>
 800f364:	6923      	ldr	r3, [r4, #16]
 800f366:	4642      	mov	r2, r8
 800f368:	4631      	mov	r1, r6
 800f36a:	4628      	mov	r0, r5
 800f36c:	47b8      	blx	r7
 800f36e:	3001      	adds	r0, #1
 800f370:	d12c      	bne.n	800f3cc <_printf_float+0x250>
 800f372:	e764      	b.n	800f23e <_printf_float+0xc2>
 800f374:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f378:	f240 80e0 	bls.w	800f53c <_printf_float+0x3c0>
 800f37c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f380:	2200      	movs	r2, #0
 800f382:	2300      	movs	r3, #0
 800f384:	f7f1 fba8 	bl	8000ad8 <__aeabi_dcmpeq>
 800f388:	2800      	cmp	r0, #0
 800f38a:	d034      	beq.n	800f3f6 <_printf_float+0x27a>
 800f38c:	4a37      	ldr	r2, [pc, #220]	; (800f46c <_printf_float+0x2f0>)
 800f38e:	2301      	movs	r3, #1
 800f390:	4631      	mov	r1, r6
 800f392:	4628      	mov	r0, r5
 800f394:	47b8      	blx	r7
 800f396:	3001      	adds	r0, #1
 800f398:	f43f af51 	beq.w	800f23e <_printf_float+0xc2>
 800f39c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	db02      	blt.n	800f3aa <_printf_float+0x22e>
 800f3a4:	6823      	ldr	r3, [r4, #0]
 800f3a6:	07d8      	lsls	r0, r3, #31
 800f3a8:	d510      	bpl.n	800f3cc <_printf_float+0x250>
 800f3aa:	ee18 3a10 	vmov	r3, s16
 800f3ae:	4652      	mov	r2, sl
 800f3b0:	4631      	mov	r1, r6
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	47b8      	blx	r7
 800f3b6:	3001      	adds	r0, #1
 800f3b8:	f43f af41 	beq.w	800f23e <_printf_float+0xc2>
 800f3bc:	f04f 0800 	mov.w	r8, #0
 800f3c0:	f104 091a 	add.w	r9, r4, #26
 800f3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3c6:	3b01      	subs	r3, #1
 800f3c8:	4543      	cmp	r3, r8
 800f3ca:	dc09      	bgt.n	800f3e0 <_printf_float+0x264>
 800f3cc:	6823      	ldr	r3, [r4, #0]
 800f3ce:	079b      	lsls	r3, r3, #30
 800f3d0:	f100 8105 	bmi.w	800f5de <_printf_float+0x462>
 800f3d4:	68e0      	ldr	r0, [r4, #12]
 800f3d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3d8:	4298      	cmp	r0, r3
 800f3da:	bfb8      	it	lt
 800f3dc:	4618      	movlt	r0, r3
 800f3de:	e730      	b.n	800f242 <_printf_float+0xc6>
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	464a      	mov	r2, r9
 800f3e4:	4631      	mov	r1, r6
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	47b8      	blx	r7
 800f3ea:	3001      	adds	r0, #1
 800f3ec:	f43f af27 	beq.w	800f23e <_printf_float+0xc2>
 800f3f0:	f108 0801 	add.w	r8, r8, #1
 800f3f4:	e7e6      	b.n	800f3c4 <_printf_float+0x248>
 800f3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	dc39      	bgt.n	800f470 <_printf_float+0x2f4>
 800f3fc:	4a1b      	ldr	r2, [pc, #108]	; (800f46c <_printf_float+0x2f0>)
 800f3fe:	2301      	movs	r3, #1
 800f400:	4631      	mov	r1, r6
 800f402:	4628      	mov	r0, r5
 800f404:	47b8      	blx	r7
 800f406:	3001      	adds	r0, #1
 800f408:	f43f af19 	beq.w	800f23e <_printf_float+0xc2>
 800f40c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f410:	4313      	orrs	r3, r2
 800f412:	d102      	bne.n	800f41a <_printf_float+0x29e>
 800f414:	6823      	ldr	r3, [r4, #0]
 800f416:	07d9      	lsls	r1, r3, #31
 800f418:	d5d8      	bpl.n	800f3cc <_printf_float+0x250>
 800f41a:	ee18 3a10 	vmov	r3, s16
 800f41e:	4652      	mov	r2, sl
 800f420:	4631      	mov	r1, r6
 800f422:	4628      	mov	r0, r5
 800f424:	47b8      	blx	r7
 800f426:	3001      	adds	r0, #1
 800f428:	f43f af09 	beq.w	800f23e <_printf_float+0xc2>
 800f42c:	f04f 0900 	mov.w	r9, #0
 800f430:	f104 0a1a 	add.w	sl, r4, #26
 800f434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f436:	425b      	negs	r3, r3
 800f438:	454b      	cmp	r3, r9
 800f43a:	dc01      	bgt.n	800f440 <_printf_float+0x2c4>
 800f43c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f43e:	e792      	b.n	800f366 <_printf_float+0x1ea>
 800f440:	2301      	movs	r3, #1
 800f442:	4652      	mov	r2, sl
 800f444:	4631      	mov	r1, r6
 800f446:	4628      	mov	r0, r5
 800f448:	47b8      	blx	r7
 800f44a:	3001      	adds	r0, #1
 800f44c:	f43f aef7 	beq.w	800f23e <_printf_float+0xc2>
 800f450:	f109 0901 	add.w	r9, r9, #1
 800f454:	e7ee      	b.n	800f434 <_printf_float+0x2b8>
 800f456:	bf00      	nop
 800f458:	7fefffff 	.word	0x7fefffff
 800f45c:	080162b4 	.word	0x080162b4
 800f460:	080162b8 	.word	0x080162b8
 800f464:	080162c0 	.word	0x080162c0
 800f468:	080162bc 	.word	0x080162bc
 800f46c:	080162c4 	.word	0x080162c4
 800f470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f472:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f474:	429a      	cmp	r2, r3
 800f476:	bfa8      	it	ge
 800f478:	461a      	movge	r2, r3
 800f47a:	2a00      	cmp	r2, #0
 800f47c:	4691      	mov	r9, r2
 800f47e:	dc37      	bgt.n	800f4f0 <_printf_float+0x374>
 800f480:	f04f 0b00 	mov.w	fp, #0
 800f484:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f488:	f104 021a 	add.w	r2, r4, #26
 800f48c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f48e:	9305      	str	r3, [sp, #20]
 800f490:	eba3 0309 	sub.w	r3, r3, r9
 800f494:	455b      	cmp	r3, fp
 800f496:	dc33      	bgt.n	800f500 <_printf_float+0x384>
 800f498:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f49c:	429a      	cmp	r2, r3
 800f49e:	db3b      	blt.n	800f518 <_printf_float+0x39c>
 800f4a0:	6823      	ldr	r3, [r4, #0]
 800f4a2:	07da      	lsls	r2, r3, #31
 800f4a4:	d438      	bmi.n	800f518 <_printf_float+0x39c>
 800f4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4a8:	9a05      	ldr	r2, [sp, #20]
 800f4aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4ac:	1a9a      	subs	r2, r3, r2
 800f4ae:	eba3 0901 	sub.w	r9, r3, r1
 800f4b2:	4591      	cmp	r9, r2
 800f4b4:	bfa8      	it	ge
 800f4b6:	4691      	movge	r9, r2
 800f4b8:	f1b9 0f00 	cmp.w	r9, #0
 800f4bc:	dc35      	bgt.n	800f52a <_printf_float+0x3ae>
 800f4be:	f04f 0800 	mov.w	r8, #0
 800f4c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4c6:	f104 0a1a 	add.w	sl, r4, #26
 800f4ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4ce:	1a9b      	subs	r3, r3, r2
 800f4d0:	eba3 0309 	sub.w	r3, r3, r9
 800f4d4:	4543      	cmp	r3, r8
 800f4d6:	f77f af79 	ble.w	800f3cc <_printf_float+0x250>
 800f4da:	2301      	movs	r3, #1
 800f4dc:	4652      	mov	r2, sl
 800f4de:	4631      	mov	r1, r6
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	47b8      	blx	r7
 800f4e4:	3001      	adds	r0, #1
 800f4e6:	f43f aeaa 	beq.w	800f23e <_printf_float+0xc2>
 800f4ea:	f108 0801 	add.w	r8, r8, #1
 800f4ee:	e7ec      	b.n	800f4ca <_printf_float+0x34e>
 800f4f0:	4613      	mov	r3, r2
 800f4f2:	4631      	mov	r1, r6
 800f4f4:	4642      	mov	r2, r8
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	47b8      	blx	r7
 800f4fa:	3001      	adds	r0, #1
 800f4fc:	d1c0      	bne.n	800f480 <_printf_float+0x304>
 800f4fe:	e69e      	b.n	800f23e <_printf_float+0xc2>
 800f500:	2301      	movs	r3, #1
 800f502:	4631      	mov	r1, r6
 800f504:	4628      	mov	r0, r5
 800f506:	9205      	str	r2, [sp, #20]
 800f508:	47b8      	blx	r7
 800f50a:	3001      	adds	r0, #1
 800f50c:	f43f ae97 	beq.w	800f23e <_printf_float+0xc2>
 800f510:	9a05      	ldr	r2, [sp, #20]
 800f512:	f10b 0b01 	add.w	fp, fp, #1
 800f516:	e7b9      	b.n	800f48c <_printf_float+0x310>
 800f518:	ee18 3a10 	vmov	r3, s16
 800f51c:	4652      	mov	r2, sl
 800f51e:	4631      	mov	r1, r6
 800f520:	4628      	mov	r0, r5
 800f522:	47b8      	blx	r7
 800f524:	3001      	adds	r0, #1
 800f526:	d1be      	bne.n	800f4a6 <_printf_float+0x32a>
 800f528:	e689      	b.n	800f23e <_printf_float+0xc2>
 800f52a:	9a05      	ldr	r2, [sp, #20]
 800f52c:	464b      	mov	r3, r9
 800f52e:	4442      	add	r2, r8
 800f530:	4631      	mov	r1, r6
 800f532:	4628      	mov	r0, r5
 800f534:	47b8      	blx	r7
 800f536:	3001      	adds	r0, #1
 800f538:	d1c1      	bne.n	800f4be <_printf_float+0x342>
 800f53a:	e680      	b.n	800f23e <_printf_float+0xc2>
 800f53c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f53e:	2a01      	cmp	r2, #1
 800f540:	dc01      	bgt.n	800f546 <_printf_float+0x3ca>
 800f542:	07db      	lsls	r3, r3, #31
 800f544:	d538      	bpl.n	800f5b8 <_printf_float+0x43c>
 800f546:	2301      	movs	r3, #1
 800f548:	4642      	mov	r2, r8
 800f54a:	4631      	mov	r1, r6
 800f54c:	4628      	mov	r0, r5
 800f54e:	47b8      	blx	r7
 800f550:	3001      	adds	r0, #1
 800f552:	f43f ae74 	beq.w	800f23e <_printf_float+0xc2>
 800f556:	ee18 3a10 	vmov	r3, s16
 800f55a:	4652      	mov	r2, sl
 800f55c:	4631      	mov	r1, r6
 800f55e:	4628      	mov	r0, r5
 800f560:	47b8      	blx	r7
 800f562:	3001      	adds	r0, #1
 800f564:	f43f ae6b 	beq.w	800f23e <_printf_float+0xc2>
 800f568:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f56c:	2200      	movs	r2, #0
 800f56e:	2300      	movs	r3, #0
 800f570:	f7f1 fab2 	bl	8000ad8 <__aeabi_dcmpeq>
 800f574:	b9d8      	cbnz	r0, 800f5ae <_printf_float+0x432>
 800f576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f578:	f108 0201 	add.w	r2, r8, #1
 800f57c:	3b01      	subs	r3, #1
 800f57e:	4631      	mov	r1, r6
 800f580:	4628      	mov	r0, r5
 800f582:	47b8      	blx	r7
 800f584:	3001      	adds	r0, #1
 800f586:	d10e      	bne.n	800f5a6 <_printf_float+0x42a>
 800f588:	e659      	b.n	800f23e <_printf_float+0xc2>
 800f58a:	2301      	movs	r3, #1
 800f58c:	4652      	mov	r2, sl
 800f58e:	4631      	mov	r1, r6
 800f590:	4628      	mov	r0, r5
 800f592:	47b8      	blx	r7
 800f594:	3001      	adds	r0, #1
 800f596:	f43f ae52 	beq.w	800f23e <_printf_float+0xc2>
 800f59a:	f108 0801 	add.w	r8, r8, #1
 800f59e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5a0:	3b01      	subs	r3, #1
 800f5a2:	4543      	cmp	r3, r8
 800f5a4:	dcf1      	bgt.n	800f58a <_printf_float+0x40e>
 800f5a6:	464b      	mov	r3, r9
 800f5a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f5ac:	e6dc      	b.n	800f368 <_printf_float+0x1ec>
 800f5ae:	f04f 0800 	mov.w	r8, #0
 800f5b2:	f104 0a1a 	add.w	sl, r4, #26
 800f5b6:	e7f2      	b.n	800f59e <_printf_float+0x422>
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	4642      	mov	r2, r8
 800f5bc:	e7df      	b.n	800f57e <_printf_float+0x402>
 800f5be:	2301      	movs	r3, #1
 800f5c0:	464a      	mov	r2, r9
 800f5c2:	4631      	mov	r1, r6
 800f5c4:	4628      	mov	r0, r5
 800f5c6:	47b8      	blx	r7
 800f5c8:	3001      	adds	r0, #1
 800f5ca:	f43f ae38 	beq.w	800f23e <_printf_float+0xc2>
 800f5ce:	f108 0801 	add.w	r8, r8, #1
 800f5d2:	68e3      	ldr	r3, [r4, #12]
 800f5d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5d6:	1a5b      	subs	r3, r3, r1
 800f5d8:	4543      	cmp	r3, r8
 800f5da:	dcf0      	bgt.n	800f5be <_printf_float+0x442>
 800f5dc:	e6fa      	b.n	800f3d4 <_printf_float+0x258>
 800f5de:	f04f 0800 	mov.w	r8, #0
 800f5e2:	f104 0919 	add.w	r9, r4, #25
 800f5e6:	e7f4      	b.n	800f5d2 <_printf_float+0x456>

0800f5e8 <_printf_common>:
 800f5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5ec:	4616      	mov	r6, r2
 800f5ee:	4699      	mov	r9, r3
 800f5f0:	688a      	ldr	r2, [r1, #8]
 800f5f2:	690b      	ldr	r3, [r1, #16]
 800f5f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	bfb8      	it	lt
 800f5fc:	4613      	movlt	r3, r2
 800f5fe:	6033      	str	r3, [r6, #0]
 800f600:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f604:	4607      	mov	r7, r0
 800f606:	460c      	mov	r4, r1
 800f608:	b10a      	cbz	r2, 800f60e <_printf_common+0x26>
 800f60a:	3301      	adds	r3, #1
 800f60c:	6033      	str	r3, [r6, #0]
 800f60e:	6823      	ldr	r3, [r4, #0]
 800f610:	0699      	lsls	r1, r3, #26
 800f612:	bf42      	ittt	mi
 800f614:	6833      	ldrmi	r3, [r6, #0]
 800f616:	3302      	addmi	r3, #2
 800f618:	6033      	strmi	r3, [r6, #0]
 800f61a:	6825      	ldr	r5, [r4, #0]
 800f61c:	f015 0506 	ands.w	r5, r5, #6
 800f620:	d106      	bne.n	800f630 <_printf_common+0x48>
 800f622:	f104 0a19 	add.w	sl, r4, #25
 800f626:	68e3      	ldr	r3, [r4, #12]
 800f628:	6832      	ldr	r2, [r6, #0]
 800f62a:	1a9b      	subs	r3, r3, r2
 800f62c:	42ab      	cmp	r3, r5
 800f62e:	dc26      	bgt.n	800f67e <_printf_common+0x96>
 800f630:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f634:	1e13      	subs	r3, r2, #0
 800f636:	6822      	ldr	r2, [r4, #0]
 800f638:	bf18      	it	ne
 800f63a:	2301      	movne	r3, #1
 800f63c:	0692      	lsls	r2, r2, #26
 800f63e:	d42b      	bmi.n	800f698 <_printf_common+0xb0>
 800f640:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f644:	4649      	mov	r1, r9
 800f646:	4638      	mov	r0, r7
 800f648:	47c0      	blx	r8
 800f64a:	3001      	adds	r0, #1
 800f64c:	d01e      	beq.n	800f68c <_printf_common+0xa4>
 800f64e:	6823      	ldr	r3, [r4, #0]
 800f650:	68e5      	ldr	r5, [r4, #12]
 800f652:	6832      	ldr	r2, [r6, #0]
 800f654:	f003 0306 	and.w	r3, r3, #6
 800f658:	2b04      	cmp	r3, #4
 800f65a:	bf08      	it	eq
 800f65c:	1aad      	subeq	r5, r5, r2
 800f65e:	68a3      	ldr	r3, [r4, #8]
 800f660:	6922      	ldr	r2, [r4, #16]
 800f662:	bf0c      	ite	eq
 800f664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f668:	2500      	movne	r5, #0
 800f66a:	4293      	cmp	r3, r2
 800f66c:	bfc4      	itt	gt
 800f66e:	1a9b      	subgt	r3, r3, r2
 800f670:	18ed      	addgt	r5, r5, r3
 800f672:	2600      	movs	r6, #0
 800f674:	341a      	adds	r4, #26
 800f676:	42b5      	cmp	r5, r6
 800f678:	d11a      	bne.n	800f6b0 <_printf_common+0xc8>
 800f67a:	2000      	movs	r0, #0
 800f67c:	e008      	b.n	800f690 <_printf_common+0xa8>
 800f67e:	2301      	movs	r3, #1
 800f680:	4652      	mov	r2, sl
 800f682:	4649      	mov	r1, r9
 800f684:	4638      	mov	r0, r7
 800f686:	47c0      	blx	r8
 800f688:	3001      	adds	r0, #1
 800f68a:	d103      	bne.n	800f694 <_printf_common+0xac>
 800f68c:	f04f 30ff 	mov.w	r0, #4294967295
 800f690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f694:	3501      	adds	r5, #1
 800f696:	e7c6      	b.n	800f626 <_printf_common+0x3e>
 800f698:	18e1      	adds	r1, r4, r3
 800f69a:	1c5a      	adds	r2, r3, #1
 800f69c:	2030      	movs	r0, #48	; 0x30
 800f69e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f6a2:	4422      	add	r2, r4
 800f6a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f6a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f6ac:	3302      	adds	r3, #2
 800f6ae:	e7c7      	b.n	800f640 <_printf_common+0x58>
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	4622      	mov	r2, r4
 800f6b4:	4649      	mov	r1, r9
 800f6b6:	4638      	mov	r0, r7
 800f6b8:	47c0      	blx	r8
 800f6ba:	3001      	adds	r0, #1
 800f6bc:	d0e6      	beq.n	800f68c <_printf_common+0xa4>
 800f6be:	3601      	adds	r6, #1
 800f6c0:	e7d9      	b.n	800f676 <_printf_common+0x8e>
	...

0800f6c4 <_printf_i>:
 800f6c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6c8:	7e0f      	ldrb	r7, [r1, #24]
 800f6ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f6cc:	2f78      	cmp	r7, #120	; 0x78
 800f6ce:	4691      	mov	r9, r2
 800f6d0:	4680      	mov	r8, r0
 800f6d2:	460c      	mov	r4, r1
 800f6d4:	469a      	mov	sl, r3
 800f6d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f6da:	d807      	bhi.n	800f6ec <_printf_i+0x28>
 800f6dc:	2f62      	cmp	r7, #98	; 0x62
 800f6de:	d80a      	bhi.n	800f6f6 <_printf_i+0x32>
 800f6e0:	2f00      	cmp	r7, #0
 800f6e2:	f000 80d8 	beq.w	800f896 <_printf_i+0x1d2>
 800f6e6:	2f58      	cmp	r7, #88	; 0x58
 800f6e8:	f000 80a3 	beq.w	800f832 <_printf_i+0x16e>
 800f6ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6f4:	e03a      	b.n	800f76c <_printf_i+0xa8>
 800f6f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6fa:	2b15      	cmp	r3, #21
 800f6fc:	d8f6      	bhi.n	800f6ec <_printf_i+0x28>
 800f6fe:	a101      	add	r1, pc, #4	; (adr r1, 800f704 <_printf_i+0x40>)
 800f700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f704:	0800f75d 	.word	0x0800f75d
 800f708:	0800f771 	.word	0x0800f771
 800f70c:	0800f6ed 	.word	0x0800f6ed
 800f710:	0800f6ed 	.word	0x0800f6ed
 800f714:	0800f6ed 	.word	0x0800f6ed
 800f718:	0800f6ed 	.word	0x0800f6ed
 800f71c:	0800f771 	.word	0x0800f771
 800f720:	0800f6ed 	.word	0x0800f6ed
 800f724:	0800f6ed 	.word	0x0800f6ed
 800f728:	0800f6ed 	.word	0x0800f6ed
 800f72c:	0800f6ed 	.word	0x0800f6ed
 800f730:	0800f87d 	.word	0x0800f87d
 800f734:	0800f7a1 	.word	0x0800f7a1
 800f738:	0800f85f 	.word	0x0800f85f
 800f73c:	0800f6ed 	.word	0x0800f6ed
 800f740:	0800f6ed 	.word	0x0800f6ed
 800f744:	0800f89f 	.word	0x0800f89f
 800f748:	0800f6ed 	.word	0x0800f6ed
 800f74c:	0800f7a1 	.word	0x0800f7a1
 800f750:	0800f6ed 	.word	0x0800f6ed
 800f754:	0800f6ed 	.word	0x0800f6ed
 800f758:	0800f867 	.word	0x0800f867
 800f75c:	682b      	ldr	r3, [r5, #0]
 800f75e:	1d1a      	adds	r2, r3, #4
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	602a      	str	r2, [r5, #0]
 800f764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f76c:	2301      	movs	r3, #1
 800f76e:	e0a3      	b.n	800f8b8 <_printf_i+0x1f4>
 800f770:	6820      	ldr	r0, [r4, #0]
 800f772:	6829      	ldr	r1, [r5, #0]
 800f774:	0606      	lsls	r6, r0, #24
 800f776:	f101 0304 	add.w	r3, r1, #4
 800f77a:	d50a      	bpl.n	800f792 <_printf_i+0xce>
 800f77c:	680e      	ldr	r6, [r1, #0]
 800f77e:	602b      	str	r3, [r5, #0]
 800f780:	2e00      	cmp	r6, #0
 800f782:	da03      	bge.n	800f78c <_printf_i+0xc8>
 800f784:	232d      	movs	r3, #45	; 0x2d
 800f786:	4276      	negs	r6, r6
 800f788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f78c:	485e      	ldr	r0, [pc, #376]	; (800f908 <_printf_i+0x244>)
 800f78e:	230a      	movs	r3, #10
 800f790:	e019      	b.n	800f7c6 <_printf_i+0x102>
 800f792:	680e      	ldr	r6, [r1, #0]
 800f794:	602b      	str	r3, [r5, #0]
 800f796:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f79a:	bf18      	it	ne
 800f79c:	b236      	sxthne	r6, r6
 800f79e:	e7ef      	b.n	800f780 <_printf_i+0xbc>
 800f7a0:	682b      	ldr	r3, [r5, #0]
 800f7a2:	6820      	ldr	r0, [r4, #0]
 800f7a4:	1d19      	adds	r1, r3, #4
 800f7a6:	6029      	str	r1, [r5, #0]
 800f7a8:	0601      	lsls	r1, r0, #24
 800f7aa:	d501      	bpl.n	800f7b0 <_printf_i+0xec>
 800f7ac:	681e      	ldr	r6, [r3, #0]
 800f7ae:	e002      	b.n	800f7b6 <_printf_i+0xf2>
 800f7b0:	0646      	lsls	r6, r0, #25
 800f7b2:	d5fb      	bpl.n	800f7ac <_printf_i+0xe8>
 800f7b4:	881e      	ldrh	r6, [r3, #0]
 800f7b6:	4854      	ldr	r0, [pc, #336]	; (800f908 <_printf_i+0x244>)
 800f7b8:	2f6f      	cmp	r7, #111	; 0x6f
 800f7ba:	bf0c      	ite	eq
 800f7bc:	2308      	moveq	r3, #8
 800f7be:	230a      	movne	r3, #10
 800f7c0:	2100      	movs	r1, #0
 800f7c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f7c6:	6865      	ldr	r5, [r4, #4]
 800f7c8:	60a5      	str	r5, [r4, #8]
 800f7ca:	2d00      	cmp	r5, #0
 800f7cc:	bfa2      	ittt	ge
 800f7ce:	6821      	ldrge	r1, [r4, #0]
 800f7d0:	f021 0104 	bicge.w	r1, r1, #4
 800f7d4:	6021      	strge	r1, [r4, #0]
 800f7d6:	b90e      	cbnz	r6, 800f7dc <_printf_i+0x118>
 800f7d8:	2d00      	cmp	r5, #0
 800f7da:	d04d      	beq.n	800f878 <_printf_i+0x1b4>
 800f7dc:	4615      	mov	r5, r2
 800f7de:	fbb6 f1f3 	udiv	r1, r6, r3
 800f7e2:	fb03 6711 	mls	r7, r3, r1, r6
 800f7e6:	5dc7      	ldrb	r7, [r0, r7]
 800f7e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f7ec:	4637      	mov	r7, r6
 800f7ee:	42bb      	cmp	r3, r7
 800f7f0:	460e      	mov	r6, r1
 800f7f2:	d9f4      	bls.n	800f7de <_printf_i+0x11a>
 800f7f4:	2b08      	cmp	r3, #8
 800f7f6:	d10b      	bne.n	800f810 <_printf_i+0x14c>
 800f7f8:	6823      	ldr	r3, [r4, #0]
 800f7fa:	07de      	lsls	r6, r3, #31
 800f7fc:	d508      	bpl.n	800f810 <_printf_i+0x14c>
 800f7fe:	6923      	ldr	r3, [r4, #16]
 800f800:	6861      	ldr	r1, [r4, #4]
 800f802:	4299      	cmp	r1, r3
 800f804:	bfde      	ittt	le
 800f806:	2330      	movle	r3, #48	; 0x30
 800f808:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f80c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f810:	1b52      	subs	r2, r2, r5
 800f812:	6122      	str	r2, [r4, #16]
 800f814:	f8cd a000 	str.w	sl, [sp]
 800f818:	464b      	mov	r3, r9
 800f81a:	aa03      	add	r2, sp, #12
 800f81c:	4621      	mov	r1, r4
 800f81e:	4640      	mov	r0, r8
 800f820:	f7ff fee2 	bl	800f5e8 <_printf_common>
 800f824:	3001      	adds	r0, #1
 800f826:	d14c      	bne.n	800f8c2 <_printf_i+0x1fe>
 800f828:	f04f 30ff 	mov.w	r0, #4294967295
 800f82c:	b004      	add	sp, #16
 800f82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f832:	4835      	ldr	r0, [pc, #212]	; (800f908 <_printf_i+0x244>)
 800f834:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f838:	6829      	ldr	r1, [r5, #0]
 800f83a:	6823      	ldr	r3, [r4, #0]
 800f83c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f840:	6029      	str	r1, [r5, #0]
 800f842:	061d      	lsls	r5, r3, #24
 800f844:	d514      	bpl.n	800f870 <_printf_i+0x1ac>
 800f846:	07df      	lsls	r7, r3, #31
 800f848:	bf44      	itt	mi
 800f84a:	f043 0320 	orrmi.w	r3, r3, #32
 800f84e:	6023      	strmi	r3, [r4, #0]
 800f850:	b91e      	cbnz	r6, 800f85a <_printf_i+0x196>
 800f852:	6823      	ldr	r3, [r4, #0]
 800f854:	f023 0320 	bic.w	r3, r3, #32
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	2310      	movs	r3, #16
 800f85c:	e7b0      	b.n	800f7c0 <_printf_i+0xfc>
 800f85e:	6823      	ldr	r3, [r4, #0]
 800f860:	f043 0320 	orr.w	r3, r3, #32
 800f864:	6023      	str	r3, [r4, #0]
 800f866:	2378      	movs	r3, #120	; 0x78
 800f868:	4828      	ldr	r0, [pc, #160]	; (800f90c <_printf_i+0x248>)
 800f86a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f86e:	e7e3      	b.n	800f838 <_printf_i+0x174>
 800f870:	0659      	lsls	r1, r3, #25
 800f872:	bf48      	it	mi
 800f874:	b2b6      	uxthmi	r6, r6
 800f876:	e7e6      	b.n	800f846 <_printf_i+0x182>
 800f878:	4615      	mov	r5, r2
 800f87a:	e7bb      	b.n	800f7f4 <_printf_i+0x130>
 800f87c:	682b      	ldr	r3, [r5, #0]
 800f87e:	6826      	ldr	r6, [r4, #0]
 800f880:	6961      	ldr	r1, [r4, #20]
 800f882:	1d18      	adds	r0, r3, #4
 800f884:	6028      	str	r0, [r5, #0]
 800f886:	0635      	lsls	r5, r6, #24
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	d501      	bpl.n	800f890 <_printf_i+0x1cc>
 800f88c:	6019      	str	r1, [r3, #0]
 800f88e:	e002      	b.n	800f896 <_printf_i+0x1d2>
 800f890:	0670      	lsls	r0, r6, #25
 800f892:	d5fb      	bpl.n	800f88c <_printf_i+0x1c8>
 800f894:	8019      	strh	r1, [r3, #0]
 800f896:	2300      	movs	r3, #0
 800f898:	6123      	str	r3, [r4, #16]
 800f89a:	4615      	mov	r5, r2
 800f89c:	e7ba      	b.n	800f814 <_printf_i+0x150>
 800f89e:	682b      	ldr	r3, [r5, #0]
 800f8a0:	1d1a      	adds	r2, r3, #4
 800f8a2:	602a      	str	r2, [r5, #0]
 800f8a4:	681d      	ldr	r5, [r3, #0]
 800f8a6:	6862      	ldr	r2, [r4, #4]
 800f8a8:	2100      	movs	r1, #0
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	f7f0 fca0 	bl	80001f0 <memchr>
 800f8b0:	b108      	cbz	r0, 800f8b6 <_printf_i+0x1f2>
 800f8b2:	1b40      	subs	r0, r0, r5
 800f8b4:	6060      	str	r0, [r4, #4]
 800f8b6:	6863      	ldr	r3, [r4, #4]
 800f8b8:	6123      	str	r3, [r4, #16]
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8c0:	e7a8      	b.n	800f814 <_printf_i+0x150>
 800f8c2:	6923      	ldr	r3, [r4, #16]
 800f8c4:	462a      	mov	r2, r5
 800f8c6:	4649      	mov	r1, r9
 800f8c8:	4640      	mov	r0, r8
 800f8ca:	47d0      	blx	sl
 800f8cc:	3001      	adds	r0, #1
 800f8ce:	d0ab      	beq.n	800f828 <_printf_i+0x164>
 800f8d0:	6823      	ldr	r3, [r4, #0]
 800f8d2:	079b      	lsls	r3, r3, #30
 800f8d4:	d413      	bmi.n	800f8fe <_printf_i+0x23a>
 800f8d6:	68e0      	ldr	r0, [r4, #12]
 800f8d8:	9b03      	ldr	r3, [sp, #12]
 800f8da:	4298      	cmp	r0, r3
 800f8dc:	bfb8      	it	lt
 800f8de:	4618      	movlt	r0, r3
 800f8e0:	e7a4      	b.n	800f82c <_printf_i+0x168>
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	4632      	mov	r2, r6
 800f8e6:	4649      	mov	r1, r9
 800f8e8:	4640      	mov	r0, r8
 800f8ea:	47d0      	blx	sl
 800f8ec:	3001      	adds	r0, #1
 800f8ee:	d09b      	beq.n	800f828 <_printf_i+0x164>
 800f8f0:	3501      	adds	r5, #1
 800f8f2:	68e3      	ldr	r3, [r4, #12]
 800f8f4:	9903      	ldr	r1, [sp, #12]
 800f8f6:	1a5b      	subs	r3, r3, r1
 800f8f8:	42ab      	cmp	r3, r5
 800f8fa:	dcf2      	bgt.n	800f8e2 <_printf_i+0x21e>
 800f8fc:	e7eb      	b.n	800f8d6 <_printf_i+0x212>
 800f8fe:	2500      	movs	r5, #0
 800f900:	f104 0619 	add.w	r6, r4, #25
 800f904:	e7f5      	b.n	800f8f2 <_printf_i+0x22e>
 800f906:	bf00      	nop
 800f908:	080162c6 	.word	0x080162c6
 800f90c:	080162d7 	.word	0x080162d7

0800f910 <_scanf_float>:
 800f910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f914:	b087      	sub	sp, #28
 800f916:	4617      	mov	r7, r2
 800f918:	9303      	str	r3, [sp, #12]
 800f91a:	688b      	ldr	r3, [r1, #8]
 800f91c:	1e5a      	subs	r2, r3, #1
 800f91e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f922:	bf83      	ittte	hi
 800f924:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f928:	195b      	addhi	r3, r3, r5
 800f92a:	9302      	strhi	r3, [sp, #8]
 800f92c:	2300      	movls	r3, #0
 800f92e:	bf86      	itte	hi
 800f930:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f934:	608b      	strhi	r3, [r1, #8]
 800f936:	9302      	strls	r3, [sp, #8]
 800f938:	680b      	ldr	r3, [r1, #0]
 800f93a:	468b      	mov	fp, r1
 800f93c:	2500      	movs	r5, #0
 800f93e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f942:	f84b 3b1c 	str.w	r3, [fp], #28
 800f946:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f94a:	4680      	mov	r8, r0
 800f94c:	460c      	mov	r4, r1
 800f94e:	465e      	mov	r6, fp
 800f950:	46aa      	mov	sl, r5
 800f952:	46a9      	mov	r9, r5
 800f954:	9501      	str	r5, [sp, #4]
 800f956:	68a2      	ldr	r2, [r4, #8]
 800f958:	b152      	cbz	r2, 800f970 <_scanf_float+0x60>
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	2b4e      	cmp	r3, #78	; 0x4e
 800f960:	d864      	bhi.n	800fa2c <_scanf_float+0x11c>
 800f962:	2b40      	cmp	r3, #64	; 0x40
 800f964:	d83c      	bhi.n	800f9e0 <_scanf_float+0xd0>
 800f966:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f96a:	b2c8      	uxtb	r0, r1
 800f96c:	280e      	cmp	r0, #14
 800f96e:	d93a      	bls.n	800f9e6 <_scanf_float+0xd6>
 800f970:	f1b9 0f00 	cmp.w	r9, #0
 800f974:	d003      	beq.n	800f97e <_scanf_float+0x6e>
 800f976:	6823      	ldr	r3, [r4, #0]
 800f978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f97c:	6023      	str	r3, [r4, #0]
 800f97e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f982:	f1ba 0f01 	cmp.w	sl, #1
 800f986:	f200 8113 	bhi.w	800fbb0 <_scanf_float+0x2a0>
 800f98a:	455e      	cmp	r6, fp
 800f98c:	f200 8105 	bhi.w	800fb9a <_scanf_float+0x28a>
 800f990:	2501      	movs	r5, #1
 800f992:	4628      	mov	r0, r5
 800f994:	b007      	add	sp, #28
 800f996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f99a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f99e:	2a0d      	cmp	r2, #13
 800f9a0:	d8e6      	bhi.n	800f970 <_scanf_float+0x60>
 800f9a2:	a101      	add	r1, pc, #4	; (adr r1, 800f9a8 <_scanf_float+0x98>)
 800f9a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f9a8:	0800fae7 	.word	0x0800fae7
 800f9ac:	0800f971 	.word	0x0800f971
 800f9b0:	0800f971 	.word	0x0800f971
 800f9b4:	0800f971 	.word	0x0800f971
 800f9b8:	0800fb47 	.word	0x0800fb47
 800f9bc:	0800fb1f 	.word	0x0800fb1f
 800f9c0:	0800f971 	.word	0x0800f971
 800f9c4:	0800f971 	.word	0x0800f971
 800f9c8:	0800faf5 	.word	0x0800faf5
 800f9cc:	0800f971 	.word	0x0800f971
 800f9d0:	0800f971 	.word	0x0800f971
 800f9d4:	0800f971 	.word	0x0800f971
 800f9d8:	0800f971 	.word	0x0800f971
 800f9dc:	0800faad 	.word	0x0800faad
 800f9e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f9e4:	e7db      	b.n	800f99e <_scanf_float+0x8e>
 800f9e6:	290e      	cmp	r1, #14
 800f9e8:	d8c2      	bhi.n	800f970 <_scanf_float+0x60>
 800f9ea:	a001      	add	r0, pc, #4	; (adr r0, 800f9f0 <_scanf_float+0xe0>)
 800f9ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f9f0:	0800fa9f 	.word	0x0800fa9f
 800f9f4:	0800f971 	.word	0x0800f971
 800f9f8:	0800fa9f 	.word	0x0800fa9f
 800f9fc:	0800fb33 	.word	0x0800fb33
 800fa00:	0800f971 	.word	0x0800f971
 800fa04:	0800fa4d 	.word	0x0800fa4d
 800fa08:	0800fa89 	.word	0x0800fa89
 800fa0c:	0800fa89 	.word	0x0800fa89
 800fa10:	0800fa89 	.word	0x0800fa89
 800fa14:	0800fa89 	.word	0x0800fa89
 800fa18:	0800fa89 	.word	0x0800fa89
 800fa1c:	0800fa89 	.word	0x0800fa89
 800fa20:	0800fa89 	.word	0x0800fa89
 800fa24:	0800fa89 	.word	0x0800fa89
 800fa28:	0800fa89 	.word	0x0800fa89
 800fa2c:	2b6e      	cmp	r3, #110	; 0x6e
 800fa2e:	d809      	bhi.n	800fa44 <_scanf_float+0x134>
 800fa30:	2b60      	cmp	r3, #96	; 0x60
 800fa32:	d8b2      	bhi.n	800f99a <_scanf_float+0x8a>
 800fa34:	2b54      	cmp	r3, #84	; 0x54
 800fa36:	d077      	beq.n	800fb28 <_scanf_float+0x218>
 800fa38:	2b59      	cmp	r3, #89	; 0x59
 800fa3a:	d199      	bne.n	800f970 <_scanf_float+0x60>
 800fa3c:	2d07      	cmp	r5, #7
 800fa3e:	d197      	bne.n	800f970 <_scanf_float+0x60>
 800fa40:	2508      	movs	r5, #8
 800fa42:	e029      	b.n	800fa98 <_scanf_float+0x188>
 800fa44:	2b74      	cmp	r3, #116	; 0x74
 800fa46:	d06f      	beq.n	800fb28 <_scanf_float+0x218>
 800fa48:	2b79      	cmp	r3, #121	; 0x79
 800fa4a:	e7f6      	b.n	800fa3a <_scanf_float+0x12a>
 800fa4c:	6821      	ldr	r1, [r4, #0]
 800fa4e:	05c8      	lsls	r0, r1, #23
 800fa50:	d51a      	bpl.n	800fa88 <_scanf_float+0x178>
 800fa52:	9b02      	ldr	r3, [sp, #8]
 800fa54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fa58:	6021      	str	r1, [r4, #0]
 800fa5a:	f109 0901 	add.w	r9, r9, #1
 800fa5e:	b11b      	cbz	r3, 800fa68 <_scanf_float+0x158>
 800fa60:	3b01      	subs	r3, #1
 800fa62:	3201      	adds	r2, #1
 800fa64:	9302      	str	r3, [sp, #8]
 800fa66:	60a2      	str	r2, [r4, #8]
 800fa68:	68a3      	ldr	r3, [r4, #8]
 800fa6a:	3b01      	subs	r3, #1
 800fa6c:	60a3      	str	r3, [r4, #8]
 800fa6e:	6923      	ldr	r3, [r4, #16]
 800fa70:	3301      	adds	r3, #1
 800fa72:	6123      	str	r3, [r4, #16]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	3b01      	subs	r3, #1
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	607b      	str	r3, [r7, #4]
 800fa7c:	f340 8084 	ble.w	800fb88 <_scanf_float+0x278>
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	3301      	adds	r3, #1
 800fa84:	603b      	str	r3, [r7, #0]
 800fa86:	e766      	b.n	800f956 <_scanf_float+0x46>
 800fa88:	eb1a 0f05 	cmn.w	sl, r5
 800fa8c:	f47f af70 	bne.w	800f970 <_scanf_float+0x60>
 800fa90:	6822      	ldr	r2, [r4, #0]
 800fa92:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fa96:	6022      	str	r2, [r4, #0]
 800fa98:	f806 3b01 	strb.w	r3, [r6], #1
 800fa9c:	e7e4      	b.n	800fa68 <_scanf_float+0x158>
 800fa9e:	6822      	ldr	r2, [r4, #0]
 800faa0:	0610      	lsls	r0, r2, #24
 800faa2:	f57f af65 	bpl.w	800f970 <_scanf_float+0x60>
 800faa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800faaa:	e7f4      	b.n	800fa96 <_scanf_float+0x186>
 800faac:	f1ba 0f00 	cmp.w	sl, #0
 800fab0:	d10e      	bne.n	800fad0 <_scanf_float+0x1c0>
 800fab2:	f1b9 0f00 	cmp.w	r9, #0
 800fab6:	d10e      	bne.n	800fad6 <_scanf_float+0x1c6>
 800fab8:	6822      	ldr	r2, [r4, #0]
 800faba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fabe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fac2:	d108      	bne.n	800fad6 <_scanf_float+0x1c6>
 800fac4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fac8:	6022      	str	r2, [r4, #0]
 800faca:	f04f 0a01 	mov.w	sl, #1
 800face:	e7e3      	b.n	800fa98 <_scanf_float+0x188>
 800fad0:	f1ba 0f02 	cmp.w	sl, #2
 800fad4:	d055      	beq.n	800fb82 <_scanf_float+0x272>
 800fad6:	2d01      	cmp	r5, #1
 800fad8:	d002      	beq.n	800fae0 <_scanf_float+0x1d0>
 800fada:	2d04      	cmp	r5, #4
 800fadc:	f47f af48 	bne.w	800f970 <_scanf_float+0x60>
 800fae0:	3501      	adds	r5, #1
 800fae2:	b2ed      	uxtb	r5, r5
 800fae4:	e7d8      	b.n	800fa98 <_scanf_float+0x188>
 800fae6:	f1ba 0f01 	cmp.w	sl, #1
 800faea:	f47f af41 	bne.w	800f970 <_scanf_float+0x60>
 800faee:	f04f 0a02 	mov.w	sl, #2
 800faf2:	e7d1      	b.n	800fa98 <_scanf_float+0x188>
 800faf4:	b97d      	cbnz	r5, 800fb16 <_scanf_float+0x206>
 800faf6:	f1b9 0f00 	cmp.w	r9, #0
 800fafa:	f47f af3c 	bne.w	800f976 <_scanf_float+0x66>
 800fafe:	6822      	ldr	r2, [r4, #0]
 800fb00:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fb04:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fb08:	f47f af39 	bne.w	800f97e <_scanf_float+0x6e>
 800fb0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fb10:	6022      	str	r2, [r4, #0]
 800fb12:	2501      	movs	r5, #1
 800fb14:	e7c0      	b.n	800fa98 <_scanf_float+0x188>
 800fb16:	2d03      	cmp	r5, #3
 800fb18:	d0e2      	beq.n	800fae0 <_scanf_float+0x1d0>
 800fb1a:	2d05      	cmp	r5, #5
 800fb1c:	e7de      	b.n	800fadc <_scanf_float+0x1cc>
 800fb1e:	2d02      	cmp	r5, #2
 800fb20:	f47f af26 	bne.w	800f970 <_scanf_float+0x60>
 800fb24:	2503      	movs	r5, #3
 800fb26:	e7b7      	b.n	800fa98 <_scanf_float+0x188>
 800fb28:	2d06      	cmp	r5, #6
 800fb2a:	f47f af21 	bne.w	800f970 <_scanf_float+0x60>
 800fb2e:	2507      	movs	r5, #7
 800fb30:	e7b2      	b.n	800fa98 <_scanf_float+0x188>
 800fb32:	6822      	ldr	r2, [r4, #0]
 800fb34:	0591      	lsls	r1, r2, #22
 800fb36:	f57f af1b 	bpl.w	800f970 <_scanf_float+0x60>
 800fb3a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fb3e:	6022      	str	r2, [r4, #0]
 800fb40:	f8cd 9004 	str.w	r9, [sp, #4]
 800fb44:	e7a8      	b.n	800fa98 <_scanf_float+0x188>
 800fb46:	6822      	ldr	r2, [r4, #0]
 800fb48:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fb4c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fb50:	d006      	beq.n	800fb60 <_scanf_float+0x250>
 800fb52:	0550      	lsls	r0, r2, #21
 800fb54:	f57f af0c 	bpl.w	800f970 <_scanf_float+0x60>
 800fb58:	f1b9 0f00 	cmp.w	r9, #0
 800fb5c:	f43f af0f 	beq.w	800f97e <_scanf_float+0x6e>
 800fb60:	0591      	lsls	r1, r2, #22
 800fb62:	bf58      	it	pl
 800fb64:	9901      	ldrpl	r1, [sp, #4]
 800fb66:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fb6a:	bf58      	it	pl
 800fb6c:	eba9 0101 	subpl.w	r1, r9, r1
 800fb70:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fb74:	bf58      	it	pl
 800fb76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fb7a:	6022      	str	r2, [r4, #0]
 800fb7c:	f04f 0900 	mov.w	r9, #0
 800fb80:	e78a      	b.n	800fa98 <_scanf_float+0x188>
 800fb82:	f04f 0a03 	mov.w	sl, #3
 800fb86:	e787      	b.n	800fa98 <_scanf_float+0x188>
 800fb88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fb8c:	4639      	mov	r1, r7
 800fb8e:	4640      	mov	r0, r8
 800fb90:	4798      	blx	r3
 800fb92:	2800      	cmp	r0, #0
 800fb94:	f43f aedf 	beq.w	800f956 <_scanf_float+0x46>
 800fb98:	e6ea      	b.n	800f970 <_scanf_float+0x60>
 800fb9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fba2:	463a      	mov	r2, r7
 800fba4:	4640      	mov	r0, r8
 800fba6:	4798      	blx	r3
 800fba8:	6923      	ldr	r3, [r4, #16]
 800fbaa:	3b01      	subs	r3, #1
 800fbac:	6123      	str	r3, [r4, #16]
 800fbae:	e6ec      	b.n	800f98a <_scanf_float+0x7a>
 800fbb0:	1e6b      	subs	r3, r5, #1
 800fbb2:	2b06      	cmp	r3, #6
 800fbb4:	d825      	bhi.n	800fc02 <_scanf_float+0x2f2>
 800fbb6:	2d02      	cmp	r5, #2
 800fbb8:	d836      	bhi.n	800fc28 <_scanf_float+0x318>
 800fbba:	455e      	cmp	r6, fp
 800fbbc:	f67f aee8 	bls.w	800f990 <_scanf_float+0x80>
 800fbc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbc4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fbc8:	463a      	mov	r2, r7
 800fbca:	4640      	mov	r0, r8
 800fbcc:	4798      	blx	r3
 800fbce:	6923      	ldr	r3, [r4, #16]
 800fbd0:	3b01      	subs	r3, #1
 800fbd2:	6123      	str	r3, [r4, #16]
 800fbd4:	e7f1      	b.n	800fbba <_scanf_float+0x2aa>
 800fbd6:	9802      	ldr	r0, [sp, #8]
 800fbd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbdc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fbe0:	9002      	str	r0, [sp, #8]
 800fbe2:	463a      	mov	r2, r7
 800fbe4:	4640      	mov	r0, r8
 800fbe6:	4798      	blx	r3
 800fbe8:	6923      	ldr	r3, [r4, #16]
 800fbea:	3b01      	subs	r3, #1
 800fbec:	6123      	str	r3, [r4, #16]
 800fbee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbf2:	fa5f fa8a 	uxtb.w	sl, sl
 800fbf6:	f1ba 0f02 	cmp.w	sl, #2
 800fbfa:	d1ec      	bne.n	800fbd6 <_scanf_float+0x2c6>
 800fbfc:	3d03      	subs	r5, #3
 800fbfe:	b2ed      	uxtb	r5, r5
 800fc00:	1b76      	subs	r6, r6, r5
 800fc02:	6823      	ldr	r3, [r4, #0]
 800fc04:	05da      	lsls	r2, r3, #23
 800fc06:	d52f      	bpl.n	800fc68 <_scanf_float+0x358>
 800fc08:	055b      	lsls	r3, r3, #21
 800fc0a:	d510      	bpl.n	800fc2e <_scanf_float+0x31e>
 800fc0c:	455e      	cmp	r6, fp
 800fc0e:	f67f aebf 	bls.w	800f990 <_scanf_float+0x80>
 800fc12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fc1a:	463a      	mov	r2, r7
 800fc1c:	4640      	mov	r0, r8
 800fc1e:	4798      	blx	r3
 800fc20:	6923      	ldr	r3, [r4, #16]
 800fc22:	3b01      	subs	r3, #1
 800fc24:	6123      	str	r3, [r4, #16]
 800fc26:	e7f1      	b.n	800fc0c <_scanf_float+0x2fc>
 800fc28:	46aa      	mov	sl, r5
 800fc2a:	9602      	str	r6, [sp, #8]
 800fc2c:	e7df      	b.n	800fbee <_scanf_float+0x2de>
 800fc2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fc32:	6923      	ldr	r3, [r4, #16]
 800fc34:	2965      	cmp	r1, #101	; 0x65
 800fc36:	f103 33ff 	add.w	r3, r3, #4294967295
 800fc3a:	f106 35ff 	add.w	r5, r6, #4294967295
 800fc3e:	6123      	str	r3, [r4, #16]
 800fc40:	d00c      	beq.n	800fc5c <_scanf_float+0x34c>
 800fc42:	2945      	cmp	r1, #69	; 0x45
 800fc44:	d00a      	beq.n	800fc5c <_scanf_float+0x34c>
 800fc46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc4a:	463a      	mov	r2, r7
 800fc4c:	4640      	mov	r0, r8
 800fc4e:	4798      	blx	r3
 800fc50:	6923      	ldr	r3, [r4, #16]
 800fc52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fc56:	3b01      	subs	r3, #1
 800fc58:	1eb5      	subs	r5, r6, #2
 800fc5a:	6123      	str	r3, [r4, #16]
 800fc5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc60:	463a      	mov	r2, r7
 800fc62:	4640      	mov	r0, r8
 800fc64:	4798      	blx	r3
 800fc66:	462e      	mov	r6, r5
 800fc68:	6825      	ldr	r5, [r4, #0]
 800fc6a:	f015 0510 	ands.w	r5, r5, #16
 800fc6e:	d159      	bne.n	800fd24 <_scanf_float+0x414>
 800fc70:	7035      	strb	r5, [r6, #0]
 800fc72:	6823      	ldr	r3, [r4, #0]
 800fc74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fc78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc7c:	d11b      	bne.n	800fcb6 <_scanf_float+0x3a6>
 800fc7e:	9b01      	ldr	r3, [sp, #4]
 800fc80:	454b      	cmp	r3, r9
 800fc82:	eba3 0209 	sub.w	r2, r3, r9
 800fc86:	d123      	bne.n	800fcd0 <_scanf_float+0x3c0>
 800fc88:	2200      	movs	r2, #0
 800fc8a:	4659      	mov	r1, fp
 800fc8c:	4640      	mov	r0, r8
 800fc8e:	f000 ff55 	bl	8010b3c <_strtod_r>
 800fc92:	6822      	ldr	r2, [r4, #0]
 800fc94:	9b03      	ldr	r3, [sp, #12]
 800fc96:	f012 0f02 	tst.w	r2, #2
 800fc9a:	ec57 6b10 	vmov	r6, r7, d0
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	d021      	beq.n	800fce6 <_scanf_float+0x3d6>
 800fca2:	9903      	ldr	r1, [sp, #12]
 800fca4:	1d1a      	adds	r2, r3, #4
 800fca6:	600a      	str	r2, [r1, #0]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	e9c3 6700 	strd	r6, r7, [r3]
 800fcae:	68e3      	ldr	r3, [r4, #12]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	60e3      	str	r3, [r4, #12]
 800fcb4:	e66d      	b.n	800f992 <_scanf_float+0x82>
 800fcb6:	9b04      	ldr	r3, [sp, #16]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d0e5      	beq.n	800fc88 <_scanf_float+0x378>
 800fcbc:	9905      	ldr	r1, [sp, #20]
 800fcbe:	230a      	movs	r3, #10
 800fcc0:	462a      	mov	r2, r5
 800fcc2:	3101      	adds	r1, #1
 800fcc4:	4640      	mov	r0, r8
 800fcc6:	f000 ffc1 	bl	8010c4c <_strtol_r>
 800fcca:	9b04      	ldr	r3, [sp, #16]
 800fccc:	9e05      	ldr	r6, [sp, #20]
 800fcce:	1ac2      	subs	r2, r0, r3
 800fcd0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fcd4:	429e      	cmp	r6, r3
 800fcd6:	bf28      	it	cs
 800fcd8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fcdc:	4912      	ldr	r1, [pc, #72]	; (800fd28 <_scanf_float+0x418>)
 800fcde:	4630      	mov	r0, r6
 800fce0:	f000 f8a6 	bl	800fe30 <siprintf>
 800fce4:	e7d0      	b.n	800fc88 <_scanf_float+0x378>
 800fce6:	9903      	ldr	r1, [sp, #12]
 800fce8:	f012 0f04 	tst.w	r2, #4
 800fcec:	f103 0204 	add.w	r2, r3, #4
 800fcf0:	600a      	str	r2, [r1, #0]
 800fcf2:	d1d9      	bne.n	800fca8 <_scanf_float+0x398>
 800fcf4:	f8d3 8000 	ldr.w	r8, [r3]
 800fcf8:	ee10 2a10 	vmov	r2, s0
 800fcfc:	ee10 0a10 	vmov	r0, s0
 800fd00:	463b      	mov	r3, r7
 800fd02:	4639      	mov	r1, r7
 800fd04:	f7f0 ff1a 	bl	8000b3c <__aeabi_dcmpun>
 800fd08:	b128      	cbz	r0, 800fd16 <_scanf_float+0x406>
 800fd0a:	4808      	ldr	r0, [pc, #32]	; (800fd2c <_scanf_float+0x41c>)
 800fd0c:	f000 f88a 	bl	800fe24 <nanf>
 800fd10:	ed88 0a00 	vstr	s0, [r8]
 800fd14:	e7cb      	b.n	800fcae <_scanf_float+0x39e>
 800fd16:	4630      	mov	r0, r6
 800fd18:	4639      	mov	r1, r7
 800fd1a:	f7f0 ff6d 	bl	8000bf8 <__aeabi_d2f>
 800fd1e:	f8c8 0000 	str.w	r0, [r8]
 800fd22:	e7c4      	b.n	800fcae <_scanf_float+0x39e>
 800fd24:	2500      	movs	r5, #0
 800fd26:	e634      	b.n	800f992 <_scanf_float+0x82>
 800fd28:	080162e8 	.word	0x080162e8
 800fd2c:	080166f0 	.word	0x080166f0

0800fd30 <cleanup_glue>:
 800fd30:	b538      	push	{r3, r4, r5, lr}
 800fd32:	460c      	mov	r4, r1
 800fd34:	6809      	ldr	r1, [r1, #0]
 800fd36:	4605      	mov	r5, r0
 800fd38:	b109      	cbz	r1, 800fd3e <cleanup_glue+0xe>
 800fd3a:	f7ff fff9 	bl	800fd30 <cleanup_glue>
 800fd3e:	4621      	mov	r1, r4
 800fd40:	4628      	mov	r0, r5
 800fd42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd46:	f002 bf67 	b.w	8012c18 <_free_r>
	...

0800fd4c <_reclaim_reent>:
 800fd4c:	4b2c      	ldr	r3, [pc, #176]	; (800fe00 <_reclaim_reent+0xb4>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4283      	cmp	r3, r0
 800fd52:	b570      	push	{r4, r5, r6, lr}
 800fd54:	4604      	mov	r4, r0
 800fd56:	d051      	beq.n	800fdfc <_reclaim_reent+0xb0>
 800fd58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fd5a:	b143      	cbz	r3, 800fd6e <_reclaim_reent+0x22>
 800fd5c:	68db      	ldr	r3, [r3, #12]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d14a      	bne.n	800fdf8 <_reclaim_reent+0xac>
 800fd62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd64:	6819      	ldr	r1, [r3, #0]
 800fd66:	b111      	cbz	r1, 800fd6e <_reclaim_reent+0x22>
 800fd68:	4620      	mov	r0, r4
 800fd6a:	f002 ff55 	bl	8012c18 <_free_r>
 800fd6e:	6961      	ldr	r1, [r4, #20]
 800fd70:	b111      	cbz	r1, 800fd78 <_reclaim_reent+0x2c>
 800fd72:	4620      	mov	r0, r4
 800fd74:	f002 ff50 	bl	8012c18 <_free_r>
 800fd78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fd7a:	b111      	cbz	r1, 800fd82 <_reclaim_reent+0x36>
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	f002 ff4b 	bl	8012c18 <_free_r>
 800fd82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fd84:	b111      	cbz	r1, 800fd8c <_reclaim_reent+0x40>
 800fd86:	4620      	mov	r0, r4
 800fd88:	f002 ff46 	bl	8012c18 <_free_r>
 800fd8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fd8e:	b111      	cbz	r1, 800fd96 <_reclaim_reent+0x4a>
 800fd90:	4620      	mov	r0, r4
 800fd92:	f002 ff41 	bl	8012c18 <_free_r>
 800fd96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fd98:	b111      	cbz	r1, 800fda0 <_reclaim_reent+0x54>
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f002 ff3c 	bl	8012c18 <_free_r>
 800fda0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fda2:	b111      	cbz	r1, 800fdaa <_reclaim_reent+0x5e>
 800fda4:	4620      	mov	r0, r4
 800fda6:	f002 ff37 	bl	8012c18 <_free_r>
 800fdaa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fdac:	b111      	cbz	r1, 800fdb4 <_reclaim_reent+0x68>
 800fdae:	4620      	mov	r0, r4
 800fdb0:	f002 ff32 	bl	8012c18 <_free_r>
 800fdb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fdb6:	b111      	cbz	r1, 800fdbe <_reclaim_reent+0x72>
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f002 ff2d 	bl	8012c18 <_free_r>
 800fdbe:	69a3      	ldr	r3, [r4, #24]
 800fdc0:	b1e3      	cbz	r3, 800fdfc <_reclaim_reent+0xb0>
 800fdc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	4798      	blx	r3
 800fdc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fdca:	b1b9      	cbz	r1, 800fdfc <_reclaim_reent+0xb0>
 800fdcc:	4620      	mov	r0, r4
 800fdce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fdd2:	f7ff bfad 	b.w	800fd30 <cleanup_glue>
 800fdd6:	5949      	ldr	r1, [r1, r5]
 800fdd8:	b941      	cbnz	r1, 800fdec <_reclaim_reent+0xa0>
 800fdda:	3504      	adds	r5, #4
 800fddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fdde:	2d80      	cmp	r5, #128	; 0x80
 800fde0:	68d9      	ldr	r1, [r3, #12]
 800fde2:	d1f8      	bne.n	800fdd6 <_reclaim_reent+0x8a>
 800fde4:	4620      	mov	r0, r4
 800fde6:	f002 ff17 	bl	8012c18 <_free_r>
 800fdea:	e7ba      	b.n	800fd62 <_reclaim_reent+0x16>
 800fdec:	680e      	ldr	r6, [r1, #0]
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f002 ff12 	bl	8012c18 <_free_r>
 800fdf4:	4631      	mov	r1, r6
 800fdf6:	e7ef      	b.n	800fdd8 <_reclaim_reent+0x8c>
 800fdf8:	2500      	movs	r5, #0
 800fdfa:	e7ef      	b.n	800fddc <_reclaim_reent+0x90>
 800fdfc:	bd70      	pop	{r4, r5, r6, pc}
 800fdfe:	bf00      	nop
 800fe00:	20000038 	.word	0x20000038

0800fe04 <_sbrk_r>:
 800fe04:	b538      	push	{r3, r4, r5, lr}
 800fe06:	4d06      	ldr	r5, [pc, #24]	; (800fe20 <_sbrk_r+0x1c>)
 800fe08:	2300      	movs	r3, #0
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	4608      	mov	r0, r1
 800fe0e:	602b      	str	r3, [r5, #0]
 800fe10:	f7f2 fa0e 	bl	8002230 <_sbrk>
 800fe14:	1c43      	adds	r3, r0, #1
 800fe16:	d102      	bne.n	800fe1e <_sbrk_r+0x1a>
 800fe18:	682b      	ldr	r3, [r5, #0]
 800fe1a:	b103      	cbz	r3, 800fe1e <_sbrk_r+0x1a>
 800fe1c:	6023      	str	r3, [r4, #0]
 800fe1e:	bd38      	pop	{r3, r4, r5, pc}
 800fe20:	20005110 	.word	0x20005110

0800fe24 <nanf>:
 800fe24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fe2c <nanf+0x8>
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop
 800fe2c:	7fc00000 	.word	0x7fc00000

0800fe30 <siprintf>:
 800fe30:	b40e      	push	{r1, r2, r3}
 800fe32:	b500      	push	{lr}
 800fe34:	b09c      	sub	sp, #112	; 0x70
 800fe36:	ab1d      	add	r3, sp, #116	; 0x74
 800fe38:	9002      	str	r0, [sp, #8]
 800fe3a:	9006      	str	r0, [sp, #24]
 800fe3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fe40:	4809      	ldr	r0, [pc, #36]	; (800fe68 <siprintf+0x38>)
 800fe42:	9107      	str	r1, [sp, #28]
 800fe44:	9104      	str	r1, [sp, #16]
 800fe46:	4909      	ldr	r1, [pc, #36]	; (800fe6c <siprintf+0x3c>)
 800fe48:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe4c:	9105      	str	r1, [sp, #20]
 800fe4e:	6800      	ldr	r0, [r0, #0]
 800fe50:	9301      	str	r3, [sp, #4]
 800fe52:	a902      	add	r1, sp, #8
 800fe54:	f002 ff88 	bl	8012d68 <_svfiprintf_r>
 800fe58:	9b02      	ldr	r3, [sp, #8]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	701a      	strb	r2, [r3, #0]
 800fe5e:	b01c      	add	sp, #112	; 0x70
 800fe60:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe64:	b003      	add	sp, #12
 800fe66:	4770      	bx	lr
 800fe68:	20000038 	.word	0x20000038
 800fe6c:	ffff0208 	.word	0xffff0208

0800fe70 <__sread>:
 800fe70:	b510      	push	{r4, lr}
 800fe72:	460c      	mov	r4, r1
 800fe74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe78:	f003 f876 	bl	8012f68 <_read_r>
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	bfab      	itete	ge
 800fe80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe82:	89a3      	ldrhlt	r3, [r4, #12]
 800fe84:	181b      	addge	r3, r3, r0
 800fe86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe8a:	bfac      	ite	ge
 800fe8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe8e:	81a3      	strhlt	r3, [r4, #12]
 800fe90:	bd10      	pop	{r4, pc}

0800fe92 <__swrite>:
 800fe92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe96:	461f      	mov	r7, r3
 800fe98:	898b      	ldrh	r3, [r1, #12]
 800fe9a:	05db      	lsls	r3, r3, #23
 800fe9c:	4605      	mov	r5, r0
 800fe9e:	460c      	mov	r4, r1
 800fea0:	4616      	mov	r6, r2
 800fea2:	d505      	bpl.n	800feb0 <__swrite+0x1e>
 800fea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fea8:	2302      	movs	r3, #2
 800feaa:	2200      	movs	r2, #0
 800feac:	f002 f9a4 	bl	80121f8 <_lseek_r>
 800feb0:	89a3      	ldrh	r3, [r4, #12]
 800feb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800feb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800feba:	81a3      	strh	r3, [r4, #12]
 800febc:	4632      	mov	r2, r6
 800febe:	463b      	mov	r3, r7
 800fec0:	4628      	mov	r0, r5
 800fec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fec6:	f000 bec3 	b.w	8010c50 <_write_r>

0800feca <__sseek>:
 800feca:	b510      	push	{r4, lr}
 800fecc:	460c      	mov	r4, r1
 800fece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fed2:	f002 f991 	bl	80121f8 <_lseek_r>
 800fed6:	1c43      	adds	r3, r0, #1
 800fed8:	89a3      	ldrh	r3, [r4, #12]
 800feda:	bf15      	itete	ne
 800fedc:	6560      	strne	r0, [r4, #84]	; 0x54
 800fede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fee6:	81a3      	strheq	r3, [r4, #12]
 800fee8:	bf18      	it	ne
 800feea:	81a3      	strhne	r3, [r4, #12]
 800feec:	bd10      	pop	{r4, pc}

0800feee <__sclose>:
 800feee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fef2:	f000 bebf 	b.w	8010c74 <_close_r>

0800fef6 <sulp>:
 800fef6:	b570      	push	{r4, r5, r6, lr}
 800fef8:	4604      	mov	r4, r0
 800fefa:	460d      	mov	r5, r1
 800fefc:	ec45 4b10 	vmov	d0, r4, r5
 800ff00:	4616      	mov	r6, r2
 800ff02:	f002 fd23 	bl	801294c <__ulp>
 800ff06:	ec51 0b10 	vmov	r0, r1, d0
 800ff0a:	b17e      	cbz	r6, 800ff2c <sulp+0x36>
 800ff0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ff10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	dd09      	ble.n	800ff2c <sulp+0x36>
 800ff18:	051b      	lsls	r3, r3, #20
 800ff1a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ff1e:	2400      	movs	r4, #0
 800ff20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ff24:	4622      	mov	r2, r4
 800ff26:	462b      	mov	r3, r5
 800ff28:	f7f0 fb6e 	bl	8000608 <__aeabi_dmul>
 800ff2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ff30 <_strtod_l>:
 800ff30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff34:	ed2d 8b02 	vpush	{d8}
 800ff38:	b09d      	sub	sp, #116	; 0x74
 800ff3a:	461f      	mov	r7, r3
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	9318      	str	r3, [sp, #96]	; 0x60
 800ff40:	4ba2      	ldr	r3, [pc, #648]	; (80101cc <_strtod_l+0x29c>)
 800ff42:	9213      	str	r2, [sp, #76]	; 0x4c
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	9305      	str	r3, [sp, #20]
 800ff48:	4604      	mov	r4, r0
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	4688      	mov	r8, r1
 800ff4e:	f7f0 f947 	bl	80001e0 <strlen>
 800ff52:	f04f 0a00 	mov.w	sl, #0
 800ff56:	4605      	mov	r5, r0
 800ff58:	f04f 0b00 	mov.w	fp, #0
 800ff5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ff60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff62:	781a      	ldrb	r2, [r3, #0]
 800ff64:	2a2b      	cmp	r2, #43	; 0x2b
 800ff66:	d04e      	beq.n	8010006 <_strtod_l+0xd6>
 800ff68:	d83b      	bhi.n	800ffe2 <_strtod_l+0xb2>
 800ff6a:	2a0d      	cmp	r2, #13
 800ff6c:	d834      	bhi.n	800ffd8 <_strtod_l+0xa8>
 800ff6e:	2a08      	cmp	r2, #8
 800ff70:	d834      	bhi.n	800ffdc <_strtod_l+0xac>
 800ff72:	2a00      	cmp	r2, #0
 800ff74:	d03e      	beq.n	800fff4 <_strtod_l+0xc4>
 800ff76:	2300      	movs	r3, #0
 800ff78:	930a      	str	r3, [sp, #40]	; 0x28
 800ff7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ff7c:	7833      	ldrb	r3, [r6, #0]
 800ff7e:	2b30      	cmp	r3, #48	; 0x30
 800ff80:	f040 80b0 	bne.w	80100e4 <_strtod_l+0x1b4>
 800ff84:	7873      	ldrb	r3, [r6, #1]
 800ff86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ff8a:	2b58      	cmp	r3, #88	; 0x58
 800ff8c:	d168      	bne.n	8010060 <_strtod_l+0x130>
 800ff8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff90:	9301      	str	r3, [sp, #4]
 800ff92:	ab18      	add	r3, sp, #96	; 0x60
 800ff94:	9702      	str	r7, [sp, #8]
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	4a8d      	ldr	r2, [pc, #564]	; (80101d0 <_strtod_l+0x2a0>)
 800ff9a:	ab19      	add	r3, sp, #100	; 0x64
 800ff9c:	a917      	add	r1, sp, #92	; 0x5c
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	f001 fe1e 	bl	8011be0 <__gethex>
 800ffa4:	f010 0707 	ands.w	r7, r0, #7
 800ffa8:	4605      	mov	r5, r0
 800ffaa:	d005      	beq.n	800ffb8 <_strtod_l+0x88>
 800ffac:	2f06      	cmp	r7, #6
 800ffae:	d12c      	bne.n	801000a <_strtod_l+0xda>
 800ffb0:	3601      	adds	r6, #1
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	9617      	str	r6, [sp, #92]	; 0x5c
 800ffb6:	930a      	str	r3, [sp, #40]	; 0x28
 800ffb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	f040 8590 	bne.w	8010ae0 <_strtod_l+0xbb0>
 800ffc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffc2:	b1eb      	cbz	r3, 8010000 <_strtod_l+0xd0>
 800ffc4:	4652      	mov	r2, sl
 800ffc6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ffca:	ec43 2b10 	vmov	d0, r2, r3
 800ffce:	b01d      	add	sp, #116	; 0x74
 800ffd0:	ecbd 8b02 	vpop	{d8}
 800ffd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd8:	2a20      	cmp	r2, #32
 800ffda:	d1cc      	bne.n	800ff76 <_strtod_l+0x46>
 800ffdc:	3301      	adds	r3, #1
 800ffde:	9317      	str	r3, [sp, #92]	; 0x5c
 800ffe0:	e7be      	b.n	800ff60 <_strtod_l+0x30>
 800ffe2:	2a2d      	cmp	r2, #45	; 0x2d
 800ffe4:	d1c7      	bne.n	800ff76 <_strtod_l+0x46>
 800ffe6:	2201      	movs	r2, #1
 800ffe8:	920a      	str	r2, [sp, #40]	; 0x28
 800ffea:	1c5a      	adds	r2, r3, #1
 800ffec:	9217      	str	r2, [sp, #92]	; 0x5c
 800ffee:	785b      	ldrb	r3, [r3, #1]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d1c2      	bne.n	800ff7a <_strtod_l+0x4a>
 800fff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fff6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	f040 856e 	bne.w	8010adc <_strtod_l+0xbac>
 8010000:	4652      	mov	r2, sl
 8010002:	465b      	mov	r3, fp
 8010004:	e7e1      	b.n	800ffca <_strtod_l+0x9a>
 8010006:	2200      	movs	r2, #0
 8010008:	e7ee      	b.n	800ffe8 <_strtod_l+0xb8>
 801000a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801000c:	b13a      	cbz	r2, 801001e <_strtod_l+0xee>
 801000e:	2135      	movs	r1, #53	; 0x35
 8010010:	a81a      	add	r0, sp, #104	; 0x68
 8010012:	f002 fda6 	bl	8012b62 <__copybits>
 8010016:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010018:	4620      	mov	r0, r4
 801001a:	f002 f965 	bl	80122e8 <_Bfree>
 801001e:	3f01      	subs	r7, #1
 8010020:	2f04      	cmp	r7, #4
 8010022:	d806      	bhi.n	8010032 <_strtod_l+0x102>
 8010024:	e8df f007 	tbb	[pc, r7]
 8010028:	1714030a 	.word	0x1714030a
 801002c:	0a          	.byte	0x0a
 801002d:	00          	.byte	0x00
 801002e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010032:	0728      	lsls	r0, r5, #28
 8010034:	d5c0      	bpl.n	800ffb8 <_strtod_l+0x88>
 8010036:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801003a:	e7bd      	b.n	800ffb8 <_strtod_l+0x88>
 801003c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010040:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010042:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010046:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801004a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801004e:	e7f0      	b.n	8010032 <_strtod_l+0x102>
 8010050:	f8df b180 	ldr.w	fp, [pc, #384]	; 80101d4 <_strtod_l+0x2a4>
 8010054:	e7ed      	b.n	8010032 <_strtod_l+0x102>
 8010056:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801005a:	f04f 3aff 	mov.w	sl, #4294967295
 801005e:	e7e8      	b.n	8010032 <_strtod_l+0x102>
 8010060:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010062:	1c5a      	adds	r2, r3, #1
 8010064:	9217      	str	r2, [sp, #92]	; 0x5c
 8010066:	785b      	ldrb	r3, [r3, #1]
 8010068:	2b30      	cmp	r3, #48	; 0x30
 801006a:	d0f9      	beq.n	8010060 <_strtod_l+0x130>
 801006c:	2b00      	cmp	r3, #0
 801006e:	d0a3      	beq.n	800ffb8 <_strtod_l+0x88>
 8010070:	2301      	movs	r3, #1
 8010072:	f04f 0900 	mov.w	r9, #0
 8010076:	9304      	str	r3, [sp, #16]
 8010078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801007a:	9308      	str	r3, [sp, #32]
 801007c:	f8cd 901c 	str.w	r9, [sp, #28]
 8010080:	464f      	mov	r7, r9
 8010082:	220a      	movs	r2, #10
 8010084:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010086:	7806      	ldrb	r6, [r0, #0]
 8010088:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801008c:	b2d9      	uxtb	r1, r3
 801008e:	2909      	cmp	r1, #9
 8010090:	d92a      	bls.n	80100e8 <_strtod_l+0x1b8>
 8010092:	9905      	ldr	r1, [sp, #20]
 8010094:	462a      	mov	r2, r5
 8010096:	f002 ff83 	bl	8012fa0 <strncmp>
 801009a:	b398      	cbz	r0, 8010104 <_strtod_l+0x1d4>
 801009c:	2000      	movs	r0, #0
 801009e:	4632      	mov	r2, r6
 80100a0:	463d      	mov	r5, r7
 80100a2:	9005      	str	r0, [sp, #20]
 80100a4:	4603      	mov	r3, r0
 80100a6:	2a65      	cmp	r2, #101	; 0x65
 80100a8:	d001      	beq.n	80100ae <_strtod_l+0x17e>
 80100aa:	2a45      	cmp	r2, #69	; 0x45
 80100ac:	d118      	bne.n	80100e0 <_strtod_l+0x1b0>
 80100ae:	b91d      	cbnz	r5, 80100b8 <_strtod_l+0x188>
 80100b0:	9a04      	ldr	r2, [sp, #16]
 80100b2:	4302      	orrs	r2, r0
 80100b4:	d09e      	beq.n	800fff4 <_strtod_l+0xc4>
 80100b6:	2500      	movs	r5, #0
 80100b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80100bc:	f108 0201 	add.w	r2, r8, #1
 80100c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80100c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80100c6:	2a2b      	cmp	r2, #43	; 0x2b
 80100c8:	d075      	beq.n	80101b6 <_strtod_l+0x286>
 80100ca:	2a2d      	cmp	r2, #45	; 0x2d
 80100cc:	d07b      	beq.n	80101c6 <_strtod_l+0x296>
 80100ce:	f04f 0c00 	mov.w	ip, #0
 80100d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80100d6:	2909      	cmp	r1, #9
 80100d8:	f240 8082 	bls.w	80101e0 <_strtod_l+0x2b0>
 80100dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80100e0:	2600      	movs	r6, #0
 80100e2:	e09d      	b.n	8010220 <_strtod_l+0x2f0>
 80100e4:	2300      	movs	r3, #0
 80100e6:	e7c4      	b.n	8010072 <_strtod_l+0x142>
 80100e8:	2f08      	cmp	r7, #8
 80100ea:	bfd8      	it	le
 80100ec:	9907      	ldrle	r1, [sp, #28]
 80100ee:	f100 0001 	add.w	r0, r0, #1
 80100f2:	bfda      	itte	le
 80100f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80100f8:	9307      	strle	r3, [sp, #28]
 80100fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80100fe:	3701      	adds	r7, #1
 8010100:	9017      	str	r0, [sp, #92]	; 0x5c
 8010102:	e7bf      	b.n	8010084 <_strtod_l+0x154>
 8010104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010106:	195a      	adds	r2, r3, r5
 8010108:	9217      	str	r2, [sp, #92]	; 0x5c
 801010a:	5d5a      	ldrb	r2, [r3, r5]
 801010c:	2f00      	cmp	r7, #0
 801010e:	d037      	beq.n	8010180 <_strtod_l+0x250>
 8010110:	9005      	str	r0, [sp, #20]
 8010112:	463d      	mov	r5, r7
 8010114:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010118:	2b09      	cmp	r3, #9
 801011a:	d912      	bls.n	8010142 <_strtod_l+0x212>
 801011c:	2301      	movs	r3, #1
 801011e:	e7c2      	b.n	80100a6 <_strtod_l+0x176>
 8010120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010122:	1c5a      	adds	r2, r3, #1
 8010124:	9217      	str	r2, [sp, #92]	; 0x5c
 8010126:	785a      	ldrb	r2, [r3, #1]
 8010128:	3001      	adds	r0, #1
 801012a:	2a30      	cmp	r2, #48	; 0x30
 801012c:	d0f8      	beq.n	8010120 <_strtod_l+0x1f0>
 801012e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010132:	2b08      	cmp	r3, #8
 8010134:	f200 84d9 	bhi.w	8010aea <_strtod_l+0xbba>
 8010138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801013a:	9005      	str	r0, [sp, #20]
 801013c:	2000      	movs	r0, #0
 801013e:	9308      	str	r3, [sp, #32]
 8010140:	4605      	mov	r5, r0
 8010142:	3a30      	subs	r2, #48	; 0x30
 8010144:	f100 0301 	add.w	r3, r0, #1
 8010148:	d014      	beq.n	8010174 <_strtod_l+0x244>
 801014a:	9905      	ldr	r1, [sp, #20]
 801014c:	4419      	add	r1, r3
 801014e:	9105      	str	r1, [sp, #20]
 8010150:	462b      	mov	r3, r5
 8010152:	eb00 0e05 	add.w	lr, r0, r5
 8010156:	210a      	movs	r1, #10
 8010158:	4573      	cmp	r3, lr
 801015a:	d113      	bne.n	8010184 <_strtod_l+0x254>
 801015c:	182b      	adds	r3, r5, r0
 801015e:	2b08      	cmp	r3, #8
 8010160:	f105 0501 	add.w	r5, r5, #1
 8010164:	4405      	add	r5, r0
 8010166:	dc1c      	bgt.n	80101a2 <_strtod_l+0x272>
 8010168:	9907      	ldr	r1, [sp, #28]
 801016a:	230a      	movs	r3, #10
 801016c:	fb03 2301 	mla	r3, r3, r1, r2
 8010170:	9307      	str	r3, [sp, #28]
 8010172:	2300      	movs	r3, #0
 8010174:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010176:	1c51      	adds	r1, r2, #1
 8010178:	9117      	str	r1, [sp, #92]	; 0x5c
 801017a:	7852      	ldrb	r2, [r2, #1]
 801017c:	4618      	mov	r0, r3
 801017e:	e7c9      	b.n	8010114 <_strtod_l+0x1e4>
 8010180:	4638      	mov	r0, r7
 8010182:	e7d2      	b.n	801012a <_strtod_l+0x1fa>
 8010184:	2b08      	cmp	r3, #8
 8010186:	dc04      	bgt.n	8010192 <_strtod_l+0x262>
 8010188:	9e07      	ldr	r6, [sp, #28]
 801018a:	434e      	muls	r6, r1
 801018c:	9607      	str	r6, [sp, #28]
 801018e:	3301      	adds	r3, #1
 8010190:	e7e2      	b.n	8010158 <_strtod_l+0x228>
 8010192:	f103 0c01 	add.w	ip, r3, #1
 8010196:	f1bc 0f10 	cmp.w	ip, #16
 801019a:	bfd8      	it	le
 801019c:	fb01 f909 	mulle.w	r9, r1, r9
 80101a0:	e7f5      	b.n	801018e <_strtod_l+0x25e>
 80101a2:	2d10      	cmp	r5, #16
 80101a4:	bfdc      	itt	le
 80101a6:	230a      	movle	r3, #10
 80101a8:	fb03 2909 	mlale	r9, r3, r9, r2
 80101ac:	e7e1      	b.n	8010172 <_strtod_l+0x242>
 80101ae:	2300      	movs	r3, #0
 80101b0:	9305      	str	r3, [sp, #20]
 80101b2:	2301      	movs	r3, #1
 80101b4:	e77c      	b.n	80100b0 <_strtod_l+0x180>
 80101b6:	f04f 0c00 	mov.w	ip, #0
 80101ba:	f108 0202 	add.w	r2, r8, #2
 80101be:	9217      	str	r2, [sp, #92]	; 0x5c
 80101c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80101c4:	e785      	b.n	80100d2 <_strtod_l+0x1a2>
 80101c6:	f04f 0c01 	mov.w	ip, #1
 80101ca:	e7f6      	b.n	80101ba <_strtod_l+0x28a>
 80101cc:	08016538 	.word	0x08016538
 80101d0:	080162f0 	.word	0x080162f0
 80101d4:	7ff00000 	.word	0x7ff00000
 80101d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80101da:	1c51      	adds	r1, r2, #1
 80101dc:	9117      	str	r1, [sp, #92]	; 0x5c
 80101de:	7852      	ldrb	r2, [r2, #1]
 80101e0:	2a30      	cmp	r2, #48	; 0x30
 80101e2:	d0f9      	beq.n	80101d8 <_strtod_l+0x2a8>
 80101e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80101e8:	2908      	cmp	r1, #8
 80101ea:	f63f af79 	bhi.w	80100e0 <_strtod_l+0x1b0>
 80101ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80101f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80101f4:	9206      	str	r2, [sp, #24]
 80101f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80101f8:	1c51      	adds	r1, r2, #1
 80101fa:	9117      	str	r1, [sp, #92]	; 0x5c
 80101fc:	7852      	ldrb	r2, [r2, #1]
 80101fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010202:	2e09      	cmp	r6, #9
 8010204:	d937      	bls.n	8010276 <_strtod_l+0x346>
 8010206:	9e06      	ldr	r6, [sp, #24]
 8010208:	1b89      	subs	r1, r1, r6
 801020a:	2908      	cmp	r1, #8
 801020c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010210:	dc02      	bgt.n	8010218 <_strtod_l+0x2e8>
 8010212:	4576      	cmp	r6, lr
 8010214:	bfa8      	it	ge
 8010216:	4676      	movge	r6, lr
 8010218:	f1bc 0f00 	cmp.w	ip, #0
 801021c:	d000      	beq.n	8010220 <_strtod_l+0x2f0>
 801021e:	4276      	negs	r6, r6
 8010220:	2d00      	cmp	r5, #0
 8010222:	d14d      	bne.n	80102c0 <_strtod_l+0x390>
 8010224:	9904      	ldr	r1, [sp, #16]
 8010226:	4301      	orrs	r1, r0
 8010228:	f47f aec6 	bne.w	800ffb8 <_strtod_l+0x88>
 801022c:	2b00      	cmp	r3, #0
 801022e:	f47f aee1 	bne.w	800fff4 <_strtod_l+0xc4>
 8010232:	2a69      	cmp	r2, #105	; 0x69
 8010234:	d027      	beq.n	8010286 <_strtod_l+0x356>
 8010236:	dc24      	bgt.n	8010282 <_strtod_l+0x352>
 8010238:	2a49      	cmp	r2, #73	; 0x49
 801023a:	d024      	beq.n	8010286 <_strtod_l+0x356>
 801023c:	2a4e      	cmp	r2, #78	; 0x4e
 801023e:	f47f aed9 	bne.w	800fff4 <_strtod_l+0xc4>
 8010242:	499f      	ldr	r1, [pc, #636]	; (80104c0 <_strtod_l+0x590>)
 8010244:	a817      	add	r0, sp, #92	; 0x5c
 8010246:	f001 ff23 	bl	8012090 <__match>
 801024a:	2800      	cmp	r0, #0
 801024c:	f43f aed2 	beq.w	800fff4 <_strtod_l+0xc4>
 8010250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	2b28      	cmp	r3, #40	; 0x28
 8010256:	d12d      	bne.n	80102b4 <_strtod_l+0x384>
 8010258:	499a      	ldr	r1, [pc, #616]	; (80104c4 <_strtod_l+0x594>)
 801025a:	aa1a      	add	r2, sp, #104	; 0x68
 801025c:	a817      	add	r0, sp, #92	; 0x5c
 801025e:	f001 ff2b 	bl	80120b8 <__hexnan>
 8010262:	2805      	cmp	r0, #5
 8010264:	d126      	bne.n	80102b4 <_strtod_l+0x384>
 8010266:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010268:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801026c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010270:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010274:	e6a0      	b.n	800ffb8 <_strtod_l+0x88>
 8010276:	210a      	movs	r1, #10
 8010278:	fb01 2e0e 	mla	lr, r1, lr, r2
 801027c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010280:	e7b9      	b.n	80101f6 <_strtod_l+0x2c6>
 8010282:	2a6e      	cmp	r2, #110	; 0x6e
 8010284:	e7db      	b.n	801023e <_strtod_l+0x30e>
 8010286:	4990      	ldr	r1, [pc, #576]	; (80104c8 <_strtod_l+0x598>)
 8010288:	a817      	add	r0, sp, #92	; 0x5c
 801028a:	f001 ff01 	bl	8012090 <__match>
 801028e:	2800      	cmp	r0, #0
 8010290:	f43f aeb0 	beq.w	800fff4 <_strtod_l+0xc4>
 8010294:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010296:	498d      	ldr	r1, [pc, #564]	; (80104cc <_strtod_l+0x59c>)
 8010298:	3b01      	subs	r3, #1
 801029a:	a817      	add	r0, sp, #92	; 0x5c
 801029c:	9317      	str	r3, [sp, #92]	; 0x5c
 801029e:	f001 fef7 	bl	8012090 <__match>
 80102a2:	b910      	cbnz	r0, 80102aa <_strtod_l+0x37a>
 80102a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80102a6:	3301      	adds	r3, #1
 80102a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80102aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 80104dc <_strtod_l+0x5ac>
 80102ae:	f04f 0a00 	mov.w	sl, #0
 80102b2:	e681      	b.n	800ffb8 <_strtod_l+0x88>
 80102b4:	4886      	ldr	r0, [pc, #536]	; (80104d0 <_strtod_l+0x5a0>)
 80102b6:	f002 fe6b 	bl	8012f90 <nan>
 80102ba:	ec5b ab10 	vmov	sl, fp, d0
 80102be:	e67b      	b.n	800ffb8 <_strtod_l+0x88>
 80102c0:	9b05      	ldr	r3, [sp, #20]
 80102c2:	9807      	ldr	r0, [sp, #28]
 80102c4:	1af3      	subs	r3, r6, r3
 80102c6:	2f00      	cmp	r7, #0
 80102c8:	bf08      	it	eq
 80102ca:	462f      	moveq	r7, r5
 80102cc:	2d10      	cmp	r5, #16
 80102ce:	9306      	str	r3, [sp, #24]
 80102d0:	46a8      	mov	r8, r5
 80102d2:	bfa8      	it	ge
 80102d4:	f04f 0810 	movge.w	r8, #16
 80102d8:	f7f0 f91c 	bl	8000514 <__aeabi_ui2d>
 80102dc:	2d09      	cmp	r5, #9
 80102de:	4682      	mov	sl, r0
 80102e0:	468b      	mov	fp, r1
 80102e2:	dd13      	ble.n	801030c <_strtod_l+0x3dc>
 80102e4:	4b7b      	ldr	r3, [pc, #492]	; (80104d4 <_strtod_l+0x5a4>)
 80102e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80102ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80102ee:	f7f0 f98b 	bl	8000608 <__aeabi_dmul>
 80102f2:	4682      	mov	sl, r0
 80102f4:	4648      	mov	r0, r9
 80102f6:	468b      	mov	fp, r1
 80102f8:	f7f0 f90c 	bl	8000514 <__aeabi_ui2d>
 80102fc:	4602      	mov	r2, r0
 80102fe:	460b      	mov	r3, r1
 8010300:	4650      	mov	r0, sl
 8010302:	4659      	mov	r1, fp
 8010304:	f7ef ffca 	bl	800029c <__adddf3>
 8010308:	4682      	mov	sl, r0
 801030a:	468b      	mov	fp, r1
 801030c:	2d0f      	cmp	r5, #15
 801030e:	dc38      	bgt.n	8010382 <_strtod_l+0x452>
 8010310:	9b06      	ldr	r3, [sp, #24]
 8010312:	2b00      	cmp	r3, #0
 8010314:	f43f ae50 	beq.w	800ffb8 <_strtod_l+0x88>
 8010318:	dd24      	ble.n	8010364 <_strtod_l+0x434>
 801031a:	2b16      	cmp	r3, #22
 801031c:	dc0b      	bgt.n	8010336 <_strtod_l+0x406>
 801031e:	496d      	ldr	r1, [pc, #436]	; (80104d4 <_strtod_l+0x5a4>)
 8010320:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010328:	4652      	mov	r2, sl
 801032a:	465b      	mov	r3, fp
 801032c:	f7f0 f96c 	bl	8000608 <__aeabi_dmul>
 8010330:	4682      	mov	sl, r0
 8010332:	468b      	mov	fp, r1
 8010334:	e640      	b.n	800ffb8 <_strtod_l+0x88>
 8010336:	9a06      	ldr	r2, [sp, #24]
 8010338:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801033c:	4293      	cmp	r3, r2
 801033e:	db20      	blt.n	8010382 <_strtod_l+0x452>
 8010340:	4c64      	ldr	r4, [pc, #400]	; (80104d4 <_strtod_l+0x5a4>)
 8010342:	f1c5 050f 	rsb	r5, r5, #15
 8010346:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801034a:	4652      	mov	r2, sl
 801034c:	465b      	mov	r3, fp
 801034e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010352:	f7f0 f959 	bl	8000608 <__aeabi_dmul>
 8010356:	9b06      	ldr	r3, [sp, #24]
 8010358:	1b5d      	subs	r5, r3, r5
 801035a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801035e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010362:	e7e3      	b.n	801032c <_strtod_l+0x3fc>
 8010364:	9b06      	ldr	r3, [sp, #24]
 8010366:	3316      	adds	r3, #22
 8010368:	db0b      	blt.n	8010382 <_strtod_l+0x452>
 801036a:	9b05      	ldr	r3, [sp, #20]
 801036c:	1b9e      	subs	r6, r3, r6
 801036e:	4b59      	ldr	r3, [pc, #356]	; (80104d4 <_strtod_l+0x5a4>)
 8010370:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010374:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010378:	4650      	mov	r0, sl
 801037a:	4659      	mov	r1, fp
 801037c:	f7f0 fa6e 	bl	800085c <__aeabi_ddiv>
 8010380:	e7d6      	b.n	8010330 <_strtod_l+0x400>
 8010382:	9b06      	ldr	r3, [sp, #24]
 8010384:	eba5 0808 	sub.w	r8, r5, r8
 8010388:	4498      	add	r8, r3
 801038a:	f1b8 0f00 	cmp.w	r8, #0
 801038e:	dd74      	ble.n	801047a <_strtod_l+0x54a>
 8010390:	f018 030f 	ands.w	r3, r8, #15
 8010394:	d00a      	beq.n	80103ac <_strtod_l+0x47c>
 8010396:	494f      	ldr	r1, [pc, #316]	; (80104d4 <_strtod_l+0x5a4>)
 8010398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801039c:	4652      	mov	r2, sl
 801039e:	465b      	mov	r3, fp
 80103a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103a4:	f7f0 f930 	bl	8000608 <__aeabi_dmul>
 80103a8:	4682      	mov	sl, r0
 80103aa:	468b      	mov	fp, r1
 80103ac:	f038 080f 	bics.w	r8, r8, #15
 80103b0:	d04f      	beq.n	8010452 <_strtod_l+0x522>
 80103b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80103b6:	dd22      	ble.n	80103fe <_strtod_l+0x4ce>
 80103b8:	2500      	movs	r5, #0
 80103ba:	462e      	mov	r6, r5
 80103bc:	9507      	str	r5, [sp, #28]
 80103be:	9505      	str	r5, [sp, #20]
 80103c0:	2322      	movs	r3, #34	; 0x22
 80103c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80104dc <_strtod_l+0x5ac>
 80103c6:	6023      	str	r3, [r4, #0]
 80103c8:	f04f 0a00 	mov.w	sl, #0
 80103cc:	9b07      	ldr	r3, [sp, #28]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	f43f adf2 	beq.w	800ffb8 <_strtod_l+0x88>
 80103d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80103d6:	4620      	mov	r0, r4
 80103d8:	f001 ff86 	bl	80122e8 <_Bfree>
 80103dc:	9905      	ldr	r1, [sp, #20]
 80103de:	4620      	mov	r0, r4
 80103e0:	f001 ff82 	bl	80122e8 <_Bfree>
 80103e4:	4631      	mov	r1, r6
 80103e6:	4620      	mov	r0, r4
 80103e8:	f001 ff7e 	bl	80122e8 <_Bfree>
 80103ec:	9907      	ldr	r1, [sp, #28]
 80103ee:	4620      	mov	r0, r4
 80103f0:	f001 ff7a 	bl	80122e8 <_Bfree>
 80103f4:	4629      	mov	r1, r5
 80103f6:	4620      	mov	r0, r4
 80103f8:	f001 ff76 	bl	80122e8 <_Bfree>
 80103fc:	e5dc      	b.n	800ffb8 <_strtod_l+0x88>
 80103fe:	4b36      	ldr	r3, [pc, #216]	; (80104d8 <_strtod_l+0x5a8>)
 8010400:	9304      	str	r3, [sp, #16]
 8010402:	2300      	movs	r3, #0
 8010404:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010408:	4650      	mov	r0, sl
 801040a:	4659      	mov	r1, fp
 801040c:	4699      	mov	r9, r3
 801040e:	f1b8 0f01 	cmp.w	r8, #1
 8010412:	dc21      	bgt.n	8010458 <_strtod_l+0x528>
 8010414:	b10b      	cbz	r3, 801041a <_strtod_l+0x4ea>
 8010416:	4682      	mov	sl, r0
 8010418:	468b      	mov	fp, r1
 801041a:	4b2f      	ldr	r3, [pc, #188]	; (80104d8 <_strtod_l+0x5a8>)
 801041c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010420:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010424:	4652      	mov	r2, sl
 8010426:	465b      	mov	r3, fp
 8010428:	e9d9 0100 	ldrd	r0, r1, [r9]
 801042c:	f7f0 f8ec 	bl	8000608 <__aeabi_dmul>
 8010430:	4b2a      	ldr	r3, [pc, #168]	; (80104dc <_strtod_l+0x5ac>)
 8010432:	460a      	mov	r2, r1
 8010434:	400b      	ands	r3, r1
 8010436:	492a      	ldr	r1, [pc, #168]	; (80104e0 <_strtod_l+0x5b0>)
 8010438:	428b      	cmp	r3, r1
 801043a:	4682      	mov	sl, r0
 801043c:	d8bc      	bhi.n	80103b8 <_strtod_l+0x488>
 801043e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010442:	428b      	cmp	r3, r1
 8010444:	bf86      	itte	hi
 8010446:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80104e4 <_strtod_l+0x5b4>
 801044a:	f04f 3aff 	movhi.w	sl, #4294967295
 801044e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010452:	2300      	movs	r3, #0
 8010454:	9304      	str	r3, [sp, #16]
 8010456:	e084      	b.n	8010562 <_strtod_l+0x632>
 8010458:	f018 0f01 	tst.w	r8, #1
 801045c:	d005      	beq.n	801046a <_strtod_l+0x53a>
 801045e:	9b04      	ldr	r3, [sp, #16]
 8010460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010464:	f7f0 f8d0 	bl	8000608 <__aeabi_dmul>
 8010468:	2301      	movs	r3, #1
 801046a:	9a04      	ldr	r2, [sp, #16]
 801046c:	3208      	adds	r2, #8
 801046e:	f109 0901 	add.w	r9, r9, #1
 8010472:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010476:	9204      	str	r2, [sp, #16]
 8010478:	e7c9      	b.n	801040e <_strtod_l+0x4de>
 801047a:	d0ea      	beq.n	8010452 <_strtod_l+0x522>
 801047c:	f1c8 0800 	rsb	r8, r8, #0
 8010480:	f018 020f 	ands.w	r2, r8, #15
 8010484:	d00a      	beq.n	801049c <_strtod_l+0x56c>
 8010486:	4b13      	ldr	r3, [pc, #76]	; (80104d4 <_strtod_l+0x5a4>)
 8010488:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801048c:	4650      	mov	r0, sl
 801048e:	4659      	mov	r1, fp
 8010490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010494:	f7f0 f9e2 	bl	800085c <__aeabi_ddiv>
 8010498:	4682      	mov	sl, r0
 801049a:	468b      	mov	fp, r1
 801049c:	ea5f 1828 	movs.w	r8, r8, asr #4
 80104a0:	d0d7      	beq.n	8010452 <_strtod_l+0x522>
 80104a2:	f1b8 0f1f 	cmp.w	r8, #31
 80104a6:	dd1f      	ble.n	80104e8 <_strtod_l+0x5b8>
 80104a8:	2500      	movs	r5, #0
 80104aa:	462e      	mov	r6, r5
 80104ac:	9507      	str	r5, [sp, #28]
 80104ae:	9505      	str	r5, [sp, #20]
 80104b0:	2322      	movs	r3, #34	; 0x22
 80104b2:	f04f 0a00 	mov.w	sl, #0
 80104b6:	f04f 0b00 	mov.w	fp, #0
 80104ba:	6023      	str	r3, [r4, #0]
 80104bc:	e786      	b.n	80103cc <_strtod_l+0x49c>
 80104be:	bf00      	nop
 80104c0:	080162c1 	.word	0x080162c1
 80104c4:	08016304 	.word	0x08016304
 80104c8:	080162b9 	.word	0x080162b9
 80104cc:	08016444 	.word	0x08016444
 80104d0:	080166f0 	.word	0x080166f0
 80104d4:	080165d0 	.word	0x080165d0
 80104d8:	080165a8 	.word	0x080165a8
 80104dc:	7ff00000 	.word	0x7ff00000
 80104e0:	7ca00000 	.word	0x7ca00000
 80104e4:	7fefffff 	.word	0x7fefffff
 80104e8:	f018 0310 	ands.w	r3, r8, #16
 80104ec:	bf18      	it	ne
 80104ee:	236a      	movne	r3, #106	; 0x6a
 80104f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80108a0 <_strtod_l+0x970>
 80104f4:	9304      	str	r3, [sp, #16]
 80104f6:	4650      	mov	r0, sl
 80104f8:	4659      	mov	r1, fp
 80104fa:	2300      	movs	r3, #0
 80104fc:	f018 0f01 	tst.w	r8, #1
 8010500:	d004      	beq.n	801050c <_strtod_l+0x5dc>
 8010502:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010506:	f7f0 f87f 	bl	8000608 <__aeabi_dmul>
 801050a:	2301      	movs	r3, #1
 801050c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010510:	f109 0908 	add.w	r9, r9, #8
 8010514:	d1f2      	bne.n	80104fc <_strtod_l+0x5cc>
 8010516:	b10b      	cbz	r3, 801051c <_strtod_l+0x5ec>
 8010518:	4682      	mov	sl, r0
 801051a:	468b      	mov	fp, r1
 801051c:	9b04      	ldr	r3, [sp, #16]
 801051e:	b1c3      	cbz	r3, 8010552 <_strtod_l+0x622>
 8010520:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010524:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010528:	2b00      	cmp	r3, #0
 801052a:	4659      	mov	r1, fp
 801052c:	dd11      	ble.n	8010552 <_strtod_l+0x622>
 801052e:	2b1f      	cmp	r3, #31
 8010530:	f340 8124 	ble.w	801077c <_strtod_l+0x84c>
 8010534:	2b34      	cmp	r3, #52	; 0x34
 8010536:	bfde      	ittt	le
 8010538:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801053c:	f04f 33ff 	movle.w	r3, #4294967295
 8010540:	fa03 f202 	lslle.w	r2, r3, r2
 8010544:	f04f 0a00 	mov.w	sl, #0
 8010548:	bfcc      	ite	gt
 801054a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801054e:	ea02 0b01 	andle.w	fp, r2, r1
 8010552:	2200      	movs	r2, #0
 8010554:	2300      	movs	r3, #0
 8010556:	4650      	mov	r0, sl
 8010558:	4659      	mov	r1, fp
 801055a:	f7f0 fabd 	bl	8000ad8 <__aeabi_dcmpeq>
 801055e:	2800      	cmp	r0, #0
 8010560:	d1a2      	bne.n	80104a8 <_strtod_l+0x578>
 8010562:	9b07      	ldr	r3, [sp, #28]
 8010564:	9300      	str	r3, [sp, #0]
 8010566:	9908      	ldr	r1, [sp, #32]
 8010568:	462b      	mov	r3, r5
 801056a:	463a      	mov	r2, r7
 801056c:	4620      	mov	r0, r4
 801056e:	f001 ff23 	bl	80123b8 <__s2b>
 8010572:	9007      	str	r0, [sp, #28]
 8010574:	2800      	cmp	r0, #0
 8010576:	f43f af1f 	beq.w	80103b8 <_strtod_l+0x488>
 801057a:	9b05      	ldr	r3, [sp, #20]
 801057c:	1b9e      	subs	r6, r3, r6
 801057e:	9b06      	ldr	r3, [sp, #24]
 8010580:	2b00      	cmp	r3, #0
 8010582:	bfb4      	ite	lt
 8010584:	4633      	movlt	r3, r6
 8010586:	2300      	movge	r3, #0
 8010588:	930c      	str	r3, [sp, #48]	; 0x30
 801058a:	9b06      	ldr	r3, [sp, #24]
 801058c:	2500      	movs	r5, #0
 801058e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010592:	9312      	str	r3, [sp, #72]	; 0x48
 8010594:	462e      	mov	r6, r5
 8010596:	9b07      	ldr	r3, [sp, #28]
 8010598:	4620      	mov	r0, r4
 801059a:	6859      	ldr	r1, [r3, #4]
 801059c:	f001 fe64 	bl	8012268 <_Balloc>
 80105a0:	9005      	str	r0, [sp, #20]
 80105a2:	2800      	cmp	r0, #0
 80105a4:	f43f af0c 	beq.w	80103c0 <_strtod_l+0x490>
 80105a8:	9b07      	ldr	r3, [sp, #28]
 80105aa:	691a      	ldr	r2, [r3, #16]
 80105ac:	3202      	adds	r2, #2
 80105ae:	f103 010c 	add.w	r1, r3, #12
 80105b2:	0092      	lsls	r2, r2, #2
 80105b4:	300c      	adds	r0, #12
 80105b6:	f7fe fc96 	bl	800eee6 <memcpy>
 80105ba:	ec4b ab10 	vmov	d0, sl, fp
 80105be:	aa1a      	add	r2, sp, #104	; 0x68
 80105c0:	a919      	add	r1, sp, #100	; 0x64
 80105c2:	4620      	mov	r0, r4
 80105c4:	f002 fa3e 	bl	8012a44 <__d2b>
 80105c8:	ec4b ab18 	vmov	d8, sl, fp
 80105cc:	9018      	str	r0, [sp, #96]	; 0x60
 80105ce:	2800      	cmp	r0, #0
 80105d0:	f43f aef6 	beq.w	80103c0 <_strtod_l+0x490>
 80105d4:	2101      	movs	r1, #1
 80105d6:	4620      	mov	r0, r4
 80105d8:	f001 ff88 	bl	80124ec <__i2b>
 80105dc:	4606      	mov	r6, r0
 80105de:	2800      	cmp	r0, #0
 80105e0:	f43f aeee 	beq.w	80103c0 <_strtod_l+0x490>
 80105e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80105e6:	9904      	ldr	r1, [sp, #16]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	bfab      	itete	ge
 80105ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80105ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80105f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80105f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80105f6:	bfac      	ite	ge
 80105f8:	eb03 0902 	addge.w	r9, r3, r2
 80105fc:	1ad7      	sublt	r7, r2, r3
 80105fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010600:	eba3 0801 	sub.w	r8, r3, r1
 8010604:	4490      	add	r8, r2
 8010606:	4ba1      	ldr	r3, [pc, #644]	; (801088c <_strtod_l+0x95c>)
 8010608:	f108 38ff 	add.w	r8, r8, #4294967295
 801060c:	4598      	cmp	r8, r3
 801060e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010612:	f280 80c7 	bge.w	80107a4 <_strtod_l+0x874>
 8010616:	eba3 0308 	sub.w	r3, r3, r8
 801061a:	2b1f      	cmp	r3, #31
 801061c:	eba2 0203 	sub.w	r2, r2, r3
 8010620:	f04f 0101 	mov.w	r1, #1
 8010624:	f300 80b1 	bgt.w	801078a <_strtod_l+0x85a>
 8010628:	fa01 f303 	lsl.w	r3, r1, r3
 801062c:	930d      	str	r3, [sp, #52]	; 0x34
 801062e:	2300      	movs	r3, #0
 8010630:	9308      	str	r3, [sp, #32]
 8010632:	eb09 0802 	add.w	r8, r9, r2
 8010636:	9b04      	ldr	r3, [sp, #16]
 8010638:	45c1      	cmp	r9, r8
 801063a:	4417      	add	r7, r2
 801063c:	441f      	add	r7, r3
 801063e:	464b      	mov	r3, r9
 8010640:	bfa8      	it	ge
 8010642:	4643      	movge	r3, r8
 8010644:	42bb      	cmp	r3, r7
 8010646:	bfa8      	it	ge
 8010648:	463b      	movge	r3, r7
 801064a:	2b00      	cmp	r3, #0
 801064c:	bfc2      	ittt	gt
 801064e:	eba8 0803 	subgt.w	r8, r8, r3
 8010652:	1aff      	subgt	r7, r7, r3
 8010654:	eba9 0903 	subgt.w	r9, r9, r3
 8010658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801065a:	2b00      	cmp	r3, #0
 801065c:	dd17      	ble.n	801068e <_strtod_l+0x75e>
 801065e:	4631      	mov	r1, r6
 8010660:	461a      	mov	r2, r3
 8010662:	4620      	mov	r0, r4
 8010664:	f002 f802 	bl	801266c <__pow5mult>
 8010668:	4606      	mov	r6, r0
 801066a:	2800      	cmp	r0, #0
 801066c:	f43f aea8 	beq.w	80103c0 <_strtod_l+0x490>
 8010670:	4601      	mov	r1, r0
 8010672:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010674:	4620      	mov	r0, r4
 8010676:	f001 ff4f 	bl	8012518 <__multiply>
 801067a:	900b      	str	r0, [sp, #44]	; 0x2c
 801067c:	2800      	cmp	r0, #0
 801067e:	f43f ae9f 	beq.w	80103c0 <_strtod_l+0x490>
 8010682:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010684:	4620      	mov	r0, r4
 8010686:	f001 fe2f 	bl	80122e8 <_Bfree>
 801068a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801068c:	9318      	str	r3, [sp, #96]	; 0x60
 801068e:	f1b8 0f00 	cmp.w	r8, #0
 8010692:	f300 808c 	bgt.w	80107ae <_strtod_l+0x87e>
 8010696:	9b06      	ldr	r3, [sp, #24]
 8010698:	2b00      	cmp	r3, #0
 801069a:	dd08      	ble.n	80106ae <_strtod_l+0x77e>
 801069c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801069e:	9905      	ldr	r1, [sp, #20]
 80106a0:	4620      	mov	r0, r4
 80106a2:	f001 ffe3 	bl	801266c <__pow5mult>
 80106a6:	9005      	str	r0, [sp, #20]
 80106a8:	2800      	cmp	r0, #0
 80106aa:	f43f ae89 	beq.w	80103c0 <_strtod_l+0x490>
 80106ae:	2f00      	cmp	r7, #0
 80106b0:	dd08      	ble.n	80106c4 <_strtod_l+0x794>
 80106b2:	9905      	ldr	r1, [sp, #20]
 80106b4:	463a      	mov	r2, r7
 80106b6:	4620      	mov	r0, r4
 80106b8:	f002 f832 	bl	8012720 <__lshift>
 80106bc:	9005      	str	r0, [sp, #20]
 80106be:	2800      	cmp	r0, #0
 80106c0:	f43f ae7e 	beq.w	80103c0 <_strtod_l+0x490>
 80106c4:	f1b9 0f00 	cmp.w	r9, #0
 80106c8:	dd08      	ble.n	80106dc <_strtod_l+0x7ac>
 80106ca:	4631      	mov	r1, r6
 80106cc:	464a      	mov	r2, r9
 80106ce:	4620      	mov	r0, r4
 80106d0:	f002 f826 	bl	8012720 <__lshift>
 80106d4:	4606      	mov	r6, r0
 80106d6:	2800      	cmp	r0, #0
 80106d8:	f43f ae72 	beq.w	80103c0 <_strtod_l+0x490>
 80106dc:	9a05      	ldr	r2, [sp, #20]
 80106de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80106e0:	4620      	mov	r0, r4
 80106e2:	f002 f8a9 	bl	8012838 <__mdiff>
 80106e6:	4605      	mov	r5, r0
 80106e8:	2800      	cmp	r0, #0
 80106ea:	f43f ae69 	beq.w	80103c0 <_strtod_l+0x490>
 80106ee:	68c3      	ldr	r3, [r0, #12]
 80106f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80106f2:	2300      	movs	r3, #0
 80106f4:	60c3      	str	r3, [r0, #12]
 80106f6:	4631      	mov	r1, r6
 80106f8:	f002 f882 	bl	8012800 <__mcmp>
 80106fc:	2800      	cmp	r0, #0
 80106fe:	da60      	bge.n	80107c2 <_strtod_l+0x892>
 8010700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010702:	ea53 030a 	orrs.w	r3, r3, sl
 8010706:	f040 8082 	bne.w	801080e <_strtod_l+0x8de>
 801070a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801070e:	2b00      	cmp	r3, #0
 8010710:	d17d      	bne.n	801080e <_strtod_l+0x8de>
 8010712:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010716:	0d1b      	lsrs	r3, r3, #20
 8010718:	051b      	lsls	r3, r3, #20
 801071a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801071e:	d976      	bls.n	801080e <_strtod_l+0x8de>
 8010720:	696b      	ldr	r3, [r5, #20]
 8010722:	b913      	cbnz	r3, 801072a <_strtod_l+0x7fa>
 8010724:	692b      	ldr	r3, [r5, #16]
 8010726:	2b01      	cmp	r3, #1
 8010728:	dd71      	ble.n	801080e <_strtod_l+0x8de>
 801072a:	4629      	mov	r1, r5
 801072c:	2201      	movs	r2, #1
 801072e:	4620      	mov	r0, r4
 8010730:	f001 fff6 	bl	8012720 <__lshift>
 8010734:	4631      	mov	r1, r6
 8010736:	4605      	mov	r5, r0
 8010738:	f002 f862 	bl	8012800 <__mcmp>
 801073c:	2800      	cmp	r0, #0
 801073e:	dd66      	ble.n	801080e <_strtod_l+0x8de>
 8010740:	9904      	ldr	r1, [sp, #16]
 8010742:	4a53      	ldr	r2, [pc, #332]	; (8010890 <_strtod_l+0x960>)
 8010744:	465b      	mov	r3, fp
 8010746:	2900      	cmp	r1, #0
 8010748:	f000 8081 	beq.w	801084e <_strtod_l+0x91e>
 801074c:	ea02 010b 	and.w	r1, r2, fp
 8010750:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010754:	dc7b      	bgt.n	801084e <_strtod_l+0x91e>
 8010756:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801075a:	f77f aea9 	ble.w	80104b0 <_strtod_l+0x580>
 801075e:	4b4d      	ldr	r3, [pc, #308]	; (8010894 <_strtod_l+0x964>)
 8010760:	4650      	mov	r0, sl
 8010762:	4659      	mov	r1, fp
 8010764:	2200      	movs	r2, #0
 8010766:	f7ef ff4f 	bl	8000608 <__aeabi_dmul>
 801076a:	460b      	mov	r3, r1
 801076c:	4303      	orrs	r3, r0
 801076e:	bf08      	it	eq
 8010770:	2322      	moveq	r3, #34	; 0x22
 8010772:	4682      	mov	sl, r0
 8010774:	468b      	mov	fp, r1
 8010776:	bf08      	it	eq
 8010778:	6023      	streq	r3, [r4, #0]
 801077a:	e62b      	b.n	80103d4 <_strtod_l+0x4a4>
 801077c:	f04f 32ff 	mov.w	r2, #4294967295
 8010780:	fa02 f303 	lsl.w	r3, r2, r3
 8010784:	ea03 0a0a 	and.w	sl, r3, sl
 8010788:	e6e3      	b.n	8010552 <_strtod_l+0x622>
 801078a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801078e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010792:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010796:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801079a:	fa01 f308 	lsl.w	r3, r1, r8
 801079e:	9308      	str	r3, [sp, #32]
 80107a0:	910d      	str	r1, [sp, #52]	; 0x34
 80107a2:	e746      	b.n	8010632 <_strtod_l+0x702>
 80107a4:	2300      	movs	r3, #0
 80107a6:	9308      	str	r3, [sp, #32]
 80107a8:	2301      	movs	r3, #1
 80107aa:	930d      	str	r3, [sp, #52]	; 0x34
 80107ac:	e741      	b.n	8010632 <_strtod_l+0x702>
 80107ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80107b0:	4642      	mov	r2, r8
 80107b2:	4620      	mov	r0, r4
 80107b4:	f001 ffb4 	bl	8012720 <__lshift>
 80107b8:	9018      	str	r0, [sp, #96]	; 0x60
 80107ba:	2800      	cmp	r0, #0
 80107bc:	f47f af6b 	bne.w	8010696 <_strtod_l+0x766>
 80107c0:	e5fe      	b.n	80103c0 <_strtod_l+0x490>
 80107c2:	465f      	mov	r7, fp
 80107c4:	d16e      	bne.n	80108a4 <_strtod_l+0x974>
 80107c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80107c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80107cc:	b342      	cbz	r2, 8010820 <_strtod_l+0x8f0>
 80107ce:	4a32      	ldr	r2, [pc, #200]	; (8010898 <_strtod_l+0x968>)
 80107d0:	4293      	cmp	r3, r2
 80107d2:	d128      	bne.n	8010826 <_strtod_l+0x8f6>
 80107d4:	9b04      	ldr	r3, [sp, #16]
 80107d6:	4651      	mov	r1, sl
 80107d8:	b1eb      	cbz	r3, 8010816 <_strtod_l+0x8e6>
 80107da:	4b2d      	ldr	r3, [pc, #180]	; (8010890 <_strtod_l+0x960>)
 80107dc:	403b      	ands	r3, r7
 80107de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80107e2:	f04f 32ff 	mov.w	r2, #4294967295
 80107e6:	d819      	bhi.n	801081c <_strtod_l+0x8ec>
 80107e8:	0d1b      	lsrs	r3, r3, #20
 80107ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80107ee:	fa02 f303 	lsl.w	r3, r2, r3
 80107f2:	4299      	cmp	r1, r3
 80107f4:	d117      	bne.n	8010826 <_strtod_l+0x8f6>
 80107f6:	4b29      	ldr	r3, [pc, #164]	; (801089c <_strtod_l+0x96c>)
 80107f8:	429f      	cmp	r7, r3
 80107fa:	d102      	bne.n	8010802 <_strtod_l+0x8d2>
 80107fc:	3101      	adds	r1, #1
 80107fe:	f43f addf 	beq.w	80103c0 <_strtod_l+0x490>
 8010802:	4b23      	ldr	r3, [pc, #140]	; (8010890 <_strtod_l+0x960>)
 8010804:	403b      	ands	r3, r7
 8010806:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801080a:	f04f 0a00 	mov.w	sl, #0
 801080e:	9b04      	ldr	r3, [sp, #16]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d1a4      	bne.n	801075e <_strtod_l+0x82e>
 8010814:	e5de      	b.n	80103d4 <_strtod_l+0x4a4>
 8010816:	f04f 33ff 	mov.w	r3, #4294967295
 801081a:	e7ea      	b.n	80107f2 <_strtod_l+0x8c2>
 801081c:	4613      	mov	r3, r2
 801081e:	e7e8      	b.n	80107f2 <_strtod_l+0x8c2>
 8010820:	ea53 030a 	orrs.w	r3, r3, sl
 8010824:	d08c      	beq.n	8010740 <_strtod_l+0x810>
 8010826:	9b08      	ldr	r3, [sp, #32]
 8010828:	b1db      	cbz	r3, 8010862 <_strtod_l+0x932>
 801082a:	423b      	tst	r3, r7
 801082c:	d0ef      	beq.n	801080e <_strtod_l+0x8de>
 801082e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010830:	9a04      	ldr	r2, [sp, #16]
 8010832:	4650      	mov	r0, sl
 8010834:	4659      	mov	r1, fp
 8010836:	b1c3      	cbz	r3, 801086a <_strtod_l+0x93a>
 8010838:	f7ff fb5d 	bl	800fef6 <sulp>
 801083c:	4602      	mov	r2, r0
 801083e:	460b      	mov	r3, r1
 8010840:	ec51 0b18 	vmov	r0, r1, d8
 8010844:	f7ef fd2a 	bl	800029c <__adddf3>
 8010848:	4682      	mov	sl, r0
 801084a:	468b      	mov	fp, r1
 801084c:	e7df      	b.n	801080e <_strtod_l+0x8de>
 801084e:	4013      	ands	r3, r2
 8010850:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010854:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010858:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801085c:	f04f 3aff 	mov.w	sl, #4294967295
 8010860:	e7d5      	b.n	801080e <_strtod_l+0x8de>
 8010862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010864:	ea13 0f0a 	tst.w	r3, sl
 8010868:	e7e0      	b.n	801082c <_strtod_l+0x8fc>
 801086a:	f7ff fb44 	bl	800fef6 <sulp>
 801086e:	4602      	mov	r2, r0
 8010870:	460b      	mov	r3, r1
 8010872:	ec51 0b18 	vmov	r0, r1, d8
 8010876:	f7ef fd0f 	bl	8000298 <__aeabi_dsub>
 801087a:	2200      	movs	r2, #0
 801087c:	2300      	movs	r3, #0
 801087e:	4682      	mov	sl, r0
 8010880:	468b      	mov	fp, r1
 8010882:	f7f0 f929 	bl	8000ad8 <__aeabi_dcmpeq>
 8010886:	2800      	cmp	r0, #0
 8010888:	d0c1      	beq.n	801080e <_strtod_l+0x8de>
 801088a:	e611      	b.n	80104b0 <_strtod_l+0x580>
 801088c:	fffffc02 	.word	0xfffffc02
 8010890:	7ff00000 	.word	0x7ff00000
 8010894:	39500000 	.word	0x39500000
 8010898:	000fffff 	.word	0x000fffff
 801089c:	7fefffff 	.word	0x7fefffff
 80108a0:	08016318 	.word	0x08016318
 80108a4:	4631      	mov	r1, r6
 80108a6:	4628      	mov	r0, r5
 80108a8:	f002 f928 	bl	8012afc <__ratio>
 80108ac:	ec59 8b10 	vmov	r8, r9, d0
 80108b0:	ee10 0a10 	vmov	r0, s0
 80108b4:	2200      	movs	r2, #0
 80108b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80108ba:	4649      	mov	r1, r9
 80108bc:	f7f0 f920 	bl	8000b00 <__aeabi_dcmple>
 80108c0:	2800      	cmp	r0, #0
 80108c2:	d07a      	beq.n	80109ba <_strtod_l+0xa8a>
 80108c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d04a      	beq.n	8010960 <_strtod_l+0xa30>
 80108ca:	4b95      	ldr	r3, [pc, #596]	; (8010b20 <_strtod_l+0xbf0>)
 80108cc:	2200      	movs	r2, #0
 80108ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80108d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010b20 <_strtod_l+0xbf0>
 80108d6:	f04f 0800 	mov.w	r8, #0
 80108da:	4b92      	ldr	r3, [pc, #584]	; (8010b24 <_strtod_l+0xbf4>)
 80108dc:	403b      	ands	r3, r7
 80108de:	930d      	str	r3, [sp, #52]	; 0x34
 80108e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108e2:	4b91      	ldr	r3, [pc, #580]	; (8010b28 <_strtod_l+0xbf8>)
 80108e4:	429a      	cmp	r2, r3
 80108e6:	f040 80b0 	bne.w	8010a4a <_strtod_l+0xb1a>
 80108ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80108ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80108f2:	ec4b ab10 	vmov	d0, sl, fp
 80108f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80108fa:	f002 f827 	bl	801294c <__ulp>
 80108fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010902:	ec53 2b10 	vmov	r2, r3, d0
 8010906:	f7ef fe7f 	bl	8000608 <__aeabi_dmul>
 801090a:	4652      	mov	r2, sl
 801090c:	465b      	mov	r3, fp
 801090e:	f7ef fcc5 	bl	800029c <__adddf3>
 8010912:	460b      	mov	r3, r1
 8010914:	4983      	ldr	r1, [pc, #524]	; (8010b24 <_strtod_l+0xbf4>)
 8010916:	4a85      	ldr	r2, [pc, #532]	; (8010b2c <_strtod_l+0xbfc>)
 8010918:	4019      	ands	r1, r3
 801091a:	4291      	cmp	r1, r2
 801091c:	4682      	mov	sl, r0
 801091e:	d960      	bls.n	80109e2 <_strtod_l+0xab2>
 8010920:	ee18 3a90 	vmov	r3, s17
 8010924:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010928:	4293      	cmp	r3, r2
 801092a:	d104      	bne.n	8010936 <_strtod_l+0xa06>
 801092c:	ee18 3a10 	vmov	r3, s16
 8010930:	3301      	adds	r3, #1
 8010932:	f43f ad45 	beq.w	80103c0 <_strtod_l+0x490>
 8010936:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010b38 <_strtod_l+0xc08>
 801093a:	f04f 3aff 	mov.w	sl, #4294967295
 801093e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010940:	4620      	mov	r0, r4
 8010942:	f001 fcd1 	bl	80122e8 <_Bfree>
 8010946:	9905      	ldr	r1, [sp, #20]
 8010948:	4620      	mov	r0, r4
 801094a:	f001 fccd 	bl	80122e8 <_Bfree>
 801094e:	4631      	mov	r1, r6
 8010950:	4620      	mov	r0, r4
 8010952:	f001 fcc9 	bl	80122e8 <_Bfree>
 8010956:	4629      	mov	r1, r5
 8010958:	4620      	mov	r0, r4
 801095a:	f001 fcc5 	bl	80122e8 <_Bfree>
 801095e:	e61a      	b.n	8010596 <_strtod_l+0x666>
 8010960:	f1ba 0f00 	cmp.w	sl, #0
 8010964:	d11b      	bne.n	801099e <_strtod_l+0xa6e>
 8010966:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801096a:	b9f3      	cbnz	r3, 80109aa <_strtod_l+0xa7a>
 801096c:	4b6c      	ldr	r3, [pc, #432]	; (8010b20 <_strtod_l+0xbf0>)
 801096e:	2200      	movs	r2, #0
 8010970:	4640      	mov	r0, r8
 8010972:	4649      	mov	r1, r9
 8010974:	f7f0 f8ba 	bl	8000aec <__aeabi_dcmplt>
 8010978:	b9d0      	cbnz	r0, 80109b0 <_strtod_l+0xa80>
 801097a:	4640      	mov	r0, r8
 801097c:	4649      	mov	r1, r9
 801097e:	4b6c      	ldr	r3, [pc, #432]	; (8010b30 <_strtod_l+0xc00>)
 8010980:	2200      	movs	r2, #0
 8010982:	f7ef fe41 	bl	8000608 <__aeabi_dmul>
 8010986:	4680      	mov	r8, r0
 8010988:	4689      	mov	r9, r1
 801098a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801098e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010992:	9315      	str	r3, [sp, #84]	; 0x54
 8010994:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010998:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801099c:	e79d      	b.n	80108da <_strtod_l+0x9aa>
 801099e:	f1ba 0f01 	cmp.w	sl, #1
 80109a2:	d102      	bne.n	80109aa <_strtod_l+0xa7a>
 80109a4:	2f00      	cmp	r7, #0
 80109a6:	f43f ad83 	beq.w	80104b0 <_strtod_l+0x580>
 80109aa:	4b62      	ldr	r3, [pc, #392]	; (8010b34 <_strtod_l+0xc04>)
 80109ac:	2200      	movs	r2, #0
 80109ae:	e78e      	b.n	80108ce <_strtod_l+0x99e>
 80109b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010b30 <_strtod_l+0xc00>
 80109b4:	f04f 0800 	mov.w	r8, #0
 80109b8:	e7e7      	b.n	801098a <_strtod_l+0xa5a>
 80109ba:	4b5d      	ldr	r3, [pc, #372]	; (8010b30 <_strtod_l+0xc00>)
 80109bc:	4640      	mov	r0, r8
 80109be:	4649      	mov	r1, r9
 80109c0:	2200      	movs	r2, #0
 80109c2:	f7ef fe21 	bl	8000608 <__aeabi_dmul>
 80109c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109c8:	4680      	mov	r8, r0
 80109ca:	4689      	mov	r9, r1
 80109cc:	b933      	cbnz	r3, 80109dc <_strtod_l+0xaac>
 80109ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80109d2:	900e      	str	r0, [sp, #56]	; 0x38
 80109d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80109d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80109da:	e7dd      	b.n	8010998 <_strtod_l+0xa68>
 80109dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80109e0:	e7f9      	b.n	80109d6 <_strtod_l+0xaa6>
 80109e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80109e6:	9b04      	ldr	r3, [sp, #16]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d1a8      	bne.n	801093e <_strtod_l+0xa0e>
 80109ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80109f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80109f2:	0d1b      	lsrs	r3, r3, #20
 80109f4:	051b      	lsls	r3, r3, #20
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d1a1      	bne.n	801093e <_strtod_l+0xa0e>
 80109fa:	4640      	mov	r0, r8
 80109fc:	4649      	mov	r1, r9
 80109fe:	f7f0 f963 	bl	8000cc8 <__aeabi_d2lz>
 8010a02:	f7ef fdd3 	bl	80005ac <__aeabi_l2d>
 8010a06:	4602      	mov	r2, r0
 8010a08:	460b      	mov	r3, r1
 8010a0a:	4640      	mov	r0, r8
 8010a0c:	4649      	mov	r1, r9
 8010a0e:	f7ef fc43 	bl	8000298 <__aeabi_dsub>
 8010a12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a18:	ea43 030a 	orr.w	r3, r3, sl
 8010a1c:	4313      	orrs	r3, r2
 8010a1e:	4680      	mov	r8, r0
 8010a20:	4689      	mov	r9, r1
 8010a22:	d055      	beq.n	8010ad0 <_strtod_l+0xba0>
 8010a24:	a336      	add	r3, pc, #216	; (adr r3, 8010b00 <_strtod_l+0xbd0>)
 8010a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a2a:	f7f0 f85f 	bl	8000aec <__aeabi_dcmplt>
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	f47f acd0 	bne.w	80103d4 <_strtod_l+0x4a4>
 8010a34:	a334      	add	r3, pc, #208	; (adr r3, 8010b08 <_strtod_l+0xbd8>)
 8010a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a3a:	4640      	mov	r0, r8
 8010a3c:	4649      	mov	r1, r9
 8010a3e:	f7f0 f873 	bl	8000b28 <__aeabi_dcmpgt>
 8010a42:	2800      	cmp	r0, #0
 8010a44:	f43f af7b 	beq.w	801093e <_strtod_l+0xa0e>
 8010a48:	e4c4      	b.n	80103d4 <_strtod_l+0x4a4>
 8010a4a:	9b04      	ldr	r3, [sp, #16]
 8010a4c:	b333      	cbz	r3, 8010a9c <_strtod_l+0xb6c>
 8010a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a50:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010a54:	d822      	bhi.n	8010a9c <_strtod_l+0xb6c>
 8010a56:	a32e      	add	r3, pc, #184	; (adr r3, 8010b10 <_strtod_l+0xbe0>)
 8010a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a5c:	4640      	mov	r0, r8
 8010a5e:	4649      	mov	r1, r9
 8010a60:	f7f0 f84e 	bl	8000b00 <__aeabi_dcmple>
 8010a64:	b1a0      	cbz	r0, 8010a90 <_strtod_l+0xb60>
 8010a66:	4649      	mov	r1, r9
 8010a68:	4640      	mov	r0, r8
 8010a6a:	f7f0 f8a5 	bl	8000bb8 <__aeabi_d2uiz>
 8010a6e:	2801      	cmp	r0, #1
 8010a70:	bf38      	it	cc
 8010a72:	2001      	movcc	r0, #1
 8010a74:	f7ef fd4e 	bl	8000514 <__aeabi_ui2d>
 8010a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a7a:	4680      	mov	r8, r0
 8010a7c:	4689      	mov	r9, r1
 8010a7e:	bb23      	cbnz	r3, 8010aca <_strtod_l+0xb9a>
 8010a80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a84:	9010      	str	r0, [sp, #64]	; 0x40
 8010a86:	9311      	str	r3, [sp, #68]	; 0x44
 8010a88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010a8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a94:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010a98:	1a9b      	subs	r3, r3, r2
 8010a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8010a9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010aa0:	eeb0 0a48 	vmov.f32	s0, s16
 8010aa4:	eef0 0a68 	vmov.f32	s1, s17
 8010aa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010aac:	f001 ff4e 	bl	801294c <__ulp>
 8010ab0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010ab4:	ec53 2b10 	vmov	r2, r3, d0
 8010ab8:	f7ef fda6 	bl	8000608 <__aeabi_dmul>
 8010abc:	ec53 2b18 	vmov	r2, r3, d8
 8010ac0:	f7ef fbec 	bl	800029c <__adddf3>
 8010ac4:	4682      	mov	sl, r0
 8010ac6:	468b      	mov	fp, r1
 8010ac8:	e78d      	b.n	80109e6 <_strtod_l+0xab6>
 8010aca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010ace:	e7db      	b.n	8010a88 <_strtod_l+0xb58>
 8010ad0:	a311      	add	r3, pc, #68	; (adr r3, 8010b18 <_strtod_l+0xbe8>)
 8010ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad6:	f7f0 f809 	bl	8000aec <__aeabi_dcmplt>
 8010ada:	e7b2      	b.n	8010a42 <_strtod_l+0xb12>
 8010adc:	2300      	movs	r3, #0
 8010ade:	930a      	str	r3, [sp, #40]	; 0x28
 8010ae0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010ae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ae4:	6013      	str	r3, [r2, #0]
 8010ae6:	f7ff ba6b 	b.w	800ffc0 <_strtod_l+0x90>
 8010aea:	2a65      	cmp	r2, #101	; 0x65
 8010aec:	f43f ab5f 	beq.w	80101ae <_strtod_l+0x27e>
 8010af0:	2a45      	cmp	r2, #69	; 0x45
 8010af2:	f43f ab5c 	beq.w	80101ae <_strtod_l+0x27e>
 8010af6:	2301      	movs	r3, #1
 8010af8:	f7ff bb94 	b.w	8010224 <_strtod_l+0x2f4>
 8010afc:	f3af 8000 	nop.w
 8010b00:	94a03595 	.word	0x94a03595
 8010b04:	3fdfffff 	.word	0x3fdfffff
 8010b08:	35afe535 	.word	0x35afe535
 8010b0c:	3fe00000 	.word	0x3fe00000
 8010b10:	ffc00000 	.word	0xffc00000
 8010b14:	41dfffff 	.word	0x41dfffff
 8010b18:	94a03595 	.word	0x94a03595
 8010b1c:	3fcfffff 	.word	0x3fcfffff
 8010b20:	3ff00000 	.word	0x3ff00000
 8010b24:	7ff00000 	.word	0x7ff00000
 8010b28:	7fe00000 	.word	0x7fe00000
 8010b2c:	7c9fffff 	.word	0x7c9fffff
 8010b30:	3fe00000 	.word	0x3fe00000
 8010b34:	bff00000 	.word	0xbff00000
 8010b38:	7fefffff 	.word	0x7fefffff

08010b3c <_strtod_r>:
 8010b3c:	4b01      	ldr	r3, [pc, #4]	; (8010b44 <_strtod_r+0x8>)
 8010b3e:	f7ff b9f7 	b.w	800ff30 <_strtod_l>
 8010b42:	bf00      	nop
 8010b44:	200000a0 	.word	0x200000a0

08010b48 <_strtol_l.constprop.0>:
 8010b48:	2b01      	cmp	r3, #1
 8010b4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b4e:	d001      	beq.n	8010b54 <_strtol_l.constprop.0+0xc>
 8010b50:	2b24      	cmp	r3, #36	; 0x24
 8010b52:	d906      	bls.n	8010b62 <_strtol_l.constprop.0+0x1a>
 8010b54:	f7fe f8a4 	bl	800eca0 <__errno>
 8010b58:	2316      	movs	r3, #22
 8010b5a:	6003      	str	r3, [r0, #0]
 8010b5c:	2000      	movs	r0, #0
 8010b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010c48 <_strtol_l.constprop.0+0x100>
 8010b66:	460d      	mov	r5, r1
 8010b68:	462e      	mov	r6, r5
 8010b6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b6e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010b72:	f017 0708 	ands.w	r7, r7, #8
 8010b76:	d1f7      	bne.n	8010b68 <_strtol_l.constprop.0+0x20>
 8010b78:	2c2d      	cmp	r4, #45	; 0x2d
 8010b7a:	d132      	bne.n	8010be2 <_strtol_l.constprop.0+0x9a>
 8010b7c:	782c      	ldrb	r4, [r5, #0]
 8010b7e:	2701      	movs	r7, #1
 8010b80:	1cb5      	adds	r5, r6, #2
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d05b      	beq.n	8010c3e <_strtol_l.constprop.0+0xf6>
 8010b86:	2b10      	cmp	r3, #16
 8010b88:	d109      	bne.n	8010b9e <_strtol_l.constprop.0+0x56>
 8010b8a:	2c30      	cmp	r4, #48	; 0x30
 8010b8c:	d107      	bne.n	8010b9e <_strtol_l.constprop.0+0x56>
 8010b8e:	782c      	ldrb	r4, [r5, #0]
 8010b90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010b94:	2c58      	cmp	r4, #88	; 0x58
 8010b96:	d14d      	bne.n	8010c34 <_strtol_l.constprop.0+0xec>
 8010b98:	786c      	ldrb	r4, [r5, #1]
 8010b9a:	2310      	movs	r3, #16
 8010b9c:	3502      	adds	r5, #2
 8010b9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010ba2:	f108 38ff 	add.w	r8, r8, #4294967295
 8010ba6:	f04f 0c00 	mov.w	ip, #0
 8010baa:	fbb8 f9f3 	udiv	r9, r8, r3
 8010bae:	4666      	mov	r6, ip
 8010bb0:	fb03 8a19 	mls	sl, r3, r9, r8
 8010bb4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010bb8:	f1be 0f09 	cmp.w	lr, #9
 8010bbc:	d816      	bhi.n	8010bec <_strtol_l.constprop.0+0xa4>
 8010bbe:	4674      	mov	r4, lr
 8010bc0:	42a3      	cmp	r3, r4
 8010bc2:	dd24      	ble.n	8010c0e <_strtol_l.constprop.0+0xc6>
 8010bc4:	f1bc 0f00 	cmp.w	ip, #0
 8010bc8:	db1e      	blt.n	8010c08 <_strtol_l.constprop.0+0xc0>
 8010bca:	45b1      	cmp	r9, r6
 8010bcc:	d31c      	bcc.n	8010c08 <_strtol_l.constprop.0+0xc0>
 8010bce:	d101      	bne.n	8010bd4 <_strtol_l.constprop.0+0x8c>
 8010bd0:	45a2      	cmp	sl, r4
 8010bd2:	db19      	blt.n	8010c08 <_strtol_l.constprop.0+0xc0>
 8010bd4:	fb06 4603 	mla	r6, r6, r3, r4
 8010bd8:	f04f 0c01 	mov.w	ip, #1
 8010bdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010be0:	e7e8      	b.n	8010bb4 <_strtol_l.constprop.0+0x6c>
 8010be2:	2c2b      	cmp	r4, #43	; 0x2b
 8010be4:	bf04      	itt	eq
 8010be6:	782c      	ldrbeq	r4, [r5, #0]
 8010be8:	1cb5      	addeq	r5, r6, #2
 8010bea:	e7ca      	b.n	8010b82 <_strtol_l.constprop.0+0x3a>
 8010bec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010bf0:	f1be 0f19 	cmp.w	lr, #25
 8010bf4:	d801      	bhi.n	8010bfa <_strtol_l.constprop.0+0xb2>
 8010bf6:	3c37      	subs	r4, #55	; 0x37
 8010bf8:	e7e2      	b.n	8010bc0 <_strtol_l.constprop.0+0x78>
 8010bfa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010bfe:	f1be 0f19 	cmp.w	lr, #25
 8010c02:	d804      	bhi.n	8010c0e <_strtol_l.constprop.0+0xc6>
 8010c04:	3c57      	subs	r4, #87	; 0x57
 8010c06:	e7db      	b.n	8010bc0 <_strtol_l.constprop.0+0x78>
 8010c08:	f04f 3cff 	mov.w	ip, #4294967295
 8010c0c:	e7e6      	b.n	8010bdc <_strtol_l.constprop.0+0x94>
 8010c0e:	f1bc 0f00 	cmp.w	ip, #0
 8010c12:	da05      	bge.n	8010c20 <_strtol_l.constprop.0+0xd8>
 8010c14:	2322      	movs	r3, #34	; 0x22
 8010c16:	6003      	str	r3, [r0, #0]
 8010c18:	4646      	mov	r6, r8
 8010c1a:	b942      	cbnz	r2, 8010c2e <_strtol_l.constprop.0+0xe6>
 8010c1c:	4630      	mov	r0, r6
 8010c1e:	e79e      	b.n	8010b5e <_strtol_l.constprop.0+0x16>
 8010c20:	b107      	cbz	r7, 8010c24 <_strtol_l.constprop.0+0xdc>
 8010c22:	4276      	negs	r6, r6
 8010c24:	2a00      	cmp	r2, #0
 8010c26:	d0f9      	beq.n	8010c1c <_strtol_l.constprop.0+0xd4>
 8010c28:	f1bc 0f00 	cmp.w	ip, #0
 8010c2c:	d000      	beq.n	8010c30 <_strtol_l.constprop.0+0xe8>
 8010c2e:	1e69      	subs	r1, r5, #1
 8010c30:	6011      	str	r1, [r2, #0]
 8010c32:	e7f3      	b.n	8010c1c <_strtol_l.constprop.0+0xd4>
 8010c34:	2430      	movs	r4, #48	; 0x30
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d1b1      	bne.n	8010b9e <_strtol_l.constprop.0+0x56>
 8010c3a:	2308      	movs	r3, #8
 8010c3c:	e7af      	b.n	8010b9e <_strtol_l.constprop.0+0x56>
 8010c3e:	2c30      	cmp	r4, #48	; 0x30
 8010c40:	d0a5      	beq.n	8010b8e <_strtol_l.constprop.0+0x46>
 8010c42:	230a      	movs	r3, #10
 8010c44:	e7ab      	b.n	8010b9e <_strtol_l.constprop.0+0x56>
 8010c46:	bf00      	nop
 8010c48:	08016341 	.word	0x08016341

08010c4c <_strtol_r>:
 8010c4c:	f7ff bf7c 	b.w	8010b48 <_strtol_l.constprop.0>

08010c50 <_write_r>:
 8010c50:	b538      	push	{r3, r4, r5, lr}
 8010c52:	4d07      	ldr	r5, [pc, #28]	; (8010c70 <_write_r+0x20>)
 8010c54:	4604      	mov	r4, r0
 8010c56:	4608      	mov	r0, r1
 8010c58:	4611      	mov	r1, r2
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	602a      	str	r2, [r5, #0]
 8010c5e:	461a      	mov	r2, r3
 8010c60:	f7f1 fa95 	bl	800218e <_write>
 8010c64:	1c43      	adds	r3, r0, #1
 8010c66:	d102      	bne.n	8010c6e <_write_r+0x1e>
 8010c68:	682b      	ldr	r3, [r5, #0]
 8010c6a:	b103      	cbz	r3, 8010c6e <_write_r+0x1e>
 8010c6c:	6023      	str	r3, [r4, #0]
 8010c6e:	bd38      	pop	{r3, r4, r5, pc}
 8010c70:	20005110 	.word	0x20005110

08010c74 <_close_r>:
 8010c74:	b538      	push	{r3, r4, r5, lr}
 8010c76:	4d06      	ldr	r5, [pc, #24]	; (8010c90 <_close_r+0x1c>)
 8010c78:	2300      	movs	r3, #0
 8010c7a:	4604      	mov	r4, r0
 8010c7c:	4608      	mov	r0, r1
 8010c7e:	602b      	str	r3, [r5, #0]
 8010c80:	f7f1 faa1 	bl	80021c6 <_close>
 8010c84:	1c43      	adds	r3, r0, #1
 8010c86:	d102      	bne.n	8010c8e <_close_r+0x1a>
 8010c88:	682b      	ldr	r3, [r5, #0]
 8010c8a:	b103      	cbz	r3, 8010c8e <_close_r+0x1a>
 8010c8c:	6023      	str	r3, [r4, #0]
 8010c8e:	bd38      	pop	{r3, r4, r5, pc}
 8010c90:	20005110 	.word	0x20005110

08010c94 <quorem>:
 8010c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c98:	6903      	ldr	r3, [r0, #16]
 8010c9a:	690c      	ldr	r4, [r1, #16]
 8010c9c:	42a3      	cmp	r3, r4
 8010c9e:	4607      	mov	r7, r0
 8010ca0:	f2c0 8081 	blt.w	8010da6 <quorem+0x112>
 8010ca4:	3c01      	subs	r4, #1
 8010ca6:	f101 0814 	add.w	r8, r1, #20
 8010caa:	f100 0514 	add.w	r5, r0, #20
 8010cae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010cb2:	9301      	str	r3, [sp, #4]
 8010cb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010cb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010cbc:	3301      	adds	r3, #1
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010cc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010cc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8010ccc:	d331      	bcc.n	8010d32 <quorem+0x9e>
 8010cce:	f04f 0e00 	mov.w	lr, #0
 8010cd2:	4640      	mov	r0, r8
 8010cd4:	46ac      	mov	ip, r5
 8010cd6:	46f2      	mov	sl, lr
 8010cd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8010cdc:	b293      	uxth	r3, r2
 8010cde:	fb06 e303 	mla	r3, r6, r3, lr
 8010ce2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	ebaa 0303 	sub.w	r3, sl, r3
 8010cec:	f8dc a000 	ldr.w	sl, [ip]
 8010cf0:	0c12      	lsrs	r2, r2, #16
 8010cf2:	fa13 f38a 	uxtah	r3, r3, sl
 8010cf6:	fb06 e202 	mla	r2, r6, r2, lr
 8010cfa:	9300      	str	r3, [sp, #0]
 8010cfc:	9b00      	ldr	r3, [sp, #0]
 8010cfe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010d02:	b292      	uxth	r2, r2
 8010d04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010d08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010d0c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010d10:	4581      	cmp	r9, r0
 8010d12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d16:	f84c 3b04 	str.w	r3, [ip], #4
 8010d1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010d1e:	d2db      	bcs.n	8010cd8 <quorem+0x44>
 8010d20:	f855 300b 	ldr.w	r3, [r5, fp]
 8010d24:	b92b      	cbnz	r3, 8010d32 <quorem+0x9e>
 8010d26:	9b01      	ldr	r3, [sp, #4]
 8010d28:	3b04      	subs	r3, #4
 8010d2a:	429d      	cmp	r5, r3
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	d32e      	bcc.n	8010d8e <quorem+0xfa>
 8010d30:	613c      	str	r4, [r7, #16]
 8010d32:	4638      	mov	r0, r7
 8010d34:	f001 fd64 	bl	8012800 <__mcmp>
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	db24      	blt.n	8010d86 <quorem+0xf2>
 8010d3c:	3601      	adds	r6, #1
 8010d3e:	4628      	mov	r0, r5
 8010d40:	f04f 0c00 	mov.w	ip, #0
 8010d44:	f858 2b04 	ldr.w	r2, [r8], #4
 8010d48:	f8d0 e000 	ldr.w	lr, [r0]
 8010d4c:	b293      	uxth	r3, r2
 8010d4e:	ebac 0303 	sub.w	r3, ip, r3
 8010d52:	0c12      	lsrs	r2, r2, #16
 8010d54:	fa13 f38e 	uxtah	r3, r3, lr
 8010d58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010d5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d66:	45c1      	cmp	r9, r8
 8010d68:	f840 3b04 	str.w	r3, [r0], #4
 8010d6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010d70:	d2e8      	bcs.n	8010d44 <quorem+0xb0>
 8010d72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d7a:	b922      	cbnz	r2, 8010d86 <quorem+0xf2>
 8010d7c:	3b04      	subs	r3, #4
 8010d7e:	429d      	cmp	r5, r3
 8010d80:	461a      	mov	r2, r3
 8010d82:	d30a      	bcc.n	8010d9a <quorem+0x106>
 8010d84:	613c      	str	r4, [r7, #16]
 8010d86:	4630      	mov	r0, r6
 8010d88:	b003      	add	sp, #12
 8010d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d8e:	6812      	ldr	r2, [r2, #0]
 8010d90:	3b04      	subs	r3, #4
 8010d92:	2a00      	cmp	r2, #0
 8010d94:	d1cc      	bne.n	8010d30 <quorem+0x9c>
 8010d96:	3c01      	subs	r4, #1
 8010d98:	e7c7      	b.n	8010d2a <quorem+0x96>
 8010d9a:	6812      	ldr	r2, [r2, #0]
 8010d9c:	3b04      	subs	r3, #4
 8010d9e:	2a00      	cmp	r2, #0
 8010da0:	d1f0      	bne.n	8010d84 <quorem+0xf0>
 8010da2:	3c01      	subs	r4, #1
 8010da4:	e7eb      	b.n	8010d7e <quorem+0xea>
 8010da6:	2000      	movs	r0, #0
 8010da8:	e7ee      	b.n	8010d88 <quorem+0xf4>
 8010daa:	0000      	movs	r0, r0
 8010dac:	0000      	movs	r0, r0
	...

08010db0 <_dtoa_r>:
 8010db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db4:	ed2d 8b04 	vpush	{d8-d9}
 8010db8:	ec57 6b10 	vmov	r6, r7, d0
 8010dbc:	b093      	sub	sp, #76	; 0x4c
 8010dbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010dc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010dc4:	9106      	str	r1, [sp, #24]
 8010dc6:	ee10 aa10 	vmov	sl, s0
 8010dca:	4604      	mov	r4, r0
 8010dcc:	9209      	str	r2, [sp, #36]	; 0x24
 8010dce:	930c      	str	r3, [sp, #48]	; 0x30
 8010dd0:	46bb      	mov	fp, r7
 8010dd2:	b975      	cbnz	r5, 8010df2 <_dtoa_r+0x42>
 8010dd4:	2010      	movs	r0, #16
 8010dd6:	f001 fa21 	bl	801221c <malloc>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	6260      	str	r0, [r4, #36]	; 0x24
 8010dde:	b920      	cbnz	r0, 8010dea <_dtoa_r+0x3a>
 8010de0:	4ba7      	ldr	r3, [pc, #668]	; (8011080 <_dtoa_r+0x2d0>)
 8010de2:	21ea      	movs	r1, #234	; 0xea
 8010de4:	48a7      	ldr	r0, [pc, #668]	; (8011084 <_dtoa_r+0x2d4>)
 8010de6:	f002 f8fd 	bl	8012fe4 <__assert_func>
 8010dea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010dee:	6005      	str	r5, [r0, #0]
 8010df0:	60c5      	str	r5, [r0, #12]
 8010df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010df4:	6819      	ldr	r1, [r3, #0]
 8010df6:	b151      	cbz	r1, 8010e0e <_dtoa_r+0x5e>
 8010df8:	685a      	ldr	r2, [r3, #4]
 8010dfa:	604a      	str	r2, [r1, #4]
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	4093      	lsls	r3, r2
 8010e00:	608b      	str	r3, [r1, #8]
 8010e02:	4620      	mov	r0, r4
 8010e04:	f001 fa70 	bl	80122e8 <_Bfree>
 8010e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	601a      	str	r2, [r3, #0]
 8010e0e:	1e3b      	subs	r3, r7, #0
 8010e10:	bfaa      	itet	ge
 8010e12:	2300      	movge	r3, #0
 8010e14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010e18:	f8c8 3000 	strge.w	r3, [r8]
 8010e1c:	4b9a      	ldr	r3, [pc, #616]	; (8011088 <_dtoa_r+0x2d8>)
 8010e1e:	bfbc      	itt	lt
 8010e20:	2201      	movlt	r2, #1
 8010e22:	f8c8 2000 	strlt.w	r2, [r8]
 8010e26:	ea33 030b 	bics.w	r3, r3, fp
 8010e2a:	d11b      	bne.n	8010e64 <_dtoa_r+0xb4>
 8010e2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010e32:	6013      	str	r3, [r2, #0]
 8010e34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010e38:	4333      	orrs	r3, r6
 8010e3a:	f000 8592 	beq.w	8011962 <_dtoa_r+0xbb2>
 8010e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e40:	b963      	cbnz	r3, 8010e5c <_dtoa_r+0xac>
 8010e42:	4b92      	ldr	r3, [pc, #584]	; (801108c <_dtoa_r+0x2dc>)
 8010e44:	e022      	b.n	8010e8c <_dtoa_r+0xdc>
 8010e46:	4b92      	ldr	r3, [pc, #584]	; (8011090 <_dtoa_r+0x2e0>)
 8010e48:	9301      	str	r3, [sp, #4]
 8010e4a:	3308      	adds	r3, #8
 8010e4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010e4e:	6013      	str	r3, [r2, #0]
 8010e50:	9801      	ldr	r0, [sp, #4]
 8010e52:	b013      	add	sp, #76	; 0x4c
 8010e54:	ecbd 8b04 	vpop	{d8-d9}
 8010e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e5c:	4b8b      	ldr	r3, [pc, #556]	; (801108c <_dtoa_r+0x2dc>)
 8010e5e:	9301      	str	r3, [sp, #4]
 8010e60:	3303      	adds	r3, #3
 8010e62:	e7f3      	b.n	8010e4c <_dtoa_r+0x9c>
 8010e64:	2200      	movs	r2, #0
 8010e66:	2300      	movs	r3, #0
 8010e68:	4650      	mov	r0, sl
 8010e6a:	4659      	mov	r1, fp
 8010e6c:	f7ef fe34 	bl	8000ad8 <__aeabi_dcmpeq>
 8010e70:	ec4b ab19 	vmov	d9, sl, fp
 8010e74:	4680      	mov	r8, r0
 8010e76:	b158      	cbz	r0, 8010e90 <_dtoa_r+0xe0>
 8010e78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	6013      	str	r3, [r2, #0]
 8010e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f000 856b 	beq.w	801195c <_dtoa_r+0xbac>
 8010e86:	4883      	ldr	r0, [pc, #524]	; (8011094 <_dtoa_r+0x2e4>)
 8010e88:	6018      	str	r0, [r3, #0]
 8010e8a:	1e43      	subs	r3, r0, #1
 8010e8c:	9301      	str	r3, [sp, #4]
 8010e8e:	e7df      	b.n	8010e50 <_dtoa_r+0xa0>
 8010e90:	ec4b ab10 	vmov	d0, sl, fp
 8010e94:	aa10      	add	r2, sp, #64	; 0x40
 8010e96:	a911      	add	r1, sp, #68	; 0x44
 8010e98:	4620      	mov	r0, r4
 8010e9a:	f001 fdd3 	bl	8012a44 <__d2b>
 8010e9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010ea2:	ee08 0a10 	vmov	s16, r0
 8010ea6:	2d00      	cmp	r5, #0
 8010ea8:	f000 8084 	beq.w	8010fb4 <_dtoa_r+0x204>
 8010eac:	ee19 3a90 	vmov	r3, s19
 8010eb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010eb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010eb8:	4656      	mov	r6, sl
 8010eba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010ebe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010ec2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010ec6:	4b74      	ldr	r3, [pc, #464]	; (8011098 <_dtoa_r+0x2e8>)
 8010ec8:	2200      	movs	r2, #0
 8010eca:	4630      	mov	r0, r6
 8010ecc:	4639      	mov	r1, r7
 8010ece:	f7ef f9e3 	bl	8000298 <__aeabi_dsub>
 8010ed2:	a365      	add	r3, pc, #404	; (adr r3, 8011068 <_dtoa_r+0x2b8>)
 8010ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed8:	f7ef fb96 	bl	8000608 <__aeabi_dmul>
 8010edc:	a364      	add	r3, pc, #400	; (adr r3, 8011070 <_dtoa_r+0x2c0>)
 8010ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee2:	f7ef f9db 	bl	800029c <__adddf3>
 8010ee6:	4606      	mov	r6, r0
 8010ee8:	4628      	mov	r0, r5
 8010eea:	460f      	mov	r7, r1
 8010eec:	f7ef fb22 	bl	8000534 <__aeabi_i2d>
 8010ef0:	a361      	add	r3, pc, #388	; (adr r3, 8011078 <_dtoa_r+0x2c8>)
 8010ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef6:	f7ef fb87 	bl	8000608 <__aeabi_dmul>
 8010efa:	4602      	mov	r2, r0
 8010efc:	460b      	mov	r3, r1
 8010efe:	4630      	mov	r0, r6
 8010f00:	4639      	mov	r1, r7
 8010f02:	f7ef f9cb 	bl	800029c <__adddf3>
 8010f06:	4606      	mov	r6, r0
 8010f08:	460f      	mov	r7, r1
 8010f0a:	f7ef fe2d 	bl	8000b68 <__aeabi_d2iz>
 8010f0e:	2200      	movs	r2, #0
 8010f10:	9000      	str	r0, [sp, #0]
 8010f12:	2300      	movs	r3, #0
 8010f14:	4630      	mov	r0, r6
 8010f16:	4639      	mov	r1, r7
 8010f18:	f7ef fde8 	bl	8000aec <__aeabi_dcmplt>
 8010f1c:	b150      	cbz	r0, 8010f34 <_dtoa_r+0x184>
 8010f1e:	9800      	ldr	r0, [sp, #0]
 8010f20:	f7ef fb08 	bl	8000534 <__aeabi_i2d>
 8010f24:	4632      	mov	r2, r6
 8010f26:	463b      	mov	r3, r7
 8010f28:	f7ef fdd6 	bl	8000ad8 <__aeabi_dcmpeq>
 8010f2c:	b910      	cbnz	r0, 8010f34 <_dtoa_r+0x184>
 8010f2e:	9b00      	ldr	r3, [sp, #0]
 8010f30:	3b01      	subs	r3, #1
 8010f32:	9300      	str	r3, [sp, #0]
 8010f34:	9b00      	ldr	r3, [sp, #0]
 8010f36:	2b16      	cmp	r3, #22
 8010f38:	d85a      	bhi.n	8010ff0 <_dtoa_r+0x240>
 8010f3a:	9a00      	ldr	r2, [sp, #0]
 8010f3c:	4b57      	ldr	r3, [pc, #348]	; (801109c <_dtoa_r+0x2ec>)
 8010f3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f46:	ec51 0b19 	vmov	r0, r1, d9
 8010f4a:	f7ef fdcf 	bl	8000aec <__aeabi_dcmplt>
 8010f4e:	2800      	cmp	r0, #0
 8010f50:	d050      	beq.n	8010ff4 <_dtoa_r+0x244>
 8010f52:	9b00      	ldr	r3, [sp, #0]
 8010f54:	3b01      	subs	r3, #1
 8010f56:	9300      	str	r3, [sp, #0]
 8010f58:	2300      	movs	r3, #0
 8010f5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f5e:	1b5d      	subs	r5, r3, r5
 8010f60:	1e6b      	subs	r3, r5, #1
 8010f62:	9305      	str	r3, [sp, #20]
 8010f64:	bf45      	ittet	mi
 8010f66:	f1c5 0301 	rsbmi	r3, r5, #1
 8010f6a:	9304      	strmi	r3, [sp, #16]
 8010f6c:	2300      	movpl	r3, #0
 8010f6e:	2300      	movmi	r3, #0
 8010f70:	bf4c      	ite	mi
 8010f72:	9305      	strmi	r3, [sp, #20]
 8010f74:	9304      	strpl	r3, [sp, #16]
 8010f76:	9b00      	ldr	r3, [sp, #0]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	db3d      	blt.n	8010ff8 <_dtoa_r+0x248>
 8010f7c:	9b05      	ldr	r3, [sp, #20]
 8010f7e:	9a00      	ldr	r2, [sp, #0]
 8010f80:	920a      	str	r2, [sp, #40]	; 0x28
 8010f82:	4413      	add	r3, r2
 8010f84:	9305      	str	r3, [sp, #20]
 8010f86:	2300      	movs	r3, #0
 8010f88:	9307      	str	r3, [sp, #28]
 8010f8a:	9b06      	ldr	r3, [sp, #24]
 8010f8c:	2b09      	cmp	r3, #9
 8010f8e:	f200 8089 	bhi.w	80110a4 <_dtoa_r+0x2f4>
 8010f92:	2b05      	cmp	r3, #5
 8010f94:	bfc4      	itt	gt
 8010f96:	3b04      	subgt	r3, #4
 8010f98:	9306      	strgt	r3, [sp, #24]
 8010f9a:	9b06      	ldr	r3, [sp, #24]
 8010f9c:	f1a3 0302 	sub.w	r3, r3, #2
 8010fa0:	bfcc      	ite	gt
 8010fa2:	2500      	movgt	r5, #0
 8010fa4:	2501      	movle	r5, #1
 8010fa6:	2b03      	cmp	r3, #3
 8010fa8:	f200 8087 	bhi.w	80110ba <_dtoa_r+0x30a>
 8010fac:	e8df f003 	tbb	[pc, r3]
 8010fb0:	59383a2d 	.word	0x59383a2d
 8010fb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010fb8:	441d      	add	r5, r3
 8010fba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010fbe:	2b20      	cmp	r3, #32
 8010fc0:	bfc1      	itttt	gt
 8010fc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010fc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010fca:	fa0b f303 	lslgt.w	r3, fp, r3
 8010fce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010fd2:	bfda      	itte	le
 8010fd4:	f1c3 0320 	rsble	r3, r3, #32
 8010fd8:	fa06 f003 	lslle.w	r0, r6, r3
 8010fdc:	4318      	orrgt	r0, r3
 8010fde:	f7ef fa99 	bl	8000514 <__aeabi_ui2d>
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	4606      	mov	r6, r0
 8010fe6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010fea:	3d01      	subs	r5, #1
 8010fec:	930e      	str	r3, [sp, #56]	; 0x38
 8010fee:	e76a      	b.n	8010ec6 <_dtoa_r+0x116>
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	e7b2      	b.n	8010f5a <_dtoa_r+0x1aa>
 8010ff4:	900b      	str	r0, [sp, #44]	; 0x2c
 8010ff6:	e7b1      	b.n	8010f5c <_dtoa_r+0x1ac>
 8010ff8:	9b04      	ldr	r3, [sp, #16]
 8010ffa:	9a00      	ldr	r2, [sp, #0]
 8010ffc:	1a9b      	subs	r3, r3, r2
 8010ffe:	9304      	str	r3, [sp, #16]
 8011000:	4253      	negs	r3, r2
 8011002:	9307      	str	r3, [sp, #28]
 8011004:	2300      	movs	r3, #0
 8011006:	930a      	str	r3, [sp, #40]	; 0x28
 8011008:	e7bf      	b.n	8010f8a <_dtoa_r+0x1da>
 801100a:	2300      	movs	r3, #0
 801100c:	9308      	str	r3, [sp, #32]
 801100e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011010:	2b00      	cmp	r3, #0
 8011012:	dc55      	bgt.n	80110c0 <_dtoa_r+0x310>
 8011014:	2301      	movs	r3, #1
 8011016:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801101a:	461a      	mov	r2, r3
 801101c:	9209      	str	r2, [sp, #36]	; 0x24
 801101e:	e00c      	b.n	801103a <_dtoa_r+0x28a>
 8011020:	2301      	movs	r3, #1
 8011022:	e7f3      	b.n	801100c <_dtoa_r+0x25c>
 8011024:	2300      	movs	r3, #0
 8011026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011028:	9308      	str	r3, [sp, #32]
 801102a:	9b00      	ldr	r3, [sp, #0]
 801102c:	4413      	add	r3, r2
 801102e:	9302      	str	r3, [sp, #8]
 8011030:	3301      	adds	r3, #1
 8011032:	2b01      	cmp	r3, #1
 8011034:	9303      	str	r3, [sp, #12]
 8011036:	bfb8      	it	lt
 8011038:	2301      	movlt	r3, #1
 801103a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801103c:	2200      	movs	r2, #0
 801103e:	6042      	str	r2, [r0, #4]
 8011040:	2204      	movs	r2, #4
 8011042:	f102 0614 	add.w	r6, r2, #20
 8011046:	429e      	cmp	r6, r3
 8011048:	6841      	ldr	r1, [r0, #4]
 801104a:	d93d      	bls.n	80110c8 <_dtoa_r+0x318>
 801104c:	4620      	mov	r0, r4
 801104e:	f001 f90b 	bl	8012268 <_Balloc>
 8011052:	9001      	str	r0, [sp, #4]
 8011054:	2800      	cmp	r0, #0
 8011056:	d13b      	bne.n	80110d0 <_dtoa_r+0x320>
 8011058:	4b11      	ldr	r3, [pc, #68]	; (80110a0 <_dtoa_r+0x2f0>)
 801105a:	4602      	mov	r2, r0
 801105c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011060:	e6c0      	b.n	8010de4 <_dtoa_r+0x34>
 8011062:	2301      	movs	r3, #1
 8011064:	e7df      	b.n	8011026 <_dtoa_r+0x276>
 8011066:	bf00      	nop
 8011068:	636f4361 	.word	0x636f4361
 801106c:	3fd287a7 	.word	0x3fd287a7
 8011070:	8b60c8b3 	.word	0x8b60c8b3
 8011074:	3fc68a28 	.word	0x3fc68a28
 8011078:	509f79fb 	.word	0x509f79fb
 801107c:	3fd34413 	.word	0x3fd34413
 8011080:	0801644e 	.word	0x0801644e
 8011084:	08016465 	.word	0x08016465
 8011088:	7ff00000 	.word	0x7ff00000
 801108c:	0801644a 	.word	0x0801644a
 8011090:	08016441 	.word	0x08016441
 8011094:	080162c5 	.word	0x080162c5
 8011098:	3ff80000 	.word	0x3ff80000
 801109c:	080165d0 	.word	0x080165d0
 80110a0:	080164c0 	.word	0x080164c0
 80110a4:	2501      	movs	r5, #1
 80110a6:	2300      	movs	r3, #0
 80110a8:	9306      	str	r3, [sp, #24]
 80110aa:	9508      	str	r5, [sp, #32]
 80110ac:	f04f 33ff 	mov.w	r3, #4294967295
 80110b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80110b4:	2200      	movs	r2, #0
 80110b6:	2312      	movs	r3, #18
 80110b8:	e7b0      	b.n	801101c <_dtoa_r+0x26c>
 80110ba:	2301      	movs	r3, #1
 80110bc:	9308      	str	r3, [sp, #32]
 80110be:	e7f5      	b.n	80110ac <_dtoa_r+0x2fc>
 80110c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80110c6:	e7b8      	b.n	801103a <_dtoa_r+0x28a>
 80110c8:	3101      	adds	r1, #1
 80110ca:	6041      	str	r1, [r0, #4]
 80110cc:	0052      	lsls	r2, r2, #1
 80110ce:	e7b8      	b.n	8011042 <_dtoa_r+0x292>
 80110d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80110d2:	9a01      	ldr	r2, [sp, #4]
 80110d4:	601a      	str	r2, [r3, #0]
 80110d6:	9b03      	ldr	r3, [sp, #12]
 80110d8:	2b0e      	cmp	r3, #14
 80110da:	f200 809d 	bhi.w	8011218 <_dtoa_r+0x468>
 80110de:	2d00      	cmp	r5, #0
 80110e0:	f000 809a 	beq.w	8011218 <_dtoa_r+0x468>
 80110e4:	9b00      	ldr	r3, [sp, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	dd32      	ble.n	8011150 <_dtoa_r+0x3a0>
 80110ea:	4ab7      	ldr	r2, [pc, #732]	; (80113c8 <_dtoa_r+0x618>)
 80110ec:	f003 030f 	and.w	r3, r3, #15
 80110f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80110f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80110f8:	9b00      	ldr	r3, [sp, #0]
 80110fa:	05d8      	lsls	r0, r3, #23
 80110fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011100:	d516      	bpl.n	8011130 <_dtoa_r+0x380>
 8011102:	4bb2      	ldr	r3, [pc, #712]	; (80113cc <_dtoa_r+0x61c>)
 8011104:	ec51 0b19 	vmov	r0, r1, d9
 8011108:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801110c:	f7ef fba6 	bl	800085c <__aeabi_ddiv>
 8011110:	f007 070f 	and.w	r7, r7, #15
 8011114:	4682      	mov	sl, r0
 8011116:	468b      	mov	fp, r1
 8011118:	2503      	movs	r5, #3
 801111a:	4eac      	ldr	r6, [pc, #688]	; (80113cc <_dtoa_r+0x61c>)
 801111c:	b957      	cbnz	r7, 8011134 <_dtoa_r+0x384>
 801111e:	4642      	mov	r2, r8
 8011120:	464b      	mov	r3, r9
 8011122:	4650      	mov	r0, sl
 8011124:	4659      	mov	r1, fp
 8011126:	f7ef fb99 	bl	800085c <__aeabi_ddiv>
 801112a:	4682      	mov	sl, r0
 801112c:	468b      	mov	fp, r1
 801112e:	e028      	b.n	8011182 <_dtoa_r+0x3d2>
 8011130:	2502      	movs	r5, #2
 8011132:	e7f2      	b.n	801111a <_dtoa_r+0x36a>
 8011134:	07f9      	lsls	r1, r7, #31
 8011136:	d508      	bpl.n	801114a <_dtoa_r+0x39a>
 8011138:	4640      	mov	r0, r8
 801113a:	4649      	mov	r1, r9
 801113c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011140:	f7ef fa62 	bl	8000608 <__aeabi_dmul>
 8011144:	3501      	adds	r5, #1
 8011146:	4680      	mov	r8, r0
 8011148:	4689      	mov	r9, r1
 801114a:	107f      	asrs	r7, r7, #1
 801114c:	3608      	adds	r6, #8
 801114e:	e7e5      	b.n	801111c <_dtoa_r+0x36c>
 8011150:	f000 809b 	beq.w	801128a <_dtoa_r+0x4da>
 8011154:	9b00      	ldr	r3, [sp, #0]
 8011156:	4f9d      	ldr	r7, [pc, #628]	; (80113cc <_dtoa_r+0x61c>)
 8011158:	425e      	negs	r6, r3
 801115a:	4b9b      	ldr	r3, [pc, #620]	; (80113c8 <_dtoa_r+0x618>)
 801115c:	f006 020f 	and.w	r2, r6, #15
 8011160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011168:	ec51 0b19 	vmov	r0, r1, d9
 801116c:	f7ef fa4c 	bl	8000608 <__aeabi_dmul>
 8011170:	1136      	asrs	r6, r6, #4
 8011172:	4682      	mov	sl, r0
 8011174:	468b      	mov	fp, r1
 8011176:	2300      	movs	r3, #0
 8011178:	2502      	movs	r5, #2
 801117a:	2e00      	cmp	r6, #0
 801117c:	d17a      	bne.n	8011274 <_dtoa_r+0x4c4>
 801117e:	2b00      	cmp	r3, #0
 8011180:	d1d3      	bne.n	801112a <_dtoa_r+0x37a>
 8011182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011184:	2b00      	cmp	r3, #0
 8011186:	f000 8082 	beq.w	801128e <_dtoa_r+0x4de>
 801118a:	4b91      	ldr	r3, [pc, #580]	; (80113d0 <_dtoa_r+0x620>)
 801118c:	2200      	movs	r2, #0
 801118e:	4650      	mov	r0, sl
 8011190:	4659      	mov	r1, fp
 8011192:	f7ef fcab 	bl	8000aec <__aeabi_dcmplt>
 8011196:	2800      	cmp	r0, #0
 8011198:	d079      	beq.n	801128e <_dtoa_r+0x4de>
 801119a:	9b03      	ldr	r3, [sp, #12]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d076      	beq.n	801128e <_dtoa_r+0x4de>
 80111a0:	9b02      	ldr	r3, [sp, #8]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	dd36      	ble.n	8011214 <_dtoa_r+0x464>
 80111a6:	9b00      	ldr	r3, [sp, #0]
 80111a8:	4650      	mov	r0, sl
 80111aa:	4659      	mov	r1, fp
 80111ac:	1e5f      	subs	r7, r3, #1
 80111ae:	2200      	movs	r2, #0
 80111b0:	4b88      	ldr	r3, [pc, #544]	; (80113d4 <_dtoa_r+0x624>)
 80111b2:	f7ef fa29 	bl	8000608 <__aeabi_dmul>
 80111b6:	9e02      	ldr	r6, [sp, #8]
 80111b8:	4682      	mov	sl, r0
 80111ba:	468b      	mov	fp, r1
 80111bc:	3501      	adds	r5, #1
 80111be:	4628      	mov	r0, r5
 80111c0:	f7ef f9b8 	bl	8000534 <__aeabi_i2d>
 80111c4:	4652      	mov	r2, sl
 80111c6:	465b      	mov	r3, fp
 80111c8:	f7ef fa1e 	bl	8000608 <__aeabi_dmul>
 80111cc:	4b82      	ldr	r3, [pc, #520]	; (80113d8 <_dtoa_r+0x628>)
 80111ce:	2200      	movs	r2, #0
 80111d0:	f7ef f864 	bl	800029c <__adddf3>
 80111d4:	46d0      	mov	r8, sl
 80111d6:	46d9      	mov	r9, fp
 80111d8:	4682      	mov	sl, r0
 80111da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80111de:	2e00      	cmp	r6, #0
 80111e0:	d158      	bne.n	8011294 <_dtoa_r+0x4e4>
 80111e2:	4b7e      	ldr	r3, [pc, #504]	; (80113dc <_dtoa_r+0x62c>)
 80111e4:	2200      	movs	r2, #0
 80111e6:	4640      	mov	r0, r8
 80111e8:	4649      	mov	r1, r9
 80111ea:	f7ef f855 	bl	8000298 <__aeabi_dsub>
 80111ee:	4652      	mov	r2, sl
 80111f0:	465b      	mov	r3, fp
 80111f2:	4680      	mov	r8, r0
 80111f4:	4689      	mov	r9, r1
 80111f6:	f7ef fc97 	bl	8000b28 <__aeabi_dcmpgt>
 80111fa:	2800      	cmp	r0, #0
 80111fc:	f040 8295 	bne.w	801172a <_dtoa_r+0x97a>
 8011200:	4652      	mov	r2, sl
 8011202:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011206:	4640      	mov	r0, r8
 8011208:	4649      	mov	r1, r9
 801120a:	f7ef fc6f 	bl	8000aec <__aeabi_dcmplt>
 801120e:	2800      	cmp	r0, #0
 8011210:	f040 8289 	bne.w	8011726 <_dtoa_r+0x976>
 8011214:	ec5b ab19 	vmov	sl, fp, d9
 8011218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801121a:	2b00      	cmp	r3, #0
 801121c:	f2c0 8148 	blt.w	80114b0 <_dtoa_r+0x700>
 8011220:	9a00      	ldr	r2, [sp, #0]
 8011222:	2a0e      	cmp	r2, #14
 8011224:	f300 8144 	bgt.w	80114b0 <_dtoa_r+0x700>
 8011228:	4b67      	ldr	r3, [pc, #412]	; (80113c8 <_dtoa_r+0x618>)
 801122a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801122e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011234:	2b00      	cmp	r3, #0
 8011236:	f280 80d5 	bge.w	80113e4 <_dtoa_r+0x634>
 801123a:	9b03      	ldr	r3, [sp, #12]
 801123c:	2b00      	cmp	r3, #0
 801123e:	f300 80d1 	bgt.w	80113e4 <_dtoa_r+0x634>
 8011242:	f040 826f 	bne.w	8011724 <_dtoa_r+0x974>
 8011246:	4b65      	ldr	r3, [pc, #404]	; (80113dc <_dtoa_r+0x62c>)
 8011248:	2200      	movs	r2, #0
 801124a:	4640      	mov	r0, r8
 801124c:	4649      	mov	r1, r9
 801124e:	f7ef f9db 	bl	8000608 <__aeabi_dmul>
 8011252:	4652      	mov	r2, sl
 8011254:	465b      	mov	r3, fp
 8011256:	f7ef fc5d 	bl	8000b14 <__aeabi_dcmpge>
 801125a:	9e03      	ldr	r6, [sp, #12]
 801125c:	4637      	mov	r7, r6
 801125e:	2800      	cmp	r0, #0
 8011260:	f040 8245 	bne.w	80116ee <_dtoa_r+0x93e>
 8011264:	9d01      	ldr	r5, [sp, #4]
 8011266:	2331      	movs	r3, #49	; 0x31
 8011268:	f805 3b01 	strb.w	r3, [r5], #1
 801126c:	9b00      	ldr	r3, [sp, #0]
 801126e:	3301      	adds	r3, #1
 8011270:	9300      	str	r3, [sp, #0]
 8011272:	e240      	b.n	80116f6 <_dtoa_r+0x946>
 8011274:	07f2      	lsls	r2, r6, #31
 8011276:	d505      	bpl.n	8011284 <_dtoa_r+0x4d4>
 8011278:	e9d7 2300 	ldrd	r2, r3, [r7]
 801127c:	f7ef f9c4 	bl	8000608 <__aeabi_dmul>
 8011280:	3501      	adds	r5, #1
 8011282:	2301      	movs	r3, #1
 8011284:	1076      	asrs	r6, r6, #1
 8011286:	3708      	adds	r7, #8
 8011288:	e777      	b.n	801117a <_dtoa_r+0x3ca>
 801128a:	2502      	movs	r5, #2
 801128c:	e779      	b.n	8011182 <_dtoa_r+0x3d2>
 801128e:	9f00      	ldr	r7, [sp, #0]
 8011290:	9e03      	ldr	r6, [sp, #12]
 8011292:	e794      	b.n	80111be <_dtoa_r+0x40e>
 8011294:	9901      	ldr	r1, [sp, #4]
 8011296:	4b4c      	ldr	r3, [pc, #304]	; (80113c8 <_dtoa_r+0x618>)
 8011298:	4431      	add	r1, r6
 801129a:	910d      	str	r1, [sp, #52]	; 0x34
 801129c:	9908      	ldr	r1, [sp, #32]
 801129e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80112a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80112a6:	2900      	cmp	r1, #0
 80112a8:	d043      	beq.n	8011332 <_dtoa_r+0x582>
 80112aa:	494d      	ldr	r1, [pc, #308]	; (80113e0 <_dtoa_r+0x630>)
 80112ac:	2000      	movs	r0, #0
 80112ae:	f7ef fad5 	bl	800085c <__aeabi_ddiv>
 80112b2:	4652      	mov	r2, sl
 80112b4:	465b      	mov	r3, fp
 80112b6:	f7ee ffef 	bl	8000298 <__aeabi_dsub>
 80112ba:	9d01      	ldr	r5, [sp, #4]
 80112bc:	4682      	mov	sl, r0
 80112be:	468b      	mov	fp, r1
 80112c0:	4649      	mov	r1, r9
 80112c2:	4640      	mov	r0, r8
 80112c4:	f7ef fc50 	bl	8000b68 <__aeabi_d2iz>
 80112c8:	4606      	mov	r6, r0
 80112ca:	f7ef f933 	bl	8000534 <__aeabi_i2d>
 80112ce:	4602      	mov	r2, r0
 80112d0:	460b      	mov	r3, r1
 80112d2:	4640      	mov	r0, r8
 80112d4:	4649      	mov	r1, r9
 80112d6:	f7ee ffdf 	bl	8000298 <__aeabi_dsub>
 80112da:	3630      	adds	r6, #48	; 0x30
 80112dc:	f805 6b01 	strb.w	r6, [r5], #1
 80112e0:	4652      	mov	r2, sl
 80112e2:	465b      	mov	r3, fp
 80112e4:	4680      	mov	r8, r0
 80112e6:	4689      	mov	r9, r1
 80112e8:	f7ef fc00 	bl	8000aec <__aeabi_dcmplt>
 80112ec:	2800      	cmp	r0, #0
 80112ee:	d163      	bne.n	80113b8 <_dtoa_r+0x608>
 80112f0:	4642      	mov	r2, r8
 80112f2:	464b      	mov	r3, r9
 80112f4:	4936      	ldr	r1, [pc, #216]	; (80113d0 <_dtoa_r+0x620>)
 80112f6:	2000      	movs	r0, #0
 80112f8:	f7ee ffce 	bl	8000298 <__aeabi_dsub>
 80112fc:	4652      	mov	r2, sl
 80112fe:	465b      	mov	r3, fp
 8011300:	f7ef fbf4 	bl	8000aec <__aeabi_dcmplt>
 8011304:	2800      	cmp	r0, #0
 8011306:	f040 80b5 	bne.w	8011474 <_dtoa_r+0x6c4>
 801130a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801130c:	429d      	cmp	r5, r3
 801130e:	d081      	beq.n	8011214 <_dtoa_r+0x464>
 8011310:	4b30      	ldr	r3, [pc, #192]	; (80113d4 <_dtoa_r+0x624>)
 8011312:	2200      	movs	r2, #0
 8011314:	4650      	mov	r0, sl
 8011316:	4659      	mov	r1, fp
 8011318:	f7ef f976 	bl	8000608 <__aeabi_dmul>
 801131c:	4b2d      	ldr	r3, [pc, #180]	; (80113d4 <_dtoa_r+0x624>)
 801131e:	4682      	mov	sl, r0
 8011320:	468b      	mov	fp, r1
 8011322:	4640      	mov	r0, r8
 8011324:	4649      	mov	r1, r9
 8011326:	2200      	movs	r2, #0
 8011328:	f7ef f96e 	bl	8000608 <__aeabi_dmul>
 801132c:	4680      	mov	r8, r0
 801132e:	4689      	mov	r9, r1
 8011330:	e7c6      	b.n	80112c0 <_dtoa_r+0x510>
 8011332:	4650      	mov	r0, sl
 8011334:	4659      	mov	r1, fp
 8011336:	f7ef f967 	bl	8000608 <__aeabi_dmul>
 801133a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801133c:	9d01      	ldr	r5, [sp, #4]
 801133e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011340:	4682      	mov	sl, r0
 8011342:	468b      	mov	fp, r1
 8011344:	4649      	mov	r1, r9
 8011346:	4640      	mov	r0, r8
 8011348:	f7ef fc0e 	bl	8000b68 <__aeabi_d2iz>
 801134c:	4606      	mov	r6, r0
 801134e:	f7ef f8f1 	bl	8000534 <__aeabi_i2d>
 8011352:	3630      	adds	r6, #48	; 0x30
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	4640      	mov	r0, r8
 801135a:	4649      	mov	r1, r9
 801135c:	f7ee ff9c 	bl	8000298 <__aeabi_dsub>
 8011360:	f805 6b01 	strb.w	r6, [r5], #1
 8011364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011366:	429d      	cmp	r5, r3
 8011368:	4680      	mov	r8, r0
 801136a:	4689      	mov	r9, r1
 801136c:	f04f 0200 	mov.w	r2, #0
 8011370:	d124      	bne.n	80113bc <_dtoa_r+0x60c>
 8011372:	4b1b      	ldr	r3, [pc, #108]	; (80113e0 <_dtoa_r+0x630>)
 8011374:	4650      	mov	r0, sl
 8011376:	4659      	mov	r1, fp
 8011378:	f7ee ff90 	bl	800029c <__adddf3>
 801137c:	4602      	mov	r2, r0
 801137e:	460b      	mov	r3, r1
 8011380:	4640      	mov	r0, r8
 8011382:	4649      	mov	r1, r9
 8011384:	f7ef fbd0 	bl	8000b28 <__aeabi_dcmpgt>
 8011388:	2800      	cmp	r0, #0
 801138a:	d173      	bne.n	8011474 <_dtoa_r+0x6c4>
 801138c:	4652      	mov	r2, sl
 801138e:	465b      	mov	r3, fp
 8011390:	4913      	ldr	r1, [pc, #76]	; (80113e0 <_dtoa_r+0x630>)
 8011392:	2000      	movs	r0, #0
 8011394:	f7ee ff80 	bl	8000298 <__aeabi_dsub>
 8011398:	4602      	mov	r2, r0
 801139a:	460b      	mov	r3, r1
 801139c:	4640      	mov	r0, r8
 801139e:	4649      	mov	r1, r9
 80113a0:	f7ef fba4 	bl	8000aec <__aeabi_dcmplt>
 80113a4:	2800      	cmp	r0, #0
 80113a6:	f43f af35 	beq.w	8011214 <_dtoa_r+0x464>
 80113aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80113ac:	1e6b      	subs	r3, r5, #1
 80113ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80113b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80113b4:	2b30      	cmp	r3, #48	; 0x30
 80113b6:	d0f8      	beq.n	80113aa <_dtoa_r+0x5fa>
 80113b8:	9700      	str	r7, [sp, #0]
 80113ba:	e049      	b.n	8011450 <_dtoa_r+0x6a0>
 80113bc:	4b05      	ldr	r3, [pc, #20]	; (80113d4 <_dtoa_r+0x624>)
 80113be:	f7ef f923 	bl	8000608 <__aeabi_dmul>
 80113c2:	4680      	mov	r8, r0
 80113c4:	4689      	mov	r9, r1
 80113c6:	e7bd      	b.n	8011344 <_dtoa_r+0x594>
 80113c8:	080165d0 	.word	0x080165d0
 80113cc:	080165a8 	.word	0x080165a8
 80113d0:	3ff00000 	.word	0x3ff00000
 80113d4:	40240000 	.word	0x40240000
 80113d8:	401c0000 	.word	0x401c0000
 80113dc:	40140000 	.word	0x40140000
 80113e0:	3fe00000 	.word	0x3fe00000
 80113e4:	9d01      	ldr	r5, [sp, #4]
 80113e6:	4656      	mov	r6, sl
 80113e8:	465f      	mov	r7, fp
 80113ea:	4642      	mov	r2, r8
 80113ec:	464b      	mov	r3, r9
 80113ee:	4630      	mov	r0, r6
 80113f0:	4639      	mov	r1, r7
 80113f2:	f7ef fa33 	bl	800085c <__aeabi_ddiv>
 80113f6:	f7ef fbb7 	bl	8000b68 <__aeabi_d2iz>
 80113fa:	4682      	mov	sl, r0
 80113fc:	f7ef f89a 	bl	8000534 <__aeabi_i2d>
 8011400:	4642      	mov	r2, r8
 8011402:	464b      	mov	r3, r9
 8011404:	f7ef f900 	bl	8000608 <__aeabi_dmul>
 8011408:	4602      	mov	r2, r0
 801140a:	460b      	mov	r3, r1
 801140c:	4630      	mov	r0, r6
 801140e:	4639      	mov	r1, r7
 8011410:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011414:	f7ee ff40 	bl	8000298 <__aeabi_dsub>
 8011418:	f805 6b01 	strb.w	r6, [r5], #1
 801141c:	9e01      	ldr	r6, [sp, #4]
 801141e:	9f03      	ldr	r7, [sp, #12]
 8011420:	1bae      	subs	r6, r5, r6
 8011422:	42b7      	cmp	r7, r6
 8011424:	4602      	mov	r2, r0
 8011426:	460b      	mov	r3, r1
 8011428:	d135      	bne.n	8011496 <_dtoa_r+0x6e6>
 801142a:	f7ee ff37 	bl	800029c <__adddf3>
 801142e:	4642      	mov	r2, r8
 8011430:	464b      	mov	r3, r9
 8011432:	4606      	mov	r6, r0
 8011434:	460f      	mov	r7, r1
 8011436:	f7ef fb77 	bl	8000b28 <__aeabi_dcmpgt>
 801143a:	b9d0      	cbnz	r0, 8011472 <_dtoa_r+0x6c2>
 801143c:	4642      	mov	r2, r8
 801143e:	464b      	mov	r3, r9
 8011440:	4630      	mov	r0, r6
 8011442:	4639      	mov	r1, r7
 8011444:	f7ef fb48 	bl	8000ad8 <__aeabi_dcmpeq>
 8011448:	b110      	cbz	r0, 8011450 <_dtoa_r+0x6a0>
 801144a:	f01a 0f01 	tst.w	sl, #1
 801144e:	d110      	bne.n	8011472 <_dtoa_r+0x6c2>
 8011450:	4620      	mov	r0, r4
 8011452:	ee18 1a10 	vmov	r1, s16
 8011456:	f000 ff47 	bl	80122e8 <_Bfree>
 801145a:	2300      	movs	r3, #0
 801145c:	9800      	ldr	r0, [sp, #0]
 801145e:	702b      	strb	r3, [r5, #0]
 8011460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011462:	3001      	adds	r0, #1
 8011464:	6018      	str	r0, [r3, #0]
 8011466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011468:	2b00      	cmp	r3, #0
 801146a:	f43f acf1 	beq.w	8010e50 <_dtoa_r+0xa0>
 801146e:	601d      	str	r5, [r3, #0]
 8011470:	e4ee      	b.n	8010e50 <_dtoa_r+0xa0>
 8011472:	9f00      	ldr	r7, [sp, #0]
 8011474:	462b      	mov	r3, r5
 8011476:	461d      	mov	r5, r3
 8011478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801147c:	2a39      	cmp	r2, #57	; 0x39
 801147e:	d106      	bne.n	801148e <_dtoa_r+0x6de>
 8011480:	9a01      	ldr	r2, [sp, #4]
 8011482:	429a      	cmp	r2, r3
 8011484:	d1f7      	bne.n	8011476 <_dtoa_r+0x6c6>
 8011486:	9901      	ldr	r1, [sp, #4]
 8011488:	2230      	movs	r2, #48	; 0x30
 801148a:	3701      	adds	r7, #1
 801148c:	700a      	strb	r2, [r1, #0]
 801148e:	781a      	ldrb	r2, [r3, #0]
 8011490:	3201      	adds	r2, #1
 8011492:	701a      	strb	r2, [r3, #0]
 8011494:	e790      	b.n	80113b8 <_dtoa_r+0x608>
 8011496:	4ba6      	ldr	r3, [pc, #664]	; (8011730 <_dtoa_r+0x980>)
 8011498:	2200      	movs	r2, #0
 801149a:	f7ef f8b5 	bl	8000608 <__aeabi_dmul>
 801149e:	2200      	movs	r2, #0
 80114a0:	2300      	movs	r3, #0
 80114a2:	4606      	mov	r6, r0
 80114a4:	460f      	mov	r7, r1
 80114a6:	f7ef fb17 	bl	8000ad8 <__aeabi_dcmpeq>
 80114aa:	2800      	cmp	r0, #0
 80114ac:	d09d      	beq.n	80113ea <_dtoa_r+0x63a>
 80114ae:	e7cf      	b.n	8011450 <_dtoa_r+0x6a0>
 80114b0:	9a08      	ldr	r2, [sp, #32]
 80114b2:	2a00      	cmp	r2, #0
 80114b4:	f000 80d7 	beq.w	8011666 <_dtoa_r+0x8b6>
 80114b8:	9a06      	ldr	r2, [sp, #24]
 80114ba:	2a01      	cmp	r2, #1
 80114bc:	f300 80ba 	bgt.w	8011634 <_dtoa_r+0x884>
 80114c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80114c2:	2a00      	cmp	r2, #0
 80114c4:	f000 80b2 	beq.w	801162c <_dtoa_r+0x87c>
 80114c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80114cc:	9e07      	ldr	r6, [sp, #28]
 80114ce:	9d04      	ldr	r5, [sp, #16]
 80114d0:	9a04      	ldr	r2, [sp, #16]
 80114d2:	441a      	add	r2, r3
 80114d4:	9204      	str	r2, [sp, #16]
 80114d6:	9a05      	ldr	r2, [sp, #20]
 80114d8:	2101      	movs	r1, #1
 80114da:	441a      	add	r2, r3
 80114dc:	4620      	mov	r0, r4
 80114de:	9205      	str	r2, [sp, #20]
 80114e0:	f001 f804 	bl	80124ec <__i2b>
 80114e4:	4607      	mov	r7, r0
 80114e6:	2d00      	cmp	r5, #0
 80114e8:	dd0c      	ble.n	8011504 <_dtoa_r+0x754>
 80114ea:	9b05      	ldr	r3, [sp, #20]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	dd09      	ble.n	8011504 <_dtoa_r+0x754>
 80114f0:	42ab      	cmp	r3, r5
 80114f2:	9a04      	ldr	r2, [sp, #16]
 80114f4:	bfa8      	it	ge
 80114f6:	462b      	movge	r3, r5
 80114f8:	1ad2      	subs	r2, r2, r3
 80114fa:	9204      	str	r2, [sp, #16]
 80114fc:	9a05      	ldr	r2, [sp, #20]
 80114fe:	1aed      	subs	r5, r5, r3
 8011500:	1ad3      	subs	r3, r2, r3
 8011502:	9305      	str	r3, [sp, #20]
 8011504:	9b07      	ldr	r3, [sp, #28]
 8011506:	b31b      	cbz	r3, 8011550 <_dtoa_r+0x7a0>
 8011508:	9b08      	ldr	r3, [sp, #32]
 801150a:	2b00      	cmp	r3, #0
 801150c:	f000 80af 	beq.w	801166e <_dtoa_r+0x8be>
 8011510:	2e00      	cmp	r6, #0
 8011512:	dd13      	ble.n	801153c <_dtoa_r+0x78c>
 8011514:	4639      	mov	r1, r7
 8011516:	4632      	mov	r2, r6
 8011518:	4620      	mov	r0, r4
 801151a:	f001 f8a7 	bl	801266c <__pow5mult>
 801151e:	ee18 2a10 	vmov	r2, s16
 8011522:	4601      	mov	r1, r0
 8011524:	4607      	mov	r7, r0
 8011526:	4620      	mov	r0, r4
 8011528:	f000 fff6 	bl	8012518 <__multiply>
 801152c:	ee18 1a10 	vmov	r1, s16
 8011530:	4680      	mov	r8, r0
 8011532:	4620      	mov	r0, r4
 8011534:	f000 fed8 	bl	80122e8 <_Bfree>
 8011538:	ee08 8a10 	vmov	s16, r8
 801153c:	9b07      	ldr	r3, [sp, #28]
 801153e:	1b9a      	subs	r2, r3, r6
 8011540:	d006      	beq.n	8011550 <_dtoa_r+0x7a0>
 8011542:	ee18 1a10 	vmov	r1, s16
 8011546:	4620      	mov	r0, r4
 8011548:	f001 f890 	bl	801266c <__pow5mult>
 801154c:	ee08 0a10 	vmov	s16, r0
 8011550:	2101      	movs	r1, #1
 8011552:	4620      	mov	r0, r4
 8011554:	f000 ffca 	bl	80124ec <__i2b>
 8011558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801155a:	2b00      	cmp	r3, #0
 801155c:	4606      	mov	r6, r0
 801155e:	f340 8088 	ble.w	8011672 <_dtoa_r+0x8c2>
 8011562:	461a      	mov	r2, r3
 8011564:	4601      	mov	r1, r0
 8011566:	4620      	mov	r0, r4
 8011568:	f001 f880 	bl	801266c <__pow5mult>
 801156c:	9b06      	ldr	r3, [sp, #24]
 801156e:	2b01      	cmp	r3, #1
 8011570:	4606      	mov	r6, r0
 8011572:	f340 8081 	ble.w	8011678 <_dtoa_r+0x8c8>
 8011576:	f04f 0800 	mov.w	r8, #0
 801157a:	6933      	ldr	r3, [r6, #16]
 801157c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011580:	6918      	ldr	r0, [r3, #16]
 8011582:	f000 ff63 	bl	801244c <__hi0bits>
 8011586:	f1c0 0020 	rsb	r0, r0, #32
 801158a:	9b05      	ldr	r3, [sp, #20]
 801158c:	4418      	add	r0, r3
 801158e:	f010 001f 	ands.w	r0, r0, #31
 8011592:	f000 8092 	beq.w	80116ba <_dtoa_r+0x90a>
 8011596:	f1c0 0320 	rsb	r3, r0, #32
 801159a:	2b04      	cmp	r3, #4
 801159c:	f340 808a 	ble.w	80116b4 <_dtoa_r+0x904>
 80115a0:	f1c0 001c 	rsb	r0, r0, #28
 80115a4:	9b04      	ldr	r3, [sp, #16]
 80115a6:	4403      	add	r3, r0
 80115a8:	9304      	str	r3, [sp, #16]
 80115aa:	9b05      	ldr	r3, [sp, #20]
 80115ac:	4403      	add	r3, r0
 80115ae:	4405      	add	r5, r0
 80115b0:	9305      	str	r3, [sp, #20]
 80115b2:	9b04      	ldr	r3, [sp, #16]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	dd07      	ble.n	80115c8 <_dtoa_r+0x818>
 80115b8:	ee18 1a10 	vmov	r1, s16
 80115bc:	461a      	mov	r2, r3
 80115be:	4620      	mov	r0, r4
 80115c0:	f001 f8ae 	bl	8012720 <__lshift>
 80115c4:	ee08 0a10 	vmov	s16, r0
 80115c8:	9b05      	ldr	r3, [sp, #20]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	dd05      	ble.n	80115da <_dtoa_r+0x82a>
 80115ce:	4631      	mov	r1, r6
 80115d0:	461a      	mov	r2, r3
 80115d2:	4620      	mov	r0, r4
 80115d4:	f001 f8a4 	bl	8012720 <__lshift>
 80115d8:	4606      	mov	r6, r0
 80115da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d06e      	beq.n	80116be <_dtoa_r+0x90e>
 80115e0:	ee18 0a10 	vmov	r0, s16
 80115e4:	4631      	mov	r1, r6
 80115e6:	f001 f90b 	bl	8012800 <__mcmp>
 80115ea:	2800      	cmp	r0, #0
 80115ec:	da67      	bge.n	80116be <_dtoa_r+0x90e>
 80115ee:	9b00      	ldr	r3, [sp, #0]
 80115f0:	3b01      	subs	r3, #1
 80115f2:	ee18 1a10 	vmov	r1, s16
 80115f6:	9300      	str	r3, [sp, #0]
 80115f8:	220a      	movs	r2, #10
 80115fa:	2300      	movs	r3, #0
 80115fc:	4620      	mov	r0, r4
 80115fe:	f000 fe95 	bl	801232c <__multadd>
 8011602:	9b08      	ldr	r3, [sp, #32]
 8011604:	ee08 0a10 	vmov	s16, r0
 8011608:	2b00      	cmp	r3, #0
 801160a:	f000 81b1 	beq.w	8011970 <_dtoa_r+0xbc0>
 801160e:	2300      	movs	r3, #0
 8011610:	4639      	mov	r1, r7
 8011612:	220a      	movs	r2, #10
 8011614:	4620      	mov	r0, r4
 8011616:	f000 fe89 	bl	801232c <__multadd>
 801161a:	9b02      	ldr	r3, [sp, #8]
 801161c:	2b00      	cmp	r3, #0
 801161e:	4607      	mov	r7, r0
 8011620:	f300 808e 	bgt.w	8011740 <_dtoa_r+0x990>
 8011624:	9b06      	ldr	r3, [sp, #24]
 8011626:	2b02      	cmp	r3, #2
 8011628:	dc51      	bgt.n	80116ce <_dtoa_r+0x91e>
 801162a:	e089      	b.n	8011740 <_dtoa_r+0x990>
 801162c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801162e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011632:	e74b      	b.n	80114cc <_dtoa_r+0x71c>
 8011634:	9b03      	ldr	r3, [sp, #12]
 8011636:	1e5e      	subs	r6, r3, #1
 8011638:	9b07      	ldr	r3, [sp, #28]
 801163a:	42b3      	cmp	r3, r6
 801163c:	bfbf      	itttt	lt
 801163e:	9b07      	ldrlt	r3, [sp, #28]
 8011640:	9607      	strlt	r6, [sp, #28]
 8011642:	1af2      	sublt	r2, r6, r3
 8011644:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011646:	bfb6      	itet	lt
 8011648:	189b      	addlt	r3, r3, r2
 801164a:	1b9e      	subge	r6, r3, r6
 801164c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801164e:	9b03      	ldr	r3, [sp, #12]
 8011650:	bfb8      	it	lt
 8011652:	2600      	movlt	r6, #0
 8011654:	2b00      	cmp	r3, #0
 8011656:	bfb7      	itett	lt
 8011658:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801165c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011660:	1a9d      	sublt	r5, r3, r2
 8011662:	2300      	movlt	r3, #0
 8011664:	e734      	b.n	80114d0 <_dtoa_r+0x720>
 8011666:	9e07      	ldr	r6, [sp, #28]
 8011668:	9d04      	ldr	r5, [sp, #16]
 801166a:	9f08      	ldr	r7, [sp, #32]
 801166c:	e73b      	b.n	80114e6 <_dtoa_r+0x736>
 801166e:	9a07      	ldr	r2, [sp, #28]
 8011670:	e767      	b.n	8011542 <_dtoa_r+0x792>
 8011672:	9b06      	ldr	r3, [sp, #24]
 8011674:	2b01      	cmp	r3, #1
 8011676:	dc18      	bgt.n	80116aa <_dtoa_r+0x8fa>
 8011678:	f1ba 0f00 	cmp.w	sl, #0
 801167c:	d115      	bne.n	80116aa <_dtoa_r+0x8fa>
 801167e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011682:	b993      	cbnz	r3, 80116aa <_dtoa_r+0x8fa>
 8011684:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011688:	0d1b      	lsrs	r3, r3, #20
 801168a:	051b      	lsls	r3, r3, #20
 801168c:	b183      	cbz	r3, 80116b0 <_dtoa_r+0x900>
 801168e:	9b04      	ldr	r3, [sp, #16]
 8011690:	3301      	adds	r3, #1
 8011692:	9304      	str	r3, [sp, #16]
 8011694:	9b05      	ldr	r3, [sp, #20]
 8011696:	3301      	adds	r3, #1
 8011698:	9305      	str	r3, [sp, #20]
 801169a:	f04f 0801 	mov.w	r8, #1
 801169e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	f47f af6a 	bne.w	801157a <_dtoa_r+0x7ca>
 80116a6:	2001      	movs	r0, #1
 80116a8:	e76f      	b.n	801158a <_dtoa_r+0x7da>
 80116aa:	f04f 0800 	mov.w	r8, #0
 80116ae:	e7f6      	b.n	801169e <_dtoa_r+0x8ee>
 80116b0:	4698      	mov	r8, r3
 80116b2:	e7f4      	b.n	801169e <_dtoa_r+0x8ee>
 80116b4:	f43f af7d 	beq.w	80115b2 <_dtoa_r+0x802>
 80116b8:	4618      	mov	r0, r3
 80116ba:	301c      	adds	r0, #28
 80116bc:	e772      	b.n	80115a4 <_dtoa_r+0x7f4>
 80116be:	9b03      	ldr	r3, [sp, #12]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	dc37      	bgt.n	8011734 <_dtoa_r+0x984>
 80116c4:	9b06      	ldr	r3, [sp, #24]
 80116c6:	2b02      	cmp	r3, #2
 80116c8:	dd34      	ble.n	8011734 <_dtoa_r+0x984>
 80116ca:	9b03      	ldr	r3, [sp, #12]
 80116cc:	9302      	str	r3, [sp, #8]
 80116ce:	9b02      	ldr	r3, [sp, #8]
 80116d0:	b96b      	cbnz	r3, 80116ee <_dtoa_r+0x93e>
 80116d2:	4631      	mov	r1, r6
 80116d4:	2205      	movs	r2, #5
 80116d6:	4620      	mov	r0, r4
 80116d8:	f000 fe28 	bl	801232c <__multadd>
 80116dc:	4601      	mov	r1, r0
 80116de:	4606      	mov	r6, r0
 80116e0:	ee18 0a10 	vmov	r0, s16
 80116e4:	f001 f88c 	bl	8012800 <__mcmp>
 80116e8:	2800      	cmp	r0, #0
 80116ea:	f73f adbb 	bgt.w	8011264 <_dtoa_r+0x4b4>
 80116ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116f0:	9d01      	ldr	r5, [sp, #4]
 80116f2:	43db      	mvns	r3, r3
 80116f4:	9300      	str	r3, [sp, #0]
 80116f6:	f04f 0800 	mov.w	r8, #0
 80116fa:	4631      	mov	r1, r6
 80116fc:	4620      	mov	r0, r4
 80116fe:	f000 fdf3 	bl	80122e8 <_Bfree>
 8011702:	2f00      	cmp	r7, #0
 8011704:	f43f aea4 	beq.w	8011450 <_dtoa_r+0x6a0>
 8011708:	f1b8 0f00 	cmp.w	r8, #0
 801170c:	d005      	beq.n	801171a <_dtoa_r+0x96a>
 801170e:	45b8      	cmp	r8, r7
 8011710:	d003      	beq.n	801171a <_dtoa_r+0x96a>
 8011712:	4641      	mov	r1, r8
 8011714:	4620      	mov	r0, r4
 8011716:	f000 fde7 	bl	80122e8 <_Bfree>
 801171a:	4639      	mov	r1, r7
 801171c:	4620      	mov	r0, r4
 801171e:	f000 fde3 	bl	80122e8 <_Bfree>
 8011722:	e695      	b.n	8011450 <_dtoa_r+0x6a0>
 8011724:	2600      	movs	r6, #0
 8011726:	4637      	mov	r7, r6
 8011728:	e7e1      	b.n	80116ee <_dtoa_r+0x93e>
 801172a:	9700      	str	r7, [sp, #0]
 801172c:	4637      	mov	r7, r6
 801172e:	e599      	b.n	8011264 <_dtoa_r+0x4b4>
 8011730:	40240000 	.word	0x40240000
 8011734:	9b08      	ldr	r3, [sp, #32]
 8011736:	2b00      	cmp	r3, #0
 8011738:	f000 80ca 	beq.w	80118d0 <_dtoa_r+0xb20>
 801173c:	9b03      	ldr	r3, [sp, #12]
 801173e:	9302      	str	r3, [sp, #8]
 8011740:	2d00      	cmp	r5, #0
 8011742:	dd05      	ble.n	8011750 <_dtoa_r+0x9a0>
 8011744:	4639      	mov	r1, r7
 8011746:	462a      	mov	r2, r5
 8011748:	4620      	mov	r0, r4
 801174a:	f000 ffe9 	bl	8012720 <__lshift>
 801174e:	4607      	mov	r7, r0
 8011750:	f1b8 0f00 	cmp.w	r8, #0
 8011754:	d05b      	beq.n	801180e <_dtoa_r+0xa5e>
 8011756:	6879      	ldr	r1, [r7, #4]
 8011758:	4620      	mov	r0, r4
 801175a:	f000 fd85 	bl	8012268 <_Balloc>
 801175e:	4605      	mov	r5, r0
 8011760:	b928      	cbnz	r0, 801176e <_dtoa_r+0x9be>
 8011762:	4b87      	ldr	r3, [pc, #540]	; (8011980 <_dtoa_r+0xbd0>)
 8011764:	4602      	mov	r2, r0
 8011766:	f240 21ea 	movw	r1, #746	; 0x2ea
 801176a:	f7ff bb3b 	b.w	8010de4 <_dtoa_r+0x34>
 801176e:	693a      	ldr	r2, [r7, #16]
 8011770:	3202      	adds	r2, #2
 8011772:	0092      	lsls	r2, r2, #2
 8011774:	f107 010c 	add.w	r1, r7, #12
 8011778:	300c      	adds	r0, #12
 801177a:	f7fd fbb4 	bl	800eee6 <memcpy>
 801177e:	2201      	movs	r2, #1
 8011780:	4629      	mov	r1, r5
 8011782:	4620      	mov	r0, r4
 8011784:	f000 ffcc 	bl	8012720 <__lshift>
 8011788:	9b01      	ldr	r3, [sp, #4]
 801178a:	f103 0901 	add.w	r9, r3, #1
 801178e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011792:	4413      	add	r3, r2
 8011794:	9305      	str	r3, [sp, #20]
 8011796:	f00a 0301 	and.w	r3, sl, #1
 801179a:	46b8      	mov	r8, r7
 801179c:	9304      	str	r3, [sp, #16]
 801179e:	4607      	mov	r7, r0
 80117a0:	4631      	mov	r1, r6
 80117a2:	ee18 0a10 	vmov	r0, s16
 80117a6:	f7ff fa75 	bl	8010c94 <quorem>
 80117aa:	4641      	mov	r1, r8
 80117ac:	9002      	str	r0, [sp, #8]
 80117ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80117b2:	ee18 0a10 	vmov	r0, s16
 80117b6:	f001 f823 	bl	8012800 <__mcmp>
 80117ba:	463a      	mov	r2, r7
 80117bc:	9003      	str	r0, [sp, #12]
 80117be:	4631      	mov	r1, r6
 80117c0:	4620      	mov	r0, r4
 80117c2:	f001 f839 	bl	8012838 <__mdiff>
 80117c6:	68c2      	ldr	r2, [r0, #12]
 80117c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80117cc:	4605      	mov	r5, r0
 80117ce:	bb02      	cbnz	r2, 8011812 <_dtoa_r+0xa62>
 80117d0:	4601      	mov	r1, r0
 80117d2:	ee18 0a10 	vmov	r0, s16
 80117d6:	f001 f813 	bl	8012800 <__mcmp>
 80117da:	4602      	mov	r2, r0
 80117dc:	4629      	mov	r1, r5
 80117de:	4620      	mov	r0, r4
 80117e0:	9207      	str	r2, [sp, #28]
 80117e2:	f000 fd81 	bl	80122e8 <_Bfree>
 80117e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80117ea:	ea43 0102 	orr.w	r1, r3, r2
 80117ee:	9b04      	ldr	r3, [sp, #16]
 80117f0:	430b      	orrs	r3, r1
 80117f2:	464d      	mov	r5, r9
 80117f4:	d10f      	bne.n	8011816 <_dtoa_r+0xa66>
 80117f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80117fa:	d02a      	beq.n	8011852 <_dtoa_r+0xaa2>
 80117fc:	9b03      	ldr	r3, [sp, #12]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	dd02      	ble.n	8011808 <_dtoa_r+0xa58>
 8011802:	9b02      	ldr	r3, [sp, #8]
 8011804:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011808:	f88b a000 	strb.w	sl, [fp]
 801180c:	e775      	b.n	80116fa <_dtoa_r+0x94a>
 801180e:	4638      	mov	r0, r7
 8011810:	e7ba      	b.n	8011788 <_dtoa_r+0x9d8>
 8011812:	2201      	movs	r2, #1
 8011814:	e7e2      	b.n	80117dc <_dtoa_r+0xa2c>
 8011816:	9b03      	ldr	r3, [sp, #12]
 8011818:	2b00      	cmp	r3, #0
 801181a:	db04      	blt.n	8011826 <_dtoa_r+0xa76>
 801181c:	9906      	ldr	r1, [sp, #24]
 801181e:	430b      	orrs	r3, r1
 8011820:	9904      	ldr	r1, [sp, #16]
 8011822:	430b      	orrs	r3, r1
 8011824:	d122      	bne.n	801186c <_dtoa_r+0xabc>
 8011826:	2a00      	cmp	r2, #0
 8011828:	ddee      	ble.n	8011808 <_dtoa_r+0xa58>
 801182a:	ee18 1a10 	vmov	r1, s16
 801182e:	2201      	movs	r2, #1
 8011830:	4620      	mov	r0, r4
 8011832:	f000 ff75 	bl	8012720 <__lshift>
 8011836:	4631      	mov	r1, r6
 8011838:	ee08 0a10 	vmov	s16, r0
 801183c:	f000 ffe0 	bl	8012800 <__mcmp>
 8011840:	2800      	cmp	r0, #0
 8011842:	dc03      	bgt.n	801184c <_dtoa_r+0xa9c>
 8011844:	d1e0      	bne.n	8011808 <_dtoa_r+0xa58>
 8011846:	f01a 0f01 	tst.w	sl, #1
 801184a:	d0dd      	beq.n	8011808 <_dtoa_r+0xa58>
 801184c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011850:	d1d7      	bne.n	8011802 <_dtoa_r+0xa52>
 8011852:	2339      	movs	r3, #57	; 0x39
 8011854:	f88b 3000 	strb.w	r3, [fp]
 8011858:	462b      	mov	r3, r5
 801185a:	461d      	mov	r5, r3
 801185c:	3b01      	subs	r3, #1
 801185e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011862:	2a39      	cmp	r2, #57	; 0x39
 8011864:	d071      	beq.n	801194a <_dtoa_r+0xb9a>
 8011866:	3201      	adds	r2, #1
 8011868:	701a      	strb	r2, [r3, #0]
 801186a:	e746      	b.n	80116fa <_dtoa_r+0x94a>
 801186c:	2a00      	cmp	r2, #0
 801186e:	dd07      	ble.n	8011880 <_dtoa_r+0xad0>
 8011870:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011874:	d0ed      	beq.n	8011852 <_dtoa_r+0xaa2>
 8011876:	f10a 0301 	add.w	r3, sl, #1
 801187a:	f88b 3000 	strb.w	r3, [fp]
 801187e:	e73c      	b.n	80116fa <_dtoa_r+0x94a>
 8011880:	9b05      	ldr	r3, [sp, #20]
 8011882:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011886:	4599      	cmp	r9, r3
 8011888:	d047      	beq.n	801191a <_dtoa_r+0xb6a>
 801188a:	ee18 1a10 	vmov	r1, s16
 801188e:	2300      	movs	r3, #0
 8011890:	220a      	movs	r2, #10
 8011892:	4620      	mov	r0, r4
 8011894:	f000 fd4a 	bl	801232c <__multadd>
 8011898:	45b8      	cmp	r8, r7
 801189a:	ee08 0a10 	vmov	s16, r0
 801189e:	f04f 0300 	mov.w	r3, #0
 80118a2:	f04f 020a 	mov.w	r2, #10
 80118a6:	4641      	mov	r1, r8
 80118a8:	4620      	mov	r0, r4
 80118aa:	d106      	bne.n	80118ba <_dtoa_r+0xb0a>
 80118ac:	f000 fd3e 	bl	801232c <__multadd>
 80118b0:	4680      	mov	r8, r0
 80118b2:	4607      	mov	r7, r0
 80118b4:	f109 0901 	add.w	r9, r9, #1
 80118b8:	e772      	b.n	80117a0 <_dtoa_r+0x9f0>
 80118ba:	f000 fd37 	bl	801232c <__multadd>
 80118be:	4639      	mov	r1, r7
 80118c0:	4680      	mov	r8, r0
 80118c2:	2300      	movs	r3, #0
 80118c4:	220a      	movs	r2, #10
 80118c6:	4620      	mov	r0, r4
 80118c8:	f000 fd30 	bl	801232c <__multadd>
 80118cc:	4607      	mov	r7, r0
 80118ce:	e7f1      	b.n	80118b4 <_dtoa_r+0xb04>
 80118d0:	9b03      	ldr	r3, [sp, #12]
 80118d2:	9302      	str	r3, [sp, #8]
 80118d4:	9d01      	ldr	r5, [sp, #4]
 80118d6:	ee18 0a10 	vmov	r0, s16
 80118da:	4631      	mov	r1, r6
 80118dc:	f7ff f9da 	bl	8010c94 <quorem>
 80118e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80118e4:	9b01      	ldr	r3, [sp, #4]
 80118e6:	f805 ab01 	strb.w	sl, [r5], #1
 80118ea:	1aea      	subs	r2, r5, r3
 80118ec:	9b02      	ldr	r3, [sp, #8]
 80118ee:	4293      	cmp	r3, r2
 80118f0:	dd09      	ble.n	8011906 <_dtoa_r+0xb56>
 80118f2:	ee18 1a10 	vmov	r1, s16
 80118f6:	2300      	movs	r3, #0
 80118f8:	220a      	movs	r2, #10
 80118fa:	4620      	mov	r0, r4
 80118fc:	f000 fd16 	bl	801232c <__multadd>
 8011900:	ee08 0a10 	vmov	s16, r0
 8011904:	e7e7      	b.n	80118d6 <_dtoa_r+0xb26>
 8011906:	9b02      	ldr	r3, [sp, #8]
 8011908:	2b00      	cmp	r3, #0
 801190a:	bfc8      	it	gt
 801190c:	461d      	movgt	r5, r3
 801190e:	9b01      	ldr	r3, [sp, #4]
 8011910:	bfd8      	it	le
 8011912:	2501      	movle	r5, #1
 8011914:	441d      	add	r5, r3
 8011916:	f04f 0800 	mov.w	r8, #0
 801191a:	ee18 1a10 	vmov	r1, s16
 801191e:	2201      	movs	r2, #1
 8011920:	4620      	mov	r0, r4
 8011922:	f000 fefd 	bl	8012720 <__lshift>
 8011926:	4631      	mov	r1, r6
 8011928:	ee08 0a10 	vmov	s16, r0
 801192c:	f000 ff68 	bl	8012800 <__mcmp>
 8011930:	2800      	cmp	r0, #0
 8011932:	dc91      	bgt.n	8011858 <_dtoa_r+0xaa8>
 8011934:	d102      	bne.n	801193c <_dtoa_r+0xb8c>
 8011936:	f01a 0f01 	tst.w	sl, #1
 801193a:	d18d      	bne.n	8011858 <_dtoa_r+0xaa8>
 801193c:	462b      	mov	r3, r5
 801193e:	461d      	mov	r5, r3
 8011940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011944:	2a30      	cmp	r2, #48	; 0x30
 8011946:	d0fa      	beq.n	801193e <_dtoa_r+0xb8e>
 8011948:	e6d7      	b.n	80116fa <_dtoa_r+0x94a>
 801194a:	9a01      	ldr	r2, [sp, #4]
 801194c:	429a      	cmp	r2, r3
 801194e:	d184      	bne.n	801185a <_dtoa_r+0xaaa>
 8011950:	9b00      	ldr	r3, [sp, #0]
 8011952:	3301      	adds	r3, #1
 8011954:	9300      	str	r3, [sp, #0]
 8011956:	2331      	movs	r3, #49	; 0x31
 8011958:	7013      	strb	r3, [r2, #0]
 801195a:	e6ce      	b.n	80116fa <_dtoa_r+0x94a>
 801195c:	4b09      	ldr	r3, [pc, #36]	; (8011984 <_dtoa_r+0xbd4>)
 801195e:	f7ff ba95 	b.w	8010e8c <_dtoa_r+0xdc>
 8011962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011964:	2b00      	cmp	r3, #0
 8011966:	f47f aa6e 	bne.w	8010e46 <_dtoa_r+0x96>
 801196a:	4b07      	ldr	r3, [pc, #28]	; (8011988 <_dtoa_r+0xbd8>)
 801196c:	f7ff ba8e 	b.w	8010e8c <_dtoa_r+0xdc>
 8011970:	9b02      	ldr	r3, [sp, #8]
 8011972:	2b00      	cmp	r3, #0
 8011974:	dcae      	bgt.n	80118d4 <_dtoa_r+0xb24>
 8011976:	9b06      	ldr	r3, [sp, #24]
 8011978:	2b02      	cmp	r3, #2
 801197a:	f73f aea8 	bgt.w	80116ce <_dtoa_r+0x91e>
 801197e:	e7a9      	b.n	80118d4 <_dtoa_r+0xb24>
 8011980:	080164c0 	.word	0x080164c0
 8011984:	080162c4 	.word	0x080162c4
 8011988:	08016441 	.word	0x08016441

0801198c <__sflush_r>:
 801198c:	898a      	ldrh	r2, [r1, #12]
 801198e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011992:	4605      	mov	r5, r0
 8011994:	0710      	lsls	r0, r2, #28
 8011996:	460c      	mov	r4, r1
 8011998:	d458      	bmi.n	8011a4c <__sflush_r+0xc0>
 801199a:	684b      	ldr	r3, [r1, #4]
 801199c:	2b00      	cmp	r3, #0
 801199e:	dc05      	bgt.n	80119ac <__sflush_r+0x20>
 80119a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	dc02      	bgt.n	80119ac <__sflush_r+0x20>
 80119a6:	2000      	movs	r0, #0
 80119a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119ae:	2e00      	cmp	r6, #0
 80119b0:	d0f9      	beq.n	80119a6 <__sflush_r+0x1a>
 80119b2:	2300      	movs	r3, #0
 80119b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80119b8:	682f      	ldr	r7, [r5, #0]
 80119ba:	602b      	str	r3, [r5, #0]
 80119bc:	d032      	beq.n	8011a24 <__sflush_r+0x98>
 80119be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80119c0:	89a3      	ldrh	r3, [r4, #12]
 80119c2:	075a      	lsls	r2, r3, #29
 80119c4:	d505      	bpl.n	80119d2 <__sflush_r+0x46>
 80119c6:	6863      	ldr	r3, [r4, #4]
 80119c8:	1ac0      	subs	r0, r0, r3
 80119ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119cc:	b10b      	cbz	r3, 80119d2 <__sflush_r+0x46>
 80119ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80119d0:	1ac0      	subs	r0, r0, r3
 80119d2:	2300      	movs	r3, #0
 80119d4:	4602      	mov	r2, r0
 80119d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119d8:	6a21      	ldr	r1, [r4, #32]
 80119da:	4628      	mov	r0, r5
 80119dc:	47b0      	blx	r6
 80119de:	1c43      	adds	r3, r0, #1
 80119e0:	89a3      	ldrh	r3, [r4, #12]
 80119e2:	d106      	bne.n	80119f2 <__sflush_r+0x66>
 80119e4:	6829      	ldr	r1, [r5, #0]
 80119e6:	291d      	cmp	r1, #29
 80119e8:	d82c      	bhi.n	8011a44 <__sflush_r+0xb8>
 80119ea:	4a2a      	ldr	r2, [pc, #168]	; (8011a94 <__sflush_r+0x108>)
 80119ec:	40ca      	lsrs	r2, r1
 80119ee:	07d6      	lsls	r6, r2, #31
 80119f0:	d528      	bpl.n	8011a44 <__sflush_r+0xb8>
 80119f2:	2200      	movs	r2, #0
 80119f4:	6062      	str	r2, [r4, #4]
 80119f6:	04d9      	lsls	r1, r3, #19
 80119f8:	6922      	ldr	r2, [r4, #16]
 80119fa:	6022      	str	r2, [r4, #0]
 80119fc:	d504      	bpl.n	8011a08 <__sflush_r+0x7c>
 80119fe:	1c42      	adds	r2, r0, #1
 8011a00:	d101      	bne.n	8011a06 <__sflush_r+0x7a>
 8011a02:	682b      	ldr	r3, [r5, #0]
 8011a04:	b903      	cbnz	r3, 8011a08 <__sflush_r+0x7c>
 8011a06:	6560      	str	r0, [r4, #84]	; 0x54
 8011a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a0a:	602f      	str	r7, [r5, #0]
 8011a0c:	2900      	cmp	r1, #0
 8011a0e:	d0ca      	beq.n	80119a6 <__sflush_r+0x1a>
 8011a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a14:	4299      	cmp	r1, r3
 8011a16:	d002      	beq.n	8011a1e <__sflush_r+0x92>
 8011a18:	4628      	mov	r0, r5
 8011a1a:	f001 f8fd 	bl	8012c18 <_free_r>
 8011a1e:	2000      	movs	r0, #0
 8011a20:	6360      	str	r0, [r4, #52]	; 0x34
 8011a22:	e7c1      	b.n	80119a8 <__sflush_r+0x1c>
 8011a24:	6a21      	ldr	r1, [r4, #32]
 8011a26:	2301      	movs	r3, #1
 8011a28:	4628      	mov	r0, r5
 8011a2a:	47b0      	blx	r6
 8011a2c:	1c41      	adds	r1, r0, #1
 8011a2e:	d1c7      	bne.n	80119c0 <__sflush_r+0x34>
 8011a30:	682b      	ldr	r3, [r5, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d0c4      	beq.n	80119c0 <__sflush_r+0x34>
 8011a36:	2b1d      	cmp	r3, #29
 8011a38:	d001      	beq.n	8011a3e <__sflush_r+0xb2>
 8011a3a:	2b16      	cmp	r3, #22
 8011a3c:	d101      	bne.n	8011a42 <__sflush_r+0xb6>
 8011a3e:	602f      	str	r7, [r5, #0]
 8011a40:	e7b1      	b.n	80119a6 <__sflush_r+0x1a>
 8011a42:	89a3      	ldrh	r3, [r4, #12]
 8011a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a48:	81a3      	strh	r3, [r4, #12]
 8011a4a:	e7ad      	b.n	80119a8 <__sflush_r+0x1c>
 8011a4c:	690f      	ldr	r7, [r1, #16]
 8011a4e:	2f00      	cmp	r7, #0
 8011a50:	d0a9      	beq.n	80119a6 <__sflush_r+0x1a>
 8011a52:	0793      	lsls	r3, r2, #30
 8011a54:	680e      	ldr	r6, [r1, #0]
 8011a56:	bf08      	it	eq
 8011a58:	694b      	ldreq	r3, [r1, #20]
 8011a5a:	600f      	str	r7, [r1, #0]
 8011a5c:	bf18      	it	ne
 8011a5e:	2300      	movne	r3, #0
 8011a60:	eba6 0807 	sub.w	r8, r6, r7
 8011a64:	608b      	str	r3, [r1, #8]
 8011a66:	f1b8 0f00 	cmp.w	r8, #0
 8011a6a:	dd9c      	ble.n	80119a6 <__sflush_r+0x1a>
 8011a6c:	6a21      	ldr	r1, [r4, #32]
 8011a6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011a70:	4643      	mov	r3, r8
 8011a72:	463a      	mov	r2, r7
 8011a74:	4628      	mov	r0, r5
 8011a76:	47b0      	blx	r6
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	dc06      	bgt.n	8011a8a <__sflush_r+0xfe>
 8011a7c:	89a3      	ldrh	r3, [r4, #12]
 8011a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a82:	81a3      	strh	r3, [r4, #12]
 8011a84:	f04f 30ff 	mov.w	r0, #4294967295
 8011a88:	e78e      	b.n	80119a8 <__sflush_r+0x1c>
 8011a8a:	4407      	add	r7, r0
 8011a8c:	eba8 0800 	sub.w	r8, r8, r0
 8011a90:	e7e9      	b.n	8011a66 <__sflush_r+0xda>
 8011a92:	bf00      	nop
 8011a94:	20400001 	.word	0x20400001

08011a98 <_fflush_r>:
 8011a98:	b538      	push	{r3, r4, r5, lr}
 8011a9a:	690b      	ldr	r3, [r1, #16]
 8011a9c:	4605      	mov	r5, r0
 8011a9e:	460c      	mov	r4, r1
 8011aa0:	b913      	cbnz	r3, 8011aa8 <_fflush_r+0x10>
 8011aa2:	2500      	movs	r5, #0
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	bd38      	pop	{r3, r4, r5, pc}
 8011aa8:	b118      	cbz	r0, 8011ab2 <_fflush_r+0x1a>
 8011aaa:	6983      	ldr	r3, [r0, #24]
 8011aac:	b90b      	cbnz	r3, 8011ab2 <_fflush_r+0x1a>
 8011aae:	f7fd f955 	bl	800ed5c <__sinit>
 8011ab2:	4b14      	ldr	r3, [pc, #80]	; (8011b04 <_fflush_r+0x6c>)
 8011ab4:	429c      	cmp	r4, r3
 8011ab6:	d11b      	bne.n	8011af0 <_fflush_r+0x58>
 8011ab8:	686c      	ldr	r4, [r5, #4]
 8011aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d0ef      	beq.n	8011aa2 <_fflush_r+0xa>
 8011ac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ac4:	07d0      	lsls	r0, r2, #31
 8011ac6:	d404      	bmi.n	8011ad2 <_fflush_r+0x3a>
 8011ac8:	0599      	lsls	r1, r3, #22
 8011aca:	d402      	bmi.n	8011ad2 <_fflush_r+0x3a>
 8011acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ace:	f7fd fa08 	bl	800eee2 <__retarget_lock_acquire_recursive>
 8011ad2:	4628      	mov	r0, r5
 8011ad4:	4621      	mov	r1, r4
 8011ad6:	f7ff ff59 	bl	801198c <__sflush_r>
 8011ada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011adc:	07da      	lsls	r2, r3, #31
 8011ade:	4605      	mov	r5, r0
 8011ae0:	d4e0      	bmi.n	8011aa4 <_fflush_r+0xc>
 8011ae2:	89a3      	ldrh	r3, [r4, #12]
 8011ae4:	059b      	lsls	r3, r3, #22
 8011ae6:	d4dd      	bmi.n	8011aa4 <_fflush_r+0xc>
 8011ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011aea:	f7fd f9fb 	bl	800eee4 <__retarget_lock_release_recursive>
 8011aee:	e7d9      	b.n	8011aa4 <_fflush_r+0xc>
 8011af0:	4b05      	ldr	r3, [pc, #20]	; (8011b08 <_fflush_r+0x70>)
 8011af2:	429c      	cmp	r4, r3
 8011af4:	d101      	bne.n	8011afa <_fflush_r+0x62>
 8011af6:	68ac      	ldr	r4, [r5, #8]
 8011af8:	e7df      	b.n	8011aba <_fflush_r+0x22>
 8011afa:	4b04      	ldr	r3, [pc, #16]	; (8011b0c <_fflush_r+0x74>)
 8011afc:	429c      	cmp	r4, r3
 8011afe:	bf08      	it	eq
 8011b00:	68ec      	ldreq	r4, [r5, #12]
 8011b02:	e7da      	b.n	8011aba <_fflush_r+0x22>
 8011b04:	08016270 	.word	0x08016270
 8011b08:	08016290 	.word	0x08016290
 8011b0c:	08016250 	.word	0x08016250

08011b10 <rshift>:
 8011b10:	6903      	ldr	r3, [r0, #16]
 8011b12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011b16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011b1e:	f100 0414 	add.w	r4, r0, #20
 8011b22:	dd45      	ble.n	8011bb0 <rshift+0xa0>
 8011b24:	f011 011f 	ands.w	r1, r1, #31
 8011b28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011b2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011b30:	d10c      	bne.n	8011b4c <rshift+0x3c>
 8011b32:	f100 0710 	add.w	r7, r0, #16
 8011b36:	4629      	mov	r1, r5
 8011b38:	42b1      	cmp	r1, r6
 8011b3a:	d334      	bcc.n	8011ba6 <rshift+0x96>
 8011b3c:	1a9b      	subs	r3, r3, r2
 8011b3e:	009b      	lsls	r3, r3, #2
 8011b40:	1eea      	subs	r2, r5, #3
 8011b42:	4296      	cmp	r6, r2
 8011b44:	bf38      	it	cc
 8011b46:	2300      	movcc	r3, #0
 8011b48:	4423      	add	r3, r4
 8011b4a:	e015      	b.n	8011b78 <rshift+0x68>
 8011b4c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011b50:	f1c1 0820 	rsb	r8, r1, #32
 8011b54:	40cf      	lsrs	r7, r1
 8011b56:	f105 0e04 	add.w	lr, r5, #4
 8011b5a:	46a1      	mov	r9, r4
 8011b5c:	4576      	cmp	r6, lr
 8011b5e:	46f4      	mov	ip, lr
 8011b60:	d815      	bhi.n	8011b8e <rshift+0x7e>
 8011b62:	1a9a      	subs	r2, r3, r2
 8011b64:	0092      	lsls	r2, r2, #2
 8011b66:	3a04      	subs	r2, #4
 8011b68:	3501      	adds	r5, #1
 8011b6a:	42ae      	cmp	r6, r5
 8011b6c:	bf38      	it	cc
 8011b6e:	2200      	movcc	r2, #0
 8011b70:	18a3      	adds	r3, r4, r2
 8011b72:	50a7      	str	r7, [r4, r2]
 8011b74:	b107      	cbz	r7, 8011b78 <rshift+0x68>
 8011b76:	3304      	adds	r3, #4
 8011b78:	1b1a      	subs	r2, r3, r4
 8011b7a:	42a3      	cmp	r3, r4
 8011b7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011b80:	bf08      	it	eq
 8011b82:	2300      	moveq	r3, #0
 8011b84:	6102      	str	r2, [r0, #16]
 8011b86:	bf08      	it	eq
 8011b88:	6143      	streq	r3, [r0, #20]
 8011b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b8e:	f8dc c000 	ldr.w	ip, [ip]
 8011b92:	fa0c fc08 	lsl.w	ip, ip, r8
 8011b96:	ea4c 0707 	orr.w	r7, ip, r7
 8011b9a:	f849 7b04 	str.w	r7, [r9], #4
 8011b9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011ba2:	40cf      	lsrs	r7, r1
 8011ba4:	e7da      	b.n	8011b5c <rshift+0x4c>
 8011ba6:	f851 cb04 	ldr.w	ip, [r1], #4
 8011baa:	f847 cf04 	str.w	ip, [r7, #4]!
 8011bae:	e7c3      	b.n	8011b38 <rshift+0x28>
 8011bb0:	4623      	mov	r3, r4
 8011bb2:	e7e1      	b.n	8011b78 <rshift+0x68>

08011bb4 <__hexdig_fun>:
 8011bb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011bb8:	2b09      	cmp	r3, #9
 8011bba:	d802      	bhi.n	8011bc2 <__hexdig_fun+0xe>
 8011bbc:	3820      	subs	r0, #32
 8011bbe:	b2c0      	uxtb	r0, r0
 8011bc0:	4770      	bx	lr
 8011bc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011bc6:	2b05      	cmp	r3, #5
 8011bc8:	d801      	bhi.n	8011bce <__hexdig_fun+0x1a>
 8011bca:	3847      	subs	r0, #71	; 0x47
 8011bcc:	e7f7      	b.n	8011bbe <__hexdig_fun+0xa>
 8011bce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011bd2:	2b05      	cmp	r3, #5
 8011bd4:	d801      	bhi.n	8011bda <__hexdig_fun+0x26>
 8011bd6:	3827      	subs	r0, #39	; 0x27
 8011bd8:	e7f1      	b.n	8011bbe <__hexdig_fun+0xa>
 8011bda:	2000      	movs	r0, #0
 8011bdc:	4770      	bx	lr
	...

08011be0 <__gethex>:
 8011be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be4:	ed2d 8b02 	vpush	{d8}
 8011be8:	b089      	sub	sp, #36	; 0x24
 8011bea:	ee08 0a10 	vmov	s16, r0
 8011bee:	9304      	str	r3, [sp, #16]
 8011bf0:	4bb4      	ldr	r3, [pc, #720]	; (8011ec4 <__gethex+0x2e4>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	9301      	str	r3, [sp, #4]
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	468b      	mov	fp, r1
 8011bfa:	4690      	mov	r8, r2
 8011bfc:	f7ee faf0 	bl	80001e0 <strlen>
 8011c00:	9b01      	ldr	r3, [sp, #4]
 8011c02:	f8db 2000 	ldr.w	r2, [fp]
 8011c06:	4403      	add	r3, r0
 8011c08:	4682      	mov	sl, r0
 8011c0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011c0e:	9305      	str	r3, [sp, #20]
 8011c10:	1c93      	adds	r3, r2, #2
 8011c12:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011c16:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011c1a:	32fe      	adds	r2, #254	; 0xfe
 8011c1c:	18d1      	adds	r1, r2, r3
 8011c1e:	461f      	mov	r7, r3
 8011c20:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011c24:	9100      	str	r1, [sp, #0]
 8011c26:	2830      	cmp	r0, #48	; 0x30
 8011c28:	d0f8      	beq.n	8011c1c <__gethex+0x3c>
 8011c2a:	f7ff ffc3 	bl	8011bb4 <__hexdig_fun>
 8011c2e:	4604      	mov	r4, r0
 8011c30:	2800      	cmp	r0, #0
 8011c32:	d13a      	bne.n	8011caa <__gethex+0xca>
 8011c34:	9901      	ldr	r1, [sp, #4]
 8011c36:	4652      	mov	r2, sl
 8011c38:	4638      	mov	r0, r7
 8011c3a:	f001 f9b1 	bl	8012fa0 <strncmp>
 8011c3e:	4605      	mov	r5, r0
 8011c40:	2800      	cmp	r0, #0
 8011c42:	d168      	bne.n	8011d16 <__gethex+0x136>
 8011c44:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011c48:	eb07 060a 	add.w	r6, r7, sl
 8011c4c:	f7ff ffb2 	bl	8011bb4 <__hexdig_fun>
 8011c50:	2800      	cmp	r0, #0
 8011c52:	d062      	beq.n	8011d1a <__gethex+0x13a>
 8011c54:	4633      	mov	r3, r6
 8011c56:	7818      	ldrb	r0, [r3, #0]
 8011c58:	2830      	cmp	r0, #48	; 0x30
 8011c5a:	461f      	mov	r7, r3
 8011c5c:	f103 0301 	add.w	r3, r3, #1
 8011c60:	d0f9      	beq.n	8011c56 <__gethex+0x76>
 8011c62:	f7ff ffa7 	bl	8011bb4 <__hexdig_fun>
 8011c66:	2301      	movs	r3, #1
 8011c68:	fab0 f480 	clz	r4, r0
 8011c6c:	0964      	lsrs	r4, r4, #5
 8011c6e:	4635      	mov	r5, r6
 8011c70:	9300      	str	r3, [sp, #0]
 8011c72:	463a      	mov	r2, r7
 8011c74:	4616      	mov	r6, r2
 8011c76:	3201      	adds	r2, #1
 8011c78:	7830      	ldrb	r0, [r6, #0]
 8011c7a:	f7ff ff9b 	bl	8011bb4 <__hexdig_fun>
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	d1f8      	bne.n	8011c74 <__gethex+0x94>
 8011c82:	9901      	ldr	r1, [sp, #4]
 8011c84:	4652      	mov	r2, sl
 8011c86:	4630      	mov	r0, r6
 8011c88:	f001 f98a 	bl	8012fa0 <strncmp>
 8011c8c:	b980      	cbnz	r0, 8011cb0 <__gethex+0xd0>
 8011c8e:	b94d      	cbnz	r5, 8011ca4 <__gethex+0xc4>
 8011c90:	eb06 050a 	add.w	r5, r6, sl
 8011c94:	462a      	mov	r2, r5
 8011c96:	4616      	mov	r6, r2
 8011c98:	3201      	adds	r2, #1
 8011c9a:	7830      	ldrb	r0, [r6, #0]
 8011c9c:	f7ff ff8a 	bl	8011bb4 <__hexdig_fun>
 8011ca0:	2800      	cmp	r0, #0
 8011ca2:	d1f8      	bne.n	8011c96 <__gethex+0xb6>
 8011ca4:	1bad      	subs	r5, r5, r6
 8011ca6:	00ad      	lsls	r5, r5, #2
 8011ca8:	e004      	b.n	8011cb4 <__gethex+0xd4>
 8011caa:	2400      	movs	r4, #0
 8011cac:	4625      	mov	r5, r4
 8011cae:	e7e0      	b.n	8011c72 <__gethex+0x92>
 8011cb0:	2d00      	cmp	r5, #0
 8011cb2:	d1f7      	bne.n	8011ca4 <__gethex+0xc4>
 8011cb4:	7833      	ldrb	r3, [r6, #0]
 8011cb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011cba:	2b50      	cmp	r3, #80	; 0x50
 8011cbc:	d13b      	bne.n	8011d36 <__gethex+0x156>
 8011cbe:	7873      	ldrb	r3, [r6, #1]
 8011cc0:	2b2b      	cmp	r3, #43	; 0x2b
 8011cc2:	d02c      	beq.n	8011d1e <__gethex+0x13e>
 8011cc4:	2b2d      	cmp	r3, #45	; 0x2d
 8011cc6:	d02e      	beq.n	8011d26 <__gethex+0x146>
 8011cc8:	1c71      	adds	r1, r6, #1
 8011cca:	f04f 0900 	mov.w	r9, #0
 8011cce:	7808      	ldrb	r0, [r1, #0]
 8011cd0:	f7ff ff70 	bl	8011bb4 <__hexdig_fun>
 8011cd4:	1e43      	subs	r3, r0, #1
 8011cd6:	b2db      	uxtb	r3, r3
 8011cd8:	2b18      	cmp	r3, #24
 8011cda:	d82c      	bhi.n	8011d36 <__gethex+0x156>
 8011cdc:	f1a0 0210 	sub.w	r2, r0, #16
 8011ce0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011ce4:	f7ff ff66 	bl	8011bb4 <__hexdig_fun>
 8011ce8:	1e43      	subs	r3, r0, #1
 8011cea:	b2db      	uxtb	r3, r3
 8011cec:	2b18      	cmp	r3, #24
 8011cee:	d91d      	bls.n	8011d2c <__gethex+0x14c>
 8011cf0:	f1b9 0f00 	cmp.w	r9, #0
 8011cf4:	d000      	beq.n	8011cf8 <__gethex+0x118>
 8011cf6:	4252      	negs	r2, r2
 8011cf8:	4415      	add	r5, r2
 8011cfa:	f8cb 1000 	str.w	r1, [fp]
 8011cfe:	b1e4      	cbz	r4, 8011d3a <__gethex+0x15a>
 8011d00:	9b00      	ldr	r3, [sp, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	bf14      	ite	ne
 8011d06:	2700      	movne	r7, #0
 8011d08:	2706      	moveq	r7, #6
 8011d0a:	4638      	mov	r0, r7
 8011d0c:	b009      	add	sp, #36	; 0x24
 8011d0e:	ecbd 8b02 	vpop	{d8}
 8011d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d16:	463e      	mov	r6, r7
 8011d18:	4625      	mov	r5, r4
 8011d1a:	2401      	movs	r4, #1
 8011d1c:	e7ca      	b.n	8011cb4 <__gethex+0xd4>
 8011d1e:	f04f 0900 	mov.w	r9, #0
 8011d22:	1cb1      	adds	r1, r6, #2
 8011d24:	e7d3      	b.n	8011cce <__gethex+0xee>
 8011d26:	f04f 0901 	mov.w	r9, #1
 8011d2a:	e7fa      	b.n	8011d22 <__gethex+0x142>
 8011d2c:	230a      	movs	r3, #10
 8011d2e:	fb03 0202 	mla	r2, r3, r2, r0
 8011d32:	3a10      	subs	r2, #16
 8011d34:	e7d4      	b.n	8011ce0 <__gethex+0x100>
 8011d36:	4631      	mov	r1, r6
 8011d38:	e7df      	b.n	8011cfa <__gethex+0x11a>
 8011d3a:	1bf3      	subs	r3, r6, r7
 8011d3c:	3b01      	subs	r3, #1
 8011d3e:	4621      	mov	r1, r4
 8011d40:	2b07      	cmp	r3, #7
 8011d42:	dc0b      	bgt.n	8011d5c <__gethex+0x17c>
 8011d44:	ee18 0a10 	vmov	r0, s16
 8011d48:	f000 fa8e 	bl	8012268 <_Balloc>
 8011d4c:	4604      	mov	r4, r0
 8011d4e:	b940      	cbnz	r0, 8011d62 <__gethex+0x182>
 8011d50:	4b5d      	ldr	r3, [pc, #372]	; (8011ec8 <__gethex+0x2e8>)
 8011d52:	4602      	mov	r2, r0
 8011d54:	21de      	movs	r1, #222	; 0xde
 8011d56:	485d      	ldr	r0, [pc, #372]	; (8011ecc <__gethex+0x2ec>)
 8011d58:	f001 f944 	bl	8012fe4 <__assert_func>
 8011d5c:	3101      	adds	r1, #1
 8011d5e:	105b      	asrs	r3, r3, #1
 8011d60:	e7ee      	b.n	8011d40 <__gethex+0x160>
 8011d62:	f100 0914 	add.w	r9, r0, #20
 8011d66:	f04f 0b00 	mov.w	fp, #0
 8011d6a:	f1ca 0301 	rsb	r3, sl, #1
 8011d6e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011d72:	f8cd b000 	str.w	fp, [sp]
 8011d76:	9306      	str	r3, [sp, #24]
 8011d78:	42b7      	cmp	r7, r6
 8011d7a:	d340      	bcc.n	8011dfe <__gethex+0x21e>
 8011d7c:	9802      	ldr	r0, [sp, #8]
 8011d7e:	9b00      	ldr	r3, [sp, #0]
 8011d80:	f840 3b04 	str.w	r3, [r0], #4
 8011d84:	eba0 0009 	sub.w	r0, r0, r9
 8011d88:	1080      	asrs	r0, r0, #2
 8011d8a:	0146      	lsls	r6, r0, #5
 8011d8c:	6120      	str	r0, [r4, #16]
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f000 fb5c 	bl	801244c <__hi0bits>
 8011d94:	1a30      	subs	r0, r6, r0
 8011d96:	f8d8 6000 	ldr.w	r6, [r8]
 8011d9a:	42b0      	cmp	r0, r6
 8011d9c:	dd63      	ble.n	8011e66 <__gethex+0x286>
 8011d9e:	1b87      	subs	r7, r0, r6
 8011da0:	4639      	mov	r1, r7
 8011da2:	4620      	mov	r0, r4
 8011da4:	f000 ff00 	bl	8012ba8 <__any_on>
 8011da8:	4682      	mov	sl, r0
 8011daa:	b1a8      	cbz	r0, 8011dd8 <__gethex+0x1f8>
 8011dac:	1e7b      	subs	r3, r7, #1
 8011dae:	1159      	asrs	r1, r3, #5
 8011db0:	f003 021f 	and.w	r2, r3, #31
 8011db4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011db8:	f04f 0a01 	mov.w	sl, #1
 8011dbc:	fa0a f202 	lsl.w	r2, sl, r2
 8011dc0:	420a      	tst	r2, r1
 8011dc2:	d009      	beq.n	8011dd8 <__gethex+0x1f8>
 8011dc4:	4553      	cmp	r3, sl
 8011dc6:	dd05      	ble.n	8011dd4 <__gethex+0x1f4>
 8011dc8:	1eb9      	subs	r1, r7, #2
 8011dca:	4620      	mov	r0, r4
 8011dcc:	f000 feec 	bl	8012ba8 <__any_on>
 8011dd0:	2800      	cmp	r0, #0
 8011dd2:	d145      	bne.n	8011e60 <__gethex+0x280>
 8011dd4:	f04f 0a02 	mov.w	sl, #2
 8011dd8:	4639      	mov	r1, r7
 8011dda:	4620      	mov	r0, r4
 8011ddc:	f7ff fe98 	bl	8011b10 <rshift>
 8011de0:	443d      	add	r5, r7
 8011de2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011de6:	42ab      	cmp	r3, r5
 8011de8:	da4c      	bge.n	8011e84 <__gethex+0x2a4>
 8011dea:	ee18 0a10 	vmov	r0, s16
 8011dee:	4621      	mov	r1, r4
 8011df0:	f000 fa7a 	bl	80122e8 <_Bfree>
 8011df4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011df6:	2300      	movs	r3, #0
 8011df8:	6013      	str	r3, [r2, #0]
 8011dfa:	27a3      	movs	r7, #163	; 0xa3
 8011dfc:	e785      	b.n	8011d0a <__gethex+0x12a>
 8011dfe:	1e73      	subs	r3, r6, #1
 8011e00:	9a05      	ldr	r2, [sp, #20]
 8011e02:	9303      	str	r3, [sp, #12]
 8011e04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011e08:	4293      	cmp	r3, r2
 8011e0a:	d019      	beq.n	8011e40 <__gethex+0x260>
 8011e0c:	f1bb 0f20 	cmp.w	fp, #32
 8011e10:	d107      	bne.n	8011e22 <__gethex+0x242>
 8011e12:	9b02      	ldr	r3, [sp, #8]
 8011e14:	9a00      	ldr	r2, [sp, #0]
 8011e16:	f843 2b04 	str.w	r2, [r3], #4
 8011e1a:	9302      	str	r3, [sp, #8]
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	9300      	str	r3, [sp, #0]
 8011e20:	469b      	mov	fp, r3
 8011e22:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011e26:	f7ff fec5 	bl	8011bb4 <__hexdig_fun>
 8011e2a:	9b00      	ldr	r3, [sp, #0]
 8011e2c:	f000 000f 	and.w	r0, r0, #15
 8011e30:	fa00 f00b 	lsl.w	r0, r0, fp
 8011e34:	4303      	orrs	r3, r0
 8011e36:	9300      	str	r3, [sp, #0]
 8011e38:	f10b 0b04 	add.w	fp, fp, #4
 8011e3c:	9b03      	ldr	r3, [sp, #12]
 8011e3e:	e00d      	b.n	8011e5c <__gethex+0x27c>
 8011e40:	9b03      	ldr	r3, [sp, #12]
 8011e42:	9a06      	ldr	r2, [sp, #24]
 8011e44:	4413      	add	r3, r2
 8011e46:	42bb      	cmp	r3, r7
 8011e48:	d3e0      	bcc.n	8011e0c <__gethex+0x22c>
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	9901      	ldr	r1, [sp, #4]
 8011e4e:	9307      	str	r3, [sp, #28]
 8011e50:	4652      	mov	r2, sl
 8011e52:	f001 f8a5 	bl	8012fa0 <strncmp>
 8011e56:	9b07      	ldr	r3, [sp, #28]
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	d1d7      	bne.n	8011e0c <__gethex+0x22c>
 8011e5c:	461e      	mov	r6, r3
 8011e5e:	e78b      	b.n	8011d78 <__gethex+0x198>
 8011e60:	f04f 0a03 	mov.w	sl, #3
 8011e64:	e7b8      	b.n	8011dd8 <__gethex+0x1f8>
 8011e66:	da0a      	bge.n	8011e7e <__gethex+0x29e>
 8011e68:	1a37      	subs	r7, r6, r0
 8011e6a:	4621      	mov	r1, r4
 8011e6c:	ee18 0a10 	vmov	r0, s16
 8011e70:	463a      	mov	r2, r7
 8011e72:	f000 fc55 	bl	8012720 <__lshift>
 8011e76:	1bed      	subs	r5, r5, r7
 8011e78:	4604      	mov	r4, r0
 8011e7a:	f100 0914 	add.w	r9, r0, #20
 8011e7e:	f04f 0a00 	mov.w	sl, #0
 8011e82:	e7ae      	b.n	8011de2 <__gethex+0x202>
 8011e84:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011e88:	42a8      	cmp	r0, r5
 8011e8a:	dd72      	ble.n	8011f72 <__gethex+0x392>
 8011e8c:	1b45      	subs	r5, r0, r5
 8011e8e:	42ae      	cmp	r6, r5
 8011e90:	dc36      	bgt.n	8011f00 <__gethex+0x320>
 8011e92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011e96:	2b02      	cmp	r3, #2
 8011e98:	d02a      	beq.n	8011ef0 <__gethex+0x310>
 8011e9a:	2b03      	cmp	r3, #3
 8011e9c:	d02c      	beq.n	8011ef8 <__gethex+0x318>
 8011e9e:	2b01      	cmp	r3, #1
 8011ea0:	d11c      	bne.n	8011edc <__gethex+0x2fc>
 8011ea2:	42ae      	cmp	r6, r5
 8011ea4:	d11a      	bne.n	8011edc <__gethex+0x2fc>
 8011ea6:	2e01      	cmp	r6, #1
 8011ea8:	d112      	bne.n	8011ed0 <__gethex+0x2f0>
 8011eaa:	9a04      	ldr	r2, [sp, #16]
 8011eac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011eb0:	6013      	str	r3, [r2, #0]
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	6123      	str	r3, [r4, #16]
 8011eb6:	f8c9 3000 	str.w	r3, [r9]
 8011eba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011ebc:	2762      	movs	r7, #98	; 0x62
 8011ebe:	601c      	str	r4, [r3, #0]
 8011ec0:	e723      	b.n	8011d0a <__gethex+0x12a>
 8011ec2:	bf00      	nop
 8011ec4:	08016538 	.word	0x08016538
 8011ec8:	080164c0 	.word	0x080164c0
 8011ecc:	080164d1 	.word	0x080164d1
 8011ed0:	1e71      	subs	r1, r6, #1
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	f000 fe68 	bl	8012ba8 <__any_on>
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	d1e6      	bne.n	8011eaa <__gethex+0x2ca>
 8011edc:	ee18 0a10 	vmov	r0, s16
 8011ee0:	4621      	mov	r1, r4
 8011ee2:	f000 fa01 	bl	80122e8 <_Bfree>
 8011ee6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011ee8:	2300      	movs	r3, #0
 8011eea:	6013      	str	r3, [r2, #0]
 8011eec:	2750      	movs	r7, #80	; 0x50
 8011eee:	e70c      	b.n	8011d0a <__gethex+0x12a>
 8011ef0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d1f2      	bne.n	8011edc <__gethex+0x2fc>
 8011ef6:	e7d8      	b.n	8011eaa <__gethex+0x2ca>
 8011ef8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d1d5      	bne.n	8011eaa <__gethex+0x2ca>
 8011efe:	e7ed      	b.n	8011edc <__gethex+0x2fc>
 8011f00:	1e6f      	subs	r7, r5, #1
 8011f02:	f1ba 0f00 	cmp.w	sl, #0
 8011f06:	d131      	bne.n	8011f6c <__gethex+0x38c>
 8011f08:	b127      	cbz	r7, 8011f14 <__gethex+0x334>
 8011f0a:	4639      	mov	r1, r7
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	f000 fe4b 	bl	8012ba8 <__any_on>
 8011f12:	4682      	mov	sl, r0
 8011f14:	117b      	asrs	r3, r7, #5
 8011f16:	2101      	movs	r1, #1
 8011f18:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011f1c:	f007 071f 	and.w	r7, r7, #31
 8011f20:	fa01 f707 	lsl.w	r7, r1, r7
 8011f24:	421f      	tst	r7, r3
 8011f26:	4629      	mov	r1, r5
 8011f28:	4620      	mov	r0, r4
 8011f2a:	bf18      	it	ne
 8011f2c:	f04a 0a02 	orrne.w	sl, sl, #2
 8011f30:	1b76      	subs	r6, r6, r5
 8011f32:	f7ff fded 	bl	8011b10 <rshift>
 8011f36:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011f3a:	2702      	movs	r7, #2
 8011f3c:	f1ba 0f00 	cmp.w	sl, #0
 8011f40:	d048      	beq.n	8011fd4 <__gethex+0x3f4>
 8011f42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011f46:	2b02      	cmp	r3, #2
 8011f48:	d015      	beq.n	8011f76 <__gethex+0x396>
 8011f4a:	2b03      	cmp	r3, #3
 8011f4c:	d017      	beq.n	8011f7e <__gethex+0x39e>
 8011f4e:	2b01      	cmp	r3, #1
 8011f50:	d109      	bne.n	8011f66 <__gethex+0x386>
 8011f52:	f01a 0f02 	tst.w	sl, #2
 8011f56:	d006      	beq.n	8011f66 <__gethex+0x386>
 8011f58:	f8d9 0000 	ldr.w	r0, [r9]
 8011f5c:	ea4a 0a00 	orr.w	sl, sl, r0
 8011f60:	f01a 0f01 	tst.w	sl, #1
 8011f64:	d10e      	bne.n	8011f84 <__gethex+0x3a4>
 8011f66:	f047 0710 	orr.w	r7, r7, #16
 8011f6a:	e033      	b.n	8011fd4 <__gethex+0x3f4>
 8011f6c:	f04f 0a01 	mov.w	sl, #1
 8011f70:	e7d0      	b.n	8011f14 <__gethex+0x334>
 8011f72:	2701      	movs	r7, #1
 8011f74:	e7e2      	b.n	8011f3c <__gethex+0x35c>
 8011f76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f78:	f1c3 0301 	rsb	r3, r3, #1
 8011f7c:	9315      	str	r3, [sp, #84]	; 0x54
 8011f7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d0f0      	beq.n	8011f66 <__gethex+0x386>
 8011f84:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011f88:	f104 0314 	add.w	r3, r4, #20
 8011f8c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011f90:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011f94:	f04f 0c00 	mov.w	ip, #0
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f9e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011fa2:	d01c      	beq.n	8011fde <__gethex+0x3fe>
 8011fa4:	3201      	adds	r2, #1
 8011fa6:	6002      	str	r2, [r0, #0]
 8011fa8:	2f02      	cmp	r7, #2
 8011faa:	f104 0314 	add.w	r3, r4, #20
 8011fae:	d13f      	bne.n	8012030 <__gethex+0x450>
 8011fb0:	f8d8 2000 	ldr.w	r2, [r8]
 8011fb4:	3a01      	subs	r2, #1
 8011fb6:	42b2      	cmp	r2, r6
 8011fb8:	d10a      	bne.n	8011fd0 <__gethex+0x3f0>
 8011fba:	1171      	asrs	r1, r6, #5
 8011fbc:	2201      	movs	r2, #1
 8011fbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011fc2:	f006 061f 	and.w	r6, r6, #31
 8011fc6:	fa02 f606 	lsl.w	r6, r2, r6
 8011fca:	421e      	tst	r6, r3
 8011fcc:	bf18      	it	ne
 8011fce:	4617      	movne	r7, r2
 8011fd0:	f047 0720 	orr.w	r7, r7, #32
 8011fd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011fd6:	601c      	str	r4, [r3, #0]
 8011fd8:	9b04      	ldr	r3, [sp, #16]
 8011fda:	601d      	str	r5, [r3, #0]
 8011fdc:	e695      	b.n	8011d0a <__gethex+0x12a>
 8011fde:	4299      	cmp	r1, r3
 8011fe0:	f843 cc04 	str.w	ip, [r3, #-4]
 8011fe4:	d8d8      	bhi.n	8011f98 <__gethex+0x3b8>
 8011fe6:	68a3      	ldr	r3, [r4, #8]
 8011fe8:	459b      	cmp	fp, r3
 8011fea:	db19      	blt.n	8012020 <__gethex+0x440>
 8011fec:	6861      	ldr	r1, [r4, #4]
 8011fee:	ee18 0a10 	vmov	r0, s16
 8011ff2:	3101      	adds	r1, #1
 8011ff4:	f000 f938 	bl	8012268 <_Balloc>
 8011ff8:	4681      	mov	r9, r0
 8011ffa:	b918      	cbnz	r0, 8012004 <__gethex+0x424>
 8011ffc:	4b1a      	ldr	r3, [pc, #104]	; (8012068 <__gethex+0x488>)
 8011ffe:	4602      	mov	r2, r0
 8012000:	2184      	movs	r1, #132	; 0x84
 8012002:	e6a8      	b.n	8011d56 <__gethex+0x176>
 8012004:	6922      	ldr	r2, [r4, #16]
 8012006:	3202      	adds	r2, #2
 8012008:	f104 010c 	add.w	r1, r4, #12
 801200c:	0092      	lsls	r2, r2, #2
 801200e:	300c      	adds	r0, #12
 8012010:	f7fc ff69 	bl	800eee6 <memcpy>
 8012014:	4621      	mov	r1, r4
 8012016:	ee18 0a10 	vmov	r0, s16
 801201a:	f000 f965 	bl	80122e8 <_Bfree>
 801201e:	464c      	mov	r4, r9
 8012020:	6923      	ldr	r3, [r4, #16]
 8012022:	1c5a      	adds	r2, r3, #1
 8012024:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012028:	6122      	str	r2, [r4, #16]
 801202a:	2201      	movs	r2, #1
 801202c:	615a      	str	r2, [r3, #20]
 801202e:	e7bb      	b.n	8011fa8 <__gethex+0x3c8>
 8012030:	6922      	ldr	r2, [r4, #16]
 8012032:	455a      	cmp	r2, fp
 8012034:	dd0b      	ble.n	801204e <__gethex+0x46e>
 8012036:	2101      	movs	r1, #1
 8012038:	4620      	mov	r0, r4
 801203a:	f7ff fd69 	bl	8011b10 <rshift>
 801203e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012042:	3501      	adds	r5, #1
 8012044:	42ab      	cmp	r3, r5
 8012046:	f6ff aed0 	blt.w	8011dea <__gethex+0x20a>
 801204a:	2701      	movs	r7, #1
 801204c:	e7c0      	b.n	8011fd0 <__gethex+0x3f0>
 801204e:	f016 061f 	ands.w	r6, r6, #31
 8012052:	d0fa      	beq.n	801204a <__gethex+0x46a>
 8012054:	4453      	add	r3, sl
 8012056:	f1c6 0620 	rsb	r6, r6, #32
 801205a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801205e:	f000 f9f5 	bl	801244c <__hi0bits>
 8012062:	42b0      	cmp	r0, r6
 8012064:	dbe7      	blt.n	8012036 <__gethex+0x456>
 8012066:	e7f0      	b.n	801204a <__gethex+0x46a>
 8012068:	080164c0 	.word	0x080164c0

0801206c <L_shift>:
 801206c:	f1c2 0208 	rsb	r2, r2, #8
 8012070:	0092      	lsls	r2, r2, #2
 8012072:	b570      	push	{r4, r5, r6, lr}
 8012074:	f1c2 0620 	rsb	r6, r2, #32
 8012078:	6843      	ldr	r3, [r0, #4]
 801207a:	6804      	ldr	r4, [r0, #0]
 801207c:	fa03 f506 	lsl.w	r5, r3, r6
 8012080:	432c      	orrs	r4, r5
 8012082:	40d3      	lsrs	r3, r2
 8012084:	6004      	str	r4, [r0, #0]
 8012086:	f840 3f04 	str.w	r3, [r0, #4]!
 801208a:	4288      	cmp	r0, r1
 801208c:	d3f4      	bcc.n	8012078 <L_shift+0xc>
 801208e:	bd70      	pop	{r4, r5, r6, pc}

08012090 <__match>:
 8012090:	b530      	push	{r4, r5, lr}
 8012092:	6803      	ldr	r3, [r0, #0]
 8012094:	3301      	adds	r3, #1
 8012096:	f811 4b01 	ldrb.w	r4, [r1], #1
 801209a:	b914      	cbnz	r4, 80120a2 <__match+0x12>
 801209c:	6003      	str	r3, [r0, #0]
 801209e:	2001      	movs	r0, #1
 80120a0:	bd30      	pop	{r4, r5, pc}
 80120a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80120aa:	2d19      	cmp	r5, #25
 80120ac:	bf98      	it	ls
 80120ae:	3220      	addls	r2, #32
 80120b0:	42a2      	cmp	r2, r4
 80120b2:	d0f0      	beq.n	8012096 <__match+0x6>
 80120b4:	2000      	movs	r0, #0
 80120b6:	e7f3      	b.n	80120a0 <__match+0x10>

080120b8 <__hexnan>:
 80120b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120bc:	680b      	ldr	r3, [r1, #0]
 80120be:	115e      	asrs	r6, r3, #5
 80120c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80120c4:	f013 031f 	ands.w	r3, r3, #31
 80120c8:	b087      	sub	sp, #28
 80120ca:	bf18      	it	ne
 80120cc:	3604      	addne	r6, #4
 80120ce:	2500      	movs	r5, #0
 80120d0:	1f37      	subs	r7, r6, #4
 80120d2:	4690      	mov	r8, r2
 80120d4:	6802      	ldr	r2, [r0, #0]
 80120d6:	9301      	str	r3, [sp, #4]
 80120d8:	4682      	mov	sl, r0
 80120da:	f846 5c04 	str.w	r5, [r6, #-4]
 80120de:	46b9      	mov	r9, r7
 80120e0:	463c      	mov	r4, r7
 80120e2:	9502      	str	r5, [sp, #8]
 80120e4:	46ab      	mov	fp, r5
 80120e6:	7851      	ldrb	r1, [r2, #1]
 80120e8:	1c53      	adds	r3, r2, #1
 80120ea:	9303      	str	r3, [sp, #12]
 80120ec:	b341      	cbz	r1, 8012140 <__hexnan+0x88>
 80120ee:	4608      	mov	r0, r1
 80120f0:	9205      	str	r2, [sp, #20]
 80120f2:	9104      	str	r1, [sp, #16]
 80120f4:	f7ff fd5e 	bl	8011bb4 <__hexdig_fun>
 80120f8:	2800      	cmp	r0, #0
 80120fa:	d14f      	bne.n	801219c <__hexnan+0xe4>
 80120fc:	9904      	ldr	r1, [sp, #16]
 80120fe:	9a05      	ldr	r2, [sp, #20]
 8012100:	2920      	cmp	r1, #32
 8012102:	d818      	bhi.n	8012136 <__hexnan+0x7e>
 8012104:	9b02      	ldr	r3, [sp, #8]
 8012106:	459b      	cmp	fp, r3
 8012108:	dd13      	ble.n	8012132 <__hexnan+0x7a>
 801210a:	454c      	cmp	r4, r9
 801210c:	d206      	bcs.n	801211c <__hexnan+0x64>
 801210e:	2d07      	cmp	r5, #7
 8012110:	dc04      	bgt.n	801211c <__hexnan+0x64>
 8012112:	462a      	mov	r2, r5
 8012114:	4649      	mov	r1, r9
 8012116:	4620      	mov	r0, r4
 8012118:	f7ff ffa8 	bl	801206c <L_shift>
 801211c:	4544      	cmp	r4, r8
 801211e:	d950      	bls.n	80121c2 <__hexnan+0x10a>
 8012120:	2300      	movs	r3, #0
 8012122:	f1a4 0904 	sub.w	r9, r4, #4
 8012126:	f844 3c04 	str.w	r3, [r4, #-4]
 801212a:	f8cd b008 	str.w	fp, [sp, #8]
 801212e:	464c      	mov	r4, r9
 8012130:	461d      	mov	r5, r3
 8012132:	9a03      	ldr	r2, [sp, #12]
 8012134:	e7d7      	b.n	80120e6 <__hexnan+0x2e>
 8012136:	2929      	cmp	r1, #41	; 0x29
 8012138:	d156      	bne.n	80121e8 <__hexnan+0x130>
 801213a:	3202      	adds	r2, #2
 801213c:	f8ca 2000 	str.w	r2, [sl]
 8012140:	f1bb 0f00 	cmp.w	fp, #0
 8012144:	d050      	beq.n	80121e8 <__hexnan+0x130>
 8012146:	454c      	cmp	r4, r9
 8012148:	d206      	bcs.n	8012158 <__hexnan+0xa0>
 801214a:	2d07      	cmp	r5, #7
 801214c:	dc04      	bgt.n	8012158 <__hexnan+0xa0>
 801214e:	462a      	mov	r2, r5
 8012150:	4649      	mov	r1, r9
 8012152:	4620      	mov	r0, r4
 8012154:	f7ff ff8a 	bl	801206c <L_shift>
 8012158:	4544      	cmp	r4, r8
 801215a:	d934      	bls.n	80121c6 <__hexnan+0x10e>
 801215c:	f1a8 0204 	sub.w	r2, r8, #4
 8012160:	4623      	mov	r3, r4
 8012162:	f853 1b04 	ldr.w	r1, [r3], #4
 8012166:	f842 1f04 	str.w	r1, [r2, #4]!
 801216a:	429f      	cmp	r7, r3
 801216c:	d2f9      	bcs.n	8012162 <__hexnan+0xaa>
 801216e:	1b3b      	subs	r3, r7, r4
 8012170:	f023 0303 	bic.w	r3, r3, #3
 8012174:	3304      	adds	r3, #4
 8012176:	3401      	adds	r4, #1
 8012178:	3e03      	subs	r6, #3
 801217a:	42b4      	cmp	r4, r6
 801217c:	bf88      	it	hi
 801217e:	2304      	movhi	r3, #4
 8012180:	4443      	add	r3, r8
 8012182:	2200      	movs	r2, #0
 8012184:	f843 2b04 	str.w	r2, [r3], #4
 8012188:	429f      	cmp	r7, r3
 801218a:	d2fb      	bcs.n	8012184 <__hexnan+0xcc>
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	b91b      	cbnz	r3, 8012198 <__hexnan+0xe0>
 8012190:	4547      	cmp	r7, r8
 8012192:	d127      	bne.n	80121e4 <__hexnan+0x12c>
 8012194:	2301      	movs	r3, #1
 8012196:	603b      	str	r3, [r7, #0]
 8012198:	2005      	movs	r0, #5
 801219a:	e026      	b.n	80121ea <__hexnan+0x132>
 801219c:	3501      	adds	r5, #1
 801219e:	2d08      	cmp	r5, #8
 80121a0:	f10b 0b01 	add.w	fp, fp, #1
 80121a4:	dd06      	ble.n	80121b4 <__hexnan+0xfc>
 80121a6:	4544      	cmp	r4, r8
 80121a8:	d9c3      	bls.n	8012132 <__hexnan+0x7a>
 80121aa:	2300      	movs	r3, #0
 80121ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80121b0:	2501      	movs	r5, #1
 80121b2:	3c04      	subs	r4, #4
 80121b4:	6822      	ldr	r2, [r4, #0]
 80121b6:	f000 000f 	and.w	r0, r0, #15
 80121ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80121be:	6022      	str	r2, [r4, #0]
 80121c0:	e7b7      	b.n	8012132 <__hexnan+0x7a>
 80121c2:	2508      	movs	r5, #8
 80121c4:	e7b5      	b.n	8012132 <__hexnan+0x7a>
 80121c6:	9b01      	ldr	r3, [sp, #4]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d0df      	beq.n	801218c <__hexnan+0xd4>
 80121cc:	f04f 32ff 	mov.w	r2, #4294967295
 80121d0:	f1c3 0320 	rsb	r3, r3, #32
 80121d4:	fa22 f303 	lsr.w	r3, r2, r3
 80121d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80121dc:	401a      	ands	r2, r3
 80121de:	f846 2c04 	str.w	r2, [r6, #-4]
 80121e2:	e7d3      	b.n	801218c <__hexnan+0xd4>
 80121e4:	3f04      	subs	r7, #4
 80121e6:	e7d1      	b.n	801218c <__hexnan+0xd4>
 80121e8:	2004      	movs	r0, #4
 80121ea:	b007      	add	sp, #28
 80121ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080121f0 <_localeconv_r>:
 80121f0:	4800      	ldr	r0, [pc, #0]	; (80121f4 <_localeconv_r+0x4>)
 80121f2:	4770      	bx	lr
 80121f4:	20000190 	.word	0x20000190

080121f8 <_lseek_r>:
 80121f8:	b538      	push	{r3, r4, r5, lr}
 80121fa:	4d07      	ldr	r5, [pc, #28]	; (8012218 <_lseek_r+0x20>)
 80121fc:	4604      	mov	r4, r0
 80121fe:	4608      	mov	r0, r1
 8012200:	4611      	mov	r1, r2
 8012202:	2200      	movs	r2, #0
 8012204:	602a      	str	r2, [r5, #0]
 8012206:	461a      	mov	r2, r3
 8012208:	f7f0 f804 	bl	8002214 <_lseek>
 801220c:	1c43      	adds	r3, r0, #1
 801220e:	d102      	bne.n	8012216 <_lseek_r+0x1e>
 8012210:	682b      	ldr	r3, [r5, #0]
 8012212:	b103      	cbz	r3, 8012216 <_lseek_r+0x1e>
 8012214:	6023      	str	r3, [r4, #0]
 8012216:	bd38      	pop	{r3, r4, r5, pc}
 8012218:	20005110 	.word	0x20005110

0801221c <malloc>:
 801221c:	4b02      	ldr	r3, [pc, #8]	; (8012228 <malloc+0xc>)
 801221e:	4601      	mov	r1, r0
 8012220:	6818      	ldr	r0, [r3, #0]
 8012222:	f7fc be97 	b.w	800ef54 <_malloc_r>
 8012226:	bf00      	nop
 8012228:	20000038 	.word	0x20000038

0801222c <__ascii_mbtowc>:
 801222c:	b082      	sub	sp, #8
 801222e:	b901      	cbnz	r1, 8012232 <__ascii_mbtowc+0x6>
 8012230:	a901      	add	r1, sp, #4
 8012232:	b142      	cbz	r2, 8012246 <__ascii_mbtowc+0x1a>
 8012234:	b14b      	cbz	r3, 801224a <__ascii_mbtowc+0x1e>
 8012236:	7813      	ldrb	r3, [r2, #0]
 8012238:	600b      	str	r3, [r1, #0]
 801223a:	7812      	ldrb	r2, [r2, #0]
 801223c:	1e10      	subs	r0, r2, #0
 801223e:	bf18      	it	ne
 8012240:	2001      	movne	r0, #1
 8012242:	b002      	add	sp, #8
 8012244:	4770      	bx	lr
 8012246:	4610      	mov	r0, r2
 8012248:	e7fb      	b.n	8012242 <__ascii_mbtowc+0x16>
 801224a:	f06f 0001 	mvn.w	r0, #1
 801224e:	e7f8      	b.n	8012242 <__ascii_mbtowc+0x16>

08012250 <__malloc_lock>:
 8012250:	4801      	ldr	r0, [pc, #4]	; (8012258 <__malloc_lock+0x8>)
 8012252:	f7fc be46 	b.w	800eee2 <__retarget_lock_acquire_recursive>
 8012256:	bf00      	nop
 8012258:	20005104 	.word	0x20005104

0801225c <__malloc_unlock>:
 801225c:	4801      	ldr	r0, [pc, #4]	; (8012264 <__malloc_unlock+0x8>)
 801225e:	f7fc be41 	b.w	800eee4 <__retarget_lock_release_recursive>
 8012262:	bf00      	nop
 8012264:	20005104 	.word	0x20005104

08012268 <_Balloc>:
 8012268:	b570      	push	{r4, r5, r6, lr}
 801226a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801226c:	4604      	mov	r4, r0
 801226e:	460d      	mov	r5, r1
 8012270:	b976      	cbnz	r6, 8012290 <_Balloc+0x28>
 8012272:	2010      	movs	r0, #16
 8012274:	f7ff ffd2 	bl	801221c <malloc>
 8012278:	4602      	mov	r2, r0
 801227a:	6260      	str	r0, [r4, #36]	; 0x24
 801227c:	b920      	cbnz	r0, 8012288 <_Balloc+0x20>
 801227e:	4b18      	ldr	r3, [pc, #96]	; (80122e0 <_Balloc+0x78>)
 8012280:	4818      	ldr	r0, [pc, #96]	; (80122e4 <_Balloc+0x7c>)
 8012282:	2166      	movs	r1, #102	; 0x66
 8012284:	f000 feae 	bl	8012fe4 <__assert_func>
 8012288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801228c:	6006      	str	r6, [r0, #0]
 801228e:	60c6      	str	r6, [r0, #12]
 8012290:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012292:	68f3      	ldr	r3, [r6, #12]
 8012294:	b183      	cbz	r3, 80122b8 <_Balloc+0x50>
 8012296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012298:	68db      	ldr	r3, [r3, #12]
 801229a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801229e:	b9b8      	cbnz	r0, 80122d0 <_Balloc+0x68>
 80122a0:	2101      	movs	r1, #1
 80122a2:	fa01 f605 	lsl.w	r6, r1, r5
 80122a6:	1d72      	adds	r2, r6, #5
 80122a8:	0092      	lsls	r2, r2, #2
 80122aa:	4620      	mov	r0, r4
 80122ac:	f000 fc9d 	bl	8012bea <_calloc_r>
 80122b0:	b160      	cbz	r0, 80122cc <_Balloc+0x64>
 80122b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80122b6:	e00e      	b.n	80122d6 <_Balloc+0x6e>
 80122b8:	2221      	movs	r2, #33	; 0x21
 80122ba:	2104      	movs	r1, #4
 80122bc:	4620      	mov	r0, r4
 80122be:	f000 fc94 	bl	8012bea <_calloc_r>
 80122c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122c4:	60f0      	str	r0, [r6, #12]
 80122c6:	68db      	ldr	r3, [r3, #12]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d1e4      	bne.n	8012296 <_Balloc+0x2e>
 80122cc:	2000      	movs	r0, #0
 80122ce:	bd70      	pop	{r4, r5, r6, pc}
 80122d0:	6802      	ldr	r2, [r0, #0]
 80122d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80122d6:	2300      	movs	r3, #0
 80122d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80122dc:	e7f7      	b.n	80122ce <_Balloc+0x66>
 80122de:	bf00      	nop
 80122e0:	0801644e 	.word	0x0801644e
 80122e4:	0801654c 	.word	0x0801654c

080122e8 <_Bfree>:
 80122e8:	b570      	push	{r4, r5, r6, lr}
 80122ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80122ec:	4605      	mov	r5, r0
 80122ee:	460c      	mov	r4, r1
 80122f0:	b976      	cbnz	r6, 8012310 <_Bfree+0x28>
 80122f2:	2010      	movs	r0, #16
 80122f4:	f7ff ff92 	bl	801221c <malloc>
 80122f8:	4602      	mov	r2, r0
 80122fa:	6268      	str	r0, [r5, #36]	; 0x24
 80122fc:	b920      	cbnz	r0, 8012308 <_Bfree+0x20>
 80122fe:	4b09      	ldr	r3, [pc, #36]	; (8012324 <_Bfree+0x3c>)
 8012300:	4809      	ldr	r0, [pc, #36]	; (8012328 <_Bfree+0x40>)
 8012302:	218a      	movs	r1, #138	; 0x8a
 8012304:	f000 fe6e 	bl	8012fe4 <__assert_func>
 8012308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801230c:	6006      	str	r6, [r0, #0]
 801230e:	60c6      	str	r6, [r0, #12]
 8012310:	b13c      	cbz	r4, 8012322 <_Bfree+0x3a>
 8012312:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012314:	6862      	ldr	r2, [r4, #4]
 8012316:	68db      	ldr	r3, [r3, #12]
 8012318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801231c:	6021      	str	r1, [r4, #0]
 801231e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012322:	bd70      	pop	{r4, r5, r6, pc}
 8012324:	0801644e 	.word	0x0801644e
 8012328:	0801654c 	.word	0x0801654c

0801232c <__multadd>:
 801232c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012330:	690d      	ldr	r5, [r1, #16]
 8012332:	4607      	mov	r7, r0
 8012334:	460c      	mov	r4, r1
 8012336:	461e      	mov	r6, r3
 8012338:	f101 0c14 	add.w	ip, r1, #20
 801233c:	2000      	movs	r0, #0
 801233e:	f8dc 3000 	ldr.w	r3, [ip]
 8012342:	b299      	uxth	r1, r3
 8012344:	fb02 6101 	mla	r1, r2, r1, r6
 8012348:	0c1e      	lsrs	r6, r3, #16
 801234a:	0c0b      	lsrs	r3, r1, #16
 801234c:	fb02 3306 	mla	r3, r2, r6, r3
 8012350:	b289      	uxth	r1, r1
 8012352:	3001      	adds	r0, #1
 8012354:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012358:	4285      	cmp	r5, r0
 801235a:	f84c 1b04 	str.w	r1, [ip], #4
 801235e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012362:	dcec      	bgt.n	801233e <__multadd+0x12>
 8012364:	b30e      	cbz	r6, 80123aa <__multadd+0x7e>
 8012366:	68a3      	ldr	r3, [r4, #8]
 8012368:	42ab      	cmp	r3, r5
 801236a:	dc19      	bgt.n	80123a0 <__multadd+0x74>
 801236c:	6861      	ldr	r1, [r4, #4]
 801236e:	4638      	mov	r0, r7
 8012370:	3101      	adds	r1, #1
 8012372:	f7ff ff79 	bl	8012268 <_Balloc>
 8012376:	4680      	mov	r8, r0
 8012378:	b928      	cbnz	r0, 8012386 <__multadd+0x5a>
 801237a:	4602      	mov	r2, r0
 801237c:	4b0c      	ldr	r3, [pc, #48]	; (80123b0 <__multadd+0x84>)
 801237e:	480d      	ldr	r0, [pc, #52]	; (80123b4 <__multadd+0x88>)
 8012380:	21b5      	movs	r1, #181	; 0xb5
 8012382:	f000 fe2f 	bl	8012fe4 <__assert_func>
 8012386:	6922      	ldr	r2, [r4, #16]
 8012388:	3202      	adds	r2, #2
 801238a:	f104 010c 	add.w	r1, r4, #12
 801238e:	0092      	lsls	r2, r2, #2
 8012390:	300c      	adds	r0, #12
 8012392:	f7fc fda8 	bl	800eee6 <memcpy>
 8012396:	4621      	mov	r1, r4
 8012398:	4638      	mov	r0, r7
 801239a:	f7ff ffa5 	bl	80122e8 <_Bfree>
 801239e:	4644      	mov	r4, r8
 80123a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80123a4:	3501      	adds	r5, #1
 80123a6:	615e      	str	r6, [r3, #20]
 80123a8:	6125      	str	r5, [r4, #16]
 80123aa:	4620      	mov	r0, r4
 80123ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123b0:	080164c0 	.word	0x080164c0
 80123b4:	0801654c 	.word	0x0801654c

080123b8 <__s2b>:
 80123b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123bc:	460c      	mov	r4, r1
 80123be:	4615      	mov	r5, r2
 80123c0:	461f      	mov	r7, r3
 80123c2:	2209      	movs	r2, #9
 80123c4:	3308      	adds	r3, #8
 80123c6:	4606      	mov	r6, r0
 80123c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80123cc:	2100      	movs	r1, #0
 80123ce:	2201      	movs	r2, #1
 80123d0:	429a      	cmp	r2, r3
 80123d2:	db09      	blt.n	80123e8 <__s2b+0x30>
 80123d4:	4630      	mov	r0, r6
 80123d6:	f7ff ff47 	bl	8012268 <_Balloc>
 80123da:	b940      	cbnz	r0, 80123ee <__s2b+0x36>
 80123dc:	4602      	mov	r2, r0
 80123de:	4b19      	ldr	r3, [pc, #100]	; (8012444 <__s2b+0x8c>)
 80123e0:	4819      	ldr	r0, [pc, #100]	; (8012448 <__s2b+0x90>)
 80123e2:	21ce      	movs	r1, #206	; 0xce
 80123e4:	f000 fdfe 	bl	8012fe4 <__assert_func>
 80123e8:	0052      	lsls	r2, r2, #1
 80123ea:	3101      	adds	r1, #1
 80123ec:	e7f0      	b.n	80123d0 <__s2b+0x18>
 80123ee:	9b08      	ldr	r3, [sp, #32]
 80123f0:	6143      	str	r3, [r0, #20]
 80123f2:	2d09      	cmp	r5, #9
 80123f4:	f04f 0301 	mov.w	r3, #1
 80123f8:	6103      	str	r3, [r0, #16]
 80123fa:	dd16      	ble.n	801242a <__s2b+0x72>
 80123fc:	f104 0909 	add.w	r9, r4, #9
 8012400:	46c8      	mov	r8, r9
 8012402:	442c      	add	r4, r5
 8012404:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012408:	4601      	mov	r1, r0
 801240a:	3b30      	subs	r3, #48	; 0x30
 801240c:	220a      	movs	r2, #10
 801240e:	4630      	mov	r0, r6
 8012410:	f7ff ff8c 	bl	801232c <__multadd>
 8012414:	45a0      	cmp	r8, r4
 8012416:	d1f5      	bne.n	8012404 <__s2b+0x4c>
 8012418:	f1a5 0408 	sub.w	r4, r5, #8
 801241c:	444c      	add	r4, r9
 801241e:	1b2d      	subs	r5, r5, r4
 8012420:	1963      	adds	r3, r4, r5
 8012422:	42bb      	cmp	r3, r7
 8012424:	db04      	blt.n	8012430 <__s2b+0x78>
 8012426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801242a:	340a      	adds	r4, #10
 801242c:	2509      	movs	r5, #9
 801242e:	e7f6      	b.n	801241e <__s2b+0x66>
 8012430:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012434:	4601      	mov	r1, r0
 8012436:	3b30      	subs	r3, #48	; 0x30
 8012438:	220a      	movs	r2, #10
 801243a:	4630      	mov	r0, r6
 801243c:	f7ff ff76 	bl	801232c <__multadd>
 8012440:	e7ee      	b.n	8012420 <__s2b+0x68>
 8012442:	bf00      	nop
 8012444:	080164c0 	.word	0x080164c0
 8012448:	0801654c 	.word	0x0801654c

0801244c <__hi0bits>:
 801244c:	0c03      	lsrs	r3, r0, #16
 801244e:	041b      	lsls	r3, r3, #16
 8012450:	b9d3      	cbnz	r3, 8012488 <__hi0bits+0x3c>
 8012452:	0400      	lsls	r0, r0, #16
 8012454:	2310      	movs	r3, #16
 8012456:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801245a:	bf04      	itt	eq
 801245c:	0200      	lsleq	r0, r0, #8
 801245e:	3308      	addeq	r3, #8
 8012460:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012464:	bf04      	itt	eq
 8012466:	0100      	lsleq	r0, r0, #4
 8012468:	3304      	addeq	r3, #4
 801246a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801246e:	bf04      	itt	eq
 8012470:	0080      	lsleq	r0, r0, #2
 8012472:	3302      	addeq	r3, #2
 8012474:	2800      	cmp	r0, #0
 8012476:	db05      	blt.n	8012484 <__hi0bits+0x38>
 8012478:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801247c:	f103 0301 	add.w	r3, r3, #1
 8012480:	bf08      	it	eq
 8012482:	2320      	moveq	r3, #32
 8012484:	4618      	mov	r0, r3
 8012486:	4770      	bx	lr
 8012488:	2300      	movs	r3, #0
 801248a:	e7e4      	b.n	8012456 <__hi0bits+0xa>

0801248c <__lo0bits>:
 801248c:	6803      	ldr	r3, [r0, #0]
 801248e:	f013 0207 	ands.w	r2, r3, #7
 8012492:	4601      	mov	r1, r0
 8012494:	d00b      	beq.n	80124ae <__lo0bits+0x22>
 8012496:	07da      	lsls	r2, r3, #31
 8012498:	d423      	bmi.n	80124e2 <__lo0bits+0x56>
 801249a:	0798      	lsls	r0, r3, #30
 801249c:	bf49      	itett	mi
 801249e:	085b      	lsrmi	r3, r3, #1
 80124a0:	089b      	lsrpl	r3, r3, #2
 80124a2:	2001      	movmi	r0, #1
 80124a4:	600b      	strmi	r3, [r1, #0]
 80124a6:	bf5c      	itt	pl
 80124a8:	600b      	strpl	r3, [r1, #0]
 80124aa:	2002      	movpl	r0, #2
 80124ac:	4770      	bx	lr
 80124ae:	b298      	uxth	r0, r3
 80124b0:	b9a8      	cbnz	r0, 80124de <__lo0bits+0x52>
 80124b2:	0c1b      	lsrs	r3, r3, #16
 80124b4:	2010      	movs	r0, #16
 80124b6:	b2da      	uxtb	r2, r3
 80124b8:	b90a      	cbnz	r2, 80124be <__lo0bits+0x32>
 80124ba:	3008      	adds	r0, #8
 80124bc:	0a1b      	lsrs	r3, r3, #8
 80124be:	071a      	lsls	r2, r3, #28
 80124c0:	bf04      	itt	eq
 80124c2:	091b      	lsreq	r3, r3, #4
 80124c4:	3004      	addeq	r0, #4
 80124c6:	079a      	lsls	r2, r3, #30
 80124c8:	bf04      	itt	eq
 80124ca:	089b      	lsreq	r3, r3, #2
 80124cc:	3002      	addeq	r0, #2
 80124ce:	07da      	lsls	r2, r3, #31
 80124d0:	d403      	bmi.n	80124da <__lo0bits+0x4e>
 80124d2:	085b      	lsrs	r3, r3, #1
 80124d4:	f100 0001 	add.w	r0, r0, #1
 80124d8:	d005      	beq.n	80124e6 <__lo0bits+0x5a>
 80124da:	600b      	str	r3, [r1, #0]
 80124dc:	4770      	bx	lr
 80124de:	4610      	mov	r0, r2
 80124e0:	e7e9      	b.n	80124b6 <__lo0bits+0x2a>
 80124e2:	2000      	movs	r0, #0
 80124e4:	4770      	bx	lr
 80124e6:	2020      	movs	r0, #32
 80124e8:	4770      	bx	lr
	...

080124ec <__i2b>:
 80124ec:	b510      	push	{r4, lr}
 80124ee:	460c      	mov	r4, r1
 80124f0:	2101      	movs	r1, #1
 80124f2:	f7ff feb9 	bl	8012268 <_Balloc>
 80124f6:	4602      	mov	r2, r0
 80124f8:	b928      	cbnz	r0, 8012506 <__i2b+0x1a>
 80124fa:	4b05      	ldr	r3, [pc, #20]	; (8012510 <__i2b+0x24>)
 80124fc:	4805      	ldr	r0, [pc, #20]	; (8012514 <__i2b+0x28>)
 80124fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012502:	f000 fd6f 	bl	8012fe4 <__assert_func>
 8012506:	2301      	movs	r3, #1
 8012508:	6144      	str	r4, [r0, #20]
 801250a:	6103      	str	r3, [r0, #16]
 801250c:	bd10      	pop	{r4, pc}
 801250e:	bf00      	nop
 8012510:	080164c0 	.word	0x080164c0
 8012514:	0801654c 	.word	0x0801654c

08012518 <__multiply>:
 8012518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801251c:	4691      	mov	r9, r2
 801251e:	690a      	ldr	r2, [r1, #16]
 8012520:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012524:	429a      	cmp	r2, r3
 8012526:	bfb8      	it	lt
 8012528:	460b      	movlt	r3, r1
 801252a:	460c      	mov	r4, r1
 801252c:	bfbc      	itt	lt
 801252e:	464c      	movlt	r4, r9
 8012530:	4699      	movlt	r9, r3
 8012532:	6927      	ldr	r7, [r4, #16]
 8012534:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012538:	68a3      	ldr	r3, [r4, #8]
 801253a:	6861      	ldr	r1, [r4, #4]
 801253c:	eb07 060a 	add.w	r6, r7, sl
 8012540:	42b3      	cmp	r3, r6
 8012542:	b085      	sub	sp, #20
 8012544:	bfb8      	it	lt
 8012546:	3101      	addlt	r1, #1
 8012548:	f7ff fe8e 	bl	8012268 <_Balloc>
 801254c:	b930      	cbnz	r0, 801255c <__multiply+0x44>
 801254e:	4602      	mov	r2, r0
 8012550:	4b44      	ldr	r3, [pc, #272]	; (8012664 <__multiply+0x14c>)
 8012552:	4845      	ldr	r0, [pc, #276]	; (8012668 <__multiply+0x150>)
 8012554:	f240 115d 	movw	r1, #349	; 0x15d
 8012558:	f000 fd44 	bl	8012fe4 <__assert_func>
 801255c:	f100 0514 	add.w	r5, r0, #20
 8012560:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012564:	462b      	mov	r3, r5
 8012566:	2200      	movs	r2, #0
 8012568:	4543      	cmp	r3, r8
 801256a:	d321      	bcc.n	80125b0 <__multiply+0x98>
 801256c:	f104 0314 	add.w	r3, r4, #20
 8012570:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012574:	f109 0314 	add.w	r3, r9, #20
 8012578:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801257c:	9202      	str	r2, [sp, #8]
 801257e:	1b3a      	subs	r2, r7, r4
 8012580:	3a15      	subs	r2, #21
 8012582:	f022 0203 	bic.w	r2, r2, #3
 8012586:	3204      	adds	r2, #4
 8012588:	f104 0115 	add.w	r1, r4, #21
 801258c:	428f      	cmp	r7, r1
 801258e:	bf38      	it	cc
 8012590:	2204      	movcc	r2, #4
 8012592:	9201      	str	r2, [sp, #4]
 8012594:	9a02      	ldr	r2, [sp, #8]
 8012596:	9303      	str	r3, [sp, #12]
 8012598:	429a      	cmp	r2, r3
 801259a:	d80c      	bhi.n	80125b6 <__multiply+0x9e>
 801259c:	2e00      	cmp	r6, #0
 801259e:	dd03      	ble.n	80125a8 <__multiply+0x90>
 80125a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d05a      	beq.n	801265e <__multiply+0x146>
 80125a8:	6106      	str	r6, [r0, #16]
 80125aa:	b005      	add	sp, #20
 80125ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125b0:	f843 2b04 	str.w	r2, [r3], #4
 80125b4:	e7d8      	b.n	8012568 <__multiply+0x50>
 80125b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80125ba:	f1ba 0f00 	cmp.w	sl, #0
 80125be:	d024      	beq.n	801260a <__multiply+0xf2>
 80125c0:	f104 0e14 	add.w	lr, r4, #20
 80125c4:	46a9      	mov	r9, r5
 80125c6:	f04f 0c00 	mov.w	ip, #0
 80125ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80125ce:	f8d9 1000 	ldr.w	r1, [r9]
 80125d2:	fa1f fb82 	uxth.w	fp, r2
 80125d6:	b289      	uxth	r1, r1
 80125d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80125dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80125e0:	f8d9 2000 	ldr.w	r2, [r9]
 80125e4:	4461      	add	r1, ip
 80125e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80125ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80125ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80125f2:	b289      	uxth	r1, r1
 80125f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80125f8:	4577      	cmp	r7, lr
 80125fa:	f849 1b04 	str.w	r1, [r9], #4
 80125fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012602:	d8e2      	bhi.n	80125ca <__multiply+0xb2>
 8012604:	9a01      	ldr	r2, [sp, #4]
 8012606:	f845 c002 	str.w	ip, [r5, r2]
 801260a:	9a03      	ldr	r2, [sp, #12]
 801260c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012610:	3304      	adds	r3, #4
 8012612:	f1b9 0f00 	cmp.w	r9, #0
 8012616:	d020      	beq.n	801265a <__multiply+0x142>
 8012618:	6829      	ldr	r1, [r5, #0]
 801261a:	f104 0c14 	add.w	ip, r4, #20
 801261e:	46ae      	mov	lr, r5
 8012620:	f04f 0a00 	mov.w	sl, #0
 8012624:	f8bc b000 	ldrh.w	fp, [ip]
 8012628:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801262c:	fb09 220b 	mla	r2, r9, fp, r2
 8012630:	4492      	add	sl, r2
 8012632:	b289      	uxth	r1, r1
 8012634:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012638:	f84e 1b04 	str.w	r1, [lr], #4
 801263c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012640:	f8be 1000 	ldrh.w	r1, [lr]
 8012644:	0c12      	lsrs	r2, r2, #16
 8012646:	fb09 1102 	mla	r1, r9, r2, r1
 801264a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801264e:	4567      	cmp	r7, ip
 8012650:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012654:	d8e6      	bhi.n	8012624 <__multiply+0x10c>
 8012656:	9a01      	ldr	r2, [sp, #4]
 8012658:	50a9      	str	r1, [r5, r2]
 801265a:	3504      	adds	r5, #4
 801265c:	e79a      	b.n	8012594 <__multiply+0x7c>
 801265e:	3e01      	subs	r6, #1
 8012660:	e79c      	b.n	801259c <__multiply+0x84>
 8012662:	bf00      	nop
 8012664:	080164c0 	.word	0x080164c0
 8012668:	0801654c 	.word	0x0801654c

0801266c <__pow5mult>:
 801266c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012670:	4615      	mov	r5, r2
 8012672:	f012 0203 	ands.w	r2, r2, #3
 8012676:	4606      	mov	r6, r0
 8012678:	460f      	mov	r7, r1
 801267a:	d007      	beq.n	801268c <__pow5mult+0x20>
 801267c:	4c25      	ldr	r4, [pc, #148]	; (8012714 <__pow5mult+0xa8>)
 801267e:	3a01      	subs	r2, #1
 8012680:	2300      	movs	r3, #0
 8012682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012686:	f7ff fe51 	bl	801232c <__multadd>
 801268a:	4607      	mov	r7, r0
 801268c:	10ad      	asrs	r5, r5, #2
 801268e:	d03d      	beq.n	801270c <__pow5mult+0xa0>
 8012690:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012692:	b97c      	cbnz	r4, 80126b4 <__pow5mult+0x48>
 8012694:	2010      	movs	r0, #16
 8012696:	f7ff fdc1 	bl	801221c <malloc>
 801269a:	4602      	mov	r2, r0
 801269c:	6270      	str	r0, [r6, #36]	; 0x24
 801269e:	b928      	cbnz	r0, 80126ac <__pow5mult+0x40>
 80126a0:	4b1d      	ldr	r3, [pc, #116]	; (8012718 <__pow5mult+0xac>)
 80126a2:	481e      	ldr	r0, [pc, #120]	; (801271c <__pow5mult+0xb0>)
 80126a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80126a8:	f000 fc9c 	bl	8012fe4 <__assert_func>
 80126ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80126b0:	6004      	str	r4, [r0, #0]
 80126b2:	60c4      	str	r4, [r0, #12]
 80126b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80126b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80126bc:	b94c      	cbnz	r4, 80126d2 <__pow5mult+0x66>
 80126be:	f240 2171 	movw	r1, #625	; 0x271
 80126c2:	4630      	mov	r0, r6
 80126c4:	f7ff ff12 	bl	80124ec <__i2b>
 80126c8:	2300      	movs	r3, #0
 80126ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80126ce:	4604      	mov	r4, r0
 80126d0:	6003      	str	r3, [r0, #0]
 80126d2:	f04f 0900 	mov.w	r9, #0
 80126d6:	07eb      	lsls	r3, r5, #31
 80126d8:	d50a      	bpl.n	80126f0 <__pow5mult+0x84>
 80126da:	4639      	mov	r1, r7
 80126dc:	4622      	mov	r2, r4
 80126de:	4630      	mov	r0, r6
 80126e0:	f7ff ff1a 	bl	8012518 <__multiply>
 80126e4:	4639      	mov	r1, r7
 80126e6:	4680      	mov	r8, r0
 80126e8:	4630      	mov	r0, r6
 80126ea:	f7ff fdfd 	bl	80122e8 <_Bfree>
 80126ee:	4647      	mov	r7, r8
 80126f0:	106d      	asrs	r5, r5, #1
 80126f2:	d00b      	beq.n	801270c <__pow5mult+0xa0>
 80126f4:	6820      	ldr	r0, [r4, #0]
 80126f6:	b938      	cbnz	r0, 8012708 <__pow5mult+0x9c>
 80126f8:	4622      	mov	r2, r4
 80126fa:	4621      	mov	r1, r4
 80126fc:	4630      	mov	r0, r6
 80126fe:	f7ff ff0b 	bl	8012518 <__multiply>
 8012702:	6020      	str	r0, [r4, #0]
 8012704:	f8c0 9000 	str.w	r9, [r0]
 8012708:	4604      	mov	r4, r0
 801270a:	e7e4      	b.n	80126d6 <__pow5mult+0x6a>
 801270c:	4638      	mov	r0, r7
 801270e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012712:	bf00      	nop
 8012714:	08016698 	.word	0x08016698
 8012718:	0801644e 	.word	0x0801644e
 801271c:	0801654c 	.word	0x0801654c

08012720 <__lshift>:
 8012720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012724:	460c      	mov	r4, r1
 8012726:	6849      	ldr	r1, [r1, #4]
 8012728:	6923      	ldr	r3, [r4, #16]
 801272a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801272e:	68a3      	ldr	r3, [r4, #8]
 8012730:	4607      	mov	r7, r0
 8012732:	4691      	mov	r9, r2
 8012734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012738:	f108 0601 	add.w	r6, r8, #1
 801273c:	42b3      	cmp	r3, r6
 801273e:	db0b      	blt.n	8012758 <__lshift+0x38>
 8012740:	4638      	mov	r0, r7
 8012742:	f7ff fd91 	bl	8012268 <_Balloc>
 8012746:	4605      	mov	r5, r0
 8012748:	b948      	cbnz	r0, 801275e <__lshift+0x3e>
 801274a:	4602      	mov	r2, r0
 801274c:	4b2a      	ldr	r3, [pc, #168]	; (80127f8 <__lshift+0xd8>)
 801274e:	482b      	ldr	r0, [pc, #172]	; (80127fc <__lshift+0xdc>)
 8012750:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012754:	f000 fc46 	bl	8012fe4 <__assert_func>
 8012758:	3101      	adds	r1, #1
 801275a:	005b      	lsls	r3, r3, #1
 801275c:	e7ee      	b.n	801273c <__lshift+0x1c>
 801275e:	2300      	movs	r3, #0
 8012760:	f100 0114 	add.w	r1, r0, #20
 8012764:	f100 0210 	add.w	r2, r0, #16
 8012768:	4618      	mov	r0, r3
 801276a:	4553      	cmp	r3, sl
 801276c:	db37      	blt.n	80127de <__lshift+0xbe>
 801276e:	6920      	ldr	r0, [r4, #16]
 8012770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012774:	f104 0314 	add.w	r3, r4, #20
 8012778:	f019 091f 	ands.w	r9, r9, #31
 801277c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012780:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012784:	d02f      	beq.n	80127e6 <__lshift+0xc6>
 8012786:	f1c9 0e20 	rsb	lr, r9, #32
 801278a:	468a      	mov	sl, r1
 801278c:	f04f 0c00 	mov.w	ip, #0
 8012790:	681a      	ldr	r2, [r3, #0]
 8012792:	fa02 f209 	lsl.w	r2, r2, r9
 8012796:	ea42 020c 	orr.w	r2, r2, ip
 801279a:	f84a 2b04 	str.w	r2, [sl], #4
 801279e:	f853 2b04 	ldr.w	r2, [r3], #4
 80127a2:	4298      	cmp	r0, r3
 80127a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80127a8:	d8f2      	bhi.n	8012790 <__lshift+0x70>
 80127aa:	1b03      	subs	r3, r0, r4
 80127ac:	3b15      	subs	r3, #21
 80127ae:	f023 0303 	bic.w	r3, r3, #3
 80127b2:	3304      	adds	r3, #4
 80127b4:	f104 0215 	add.w	r2, r4, #21
 80127b8:	4290      	cmp	r0, r2
 80127ba:	bf38      	it	cc
 80127bc:	2304      	movcc	r3, #4
 80127be:	f841 c003 	str.w	ip, [r1, r3]
 80127c2:	f1bc 0f00 	cmp.w	ip, #0
 80127c6:	d001      	beq.n	80127cc <__lshift+0xac>
 80127c8:	f108 0602 	add.w	r6, r8, #2
 80127cc:	3e01      	subs	r6, #1
 80127ce:	4638      	mov	r0, r7
 80127d0:	612e      	str	r6, [r5, #16]
 80127d2:	4621      	mov	r1, r4
 80127d4:	f7ff fd88 	bl	80122e8 <_Bfree>
 80127d8:	4628      	mov	r0, r5
 80127da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127de:	f842 0f04 	str.w	r0, [r2, #4]!
 80127e2:	3301      	adds	r3, #1
 80127e4:	e7c1      	b.n	801276a <__lshift+0x4a>
 80127e6:	3904      	subs	r1, #4
 80127e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80127ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80127f0:	4298      	cmp	r0, r3
 80127f2:	d8f9      	bhi.n	80127e8 <__lshift+0xc8>
 80127f4:	e7ea      	b.n	80127cc <__lshift+0xac>
 80127f6:	bf00      	nop
 80127f8:	080164c0 	.word	0x080164c0
 80127fc:	0801654c 	.word	0x0801654c

08012800 <__mcmp>:
 8012800:	b530      	push	{r4, r5, lr}
 8012802:	6902      	ldr	r2, [r0, #16]
 8012804:	690c      	ldr	r4, [r1, #16]
 8012806:	1b12      	subs	r2, r2, r4
 8012808:	d10e      	bne.n	8012828 <__mcmp+0x28>
 801280a:	f100 0314 	add.w	r3, r0, #20
 801280e:	3114      	adds	r1, #20
 8012810:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012814:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012818:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801281c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012820:	42a5      	cmp	r5, r4
 8012822:	d003      	beq.n	801282c <__mcmp+0x2c>
 8012824:	d305      	bcc.n	8012832 <__mcmp+0x32>
 8012826:	2201      	movs	r2, #1
 8012828:	4610      	mov	r0, r2
 801282a:	bd30      	pop	{r4, r5, pc}
 801282c:	4283      	cmp	r3, r0
 801282e:	d3f3      	bcc.n	8012818 <__mcmp+0x18>
 8012830:	e7fa      	b.n	8012828 <__mcmp+0x28>
 8012832:	f04f 32ff 	mov.w	r2, #4294967295
 8012836:	e7f7      	b.n	8012828 <__mcmp+0x28>

08012838 <__mdiff>:
 8012838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801283c:	460c      	mov	r4, r1
 801283e:	4606      	mov	r6, r0
 8012840:	4611      	mov	r1, r2
 8012842:	4620      	mov	r0, r4
 8012844:	4690      	mov	r8, r2
 8012846:	f7ff ffdb 	bl	8012800 <__mcmp>
 801284a:	1e05      	subs	r5, r0, #0
 801284c:	d110      	bne.n	8012870 <__mdiff+0x38>
 801284e:	4629      	mov	r1, r5
 8012850:	4630      	mov	r0, r6
 8012852:	f7ff fd09 	bl	8012268 <_Balloc>
 8012856:	b930      	cbnz	r0, 8012866 <__mdiff+0x2e>
 8012858:	4b3a      	ldr	r3, [pc, #232]	; (8012944 <__mdiff+0x10c>)
 801285a:	4602      	mov	r2, r0
 801285c:	f240 2132 	movw	r1, #562	; 0x232
 8012860:	4839      	ldr	r0, [pc, #228]	; (8012948 <__mdiff+0x110>)
 8012862:	f000 fbbf 	bl	8012fe4 <__assert_func>
 8012866:	2301      	movs	r3, #1
 8012868:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801286c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012870:	bfa4      	itt	ge
 8012872:	4643      	movge	r3, r8
 8012874:	46a0      	movge	r8, r4
 8012876:	4630      	mov	r0, r6
 8012878:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801287c:	bfa6      	itte	ge
 801287e:	461c      	movge	r4, r3
 8012880:	2500      	movge	r5, #0
 8012882:	2501      	movlt	r5, #1
 8012884:	f7ff fcf0 	bl	8012268 <_Balloc>
 8012888:	b920      	cbnz	r0, 8012894 <__mdiff+0x5c>
 801288a:	4b2e      	ldr	r3, [pc, #184]	; (8012944 <__mdiff+0x10c>)
 801288c:	4602      	mov	r2, r0
 801288e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012892:	e7e5      	b.n	8012860 <__mdiff+0x28>
 8012894:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012898:	6926      	ldr	r6, [r4, #16]
 801289a:	60c5      	str	r5, [r0, #12]
 801289c:	f104 0914 	add.w	r9, r4, #20
 80128a0:	f108 0514 	add.w	r5, r8, #20
 80128a4:	f100 0e14 	add.w	lr, r0, #20
 80128a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80128ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80128b0:	f108 0210 	add.w	r2, r8, #16
 80128b4:	46f2      	mov	sl, lr
 80128b6:	2100      	movs	r1, #0
 80128b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80128bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80128c0:	fa1f f883 	uxth.w	r8, r3
 80128c4:	fa11 f18b 	uxtah	r1, r1, fp
 80128c8:	0c1b      	lsrs	r3, r3, #16
 80128ca:	eba1 0808 	sub.w	r8, r1, r8
 80128ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80128d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80128d6:	fa1f f888 	uxth.w	r8, r8
 80128da:	1419      	asrs	r1, r3, #16
 80128dc:	454e      	cmp	r6, r9
 80128de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80128e2:	f84a 3b04 	str.w	r3, [sl], #4
 80128e6:	d8e7      	bhi.n	80128b8 <__mdiff+0x80>
 80128e8:	1b33      	subs	r3, r6, r4
 80128ea:	3b15      	subs	r3, #21
 80128ec:	f023 0303 	bic.w	r3, r3, #3
 80128f0:	3304      	adds	r3, #4
 80128f2:	3415      	adds	r4, #21
 80128f4:	42a6      	cmp	r6, r4
 80128f6:	bf38      	it	cc
 80128f8:	2304      	movcc	r3, #4
 80128fa:	441d      	add	r5, r3
 80128fc:	4473      	add	r3, lr
 80128fe:	469e      	mov	lr, r3
 8012900:	462e      	mov	r6, r5
 8012902:	4566      	cmp	r6, ip
 8012904:	d30e      	bcc.n	8012924 <__mdiff+0xec>
 8012906:	f10c 0203 	add.w	r2, ip, #3
 801290a:	1b52      	subs	r2, r2, r5
 801290c:	f022 0203 	bic.w	r2, r2, #3
 8012910:	3d03      	subs	r5, #3
 8012912:	45ac      	cmp	ip, r5
 8012914:	bf38      	it	cc
 8012916:	2200      	movcc	r2, #0
 8012918:	441a      	add	r2, r3
 801291a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801291e:	b17b      	cbz	r3, 8012940 <__mdiff+0x108>
 8012920:	6107      	str	r7, [r0, #16]
 8012922:	e7a3      	b.n	801286c <__mdiff+0x34>
 8012924:	f856 8b04 	ldr.w	r8, [r6], #4
 8012928:	fa11 f288 	uxtah	r2, r1, r8
 801292c:	1414      	asrs	r4, r2, #16
 801292e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012932:	b292      	uxth	r2, r2
 8012934:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012938:	f84e 2b04 	str.w	r2, [lr], #4
 801293c:	1421      	asrs	r1, r4, #16
 801293e:	e7e0      	b.n	8012902 <__mdiff+0xca>
 8012940:	3f01      	subs	r7, #1
 8012942:	e7ea      	b.n	801291a <__mdiff+0xe2>
 8012944:	080164c0 	.word	0x080164c0
 8012948:	0801654c 	.word	0x0801654c

0801294c <__ulp>:
 801294c:	b082      	sub	sp, #8
 801294e:	ed8d 0b00 	vstr	d0, [sp]
 8012952:	9b01      	ldr	r3, [sp, #4]
 8012954:	4912      	ldr	r1, [pc, #72]	; (80129a0 <__ulp+0x54>)
 8012956:	4019      	ands	r1, r3
 8012958:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801295c:	2900      	cmp	r1, #0
 801295e:	dd05      	ble.n	801296c <__ulp+0x20>
 8012960:	2200      	movs	r2, #0
 8012962:	460b      	mov	r3, r1
 8012964:	ec43 2b10 	vmov	d0, r2, r3
 8012968:	b002      	add	sp, #8
 801296a:	4770      	bx	lr
 801296c:	4249      	negs	r1, r1
 801296e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012972:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012976:	f04f 0200 	mov.w	r2, #0
 801297a:	f04f 0300 	mov.w	r3, #0
 801297e:	da04      	bge.n	801298a <__ulp+0x3e>
 8012980:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012984:	fa41 f300 	asr.w	r3, r1, r0
 8012988:	e7ec      	b.n	8012964 <__ulp+0x18>
 801298a:	f1a0 0114 	sub.w	r1, r0, #20
 801298e:	291e      	cmp	r1, #30
 8012990:	bfda      	itte	le
 8012992:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012996:	fa20 f101 	lsrle.w	r1, r0, r1
 801299a:	2101      	movgt	r1, #1
 801299c:	460a      	mov	r2, r1
 801299e:	e7e1      	b.n	8012964 <__ulp+0x18>
 80129a0:	7ff00000 	.word	0x7ff00000

080129a4 <__b2d>:
 80129a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129a6:	6905      	ldr	r5, [r0, #16]
 80129a8:	f100 0714 	add.w	r7, r0, #20
 80129ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80129b0:	1f2e      	subs	r6, r5, #4
 80129b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80129b6:	4620      	mov	r0, r4
 80129b8:	f7ff fd48 	bl	801244c <__hi0bits>
 80129bc:	f1c0 0320 	rsb	r3, r0, #32
 80129c0:	280a      	cmp	r0, #10
 80129c2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012a40 <__b2d+0x9c>
 80129c6:	600b      	str	r3, [r1, #0]
 80129c8:	dc14      	bgt.n	80129f4 <__b2d+0x50>
 80129ca:	f1c0 0e0b 	rsb	lr, r0, #11
 80129ce:	fa24 f10e 	lsr.w	r1, r4, lr
 80129d2:	42b7      	cmp	r7, r6
 80129d4:	ea41 030c 	orr.w	r3, r1, ip
 80129d8:	bf34      	ite	cc
 80129da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80129de:	2100      	movcs	r1, #0
 80129e0:	3015      	adds	r0, #21
 80129e2:	fa04 f000 	lsl.w	r0, r4, r0
 80129e6:	fa21 f10e 	lsr.w	r1, r1, lr
 80129ea:	ea40 0201 	orr.w	r2, r0, r1
 80129ee:	ec43 2b10 	vmov	d0, r2, r3
 80129f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129f4:	42b7      	cmp	r7, r6
 80129f6:	bf3a      	itte	cc
 80129f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80129fc:	f1a5 0608 	subcc.w	r6, r5, #8
 8012a00:	2100      	movcs	r1, #0
 8012a02:	380b      	subs	r0, #11
 8012a04:	d017      	beq.n	8012a36 <__b2d+0x92>
 8012a06:	f1c0 0c20 	rsb	ip, r0, #32
 8012a0a:	fa04 f500 	lsl.w	r5, r4, r0
 8012a0e:	42be      	cmp	r6, r7
 8012a10:	fa21 f40c 	lsr.w	r4, r1, ip
 8012a14:	ea45 0504 	orr.w	r5, r5, r4
 8012a18:	bf8c      	ite	hi
 8012a1a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012a1e:	2400      	movls	r4, #0
 8012a20:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012a24:	fa01 f000 	lsl.w	r0, r1, r0
 8012a28:	fa24 f40c 	lsr.w	r4, r4, ip
 8012a2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012a30:	ea40 0204 	orr.w	r2, r0, r4
 8012a34:	e7db      	b.n	80129ee <__b2d+0x4a>
 8012a36:	ea44 030c 	orr.w	r3, r4, ip
 8012a3a:	460a      	mov	r2, r1
 8012a3c:	e7d7      	b.n	80129ee <__b2d+0x4a>
 8012a3e:	bf00      	nop
 8012a40:	3ff00000 	.word	0x3ff00000

08012a44 <__d2b>:
 8012a44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012a48:	4689      	mov	r9, r1
 8012a4a:	2101      	movs	r1, #1
 8012a4c:	ec57 6b10 	vmov	r6, r7, d0
 8012a50:	4690      	mov	r8, r2
 8012a52:	f7ff fc09 	bl	8012268 <_Balloc>
 8012a56:	4604      	mov	r4, r0
 8012a58:	b930      	cbnz	r0, 8012a68 <__d2b+0x24>
 8012a5a:	4602      	mov	r2, r0
 8012a5c:	4b25      	ldr	r3, [pc, #148]	; (8012af4 <__d2b+0xb0>)
 8012a5e:	4826      	ldr	r0, [pc, #152]	; (8012af8 <__d2b+0xb4>)
 8012a60:	f240 310a 	movw	r1, #778	; 0x30a
 8012a64:	f000 fabe 	bl	8012fe4 <__assert_func>
 8012a68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012a6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012a70:	bb35      	cbnz	r5, 8012ac0 <__d2b+0x7c>
 8012a72:	2e00      	cmp	r6, #0
 8012a74:	9301      	str	r3, [sp, #4]
 8012a76:	d028      	beq.n	8012aca <__d2b+0x86>
 8012a78:	4668      	mov	r0, sp
 8012a7a:	9600      	str	r6, [sp, #0]
 8012a7c:	f7ff fd06 	bl	801248c <__lo0bits>
 8012a80:	9900      	ldr	r1, [sp, #0]
 8012a82:	b300      	cbz	r0, 8012ac6 <__d2b+0x82>
 8012a84:	9a01      	ldr	r2, [sp, #4]
 8012a86:	f1c0 0320 	rsb	r3, r0, #32
 8012a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8012a8e:	430b      	orrs	r3, r1
 8012a90:	40c2      	lsrs	r2, r0
 8012a92:	6163      	str	r3, [r4, #20]
 8012a94:	9201      	str	r2, [sp, #4]
 8012a96:	9b01      	ldr	r3, [sp, #4]
 8012a98:	61a3      	str	r3, [r4, #24]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	bf14      	ite	ne
 8012a9e:	2202      	movne	r2, #2
 8012aa0:	2201      	moveq	r2, #1
 8012aa2:	6122      	str	r2, [r4, #16]
 8012aa4:	b1d5      	cbz	r5, 8012adc <__d2b+0x98>
 8012aa6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012aaa:	4405      	add	r5, r0
 8012aac:	f8c9 5000 	str.w	r5, [r9]
 8012ab0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012ab4:	f8c8 0000 	str.w	r0, [r8]
 8012ab8:	4620      	mov	r0, r4
 8012aba:	b003      	add	sp, #12
 8012abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012ac4:	e7d5      	b.n	8012a72 <__d2b+0x2e>
 8012ac6:	6161      	str	r1, [r4, #20]
 8012ac8:	e7e5      	b.n	8012a96 <__d2b+0x52>
 8012aca:	a801      	add	r0, sp, #4
 8012acc:	f7ff fcde 	bl	801248c <__lo0bits>
 8012ad0:	9b01      	ldr	r3, [sp, #4]
 8012ad2:	6163      	str	r3, [r4, #20]
 8012ad4:	2201      	movs	r2, #1
 8012ad6:	6122      	str	r2, [r4, #16]
 8012ad8:	3020      	adds	r0, #32
 8012ada:	e7e3      	b.n	8012aa4 <__d2b+0x60>
 8012adc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012ae0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012ae4:	f8c9 0000 	str.w	r0, [r9]
 8012ae8:	6918      	ldr	r0, [r3, #16]
 8012aea:	f7ff fcaf 	bl	801244c <__hi0bits>
 8012aee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012af2:	e7df      	b.n	8012ab4 <__d2b+0x70>
 8012af4:	080164c0 	.word	0x080164c0
 8012af8:	0801654c 	.word	0x0801654c

08012afc <__ratio>:
 8012afc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b00:	4688      	mov	r8, r1
 8012b02:	4669      	mov	r1, sp
 8012b04:	4681      	mov	r9, r0
 8012b06:	f7ff ff4d 	bl	80129a4 <__b2d>
 8012b0a:	a901      	add	r1, sp, #4
 8012b0c:	4640      	mov	r0, r8
 8012b0e:	ec55 4b10 	vmov	r4, r5, d0
 8012b12:	f7ff ff47 	bl	80129a4 <__b2d>
 8012b16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012b1a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012b1e:	eba3 0c02 	sub.w	ip, r3, r2
 8012b22:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012b26:	1a9b      	subs	r3, r3, r2
 8012b28:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012b2c:	ec51 0b10 	vmov	r0, r1, d0
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	bfd6      	itet	le
 8012b34:	460a      	movle	r2, r1
 8012b36:	462a      	movgt	r2, r5
 8012b38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012b3c:	468b      	mov	fp, r1
 8012b3e:	462f      	mov	r7, r5
 8012b40:	bfd4      	ite	le
 8012b42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012b46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	ee10 2a10 	vmov	r2, s0
 8012b50:	465b      	mov	r3, fp
 8012b52:	4639      	mov	r1, r7
 8012b54:	f7ed fe82 	bl	800085c <__aeabi_ddiv>
 8012b58:	ec41 0b10 	vmov	d0, r0, r1
 8012b5c:	b003      	add	sp, #12
 8012b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b62 <__copybits>:
 8012b62:	3901      	subs	r1, #1
 8012b64:	b570      	push	{r4, r5, r6, lr}
 8012b66:	1149      	asrs	r1, r1, #5
 8012b68:	6914      	ldr	r4, [r2, #16]
 8012b6a:	3101      	adds	r1, #1
 8012b6c:	f102 0314 	add.w	r3, r2, #20
 8012b70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012b74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012b78:	1f05      	subs	r5, r0, #4
 8012b7a:	42a3      	cmp	r3, r4
 8012b7c:	d30c      	bcc.n	8012b98 <__copybits+0x36>
 8012b7e:	1aa3      	subs	r3, r4, r2
 8012b80:	3b11      	subs	r3, #17
 8012b82:	f023 0303 	bic.w	r3, r3, #3
 8012b86:	3211      	adds	r2, #17
 8012b88:	42a2      	cmp	r2, r4
 8012b8a:	bf88      	it	hi
 8012b8c:	2300      	movhi	r3, #0
 8012b8e:	4418      	add	r0, r3
 8012b90:	2300      	movs	r3, #0
 8012b92:	4288      	cmp	r0, r1
 8012b94:	d305      	bcc.n	8012ba2 <__copybits+0x40>
 8012b96:	bd70      	pop	{r4, r5, r6, pc}
 8012b98:	f853 6b04 	ldr.w	r6, [r3], #4
 8012b9c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012ba0:	e7eb      	b.n	8012b7a <__copybits+0x18>
 8012ba2:	f840 3b04 	str.w	r3, [r0], #4
 8012ba6:	e7f4      	b.n	8012b92 <__copybits+0x30>

08012ba8 <__any_on>:
 8012ba8:	f100 0214 	add.w	r2, r0, #20
 8012bac:	6900      	ldr	r0, [r0, #16]
 8012bae:	114b      	asrs	r3, r1, #5
 8012bb0:	4298      	cmp	r0, r3
 8012bb2:	b510      	push	{r4, lr}
 8012bb4:	db11      	blt.n	8012bda <__any_on+0x32>
 8012bb6:	dd0a      	ble.n	8012bce <__any_on+0x26>
 8012bb8:	f011 011f 	ands.w	r1, r1, #31
 8012bbc:	d007      	beq.n	8012bce <__any_on+0x26>
 8012bbe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012bc2:	fa24 f001 	lsr.w	r0, r4, r1
 8012bc6:	fa00 f101 	lsl.w	r1, r0, r1
 8012bca:	428c      	cmp	r4, r1
 8012bcc:	d10b      	bne.n	8012be6 <__any_on+0x3e>
 8012bce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012bd2:	4293      	cmp	r3, r2
 8012bd4:	d803      	bhi.n	8012bde <__any_on+0x36>
 8012bd6:	2000      	movs	r0, #0
 8012bd8:	bd10      	pop	{r4, pc}
 8012bda:	4603      	mov	r3, r0
 8012bdc:	e7f7      	b.n	8012bce <__any_on+0x26>
 8012bde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012be2:	2900      	cmp	r1, #0
 8012be4:	d0f5      	beq.n	8012bd2 <__any_on+0x2a>
 8012be6:	2001      	movs	r0, #1
 8012be8:	e7f6      	b.n	8012bd8 <__any_on+0x30>

08012bea <_calloc_r>:
 8012bea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bec:	fba1 2402 	umull	r2, r4, r1, r2
 8012bf0:	b94c      	cbnz	r4, 8012c06 <_calloc_r+0x1c>
 8012bf2:	4611      	mov	r1, r2
 8012bf4:	9201      	str	r2, [sp, #4]
 8012bf6:	f7fc f9ad 	bl	800ef54 <_malloc_r>
 8012bfa:	9a01      	ldr	r2, [sp, #4]
 8012bfc:	4605      	mov	r5, r0
 8012bfe:	b930      	cbnz	r0, 8012c0e <_calloc_r+0x24>
 8012c00:	4628      	mov	r0, r5
 8012c02:	b003      	add	sp, #12
 8012c04:	bd30      	pop	{r4, r5, pc}
 8012c06:	220c      	movs	r2, #12
 8012c08:	6002      	str	r2, [r0, #0]
 8012c0a:	2500      	movs	r5, #0
 8012c0c:	e7f8      	b.n	8012c00 <_calloc_r+0x16>
 8012c0e:	4621      	mov	r1, r4
 8012c10:	f7fc f977 	bl	800ef02 <memset>
 8012c14:	e7f4      	b.n	8012c00 <_calloc_r+0x16>
	...

08012c18 <_free_r>:
 8012c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c1a:	2900      	cmp	r1, #0
 8012c1c:	d044      	beq.n	8012ca8 <_free_r+0x90>
 8012c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c22:	9001      	str	r0, [sp, #4]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	f1a1 0404 	sub.w	r4, r1, #4
 8012c2a:	bfb8      	it	lt
 8012c2c:	18e4      	addlt	r4, r4, r3
 8012c2e:	f7ff fb0f 	bl	8012250 <__malloc_lock>
 8012c32:	4a1e      	ldr	r2, [pc, #120]	; (8012cac <_free_r+0x94>)
 8012c34:	9801      	ldr	r0, [sp, #4]
 8012c36:	6813      	ldr	r3, [r2, #0]
 8012c38:	b933      	cbnz	r3, 8012c48 <_free_r+0x30>
 8012c3a:	6063      	str	r3, [r4, #4]
 8012c3c:	6014      	str	r4, [r2, #0]
 8012c3e:	b003      	add	sp, #12
 8012c40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c44:	f7ff bb0a 	b.w	801225c <__malloc_unlock>
 8012c48:	42a3      	cmp	r3, r4
 8012c4a:	d908      	bls.n	8012c5e <_free_r+0x46>
 8012c4c:	6825      	ldr	r5, [r4, #0]
 8012c4e:	1961      	adds	r1, r4, r5
 8012c50:	428b      	cmp	r3, r1
 8012c52:	bf01      	itttt	eq
 8012c54:	6819      	ldreq	r1, [r3, #0]
 8012c56:	685b      	ldreq	r3, [r3, #4]
 8012c58:	1949      	addeq	r1, r1, r5
 8012c5a:	6021      	streq	r1, [r4, #0]
 8012c5c:	e7ed      	b.n	8012c3a <_free_r+0x22>
 8012c5e:	461a      	mov	r2, r3
 8012c60:	685b      	ldr	r3, [r3, #4]
 8012c62:	b10b      	cbz	r3, 8012c68 <_free_r+0x50>
 8012c64:	42a3      	cmp	r3, r4
 8012c66:	d9fa      	bls.n	8012c5e <_free_r+0x46>
 8012c68:	6811      	ldr	r1, [r2, #0]
 8012c6a:	1855      	adds	r5, r2, r1
 8012c6c:	42a5      	cmp	r5, r4
 8012c6e:	d10b      	bne.n	8012c88 <_free_r+0x70>
 8012c70:	6824      	ldr	r4, [r4, #0]
 8012c72:	4421      	add	r1, r4
 8012c74:	1854      	adds	r4, r2, r1
 8012c76:	42a3      	cmp	r3, r4
 8012c78:	6011      	str	r1, [r2, #0]
 8012c7a:	d1e0      	bne.n	8012c3e <_free_r+0x26>
 8012c7c:	681c      	ldr	r4, [r3, #0]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	6053      	str	r3, [r2, #4]
 8012c82:	4421      	add	r1, r4
 8012c84:	6011      	str	r1, [r2, #0]
 8012c86:	e7da      	b.n	8012c3e <_free_r+0x26>
 8012c88:	d902      	bls.n	8012c90 <_free_r+0x78>
 8012c8a:	230c      	movs	r3, #12
 8012c8c:	6003      	str	r3, [r0, #0]
 8012c8e:	e7d6      	b.n	8012c3e <_free_r+0x26>
 8012c90:	6825      	ldr	r5, [r4, #0]
 8012c92:	1961      	adds	r1, r4, r5
 8012c94:	428b      	cmp	r3, r1
 8012c96:	bf04      	itt	eq
 8012c98:	6819      	ldreq	r1, [r3, #0]
 8012c9a:	685b      	ldreq	r3, [r3, #4]
 8012c9c:	6063      	str	r3, [r4, #4]
 8012c9e:	bf04      	itt	eq
 8012ca0:	1949      	addeq	r1, r1, r5
 8012ca2:	6021      	streq	r1, [r4, #0]
 8012ca4:	6054      	str	r4, [r2, #4]
 8012ca6:	e7ca      	b.n	8012c3e <_free_r+0x26>
 8012ca8:	b003      	add	sp, #12
 8012caa:	bd30      	pop	{r4, r5, pc}
 8012cac:	20005108 	.word	0x20005108

08012cb0 <__ssputs_r>:
 8012cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cb4:	688e      	ldr	r6, [r1, #8]
 8012cb6:	429e      	cmp	r6, r3
 8012cb8:	4682      	mov	sl, r0
 8012cba:	460c      	mov	r4, r1
 8012cbc:	4690      	mov	r8, r2
 8012cbe:	461f      	mov	r7, r3
 8012cc0:	d838      	bhi.n	8012d34 <__ssputs_r+0x84>
 8012cc2:	898a      	ldrh	r2, [r1, #12]
 8012cc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012cc8:	d032      	beq.n	8012d30 <__ssputs_r+0x80>
 8012cca:	6825      	ldr	r5, [r4, #0]
 8012ccc:	6909      	ldr	r1, [r1, #16]
 8012cce:	eba5 0901 	sub.w	r9, r5, r1
 8012cd2:	6965      	ldr	r5, [r4, #20]
 8012cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012cd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012cdc:	3301      	adds	r3, #1
 8012cde:	444b      	add	r3, r9
 8012ce0:	106d      	asrs	r5, r5, #1
 8012ce2:	429d      	cmp	r5, r3
 8012ce4:	bf38      	it	cc
 8012ce6:	461d      	movcc	r5, r3
 8012ce8:	0553      	lsls	r3, r2, #21
 8012cea:	d531      	bpl.n	8012d50 <__ssputs_r+0xa0>
 8012cec:	4629      	mov	r1, r5
 8012cee:	f7fc f931 	bl	800ef54 <_malloc_r>
 8012cf2:	4606      	mov	r6, r0
 8012cf4:	b950      	cbnz	r0, 8012d0c <__ssputs_r+0x5c>
 8012cf6:	230c      	movs	r3, #12
 8012cf8:	f8ca 3000 	str.w	r3, [sl]
 8012cfc:	89a3      	ldrh	r3, [r4, #12]
 8012cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d02:	81a3      	strh	r3, [r4, #12]
 8012d04:	f04f 30ff 	mov.w	r0, #4294967295
 8012d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d0c:	6921      	ldr	r1, [r4, #16]
 8012d0e:	464a      	mov	r2, r9
 8012d10:	f7fc f8e9 	bl	800eee6 <memcpy>
 8012d14:	89a3      	ldrh	r3, [r4, #12]
 8012d16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d1e:	81a3      	strh	r3, [r4, #12]
 8012d20:	6126      	str	r6, [r4, #16]
 8012d22:	6165      	str	r5, [r4, #20]
 8012d24:	444e      	add	r6, r9
 8012d26:	eba5 0509 	sub.w	r5, r5, r9
 8012d2a:	6026      	str	r6, [r4, #0]
 8012d2c:	60a5      	str	r5, [r4, #8]
 8012d2e:	463e      	mov	r6, r7
 8012d30:	42be      	cmp	r6, r7
 8012d32:	d900      	bls.n	8012d36 <__ssputs_r+0x86>
 8012d34:	463e      	mov	r6, r7
 8012d36:	6820      	ldr	r0, [r4, #0]
 8012d38:	4632      	mov	r2, r6
 8012d3a:	4641      	mov	r1, r8
 8012d3c:	f000 f982 	bl	8013044 <memmove>
 8012d40:	68a3      	ldr	r3, [r4, #8]
 8012d42:	1b9b      	subs	r3, r3, r6
 8012d44:	60a3      	str	r3, [r4, #8]
 8012d46:	6823      	ldr	r3, [r4, #0]
 8012d48:	4433      	add	r3, r6
 8012d4a:	6023      	str	r3, [r4, #0]
 8012d4c:	2000      	movs	r0, #0
 8012d4e:	e7db      	b.n	8012d08 <__ssputs_r+0x58>
 8012d50:	462a      	mov	r2, r5
 8012d52:	f000 f991 	bl	8013078 <_realloc_r>
 8012d56:	4606      	mov	r6, r0
 8012d58:	2800      	cmp	r0, #0
 8012d5a:	d1e1      	bne.n	8012d20 <__ssputs_r+0x70>
 8012d5c:	6921      	ldr	r1, [r4, #16]
 8012d5e:	4650      	mov	r0, sl
 8012d60:	f7ff ff5a 	bl	8012c18 <_free_r>
 8012d64:	e7c7      	b.n	8012cf6 <__ssputs_r+0x46>
	...

08012d68 <_svfiprintf_r>:
 8012d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d6c:	4698      	mov	r8, r3
 8012d6e:	898b      	ldrh	r3, [r1, #12]
 8012d70:	061b      	lsls	r3, r3, #24
 8012d72:	b09d      	sub	sp, #116	; 0x74
 8012d74:	4607      	mov	r7, r0
 8012d76:	460d      	mov	r5, r1
 8012d78:	4614      	mov	r4, r2
 8012d7a:	d50e      	bpl.n	8012d9a <_svfiprintf_r+0x32>
 8012d7c:	690b      	ldr	r3, [r1, #16]
 8012d7e:	b963      	cbnz	r3, 8012d9a <_svfiprintf_r+0x32>
 8012d80:	2140      	movs	r1, #64	; 0x40
 8012d82:	f7fc f8e7 	bl	800ef54 <_malloc_r>
 8012d86:	6028      	str	r0, [r5, #0]
 8012d88:	6128      	str	r0, [r5, #16]
 8012d8a:	b920      	cbnz	r0, 8012d96 <_svfiprintf_r+0x2e>
 8012d8c:	230c      	movs	r3, #12
 8012d8e:	603b      	str	r3, [r7, #0]
 8012d90:	f04f 30ff 	mov.w	r0, #4294967295
 8012d94:	e0d1      	b.n	8012f3a <_svfiprintf_r+0x1d2>
 8012d96:	2340      	movs	r3, #64	; 0x40
 8012d98:	616b      	str	r3, [r5, #20]
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8012d9e:	2320      	movs	r3, #32
 8012da0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012da4:	f8cd 800c 	str.w	r8, [sp, #12]
 8012da8:	2330      	movs	r3, #48	; 0x30
 8012daa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012f54 <_svfiprintf_r+0x1ec>
 8012dae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012db2:	f04f 0901 	mov.w	r9, #1
 8012db6:	4623      	mov	r3, r4
 8012db8:	469a      	mov	sl, r3
 8012dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012dbe:	b10a      	cbz	r2, 8012dc4 <_svfiprintf_r+0x5c>
 8012dc0:	2a25      	cmp	r2, #37	; 0x25
 8012dc2:	d1f9      	bne.n	8012db8 <_svfiprintf_r+0x50>
 8012dc4:	ebba 0b04 	subs.w	fp, sl, r4
 8012dc8:	d00b      	beq.n	8012de2 <_svfiprintf_r+0x7a>
 8012dca:	465b      	mov	r3, fp
 8012dcc:	4622      	mov	r2, r4
 8012dce:	4629      	mov	r1, r5
 8012dd0:	4638      	mov	r0, r7
 8012dd2:	f7ff ff6d 	bl	8012cb0 <__ssputs_r>
 8012dd6:	3001      	adds	r0, #1
 8012dd8:	f000 80aa 	beq.w	8012f30 <_svfiprintf_r+0x1c8>
 8012ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012dde:	445a      	add	r2, fp
 8012de0:	9209      	str	r2, [sp, #36]	; 0x24
 8012de2:	f89a 3000 	ldrb.w	r3, [sl]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	f000 80a2 	beq.w	8012f30 <_svfiprintf_r+0x1c8>
 8012dec:	2300      	movs	r3, #0
 8012dee:	f04f 32ff 	mov.w	r2, #4294967295
 8012df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012df6:	f10a 0a01 	add.w	sl, sl, #1
 8012dfa:	9304      	str	r3, [sp, #16]
 8012dfc:	9307      	str	r3, [sp, #28]
 8012dfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e02:	931a      	str	r3, [sp, #104]	; 0x68
 8012e04:	4654      	mov	r4, sl
 8012e06:	2205      	movs	r2, #5
 8012e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e0c:	4851      	ldr	r0, [pc, #324]	; (8012f54 <_svfiprintf_r+0x1ec>)
 8012e0e:	f7ed f9ef 	bl	80001f0 <memchr>
 8012e12:	9a04      	ldr	r2, [sp, #16]
 8012e14:	b9d8      	cbnz	r0, 8012e4e <_svfiprintf_r+0xe6>
 8012e16:	06d0      	lsls	r0, r2, #27
 8012e18:	bf44      	itt	mi
 8012e1a:	2320      	movmi	r3, #32
 8012e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e20:	0711      	lsls	r1, r2, #28
 8012e22:	bf44      	itt	mi
 8012e24:	232b      	movmi	r3, #43	; 0x2b
 8012e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8012e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8012e30:	d015      	beq.n	8012e5e <_svfiprintf_r+0xf6>
 8012e32:	9a07      	ldr	r2, [sp, #28]
 8012e34:	4654      	mov	r4, sl
 8012e36:	2000      	movs	r0, #0
 8012e38:	f04f 0c0a 	mov.w	ip, #10
 8012e3c:	4621      	mov	r1, r4
 8012e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e42:	3b30      	subs	r3, #48	; 0x30
 8012e44:	2b09      	cmp	r3, #9
 8012e46:	d94e      	bls.n	8012ee6 <_svfiprintf_r+0x17e>
 8012e48:	b1b0      	cbz	r0, 8012e78 <_svfiprintf_r+0x110>
 8012e4a:	9207      	str	r2, [sp, #28]
 8012e4c:	e014      	b.n	8012e78 <_svfiprintf_r+0x110>
 8012e4e:	eba0 0308 	sub.w	r3, r0, r8
 8012e52:	fa09 f303 	lsl.w	r3, r9, r3
 8012e56:	4313      	orrs	r3, r2
 8012e58:	9304      	str	r3, [sp, #16]
 8012e5a:	46a2      	mov	sl, r4
 8012e5c:	e7d2      	b.n	8012e04 <_svfiprintf_r+0x9c>
 8012e5e:	9b03      	ldr	r3, [sp, #12]
 8012e60:	1d19      	adds	r1, r3, #4
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	9103      	str	r1, [sp, #12]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	bfbb      	ittet	lt
 8012e6a:	425b      	neglt	r3, r3
 8012e6c:	f042 0202 	orrlt.w	r2, r2, #2
 8012e70:	9307      	strge	r3, [sp, #28]
 8012e72:	9307      	strlt	r3, [sp, #28]
 8012e74:	bfb8      	it	lt
 8012e76:	9204      	strlt	r2, [sp, #16]
 8012e78:	7823      	ldrb	r3, [r4, #0]
 8012e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8012e7c:	d10c      	bne.n	8012e98 <_svfiprintf_r+0x130>
 8012e7e:	7863      	ldrb	r3, [r4, #1]
 8012e80:	2b2a      	cmp	r3, #42	; 0x2a
 8012e82:	d135      	bne.n	8012ef0 <_svfiprintf_r+0x188>
 8012e84:	9b03      	ldr	r3, [sp, #12]
 8012e86:	1d1a      	adds	r2, r3, #4
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	9203      	str	r2, [sp, #12]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	bfb8      	it	lt
 8012e90:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e94:	3402      	adds	r4, #2
 8012e96:	9305      	str	r3, [sp, #20]
 8012e98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012f64 <_svfiprintf_r+0x1fc>
 8012e9c:	7821      	ldrb	r1, [r4, #0]
 8012e9e:	2203      	movs	r2, #3
 8012ea0:	4650      	mov	r0, sl
 8012ea2:	f7ed f9a5 	bl	80001f0 <memchr>
 8012ea6:	b140      	cbz	r0, 8012eba <_svfiprintf_r+0x152>
 8012ea8:	2340      	movs	r3, #64	; 0x40
 8012eaa:	eba0 000a 	sub.w	r0, r0, sl
 8012eae:	fa03 f000 	lsl.w	r0, r3, r0
 8012eb2:	9b04      	ldr	r3, [sp, #16]
 8012eb4:	4303      	orrs	r3, r0
 8012eb6:	3401      	adds	r4, #1
 8012eb8:	9304      	str	r3, [sp, #16]
 8012eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ebe:	4826      	ldr	r0, [pc, #152]	; (8012f58 <_svfiprintf_r+0x1f0>)
 8012ec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ec4:	2206      	movs	r2, #6
 8012ec6:	f7ed f993 	bl	80001f0 <memchr>
 8012eca:	2800      	cmp	r0, #0
 8012ecc:	d038      	beq.n	8012f40 <_svfiprintf_r+0x1d8>
 8012ece:	4b23      	ldr	r3, [pc, #140]	; (8012f5c <_svfiprintf_r+0x1f4>)
 8012ed0:	bb1b      	cbnz	r3, 8012f1a <_svfiprintf_r+0x1b2>
 8012ed2:	9b03      	ldr	r3, [sp, #12]
 8012ed4:	3307      	adds	r3, #7
 8012ed6:	f023 0307 	bic.w	r3, r3, #7
 8012eda:	3308      	adds	r3, #8
 8012edc:	9303      	str	r3, [sp, #12]
 8012ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ee0:	4433      	add	r3, r6
 8012ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8012ee4:	e767      	b.n	8012db6 <_svfiprintf_r+0x4e>
 8012ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8012eea:	460c      	mov	r4, r1
 8012eec:	2001      	movs	r0, #1
 8012eee:	e7a5      	b.n	8012e3c <_svfiprintf_r+0xd4>
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	3401      	adds	r4, #1
 8012ef4:	9305      	str	r3, [sp, #20]
 8012ef6:	4619      	mov	r1, r3
 8012ef8:	f04f 0c0a 	mov.w	ip, #10
 8012efc:	4620      	mov	r0, r4
 8012efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f02:	3a30      	subs	r2, #48	; 0x30
 8012f04:	2a09      	cmp	r2, #9
 8012f06:	d903      	bls.n	8012f10 <_svfiprintf_r+0x1a8>
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d0c5      	beq.n	8012e98 <_svfiprintf_r+0x130>
 8012f0c:	9105      	str	r1, [sp, #20]
 8012f0e:	e7c3      	b.n	8012e98 <_svfiprintf_r+0x130>
 8012f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f14:	4604      	mov	r4, r0
 8012f16:	2301      	movs	r3, #1
 8012f18:	e7f0      	b.n	8012efc <_svfiprintf_r+0x194>
 8012f1a:	ab03      	add	r3, sp, #12
 8012f1c:	9300      	str	r3, [sp, #0]
 8012f1e:	462a      	mov	r2, r5
 8012f20:	4b0f      	ldr	r3, [pc, #60]	; (8012f60 <_svfiprintf_r+0x1f8>)
 8012f22:	a904      	add	r1, sp, #16
 8012f24:	4638      	mov	r0, r7
 8012f26:	f7fc f929 	bl	800f17c <_printf_float>
 8012f2a:	1c42      	adds	r2, r0, #1
 8012f2c:	4606      	mov	r6, r0
 8012f2e:	d1d6      	bne.n	8012ede <_svfiprintf_r+0x176>
 8012f30:	89ab      	ldrh	r3, [r5, #12]
 8012f32:	065b      	lsls	r3, r3, #25
 8012f34:	f53f af2c 	bmi.w	8012d90 <_svfiprintf_r+0x28>
 8012f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f3a:	b01d      	add	sp, #116	; 0x74
 8012f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f40:	ab03      	add	r3, sp, #12
 8012f42:	9300      	str	r3, [sp, #0]
 8012f44:	462a      	mov	r2, r5
 8012f46:	4b06      	ldr	r3, [pc, #24]	; (8012f60 <_svfiprintf_r+0x1f8>)
 8012f48:	a904      	add	r1, sp, #16
 8012f4a:	4638      	mov	r0, r7
 8012f4c:	f7fc fbba 	bl	800f6c4 <_printf_i>
 8012f50:	e7eb      	b.n	8012f2a <_svfiprintf_r+0x1c2>
 8012f52:	bf00      	nop
 8012f54:	080166a4 	.word	0x080166a4
 8012f58:	080166ae 	.word	0x080166ae
 8012f5c:	0800f17d 	.word	0x0800f17d
 8012f60:	08012cb1 	.word	0x08012cb1
 8012f64:	080166aa 	.word	0x080166aa

08012f68 <_read_r>:
 8012f68:	b538      	push	{r3, r4, r5, lr}
 8012f6a:	4d07      	ldr	r5, [pc, #28]	; (8012f88 <_read_r+0x20>)
 8012f6c:	4604      	mov	r4, r0
 8012f6e:	4608      	mov	r0, r1
 8012f70:	4611      	mov	r1, r2
 8012f72:	2200      	movs	r2, #0
 8012f74:	602a      	str	r2, [r5, #0]
 8012f76:	461a      	mov	r2, r3
 8012f78:	f7ef f8ec 	bl	8002154 <_read>
 8012f7c:	1c43      	adds	r3, r0, #1
 8012f7e:	d102      	bne.n	8012f86 <_read_r+0x1e>
 8012f80:	682b      	ldr	r3, [r5, #0]
 8012f82:	b103      	cbz	r3, 8012f86 <_read_r+0x1e>
 8012f84:	6023      	str	r3, [r4, #0]
 8012f86:	bd38      	pop	{r3, r4, r5, pc}
 8012f88:	20005110 	.word	0x20005110
 8012f8c:	00000000 	.word	0x00000000

08012f90 <nan>:
 8012f90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012f98 <nan+0x8>
 8012f94:	4770      	bx	lr
 8012f96:	bf00      	nop
 8012f98:	00000000 	.word	0x00000000
 8012f9c:	7ff80000 	.word	0x7ff80000

08012fa0 <strncmp>:
 8012fa0:	b510      	push	{r4, lr}
 8012fa2:	b17a      	cbz	r2, 8012fc4 <strncmp+0x24>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	3901      	subs	r1, #1
 8012fa8:	1884      	adds	r4, r0, r2
 8012faa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012fae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012fb2:	4290      	cmp	r0, r2
 8012fb4:	d101      	bne.n	8012fba <strncmp+0x1a>
 8012fb6:	42a3      	cmp	r3, r4
 8012fb8:	d101      	bne.n	8012fbe <strncmp+0x1e>
 8012fba:	1a80      	subs	r0, r0, r2
 8012fbc:	bd10      	pop	{r4, pc}
 8012fbe:	2800      	cmp	r0, #0
 8012fc0:	d1f3      	bne.n	8012faa <strncmp+0xa>
 8012fc2:	e7fa      	b.n	8012fba <strncmp+0x1a>
 8012fc4:	4610      	mov	r0, r2
 8012fc6:	e7f9      	b.n	8012fbc <strncmp+0x1c>

08012fc8 <__ascii_wctomb>:
 8012fc8:	b149      	cbz	r1, 8012fde <__ascii_wctomb+0x16>
 8012fca:	2aff      	cmp	r2, #255	; 0xff
 8012fcc:	bf85      	ittet	hi
 8012fce:	238a      	movhi	r3, #138	; 0x8a
 8012fd0:	6003      	strhi	r3, [r0, #0]
 8012fd2:	700a      	strbls	r2, [r1, #0]
 8012fd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8012fd8:	bf98      	it	ls
 8012fda:	2001      	movls	r0, #1
 8012fdc:	4770      	bx	lr
 8012fde:	4608      	mov	r0, r1
 8012fe0:	4770      	bx	lr
	...

08012fe4 <__assert_func>:
 8012fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012fe6:	4614      	mov	r4, r2
 8012fe8:	461a      	mov	r2, r3
 8012fea:	4b09      	ldr	r3, [pc, #36]	; (8013010 <__assert_func+0x2c>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	4605      	mov	r5, r0
 8012ff0:	68d8      	ldr	r0, [r3, #12]
 8012ff2:	b14c      	cbz	r4, 8013008 <__assert_func+0x24>
 8012ff4:	4b07      	ldr	r3, [pc, #28]	; (8013014 <__assert_func+0x30>)
 8012ff6:	9100      	str	r1, [sp, #0]
 8012ff8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012ffc:	4906      	ldr	r1, [pc, #24]	; (8013018 <__assert_func+0x34>)
 8012ffe:	462b      	mov	r3, r5
 8013000:	f000 f80e 	bl	8013020 <fiprintf>
 8013004:	f000 fa80 	bl	8013508 <abort>
 8013008:	4b04      	ldr	r3, [pc, #16]	; (801301c <__assert_func+0x38>)
 801300a:	461c      	mov	r4, r3
 801300c:	e7f3      	b.n	8012ff6 <__assert_func+0x12>
 801300e:	bf00      	nop
 8013010:	20000038 	.word	0x20000038
 8013014:	080166b5 	.word	0x080166b5
 8013018:	080166c2 	.word	0x080166c2
 801301c:	080166f0 	.word	0x080166f0

08013020 <fiprintf>:
 8013020:	b40e      	push	{r1, r2, r3}
 8013022:	b503      	push	{r0, r1, lr}
 8013024:	4601      	mov	r1, r0
 8013026:	ab03      	add	r3, sp, #12
 8013028:	4805      	ldr	r0, [pc, #20]	; (8013040 <fiprintf+0x20>)
 801302a:	f853 2b04 	ldr.w	r2, [r3], #4
 801302e:	6800      	ldr	r0, [r0, #0]
 8013030:	9301      	str	r3, [sp, #4]
 8013032:	f000 f879 	bl	8013128 <_vfiprintf_r>
 8013036:	b002      	add	sp, #8
 8013038:	f85d eb04 	ldr.w	lr, [sp], #4
 801303c:	b003      	add	sp, #12
 801303e:	4770      	bx	lr
 8013040:	20000038 	.word	0x20000038

08013044 <memmove>:
 8013044:	4288      	cmp	r0, r1
 8013046:	b510      	push	{r4, lr}
 8013048:	eb01 0402 	add.w	r4, r1, r2
 801304c:	d902      	bls.n	8013054 <memmove+0x10>
 801304e:	4284      	cmp	r4, r0
 8013050:	4623      	mov	r3, r4
 8013052:	d807      	bhi.n	8013064 <memmove+0x20>
 8013054:	1e43      	subs	r3, r0, #1
 8013056:	42a1      	cmp	r1, r4
 8013058:	d008      	beq.n	801306c <memmove+0x28>
 801305a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801305e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013062:	e7f8      	b.n	8013056 <memmove+0x12>
 8013064:	4402      	add	r2, r0
 8013066:	4601      	mov	r1, r0
 8013068:	428a      	cmp	r2, r1
 801306a:	d100      	bne.n	801306e <memmove+0x2a>
 801306c:	bd10      	pop	{r4, pc}
 801306e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013076:	e7f7      	b.n	8013068 <memmove+0x24>

08013078 <_realloc_r>:
 8013078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801307c:	4680      	mov	r8, r0
 801307e:	4614      	mov	r4, r2
 8013080:	460e      	mov	r6, r1
 8013082:	b921      	cbnz	r1, 801308e <_realloc_r+0x16>
 8013084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013088:	4611      	mov	r1, r2
 801308a:	f7fb bf63 	b.w	800ef54 <_malloc_r>
 801308e:	b92a      	cbnz	r2, 801309c <_realloc_r+0x24>
 8013090:	f7ff fdc2 	bl	8012c18 <_free_r>
 8013094:	4625      	mov	r5, r4
 8013096:	4628      	mov	r0, r5
 8013098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801309c:	f000 faa0 	bl	80135e0 <_malloc_usable_size_r>
 80130a0:	4284      	cmp	r4, r0
 80130a2:	4607      	mov	r7, r0
 80130a4:	d802      	bhi.n	80130ac <_realloc_r+0x34>
 80130a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80130aa:	d812      	bhi.n	80130d2 <_realloc_r+0x5a>
 80130ac:	4621      	mov	r1, r4
 80130ae:	4640      	mov	r0, r8
 80130b0:	f7fb ff50 	bl	800ef54 <_malloc_r>
 80130b4:	4605      	mov	r5, r0
 80130b6:	2800      	cmp	r0, #0
 80130b8:	d0ed      	beq.n	8013096 <_realloc_r+0x1e>
 80130ba:	42bc      	cmp	r4, r7
 80130bc:	4622      	mov	r2, r4
 80130be:	4631      	mov	r1, r6
 80130c0:	bf28      	it	cs
 80130c2:	463a      	movcs	r2, r7
 80130c4:	f7fb ff0f 	bl	800eee6 <memcpy>
 80130c8:	4631      	mov	r1, r6
 80130ca:	4640      	mov	r0, r8
 80130cc:	f7ff fda4 	bl	8012c18 <_free_r>
 80130d0:	e7e1      	b.n	8013096 <_realloc_r+0x1e>
 80130d2:	4635      	mov	r5, r6
 80130d4:	e7df      	b.n	8013096 <_realloc_r+0x1e>

080130d6 <__sfputc_r>:
 80130d6:	6893      	ldr	r3, [r2, #8]
 80130d8:	3b01      	subs	r3, #1
 80130da:	2b00      	cmp	r3, #0
 80130dc:	b410      	push	{r4}
 80130de:	6093      	str	r3, [r2, #8]
 80130e0:	da08      	bge.n	80130f4 <__sfputc_r+0x1e>
 80130e2:	6994      	ldr	r4, [r2, #24]
 80130e4:	42a3      	cmp	r3, r4
 80130e6:	db01      	blt.n	80130ec <__sfputc_r+0x16>
 80130e8:	290a      	cmp	r1, #10
 80130ea:	d103      	bne.n	80130f4 <__sfputc_r+0x1e>
 80130ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130f0:	f000 b94a 	b.w	8013388 <__swbuf_r>
 80130f4:	6813      	ldr	r3, [r2, #0]
 80130f6:	1c58      	adds	r0, r3, #1
 80130f8:	6010      	str	r0, [r2, #0]
 80130fa:	7019      	strb	r1, [r3, #0]
 80130fc:	4608      	mov	r0, r1
 80130fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013102:	4770      	bx	lr

08013104 <__sfputs_r>:
 8013104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013106:	4606      	mov	r6, r0
 8013108:	460f      	mov	r7, r1
 801310a:	4614      	mov	r4, r2
 801310c:	18d5      	adds	r5, r2, r3
 801310e:	42ac      	cmp	r4, r5
 8013110:	d101      	bne.n	8013116 <__sfputs_r+0x12>
 8013112:	2000      	movs	r0, #0
 8013114:	e007      	b.n	8013126 <__sfputs_r+0x22>
 8013116:	f814 1b01 	ldrb.w	r1, [r4], #1
 801311a:	463a      	mov	r2, r7
 801311c:	4630      	mov	r0, r6
 801311e:	f7ff ffda 	bl	80130d6 <__sfputc_r>
 8013122:	1c43      	adds	r3, r0, #1
 8013124:	d1f3      	bne.n	801310e <__sfputs_r+0xa>
 8013126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013128 <_vfiprintf_r>:
 8013128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801312c:	460d      	mov	r5, r1
 801312e:	b09d      	sub	sp, #116	; 0x74
 8013130:	4614      	mov	r4, r2
 8013132:	4698      	mov	r8, r3
 8013134:	4606      	mov	r6, r0
 8013136:	b118      	cbz	r0, 8013140 <_vfiprintf_r+0x18>
 8013138:	6983      	ldr	r3, [r0, #24]
 801313a:	b90b      	cbnz	r3, 8013140 <_vfiprintf_r+0x18>
 801313c:	f7fb fe0e 	bl	800ed5c <__sinit>
 8013140:	4b89      	ldr	r3, [pc, #548]	; (8013368 <_vfiprintf_r+0x240>)
 8013142:	429d      	cmp	r5, r3
 8013144:	d11b      	bne.n	801317e <_vfiprintf_r+0x56>
 8013146:	6875      	ldr	r5, [r6, #4]
 8013148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801314a:	07d9      	lsls	r1, r3, #31
 801314c:	d405      	bmi.n	801315a <_vfiprintf_r+0x32>
 801314e:	89ab      	ldrh	r3, [r5, #12]
 8013150:	059a      	lsls	r2, r3, #22
 8013152:	d402      	bmi.n	801315a <_vfiprintf_r+0x32>
 8013154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013156:	f7fb fec4 	bl	800eee2 <__retarget_lock_acquire_recursive>
 801315a:	89ab      	ldrh	r3, [r5, #12]
 801315c:	071b      	lsls	r3, r3, #28
 801315e:	d501      	bpl.n	8013164 <_vfiprintf_r+0x3c>
 8013160:	692b      	ldr	r3, [r5, #16]
 8013162:	b9eb      	cbnz	r3, 80131a0 <_vfiprintf_r+0x78>
 8013164:	4629      	mov	r1, r5
 8013166:	4630      	mov	r0, r6
 8013168:	f000 f960 	bl	801342c <__swsetup_r>
 801316c:	b1c0      	cbz	r0, 80131a0 <_vfiprintf_r+0x78>
 801316e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013170:	07dc      	lsls	r4, r3, #31
 8013172:	d50e      	bpl.n	8013192 <_vfiprintf_r+0x6a>
 8013174:	f04f 30ff 	mov.w	r0, #4294967295
 8013178:	b01d      	add	sp, #116	; 0x74
 801317a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801317e:	4b7b      	ldr	r3, [pc, #492]	; (801336c <_vfiprintf_r+0x244>)
 8013180:	429d      	cmp	r5, r3
 8013182:	d101      	bne.n	8013188 <_vfiprintf_r+0x60>
 8013184:	68b5      	ldr	r5, [r6, #8]
 8013186:	e7df      	b.n	8013148 <_vfiprintf_r+0x20>
 8013188:	4b79      	ldr	r3, [pc, #484]	; (8013370 <_vfiprintf_r+0x248>)
 801318a:	429d      	cmp	r5, r3
 801318c:	bf08      	it	eq
 801318e:	68f5      	ldreq	r5, [r6, #12]
 8013190:	e7da      	b.n	8013148 <_vfiprintf_r+0x20>
 8013192:	89ab      	ldrh	r3, [r5, #12]
 8013194:	0598      	lsls	r0, r3, #22
 8013196:	d4ed      	bmi.n	8013174 <_vfiprintf_r+0x4c>
 8013198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801319a:	f7fb fea3 	bl	800eee4 <__retarget_lock_release_recursive>
 801319e:	e7e9      	b.n	8013174 <_vfiprintf_r+0x4c>
 80131a0:	2300      	movs	r3, #0
 80131a2:	9309      	str	r3, [sp, #36]	; 0x24
 80131a4:	2320      	movs	r3, #32
 80131a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80131aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80131ae:	2330      	movs	r3, #48	; 0x30
 80131b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013374 <_vfiprintf_r+0x24c>
 80131b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80131b8:	f04f 0901 	mov.w	r9, #1
 80131bc:	4623      	mov	r3, r4
 80131be:	469a      	mov	sl, r3
 80131c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131c4:	b10a      	cbz	r2, 80131ca <_vfiprintf_r+0xa2>
 80131c6:	2a25      	cmp	r2, #37	; 0x25
 80131c8:	d1f9      	bne.n	80131be <_vfiprintf_r+0x96>
 80131ca:	ebba 0b04 	subs.w	fp, sl, r4
 80131ce:	d00b      	beq.n	80131e8 <_vfiprintf_r+0xc0>
 80131d0:	465b      	mov	r3, fp
 80131d2:	4622      	mov	r2, r4
 80131d4:	4629      	mov	r1, r5
 80131d6:	4630      	mov	r0, r6
 80131d8:	f7ff ff94 	bl	8013104 <__sfputs_r>
 80131dc:	3001      	adds	r0, #1
 80131de:	f000 80aa 	beq.w	8013336 <_vfiprintf_r+0x20e>
 80131e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131e4:	445a      	add	r2, fp
 80131e6:	9209      	str	r2, [sp, #36]	; 0x24
 80131e8:	f89a 3000 	ldrb.w	r3, [sl]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	f000 80a2 	beq.w	8013336 <_vfiprintf_r+0x20e>
 80131f2:	2300      	movs	r3, #0
 80131f4:	f04f 32ff 	mov.w	r2, #4294967295
 80131f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131fc:	f10a 0a01 	add.w	sl, sl, #1
 8013200:	9304      	str	r3, [sp, #16]
 8013202:	9307      	str	r3, [sp, #28]
 8013204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013208:	931a      	str	r3, [sp, #104]	; 0x68
 801320a:	4654      	mov	r4, sl
 801320c:	2205      	movs	r2, #5
 801320e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013212:	4858      	ldr	r0, [pc, #352]	; (8013374 <_vfiprintf_r+0x24c>)
 8013214:	f7ec ffec 	bl	80001f0 <memchr>
 8013218:	9a04      	ldr	r2, [sp, #16]
 801321a:	b9d8      	cbnz	r0, 8013254 <_vfiprintf_r+0x12c>
 801321c:	06d1      	lsls	r1, r2, #27
 801321e:	bf44      	itt	mi
 8013220:	2320      	movmi	r3, #32
 8013222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013226:	0713      	lsls	r3, r2, #28
 8013228:	bf44      	itt	mi
 801322a:	232b      	movmi	r3, #43	; 0x2b
 801322c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013230:	f89a 3000 	ldrb.w	r3, [sl]
 8013234:	2b2a      	cmp	r3, #42	; 0x2a
 8013236:	d015      	beq.n	8013264 <_vfiprintf_r+0x13c>
 8013238:	9a07      	ldr	r2, [sp, #28]
 801323a:	4654      	mov	r4, sl
 801323c:	2000      	movs	r0, #0
 801323e:	f04f 0c0a 	mov.w	ip, #10
 8013242:	4621      	mov	r1, r4
 8013244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013248:	3b30      	subs	r3, #48	; 0x30
 801324a:	2b09      	cmp	r3, #9
 801324c:	d94e      	bls.n	80132ec <_vfiprintf_r+0x1c4>
 801324e:	b1b0      	cbz	r0, 801327e <_vfiprintf_r+0x156>
 8013250:	9207      	str	r2, [sp, #28]
 8013252:	e014      	b.n	801327e <_vfiprintf_r+0x156>
 8013254:	eba0 0308 	sub.w	r3, r0, r8
 8013258:	fa09 f303 	lsl.w	r3, r9, r3
 801325c:	4313      	orrs	r3, r2
 801325e:	9304      	str	r3, [sp, #16]
 8013260:	46a2      	mov	sl, r4
 8013262:	e7d2      	b.n	801320a <_vfiprintf_r+0xe2>
 8013264:	9b03      	ldr	r3, [sp, #12]
 8013266:	1d19      	adds	r1, r3, #4
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	9103      	str	r1, [sp, #12]
 801326c:	2b00      	cmp	r3, #0
 801326e:	bfbb      	ittet	lt
 8013270:	425b      	neglt	r3, r3
 8013272:	f042 0202 	orrlt.w	r2, r2, #2
 8013276:	9307      	strge	r3, [sp, #28]
 8013278:	9307      	strlt	r3, [sp, #28]
 801327a:	bfb8      	it	lt
 801327c:	9204      	strlt	r2, [sp, #16]
 801327e:	7823      	ldrb	r3, [r4, #0]
 8013280:	2b2e      	cmp	r3, #46	; 0x2e
 8013282:	d10c      	bne.n	801329e <_vfiprintf_r+0x176>
 8013284:	7863      	ldrb	r3, [r4, #1]
 8013286:	2b2a      	cmp	r3, #42	; 0x2a
 8013288:	d135      	bne.n	80132f6 <_vfiprintf_r+0x1ce>
 801328a:	9b03      	ldr	r3, [sp, #12]
 801328c:	1d1a      	adds	r2, r3, #4
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	9203      	str	r2, [sp, #12]
 8013292:	2b00      	cmp	r3, #0
 8013294:	bfb8      	it	lt
 8013296:	f04f 33ff 	movlt.w	r3, #4294967295
 801329a:	3402      	adds	r4, #2
 801329c:	9305      	str	r3, [sp, #20]
 801329e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013384 <_vfiprintf_r+0x25c>
 80132a2:	7821      	ldrb	r1, [r4, #0]
 80132a4:	2203      	movs	r2, #3
 80132a6:	4650      	mov	r0, sl
 80132a8:	f7ec ffa2 	bl	80001f0 <memchr>
 80132ac:	b140      	cbz	r0, 80132c0 <_vfiprintf_r+0x198>
 80132ae:	2340      	movs	r3, #64	; 0x40
 80132b0:	eba0 000a 	sub.w	r0, r0, sl
 80132b4:	fa03 f000 	lsl.w	r0, r3, r0
 80132b8:	9b04      	ldr	r3, [sp, #16]
 80132ba:	4303      	orrs	r3, r0
 80132bc:	3401      	adds	r4, #1
 80132be:	9304      	str	r3, [sp, #16]
 80132c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132c4:	482c      	ldr	r0, [pc, #176]	; (8013378 <_vfiprintf_r+0x250>)
 80132c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80132ca:	2206      	movs	r2, #6
 80132cc:	f7ec ff90 	bl	80001f0 <memchr>
 80132d0:	2800      	cmp	r0, #0
 80132d2:	d03f      	beq.n	8013354 <_vfiprintf_r+0x22c>
 80132d4:	4b29      	ldr	r3, [pc, #164]	; (801337c <_vfiprintf_r+0x254>)
 80132d6:	bb1b      	cbnz	r3, 8013320 <_vfiprintf_r+0x1f8>
 80132d8:	9b03      	ldr	r3, [sp, #12]
 80132da:	3307      	adds	r3, #7
 80132dc:	f023 0307 	bic.w	r3, r3, #7
 80132e0:	3308      	adds	r3, #8
 80132e2:	9303      	str	r3, [sp, #12]
 80132e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132e6:	443b      	add	r3, r7
 80132e8:	9309      	str	r3, [sp, #36]	; 0x24
 80132ea:	e767      	b.n	80131bc <_vfiprintf_r+0x94>
 80132ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80132f0:	460c      	mov	r4, r1
 80132f2:	2001      	movs	r0, #1
 80132f4:	e7a5      	b.n	8013242 <_vfiprintf_r+0x11a>
 80132f6:	2300      	movs	r3, #0
 80132f8:	3401      	adds	r4, #1
 80132fa:	9305      	str	r3, [sp, #20]
 80132fc:	4619      	mov	r1, r3
 80132fe:	f04f 0c0a 	mov.w	ip, #10
 8013302:	4620      	mov	r0, r4
 8013304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013308:	3a30      	subs	r2, #48	; 0x30
 801330a:	2a09      	cmp	r2, #9
 801330c:	d903      	bls.n	8013316 <_vfiprintf_r+0x1ee>
 801330e:	2b00      	cmp	r3, #0
 8013310:	d0c5      	beq.n	801329e <_vfiprintf_r+0x176>
 8013312:	9105      	str	r1, [sp, #20]
 8013314:	e7c3      	b.n	801329e <_vfiprintf_r+0x176>
 8013316:	fb0c 2101 	mla	r1, ip, r1, r2
 801331a:	4604      	mov	r4, r0
 801331c:	2301      	movs	r3, #1
 801331e:	e7f0      	b.n	8013302 <_vfiprintf_r+0x1da>
 8013320:	ab03      	add	r3, sp, #12
 8013322:	9300      	str	r3, [sp, #0]
 8013324:	462a      	mov	r2, r5
 8013326:	4b16      	ldr	r3, [pc, #88]	; (8013380 <_vfiprintf_r+0x258>)
 8013328:	a904      	add	r1, sp, #16
 801332a:	4630      	mov	r0, r6
 801332c:	f7fb ff26 	bl	800f17c <_printf_float>
 8013330:	4607      	mov	r7, r0
 8013332:	1c78      	adds	r0, r7, #1
 8013334:	d1d6      	bne.n	80132e4 <_vfiprintf_r+0x1bc>
 8013336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013338:	07d9      	lsls	r1, r3, #31
 801333a:	d405      	bmi.n	8013348 <_vfiprintf_r+0x220>
 801333c:	89ab      	ldrh	r3, [r5, #12]
 801333e:	059a      	lsls	r2, r3, #22
 8013340:	d402      	bmi.n	8013348 <_vfiprintf_r+0x220>
 8013342:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013344:	f7fb fdce 	bl	800eee4 <__retarget_lock_release_recursive>
 8013348:	89ab      	ldrh	r3, [r5, #12]
 801334a:	065b      	lsls	r3, r3, #25
 801334c:	f53f af12 	bmi.w	8013174 <_vfiprintf_r+0x4c>
 8013350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013352:	e711      	b.n	8013178 <_vfiprintf_r+0x50>
 8013354:	ab03      	add	r3, sp, #12
 8013356:	9300      	str	r3, [sp, #0]
 8013358:	462a      	mov	r2, r5
 801335a:	4b09      	ldr	r3, [pc, #36]	; (8013380 <_vfiprintf_r+0x258>)
 801335c:	a904      	add	r1, sp, #16
 801335e:	4630      	mov	r0, r6
 8013360:	f7fc f9b0 	bl	800f6c4 <_printf_i>
 8013364:	e7e4      	b.n	8013330 <_vfiprintf_r+0x208>
 8013366:	bf00      	nop
 8013368:	08016270 	.word	0x08016270
 801336c:	08016290 	.word	0x08016290
 8013370:	08016250 	.word	0x08016250
 8013374:	080166a4 	.word	0x080166a4
 8013378:	080166ae 	.word	0x080166ae
 801337c:	0800f17d 	.word	0x0800f17d
 8013380:	08013105 	.word	0x08013105
 8013384:	080166aa 	.word	0x080166aa

08013388 <__swbuf_r>:
 8013388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801338a:	460e      	mov	r6, r1
 801338c:	4614      	mov	r4, r2
 801338e:	4605      	mov	r5, r0
 8013390:	b118      	cbz	r0, 801339a <__swbuf_r+0x12>
 8013392:	6983      	ldr	r3, [r0, #24]
 8013394:	b90b      	cbnz	r3, 801339a <__swbuf_r+0x12>
 8013396:	f7fb fce1 	bl	800ed5c <__sinit>
 801339a:	4b21      	ldr	r3, [pc, #132]	; (8013420 <__swbuf_r+0x98>)
 801339c:	429c      	cmp	r4, r3
 801339e:	d12b      	bne.n	80133f8 <__swbuf_r+0x70>
 80133a0:	686c      	ldr	r4, [r5, #4]
 80133a2:	69a3      	ldr	r3, [r4, #24]
 80133a4:	60a3      	str	r3, [r4, #8]
 80133a6:	89a3      	ldrh	r3, [r4, #12]
 80133a8:	071a      	lsls	r2, r3, #28
 80133aa:	d52f      	bpl.n	801340c <__swbuf_r+0x84>
 80133ac:	6923      	ldr	r3, [r4, #16]
 80133ae:	b36b      	cbz	r3, 801340c <__swbuf_r+0x84>
 80133b0:	6923      	ldr	r3, [r4, #16]
 80133b2:	6820      	ldr	r0, [r4, #0]
 80133b4:	1ac0      	subs	r0, r0, r3
 80133b6:	6963      	ldr	r3, [r4, #20]
 80133b8:	b2f6      	uxtb	r6, r6
 80133ba:	4283      	cmp	r3, r0
 80133bc:	4637      	mov	r7, r6
 80133be:	dc04      	bgt.n	80133ca <__swbuf_r+0x42>
 80133c0:	4621      	mov	r1, r4
 80133c2:	4628      	mov	r0, r5
 80133c4:	f7fe fb68 	bl	8011a98 <_fflush_r>
 80133c8:	bb30      	cbnz	r0, 8013418 <__swbuf_r+0x90>
 80133ca:	68a3      	ldr	r3, [r4, #8]
 80133cc:	3b01      	subs	r3, #1
 80133ce:	60a3      	str	r3, [r4, #8]
 80133d0:	6823      	ldr	r3, [r4, #0]
 80133d2:	1c5a      	adds	r2, r3, #1
 80133d4:	6022      	str	r2, [r4, #0]
 80133d6:	701e      	strb	r6, [r3, #0]
 80133d8:	6963      	ldr	r3, [r4, #20]
 80133da:	3001      	adds	r0, #1
 80133dc:	4283      	cmp	r3, r0
 80133de:	d004      	beq.n	80133ea <__swbuf_r+0x62>
 80133e0:	89a3      	ldrh	r3, [r4, #12]
 80133e2:	07db      	lsls	r3, r3, #31
 80133e4:	d506      	bpl.n	80133f4 <__swbuf_r+0x6c>
 80133e6:	2e0a      	cmp	r6, #10
 80133e8:	d104      	bne.n	80133f4 <__swbuf_r+0x6c>
 80133ea:	4621      	mov	r1, r4
 80133ec:	4628      	mov	r0, r5
 80133ee:	f7fe fb53 	bl	8011a98 <_fflush_r>
 80133f2:	b988      	cbnz	r0, 8013418 <__swbuf_r+0x90>
 80133f4:	4638      	mov	r0, r7
 80133f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133f8:	4b0a      	ldr	r3, [pc, #40]	; (8013424 <__swbuf_r+0x9c>)
 80133fa:	429c      	cmp	r4, r3
 80133fc:	d101      	bne.n	8013402 <__swbuf_r+0x7a>
 80133fe:	68ac      	ldr	r4, [r5, #8]
 8013400:	e7cf      	b.n	80133a2 <__swbuf_r+0x1a>
 8013402:	4b09      	ldr	r3, [pc, #36]	; (8013428 <__swbuf_r+0xa0>)
 8013404:	429c      	cmp	r4, r3
 8013406:	bf08      	it	eq
 8013408:	68ec      	ldreq	r4, [r5, #12]
 801340a:	e7ca      	b.n	80133a2 <__swbuf_r+0x1a>
 801340c:	4621      	mov	r1, r4
 801340e:	4628      	mov	r0, r5
 8013410:	f000 f80c 	bl	801342c <__swsetup_r>
 8013414:	2800      	cmp	r0, #0
 8013416:	d0cb      	beq.n	80133b0 <__swbuf_r+0x28>
 8013418:	f04f 37ff 	mov.w	r7, #4294967295
 801341c:	e7ea      	b.n	80133f4 <__swbuf_r+0x6c>
 801341e:	bf00      	nop
 8013420:	08016270 	.word	0x08016270
 8013424:	08016290 	.word	0x08016290
 8013428:	08016250 	.word	0x08016250

0801342c <__swsetup_r>:
 801342c:	4b32      	ldr	r3, [pc, #200]	; (80134f8 <__swsetup_r+0xcc>)
 801342e:	b570      	push	{r4, r5, r6, lr}
 8013430:	681d      	ldr	r5, [r3, #0]
 8013432:	4606      	mov	r6, r0
 8013434:	460c      	mov	r4, r1
 8013436:	b125      	cbz	r5, 8013442 <__swsetup_r+0x16>
 8013438:	69ab      	ldr	r3, [r5, #24]
 801343a:	b913      	cbnz	r3, 8013442 <__swsetup_r+0x16>
 801343c:	4628      	mov	r0, r5
 801343e:	f7fb fc8d 	bl	800ed5c <__sinit>
 8013442:	4b2e      	ldr	r3, [pc, #184]	; (80134fc <__swsetup_r+0xd0>)
 8013444:	429c      	cmp	r4, r3
 8013446:	d10f      	bne.n	8013468 <__swsetup_r+0x3c>
 8013448:	686c      	ldr	r4, [r5, #4]
 801344a:	89a3      	ldrh	r3, [r4, #12]
 801344c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013450:	0719      	lsls	r1, r3, #28
 8013452:	d42c      	bmi.n	80134ae <__swsetup_r+0x82>
 8013454:	06dd      	lsls	r5, r3, #27
 8013456:	d411      	bmi.n	801347c <__swsetup_r+0x50>
 8013458:	2309      	movs	r3, #9
 801345a:	6033      	str	r3, [r6, #0]
 801345c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013460:	81a3      	strh	r3, [r4, #12]
 8013462:	f04f 30ff 	mov.w	r0, #4294967295
 8013466:	e03e      	b.n	80134e6 <__swsetup_r+0xba>
 8013468:	4b25      	ldr	r3, [pc, #148]	; (8013500 <__swsetup_r+0xd4>)
 801346a:	429c      	cmp	r4, r3
 801346c:	d101      	bne.n	8013472 <__swsetup_r+0x46>
 801346e:	68ac      	ldr	r4, [r5, #8]
 8013470:	e7eb      	b.n	801344a <__swsetup_r+0x1e>
 8013472:	4b24      	ldr	r3, [pc, #144]	; (8013504 <__swsetup_r+0xd8>)
 8013474:	429c      	cmp	r4, r3
 8013476:	bf08      	it	eq
 8013478:	68ec      	ldreq	r4, [r5, #12]
 801347a:	e7e6      	b.n	801344a <__swsetup_r+0x1e>
 801347c:	0758      	lsls	r0, r3, #29
 801347e:	d512      	bpl.n	80134a6 <__swsetup_r+0x7a>
 8013480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013482:	b141      	cbz	r1, 8013496 <__swsetup_r+0x6a>
 8013484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013488:	4299      	cmp	r1, r3
 801348a:	d002      	beq.n	8013492 <__swsetup_r+0x66>
 801348c:	4630      	mov	r0, r6
 801348e:	f7ff fbc3 	bl	8012c18 <_free_r>
 8013492:	2300      	movs	r3, #0
 8013494:	6363      	str	r3, [r4, #52]	; 0x34
 8013496:	89a3      	ldrh	r3, [r4, #12]
 8013498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801349c:	81a3      	strh	r3, [r4, #12]
 801349e:	2300      	movs	r3, #0
 80134a0:	6063      	str	r3, [r4, #4]
 80134a2:	6923      	ldr	r3, [r4, #16]
 80134a4:	6023      	str	r3, [r4, #0]
 80134a6:	89a3      	ldrh	r3, [r4, #12]
 80134a8:	f043 0308 	orr.w	r3, r3, #8
 80134ac:	81a3      	strh	r3, [r4, #12]
 80134ae:	6923      	ldr	r3, [r4, #16]
 80134b0:	b94b      	cbnz	r3, 80134c6 <__swsetup_r+0x9a>
 80134b2:	89a3      	ldrh	r3, [r4, #12]
 80134b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80134b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80134bc:	d003      	beq.n	80134c6 <__swsetup_r+0x9a>
 80134be:	4621      	mov	r1, r4
 80134c0:	4630      	mov	r0, r6
 80134c2:	f000 f84d 	bl	8013560 <__smakebuf_r>
 80134c6:	89a0      	ldrh	r0, [r4, #12]
 80134c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80134cc:	f010 0301 	ands.w	r3, r0, #1
 80134d0:	d00a      	beq.n	80134e8 <__swsetup_r+0xbc>
 80134d2:	2300      	movs	r3, #0
 80134d4:	60a3      	str	r3, [r4, #8]
 80134d6:	6963      	ldr	r3, [r4, #20]
 80134d8:	425b      	negs	r3, r3
 80134da:	61a3      	str	r3, [r4, #24]
 80134dc:	6923      	ldr	r3, [r4, #16]
 80134de:	b943      	cbnz	r3, 80134f2 <__swsetup_r+0xc6>
 80134e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80134e4:	d1ba      	bne.n	801345c <__swsetup_r+0x30>
 80134e6:	bd70      	pop	{r4, r5, r6, pc}
 80134e8:	0781      	lsls	r1, r0, #30
 80134ea:	bf58      	it	pl
 80134ec:	6963      	ldrpl	r3, [r4, #20]
 80134ee:	60a3      	str	r3, [r4, #8]
 80134f0:	e7f4      	b.n	80134dc <__swsetup_r+0xb0>
 80134f2:	2000      	movs	r0, #0
 80134f4:	e7f7      	b.n	80134e6 <__swsetup_r+0xba>
 80134f6:	bf00      	nop
 80134f8:	20000038 	.word	0x20000038
 80134fc:	08016270 	.word	0x08016270
 8013500:	08016290 	.word	0x08016290
 8013504:	08016250 	.word	0x08016250

08013508 <abort>:
 8013508:	b508      	push	{r3, lr}
 801350a:	2006      	movs	r0, #6
 801350c:	f000 f898 	bl	8013640 <raise>
 8013510:	2001      	movs	r0, #1
 8013512:	f7ee fe15 	bl	8002140 <_exit>

08013516 <__swhatbuf_r>:
 8013516:	b570      	push	{r4, r5, r6, lr}
 8013518:	460e      	mov	r6, r1
 801351a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801351e:	2900      	cmp	r1, #0
 8013520:	b096      	sub	sp, #88	; 0x58
 8013522:	4614      	mov	r4, r2
 8013524:	461d      	mov	r5, r3
 8013526:	da08      	bge.n	801353a <__swhatbuf_r+0x24>
 8013528:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801352c:	2200      	movs	r2, #0
 801352e:	602a      	str	r2, [r5, #0]
 8013530:	061a      	lsls	r2, r3, #24
 8013532:	d410      	bmi.n	8013556 <__swhatbuf_r+0x40>
 8013534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013538:	e00e      	b.n	8013558 <__swhatbuf_r+0x42>
 801353a:	466a      	mov	r2, sp
 801353c:	f000 f89c 	bl	8013678 <_fstat_r>
 8013540:	2800      	cmp	r0, #0
 8013542:	dbf1      	blt.n	8013528 <__swhatbuf_r+0x12>
 8013544:	9a01      	ldr	r2, [sp, #4]
 8013546:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801354a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801354e:	425a      	negs	r2, r3
 8013550:	415a      	adcs	r2, r3
 8013552:	602a      	str	r2, [r5, #0]
 8013554:	e7ee      	b.n	8013534 <__swhatbuf_r+0x1e>
 8013556:	2340      	movs	r3, #64	; 0x40
 8013558:	2000      	movs	r0, #0
 801355a:	6023      	str	r3, [r4, #0]
 801355c:	b016      	add	sp, #88	; 0x58
 801355e:	bd70      	pop	{r4, r5, r6, pc}

08013560 <__smakebuf_r>:
 8013560:	898b      	ldrh	r3, [r1, #12]
 8013562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013564:	079d      	lsls	r5, r3, #30
 8013566:	4606      	mov	r6, r0
 8013568:	460c      	mov	r4, r1
 801356a:	d507      	bpl.n	801357c <__smakebuf_r+0x1c>
 801356c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013570:	6023      	str	r3, [r4, #0]
 8013572:	6123      	str	r3, [r4, #16]
 8013574:	2301      	movs	r3, #1
 8013576:	6163      	str	r3, [r4, #20]
 8013578:	b002      	add	sp, #8
 801357a:	bd70      	pop	{r4, r5, r6, pc}
 801357c:	ab01      	add	r3, sp, #4
 801357e:	466a      	mov	r2, sp
 8013580:	f7ff ffc9 	bl	8013516 <__swhatbuf_r>
 8013584:	9900      	ldr	r1, [sp, #0]
 8013586:	4605      	mov	r5, r0
 8013588:	4630      	mov	r0, r6
 801358a:	f7fb fce3 	bl	800ef54 <_malloc_r>
 801358e:	b948      	cbnz	r0, 80135a4 <__smakebuf_r+0x44>
 8013590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013594:	059a      	lsls	r2, r3, #22
 8013596:	d4ef      	bmi.n	8013578 <__smakebuf_r+0x18>
 8013598:	f023 0303 	bic.w	r3, r3, #3
 801359c:	f043 0302 	orr.w	r3, r3, #2
 80135a0:	81a3      	strh	r3, [r4, #12]
 80135a2:	e7e3      	b.n	801356c <__smakebuf_r+0xc>
 80135a4:	4b0d      	ldr	r3, [pc, #52]	; (80135dc <__smakebuf_r+0x7c>)
 80135a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80135a8:	89a3      	ldrh	r3, [r4, #12]
 80135aa:	6020      	str	r0, [r4, #0]
 80135ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135b0:	81a3      	strh	r3, [r4, #12]
 80135b2:	9b00      	ldr	r3, [sp, #0]
 80135b4:	6163      	str	r3, [r4, #20]
 80135b6:	9b01      	ldr	r3, [sp, #4]
 80135b8:	6120      	str	r0, [r4, #16]
 80135ba:	b15b      	cbz	r3, 80135d4 <__smakebuf_r+0x74>
 80135bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135c0:	4630      	mov	r0, r6
 80135c2:	f000 f86b 	bl	801369c <_isatty_r>
 80135c6:	b128      	cbz	r0, 80135d4 <__smakebuf_r+0x74>
 80135c8:	89a3      	ldrh	r3, [r4, #12]
 80135ca:	f023 0303 	bic.w	r3, r3, #3
 80135ce:	f043 0301 	orr.w	r3, r3, #1
 80135d2:	81a3      	strh	r3, [r4, #12]
 80135d4:	89a0      	ldrh	r0, [r4, #12]
 80135d6:	4305      	orrs	r5, r0
 80135d8:	81a5      	strh	r5, [r4, #12]
 80135da:	e7cd      	b.n	8013578 <__smakebuf_r+0x18>
 80135dc:	0800ecf5 	.word	0x0800ecf5

080135e0 <_malloc_usable_size_r>:
 80135e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135e4:	1f18      	subs	r0, r3, #4
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	bfbc      	itt	lt
 80135ea:	580b      	ldrlt	r3, [r1, r0]
 80135ec:	18c0      	addlt	r0, r0, r3
 80135ee:	4770      	bx	lr

080135f0 <_raise_r>:
 80135f0:	291f      	cmp	r1, #31
 80135f2:	b538      	push	{r3, r4, r5, lr}
 80135f4:	4604      	mov	r4, r0
 80135f6:	460d      	mov	r5, r1
 80135f8:	d904      	bls.n	8013604 <_raise_r+0x14>
 80135fa:	2316      	movs	r3, #22
 80135fc:	6003      	str	r3, [r0, #0]
 80135fe:	f04f 30ff 	mov.w	r0, #4294967295
 8013602:	bd38      	pop	{r3, r4, r5, pc}
 8013604:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013606:	b112      	cbz	r2, 801360e <_raise_r+0x1e>
 8013608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801360c:	b94b      	cbnz	r3, 8013622 <_raise_r+0x32>
 801360e:	4620      	mov	r0, r4
 8013610:	f000 f830 	bl	8013674 <_getpid_r>
 8013614:	462a      	mov	r2, r5
 8013616:	4601      	mov	r1, r0
 8013618:	4620      	mov	r0, r4
 801361a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801361e:	f000 b817 	b.w	8013650 <_kill_r>
 8013622:	2b01      	cmp	r3, #1
 8013624:	d00a      	beq.n	801363c <_raise_r+0x4c>
 8013626:	1c59      	adds	r1, r3, #1
 8013628:	d103      	bne.n	8013632 <_raise_r+0x42>
 801362a:	2316      	movs	r3, #22
 801362c:	6003      	str	r3, [r0, #0]
 801362e:	2001      	movs	r0, #1
 8013630:	e7e7      	b.n	8013602 <_raise_r+0x12>
 8013632:	2400      	movs	r4, #0
 8013634:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013638:	4628      	mov	r0, r5
 801363a:	4798      	blx	r3
 801363c:	2000      	movs	r0, #0
 801363e:	e7e0      	b.n	8013602 <_raise_r+0x12>

08013640 <raise>:
 8013640:	4b02      	ldr	r3, [pc, #8]	; (801364c <raise+0xc>)
 8013642:	4601      	mov	r1, r0
 8013644:	6818      	ldr	r0, [r3, #0]
 8013646:	f7ff bfd3 	b.w	80135f0 <_raise_r>
 801364a:	bf00      	nop
 801364c:	20000038 	.word	0x20000038

08013650 <_kill_r>:
 8013650:	b538      	push	{r3, r4, r5, lr}
 8013652:	4d07      	ldr	r5, [pc, #28]	; (8013670 <_kill_r+0x20>)
 8013654:	2300      	movs	r3, #0
 8013656:	4604      	mov	r4, r0
 8013658:	4608      	mov	r0, r1
 801365a:	4611      	mov	r1, r2
 801365c:	602b      	str	r3, [r5, #0]
 801365e:	f7ee fd5f 	bl	8002120 <_kill>
 8013662:	1c43      	adds	r3, r0, #1
 8013664:	d102      	bne.n	801366c <_kill_r+0x1c>
 8013666:	682b      	ldr	r3, [r5, #0]
 8013668:	b103      	cbz	r3, 801366c <_kill_r+0x1c>
 801366a:	6023      	str	r3, [r4, #0]
 801366c:	bd38      	pop	{r3, r4, r5, pc}
 801366e:	bf00      	nop
 8013670:	20005110 	.word	0x20005110

08013674 <_getpid_r>:
 8013674:	f7ee bd4c 	b.w	8002110 <_getpid>

08013678 <_fstat_r>:
 8013678:	b538      	push	{r3, r4, r5, lr}
 801367a:	4d07      	ldr	r5, [pc, #28]	; (8013698 <_fstat_r+0x20>)
 801367c:	2300      	movs	r3, #0
 801367e:	4604      	mov	r4, r0
 8013680:	4608      	mov	r0, r1
 8013682:	4611      	mov	r1, r2
 8013684:	602b      	str	r3, [r5, #0]
 8013686:	f7ee fdaa 	bl	80021de <_fstat>
 801368a:	1c43      	adds	r3, r0, #1
 801368c:	d102      	bne.n	8013694 <_fstat_r+0x1c>
 801368e:	682b      	ldr	r3, [r5, #0]
 8013690:	b103      	cbz	r3, 8013694 <_fstat_r+0x1c>
 8013692:	6023      	str	r3, [r4, #0]
 8013694:	bd38      	pop	{r3, r4, r5, pc}
 8013696:	bf00      	nop
 8013698:	20005110 	.word	0x20005110

0801369c <_isatty_r>:
 801369c:	b538      	push	{r3, r4, r5, lr}
 801369e:	4d06      	ldr	r5, [pc, #24]	; (80136b8 <_isatty_r+0x1c>)
 80136a0:	2300      	movs	r3, #0
 80136a2:	4604      	mov	r4, r0
 80136a4:	4608      	mov	r0, r1
 80136a6:	602b      	str	r3, [r5, #0]
 80136a8:	f7ee fda9 	bl	80021fe <_isatty>
 80136ac:	1c43      	adds	r3, r0, #1
 80136ae:	d102      	bne.n	80136b6 <_isatty_r+0x1a>
 80136b0:	682b      	ldr	r3, [r5, #0]
 80136b2:	b103      	cbz	r3, 80136b6 <_isatty_r+0x1a>
 80136b4:	6023      	str	r3, [r4, #0]
 80136b6:	bd38      	pop	{r3, r4, r5, pc}
 80136b8:	20005110 	.word	0x20005110

080136bc <pow>:
 80136bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136be:	ed2d 8b02 	vpush	{d8}
 80136c2:	eeb0 8a40 	vmov.f32	s16, s0
 80136c6:	eef0 8a60 	vmov.f32	s17, s1
 80136ca:	ec55 4b11 	vmov	r4, r5, d1
 80136ce:	f000 f867 	bl	80137a0 <__ieee754_pow>
 80136d2:	4622      	mov	r2, r4
 80136d4:	462b      	mov	r3, r5
 80136d6:	4620      	mov	r0, r4
 80136d8:	4629      	mov	r1, r5
 80136da:	ec57 6b10 	vmov	r6, r7, d0
 80136de:	f7ed fa2d 	bl	8000b3c <__aeabi_dcmpun>
 80136e2:	2800      	cmp	r0, #0
 80136e4:	d13b      	bne.n	801375e <pow+0xa2>
 80136e6:	ec51 0b18 	vmov	r0, r1, d8
 80136ea:	2200      	movs	r2, #0
 80136ec:	2300      	movs	r3, #0
 80136ee:	f7ed f9f3 	bl	8000ad8 <__aeabi_dcmpeq>
 80136f2:	b1b8      	cbz	r0, 8013724 <pow+0x68>
 80136f4:	2200      	movs	r2, #0
 80136f6:	2300      	movs	r3, #0
 80136f8:	4620      	mov	r0, r4
 80136fa:	4629      	mov	r1, r5
 80136fc:	f7ed f9ec 	bl	8000ad8 <__aeabi_dcmpeq>
 8013700:	2800      	cmp	r0, #0
 8013702:	d146      	bne.n	8013792 <pow+0xd6>
 8013704:	ec45 4b10 	vmov	d0, r4, r5
 8013708:	f000 fe63 	bl	80143d2 <finite>
 801370c:	b338      	cbz	r0, 801375e <pow+0xa2>
 801370e:	2200      	movs	r2, #0
 8013710:	2300      	movs	r3, #0
 8013712:	4620      	mov	r0, r4
 8013714:	4629      	mov	r1, r5
 8013716:	f7ed f9e9 	bl	8000aec <__aeabi_dcmplt>
 801371a:	b300      	cbz	r0, 801375e <pow+0xa2>
 801371c:	f7fb fac0 	bl	800eca0 <__errno>
 8013720:	2322      	movs	r3, #34	; 0x22
 8013722:	e01b      	b.n	801375c <pow+0xa0>
 8013724:	ec47 6b10 	vmov	d0, r6, r7
 8013728:	f000 fe53 	bl	80143d2 <finite>
 801372c:	b9e0      	cbnz	r0, 8013768 <pow+0xac>
 801372e:	eeb0 0a48 	vmov.f32	s0, s16
 8013732:	eef0 0a68 	vmov.f32	s1, s17
 8013736:	f000 fe4c 	bl	80143d2 <finite>
 801373a:	b1a8      	cbz	r0, 8013768 <pow+0xac>
 801373c:	ec45 4b10 	vmov	d0, r4, r5
 8013740:	f000 fe47 	bl	80143d2 <finite>
 8013744:	b180      	cbz	r0, 8013768 <pow+0xac>
 8013746:	4632      	mov	r2, r6
 8013748:	463b      	mov	r3, r7
 801374a:	4630      	mov	r0, r6
 801374c:	4639      	mov	r1, r7
 801374e:	f7ed f9f5 	bl	8000b3c <__aeabi_dcmpun>
 8013752:	2800      	cmp	r0, #0
 8013754:	d0e2      	beq.n	801371c <pow+0x60>
 8013756:	f7fb faa3 	bl	800eca0 <__errno>
 801375a:	2321      	movs	r3, #33	; 0x21
 801375c:	6003      	str	r3, [r0, #0]
 801375e:	ecbd 8b02 	vpop	{d8}
 8013762:	ec47 6b10 	vmov	d0, r6, r7
 8013766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013768:	2200      	movs	r2, #0
 801376a:	2300      	movs	r3, #0
 801376c:	4630      	mov	r0, r6
 801376e:	4639      	mov	r1, r7
 8013770:	f7ed f9b2 	bl	8000ad8 <__aeabi_dcmpeq>
 8013774:	2800      	cmp	r0, #0
 8013776:	d0f2      	beq.n	801375e <pow+0xa2>
 8013778:	eeb0 0a48 	vmov.f32	s0, s16
 801377c:	eef0 0a68 	vmov.f32	s1, s17
 8013780:	f000 fe27 	bl	80143d2 <finite>
 8013784:	2800      	cmp	r0, #0
 8013786:	d0ea      	beq.n	801375e <pow+0xa2>
 8013788:	ec45 4b10 	vmov	d0, r4, r5
 801378c:	f000 fe21 	bl	80143d2 <finite>
 8013790:	e7c3      	b.n	801371a <pow+0x5e>
 8013792:	4f01      	ldr	r7, [pc, #4]	; (8013798 <pow+0xdc>)
 8013794:	2600      	movs	r6, #0
 8013796:	e7e2      	b.n	801375e <pow+0xa2>
 8013798:	3ff00000 	.word	0x3ff00000
 801379c:	00000000 	.word	0x00000000

080137a0 <__ieee754_pow>:
 80137a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137a4:	ed2d 8b06 	vpush	{d8-d10}
 80137a8:	b089      	sub	sp, #36	; 0x24
 80137aa:	ed8d 1b00 	vstr	d1, [sp]
 80137ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 80137b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80137b6:	ea58 0102 	orrs.w	r1, r8, r2
 80137ba:	ec57 6b10 	vmov	r6, r7, d0
 80137be:	d115      	bne.n	80137ec <__ieee754_pow+0x4c>
 80137c0:	19b3      	adds	r3, r6, r6
 80137c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80137c6:	4152      	adcs	r2, r2
 80137c8:	4299      	cmp	r1, r3
 80137ca:	4b89      	ldr	r3, [pc, #548]	; (80139f0 <__ieee754_pow+0x250>)
 80137cc:	4193      	sbcs	r3, r2
 80137ce:	f080 84d2 	bcs.w	8014176 <__ieee754_pow+0x9d6>
 80137d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80137d6:	4630      	mov	r0, r6
 80137d8:	4639      	mov	r1, r7
 80137da:	f7ec fd5f 	bl	800029c <__adddf3>
 80137de:	ec41 0b10 	vmov	d0, r0, r1
 80137e2:	b009      	add	sp, #36	; 0x24
 80137e4:	ecbd 8b06 	vpop	{d8-d10}
 80137e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137ec:	4b81      	ldr	r3, [pc, #516]	; (80139f4 <__ieee754_pow+0x254>)
 80137ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80137f2:	429c      	cmp	r4, r3
 80137f4:	ee10 aa10 	vmov	sl, s0
 80137f8:	463d      	mov	r5, r7
 80137fa:	dc06      	bgt.n	801380a <__ieee754_pow+0x6a>
 80137fc:	d101      	bne.n	8013802 <__ieee754_pow+0x62>
 80137fe:	2e00      	cmp	r6, #0
 8013800:	d1e7      	bne.n	80137d2 <__ieee754_pow+0x32>
 8013802:	4598      	cmp	r8, r3
 8013804:	dc01      	bgt.n	801380a <__ieee754_pow+0x6a>
 8013806:	d10f      	bne.n	8013828 <__ieee754_pow+0x88>
 8013808:	b172      	cbz	r2, 8013828 <__ieee754_pow+0x88>
 801380a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801380e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8013812:	ea55 050a 	orrs.w	r5, r5, sl
 8013816:	d1dc      	bne.n	80137d2 <__ieee754_pow+0x32>
 8013818:	e9dd 3200 	ldrd	r3, r2, [sp]
 801381c:	18db      	adds	r3, r3, r3
 801381e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8013822:	4152      	adcs	r2, r2
 8013824:	429d      	cmp	r5, r3
 8013826:	e7d0      	b.n	80137ca <__ieee754_pow+0x2a>
 8013828:	2d00      	cmp	r5, #0
 801382a:	da3b      	bge.n	80138a4 <__ieee754_pow+0x104>
 801382c:	4b72      	ldr	r3, [pc, #456]	; (80139f8 <__ieee754_pow+0x258>)
 801382e:	4598      	cmp	r8, r3
 8013830:	dc51      	bgt.n	80138d6 <__ieee754_pow+0x136>
 8013832:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013836:	4598      	cmp	r8, r3
 8013838:	f340 84ac 	ble.w	8014194 <__ieee754_pow+0x9f4>
 801383c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013840:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013844:	2b14      	cmp	r3, #20
 8013846:	dd0f      	ble.n	8013868 <__ieee754_pow+0xc8>
 8013848:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801384c:	fa22 f103 	lsr.w	r1, r2, r3
 8013850:	fa01 f303 	lsl.w	r3, r1, r3
 8013854:	4293      	cmp	r3, r2
 8013856:	f040 849d 	bne.w	8014194 <__ieee754_pow+0x9f4>
 801385a:	f001 0101 	and.w	r1, r1, #1
 801385e:	f1c1 0302 	rsb	r3, r1, #2
 8013862:	9304      	str	r3, [sp, #16]
 8013864:	b182      	cbz	r2, 8013888 <__ieee754_pow+0xe8>
 8013866:	e05f      	b.n	8013928 <__ieee754_pow+0x188>
 8013868:	2a00      	cmp	r2, #0
 801386a:	d15b      	bne.n	8013924 <__ieee754_pow+0x184>
 801386c:	f1c3 0314 	rsb	r3, r3, #20
 8013870:	fa48 f103 	asr.w	r1, r8, r3
 8013874:	fa01 f303 	lsl.w	r3, r1, r3
 8013878:	4543      	cmp	r3, r8
 801387a:	f040 8488 	bne.w	801418e <__ieee754_pow+0x9ee>
 801387e:	f001 0101 	and.w	r1, r1, #1
 8013882:	f1c1 0302 	rsb	r3, r1, #2
 8013886:	9304      	str	r3, [sp, #16]
 8013888:	4b5c      	ldr	r3, [pc, #368]	; (80139fc <__ieee754_pow+0x25c>)
 801388a:	4598      	cmp	r8, r3
 801388c:	d132      	bne.n	80138f4 <__ieee754_pow+0x154>
 801388e:	f1b9 0f00 	cmp.w	r9, #0
 8013892:	f280 8478 	bge.w	8014186 <__ieee754_pow+0x9e6>
 8013896:	4959      	ldr	r1, [pc, #356]	; (80139fc <__ieee754_pow+0x25c>)
 8013898:	4632      	mov	r2, r6
 801389a:	463b      	mov	r3, r7
 801389c:	2000      	movs	r0, #0
 801389e:	f7ec ffdd 	bl	800085c <__aeabi_ddiv>
 80138a2:	e79c      	b.n	80137de <__ieee754_pow+0x3e>
 80138a4:	2300      	movs	r3, #0
 80138a6:	9304      	str	r3, [sp, #16]
 80138a8:	2a00      	cmp	r2, #0
 80138aa:	d13d      	bne.n	8013928 <__ieee754_pow+0x188>
 80138ac:	4b51      	ldr	r3, [pc, #324]	; (80139f4 <__ieee754_pow+0x254>)
 80138ae:	4598      	cmp	r8, r3
 80138b0:	d1ea      	bne.n	8013888 <__ieee754_pow+0xe8>
 80138b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80138b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80138ba:	ea53 030a 	orrs.w	r3, r3, sl
 80138be:	f000 845a 	beq.w	8014176 <__ieee754_pow+0x9d6>
 80138c2:	4b4f      	ldr	r3, [pc, #316]	; (8013a00 <__ieee754_pow+0x260>)
 80138c4:	429c      	cmp	r4, r3
 80138c6:	dd08      	ble.n	80138da <__ieee754_pow+0x13a>
 80138c8:	f1b9 0f00 	cmp.w	r9, #0
 80138cc:	f2c0 8457 	blt.w	801417e <__ieee754_pow+0x9de>
 80138d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138d4:	e783      	b.n	80137de <__ieee754_pow+0x3e>
 80138d6:	2302      	movs	r3, #2
 80138d8:	e7e5      	b.n	80138a6 <__ieee754_pow+0x106>
 80138da:	f1b9 0f00 	cmp.w	r9, #0
 80138de:	f04f 0000 	mov.w	r0, #0
 80138e2:	f04f 0100 	mov.w	r1, #0
 80138e6:	f6bf af7a 	bge.w	80137de <__ieee754_pow+0x3e>
 80138ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 80138ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80138f2:	e774      	b.n	80137de <__ieee754_pow+0x3e>
 80138f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80138f8:	d106      	bne.n	8013908 <__ieee754_pow+0x168>
 80138fa:	4632      	mov	r2, r6
 80138fc:	463b      	mov	r3, r7
 80138fe:	4630      	mov	r0, r6
 8013900:	4639      	mov	r1, r7
 8013902:	f7ec fe81 	bl	8000608 <__aeabi_dmul>
 8013906:	e76a      	b.n	80137de <__ieee754_pow+0x3e>
 8013908:	4b3e      	ldr	r3, [pc, #248]	; (8013a04 <__ieee754_pow+0x264>)
 801390a:	4599      	cmp	r9, r3
 801390c:	d10c      	bne.n	8013928 <__ieee754_pow+0x188>
 801390e:	2d00      	cmp	r5, #0
 8013910:	db0a      	blt.n	8013928 <__ieee754_pow+0x188>
 8013912:	ec47 6b10 	vmov	d0, r6, r7
 8013916:	b009      	add	sp, #36	; 0x24
 8013918:	ecbd 8b06 	vpop	{d8-d10}
 801391c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013920:	f000 bc6c 	b.w	80141fc <__ieee754_sqrt>
 8013924:	2300      	movs	r3, #0
 8013926:	9304      	str	r3, [sp, #16]
 8013928:	ec47 6b10 	vmov	d0, r6, r7
 801392c:	f000 fd48 	bl	80143c0 <fabs>
 8013930:	ec51 0b10 	vmov	r0, r1, d0
 8013934:	f1ba 0f00 	cmp.w	sl, #0
 8013938:	d129      	bne.n	801398e <__ieee754_pow+0x1ee>
 801393a:	b124      	cbz	r4, 8013946 <__ieee754_pow+0x1a6>
 801393c:	4b2f      	ldr	r3, [pc, #188]	; (80139fc <__ieee754_pow+0x25c>)
 801393e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013942:	429a      	cmp	r2, r3
 8013944:	d123      	bne.n	801398e <__ieee754_pow+0x1ee>
 8013946:	f1b9 0f00 	cmp.w	r9, #0
 801394a:	da05      	bge.n	8013958 <__ieee754_pow+0x1b8>
 801394c:	4602      	mov	r2, r0
 801394e:	460b      	mov	r3, r1
 8013950:	2000      	movs	r0, #0
 8013952:	492a      	ldr	r1, [pc, #168]	; (80139fc <__ieee754_pow+0x25c>)
 8013954:	f7ec ff82 	bl	800085c <__aeabi_ddiv>
 8013958:	2d00      	cmp	r5, #0
 801395a:	f6bf af40 	bge.w	80137de <__ieee754_pow+0x3e>
 801395e:	9b04      	ldr	r3, [sp, #16]
 8013960:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013964:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013968:	4323      	orrs	r3, r4
 801396a:	d108      	bne.n	801397e <__ieee754_pow+0x1de>
 801396c:	4602      	mov	r2, r0
 801396e:	460b      	mov	r3, r1
 8013970:	4610      	mov	r0, r2
 8013972:	4619      	mov	r1, r3
 8013974:	f7ec fc90 	bl	8000298 <__aeabi_dsub>
 8013978:	4602      	mov	r2, r0
 801397a:	460b      	mov	r3, r1
 801397c:	e78f      	b.n	801389e <__ieee754_pow+0xfe>
 801397e:	9b04      	ldr	r3, [sp, #16]
 8013980:	2b01      	cmp	r3, #1
 8013982:	f47f af2c 	bne.w	80137de <__ieee754_pow+0x3e>
 8013986:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801398a:	4619      	mov	r1, r3
 801398c:	e727      	b.n	80137de <__ieee754_pow+0x3e>
 801398e:	0feb      	lsrs	r3, r5, #31
 8013990:	3b01      	subs	r3, #1
 8013992:	9306      	str	r3, [sp, #24]
 8013994:	9a06      	ldr	r2, [sp, #24]
 8013996:	9b04      	ldr	r3, [sp, #16]
 8013998:	4313      	orrs	r3, r2
 801399a:	d102      	bne.n	80139a2 <__ieee754_pow+0x202>
 801399c:	4632      	mov	r2, r6
 801399e:	463b      	mov	r3, r7
 80139a0:	e7e6      	b.n	8013970 <__ieee754_pow+0x1d0>
 80139a2:	4b19      	ldr	r3, [pc, #100]	; (8013a08 <__ieee754_pow+0x268>)
 80139a4:	4598      	cmp	r8, r3
 80139a6:	f340 80fb 	ble.w	8013ba0 <__ieee754_pow+0x400>
 80139aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80139ae:	4598      	cmp	r8, r3
 80139b0:	4b13      	ldr	r3, [pc, #76]	; (8013a00 <__ieee754_pow+0x260>)
 80139b2:	dd0c      	ble.n	80139ce <__ieee754_pow+0x22e>
 80139b4:	429c      	cmp	r4, r3
 80139b6:	dc0f      	bgt.n	80139d8 <__ieee754_pow+0x238>
 80139b8:	f1b9 0f00 	cmp.w	r9, #0
 80139bc:	da0f      	bge.n	80139de <__ieee754_pow+0x23e>
 80139be:	2000      	movs	r0, #0
 80139c0:	b009      	add	sp, #36	; 0x24
 80139c2:	ecbd 8b06 	vpop	{d8-d10}
 80139c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ca:	f000 bcf0 	b.w	80143ae <__math_oflow>
 80139ce:	429c      	cmp	r4, r3
 80139d0:	dbf2      	blt.n	80139b8 <__ieee754_pow+0x218>
 80139d2:	4b0a      	ldr	r3, [pc, #40]	; (80139fc <__ieee754_pow+0x25c>)
 80139d4:	429c      	cmp	r4, r3
 80139d6:	dd19      	ble.n	8013a0c <__ieee754_pow+0x26c>
 80139d8:	f1b9 0f00 	cmp.w	r9, #0
 80139dc:	dcef      	bgt.n	80139be <__ieee754_pow+0x21e>
 80139de:	2000      	movs	r0, #0
 80139e0:	b009      	add	sp, #36	; 0x24
 80139e2:	ecbd 8b06 	vpop	{d8-d10}
 80139e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ea:	f000 bcd7 	b.w	801439c <__math_uflow>
 80139ee:	bf00      	nop
 80139f0:	fff00000 	.word	0xfff00000
 80139f4:	7ff00000 	.word	0x7ff00000
 80139f8:	433fffff 	.word	0x433fffff
 80139fc:	3ff00000 	.word	0x3ff00000
 8013a00:	3fefffff 	.word	0x3fefffff
 8013a04:	3fe00000 	.word	0x3fe00000
 8013a08:	41e00000 	.word	0x41e00000
 8013a0c:	4b60      	ldr	r3, [pc, #384]	; (8013b90 <__ieee754_pow+0x3f0>)
 8013a0e:	2200      	movs	r2, #0
 8013a10:	f7ec fc42 	bl	8000298 <__aeabi_dsub>
 8013a14:	a354      	add	r3, pc, #336	; (adr r3, 8013b68 <__ieee754_pow+0x3c8>)
 8013a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a1a:	4604      	mov	r4, r0
 8013a1c:	460d      	mov	r5, r1
 8013a1e:	f7ec fdf3 	bl	8000608 <__aeabi_dmul>
 8013a22:	a353      	add	r3, pc, #332	; (adr r3, 8013b70 <__ieee754_pow+0x3d0>)
 8013a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a28:	4606      	mov	r6, r0
 8013a2a:	460f      	mov	r7, r1
 8013a2c:	4620      	mov	r0, r4
 8013a2e:	4629      	mov	r1, r5
 8013a30:	f7ec fdea 	bl	8000608 <__aeabi_dmul>
 8013a34:	4b57      	ldr	r3, [pc, #348]	; (8013b94 <__ieee754_pow+0x3f4>)
 8013a36:	4682      	mov	sl, r0
 8013a38:	468b      	mov	fp, r1
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	4629      	mov	r1, r5
 8013a40:	f7ec fde2 	bl	8000608 <__aeabi_dmul>
 8013a44:	4602      	mov	r2, r0
 8013a46:	460b      	mov	r3, r1
 8013a48:	a14b      	add	r1, pc, #300	; (adr r1, 8013b78 <__ieee754_pow+0x3d8>)
 8013a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a4e:	f7ec fc23 	bl	8000298 <__aeabi_dsub>
 8013a52:	4622      	mov	r2, r4
 8013a54:	462b      	mov	r3, r5
 8013a56:	f7ec fdd7 	bl	8000608 <__aeabi_dmul>
 8013a5a:	4602      	mov	r2, r0
 8013a5c:	460b      	mov	r3, r1
 8013a5e:	2000      	movs	r0, #0
 8013a60:	494d      	ldr	r1, [pc, #308]	; (8013b98 <__ieee754_pow+0x3f8>)
 8013a62:	f7ec fc19 	bl	8000298 <__aeabi_dsub>
 8013a66:	4622      	mov	r2, r4
 8013a68:	4680      	mov	r8, r0
 8013a6a:	4689      	mov	r9, r1
 8013a6c:	462b      	mov	r3, r5
 8013a6e:	4620      	mov	r0, r4
 8013a70:	4629      	mov	r1, r5
 8013a72:	f7ec fdc9 	bl	8000608 <__aeabi_dmul>
 8013a76:	4602      	mov	r2, r0
 8013a78:	460b      	mov	r3, r1
 8013a7a:	4640      	mov	r0, r8
 8013a7c:	4649      	mov	r1, r9
 8013a7e:	f7ec fdc3 	bl	8000608 <__aeabi_dmul>
 8013a82:	a33f      	add	r3, pc, #252	; (adr r3, 8013b80 <__ieee754_pow+0x3e0>)
 8013a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a88:	f7ec fdbe 	bl	8000608 <__aeabi_dmul>
 8013a8c:	4602      	mov	r2, r0
 8013a8e:	460b      	mov	r3, r1
 8013a90:	4650      	mov	r0, sl
 8013a92:	4659      	mov	r1, fp
 8013a94:	f7ec fc00 	bl	8000298 <__aeabi_dsub>
 8013a98:	4602      	mov	r2, r0
 8013a9a:	460b      	mov	r3, r1
 8013a9c:	4680      	mov	r8, r0
 8013a9e:	4689      	mov	r9, r1
 8013aa0:	4630      	mov	r0, r6
 8013aa2:	4639      	mov	r1, r7
 8013aa4:	f7ec fbfa 	bl	800029c <__adddf3>
 8013aa8:	2000      	movs	r0, #0
 8013aaa:	4632      	mov	r2, r6
 8013aac:	463b      	mov	r3, r7
 8013aae:	4604      	mov	r4, r0
 8013ab0:	460d      	mov	r5, r1
 8013ab2:	f7ec fbf1 	bl	8000298 <__aeabi_dsub>
 8013ab6:	4602      	mov	r2, r0
 8013ab8:	460b      	mov	r3, r1
 8013aba:	4640      	mov	r0, r8
 8013abc:	4649      	mov	r1, r9
 8013abe:	f7ec fbeb 	bl	8000298 <__aeabi_dsub>
 8013ac2:	9b04      	ldr	r3, [sp, #16]
 8013ac4:	9a06      	ldr	r2, [sp, #24]
 8013ac6:	3b01      	subs	r3, #1
 8013ac8:	4313      	orrs	r3, r2
 8013aca:	4682      	mov	sl, r0
 8013acc:	468b      	mov	fp, r1
 8013ace:	f040 81e7 	bne.w	8013ea0 <__ieee754_pow+0x700>
 8013ad2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013b88 <__ieee754_pow+0x3e8>
 8013ad6:	eeb0 8a47 	vmov.f32	s16, s14
 8013ada:	eef0 8a67 	vmov.f32	s17, s15
 8013ade:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013ae2:	2600      	movs	r6, #0
 8013ae4:	4632      	mov	r2, r6
 8013ae6:	463b      	mov	r3, r7
 8013ae8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013aec:	f7ec fbd4 	bl	8000298 <__aeabi_dsub>
 8013af0:	4622      	mov	r2, r4
 8013af2:	462b      	mov	r3, r5
 8013af4:	f7ec fd88 	bl	8000608 <__aeabi_dmul>
 8013af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013afc:	4680      	mov	r8, r0
 8013afe:	4689      	mov	r9, r1
 8013b00:	4650      	mov	r0, sl
 8013b02:	4659      	mov	r1, fp
 8013b04:	f7ec fd80 	bl	8000608 <__aeabi_dmul>
 8013b08:	4602      	mov	r2, r0
 8013b0a:	460b      	mov	r3, r1
 8013b0c:	4640      	mov	r0, r8
 8013b0e:	4649      	mov	r1, r9
 8013b10:	f7ec fbc4 	bl	800029c <__adddf3>
 8013b14:	4632      	mov	r2, r6
 8013b16:	463b      	mov	r3, r7
 8013b18:	4680      	mov	r8, r0
 8013b1a:	4689      	mov	r9, r1
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	4629      	mov	r1, r5
 8013b20:	f7ec fd72 	bl	8000608 <__aeabi_dmul>
 8013b24:	460b      	mov	r3, r1
 8013b26:	4604      	mov	r4, r0
 8013b28:	460d      	mov	r5, r1
 8013b2a:	4602      	mov	r2, r0
 8013b2c:	4649      	mov	r1, r9
 8013b2e:	4640      	mov	r0, r8
 8013b30:	f7ec fbb4 	bl	800029c <__adddf3>
 8013b34:	4b19      	ldr	r3, [pc, #100]	; (8013b9c <__ieee754_pow+0x3fc>)
 8013b36:	4299      	cmp	r1, r3
 8013b38:	ec45 4b19 	vmov	d9, r4, r5
 8013b3c:	4606      	mov	r6, r0
 8013b3e:	460f      	mov	r7, r1
 8013b40:	468b      	mov	fp, r1
 8013b42:	f340 82f1 	ble.w	8014128 <__ieee754_pow+0x988>
 8013b46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013b4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013b4e:	4303      	orrs	r3, r0
 8013b50:	f000 81e4 	beq.w	8013f1c <__ieee754_pow+0x77c>
 8013b54:	ec51 0b18 	vmov	r0, r1, d8
 8013b58:	2200      	movs	r2, #0
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	f7ec ffc6 	bl	8000aec <__aeabi_dcmplt>
 8013b60:	3800      	subs	r0, #0
 8013b62:	bf18      	it	ne
 8013b64:	2001      	movne	r0, #1
 8013b66:	e72b      	b.n	80139c0 <__ieee754_pow+0x220>
 8013b68:	60000000 	.word	0x60000000
 8013b6c:	3ff71547 	.word	0x3ff71547
 8013b70:	f85ddf44 	.word	0xf85ddf44
 8013b74:	3e54ae0b 	.word	0x3e54ae0b
 8013b78:	55555555 	.word	0x55555555
 8013b7c:	3fd55555 	.word	0x3fd55555
 8013b80:	652b82fe 	.word	0x652b82fe
 8013b84:	3ff71547 	.word	0x3ff71547
 8013b88:	00000000 	.word	0x00000000
 8013b8c:	bff00000 	.word	0xbff00000
 8013b90:	3ff00000 	.word	0x3ff00000
 8013b94:	3fd00000 	.word	0x3fd00000
 8013b98:	3fe00000 	.word	0x3fe00000
 8013b9c:	408fffff 	.word	0x408fffff
 8013ba0:	4bd5      	ldr	r3, [pc, #852]	; (8013ef8 <__ieee754_pow+0x758>)
 8013ba2:	402b      	ands	r3, r5
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	b92b      	cbnz	r3, 8013bb4 <__ieee754_pow+0x414>
 8013ba8:	4bd4      	ldr	r3, [pc, #848]	; (8013efc <__ieee754_pow+0x75c>)
 8013baa:	f7ec fd2d 	bl	8000608 <__aeabi_dmul>
 8013bae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013bb2:	460c      	mov	r4, r1
 8013bb4:	1523      	asrs	r3, r4, #20
 8013bb6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013bba:	4413      	add	r3, r2
 8013bbc:	9305      	str	r3, [sp, #20]
 8013bbe:	4bd0      	ldr	r3, [pc, #832]	; (8013f00 <__ieee754_pow+0x760>)
 8013bc0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013bc4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013bc8:	429c      	cmp	r4, r3
 8013bca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013bce:	dd08      	ble.n	8013be2 <__ieee754_pow+0x442>
 8013bd0:	4bcc      	ldr	r3, [pc, #816]	; (8013f04 <__ieee754_pow+0x764>)
 8013bd2:	429c      	cmp	r4, r3
 8013bd4:	f340 8162 	ble.w	8013e9c <__ieee754_pow+0x6fc>
 8013bd8:	9b05      	ldr	r3, [sp, #20]
 8013bda:	3301      	adds	r3, #1
 8013bdc:	9305      	str	r3, [sp, #20]
 8013bde:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013be2:	2400      	movs	r4, #0
 8013be4:	00e3      	lsls	r3, r4, #3
 8013be6:	9307      	str	r3, [sp, #28]
 8013be8:	4bc7      	ldr	r3, [pc, #796]	; (8013f08 <__ieee754_pow+0x768>)
 8013bea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013bee:	ed93 7b00 	vldr	d7, [r3]
 8013bf2:	4629      	mov	r1, r5
 8013bf4:	ec53 2b17 	vmov	r2, r3, d7
 8013bf8:	eeb0 9a47 	vmov.f32	s18, s14
 8013bfc:	eef0 9a67 	vmov.f32	s19, s15
 8013c00:	4682      	mov	sl, r0
 8013c02:	f7ec fb49 	bl	8000298 <__aeabi_dsub>
 8013c06:	4652      	mov	r2, sl
 8013c08:	4606      	mov	r6, r0
 8013c0a:	460f      	mov	r7, r1
 8013c0c:	462b      	mov	r3, r5
 8013c0e:	ec51 0b19 	vmov	r0, r1, d9
 8013c12:	f7ec fb43 	bl	800029c <__adddf3>
 8013c16:	4602      	mov	r2, r0
 8013c18:	460b      	mov	r3, r1
 8013c1a:	2000      	movs	r0, #0
 8013c1c:	49bb      	ldr	r1, [pc, #748]	; (8013f0c <__ieee754_pow+0x76c>)
 8013c1e:	f7ec fe1d 	bl	800085c <__aeabi_ddiv>
 8013c22:	ec41 0b1a 	vmov	d10, r0, r1
 8013c26:	4602      	mov	r2, r0
 8013c28:	460b      	mov	r3, r1
 8013c2a:	4630      	mov	r0, r6
 8013c2c:	4639      	mov	r1, r7
 8013c2e:	f7ec fceb 	bl	8000608 <__aeabi_dmul>
 8013c32:	2300      	movs	r3, #0
 8013c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c38:	9302      	str	r3, [sp, #8]
 8013c3a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013c3e:	46ab      	mov	fp, r5
 8013c40:	106d      	asrs	r5, r5, #1
 8013c42:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013c46:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013c4a:	ec41 0b18 	vmov	d8, r0, r1
 8013c4e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8013c52:	2200      	movs	r2, #0
 8013c54:	4640      	mov	r0, r8
 8013c56:	4649      	mov	r1, r9
 8013c58:	4614      	mov	r4, r2
 8013c5a:	461d      	mov	r5, r3
 8013c5c:	f7ec fcd4 	bl	8000608 <__aeabi_dmul>
 8013c60:	4602      	mov	r2, r0
 8013c62:	460b      	mov	r3, r1
 8013c64:	4630      	mov	r0, r6
 8013c66:	4639      	mov	r1, r7
 8013c68:	f7ec fb16 	bl	8000298 <__aeabi_dsub>
 8013c6c:	ec53 2b19 	vmov	r2, r3, d9
 8013c70:	4606      	mov	r6, r0
 8013c72:	460f      	mov	r7, r1
 8013c74:	4620      	mov	r0, r4
 8013c76:	4629      	mov	r1, r5
 8013c78:	f7ec fb0e 	bl	8000298 <__aeabi_dsub>
 8013c7c:	4602      	mov	r2, r0
 8013c7e:	460b      	mov	r3, r1
 8013c80:	4650      	mov	r0, sl
 8013c82:	4659      	mov	r1, fp
 8013c84:	f7ec fb08 	bl	8000298 <__aeabi_dsub>
 8013c88:	4642      	mov	r2, r8
 8013c8a:	464b      	mov	r3, r9
 8013c8c:	f7ec fcbc 	bl	8000608 <__aeabi_dmul>
 8013c90:	4602      	mov	r2, r0
 8013c92:	460b      	mov	r3, r1
 8013c94:	4630      	mov	r0, r6
 8013c96:	4639      	mov	r1, r7
 8013c98:	f7ec fafe 	bl	8000298 <__aeabi_dsub>
 8013c9c:	ec53 2b1a 	vmov	r2, r3, d10
 8013ca0:	f7ec fcb2 	bl	8000608 <__aeabi_dmul>
 8013ca4:	ec53 2b18 	vmov	r2, r3, d8
 8013ca8:	ec41 0b19 	vmov	d9, r0, r1
 8013cac:	ec51 0b18 	vmov	r0, r1, d8
 8013cb0:	f7ec fcaa 	bl	8000608 <__aeabi_dmul>
 8013cb4:	a37c      	add	r3, pc, #496	; (adr r3, 8013ea8 <__ieee754_pow+0x708>)
 8013cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cba:	4604      	mov	r4, r0
 8013cbc:	460d      	mov	r5, r1
 8013cbe:	f7ec fca3 	bl	8000608 <__aeabi_dmul>
 8013cc2:	a37b      	add	r3, pc, #492	; (adr r3, 8013eb0 <__ieee754_pow+0x710>)
 8013cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cc8:	f7ec fae8 	bl	800029c <__adddf3>
 8013ccc:	4622      	mov	r2, r4
 8013cce:	462b      	mov	r3, r5
 8013cd0:	f7ec fc9a 	bl	8000608 <__aeabi_dmul>
 8013cd4:	a378      	add	r3, pc, #480	; (adr r3, 8013eb8 <__ieee754_pow+0x718>)
 8013cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cda:	f7ec fadf 	bl	800029c <__adddf3>
 8013cde:	4622      	mov	r2, r4
 8013ce0:	462b      	mov	r3, r5
 8013ce2:	f7ec fc91 	bl	8000608 <__aeabi_dmul>
 8013ce6:	a376      	add	r3, pc, #472	; (adr r3, 8013ec0 <__ieee754_pow+0x720>)
 8013ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cec:	f7ec fad6 	bl	800029c <__adddf3>
 8013cf0:	4622      	mov	r2, r4
 8013cf2:	462b      	mov	r3, r5
 8013cf4:	f7ec fc88 	bl	8000608 <__aeabi_dmul>
 8013cf8:	a373      	add	r3, pc, #460	; (adr r3, 8013ec8 <__ieee754_pow+0x728>)
 8013cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cfe:	f7ec facd 	bl	800029c <__adddf3>
 8013d02:	4622      	mov	r2, r4
 8013d04:	462b      	mov	r3, r5
 8013d06:	f7ec fc7f 	bl	8000608 <__aeabi_dmul>
 8013d0a:	a371      	add	r3, pc, #452	; (adr r3, 8013ed0 <__ieee754_pow+0x730>)
 8013d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d10:	f7ec fac4 	bl	800029c <__adddf3>
 8013d14:	4622      	mov	r2, r4
 8013d16:	4606      	mov	r6, r0
 8013d18:	460f      	mov	r7, r1
 8013d1a:	462b      	mov	r3, r5
 8013d1c:	4620      	mov	r0, r4
 8013d1e:	4629      	mov	r1, r5
 8013d20:	f7ec fc72 	bl	8000608 <__aeabi_dmul>
 8013d24:	4602      	mov	r2, r0
 8013d26:	460b      	mov	r3, r1
 8013d28:	4630      	mov	r0, r6
 8013d2a:	4639      	mov	r1, r7
 8013d2c:	f7ec fc6c 	bl	8000608 <__aeabi_dmul>
 8013d30:	4642      	mov	r2, r8
 8013d32:	4604      	mov	r4, r0
 8013d34:	460d      	mov	r5, r1
 8013d36:	464b      	mov	r3, r9
 8013d38:	ec51 0b18 	vmov	r0, r1, d8
 8013d3c:	f7ec faae 	bl	800029c <__adddf3>
 8013d40:	ec53 2b19 	vmov	r2, r3, d9
 8013d44:	f7ec fc60 	bl	8000608 <__aeabi_dmul>
 8013d48:	4622      	mov	r2, r4
 8013d4a:	462b      	mov	r3, r5
 8013d4c:	f7ec faa6 	bl	800029c <__adddf3>
 8013d50:	4642      	mov	r2, r8
 8013d52:	4682      	mov	sl, r0
 8013d54:	468b      	mov	fp, r1
 8013d56:	464b      	mov	r3, r9
 8013d58:	4640      	mov	r0, r8
 8013d5a:	4649      	mov	r1, r9
 8013d5c:	f7ec fc54 	bl	8000608 <__aeabi_dmul>
 8013d60:	4b6b      	ldr	r3, [pc, #428]	; (8013f10 <__ieee754_pow+0x770>)
 8013d62:	2200      	movs	r2, #0
 8013d64:	4606      	mov	r6, r0
 8013d66:	460f      	mov	r7, r1
 8013d68:	f7ec fa98 	bl	800029c <__adddf3>
 8013d6c:	4652      	mov	r2, sl
 8013d6e:	465b      	mov	r3, fp
 8013d70:	f7ec fa94 	bl	800029c <__adddf3>
 8013d74:	2000      	movs	r0, #0
 8013d76:	4604      	mov	r4, r0
 8013d78:	460d      	mov	r5, r1
 8013d7a:	4602      	mov	r2, r0
 8013d7c:	460b      	mov	r3, r1
 8013d7e:	4640      	mov	r0, r8
 8013d80:	4649      	mov	r1, r9
 8013d82:	f7ec fc41 	bl	8000608 <__aeabi_dmul>
 8013d86:	4b62      	ldr	r3, [pc, #392]	; (8013f10 <__ieee754_pow+0x770>)
 8013d88:	4680      	mov	r8, r0
 8013d8a:	4689      	mov	r9, r1
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	4620      	mov	r0, r4
 8013d90:	4629      	mov	r1, r5
 8013d92:	f7ec fa81 	bl	8000298 <__aeabi_dsub>
 8013d96:	4632      	mov	r2, r6
 8013d98:	463b      	mov	r3, r7
 8013d9a:	f7ec fa7d 	bl	8000298 <__aeabi_dsub>
 8013d9e:	4602      	mov	r2, r0
 8013da0:	460b      	mov	r3, r1
 8013da2:	4650      	mov	r0, sl
 8013da4:	4659      	mov	r1, fp
 8013da6:	f7ec fa77 	bl	8000298 <__aeabi_dsub>
 8013daa:	ec53 2b18 	vmov	r2, r3, d8
 8013dae:	f7ec fc2b 	bl	8000608 <__aeabi_dmul>
 8013db2:	4622      	mov	r2, r4
 8013db4:	4606      	mov	r6, r0
 8013db6:	460f      	mov	r7, r1
 8013db8:	462b      	mov	r3, r5
 8013dba:	ec51 0b19 	vmov	r0, r1, d9
 8013dbe:	f7ec fc23 	bl	8000608 <__aeabi_dmul>
 8013dc2:	4602      	mov	r2, r0
 8013dc4:	460b      	mov	r3, r1
 8013dc6:	4630      	mov	r0, r6
 8013dc8:	4639      	mov	r1, r7
 8013dca:	f7ec fa67 	bl	800029c <__adddf3>
 8013dce:	4606      	mov	r6, r0
 8013dd0:	460f      	mov	r7, r1
 8013dd2:	4602      	mov	r2, r0
 8013dd4:	460b      	mov	r3, r1
 8013dd6:	4640      	mov	r0, r8
 8013dd8:	4649      	mov	r1, r9
 8013dda:	f7ec fa5f 	bl	800029c <__adddf3>
 8013dde:	a33e      	add	r3, pc, #248	; (adr r3, 8013ed8 <__ieee754_pow+0x738>)
 8013de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de4:	2000      	movs	r0, #0
 8013de6:	4604      	mov	r4, r0
 8013de8:	460d      	mov	r5, r1
 8013dea:	f7ec fc0d 	bl	8000608 <__aeabi_dmul>
 8013dee:	4642      	mov	r2, r8
 8013df0:	ec41 0b18 	vmov	d8, r0, r1
 8013df4:	464b      	mov	r3, r9
 8013df6:	4620      	mov	r0, r4
 8013df8:	4629      	mov	r1, r5
 8013dfa:	f7ec fa4d 	bl	8000298 <__aeabi_dsub>
 8013dfe:	4602      	mov	r2, r0
 8013e00:	460b      	mov	r3, r1
 8013e02:	4630      	mov	r0, r6
 8013e04:	4639      	mov	r1, r7
 8013e06:	f7ec fa47 	bl	8000298 <__aeabi_dsub>
 8013e0a:	a335      	add	r3, pc, #212	; (adr r3, 8013ee0 <__ieee754_pow+0x740>)
 8013e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e10:	f7ec fbfa 	bl	8000608 <__aeabi_dmul>
 8013e14:	a334      	add	r3, pc, #208	; (adr r3, 8013ee8 <__ieee754_pow+0x748>)
 8013e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e1a:	4606      	mov	r6, r0
 8013e1c:	460f      	mov	r7, r1
 8013e1e:	4620      	mov	r0, r4
 8013e20:	4629      	mov	r1, r5
 8013e22:	f7ec fbf1 	bl	8000608 <__aeabi_dmul>
 8013e26:	4602      	mov	r2, r0
 8013e28:	460b      	mov	r3, r1
 8013e2a:	4630      	mov	r0, r6
 8013e2c:	4639      	mov	r1, r7
 8013e2e:	f7ec fa35 	bl	800029c <__adddf3>
 8013e32:	9a07      	ldr	r2, [sp, #28]
 8013e34:	4b37      	ldr	r3, [pc, #220]	; (8013f14 <__ieee754_pow+0x774>)
 8013e36:	4413      	add	r3, r2
 8013e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e3c:	f7ec fa2e 	bl	800029c <__adddf3>
 8013e40:	4682      	mov	sl, r0
 8013e42:	9805      	ldr	r0, [sp, #20]
 8013e44:	468b      	mov	fp, r1
 8013e46:	f7ec fb75 	bl	8000534 <__aeabi_i2d>
 8013e4a:	9a07      	ldr	r2, [sp, #28]
 8013e4c:	4b32      	ldr	r3, [pc, #200]	; (8013f18 <__ieee754_pow+0x778>)
 8013e4e:	4413      	add	r3, r2
 8013e50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013e54:	4606      	mov	r6, r0
 8013e56:	460f      	mov	r7, r1
 8013e58:	4652      	mov	r2, sl
 8013e5a:	465b      	mov	r3, fp
 8013e5c:	ec51 0b18 	vmov	r0, r1, d8
 8013e60:	f7ec fa1c 	bl	800029c <__adddf3>
 8013e64:	4642      	mov	r2, r8
 8013e66:	464b      	mov	r3, r9
 8013e68:	f7ec fa18 	bl	800029c <__adddf3>
 8013e6c:	4632      	mov	r2, r6
 8013e6e:	463b      	mov	r3, r7
 8013e70:	f7ec fa14 	bl	800029c <__adddf3>
 8013e74:	2000      	movs	r0, #0
 8013e76:	4632      	mov	r2, r6
 8013e78:	463b      	mov	r3, r7
 8013e7a:	4604      	mov	r4, r0
 8013e7c:	460d      	mov	r5, r1
 8013e7e:	f7ec fa0b 	bl	8000298 <__aeabi_dsub>
 8013e82:	4642      	mov	r2, r8
 8013e84:	464b      	mov	r3, r9
 8013e86:	f7ec fa07 	bl	8000298 <__aeabi_dsub>
 8013e8a:	ec53 2b18 	vmov	r2, r3, d8
 8013e8e:	f7ec fa03 	bl	8000298 <__aeabi_dsub>
 8013e92:	4602      	mov	r2, r0
 8013e94:	460b      	mov	r3, r1
 8013e96:	4650      	mov	r0, sl
 8013e98:	4659      	mov	r1, fp
 8013e9a:	e610      	b.n	8013abe <__ieee754_pow+0x31e>
 8013e9c:	2401      	movs	r4, #1
 8013e9e:	e6a1      	b.n	8013be4 <__ieee754_pow+0x444>
 8013ea0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013ef0 <__ieee754_pow+0x750>
 8013ea4:	e617      	b.n	8013ad6 <__ieee754_pow+0x336>
 8013ea6:	bf00      	nop
 8013ea8:	4a454eef 	.word	0x4a454eef
 8013eac:	3fca7e28 	.word	0x3fca7e28
 8013eb0:	93c9db65 	.word	0x93c9db65
 8013eb4:	3fcd864a 	.word	0x3fcd864a
 8013eb8:	a91d4101 	.word	0xa91d4101
 8013ebc:	3fd17460 	.word	0x3fd17460
 8013ec0:	518f264d 	.word	0x518f264d
 8013ec4:	3fd55555 	.word	0x3fd55555
 8013ec8:	db6fabff 	.word	0xdb6fabff
 8013ecc:	3fdb6db6 	.word	0x3fdb6db6
 8013ed0:	33333303 	.word	0x33333303
 8013ed4:	3fe33333 	.word	0x3fe33333
 8013ed8:	e0000000 	.word	0xe0000000
 8013edc:	3feec709 	.word	0x3feec709
 8013ee0:	dc3a03fd 	.word	0xdc3a03fd
 8013ee4:	3feec709 	.word	0x3feec709
 8013ee8:	145b01f5 	.word	0x145b01f5
 8013eec:	be3e2fe0 	.word	0xbe3e2fe0
 8013ef0:	00000000 	.word	0x00000000
 8013ef4:	3ff00000 	.word	0x3ff00000
 8013ef8:	7ff00000 	.word	0x7ff00000
 8013efc:	43400000 	.word	0x43400000
 8013f00:	0003988e 	.word	0x0003988e
 8013f04:	000bb679 	.word	0x000bb679
 8013f08:	080166f8 	.word	0x080166f8
 8013f0c:	3ff00000 	.word	0x3ff00000
 8013f10:	40080000 	.word	0x40080000
 8013f14:	08016718 	.word	0x08016718
 8013f18:	08016708 	.word	0x08016708
 8013f1c:	a3b5      	add	r3, pc, #724	; (adr r3, 80141f4 <__ieee754_pow+0xa54>)
 8013f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f22:	4640      	mov	r0, r8
 8013f24:	4649      	mov	r1, r9
 8013f26:	f7ec f9b9 	bl	800029c <__adddf3>
 8013f2a:	4622      	mov	r2, r4
 8013f2c:	ec41 0b1a 	vmov	d10, r0, r1
 8013f30:	462b      	mov	r3, r5
 8013f32:	4630      	mov	r0, r6
 8013f34:	4639      	mov	r1, r7
 8013f36:	f7ec f9af 	bl	8000298 <__aeabi_dsub>
 8013f3a:	4602      	mov	r2, r0
 8013f3c:	460b      	mov	r3, r1
 8013f3e:	ec51 0b1a 	vmov	r0, r1, d10
 8013f42:	f7ec fdf1 	bl	8000b28 <__aeabi_dcmpgt>
 8013f46:	2800      	cmp	r0, #0
 8013f48:	f47f ae04 	bne.w	8013b54 <__ieee754_pow+0x3b4>
 8013f4c:	4aa4      	ldr	r2, [pc, #656]	; (80141e0 <__ieee754_pow+0xa40>)
 8013f4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013f52:	4293      	cmp	r3, r2
 8013f54:	f340 8108 	ble.w	8014168 <__ieee754_pow+0x9c8>
 8013f58:	151b      	asrs	r3, r3, #20
 8013f5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013f5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013f62:	fa4a f303 	asr.w	r3, sl, r3
 8013f66:	445b      	add	r3, fp
 8013f68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013f6c:	4e9d      	ldr	r6, [pc, #628]	; (80141e4 <__ieee754_pow+0xa44>)
 8013f6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013f72:	4116      	asrs	r6, r2
 8013f74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013f78:	2000      	movs	r0, #0
 8013f7a:	ea23 0106 	bic.w	r1, r3, r6
 8013f7e:	f1c2 0214 	rsb	r2, r2, #20
 8013f82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013f86:	fa4a fa02 	asr.w	sl, sl, r2
 8013f8a:	f1bb 0f00 	cmp.w	fp, #0
 8013f8e:	4602      	mov	r2, r0
 8013f90:	460b      	mov	r3, r1
 8013f92:	4620      	mov	r0, r4
 8013f94:	4629      	mov	r1, r5
 8013f96:	bfb8      	it	lt
 8013f98:	f1ca 0a00 	rsblt	sl, sl, #0
 8013f9c:	f7ec f97c 	bl	8000298 <__aeabi_dsub>
 8013fa0:	ec41 0b19 	vmov	d9, r0, r1
 8013fa4:	4642      	mov	r2, r8
 8013fa6:	464b      	mov	r3, r9
 8013fa8:	ec51 0b19 	vmov	r0, r1, d9
 8013fac:	f7ec f976 	bl	800029c <__adddf3>
 8013fb0:	a37b      	add	r3, pc, #492	; (adr r3, 80141a0 <__ieee754_pow+0xa00>)
 8013fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fb6:	2000      	movs	r0, #0
 8013fb8:	4604      	mov	r4, r0
 8013fba:	460d      	mov	r5, r1
 8013fbc:	f7ec fb24 	bl	8000608 <__aeabi_dmul>
 8013fc0:	ec53 2b19 	vmov	r2, r3, d9
 8013fc4:	4606      	mov	r6, r0
 8013fc6:	460f      	mov	r7, r1
 8013fc8:	4620      	mov	r0, r4
 8013fca:	4629      	mov	r1, r5
 8013fcc:	f7ec f964 	bl	8000298 <__aeabi_dsub>
 8013fd0:	4602      	mov	r2, r0
 8013fd2:	460b      	mov	r3, r1
 8013fd4:	4640      	mov	r0, r8
 8013fd6:	4649      	mov	r1, r9
 8013fd8:	f7ec f95e 	bl	8000298 <__aeabi_dsub>
 8013fdc:	a372      	add	r3, pc, #456	; (adr r3, 80141a8 <__ieee754_pow+0xa08>)
 8013fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fe2:	f7ec fb11 	bl	8000608 <__aeabi_dmul>
 8013fe6:	a372      	add	r3, pc, #456	; (adr r3, 80141b0 <__ieee754_pow+0xa10>)
 8013fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fec:	4680      	mov	r8, r0
 8013fee:	4689      	mov	r9, r1
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	4629      	mov	r1, r5
 8013ff4:	f7ec fb08 	bl	8000608 <__aeabi_dmul>
 8013ff8:	4602      	mov	r2, r0
 8013ffa:	460b      	mov	r3, r1
 8013ffc:	4640      	mov	r0, r8
 8013ffe:	4649      	mov	r1, r9
 8014000:	f7ec f94c 	bl	800029c <__adddf3>
 8014004:	4604      	mov	r4, r0
 8014006:	460d      	mov	r5, r1
 8014008:	4602      	mov	r2, r0
 801400a:	460b      	mov	r3, r1
 801400c:	4630      	mov	r0, r6
 801400e:	4639      	mov	r1, r7
 8014010:	f7ec f944 	bl	800029c <__adddf3>
 8014014:	4632      	mov	r2, r6
 8014016:	463b      	mov	r3, r7
 8014018:	4680      	mov	r8, r0
 801401a:	4689      	mov	r9, r1
 801401c:	f7ec f93c 	bl	8000298 <__aeabi_dsub>
 8014020:	4602      	mov	r2, r0
 8014022:	460b      	mov	r3, r1
 8014024:	4620      	mov	r0, r4
 8014026:	4629      	mov	r1, r5
 8014028:	f7ec f936 	bl	8000298 <__aeabi_dsub>
 801402c:	4642      	mov	r2, r8
 801402e:	4606      	mov	r6, r0
 8014030:	460f      	mov	r7, r1
 8014032:	464b      	mov	r3, r9
 8014034:	4640      	mov	r0, r8
 8014036:	4649      	mov	r1, r9
 8014038:	f7ec fae6 	bl	8000608 <__aeabi_dmul>
 801403c:	a35e      	add	r3, pc, #376	; (adr r3, 80141b8 <__ieee754_pow+0xa18>)
 801403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014042:	4604      	mov	r4, r0
 8014044:	460d      	mov	r5, r1
 8014046:	f7ec fadf 	bl	8000608 <__aeabi_dmul>
 801404a:	a35d      	add	r3, pc, #372	; (adr r3, 80141c0 <__ieee754_pow+0xa20>)
 801404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014050:	f7ec f922 	bl	8000298 <__aeabi_dsub>
 8014054:	4622      	mov	r2, r4
 8014056:	462b      	mov	r3, r5
 8014058:	f7ec fad6 	bl	8000608 <__aeabi_dmul>
 801405c:	a35a      	add	r3, pc, #360	; (adr r3, 80141c8 <__ieee754_pow+0xa28>)
 801405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014062:	f7ec f91b 	bl	800029c <__adddf3>
 8014066:	4622      	mov	r2, r4
 8014068:	462b      	mov	r3, r5
 801406a:	f7ec facd 	bl	8000608 <__aeabi_dmul>
 801406e:	a358      	add	r3, pc, #352	; (adr r3, 80141d0 <__ieee754_pow+0xa30>)
 8014070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014074:	f7ec f910 	bl	8000298 <__aeabi_dsub>
 8014078:	4622      	mov	r2, r4
 801407a:	462b      	mov	r3, r5
 801407c:	f7ec fac4 	bl	8000608 <__aeabi_dmul>
 8014080:	a355      	add	r3, pc, #340	; (adr r3, 80141d8 <__ieee754_pow+0xa38>)
 8014082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014086:	f7ec f909 	bl	800029c <__adddf3>
 801408a:	4622      	mov	r2, r4
 801408c:	462b      	mov	r3, r5
 801408e:	f7ec fabb 	bl	8000608 <__aeabi_dmul>
 8014092:	4602      	mov	r2, r0
 8014094:	460b      	mov	r3, r1
 8014096:	4640      	mov	r0, r8
 8014098:	4649      	mov	r1, r9
 801409a:	f7ec f8fd 	bl	8000298 <__aeabi_dsub>
 801409e:	4604      	mov	r4, r0
 80140a0:	460d      	mov	r5, r1
 80140a2:	4602      	mov	r2, r0
 80140a4:	460b      	mov	r3, r1
 80140a6:	4640      	mov	r0, r8
 80140a8:	4649      	mov	r1, r9
 80140aa:	f7ec faad 	bl	8000608 <__aeabi_dmul>
 80140ae:	2200      	movs	r2, #0
 80140b0:	ec41 0b19 	vmov	d9, r0, r1
 80140b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80140b8:	4620      	mov	r0, r4
 80140ba:	4629      	mov	r1, r5
 80140bc:	f7ec f8ec 	bl	8000298 <__aeabi_dsub>
 80140c0:	4602      	mov	r2, r0
 80140c2:	460b      	mov	r3, r1
 80140c4:	ec51 0b19 	vmov	r0, r1, d9
 80140c8:	f7ec fbc8 	bl	800085c <__aeabi_ddiv>
 80140cc:	4632      	mov	r2, r6
 80140ce:	4604      	mov	r4, r0
 80140d0:	460d      	mov	r5, r1
 80140d2:	463b      	mov	r3, r7
 80140d4:	4640      	mov	r0, r8
 80140d6:	4649      	mov	r1, r9
 80140d8:	f7ec fa96 	bl	8000608 <__aeabi_dmul>
 80140dc:	4632      	mov	r2, r6
 80140de:	463b      	mov	r3, r7
 80140e0:	f7ec f8dc 	bl	800029c <__adddf3>
 80140e4:	4602      	mov	r2, r0
 80140e6:	460b      	mov	r3, r1
 80140e8:	4620      	mov	r0, r4
 80140ea:	4629      	mov	r1, r5
 80140ec:	f7ec f8d4 	bl	8000298 <__aeabi_dsub>
 80140f0:	4642      	mov	r2, r8
 80140f2:	464b      	mov	r3, r9
 80140f4:	f7ec f8d0 	bl	8000298 <__aeabi_dsub>
 80140f8:	460b      	mov	r3, r1
 80140fa:	4602      	mov	r2, r0
 80140fc:	493a      	ldr	r1, [pc, #232]	; (80141e8 <__ieee754_pow+0xa48>)
 80140fe:	2000      	movs	r0, #0
 8014100:	f7ec f8ca 	bl	8000298 <__aeabi_dsub>
 8014104:	ec41 0b10 	vmov	d0, r0, r1
 8014108:	ee10 3a90 	vmov	r3, s1
 801410c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014114:	da2b      	bge.n	801416e <__ieee754_pow+0x9ce>
 8014116:	4650      	mov	r0, sl
 8014118:	f000 f966 	bl	80143e8 <scalbn>
 801411c:	ec51 0b10 	vmov	r0, r1, d0
 8014120:	ec53 2b18 	vmov	r2, r3, d8
 8014124:	f7ff bbed 	b.w	8013902 <__ieee754_pow+0x162>
 8014128:	4b30      	ldr	r3, [pc, #192]	; (80141ec <__ieee754_pow+0xa4c>)
 801412a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801412e:	429e      	cmp	r6, r3
 8014130:	f77f af0c 	ble.w	8013f4c <__ieee754_pow+0x7ac>
 8014134:	4b2e      	ldr	r3, [pc, #184]	; (80141f0 <__ieee754_pow+0xa50>)
 8014136:	440b      	add	r3, r1
 8014138:	4303      	orrs	r3, r0
 801413a:	d009      	beq.n	8014150 <__ieee754_pow+0x9b0>
 801413c:	ec51 0b18 	vmov	r0, r1, d8
 8014140:	2200      	movs	r2, #0
 8014142:	2300      	movs	r3, #0
 8014144:	f7ec fcd2 	bl	8000aec <__aeabi_dcmplt>
 8014148:	3800      	subs	r0, #0
 801414a:	bf18      	it	ne
 801414c:	2001      	movne	r0, #1
 801414e:	e447      	b.n	80139e0 <__ieee754_pow+0x240>
 8014150:	4622      	mov	r2, r4
 8014152:	462b      	mov	r3, r5
 8014154:	f7ec f8a0 	bl	8000298 <__aeabi_dsub>
 8014158:	4642      	mov	r2, r8
 801415a:	464b      	mov	r3, r9
 801415c:	f7ec fcda 	bl	8000b14 <__aeabi_dcmpge>
 8014160:	2800      	cmp	r0, #0
 8014162:	f43f aef3 	beq.w	8013f4c <__ieee754_pow+0x7ac>
 8014166:	e7e9      	b.n	801413c <__ieee754_pow+0x99c>
 8014168:	f04f 0a00 	mov.w	sl, #0
 801416c:	e71a      	b.n	8013fa4 <__ieee754_pow+0x804>
 801416e:	ec51 0b10 	vmov	r0, r1, d0
 8014172:	4619      	mov	r1, r3
 8014174:	e7d4      	b.n	8014120 <__ieee754_pow+0x980>
 8014176:	491c      	ldr	r1, [pc, #112]	; (80141e8 <__ieee754_pow+0xa48>)
 8014178:	2000      	movs	r0, #0
 801417a:	f7ff bb30 	b.w	80137de <__ieee754_pow+0x3e>
 801417e:	2000      	movs	r0, #0
 8014180:	2100      	movs	r1, #0
 8014182:	f7ff bb2c 	b.w	80137de <__ieee754_pow+0x3e>
 8014186:	4630      	mov	r0, r6
 8014188:	4639      	mov	r1, r7
 801418a:	f7ff bb28 	b.w	80137de <__ieee754_pow+0x3e>
 801418e:	9204      	str	r2, [sp, #16]
 8014190:	f7ff bb7a 	b.w	8013888 <__ieee754_pow+0xe8>
 8014194:	2300      	movs	r3, #0
 8014196:	f7ff bb64 	b.w	8013862 <__ieee754_pow+0xc2>
 801419a:	bf00      	nop
 801419c:	f3af 8000 	nop.w
 80141a0:	00000000 	.word	0x00000000
 80141a4:	3fe62e43 	.word	0x3fe62e43
 80141a8:	fefa39ef 	.word	0xfefa39ef
 80141ac:	3fe62e42 	.word	0x3fe62e42
 80141b0:	0ca86c39 	.word	0x0ca86c39
 80141b4:	be205c61 	.word	0xbe205c61
 80141b8:	72bea4d0 	.word	0x72bea4d0
 80141bc:	3e663769 	.word	0x3e663769
 80141c0:	c5d26bf1 	.word	0xc5d26bf1
 80141c4:	3ebbbd41 	.word	0x3ebbbd41
 80141c8:	af25de2c 	.word	0xaf25de2c
 80141cc:	3f11566a 	.word	0x3f11566a
 80141d0:	16bebd93 	.word	0x16bebd93
 80141d4:	3f66c16c 	.word	0x3f66c16c
 80141d8:	5555553e 	.word	0x5555553e
 80141dc:	3fc55555 	.word	0x3fc55555
 80141e0:	3fe00000 	.word	0x3fe00000
 80141e4:	000fffff 	.word	0x000fffff
 80141e8:	3ff00000 	.word	0x3ff00000
 80141ec:	4090cbff 	.word	0x4090cbff
 80141f0:	3f6f3400 	.word	0x3f6f3400
 80141f4:	652b82fe 	.word	0x652b82fe
 80141f8:	3c971547 	.word	0x3c971547

080141fc <__ieee754_sqrt>:
 80141fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014200:	ec55 4b10 	vmov	r4, r5, d0
 8014204:	4e55      	ldr	r6, [pc, #340]	; (801435c <__ieee754_sqrt+0x160>)
 8014206:	43ae      	bics	r6, r5
 8014208:	ee10 0a10 	vmov	r0, s0
 801420c:	ee10 3a10 	vmov	r3, s0
 8014210:	462a      	mov	r2, r5
 8014212:	4629      	mov	r1, r5
 8014214:	d110      	bne.n	8014238 <__ieee754_sqrt+0x3c>
 8014216:	ee10 2a10 	vmov	r2, s0
 801421a:	462b      	mov	r3, r5
 801421c:	f7ec f9f4 	bl	8000608 <__aeabi_dmul>
 8014220:	4602      	mov	r2, r0
 8014222:	460b      	mov	r3, r1
 8014224:	4620      	mov	r0, r4
 8014226:	4629      	mov	r1, r5
 8014228:	f7ec f838 	bl	800029c <__adddf3>
 801422c:	4604      	mov	r4, r0
 801422e:	460d      	mov	r5, r1
 8014230:	ec45 4b10 	vmov	d0, r4, r5
 8014234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014238:	2d00      	cmp	r5, #0
 801423a:	dc10      	bgt.n	801425e <__ieee754_sqrt+0x62>
 801423c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014240:	4330      	orrs	r0, r6
 8014242:	d0f5      	beq.n	8014230 <__ieee754_sqrt+0x34>
 8014244:	b15d      	cbz	r5, 801425e <__ieee754_sqrt+0x62>
 8014246:	ee10 2a10 	vmov	r2, s0
 801424a:	462b      	mov	r3, r5
 801424c:	ee10 0a10 	vmov	r0, s0
 8014250:	f7ec f822 	bl	8000298 <__aeabi_dsub>
 8014254:	4602      	mov	r2, r0
 8014256:	460b      	mov	r3, r1
 8014258:	f7ec fb00 	bl	800085c <__aeabi_ddiv>
 801425c:	e7e6      	b.n	801422c <__ieee754_sqrt+0x30>
 801425e:	1512      	asrs	r2, r2, #20
 8014260:	d074      	beq.n	801434c <__ieee754_sqrt+0x150>
 8014262:	07d4      	lsls	r4, r2, #31
 8014264:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014268:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801426c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8014270:	bf5e      	ittt	pl
 8014272:	0fda      	lsrpl	r2, r3, #31
 8014274:	005b      	lslpl	r3, r3, #1
 8014276:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801427a:	2400      	movs	r4, #0
 801427c:	0fda      	lsrs	r2, r3, #31
 801427e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8014282:	107f      	asrs	r7, r7, #1
 8014284:	005b      	lsls	r3, r3, #1
 8014286:	2516      	movs	r5, #22
 8014288:	4620      	mov	r0, r4
 801428a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801428e:	1886      	adds	r6, r0, r2
 8014290:	428e      	cmp	r6, r1
 8014292:	bfde      	ittt	le
 8014294:	1b89      	suble	r1, r1, r6
 8014296:	18b0      	addle	r0, r6, r2
 8014298:	18a4      	addle	r4, r4, r2
 801429a:	0049      	lsls	r1, r1, #1
 801429c:	3d01      	subs	r5, #1
 801429e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80142a2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80142a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80142aa:	d1f0      	bne.n	801428e <__ieee754_sqrt+0x92>
 80142ac:	462a      	mov	r2, r5
 80142ae:	f04f 0e20 	mov.w	lr, #32
 80142b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80142b6:	4281      	cmp	r1, r0
 80142b8:	eb06 0c05 	add.w	ip, r6, r5
 80142bc:	dc02      	bgt.n	80142c4 <__ieee754_sqrt+0xc8>
 80142be:	d113      	bne.n	80142e8 <__ieee754_sqrt+0xec>
 80142c0:	459c      	cmp	ip, r3
 80142c2:	d811      	bhi.n	80142e8 <__ieee754_sqrt+0xec>
 80142c4:	f1bc 0f00 	cmp.w	ip, #0
 80142c8:	eb0c 0506 	add.w	r5, ip, r6
 80142cc:	da43      	bge.n	8014356 <__ieee754_sqrt+0x15a>
 80142ce:	2d00      	cmp	r5, #0
 80142d0:	db41      	blt.n	8014356 <__ieee754_sqrt+0x15a>
 80142d2:	f100 0801 	add.w	r8, r0, #1
 80142d6:	1a09      	subs	r1, r1, r0
 80142d8:	459c      	cmp	ip, r3
 80142da:	bf88      	it	hi
 80142dc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80142e0:	eba3 030c 	sub.w	r3, r3, ip
 80142e4:	4432      	add	r2, r6
 80142e6:	4640      	mov	r0, r8
 80142e8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80142ec:	f1be 0e01 	subs.w	lr, lr, #1
 80142f0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80142f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80142f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80142fc:	d1db      	bne.n	80142b6 <__ieee754_sqrt+0xba>
 80142fe:	430b      	orrs	r3, r1
 8014300:	d006      	beq.n	8014310 <__ieee754_sqrt+0x114>
 8014302:	1c50      	adds	r0, r2, #1
 8014304:	bf13      	iteet	ne
 8014306:	3201      	addne	r2, #1
 8014308:	3401      	addeq	r4, #1
 801430a:	4672      	moveq	r2, lr
 801430c:	f022 0201 	bicne.w	r2, r2, #1
 8014310:	1063      	asrs	r3, r4, #1
 8014312:	0852      	lsrs	r2, r2, #1
 8014314:	07e1      	lsls	r1, r4, #31
 8014316:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801431a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801431e:	bf48      	it	mi
 8014320:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8014324:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8014328:	4614      	mov	r4, r2
 801432a:	e781      	b.n	8014230 <__ieee754_sqrt+0x34>
 801432c:	0ad9      	lsrs	r1, r3, #11
 801432e:	3815      	subs	r0, #21
 8014330:	055b      	lsls	r3, r3, #21
 8014332:	2900      	cmp	r1, #0
 8014334:	d0fa      	beq.n	801432c <__ieee754_sqrt+0x130>
 8014336:	02cd      	lsls	r5, r1, #11
 8014338:	d50a      	bpl.n	8014350 <__ieee754_sqrt+0x154>
 801433a:	f1c2 0420 	rsb	r4, r2, #32
 801433e:	fa23 f404 	lsr.w	r4, r3, r4
 8014342:	1e55      	subs	r5, r2, #1
 8014344:	4093      	lsls	r3, r2
 8014346:	4321      	orrs	r1, r4
 8014348:	1b42      	subs	r2, r0, r5
 801434a:	e78a      	b.n	8014262 <__ieee754_sqrt+0x66>
 801434c:	4610      	mov	r0, r2
 801434e:	e7f0      	b.n	8014332 <__ieee754_sqrt+0x136>
 8014350:	0049      	lsls	r1, r1, #1
 8014352:	3201      	adds	r2, #1
 8014354:	e7ef      	b.n	8014336 <__ieee754_sqrt+0x13a>
 8014356:	4680      	mov	r8, r0
 8014358:	e7bd      	b.n	80142d6 <__ieee754_sqrt+0xda>
 801435a:	bf00      	nop
 801435c:	7ff00000 	.word	0x7ff00000

08014360 <with_errno>:
 8014360:	b570      	push	{r4, r5, r6, lr}
 8014362:	4604      	mov	r4, r0
 8014364:	460d      	mov	r5, r1
 8014366:	4616      	mov	r6, r2
 8014368:	f7fa fc9a 	bl	800eca0 <__errno>
 801436c:	4629      	mov	r1, r5
 801436e:	6006      	str	r6, [r0, #0]
 8014370:	4620      	mov	r0, r4
 8014372:	bd70      	pop	{r4, r5, r6, pc}

08014374 <xflow>:
 8014374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014376:	4614      	mov	r4, r2
 8014378:	461d      	mov	r5, r3
 801437a:	b108      	cbz	r0, 8014380 <xflow+0xc>
 801437c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014380:	e9cd 2300 	strd	r2, r3, [sp]
 8014384:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014388:	4620      	mov	r0, r4
 801438a:	4629      	mov	r1, r5
 801438c:	f7ec f93c 	bl	8000608 <__aeabi_dmul>
 8014390:	2222      	movs	r2, #34	; 0x22
 8014392:	b003      	add	sp, #12
 8014394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014398:	f7ff bfe2 	b.w	8014360 <with_errno>

0801439c <__math_uflow>:
 801439c:	b508      	push	{r3, lr}
 801439e:	2200      	movs	r2, #0
 80143a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80143a4:	f7ff ffe6 	bl	8014374 <xflow>
 80143a8:	ec41 0b10 	vmov	d0, r0, r1
 80143ac:	bd08      	pop	{r3, pc}

080143ae <__math_oflow>:
 80143ae:	b508      	push	{r3, lr}
 80143b0:	2200      	movs	r2, #0
 80143b2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80143b6:	f7ff ffdd 	bl	8014374 <xflow>
 80143ba:	ec41 0b10 	vmov	d0, r0, r1
 80143be:	bd08      	pop	{r3, pc}

080143c0 <fabs>:
 80143c0:	ec51 0b10 	vmov	r0, r1, d0
 80143c4:	ee10 2a10 	vmov	r2, s0
 80143c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80143cc:	ec43 2b10 	vmov	d0, r2, r3
 80143d0:	4770      	bx	lr

080143d2 <finite>:
 80143d2:	b082      	sub	sp, #8
 80143d4:	ed8d 0b00 	vstr	d0, [sp]
 80143d8:	9801      	ldr	r0, [sp, #4]
 80143da:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80143de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80143e2:	0fc0      	lsrs	r0, r0, #31
 80143e4:	b002      	add	sp, #8
 80143e6:	4770      	bx	lr

080143e8 <scalbn>:
 80143e8:	b570      	push	{r4, r5, r6, lr}
 80143ea:	ec55 4b10 	vmov	r4, r5, d0
 80143ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80143f2:	4606      	mov	r6, r0
 80143f4:	462b      	mov	r3, r5
 80143f6:	b99a      	cbnz	r2, 8014420 <scalbn+0x38>
 80143f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80143fc:	4323      	orrs	r3, r4
 80143fe:	d036      	beq.n	801446e <scalbn+0x86>
 8014400:	4b39      	ldr	r3, [pc, #228]	; (80144e8 <scalbn+0x100>)
 8014402:	4629      	mov	r1, r5
 8014404:	ee10 0a10 	vmov	r0, s0
 8014408:	2200      	movs	r2, #0
 801440a:	f7ec f8fd 	bl	8000608 <__aeabi_dmul>
 801440e:	4b37      	ldr	r3, [pc, #220]	; (80144ec <scalbn+0x104>)
 8014410:	429e      	cmp	r6, r3
 8014412:	4604      	mov	r4, r0
 8014414:	460d      	mov	r5, r1
 8014416:	da10      	bge.n	801443a <scalbn+0x52>
 8014418:	a32b      	add	r3, pc, #172	; (adr r3, 80144c8 <scalbn+0xe0>)
 801441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801441e:	e03a      	b.n	8014496 <scalbn+0xae>
 8014420:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014424:	428a      	cmp	r2, r1
 8014426:	d10c      	bne.n	8014442 <scalbn+0x5a>
 8014428:	ee10 2a10 	vmov	r2, s0
 801442c:	4620      	mov	r0, r4
 801442e:	4629      	mov	r1, r5
 8014430:	f7eb ff34 	bl	800029c <__adddf3>
 8014434:	4604      	mov	r4, r0
 8014436:	460d      	mov	r5, r1
 8014438:	e019      	b.n	801446e <scalbn+0x86>
 801443a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801443e:	460b      	mov	r3, r1
 8014440:	3a36      	subs	r2, #54	; 0x36
 8014442:	4432      	add	r2, r6
 8014444:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014448:	428a      	cmp	r2, r1
 801444a:	dd08      	ble.n	801445e <scalbn+0x76>
 801444c:	2d00      	cmp	r5, #0
 801444e:	a120      	add	r1, pc, #128	; (adr r1, 80144d0 <scalbn+0xe8>)
 8014450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014454:	da1c      	bge.n	8014490 <scalbn+0xa8>
 8014456:	a120      	add	r1, pc, #128	; (adr r1, 80144d8 <scalbn+0xf0>)
 8014458:	e9d1 0100 	ldrd	r0, r1, [r1]
 801445c:	e018      	b.n	8014490 <scalbn+0xa8>
 801445e:	2a00      	cmp	r2, #0
 8014460:	dd08      	ble.n	8014474 <scalbn+0x8c>
 8014462:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014466:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801446a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801446e:	ec45 4b10 	vmov	d0, r4, r5
 8014472:	bd70      	pop	{r4, r5, r6, pc}
 8014474:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014478:	da19      	bge.n	80144ae <scalbn+0xc6>
 801447a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801447e:	429e      	cmp	r6, r3
 8014480:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8014484:	dd0a      	ble.n	801449c <scalbn+0xb4>
 8014486:	a112      	add	r1, pc, #72	; (adr r1, 80144d0 <scalbn+0xe8>)
 8014488:	e9d1 0100 	ldrd	r0, r1, [r1]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d1e2      	bne.n	8014456 <scalbn+0x6e>
 8014490:	a30f      	add	r3, pc, #60	; (adr r3, 80144d0 <scalbn+0xe8>)
 8014492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014496:	f7ec f8b7 	bl	8000608 <__aeabi_dmul>
 801449a:	e7cb      	b.n	8014434 <scalbn+0x4c>
 801449c:	a10a      	add	r1, pc, #40	; (adr r1, 80144c8 <scalbn+0xe0>)
 801449e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d0b8      	beq.n	8014418 <scalbn+0x30>
 80144a6:	a10e      	add	r1, pc, #56	; (adr r1, 80144e0 <scalbn+0xf8>)
 80144a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80144ac:	e7b4      	b.n	8014418 <scalbn+0x30>
 80144ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80144b2:	3236      	adds	r2, #54	; 0x36
 80144b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80144b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80144bc:	4620      	mov	r0, r4
 80144be:	4b0c      	ldr	r3, [pc, #48]	; (80144f0 <scalbn+0x108>)
 80144c0:	2200      	movs	r2, #0
 80144c2:	e7e8      	b.n	8014496 <scalbn+0xae>
 80144c4:	f3af 8000 	nop.w
 80144c8:	c2f8f359 	.word	0xc2f8f359
 80144cc:	01a56e1f 	.word	0x01a56e1f
 80144d0:	8800759c 	.word	0x8800759c
 80144d4:	7e37e43c 	.word	0x7e37e43c
 80144d8:	8800759c 	.word	0x8800759c
 80144dc:	fe37e43c 	.word	0xfe37e43c
 80144e0:	c2f8f359 	.word	0xc2f8f359
 80144e4:	81a56e1f 	.word	0x81a56e1f
 80144e8:	43500000 	.word	0x43500000
 80144ec:	ffff3cb0 	.word	0xffff3cb0
 80144f0:	3c900000 	.word	0x3c900000

080144f4 <_init>:
 80144f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144f6:	bf00      	nop
 80144f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144fa:	bc08      	pop	{r3}
 80144fc:	469e      	mov	lr, r3
 80144fe:	4770      	bx	lr

08014500 <_fini>:
 8014500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014502:	bf00      	nop
 8014504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014506:	bc08      	pop	{r3}
 8014508:	469e      	mov	lr, r3
 801450a:	4770      	bx	lr
