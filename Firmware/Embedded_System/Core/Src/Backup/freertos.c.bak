/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdarg.h>
#include "max30102.h"
#include "i2c.h"
#include "usart.h"

#include "ili9341.h"
#include "touch.h"
#include "fonts.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
const char *TAG = "Task";
char *str = "OK?\r\n";
/* USER CODE END Variables */
/* Definitions for LCD_task */
osThreadId_t LCD_taskHandle;
const osThreadAttr_t LCD_task_attributes = {
  .name = "LCD_task",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for Blynk_LED */
osThreadId_t Blynk_LEDHandle;
const osThreadAttr_t Blynk_LED_attributes = {
  .name = "Blynk_LED",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for MAX30102 */
osThreadId_t MAX30102Handle;
const osThreadAttr_t MAX30102_attributes = {
  .name = "MAX30102",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for Uart_user */
osThreadId_t Uart_userHandle;
const osThreadAttr_t Uart_user_attributes = {
  .name = "Uart_user",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for SuperQueue */
osMessageQueueId_t SuperQueueHandle;
const osMessageQueueAttr_t SuperQueue_attributes = {
  .name = "SuperQueue"
};
/* Definitions for Timer_core */
osTimerId_t Timer_coreHandle;
const osTimerAttr_t Timer_core_attributes = {
  .name = "Timer_core"
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void LCD_func(void *argument);
void LED_func(void *argument);
void max30102_task(void *argument);
void Uart_task(void *argument);
void Callback_timer(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */



  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Timer_core */
  Timer_coreHandle = osTimerNew(Callback_timer, osTimerPeriodic, NULL, &Timer_core_attributes);

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SuperQueue */
  SuperQueueHandle = osMessageQueueNew (64, sizeof(uint16_t), &SuperQueue_attributes);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LCD_task */
  LCD_taskHandle = osThreadNew(LCD_func, NULL, &LCD_task_attributes);

  /* creation of Blynk_LED */
  Blynk_LEDHandle = osThreadNew(LED_func, NULL, &Blynk_LED_attributes);

  /* creation of MAX30102 */
  MAX30102Handle = osThreadNew(max30102_task, NULL, &MAX30102_attributes);

  /* creation of Uart_user */
  Uart_userHandle = osThreadNew(Uart_task, NULL, &Uart_user_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_LCD_func */
/**
  * @brief  Function implementing the LCD_task thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LCD_func */
void LCD_func(void *argument)
{
  /* USER CODE BEGIN LCD_func */
	osTimerStart(Timer_coreHandle, 1000);
	ILI9341_Unselect();
	ILI9341_TouchUnselect();

	ILI9341_Init();
	osDelay(3000);

  /* Infinite loop */
  for(;;)
  {

  }
  /* USER CODE END LCD_func */
}

/* USER CODE BEGIN Header_LED_func */
/**
* @brief Function implementing the Blynk_LED thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_func */
void LED_func(void *argument)
{
  /* USER CODE BEGIN LED_func */


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  osDelay(2000);
  }
  /* USER CODE END LED_func */
}

/* USER CODE BEGIN Header_max30102_task */
/**
* @brief Function implementing the MAX30102 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_max30102_task */
void max30102_task(void *argument)
{
  /* USER CODE BEGIN max30102_task */
	for(;;)
	  {
	    osDelay(2000);
	  }
  /* USER CODE END max30102_task */
}

/* USER CODE BEGIN Header_Uart_task */
/**
* @brief Function implementing the Uart_user thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Uart_task */
void Uart_task(void *argument)
{
  /* USER CODE BEGIN Uart_task */
	char *RxBuffer;
	char *TxBuffer;
	HAL_UART_Transmit(&huart1, (uint8_t*)"Happy New Year\r\n", 16, 500);
	HAL_UART_Receive_DMA(&huart1, &RxBuffer, sizeof(RxBuffer));

  /* Infinite loop */
  for(;;)
  {
	  if(RxBuffer != 0)
	  {
		  HAL_UART_Transmit(&huart1, RxBuffer, 1, 1000);
	  }

    osDelay(1000);
  }
  /* USER CODE END Uart_task */
}

/* Callback_timer function */
void Callback_timer(void *argument)
{
  /* USER CODE BEGIN Callback_timer */
//	printf("timer_callback function");
  /* USER CODE END Callback_timer */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

