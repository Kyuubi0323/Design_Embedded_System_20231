
Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d564  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001aa8  0800d708  0800d708  0001d708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1b0  0800f1b0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f1b0  0800f1b0  0001f1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1b8  0800f1b8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1b8  0800f1b8  0001f1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f1bc  0800f1bc  0001f1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800f1c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  200001f0  0800f3b0  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  0800f3b0  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166bb  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003683  00000000  00000000  000368db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  00039f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  0003b2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001987b  00000000  00000000  0003c500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a991  00000000  00000000  00055d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094b57  00000000  00000000  0007070c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105263  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006900  00000000  00000000  001052b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d6ec 	.word	0x0800d6ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800d6ec 	.word	0x0800d6ec

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 800102c:	4806      	ldr	r0, [pc, #24]	; (8001048 <DS18B20_StartAll+0x20>)
 800102e:	f000 fd46 	bl	8001abe <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8001032:	21cc      	movs	r1, #204	; 0xcc
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <DS18B20_StartAll+0x20>)
 8001036:	f000 fdbf 	bl	8001bb8 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 800103a:	2144      	movs	r1, #68	; 0x44
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <DS18B20_StartAll+0x20>)
 800103e:	f000 fdbb 	bl	8001bb8 <OneWire_WriteByte>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000024c 	.word	0x2000024c

0800104c <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 800105c:	4b4b      	ldr	r3, [pc, #300]	; (800118c <DS18B20_SetResolution+0x140>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	79fa      	ldrb	r2, [r7, #7]
 8001062:	429a      	cmp	r2, r3
 8001064:	d301      	bcc.n	800106a <DS18B20_SetResolution+0x1e>
		return 0;
 8001066:	2300      	movs	r3, #0
 8001068:	e08c      	b.n	8001184 <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	4a48      	ldr	r2, [pc, #288]	; (8001190 <DS18B20_SetResolution+0x144>)
 8001070:	4413      	add	r3, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f890 	bl	8001198 <DS18B20_Is>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <DS18B20_SetResolution+0x36>
		return 0;
 800107e:	2300      	movs	r3, #0
 8001080:	e080      	b.n	8001184 <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 8001082:	4844      	ldr	r0, [pc, #272]	; (8001194 <DS18B20_SetResolution+0x148>)
 8001084:	f000 fd1b 	bl	8001abe <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	4a40      	ldr	r2, [pc, #256]	; (8001190 <DS18B20_SetResolution+0x144>)
 800108e:	4413      	add	r3, r2
 8001090:	4619      	mov	r1, r3
 8001092:	4840      	ldr	r0, [pc, #256]	; (8001194 <DS18B20_SetResolution+0x148>)
 8001094:	f000 fec5 	bl	8001e22 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8001098:	21be      	movs	r1, #190	; 0xbe
 800109a:	483e      	ldr	r0, [pc, #248]	; (8001194 <DS18B20_SetResolution+0x148>)
 800109c:	f000 fd8c 	bl	8001bb8 <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 80010a0:	483c      	ldr	r0, [pc, #240]	; (8001194 <DS18B20_SetResolution+0x148>)
 80010a2:	f000 fda7 	bl	8001bf4 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 80010a6:	483b      	ldr	r0, [pc, #236]	; (8001194 <DS18B20_SetResolution+0x148>)
 80010a8:	f000 fda4 	bl	8001bf4 <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 80010ac:	4839      	ldr	r0, [pc, #228]	; (8001194 <DS18B20_SetResolution+0x148>)
 80010ae:	f000 fda1 	bl	8001bf4 <OneWire_ReadByte>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 80010b6:	4837      	ldr	r0, [pc, #220]	; (8001194 <DS18B20_SetResolution+0x148>)
 80010b8:	f000 fd9c 	bl	8001bf4 <OneWire_ReadByte>
 80010bc:	4603      	mov	r3, r0
 80010be:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 80010c0:	4834      	ldr	r0, [pc, #208]	; (8001194 <DS18B20_SetResolution+0x148>)
 80010c2:	f000 fd97 	bl	8001bf4 <OneWire_ReadByte>
 80010c6:	4603      	mov	r3, r0
 80010c8:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	2b09      	cmp	r3, #9
 80010ce:	d108      	bne.n	80010e2 <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010d6:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	f023 0320 	bic.w	r3, r3, #32
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e022      	b.n	8001128 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	2b0a      	cmp	r3, #10
 80010e6:	d108      	bne.n	80010fa <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010ee:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	f043 0320 	orr.w	r3, r3, #32
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e016      	b.n	8001128 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	2b0b      	cmp	r3, #11
 80010fe:	d108      	bne.n	8001112 <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001106:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	f023 0320 	bic.w	r3, r3, #32
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e00a      	b.n	8001128 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8001112:	79bb      	ldrb	r3, [r7, #6]
 8001114:	2b0c      	cmp	r3, #12
 8001116:	d107      	bne.n	8001128 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800111e:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	f043 0320 	orr.w	r3, r3, #32
 8001126:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 8001128:	481a      	ldr	r0, [pc, #104]	; (8001194 <DS18B20_SetResolution+0x148>)
 800112a:	f000 fcc8 	bl	8001abe <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	4a17      	ldr	r2, [pc, #92]	; (8001190 <DS18B20_SetResolution+0x144>)
 8001134:	4413      	add	r3, r2
 8001136:	4619      	mov	r1, r3
 8001138:	4816      	ldr	r0, [pc, #88]	; (8001194 <DS18B20_SetResolution+0x148>)
 800113a:	f000 fe72 	bl	8001e22 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 800113e:	214e      	movs	r1, #78	; 0x4e
 8001140:	4814      	ldr	r0, [pc, #80]	; (8001194 <DS18B20_SetResolution+0x148>)
 8001142:	f000 fd39 	bl	8001bb8 <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	4619      	mov	r1, r3
 800114a:	4812      	ldr	r0, [pc, #72]	; (8001194 <DS18B20_SetResolution+0x148>)
 800114c:	f000 fd34 	bl	8001bb8 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8001150:	7b7b      	ldrb	r3, [r7, #13]
 8001152:	4619      	mov	r1, r3
 8001154:	480f      	ldr	r0, [pc, #60]	; (8001194 <DS18B20_SetResolution+0x148>)
 8001156:	f000 fd2f 	bl	8001bb8 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <DS18B20_SetResolution+0x148>)
 8001160:	f000 fd2a 	bl	8001bb8 <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <DS18B20_SetResolution+0x148>)
 8001166:	f000 fcaa 	bl	8001abe <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <DS18B20_SetResolution+0x144>)
 8001170:	4413      	add	r3, r2
 8001172:	4619      	mov	r1, r3
 8001174:	4807      	ldr	r0, [pc, #28]	; (8001194 <DS18B20_SetResolution+0x148>)
 8001176:	f000 fe54 	bl	8001e22 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 800117a:	2148      	movs	r1, #72	; 0x48
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <DS18B20_SetResolution+0x148>)
 800117e:	f000 fd1b 	bl	8001bb8 <OneWire_WriteByte>

	return 1;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000260 	.word	0x20000260
 8001190:	2000020c 	.word	0x2000020c
 8001194:	2000024c 	.word	0x2000024c

08001198 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b28      	cmp	r3, #40	; 0x28
 80011a6:	d101      	bne.n	80011ac <DS18B20_Is+0x14>
		return 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <DS18B20_Is+0x16>
	return 0;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <DS18B20_Init>:
	return 1;

}

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	2300      	movs	r3, #0
 80011cc:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, DSB_GPIO_Port, DSB_Pin); // Init OneWire bus
 80011ce:	2202      	movs	r2, #2
 80011d0:	491f      	ldr	r1, [pc, #124]	; (8001250 <DS18B20_Init+0x94>)
 80011d2:	4820      	ldr	r0, [pc, #128]	; (8001254 <DS18B20_Init+0x98>)
 80011d4:	f000 fe62 	bl	8001e9c <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 80011d8:	481e      	ldr	r0, [pc, #120]	; (8001254 <DS18B20_Init+0x98>)
 80011da:	f000 fe05 	bl	8001de8 <OneWire_First>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
	while(next)
 80011e2:	e018      	b.n	8001216 <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <DS18B20_Init+0x9c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <DS18B20_Init+0x9c>)
 80011ee:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80011f0:	7bbb      	ldrb	r3, [r7, #14]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	73ba      	strb	r2, [r7, #14]
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	4a18      	ldr	r2, [pc, #96]	; (800125c <DS18B20_Init+0xa0>)
 80011fa:	4413      	add	r3, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	4815      	ldr	r0, [pc, #84]	; (8001254 <DS18B20_Init+0x98>)
 8001200:	f000 fe2e 	bl	8001e60 <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8001204:	4813      	ldr	r0, [pc, #76]	; (8001254 <DS18B20_Init+0x98>)
 8001206:	f000 fdff 	bl	8001e08 <OneWire_Next>
 800120a:	4603      	mov	r3, r0
 800120c:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <DS18B20_Init+0x9c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d803      	bhi.n	800121e <DS18B20_Init+0x62>
	while(next)
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1e3      	bne.n	80011e4 <DS18B20_Init+0x28>
 800121c:	e000      	b.n	8001220 <DS18B20_Init+0x64>
			break;
 800121e:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 8001220:	2300      	movs	r3, #0
 8001222:	737b      	strb	r3, [r7, #13]
 8001224:	e00a      	b.n	800123c <DS18B20_Init+0x80>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	7b7b      	ldrb	r3, [r7, #13]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff0d 	bl	800104c <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 8001232:	f7ff fef9 	bl	8001028 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8001236:	7b7b      	ldrb	r3, [r7, #13]
 8001238:	3301      	adds	r3, #1
 800123a:	737b      	strb	r3, [r7, #13]
 800123c:	7b7a      	ldrb	r2, [r7, #13]
 800123e:	7bbb      	ldrb	r3, [r7, #14]
 8001240:	429a      	cmp	r2, r3
 8001242:	d3f0      	bcc.n	8001226 <DS18B20_Init+0x6a>
	}
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40020000 	.word	0x40020000
 8001254:	2000024c 	.word	0x2000024c
 8001258:	20000260 	.word	0x20000260
 800125c:	2000020c 	.word	0x2000020c

08001260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b51      	ldr	r3, [pc, #324]	; (80013c0 <MX_GPIO_Init+0x160>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a50      	ldr	r2, [pc, #320]	; (80013c0 <MX_GPIO_Init+0x160>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b4e      	ldr	r3, [pc, #312]	; (80013c0 <MX_GPIO_Init+0x160>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <MX_GPIO_Init+0x160>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a49      	ldr	r2, [pc, #292]	; (80013c0 <MX_GPIO_Init+0x160>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <MX_GPIO_Init+0x160>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b43      	ldr	r3, [pc, #268]	; (80013c0 <MX_GPIO_Init+0x160>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a42      	ldr	r2, [pc, #264]	; (80013c0 <MX_GPIO_Init+0x160>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b40      	ldr	r3, [pc, #256]	; (80013c0 <MX_GPIO_Init+0x160>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <MX_GPIO_Init+0x160>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a3b      	ldr	r2, [pc, #236]	; (80013c0 <MX_GPIO_Init+0x160>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <MX_GPIO_Init+0x160>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|DHT_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80012ec:	4835      	ldr	r0, [pc, #212]	; (80013c4 <MX_GPIO_Init+0x164>)
 80012ee:	f002 fa5d 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DSB_Pin|SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f641 0102 	movw	r1, #6146	; 0x1802
 80012f8:	4833      	ldr	r0, [pc, #204]	; (80013c8 <MX_GPIO_Init+0x168>)
 80012fa:	f002 fa57 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_LED_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	f240 3102 	movw	r1, #770	; 0x302
 8001304:	4831      	ldr	r0, [pc, #196]	; (80013cc <MX_GPIO_Init+0x16c>)
 8001306:	f002 fa51 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DHT_Pin;
 800130a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4828      	ldr	r0, [pc, #160]	; (80013c4 <MX_GPIO_Init+0x164>)
 8001324:	f002 f8a6 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DSB_Pin|SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin;
 8001328:	f641 0302 	movw	r3, #6146	; 0x1802
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4821      	ldr	r0, [pc, #132]	; (80013c8 <MX_GPIO_Init+0x168>)
 8001342:	f002 f897 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|LCD_RST_Pin;
 8001346:	f240 2302 	movw	r3, #514	; 0x202
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	481b      	ldr	r0, [pc, #108]	; (80013cc <MX_GPIO_Init+0x16c>)
 8001360:	f002 f888 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136e:	2301      	movs	r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	4814      	ldr	r0, [pc, #80]	; (80013cc <MX_GPIO_Init+0x16c>)
 800137a:	f002 f87b 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 800137e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001384:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138a:	2301      	movs	r3, #1
 800138c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <MX_GPIO_Init+0x168>)
 8001396:	f002 f86d 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 800139a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <MX_GPIO_Init+0x16c>)
 80013b4:	f002 f85e 	bl	8003474 <HAL_GPIO_Init>

}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	; 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400

080013d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_I2C1_Init+0x50>)
 80013d6:	4a13      	ldr	r2, [pc, #76]	; (8001424 <MX_I2C1_Init+0x54>)
 80013d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_I2C1_Init+0x50>)
 80013dc:	4a12      	ldr	r2, [pc, #72]	; (8001428 <MX_I2C1_Init+0x58>)
 80013de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_I2C1_Init+0x50>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_I2C1_Init+0x50>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_I2C1_Init+0x50>)
 80013ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <MX_I2C1_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_I2C1_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <MX_I2C1_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_I2C1_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <MX_I2C1_Init+0x50>)
 800140e:	f002 fa01 	bl	8003814 <HAL_I2C_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001418:	f000 fae0 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000264 	.word	0x20000264
 8001424:	40005400 	.word	0x40005400
 8001428:	00061a80 	.word	0x00061a80

0800142c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <HAL_I2C_MspInit+0x94>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d133      	bne.n	80014b6 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <HAL_I2C_MspInit+0x98>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <HAL_I2C_MspInit+0x98>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <HAL_I2C_MspInit+0x98>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800146a:	23c0      	movs	r3, #192	; 0xc0
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146e:	2312      	movs	r3, #18
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800147a:	2304      	movs	r3, #4
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4810      	ldr	r0, [pc, #64]	; (80014c8 <HAL_I2C_MspInit+0x9c>)
 8001486:	f001 fff5 	bl	8003474 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_I2C_MspInit+0x98>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <HAL_I2C_MspInit+0x98>)
 8001494:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_I2C_MspInit+0x98>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	201f      	movs	r0, #31
 80014ac:	f001 ff0b 	bl	80032c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014b0:	201f      	movs	r0, #31
 80014b2:	f001 ff24 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40005400 	.word	0x40005400
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020400 	.word	0x40020400

080014cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d2:	f001 fd87 	bl	8002fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d6:	f000 f9e1 	bl	800189c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014da:	f7ff fec1 	bl	8001260 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014de:	f7ff ff77 	bl	80013d0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80014e2:	f000 fd07 	bl	8001ef4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80014e6:	f000 ff41 	bl	800236c <MX_USART2_UART_Init>
  MX_TIM11_Init();
 80014ea:	f000 fee3 	bl	80022b4 <MX_TIM11_Init>
  MX_TIM10_Init();
 80014ee:	f000 febd 	bl	800226c <MX_TIM10_Init>
	char Strgbpm[4] ;
	char Strgspo2[4];


	//Display
	ILI9341_Unselect();
 80014f2:	f001 f89f 	bl	8002634 <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 80014f6:	f001 fc7d 	bl	8002df4 <ILI9341_TouchUnselect>
	ILI9341_Init();
 80014fa:	f001 f94d 	bl	8002798 <ILI9341_Init>
	ILI9341_FillScreen(ILI9341_BLACK);
 80014fe:	2000      	movs	r0, #0
 8001500:	f001 fc66 	bl	8002dd0 <ILI9341_FillScreen>
	//Background
	ILI9341_WriteString(10, 10, "Embedded Design System 20231", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001504:	4bb8      	ldr	r3, [pc, #736]	; (80017e8 <main+0x31c>)
 8001506:	2200      	movs	r2, #0
 8001508:	9202      	str	r2, [sp, #8]
 800150a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800150e:	9201      	str	r2, [sp, #4]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	9200      	str	r2, [sp, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4ab5      	ldr	r2, [pc, #724]	; (80017ec <main+0x320>)
 8001518:	210a      	movs	r1, #10
 800151a:	200a      	movs	r0, #10
 800151c:	f001 fb9d 	bl	8002c5a <ILI9341_WriteString>
	ILI9341_WriteString(30, 40, "20202647", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8001520:	4bb3      	ldr	r3, [pc, #716]	; (80017f0 <main+0x324>)
 8001522:	2200      	movs	r2, #0
 8001524:	9202      	str	r2, [sp, #8]
 8001526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800152a:	9201      	str	r2, [sp, #4]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	9200      	str	r2, [sp, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4ab0      	ldr	r2, [pc, #704]	; (80017f4 <main+0x328>)
 8001534:	2128      	movs	r1, #40	; 0x28
 8001536:	201e      	movs	r0, #30
 8001538:	f001 fb8f 	bl	8002c5a <ILI9341_WriteString>
	ILI9341_WriteString(235, 40, "20202543", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 800153c:	4bac      	ldr	r3, [pc, #688]	; (80017f0 <main+0x324>)
 800153e:	2200      	movs	r2, #0
 8001540:	9202      	str	r2, [sp, #8]
 8001542:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001546:	9201      	str	r2, [sp, #4]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	9200      	str	r2, [sp, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4aaa      	ldr	r2, [pc, #680]	; (80017f8 <main+0x32c>)
 8001550:	2128      	movs	r1, #40	; 0x28
 8001552:	20eb      	movs	r0, #235	; 0xeb
 8001554:	f001 fb81 	bl	8002c5a <ILI9341_WriteString>
	ILI9341_DrawLine(0, 55, 320, 55, ILI9341_WHITE);
 8001558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2337      	movs	r3, #55	; 0x37
 8001560:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001564:	2137      	movs	r1, #55	; 0x37
 8001566:	2000      	movs	r0, #0
 8001568:	f001 fa7d 	bl	8002a66 <ILI9341_DrawLine>
	ILI9341_DrawLine(0, 200, 320, 200, ILI9341_WHITE);
 800156c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	23c8      	movs	r3, #200	; 0xc8
 8001574:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001578:	21c8      	movs	r1, #200	; 0xc8
 800157a:	2000      	movs	r0, #0
 800157c:	f001 fa73 	bl	8002a66 <ILI9341_DrawLine>
	ILI9341_DrawLine(250, 55, 250, 200, ILI9341_WHITE);
 8001580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	23c8      	movs	r3, #200	; 0xc8
 8001588:	22fa      	movs	r2, #250	; 0xfa
 800158a:	2137      	movs	r1, #55	; 0x37
 800158c:	20fa      	movs	r0, #250	; 0xfa
 800158e:	f001 fa6a 	bl	8002a66 <ILI9341_DrawLine>
	ILI9341_WriteString(10, 180, "Mode:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001592:	4b95      	ldr	r3, [pc, #596]	; (80017e8 <main+0x31c>)
 8001594:	2200      	movs	r2, #0
 8001596:	9202      	str	r2, [sp, #8]
 8001598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800159c:	9201      	str	r2, [sp, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	9200      	str	r2, [sp, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a95      	ldr	r2, [pc, #596]	; (80017fc <main+0x330>)
 80015a6:	21b4      	movs	r1, #180	; 0xb4
 80015a8:	200a      	movs	r0, #10
 80015aa:	f001 fb56 	bl	8002c5a <ILI9341_WriteString>
	ILI9341_WriteString(150, 180, "Hello", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 80015ae:	4b8e      	ldr	r3, [pc, #568]	; (80017e8 <main+0x31c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	9202      	str	r2, [sp, #8]
 80015b4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80015b8:	9201      	str	r2, [sp, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	9200      	str	r2, [sp, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a8f      	ldr	r2, [pc, #572]	; (8001800 <main+0x334>)
 80015c2:	21b4      	movs	r1, #180	; 0xb4
 80015c4:	2096      	movs	r0, #150	; 0x96
 80015c6:	f001 fb48 	bl	8002c5a <ILI9341_WriteString>
	ILI9341_WriteString(100, 210, "MANDEVICES", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 80015ca:	4b87      	ldr	r3, [pc, #540]	; (80017e8 <main+0x31c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	9202      	str	r2, [sp, #8]
 80015d0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80015d4:	9201      	str	r2, [sp, #4]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	9200      	str	r2, [sp, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a89      	ldr	r2, [pc, #548]	; (8001804 <main+0x338>)
 80015de:	21d2      	movs	r1, #210	; 0xd2
 80015e0:	2064      	movs	r0, #100	; 0x64
 80015e2:	f001 fb3a 	bl	8002c5a <ILI9341_WriteString>

	//Data
	ILI9341_WriteString(10, 60, "Temperature:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80015e6:	4b80      	ldr	r3, [pc, #512]	; (80017e8 <main+0x31c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	9202      	str	r2, [sp, #8]
 80015ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f0:	9201      	str	r2, [sp, #4]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	9200      	str	r2, [sp, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a83      	ldr	r2, [pc, #524]	; (8001808 <main+0x33c>)
 80015fa:	213c      	movs	r1, #60	; 0x3c
 80015fc:	200a      	movs	r0, #10
 80015fe:	f001 fb2c 	bl	8002c5a <ILI9341_WriteString>
	ftoa(Node_1.Temperature, StrgTemp, 1);
 8001602:	4b82      	ldr	r3, [pc, #520]	; (800180c <main+0x340>)
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	2101      	movs	r1, #1
 800160e:	4618      	mov	r0, r3
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	f000 ff24 	bl	8002460 <ftoa>
	ILI9341_WriteString(150, 60, StrgTemp, Font_11x18, ILI9341_ORANGE, ILI9341_BLACK);
 8001618:	4b73      	ldr	r3, [pc, #460]	; (80017e8 <main+0x31c>)
 800161a:	f107 0110 	add.w	r1, r7, #16
 800161e:	2200      	movs	r2, #0
 8001620:	9202      	str	r2, [sp, #8]
 8001622:	f64f 5220 	movw	r2, #64800	; 0xfd20
 8001626:	9201      	str	r2, [sp, #4]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	9200      	str	r2, [sp, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	460a      	mov	r2, r1
 8001630:	213c      	movs	r1, #60	; 0x3c
 8001632:	2096      	movs	r0, #150	; 0x96
 8001634:	f001 fb11 	bl	8002c5a <ILI9341_WriteString>

	ILI9341_WriteString(10, 90, "Humidity:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001638:	4b6b      	ldr	r3, [pc, #428]	; (80017e8 <main+0x31c>)
 800163a:	2200      	movs	r2, #0
 800163c:	9202      	str	r2, [sp, #8]
 800163e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001642:	9201      	str	r2, [sp, #4]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	9200      	str	r2, [sp, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a71      	ldr	r2, [pc, #452]	; (8001810 <main+0x344>)
 800164c:	215a      	movs	r1, #90	; 0x5a
 800164e:	200a      	movs	r0, #10
 8001650:	f001 fb03 	bl	8002c5a <ILI9341_WriteString>
	intToStr((int)Node_1.Humidity, StrgHumd, 2);
 8001654:	4b6d      	ldr	r3, [pc, #436]	; (800180c <main+0x340>)
 8001656:	edd3 7a01 	vldr	s15, [r3, #4]
 800165a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	2202      	movs	r2, #2
 8001664:	4619      	mov	r1, r3
 8001666:	ee17 0a90 	vmov	r0, s15
 800166a:	f000 ff55 	bl	8002518 <intToStr>
	ILI9341_WriteString(150, 90, StrgHumd, Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 800166e:	4b5e      	ldr	r3, [pc, #376]	; (80017e8 <main+0x31c>)
 8001670:	f107 010c 	add.w	r1, r7, #12
 8001674:	2200      	movs	r2, #0
 8001676:	9202      	str	r2, [sp, #8]
 8001678:	221f      	movs	r2, #31
 800167a:	9201      	str	r2, [sp, #4]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	9200      	str	r2, [sp, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	460a      	mov	r2, r1
 8001684:	215a      	movs	r1, #90	; 0x5a
 8001686:	2096      	movs	r0, #150	; 0x96
 8001688:	f001 fae7 	bl	8002c5a <ILI9341_WriteString>
	ILI9341_WriteString(180, 90, "%", Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 800168c:	4b56      	ldr	r3, [pc, #344]	; (80017e8 <main+0x31c>)
 800168e:	2200      	movs	r2, #0
 8001690:	9202      	str	r2, [sp, #8]
 8001692:	221f      	movs	r2, #31
 8001694:	9201      	str	r2, [sp, #4]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	9200      	str	r2, [sp, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a5d      	ldr	r2, [pc, #372]	; (8001814 <main+0x348>)
 800169e:	215a      	movs	r1, #90	; 0x5a
 80016a0:	20b4      	movs	r0, #180	; 0xb4
 80016a2:	f001 fada 	bl	8002c5a <ILI9341_WriteString>

	ILI9341_WriteString(10, 120, "BPM:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80016a6:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <main+0x31c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	9202      	str	r2, [sp, #8]
 80016ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b0:	9201      	str	r2, [sp, #4]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	9200      	str	r2, [sp, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a57      	ldr	r2, [pc, #348]	; (8001818 <main+0x34c>)
 80016ba:	2178      	movs	r1, #120	; 0x78
 80016bc:	200a      	movs	r0, #10
 80016be:	f001 facc 	bl	8002c5a <ILI9341_WriteString>
	intToStr(Node_1.bpm, Strgbpm, 2);
 80016c2:	4b52      	ldr	r3, [pc, #328]	; (800180c <main+0x340>)
 80016c4:	7a1b      	ldrb	r3, [r3, #8]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	2202      	movs	r2, #2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f000 ff22 	bl	8002518 <intToStr>
	ILI9341_WriteString(150, 120, Strgbpm, Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 80016d4:	4b44      	ldr	r3, [pc, #272]	; (80017e8 <main+0x31c>)
 80016d6:	f107 0108 	add.w	r1, r7, #8
 80016da:	2200      	movs	r2, #0
 80016dc:	9202      	str	r2, [sp, #8]
 80016de:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80016e2:	9201      	str	r2, [sp, #4]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	9200      	str	r2, [sp, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	460a      	mov	r2, r1
 80016ec:	2178      	movs	r1, #120	; 0x78
 80016ee:	2096      	movs	r0, #150	; 0x96
 80016f0:	f001 fab3 	bl	8002c5a <ILI9341_WriteString>

	ILI9341_WriteString(10, 150, "Spo2:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80016f4:	4b3c      	ldr	r3, [pc, #240]	; (80017e8 <main+0x31c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	9202      	str	r2, [sp, #8]
 80016fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fe:	9201      	str	r2, [sp, #4]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	9200      	str	r2, [sp, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a45      	ldr	r2, [pc, #276]	; (800181c <main+0x350>)
 8001708:	2196      	movs	r1, #150	; 0x96
 800170a:	200a      	movs	r0, #10
 800170c:	f001 faa5 	bl	8002c5a <ILI9341_WriteString>
	intToStr(Node_1.spo2, Strgspo2, 2);
 8001710:	4b3e      	ldr	r3, [pc, #248]	; (800180c <main+0x340>)
 8001712:	7a5b      	ldrb	r3, [r3, #9]
 8001714:	4618      	mov	r0, r3
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2202      	movs	r2, #2
 800171a:	4619      	mov	r1, r3
 800171c:	f000 fefc 	bl	8002518 <intToStr>
	ILI9341_WriteString(150, 150, Strgspo2, Font_11x18, ILI9341_PINK, ILI9341_BLACK);
 8001720:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <main+0x31c>)
 8001722:	1d39      	adds	r1, r7, #4
 8001724:	2200      	movs	r2, #0
 8001726:	9202      	str	r2, [sp, #8]
 8001728:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800172c:	9201      	str	r2, [sp, #4]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	9200      	str	r2, [sp, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	460a      	mov	r2, r1
 8001736:	2196      	movs	r1, #150	; 0x96
 8001738:	2096      	movs	r0, #150	; 0x96
 800173a:	f001 fa8e 	bl	8002c5a <ILI9341_WriteString>



	HAL_UART_Receive_IT(&huart2, (uint8_t*) rxBuff, 8);
 800173e:	2208      	movs	r2, #8
 8001740:	4937      	ldr	r1, [pc, #220]	; (8001820 <main+0x354>)
 8001742:	4838      	ldr	r0, [pc, #224]	; (8001824 <main+0x358>)
 8001744:	f005 fc7b 	bl	800703e <HAL_UART_Receive_IT>
	max30102_init();
 8001748:	f001 fb60 	bl	8002e0c <max30102_init>
	 DS18B20_Init(DS18B20_Resolution_12bits);
 800174c:	200c      	movs	r0, #12
 800174e:	f7ff fd35 	bl	80011bc <DS18B20_Init>
//	sprintf(message,  "Temp: %2.2f\n\r", Temperature);
//	HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), 100);
//
//
//	  		HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", sizeof("\n\r"), 100);
	  		Node_1.Temperature = Temperature;
 8001752:	4b35      	ldr	r3, [pc, #212]	; (8001828 <main+0x35c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a2d      	ldr	r2, [pc, #180]	; (800180c <main+0x340>)
 8001758:	6013      	str	r3, [r2, #0]
//		HAL_UART_Transmit(&huart2, (uint8_t*) str1, 24, 20);



		//HAL_GPIO_TgglePin(GPIOC, GPIO_PIN_13);
		ftoa(Node_1.Temperature, StrgTemp, 1);
 800175a:	4b2c      	ldr	r3, [pc, #176]	; (800180c <main+0x340>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	2101      	movs	r1, #1
 8001766:	4618      	mov	r0, r3
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	f000 fe78 	bl	8002460 <ftoa>
		ILI9341_WriteString(150, 60, StrgTemp, Font_11x18, ILI9341_ORANGE, ILI9341_BLACK);
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <main+0x31c>)
 8001772:	f107 0110 	add.w	r1, r7, #16
 8001776:	2200      	movs	r2, #0
 8001778:	9202      	str	r2, [sp, #8]
 800177a:	f64f 5220 	movw	r2, #64800	; 0xfd20
 800177e:	9201      	str	r2, [sp, #4]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	9200      	str	r2, [sp, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	460a      	mov	r2, r1
 8001788:	213c      	movs	r1, #60	; 0x3c
 800178a:	2096      	movs	r0, #150	; 0x96
 800178c:	f001 fa65 	bl	8002c5a <ILI9341_WriteString>

		intToStr((int)Node_1.Humidity, StrgHumd, 2);
 8001790:	4b1e      	ldr	r3, [pc, #120]	; (800180c <main+0x340>)
 8001792:	edd3 7a01 	vldr	s15, [r3, #4]
 8001796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	2202      	movs	r2, #2
 80017a0:	4619      	mov	r1, r3
 80017a2:	ee17 0a90 	vmov	r0, s15
 80017a6:	f000 feb7 	bl	8002518 <intToStr>
		ILI9341_WriteString(150, 90, StrgHumd, Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <main+0x31c>)
 80017ac:	f107 010c 	add.w	r1, r7, #12
 80017b0:	2200      	movs	r2, #0
 80017b2:	9202      	str	r2, [sp, #8]
 80017b4:	221f      	movs	r2, #31
 80017b6:	9201      	str	r2, [sp, #4]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	9200      	str	r2, [sp, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	460a      	mov	r2, r1
 80017c0:	215a      	movs	r1, #90	; 0x5a
 80017c2:	2096      	movs	r0, #150	; 0x96
 80017c4:	f001 fa49 	bl	8002c5a <ILI9341_WriteString>
		ILI9341_WriteString(180, 90, "%", Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <main+0x31c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	9202      	str	r2, [sp, #8]
 80017ce:	221f      	movs	r2, #31
 80017d0:	9201      	str	r2, [sp, #4]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	9200      	str	r2, [sp, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <main+0x348>)
 80017da:	215a      	movs	r1, #90	; 0x5a
 80017dc:	20b4      	movs	r0, #180	; 0xb4
 80017de:	f001 fa3c 	bl	8002c5a <ILI9341_WriteString>

		intToStr(Node_1.bpm, Strgbpm, 2);
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <main+0x340>)
 80017e4:	7a1b      	ldrb	r3, [r3, #8]
 80017e6:	e021      	b.n	800182c <main+0x360>
 80017e8:	2000000c 	.word	0x2000000c
 80017ec:	0800d708 	.word	0x0800d708
 80017f0:	20000004 	.word	0x20000004
 80017f4:	0800d728 	.word	0x0800d728
 80017f8:	0800d734 	.word	0x0800d734
 80017fc:	0800d740 	.word	0x0800d740
 8001800:	0800d748 	.word	0x0800d748
 8001804:	0800d750 	.word	0x0800d750
 8001808:	0800d75c 	.word	0x0800d75c
 800180c:	200002b8 	.word	0x200002b8
 8001810:	0800d76c 	.word	0x0800d76c
 8001814:	0800d778 	.word	0x0800d778
 8001818:	0800d77c 	.word	0x0800d77c
 800181c:	0800d784 	.word	0x0800d784
 8001820:	200002c4 	.word	0x200002c4
 8001824:	200003e8 	.word	0x200003e8
 8001828:	200002f8 	.word	0x200002f8
 800182c:	4618      	mov	r0, r3
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	2202      	movs	r2, #2
 8001834:	4619      	mov	r1, r3
 8001836:	f000 fe6f 	bl	8002518 <intToStr>
		ILI9341_WriteString(150, 120, Strgbpm, Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <main+0x3c8>)
 800183c:	f107 0108 	add.w	r1, r7, #8
 8001840:	2200      	movs	r2, #0
 8001842:	9202      	str	r2, [sp, #8]
 8001844:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001848:	9201      	str	r2, [sp, #4]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	9200      	str	r2, [sp, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	460a      	mov	r2, r1
 8001852:	2178      	movs	r1, #120	; 0x78
 8001854:	2096      	movs	r0, #150	; 0x96
 8001856:	f001 fa00 	bl	8002c5a <ILI9341_WriteString>

		intToStr(Node_1.spo2, Strgspo2, 2);
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <main+0x3cc>)
 800185c:	7a5b      	ldrb	r3, [r3, #9]
 800185e:	4618      	mov	r0, r3
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2202      	movs	r2, #2
 8001864:	4619      	mov	r1, r3
 8001866:	f000 fe57 	bl	8002518 <intToStr>
		ILI9341_WriteString(150, 150, Strgspo2, Font_11x18, ILI9341_PINK, ILI9341_BLACK);
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <main+0x3c8>)
 800186c:	1d39      	adds	r1, r7, #4
 800186e:	2200      	movs	r2, #0
 8001870:	9202      	str	r2, [sp, #8]
 8001872:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001876:	9201      	str	r2, [sp, #4]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	9200      	str	r2, [sp, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	460a      	mov	r2, r1
 8001880:	2196      	movs	r1, #150	; 0x96
 8001882:	2096      	movs	r0, #150	; 0x96
 8001884:	f001 f9e9 	bl	8002c5a <ILI9341_WriteString>
		HAL_Delay(3000);
 8001888:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800188c:	f001 fc1c 	bl	80030c8 <HAL_Delay>
	  		Node_1.Temperature = Temperature;
 8001890:	e75f      	b.n	8001752 <main+0x286>
 8001892:	bf00      	nop
 8001894:	2000000c 	.word	0x2000000c
 8001898:	200002b8 	.word	0x200002b8

0800189c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b094      	sub	sp, #80	; 0x50
 80018a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a2:	f107 0320 	add.w	r3, r7, #32
 80018a6:	2230      	movs	r2, #48	; 0x30
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f006 fb8a 	bl	8007fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	4b28      	ldr	r3, [pc, #160]	; (8001968 <SystemClock_Config+0xcc>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a27      	ldr	r2, [pc, #156]	; (8001968 <SystemClock_Config+0xcc>)
 80018ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ce:	6413      	str	r3, [r2, #64]	; 0x40
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <SystemClock_Config+0xcc>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <SystemClock_Config+0xd0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018e8:	4a20      	ldr	r2, [pc, #128]	; (800196c <SystemClock_Config+0xd0>)
 80018ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <SystemClock_Config+0xd0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001900:	2301      	movs	r3, #1
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001904:	2310      	movs	r3, #16
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001908:	2302      	movs	r3, #2
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001910:	2308      	movs	r3, #8
 8001912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001914:	2354      	movs	r3, #84	; 0x54
 8001916:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001918:	2302      	movs	r3, #2
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800191c:	2304      	movs	r3, #4
 800191e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001920:	f107 0320 	add.w	r3, r7, #32
 8001924:	4618      	mov	r0, r3
 8001926:	f004 fa99 	bl	8005e5c <HAL_RCC_OscConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001930:	f000 f854 	bl	80019dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001934:	230f      	movs	r3, #15
 8001936:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001938:	2302      	movs	r3, #2
 800193a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	2102      	movs	r1, #2
 8001950:	4618      	mov	r0, r3
 8001952:	f004 fcfb 	bl	800634c <HAL_RCC_ClockConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800195c:	f000 f83e 	bl	80019dc <Error_Handler>
  }
}
 8001960:	bf00      	nop
 8001962:	3750      	adds	r7, #80	; 0x50
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	40007000 	.word	0x40007000

08001970 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	char keyword[] = "toggle\r\n";
 8001978:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <HAL_UART_RxCpltCallback+0x58>)
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001980:	c303      	stmia	r3!, {r0, r1}
 8001982:	701a      	strb	r2, [r3, #0]
	if (huart == &huart2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a11      	ldr	r2, [pc, #68]	; (80019cc <HAL_UART_RxCpltCallback+0x5c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d118      	bne.n	80019be <HAL_UART_RxCpltCallback+0x4e>
	{
		if (strcmp(rxBuff, keyword) == 0)
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	4619      	mov	r1, r3
 8001992:	480f      	ldr	r0, [pc, #60]	; (80019d0 <HAL_UART_RxCpltCallback+0x60>)
 8001994:	f7fe fc24 	bl	80001e0 <strcmp>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10f      	bne.n	80019be <HAL_UART_RxCpltCallback+0x4e>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800199e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019a2:	480c      	ldr	r0, [pc, #48]	; (80019d4 <HAL_UART_RxCpltCallback+0x64>)
 80019a4:	f001 ff1b 	bl	80037de <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart2, (uint8_t*) "TOGGLE\r\n", 8, 10);
 80019a8:	230a      	movs	r3, #10
 80019aa:	2208      	movs	r2, #8
 80019ac:	490a      	ldr	r1, [pc, #40]	; (80019d8 <HAL_UART_RxCpltCallback+0x68>)
 80019ae:	4807      	ldr	r0, [pc, #28]	; (80019cc <HAL_UART_RxCpltCallback+0x5c>)
 80019b0:	f005 fab3 	bl	8006f1a <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, (uint8_t*) rxBuff, 8);
 80019b4:	2208      	movs	r2, #8
 80019b6:	4906      	ldr	r1, [pc, #24]	; (80019d0 <HAL_UART_RxCpltCallback+0x60>)
 80019b8:	4804      	ldr	r0, [pc, #16]	; (80019cc <HAL_UART_RxCpltCallback+0x5c>)
 80019ba:	f005 fb40 	bl	800703e <HAL_UART_Receive_IT>
		}

	}
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	0800d798 	.word	0x0800d798
 80019cc:	200003e8 	.word	0x200003e8
 80019d0:	200002c4 	.word	0x200002c4
 80019d4:	40020800 	.word	0x40020800
 80019d8:	0800d78c 	.word	0x0800d78c

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <Error_Handler+0x8>
	...

080019e8 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <OneWire_Delay+0x30>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 80019fa:	bf00      	nop
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <OneWire_Delay+0x30>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d9f9      	bls.n	80019fc <OneWire_Delay+0x14>
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000358 	.word	0x20000358

08001a1c <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	889b      	ldrh	r3, [r3, #4]
 8001a34:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f107 020c 	add.w	r2, r7, #12
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 fd17 	bl	8003474 <HAL_GPIO_Init>
}
 8001a46:	bf00      	nop
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b088      	sub	sp, #32
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8001a56:	2311      	movs	r3, #17
 8001a58:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8001a5e:	2301      	movs	r3, #1
 8001a60:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	889b      	ldrh	r3, [r3, #4]
 8001a66:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f107 020c 	add.w	r2, r7, #12
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f001 fcfe 	bl	8003474 <HAL_GPIO_Init>
}
 8001a78:	bf00      	nop
 8001a7a:	3720      	adds	r7, #32
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	889b      	ldrh	r3, [r3, #4]
 8001a8c:	041a      	lsls	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	619a      	str	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	889a      	ldrh	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	619a      	str	r2, [r3, #24]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffda 	bl	8001a80 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ffbe 	bl	8001a4e <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 8001ad2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001ad6:	f7ff ff87 	bl	80019e8 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ff9e 	bl	8001a1c <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8001ae0:	2046      	movs	r0, #70	; 0x46
 8001ae2:	f7ff ff81 	bl	80019e8 <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	889b      	ldrh	r3, [r3, #4]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4610      	mov	r0, r2
 8001af2:	f001 fe43 	bl	800377c <HAL_GPIO_ReadPin>
 8001af6:	4603      	mov	r3, r0
 8001af8:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8001afa:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001afe:	f7ff ff73 	bl	80019e8 <OneWire_Delay>

	return i;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00f      	beq.n	8001b3e <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ffae 	bl	8001a80 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff92 	bl	8001a4e <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8001b2a:	2006      	movs	r0, #6
 8001b2c:	f7ff ff5c 	bl	80019e8 <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff73 	bl	8001a1c <OneWire_BusInputDirection>
		OneWire_Delay(64);
 8001b36:	2040      	movs	r0, #64	; 0x40
 8001b38:	f7ff ff56 	bl	80019e8 <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 8001b3c:	e00e      	b.n	8001b5c <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ff9e 	bl	8001a80 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff82 	bl	8001a4e <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8001b4a:	203c      	movs	r0, #60	; 0x3c
 8001b4c:	f7ff ff4c 	bl	80019e8 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ff63 	bl	8001a1c <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8001b56:	200a      	movs	r0, #10
 8001b58:	f7ff ff46 	bl	80019e8 <OneWire_Delay>
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff85 	bl	8001a80 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ff69 	bl	8001a4e <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8001b7c:	2002      	movs	r0, #2
 8001b7e:	f7ff ff33 	bl	80019e8 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff4a 	bl	8001a1c <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8001b88:	200a      	movs	r0, #10
 8001b8a:	f7ff ff2d 	bl	80019e8 <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	889b      	ldrh	r3, [r3, #4]
 8001b96:	4619      	mov	r1, r3
 8001b98:	4610      	mov	r0, r2
 8001b9a:	f001 fdef 	bl	800377c <HAL_GPIO_ReadPin>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <OneWire_ReadBit+0x44>
		bit = 1;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]

	OneWire_Delay(50); // Wait for end of read cycle
 8001ba8:	2032      	movs	r0, #50	; 0x32
 8001baa:	f7ff ff1d 	bl	80019e8 <OneWire_Delay>

	return bit;
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ff9a 	bl	8001b0c <OneWire_WriteBit>
		byte >>= 1;
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	085b      	lsrs	r3, r3, #1
 8001bdc:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ee      	bne.n	8001bc8 <OneWire_WriteByte+0x10>
}
 8001bea:	bf00      	nop
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	2300      	movs	r3, #0
 8001c02:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 8001c04:	7bbb      	ldrb	r3, [r7, #14]
 8001c06:	085b      	lsrs	r3, r3, #1
 8001c08:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ffaa 	bl	8001b64 <OneWire_ReadBit>
 8001c10:	4603      	mov	r3, r0
 8001c12:	01db      	lsls	r3, r3, #7
 8001c14:	b25a      	sxtb	r2, r3
 8001c16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	73fb      	strb	r3, [r7, #15]
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1eb      	bne.n	8001c04 <OneWire_ReadByte+0x10>

	return byte;
 8001c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	71da      	strb	r2, [r3, #7]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7a1b      	ldrb	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f040 809a 	bne.w	8001dba <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ff19 	bl	8001abe <OneWire_Reset>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00a      	beq.n	8001ca8 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	71da      	strb	r2, [r3, #7]
			return 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e09b      	b.n	8001de0 <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	4619      	mov	r1, r3
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff83 	bl	8001bb8 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ff56 	bl	8001b64 <OneWire_ReadBit>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff51 	bl	8001b64 <OneWire_ReadBit>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8001cc6:	7a7b      	ldrb	r3, [r7, #9]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d102      	bne.n	8001cd2 <OneWire_Search+0x76>
 8001ccc:	7a3b      	ldrb	r3, [r7, #8]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d064      	beq.n	8001d9c <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 8001cd2:	7a7a      	ldrb	r2, [r7, #9]
 8001cd4:	7a3b      	ldrb	r3, [r7, #8]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d002      	beq.n	8001ce0 <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8001cda:	7a7b      	ldrb	r3, [r7, #9]
 8001cdc:	72bb      	strb	r3, [r7, #10]
 8001cde:	e026      	b.n	8001d2e <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	799b      	ldrb	r3, [r3, #6]
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d20d      	bcs.n	8001d06 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001cea:	7b7b      	ldrb	r3, [r7, #13]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	4413      	add	r3, r2
 8001cf0:	7a5a      	ldrb	r2, [r3, #9]
 8001cf2:	7afb      	ldrb	r3, [r7, #11]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	72bb      	strb	r3, [r7, #10]
 8001d04:	e008      	b.n	8001d18 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	799b      	ldrb	r3, [r3, #6]
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	bf0c      	ite	eq
 8001d10:	2301      	moveq	r3, #1
 8001d12:	2300      	movne	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8001d18:	7abb      	ldrb	r3, [r7, #10]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d107      	bne.n	8001d2e <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 8001d22:	7bbb      	ldrb	r3, [r7, #14]
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d802      	bhi.n	8001d2e <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7bba      	ldrb	r2, [r7, #14]
 8001d2c:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8001d2e:	7abb      	ldrb	r3, [r7, #10]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d10c      	bne.n	8001d4e <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8001d34:	7b7b      	ldrb	r3, [r7, #13]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	7a59      	ldrb	r1, [r3, #9]
 8001d3c:	7b7b      	ldrb	r3, [r7, #13]
 8001d3e:	7afa      	ldrb	r2, [r7, #11]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	b2d1      	uxtb	r1, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	460a      	mov	r2, r1
 8001d4a:	725a      	strb	r2, [r3, #9]
 8001d4c:	e010      	b.n	8001d70 <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8001d4e:	7b7b      	ldrb	r3, [r7, #13]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	7a5b      	ldrb	r3, [r3, #9]
 8001d56:	b25a      	sxtb	r2, r3
 8001d58:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	b25b      	sxtb	r3, r3
 8001d60:	4013      	ands	r3, r2
 8001d62:	b25a      	sxtb	r2, r3
 8001d64:	7b7b      	ldrb	r3, [r7, #13]
 8001d66:	b2d1      	uxtb	r1, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	460a      	mov	r2, r1
 8001d6e:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8001d70:	7abb      	ldrb	r3, [r7, #10]
 8001d72:	4619      	mov	r1, r3
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff fec9 	bl	8001b0c <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8001d80:	7afb      	ldrb	r3, [r7, #11]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8001d86:	7afb      	ldrb	r3, [r7, #11]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d104      	bne.n	8001d96 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 8001d8c:	7b7b      	ldrb	r3, [r7, #13]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 8001d92:	2301      	movs	r3, #1
 8001d94:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 8001d96:	7b7b      	ldrb	r3, [r7, #13]
 8001d98:	2b07      	cmp	r3, #7
 8001d9a:	d98a      	bls.n	8001cb2 <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b40      	cmp	r3, #64	; 0x40
 8001da0:	d90b      	bls.n	8001dba <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7bba      	ldrb	r2, [r7, #14]
 8001da6:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	799b      	ldrb	r3, [r3, #6]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8001db6:	2301      	movs	r3, #1
 8001db8:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8001dba:	7b3b      	ldrb	r3, [r7, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <OneWire_Search+0x16c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7a5b      	ldrb	r3, [r3, #9]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10a      	bne.n	8001dde <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8001dde:	7b3b      	ldrb	r3, [r7, #12]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff20 	bl	8001c36 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8001df6:	21f0      	movs	r1, #240	; 0xf0
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff2f 	bl	8001c5c <OneWire_Search>
 8001dfe:	4603      	mov	r3, r0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8001e10:	21f0      	movs	r1, #240	; 0xf0
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ff22 	bl	8001c5c <OneWire_Search>
 8001e18:	4603      	mov	r3, r0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8001e2c:	2155      	movs	r1, #85	; 0x55
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff fec2 	bl	8001bb8 <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
 8001e38:	e00a      	b.n	8001e50 <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4619      	mov	r1, r3
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff feb7 	bl	8001bb8 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	2b07      	cmp	r3, #7
 8001e54:	d9f1      	bls.n	8001e3a <OneWire_SelectWithPointer+0x18>
	}
}
 8001e56:	bf00      	nop
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	e00a      	b.n	8001e86 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	6839      	ldr	r1, [r7, #0]
 8001e76:	440b      	add	r3, r1
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	440a      	add	r2, r1
 8001e7c:	7a52      	ldrb	r2, [r2, #9]
 8001e7e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	3301      	adds	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	2b07      	cmp	r3, #7
 8001e8a:	d9f1      	bls.n	8001e70 <OneWire_GetFullROM+0x10>
	}
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8001eaa:	4811      	ldr	r0, [pc, #68]	; (8001ef0 <OneWire_Init+0x54>)
 8001eac:	f004 ff0e 	bl	8006ccc <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	88fa      	ldrh	r2, [r7, #6]
 8001eba:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f7ff fdc6 	bl	8001a4e <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f7ff fdec 	bl	8001aa0 <OneWire_OutputHigh>
	HAL_Delay(100);
 8001ec8:	2064      	movs	r0, #100	; 0x64
 8001eca:	f001 f8fd 	bl	80030c8 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7ff fdd6 	bl	8001a80 <OneWire_OutputLow>
	HAL_Delay(100);
 8001ed4:	2064      	movs	r0, #100	; 0x64
 8001ed6:	f001 f8f7 	bl	80030c8 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f7ff fde0 	bl	8001aa0 <OneWire_OutputHigh>
	HAL_Delay(200);
 8001ee0:	20c8      	movs	r0, #200	; 0xc8
 8001ee2:	f001 f8f1 	bl	80030c8 <HAL_Delay>
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000358 	.word	0x20000358

08001ef4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001efa:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <MX_SPI1_Init+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f40:	220a      	movs	r2, #10
 8001f42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f46:	f004 fbe1 	bl	800670c <HAL_SPI_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f50:	f7ff fd44 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200002fc 	.word	0x200002fc
 8001f5c:	40013000 	.word	0x40013000

08001f60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <HAL_SPI_MspInit+0x84>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12b      	bne.n	8001fda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001f8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fba:	23e0      	movs	r3, #224	; 0xe0
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fca:	2305      	movs	r3, #5
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_SPI_MspInit+0x8c>)
 8001fd6:	f001 fa4d 	bl	8003474 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	; 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40013000 	.word	0x40013000
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020000 	.word	0x40020000

08001ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_MspInit+0x4c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a0f      	ldr	r2, [pc, #60]	; (800203c <HAL_MspInit+0x4c>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_MspInit+0x4c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_MspInit+0x4c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a08      	ldr	r2, [pc, #32]	; (800203c <HAL_MspInit+0x4c>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_MspInit+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <NMI_Handler+0x4>

08002046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <HardFault_Handler+0x4>

0800204c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <MemManage_Handler+0x4>

08002052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <BusFault_Handler+0x4>

08002058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <UsageFault_Handler+0x4>

0800205e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800208c:	f000 fffc 	bl	8003088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}

08002094 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <I2C1_EV_IRQHandler+0x10>)
 800209a:	f002 f895 	bl	80041c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000264 	.word	0x20000264

080020a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <USART2_IRQHandler+0x10>)
 80020ae:	f004 fff7 	bl	80070a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200003e8 	.word	0x200003e8

080020bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return 1;
 80020c0:	2301      	movs	r3, #1
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_kill>:

int _kill(int pid, int sig)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020d6:	f005 ff4b 	bl	8007f70 <__errno>
 80020da:	4603      	mov	r3, r0
 80020dc:	2216      	movs	r2, #22
 80020de:	601a      	str	r2, [r3, #0]
  return -1;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_exit>:

void _exit (int status)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ffe7 	bl	80020cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80020fe:	e7fe      	b.n	80020fe <_exit+0x12>

08002100 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	e00a      	b.n	8002128 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002112:	f3af 8000 	nop.w
 8002116:	4601      	mov	r1, r0
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	60ba      	str	r2, [r7, #8]
 800211e:	b2ca      	uxtb	r2, r1
 8002120:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3301      	adds	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	dbf0      	blt.n	8002112 <_read+0x12>
  }

  return len;
 8002130:	687b      	ldr	r3, [r7, #4]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	e009      	b.n	8002160 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	60ba      	str	r2, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3301      	adds	r3, #1
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	dbf1      	blt.n	800214c <_write+0x12>
  }
  return len;
 8002168:	687b      	ldr	r3, [r7, #4]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <_close>:

int _close(int file)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800219a:	605a      	str	r2, [r3, #4]
  return 0;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <_isatty>:

int _isatty(int file)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <_sbrk+0x5c>)
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <_sbrk+0x60>)
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <_sbrk+0x64>)
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <_sbrk+0x68>)
 80021fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	429a      	cmp	r2, r3
 800220a:	d207      	bcs.n	800221c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800220c:	f005 feb0 	bl	8007f70 <__errno>
 8002210:	4603      	mov	r3, r0
 8002212:	220c      	movs	r2, #12
 8002214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	e009      	b.n	8002230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <_sbrk+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <_sbrk+0x64>)
 800222c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222e:	68fb      	ldr	r3, [r7, #12]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20010000 	.word	0x20010000
 800223c:	00000400 	.word	0x00000400
 8002240:	20000354 	.word	0x20000354
 8002244:	20000440 	.word	0x20000440

08002248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <SystemInit+0x20>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	4a05      	ldr	r2, [pc, #20]	; (8002268 <SystemInit+0x20>)
 8002254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002270:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <MX_TIM10_Init+0x40>)
 8002272:	4a0f      	ldr	r2, [pc, #60]	; (80022b0 <MX_TIM10_Init+0x44>)
 8002274:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 62;
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <MX_TIM10_Init+0x40>)
 8002278:	223e      	movs	r2, #62	; 0x3e
 800227a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <MX_TIM10_Init+0x40>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <MX_TIM10_Init+0x40>)
 8002284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002288:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <MX_TIM10_Init+0x40>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <MX_TIM10_Init+0x40>)
 8002292:	2200      	movs	r2, #0
 8002294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_TIM10_Init+0x40>)
 8002298:	f004 fcc8 	bl	8006c2c <HAL_TIM_Base_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80022a2:	f7ff fb9b 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000358 	.word	0x20000358
 80022b0:	40014400 	.word	0x40014400

080022b4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <MX_TIM11_Init+0x40>)
 80022ba:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <MX_TIM11_Init+0x44>)
 80022bc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 50-1;
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <MX_TIM11_Init+0x40>)
 80022c0:	2231      	movs	r2, #49	; 0x31
 80022c2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <MX_TIM11_Init+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0xffff-1;
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <MX_TIM11_Init+0x40>)
 80022cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80022d0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <MX_TIM11_Init+0x40>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <MX_TIM11_Init+0x40>)
 80022da:	2200      	movs	r2, #0
 80022dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80022de:	4805      	ldr	r0, [pc, #20]	; (80022f4 <MX_TIM11_Init+0x40>)
 80022e0:	f004 fca4 	bl	8006c2c <HAL_TIM_Base_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80022ea:	f7ff fb77 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200003a0 	.word	0x200003a0
 80022f8:	40014800 	.word	0x40014800

080022fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a15      	ldr	r2, [pc, #84]	; (8002360 <HAL_TIM_Base_MspInit+0x64>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10e      	bne.n	800232c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_TIM_Base_MspInit+0x68>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	4a13      	ldr	r2, [pc, #76]	; (8002364 <HAL_TIM_Base_MspInit+0x68>)
 8002318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231c:	6453      	str	r3, [r2, #68]	; 0x44
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_TIM_Base_MspInit+0x68>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800232a:	e012      	b.n	8002352 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM11)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0d      	ldr	r2, [pc, #52]	; (8002368 <HAL_TIM_Base_MspInit+0x6c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d10d      	bne.n	8002352 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_TIM_Base_MspInit+0x68>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	4a09      	ldr	r2, [pc, #36]	; (8002364 <HAL_TIM_Base_MspInit+0x68>)
 8002340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002344:	6453      	str	r3, [r2, #68]	; 0x44
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <HAL_TIM_Base_MspInit+0x68>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
}
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40014400 	.word	0x40014400
 8002364:	40023800 	.word	0x40023800
 8002368:	40014800 	.word	0x40014800

0800236c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002372:	4a12      	ldr	r2, [pc, #72]	; (80023bc <MX_USART2_UART_Init+0x50>)
 8002374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800237c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002386:	2200      	movs	r2, #0
 8002388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002392:	220c      	movs	r2, #12
 8002394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023a2:	4805      	ldr	r0, [pc, #20]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 80023a4:	f004 fd6c 	bl	8006e80 <HAL_UART_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023ae:	f7ff fb15 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200003e8 	.word	0x200003e8
 80023bc:	40004400 	.word	0x40004400

080023c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <HAL_UART_MspInit+0x94>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d133      	bne.n	800244a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <HAL_UART_MspInit+0x98>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <HAL_UART_MspInit+0x98>)
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b19      	ldr	r3, [pc, #100]	; (8002458 <HAL_UART_MspInit+0x98>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <HAL_UART_MspInit+0x98>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a14      	ldr	r2, [pc, #80]	; (8002458 <HAL_UART_MspInit+0x98>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_UART_MspInit+0x98>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800241a:	230c      	movs	r3, #12
 800241c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800242a:	2307      	movs	r3, #7
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	4619      	mov	r1, r3
 8002434:	4809      	ldr	r0, [pc, #36]	; (800245c <HAL_UART_MspInit+0x9c>)
 8002436:	f001 f81d 	bl	8003474 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	2100      	movs	r1, #0
 800243e:	2026      	movs	r0, #38	; 0x26
 8002440:	f000 ff41 	bl	80032c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002444:	2026      	movs	r0, #38	; 0x26
 8002446:	f000 ff5a 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800244a:	bf00      	nop
 800244c:	3728      	adds	r7, #40	; 0x28
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40004400 	.word	0x40004400
 8002458:	40023800 	.word	0x40023800
 800245c:	40020000 	.word	0x40020000

08002460 <ftoa>:
#include "common.h"
#include <math.h>
#include <stdio.h>
// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 8002460:	b5b0      	push	{r4, r5, r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	ed87 0a03 	vstr	s0, [r7, #12]
 800246a:	60b8      	str	r0, [r7, #8]
 800246c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 800246e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002476:	ee17 3a90 	vmov	r3, s15
 800247a:	61fb      	str	r3, [r7, #28]
    // Extract floating part
    float fpart = n - (float)ipart;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002486:	ed97 7a03 	vldr	s14, [r7, #12]
 800248a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800248e:	edc7 7a06 	vstr	s15, [r7, #24]
    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	69f8      	ldr	r0, [r7, #28]
 8002498:	f000 f83e 	bl	8002518 <intToStr>
 800249c:	6178      	str	r0, [r7, #20]
    // check for display option after point
    if (afterpoint != 0)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d030      	beq.n	8002506 <ftoa+0xa6>
    {
        res[i] = '.'; // add dot
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	4413      	add	r3, r2
 80024aa:	222e      	movs	r2, #46	; 0x2e
 80024ac:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 80024ae:	69b8      	ldr	r0, [r7, #24]
 80024b0:	f7fe f862 	bl	8000578 <__aeabi_f2d>
 80024b4:	4604      	mov	r4, r0
 80024b6:	460d      	mov	r5, r1
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7fe f84b 	bl	8000554 <__aeabi_i2d>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	ec43 2b11 	vmov	d1, r2, r3
 80024c6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002510 <ftoa+0xb0>
 80024ca:	f00a f9f5 	bl	800c8b8 <pow>
 80024ce:	ec53 2b10 	vmov	r2, r3, d0
 80024d2:	4620      	mov	r0, r4
 80024d4:	4629      	mov	r1, r5
 80024d6:	f7fe f8a7 	bl	8000628 <__aeabi_dmul>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f7fe fb99 	bl	8000c18 <__aeabi_d2f>
 80024e6:	4603      	mov	r3, r0
 80024e8:	61bb      	str	r3, [r7, #24]
        intToStr((int)fpart, res + i + 1, afterpoint);
 80024ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80024ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	3301      	adds	r3, #1
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	4413      	add	r3, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4619      	mov	r1, r3
 80024fe:	ee17 0a90 	vmov	r0, s15
 8002502:	f000 f809 	bl	8002518 <intToStr>
    }
}
 8002506:	bf00      	nop
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bdb0      	pop	{r4, r5, r7, pc}
 800250e:	bf00      	nop
 8002510:	00000000 	.word	0x00000000
 8002514:	40240000 	.word	0x40240000

08002518 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
    int i = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
    if (x == 0)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d126      	bne.n	800257c <intToStr+0x64>
    {
        str[i++] = '0';
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	617a      	str	r2, [r7, #20]
 8002534:	461a      	mov	r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4413      	add	r3, r2
 800253a:	2230      	movs	r2, #48	; 0x30
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	e029      	b.n	8002594 <intToStr+0x7c>
    }
    else
    {
        while (x)
        {
            str[i++] = (x % 10) + '0';
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <intToStr+0xa0>)
 8002544:	fb83 1302 	smull	r1, r3, r3, r2
 8002548:	1099      	asrs	r1, r3, #2
 800254a:	17d3      	asrs	r3, r2, #31
 800254c:	1ac9      	subs	r1, r1, r3
 800254e:	460b      	mov	r3, r1
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	1ad1      	subs	r1, r2, r3
 8002558:	b2ca      	uxtb	r2, r1
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	1c59      	adds	r1, r3, #1
 800255e:	6179      	str	r1, [r7, #20]
 8002560:	4619      	mov	r1, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	440b      	add	r3, r1
 8002566:	3230      	adds	r2, #48	; 0x30
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]
            x = x / 10;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <intToStr+0xa0>)
 8002570:	fb82 1203 	smull	r1, r2, r2, r3
 8002574:	1092      	asrs	r2, r2, #2
 8002576:	17db      	asrs	r3, r3, #31
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	60fb      	str	r3, [r7, #12]
        while (x)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1de      	bne.n	8002540 <intToStr+0x28>
        }
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8002582:	e007      	b.n	8002594 <intToStr+0x7c>
        str[i++] = '0';
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	617a      	str	r2, [r7, #20]
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4413      	add	r3, r2
 8002590:	2230      	movs	r2, #48	; 0x30
 8002592:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	dbf3      	blt.n	8002584 <intToStr+0x6c>

    reverse(str, i);
 800259c:	6979      	ldr	r1, [r7, #20]
 800259e:	68b8      	ldr	r0, [r7, #8]
 80025a0:	f000 f80c 	bl	80025bc <reverse>
    str[i] = '\0';
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	4413      	add	r3, r2
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
    return i;
 80025ae:	697b      	ldr	r3, [r7, #20]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	66666667 	.word	0x66666667

080025bc <reverse>:

void reverse(char* str, int len)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	613b      	str	r3, [r7, #16]
    while (i < j)
 80025d0:	e018      	b.n	8002604 <reverse+0x48>
    {
        temp = str[i];
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	441a      	add	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	440b      	add	r3, r1
 80025e8:	7812      	ldrb	r2, [r2, #0]
 80025ea:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]
        i++;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	3301      	adds	r3, #1
 80025fc:	617b      	str	r3, [r7, #20]
        j--;
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	3b01      	subs	r3, #1
 8002602:	613b      	str	r3, [r7, #16]
    while (i < j)
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	429a      	cmp	r2, r3
 800260a:	dbe2      	blt.n	80025d2 <reverse+0x16>
    }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <ILI9341_Select>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"


static void ILI9341_Select()
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8002620:	2200      	movs	r2, #0
 8002622:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002626:	4802      	ldr	r0, [pc, #8]	; (8002630 <ILI9341_Select+0x14>)
 8002628:	f001 f8c0 	bl	80037ac <HAL_GPIO_WritePin>

}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40020000 	.word	0x40020000

08002634 <ILI9341_Unselect>:

void ILI9341_Unselect()
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8002638:	2201      	movs	r2, #1
 800263a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800263e:	4802      	ldr	r0, [pc, #8]	; (8002648 <ILI9341_Unselect+0x14>)
 8002640:	f001 f8b4 	bl	80037ac <HAL_GPIO_WritePin>
}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40020000 	.word	0x40020000

0800264c <ILI9341_Reset>:

static void ILI9341_Reset()
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8002650:	2200      	movs	r2, #0
 8002652:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002656:	4807      	ldr	r0, [pc, #28]	; (8002674 <ILI9341_Reset+0x28>)
 8002658:	f001 f8a8 	bl	80037ac <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800265c:	200a      	movs	r0, #10
 800265e:	f000 fd33 	bl	80030c8 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8002662:	2201      	movs	r2, #1
 8002664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <ILI9341_Reset+0x28>)
 800266a:	f001 f89f 	bl	80037ac <HAL_GPIO_WritePin>
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40020400 	.word	0x40020400

08002678 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8002682:	2200      	movs	r2, #0
 8002684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002688:	4806      	ldr	r0, [pc, #24]	; (80026a4 <ILI9341_WriteCommand+0x2c>)
 800268a:	f001 f88f 	bl	80037ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800268e:	1df9      	adds	r1, r7, #7
 8002690:	f04f 33ff 	mov.w	r3, #4294967295
 8002694:	2201      	movs	r2, #1
 8002696:	4804      	ldr	r0, [pc, #16]	; (80026a8 <ILI9341_WriteCommand+0x30>)
 8002698:	f004 f8c1 	bl	800681e <HAL_SPI_Transmit>
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40020400 	.word	0x40020400
 80026a8:	200002fc 	.word	0x200002fc

080026ac <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80026b6:	2201      	movs	r2, #1
 80026b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026bc:	4810      	ldr	r0, [pc, #64]	; (8002700 <ILI9341_WriteData+0x54>)
 80026be:	f001 f875 	bl	80037ac <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80026c2:	e015      	b.n	80026f0 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ca:	bf28      	it	cs
 80026cc:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80026d0:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80026d2:	89fa      	ldrh	r2, [r7, #14]
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	480a      	ldr	r0, [pc, #40]	; (8002704 <ILI9341_WriteData+0x58>)
 80026dc:	f004 f89f 	bl	800681e <HAL_SPI_Transmit>
        buff += chunk_size;
 80026e0:	89fb      	ldrh	r3, [r7, #14]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80026e8:	89fb      	ldrh	r3, [r7, #14]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e6      	bne.n	80026c4 <ILI9341_WriteData+0x18>
    }
}
 80026f6:	bf00      	nop
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40020400 	.word	0x40020400
 8002704:	200002fc 	.word	0x200002fc

08002708 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	4604      	mov	r4, r0
 8002710:	4608      	mov	r0, r1
 8002712:	4611      	mov	r1, r2
 8002714:	461a      	mov	r2, r3
 8002716:	4623      	mov	r3, r4
 8002718:	80fb      	strh	r3, [r7, #6]
 800271a:	4603      	mov	r3, r0
 800271c:	80bb      	strh	r3, [r7, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	807b      	strh	r3, [r7, #2]
 8002722:	4613      	mov	r3, r2
 8002724:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8002726:	202a      	movs	r0, #42	; 0x2a
 8002728:	f7ff ffa6 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	b29b      	uxth	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	733b      	strb	r3, [r7, #12]
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	737b      	strb	r3, [r7, #13]
 800273c:	887b      	ldrh	r3, [r7, #2]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	b29b      	uxth	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	73bb      	strb	r3, [r7, #14]
 8002746:	887b      	ldrh	r3, [r7, #2]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	2104      	movs	r1, #4
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff ffaa 	bl	80026ac <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8002758:	202b      	movs	r0, #43	; 0x2b
 800275a:	f7ff ff8d 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800275e:	88bb      	ldrh	r3, [r7, #4]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	b29b      	uxth	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	723b      	strb	r3, [r7, #8]
 8002768:	88bb      	ldrh	r3, [r7, #4]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	727b      	strb	r3, [r7, #9]
 800276e:	883b      	ldrh	r3, [r7, #0]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	b29b      	uxth	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	72bb      	strb	r3, [r7, #10]
 8002778:	883b      	ldrh	r3, [r7, #0]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800277e:	f107 0308 	add.w	r3, r7, #8
 8002782:	2104      	movs	r1, #4
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff91 	bl	80026ac <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800278a:	202c      	movs	r0, #44	; 0x2c
 800278c:	f7ff ff74 	bl	8002678 <ILI9341_WriteCommand>
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bd90      	pop	{r4, r7, pc}

08002798 <ILI9341_Init>:

void ILI9341_Init()
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b09b      	sub	sp, #108	; 0x6c
 800279c:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800279e:	f7ff ff3d 	bl	800261c <ILI9341_Select>
    ILI9341_Reset();
 80027a2:	f7ff ff53 	bl	800264c <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80027a6:	2001      	movs	r0, #1
 80027a8:	f7ff ff66 	bl	8002678 <ILI9341_WriteCommand>
    HAL_Delay(500);
 80027ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027b0:	f000 fc8a 	bl	80030c8 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80027b4:	20cb      	movs	r0, #203	; 0xcb
 80027b6:	f7ff ff5f 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80027ba:	4a8a      	ldr	r2, [pc, #552]	; (80029e4 <ILI9341_Init+0x24c>)
 80027bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027c4:	6018      	str	r0, [r3, #0]
 80027c6:	3304      	adds	r3, #4
 80027c8:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80027ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027ce:	2105      	movs	r1, #5
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff6b 	bl	80026ac <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80027d6:	20cf      	movs	r0, #207	; 0xcf
 80027d8:	f7ff ff4e 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80027dc:	4a82      	ldr	r2, [pc, #520]	; (80029e8 <ILI9341_Init+0x250>)
 80027de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	4611      	mov	r1, r2
 80027e6:	8019      	strh	r1, [r3, #0]
 80027e8:	3302      	adds	r3, #2
 80027ea:	0c12      	lsrs	r2, r2, #16
 80027ec:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80027ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027f2:	2103      	movs	r1, #3
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff59 	bl	80026ac <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80027fa:	20e8      	movs	r0, #232	; 0xe8
 80027fc:	f7ff ff3c 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8002800:	4a7a      	ldr	r2, [pc, #488]	; (80029ec <ILI9341_Init+0x254>)
 8002802:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	4611      	mov	r1, r2
 800280a:	8019      	strh	r1, [r3, #0]
 800280c:	3302      	adds	r3, #2
 800280e:	0c12      	lsrs	r2, r2, #16
 8002810:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002812:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002816:	2103      	movs	r1, #3
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff47 	bl	80026ac <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 800281e:	20ea      	movs	r0, #234	; 0xea
 8002820:	f7ff ff2a 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8002824:	2300      	movs	r3, #0
 8002826:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 800282a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800282e:	2102      	movs	r1, #2
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff3b 	bl	80026ac <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8002836:	20ed      	movs	r0, #237	; 0xed
 8002838:	f7ff ff1e 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 800283c:	4b6c      	ldr	r3, [pc, #432]	; (80029f0 <ILI9341_Init+0x258>)
 800283e:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 8002840:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002844:	2104      	movs	r1, #4
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff30 	bl	80026ac <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 800284c:	20f7      	movs	r0, #247	; 0xf7
 800284e:	f7ff ff13 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8002852:	2320      	movs	r3, #32
 8002854:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8002858:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800285c:	2101      	movs	r1, #1
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ff24 	bl	80026ac <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8002864:	20c0      	movs	r0, #192	; 0xc0
 8002866:	f7ff ff07 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800286a:	2323      	movs	r3, #35	; 0x23
 800286c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8002870:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002874:	2101      	movs	r1, #1
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff ff18 	bl	80026ac <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 800287c:	20c1      	movs	r0, #193	; 0xc1
 800287e:	f7ff fefb 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8002882:	2310      	movs	r3, #16
 8002884:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8002888:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800288c:	2101      	movs	r1, #1
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff0c 	bl	80026ac <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8002894:	20c5      	movs	r0, #197	; 0xc5
 8002896:	f7ff feef 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800289a:	f642 033e 	movw	r3, #10302	; 0x283e
 800289e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 80028a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028a6:	2102      	movs	r1, #2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff feff 	bl	80026ac <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80028ae:	20c7      	movs	r0, #199	; 0xc7
 80028b0:	f7ff fee2 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80028b4:	2386      	movs	r3, #134	; 0x86
 80028b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80028ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028be:	2101      	movs	r1, #1
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fef3 	bl	80026ac <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80028c6:	2036      	movs	r0, #54	; 0x36
 80028c8:	f7ff fed6 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80028cc:	2348      	movs	r3, #72	; 0x48
 80028ce:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 80028d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028d6:	2101      	movs	r1, #1
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fee7 	bl	80026ac <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80028de:	203a      	movs	r0, #58	; 0x3a
 80028e0:	f7ff feca 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80028e4:	2355      	movs	r3, #85	; 0x55
 80028e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 80028ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028ee:	2101      	movs	r1, #1
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fedb 	bl	80026ac <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80028f6:	20b1      	movs	r0, #177	; 0xb1
 80028f8:	f7ff febe 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80028fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002900:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 8002902:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002906:	2102      	movs	r1, #2
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fecf 	bl	80026ac <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 800290e:	20b6      	movs	r0, #182	; 0xb6
 8002910:	f7ff feb2 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8002914:	4a37      	ldr	r2, [pc, #220]	; (80029f4 <ILI9341_Init+0x25c>)
 8002916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	4611      	mov	r1, r2
 800291e:	8019      	strh	r1, [r3, #0]
 8002920:	3302      	adds	r3, #2
 8002922:	0c12      	lsrs	r2, r2, #16
 8002924:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800292a:	2103      	movs	r1, #3
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff febd 	bl	80026ac <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8002932:	20f2      	movs	r0, #242	; 0xf2
 8002934:	f7ff fea0 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8002938:	2300      	movs	r3, #0
 800293a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 800293e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002942:	2101      	movs	r1, #1
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff feb1 	bl	80026ac <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800294a:	2026      	movs	r0, #38	; 0x26
 800294c:	f7ff fe94 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8002950:	2301      	movs	r3, #1
 8002952:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 8002956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800295a:	2101      	movs	r1, #1
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fea5 	bl	80026ac <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8002962:	20e0      	movs	r0, #224	; 0xe0
 8002964:	f7ff fe88 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8002968:	4b23      	ldr	r3, [pc, #140]	; (80029f8 <ILI9341_Init+0x260>)
 800296a:	f107 0414 	add.w	r4, r7, #20
 800296e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002970:	c407      	stmia	r4!, {r0, r1, r2}
 8002972:	8023      	strh	r3, [r4, #0]
 8002974:	3402      	adds	r4, #2
 8002976:	0c1b      	lsrs	r3, r3, #16
 8002978:	7023      	strb	r3, [r4, #0]
                            0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	210f      	movs	r1, #15
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fe93 	bl	80026ac <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8002986:	20e1      	movs	r0, #225	; 0xe1
 8002988:	f7ff fe76 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800298c:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <ILI9341_Init+0x264>)
 800298e:	1d3c      	adds	r4, r7, #4
 8002990:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002992:	c407      	stmia	r4!, {r0, r1, r2}
 8002994:	8023      	strh	r3, [r4, #0]
 8002996:	3402      	adds	r4, #2
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	7023      	strb	r3, [r4, #0]
                            0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	210f      	movs	r1, #15
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fe83 	bl	80026ac <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80029a6:	2011      	movs	r0, #17
 80029a8:	f7ff fe66 	bl	8002678 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80029ac:	2078      	movs	r0, #120	; 0x78
 80029ae:	f000 fb8b 	bl	80030c8 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80029b2:	2029      	movs	r0, #41	; 0x29
 80029b4:	f7ff fe60 	bl	8002678 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80029b8:	2036      	movs	r0, #54	; 0x36
 80029ba:	f7ff fe5d 	bl	8002678 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80029be:	23e8      	movs	r3, #232	; 0xe8
 80029c0:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80029c2:	463b      	mov	r3, r7
 80029c4:	2101      	movs	r1, #1
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fe70 	bl	80026ac <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80029cc:	f7ff fe32 	bl	8002634 <ILI9341_Unselect>

    HAL_GPIO_WritePin(ILI9341_LED_GPIO_Port, ILI9341_LED_Pin, SET);
 80029d0:	2201      	movs	r2, #1
 80029d2:	2102      	movs	r1, #2
 80029d4:	480a      	ldr	r0, [pc, #40]	; (8002a00 <ILI9341_Init+0x268>)
 80029d6:	f000 fee9 	bl	80037ac <HAL_GPIO_WritePin>
}
 80029da:	bf00      	nop
 80029dc:	376c      	adds	r7, #108	; 0x6c
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd90      	pop	{r4, r7, pc}
 80029e2:	bf00      	nop
 80029e4:	0800d7a4 	.word	0x0800d7a4
 80029e8:	0800d7ac 	.word	0x0800d7ac
 80029ec:	0800d7b0 	.word	0x0800d7b0
 80029f0:	81120364 	.word	0x81120364
 80029f4:	0800d7b4 	.word	0x0800d7b4
 80029f8:	0800d7b8 	.word	0x0800d7b8
 80029fc:	0800d7c8 	.word	0x0800d7c8
 8002a00:	40020400 	.word	0x40020400

08002a04 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	80fb      	strh	r3, [r7, #6]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	80bb      	strh	r3, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a1c:	d21f      	bcs.n	8002a5e <ILI9341_DrawPixel+0x5a>
 8002a1e:	88bb      	ldrh	r3, [r7, #4]
 8002a20:	2bef      	cmp	r3, #239	; 0xef
 8002a22:	d81c      	bhi.n	8002a5e <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 8002a24:	f7ff fdfa 	bl	800261c <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	88bb      	ldrh	r3, [r7, #4]
 8002a30:	3301      	adds	r3, #1
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	88b9      	ldrh	r1, [r7, #4]
 8002a36:	88f8      	ldrh	r0, [r7, #6]
 8002a38:	f7ff fe66 	bl	8002708 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002a3c:	887b      	ldrh	r3, [r7, #2]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	733b      	strb	r3, [r7, #12]
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 8002a4c:	f107 030c 	add.w	r3, r7, #12
 8002a50:	2102      	movs	r1, #2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fe2a 	bl	80026ac <ILI9341_WriteData>

    ILI9341_Unselect();
 8002a58:	f7ff fdec 	bl	8002634 <ILI9341_Unselect>
 8002a5c:	e000      	b.n	8002a60 <ILI9341_DrawPixel+0x5c>
        return;
 8002a5e:	bf00      	nop
}
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <ILI9341_DrawLine>:

void ILI9341_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8002a66:	b590      	push	{r4, r7, lr}
 8002a68:	b08d      	sub	sp, #52	; 0x34
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4604      	mov	r4, r0
 8002a6e:	4608      	mov	r0, r1
 8002a70:	4611      	mov	r1, r2
 8002a72:	461a      	mov	r2, r3
 8002a74:	4623      	mov	r3, r4
 8002a76:	80fb      	strh	r3, [r7, #6]
 8002a78:	4603      	mov	r3, r0
 8002a7a:	80bb      	strh	r3, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
 8002a80:	4613      	mov	r3, r2
 8002a82:	803b      	strh	r3, [r7, #0]
    uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a88:	2300      	movs	r3, #0
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;

	delta_x = x2 - x1;
 8002a8c:	887a      	ldrh	r2, [r7, #2]
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8002a94:	883a      	ldrh	r2, [r7, #0]
 8002a96:	88bb      	ldrh	r3, [r7, #4]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8002aa0:	88bb      	ldrh	r3, [r7, #4]
 8002aa2:	60bb      	str	r3, [r7, #8]

	if (delta_x > 0)
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	dd02      	ble.n	8002ab0 <ILI9341_DrawLine+0x4a>
        incx = 1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e00b      	b.n	8002ac8 <ILI9341_DrawLine+0x62>
	else if (delta_x == 0)
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d102      	bne.n	8002abc <ILI9341_DrawLine+0x56>
        incx = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	e005      	b.n	8002ac8 <ILI9341_DrawLine+0x62>
	else
    {
        incx = -1;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac0:	617b      	str	r3, [r7, #20]
        delta_x = -delta_x;
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	425b      	negs	r3, r3
 8002ac6:	623b      	str	r3, [r7, #32]
    }

    if (delta_y > 0)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	dd02      	ble.n	8002ad4 <ILI9341_DrawLine+0x6e>
        incy = 1;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	e00b      	b.n	8002aec <ILI9341_DrawLine+0x86>
	else if (delta_y==0)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d102      	bne.n	8002ae0 <ILI9341_DrawLine+0x7a>
        incy = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	e005      	b.n	8002aec <ILI9341_DrawLine+0x86>
	else
    {
        incy = -1;
 8002ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae4:	613b      	str	r3, [r7, #16]
        delta_y = -delta_y;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	425b      	negs	r3, r3
 8002aea:	61fb      	str	r3, [r7, #28]
    }

	if (delta_x > delta_y)
 8002aec:	6a3a      	ldr	r2, [r7, #32]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	dd02      	ble.n	8002afa <ILI9341_DrawLine+0x94>
        distance = delta_x;
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	e001      	b.n	8002afe <ILI9341_DrawLine+0x98>
	else
        distance = delta_y;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	61bb      	str	r3, [r7, #24]

	for(t = 0; t <= distance + 1; t++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002b02:	e02b      	b.n	8002b5c <ILI9341_DrawLine+0xf6>
	{
		ILI9341_DrawPixel(uRow, uCol, color);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	b291      	uxth	r1, r2
 8002b0c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff77 	bl	8002a04 <ILI9341_DrawPixel>

		xerr += delta_x;
 8002b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 8002b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	4413      	add	r3, r2
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24

		if (xerr > distance)
 8002b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	dd07      	ble.n	8002b3e <ILI9341_DrawLine+0xd8>
		{
			xerr -= distance;
 8002b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance)
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	dd07      	ble.n	8002b56 <ILI9341_DrawLine+0xf0>
		{
			yerr -= distance;
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	60bb      	str	r3, [r7, #8]
	for(t = 0; t <= distance + 1; t++)
 8002b56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b58:	3301      	adds	r3, #1
 8002b5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002b5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	3301      	adds	r3, #1
 8002b62:	429a      	cmp	r2, r3
 8002b64:	ddce      	ble.n	8002b04 <ILI9341_DrawLine+0x9e>
		}
	}
}
 8002b66:	bf00      	nop
 8002b68:	bf00      	nop
 8002b6a:	3734      	adds	r7, #52	; 0x34
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd90      	pop	{r4, r7, pc}

08002b70 <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002b70:	b082      	sub	sp, #8
 8002b72:	b590      	push	{r4, r7, lr}
 8002b74:	b089      	sub	sp, #36	; 0x24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	80fb      	strh	r3, [r7, #6]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	80bb      	strh	r3, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002b86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	4413      	add	r3, r2
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29c      	uxth	r4, r3
 8002b96:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	88bb      	ldrh	r3, [r7, #4]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	88b9      	ldrh	r1, [r7, #4]
 8002ba8:	88f8      	ldrh	r0, [r7, #6]
 8002baa:	4622      	mov	r2, r4
 8002bac:	f7ff fdac 	bl	8002708 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	e043      	b.n	8002c3e <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 8002bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	3b20      	subs	r3, #32
 8002bbc:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	440b      	add	r3, r1
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	e029      	b.n	8002c2c <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00e      	beq.n	8002c06 <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002be8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	743b      	strb	r3, [r7, #16]
 8002bf2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8002bf8:	f107 0310 	add.w	r3, r7, #16
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fd54 	bl	80026ac <ILI9341_WriteData>
 8002c04:	e00f      	b.n	8002c26 <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002c06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c0a:	0a1b      	lsrs	r3, r3, #8
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	733b      	strb	r3, [r7, #12]
 8002c12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8002c1a:	f107 030c 	add.w	r3, r7, #12
 8002c1e:	2102      	movs	r1, #2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fd43 	bl	80026ac <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002c30:	461a      	mov	r2, r3
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d3cf      	bcc.n	8002bd8 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002c42:	461a      	mov	r2, r3
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d3b5      	bcc.n	8002bb6 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 8002c4a:	bf00      	nop
 8002c4c:	bf00      	nop
 8002c4e:	3724      	adds	r7, #36	; 0x24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002c56:	b002      	add	sp, #8
 8002c58:	4770      	bx	lr

08002c5a <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af04      	add	r7, sp, #16
 8002c62:	603a      	str	r2, [r7, #0]
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	4603      	mov	r3, r0
 8002c68:	80fb      	strh	r3, [r7, #6]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8002c6e:	f7ff fcd5 	bl	800261c <ILI9341_Select>

    while(*str) {
 8002c72:	e02e      	b.n	8002cd2 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	7d3a      	ldrb	r2, [r7, #20]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002c7e:	db13      	blt.n	8002ca8 <ILI9341_WriteString+0x4e>
            x = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002c84:	7d7b      	ldrb	r3, [r7, #21]
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	88bb      	ldrh	r3, [r7, #4]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8002c8e:	88bb      	ldrh	r3, [r7, #4]
 8002c90:	7d7a      	ldrb	r2, [r7, #21]
 8002c92:	4413      	add	r3, r2
 8002c94:	2bef      	cmp	r3, #239	; 0xef
 8002c96:	dc21      	bgt.n	8002cdc <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d103      	bne.n	8002ca8 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	603b      	str	r3, [r7, #0]
                continue;
 8002ca6:	e014      	b.n	8002cd2 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	88b9      	ldrh	r1, [r7, #4]
 8002cae:	88f8      	ldrh	r0, [r7, #6]
 8002cb0:	8c3b      	ldrh	r3, [r7, #32]
 8002cb2:	9302      	str	r3, [sp, #8]
 8002cb4:	8bbb      	ldrh	r3, [r7, #28]
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f7ff ff57 	bl	8002b70 <ILI9341_WriteChar>
        x += font.width;
 8002cc2:	7d3b      	ldrb	r3, [r7, #20]
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	4413      	add	r3, r2
 8002cca:	80fb      	strh	r3, [r7, #6]
        str++;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1cc      	bne.n	8002c74 <ILI9341_WriteString+0x1a>
 8002cda:	e000      	b.n	8002cde <ILI9341_WriteString+0x84>
                break;
 8002cdc:	bf00      	nop
    }

    ILI9341_Unselect();
 8002cde:	f7ff fca9 	bl	8002634 <ILI9341_Unselect>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cec:	b002      	add	sp, #8
 8002cee:	4770      	bx	lr

08002cf0 <ILI9341_FillRectangle>:
    ILI9341_DrawLine(x, y, x, y + h, color);
    ILI9341_DrawLine(x, y + h, x + w, y + h, color);
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8002cf0:	b590      	push	{r4, r7, lr}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	4608      	mov	r0, r1
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4623      	mov	r3, r4
 8002d00:	80fb      	strh	r3, [r7, #6]
 8002d02:	4603      	mov	r3, r0
 8002d04:	80bb      	strh	r3, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	807b      	strh	r3, [r7, #2]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d14:	d253      	bcs.n	8002dbe <ILI9341_FillRectangle+0xce>
 8002d16:	88bb      	ldrh	r3, [r7, #4]
 8002d18:	2bef      	cmp	r3, #239	; 0xef
 8002d1a:	d850      	bhi.n	8002dbe <ILI9341_FillRectangle+0xce>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8002d1c:	88fa      	ldrh	r2, [r7, #6]
 8002d1e:	887b      	ldrh	r3, [r7, #2]
 8002d20:	4413      	add	r3, r2
 8002d22:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d26:	dd03      	ble.n	8002d30 <ILI9341_FillRectangle+0x40>
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002d2e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8002d30:	88ba      	ldrh	r2, [r7, #4]
 8002d32:	883b      	ldrh	r3, [r7, #0]
 8002d34:	4413      	add	r3, r2
 8002d36:	2bf0      	cmp	r3, #240	; 0xf0
 8002d38:	dd03      	ble.n	8002d42 <ILI9341_FillRectangle+0x52>
 8002d3a:	88bb      	ldrh	r3, [r7, #4]
 8002d3c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002d40:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8002d42:	f7ff fc6b 	bl	800261c <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002d46:	88fa      	ldrh	r2, [r7, #6]
 8002d48:	887b      	ldrh	r3, [r7, #2]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29c      	uxth	r4, r3
 8002d52:	88ba      	ldrh	r2, [r7, #4]
 8002d54:	883b      	ldrh	r3, [r7, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	88b9      	ldrh	r1, [r7, #4]
 8002d60:	88f8      	ldrh	r0, [r7, #6]
 8002d62:	4622      	mov	r2, r4
 8002d64:	f7ff fcd0 	bl	8002708 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002d68:	8c3b      	ldrh	r3, [r7, #32]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	733b      	strb	r3, [r7, #12]
 8002d72:	8c3b      	ldrh	r3, [r7, #32]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d7e:	4812      	ldr	r0, [pc, #72]	; (8002dc8 <ILI9341_FillRectangle+0xd8>)
 8002d80:	f000 fd14 	bl	80037ac <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002d84:	883b      	ldrh	r3, [r7, #0]
 8002d86:	80bb      	strh	r3, [r7, #4]
 8002d88:	e013      	b.n	8002db2 <ILI9341_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 8002d8a:	887b      	ldrh	r3, [r7, #2]
 8002d8c:	80fb      	strh	r3, [r7, #6]
 8002d8e:	e00a      	b.n	8002da6 <ILI9341_FillRectangle+0xb6>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002d90:	f107 010c 	add.w	r1, r7, #12
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295
 8002d98:	2202      	movs	r2, #2
 8002d9a:	480c      	ldr	r0, [pc, #48]	; (8002dcc <ILI9341_FillRectangle+0xdc>)
 8002d9c:	f003 fd3f 	bl	800681e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	80fb      	strh	r3, [r7, #6]
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f1      	bne.n	8002d90 <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8002dac:	88bb      	ldrh	r3, [r7, #4]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	80bb      	strh	r3, [r7, #4]
 8002db2:	88bb      	ldrh	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1e8      	bne.n	8002d8a <ILI9341_FillRectangle+0x9a>
        }
    }

    ILI9341_Unselect();
 8002db8:	f7ff fc3c 	bl	8002634 <ILI9341_Unselect>
 8002dbc:	e000      	b.n	8002dc0 <ILI9341_FillRectangle+0xd0>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8002dbe:	bf00      	nop
}
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd90      	pop	{r4, r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40020400 	.word	0x40020400
 8002dcc:	200002fc 	.word	0x200002fc

08002dd0 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	23f0      	movs	r3, #240	; 0xf0
 8002de0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002de4:	2100      	movs	r1, #0
 8002de6:	2000      	movs	r0, #0
 8002de8:	f7ff ff82 	bl	8002cf0 <ILI9341_FillRectangle>
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dfe:	4802      	ldr	r0, [pc, #8]	; (8002e08 <ILI9341_TouchUnselect+0x14>)
 8002e00:	f000 fcd4 	bl	80037ac <HAL_GPIO_WritePin>
}
 8002e04:	bf00      	nop
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40020000 	.word	0x40020000

08002e0c <max30102_init>:
#define RES_PART_ID 0xff

extern I2C_HandleTypeDef hi2c1;

void max30102_init()
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af02      	add	r7, sp, #8
    uint8_t data = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	71fb      	strb	r3, [r7, #7]
    /*reset*/
    data = 0x40;
 8002e16:	2340      	movs	r3, #64	; 0x40
 8002e18:	71fb      	strb	r3, [r7, #7]

    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	9301      	str	r3, [sp, #4]
 8002e1e:	1dfb      	adds	r3, r7, #7
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	2301      	movs	r3, #1
 8002e24:	2209      	movs	r2, #9
 8002e26:	21ae      	movs	r1, #174	; 0xae
 8002e28:	4840      	ldr	r0, [pc, #256]	; (8002f2c <max30102_init+0x120>)
 8002e2a:	f001 f85d 	bl	8003ee8 <HAL_I2C_Mem_Write_IT>
    //osDelay(1);
    do
    {
        HAL_I2C_Mem_Read_IT(&hi2c1, MAX30102_ADDR_READ, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002e2e:	2301      	movs	r3, #1
 8002e30:	9301      	str	r3, [sp, #4]
 8002e32:	1dfb      	adds	r3, r7, #7
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	2301      	movs	r3, #1
 8002e38:	2209      	movs	r2, #9
 8002e3a:	21af      	movs	r1, #175	; 0xaf
 8002e3c:	483b      	ldr	r0, [pc, #236]	; (8002f2c <max30102_init+0x120>)
 8002e3e:	f001 f905 	bl	800404c <HAL_I2C_Mem_Read_IT>
    } while (data & 0x40);
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f0      	bne.n	8002e2e <max30102_init+0x22>

    /*新数据中断*/
    data = 0x40;
 8002e4c:	2340      	movs	r3, #64	; 0x40
 8002e4e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_INTERRUPT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002e50:	2301      	movs	r3, #1
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	1dfb      	adds	r3, r7, #7
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	2301      	movs	r3, #1
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	21ae      	movs	r1, #174	; 0xae
 8002e5e:	4833      	ldr	r0, [pc, #204]	; (8002f2c <max30102_init+0x120>)
 8002e60:	f001 f842 	bl	8003ee8 <HAL_I2C_Mem_Write_IT>
    //    /* 快满中断*/
    //    data = 0x80;
    //    HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_INTERRUPT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    //    HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_FIFO_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    /*16384量程 50Hz 18位adc分辨率*/
    data = 0x63;
 8002e64:	2363      	movs	r3, #99	; 0x63
 8002e66:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_SPO2_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002e68:	2301      	movs	r3, #1
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	1dfb      	adds	r3, r7, #7
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	2301      	movs	r3, #1
 8002e72:	220a      	movs	r2, #10
 8002e74:	21ae      	movs	r1, #174	; 0xae
 8002e76:	482d      	ldr	r0, [pc, #180]	; (8002f2c <max30102_init+0x120>)
 8002e78:	f001 f836 	bl	8003ee8 <HAL_I2C_Mem_Write_IT>
    /*灯的亮度*/
    data = 0x47;
 8002e7c:	2347      	movs	r3, #71	; 0x47
 8002e7e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_LED_PULSE_AMPLITUDE_1, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002e80:	2301      	movs	r3, #1
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	1dfb      	adds	r3, r7, #7
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	2301      	movs	r3, #1
 8002e8a:	220c      	movs	r2, #12
 8002e8c:	21ae      	movs	r1, #174	; 0xae
 8002e8e:	4827      	ldr	r0, [pc, #156]	; (8002f2c <max30102_init+0x120>)
 8002e90:	f001 f82a 	bl	8003ee8 <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_LED_PULSE_AMPLITUDE_2, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002e94:	2301      	movs	r3, #1
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	1dfb      	adds	r3, r7, #7
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	220d      	movs	r2, #13
 8002ea0:	21ae      	movs	r1, #174	; 0xae
 8002ea2:	4822      	ldr	r0, [pc, #136]	; (8002f2c <max30102_init+0x120>)
 8002ea4:	f001 f820 	bl	8003ee8 <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_PROXIMITY_MODE_LED_PULSE_AMPLITUDE, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	1dfb      	adds	r3, r7, #7
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	2210      	movs	r2, #16
 8002eb4:	21ae      	movs	r1, #174	; 0xae
 8002eb6:	481d      	ldr	r0, [pc, #116]	; (8002f2c <max30102_init+0x120>)
 8002eb8:	f001 f816 	bl	8003ee8 <HAL_I2C_Mem_Write_IT>
    /*FIFO clear*/
    data = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_FIFO_WRITE_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	1dfb      	adds	r3, r7, #7
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2301      	movs	r3, #1
 8002eca:	2204      	movs	r2, #4
 8002ecc:	21ae      	movs	r1, #174	; 0xae
 8002ece:	4817      	ldr	r0, [pc, #92]	; (8002f2c <max30102_init+0x120>)
 8002ed0:	f001 f80a 	bl	8003ee8 <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_OVERFLOW_COUNTER, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	1dfb      	adds	r3, r7, #7
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2301      	movs	r3, #1
 8002ede:	2205      	movs	r2, #5
 8002ee0:	21ae      	movs	r1, #174	; 0xae
 8002ee2:	4812      	ldr	r0, [pc, #72]	; (8002f2c <max30102_init+0x120>)
 8002ee4:	f001 f800 	bl	8003ee8 <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_FIFO_READ_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002ee8:	2301      	movs	r3, #1
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	1dfb      	adds	r3, r7, #7
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	2206      	movs	r2, #6
 8002ef4:	21ae      	movs	r1, #174	; 0xae
 8002ef6:	480d      	ldr	r0, [pc, #52]	; (8002f2c <max30102_init+0x120>)
 8002ef8:	f000 fff6 	bl	8003ee8 <HAL_I2C_Mem_Write_IT>

    /*interrupt status clear*/
    max30102_getStatus();
 8002efc:	f000 f81c 	bl	8002f38 <max30102_getStatus>

    // /*转换温度*/
    // data = 1;
    // HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_DIE_TEMPERATURE_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    /*SPO2 Mode*/
    data = 0x03;
 8002f00:	2303      	movs	r3, #3
 8002f02:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002f04:	2301      	movs	r3, #1
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	1dfb      	adds	r3, r7, #7
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	2209      	movs	r2, #9
 8002f10:	21ae      	movs	r1, #174	; 0xae
 8002f12:	4806      	ldr	r0, [pc, #24]	; (8002f2c <max30102_init+0x120>)
 8002f14:	f000 ffe8 	bl	8003ee8 <HAL_I2C_Mem_Write_IT>
    HAL_UART_Transmit(&huart2, (uint8_t *) "\x1B[34m[Action]: Max30102\r\n", 27, 50);
 8002f18:	2332      	movs	r3, #50	; 0x32
 8002f1a:	221b      	movs	r2, #27
 8002f1c:	4904      	ldr	r1, [pc, #16]	; (8002f30 <max30102_init+0x124>)
 8002f1e:	4805      	ldr	r0, [pc, #20]	; (8002f34 <max30102_init+0x128>)
 8002f20:	f003 fffb 	bl	8006f1a <HAL_UART_Transmit>
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000264 	.word	0x20000264
 8002f30:	0800d7d8 	.word	0x0800d7d8
 8002f34:	200003e8 	.word	0x200003e8

08002f38 <max30102_getStatus>:
        data[i].iRed = (((uint32_t)dataTemp[i * 6 + 3]) << 16 | ((uint32_t)dataTemp[i * 6 + 4]) << 8 | dataTemp[i * 6 + 5]) & 0x3ffff;
    }
}

uint8_t max30102_getStatus()
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af04      	add	r7, sp, #16
    uint8_t data = 0, dataTemp = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	71fb      	strb	r3, [r7, #7]
 8002f42:	2300      	movs	r3, #0
 8002f44:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_INTERRUPT_STATUS_1, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 8002f46:	230a      	movs	r3, #10
 8002f48:	9302      	str	r3, [sp, #8]
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	1dbb      	adds	r3, r7, #6
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	2301      	movs	r3, #1
 8002f54:	2200      	movs	r2, #0
 8002f56:	21af      	movs	r1, #175	; 0xaf
 8002f58:	480c      	ldr	r0, [pc, #48]	; (8002f8c <max30102_getStatus+0x54>)
 8002f5a:	f000 fd9f 	bl	8003a9c <HAL_I2C_Mem_Read>
    data = dataTemp;
 8002f5e:	79bb      	ldrb	r3, [r7, #6]
 8002f60:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_INTERRUPT_STATUS_2, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 8002f62:	230a      	movs	r3, #10
 8002f64:	9302      	str	r3, [sp, #8]
 8002f66:	2301      	movs	r3, #1
 8002f68:	9301      	str	r3, [sp, #4]
 8002f6a:	1dbb      	adds	r3, r7, #6
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	2301      	movs	r3, #1
 8002f70:	2201      	movs	r2, #1
 8002f72:	21af      	movs	r1, #175	; 0xaf
 8002f74:	4805      	ldr	r0, [pc, #20]	; (8002f8c <max30102_getStatus+0x54>)
 8002f76:	f000 fd91 	bl	8003a9c <HAL_I2C_Mem_Read>
    return data | dataTemp;
 8002f7a:	79ba      	ldrb	r2, [r7, #6]
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	b2db      	uxtb	r3, r3
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000264 	.word	0x20000264

08002f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f94:	480d      	ldr	r0, [pc, #52]	; (8002fcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f96:	490e      	ldr	r1, [pc, #56]	; (8002fd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f98:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f9c:	e002      	b.n	8002fa4 <LoopCopyDataInit>

08002f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fa2:	3304      	adds	r3, #4

08002fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa8:	d3f9      	bcc.n	8002f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002faa:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fac:	4c0b      	ldr	r4, [pc, #44]	; (8002fdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fb0:	e001      	b.n	8002fb6 <LoopFillZerobss>

08002fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb4:	3204      	adds	r2, #4

08002fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb8:	d3fb      	bcc.n	8002fb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fba:	f7ff f945 	bl	8002248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fbe:	f004 ffdd 	bl	8007f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fc2:	f7fe fa83 	bl	80014cc <main>
  bx  lr    
 8002fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fc8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fd0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002fd4:	0800f1c0 	.word	0x0800f1c0
  ldr r2, =_sbss
 8002fd8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002fdc:	20000440 	.word	0x20000440

08002fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fe0:	e7fe      	b.n	8002fe0 <ADC_IRQHandler>
	...

08002fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <HAL_Init+0x40>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <HAL_Init+0x40>)
 8002fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_Init+0x40>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <HAL_Init+0x40>)
 8002ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003000:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_Init+0x40>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a07      	ldr	r2, [pc, #28]	; (8003024 <HAL_Init+0x40>)
 8003006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800300c:	2003      	movs	r0, #3
 800300e:	f000 f94f 	bl	80032b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003012:	200f      	movs	r0, #15
 8003014:	f000 f808 	bl	8003028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003018:	f7fe ffea 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023c00 	.word	0x40023c00

08003028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_InitTick+0x54>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_InitTick+0x58>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	4619      	mov	r1, r3
 800303a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800303e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f967 	bl	800331a <HAL_SYSTICK_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e00e      	b.n	8003074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b0f      	cmp	r3, #15
 800305a:	d80a      	bhi.n	8003072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800305c:	2200      	movs	r2, #0
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	f04f 30ff 	mov.w	r0, #4294967295
 8003064:	f000 f92f 	bl	80032c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003068:	4a06      	ldr	r2, [pc, #24]	; (8003084 <HAL_InitTick+0x5c>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000000 	.word	0x20000000
 8003080:	20000018 	.word	0x20000018
 8003084:	20000014 	.word	0x20000014

08003088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_IncTick+0x20>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_IncTick+0x24>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4413      	add	r3, r2
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <HAL_IncTick+0x24>)
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000018 	.word	0x20000018
 80030ac:	2000042c 	.word	0x2000042c

080030b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return uwTick;
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <HAL_GetTick+0x14>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	2000042c 	.word	0x2000042c

080030c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d0:	f7ff ffee 	bl	80030b0 <HAL_GetTick>
 80030d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d005      	beq.n	80030ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <HAL_Delay+0x44>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030ee:	bf00      	nop
 80030f0:	f7ff ffde 	bl	80030b0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d8f7      	bhi.n	80030f0 <HAL_Delay+0x28>
  {
  }
}
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000018 	.word	0x20000018

08003110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <__NVIC_SetPriorityGrouping+0x44>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800312c:	4013      	ands	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800313c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003142:	4a04      	ldr	r2, [pc, #16]	; (8003154 <__NVIC_SetPriorityGrouping+0x44>)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	60d3      	str	r3, [r2, #12]
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <__NVIC_GetPriorityGrouping+0x18>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	0a1b      	lsrs	r3, r3, #8
 8003162:	f003 0307 	and.w	r3, r3, #7
}
 8003166:	4618      	mov	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	2b00      	cmp	r3, #0
 8003184:	db0b      	blt.n	800319e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	f003 021f 	and.w	r2, r3, #31
 800318c:	4907      	ldr	r1, [pc, #28]	; (80031ac <__NVIC_EnableIRQ+0x38>)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	2001      	movs	r0, #1
 8003196:	fa00 f202 	lsl.w	r2, r0, r2
 800319a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	e000e100 	.word	0xe000e100

080031b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	6039      	str	r1, [r7, #0]
 80031ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	db0a      	blt.n	80031da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	490c      	ldr	r1, [pc, #48]	; (80031fc <__NVIC_SetPriority+0x4c>)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	0112      	lsls	r2, r2, #4
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	440b      	add	r3, r1
 80031d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d8:	e00a      	b.n	80031f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	4908      	ldr	r1, [pc, #32]	; (8003200 <__NVIC_SetPriority+0x50>)
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	3b04      	subs	r3, #4
 80031e8:	0112      	lsls	r2, r2, #4
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	440b      	add	r3, r1
 80031ee:	761a      	strb	r2, [r3, #24]
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000e100 	.word	0xe000e100
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003204:	b480      	push	{r7}
 8003206:	b089      	sub	sp, #36	; 0x24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f1c3 0307 	rsb	r3, r3, #7
 800321e:	2b04      	cmp	r3, #4
 8003220:	bf28      	it	cs
 8003222:	2304      	movcs	r3, #4
 8003224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3304      	adds	r3, #4
 800322a:	2b06      	cmp	r3, #6
 800322c:	d902      	bls.n	8003234 <NVIC_EncodePriority+0x30>
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3b03      	subs	r3, #3
 8003232:	e000      	b.n	8003236 <NVIC_EncodePriority+0x32>
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003238:	f04f 32ff 	mov.w	r2, #4294967295
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43da      	mvns	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	401a      	ands	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800324c:	f04f 31ff 	mov.w	r1, #4294967295
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	fa01 f303 	lsl.w	r3, r1, r3
 8003256:	43d9      	mvns	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	4313      	orrs	r3, r2
         );
}
 800325e:	4618      	mov	r0, r3
 8003260:	3724      	adds	r7, #36	; 0x24
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800327c:	d301      	bcc.n	8003282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327e:	2301      	movs	r3, #1
 8003280:	e00f      	b.n	80032a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003282:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <SysTick_Config+0x40>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328a:	210f      	movs	r1, #15
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	f7ff ff8e 	bl	80031b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <SysTick_Config+0x40>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329a:	4b04      	ldr	r3, [pc, #16]	; (80032ac <SysTick_Config+0x40>)
 800329c:	2207      	movs	r2, #7
 800329e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	e000e010 	.word	0xe000e010

080032b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff29 	bl	8003110 <__NVIC_SetPriorityGrouping>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4603      	mov	r3, r0
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d8:	f7ff ff3e 	bl	8003158 <__NVIC_GetPriorityGrouping>
 80032dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	6978      	ldr	r0, [r7, #20]
 80032e4:	f7ff ff8e 	bl	8003204 <NVIC_EncodePriority>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff5d 	bl	80031b0 <__NVIC_SetPriority>
}
 80032f6:	bf00      	nop
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	4603      	mov	r3, r0
 8003306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ff31 	bl	8003174 <__NVIC_EnableIRQ>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ffa2 	bl	800326c <SysTick_Config>
 8003328:	4603      	mov	r3, r0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003340:	f7ff feb6 	bl	80030b0 <HAL_GetTick>
 8003344:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d008      	beq.n	8003364 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2280      	movs	r2, #128	; 0x80
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e052      	b.n	800340a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0216 	bic.w	r2, r2, #22
 8003372:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003382:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d103      	bne.n	8003394 <HAL_DMA_Abort+0x62>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0208 	bic.w	r2, r2, #8
 80033a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033b4:	e013      	b.n	80033de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033b6:	f7ff fe7b 	bl	80030b0 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	d90c      	bls.n	80033de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2203      	movs	r2, #3
 80033ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e015      	b.n	800340a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e4      	bne.n	80033b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f0:	223f      	movs	r2, #63	; 0x3f
 80033f2:	409a      	lsls	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d004      	beq.n	8003430 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e00c      	b.n	800344a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2205      	movs	r2, #5
 8003434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0201 	bic.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003464:	b2db      	uxtb	r3, r3
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	; 0x24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	e159      	b.n	8003744 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003490:	2201      	movs	r2, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	f040 8148 	bne.w	800373e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d005      	beq.n	80034c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d130      	bne.n	8003528 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	2203      	movs	r2, #3
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4013      	ands	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034fc:	2201      	movs	r2, #1
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 0201 	and.w	r2, r3, #1
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	2b03      	cmp	r3, #3
 8003532:	d017      	beq.n	8003564 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	2203      	movs	r2, #3
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d123      	bne.n	80035b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	08da      	lsrs	r2, r3, #3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3208      	adds	r2, #8
 8003578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	220f      	movs	r2, #15
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	08da      	lsrs	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3208      	adds	r2, #8
 80035b2:	69b9      	ldr	r1, [r7, #24]
 80035b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0203 	and.w	r2, r3, #3
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80a2 	beq.w	800373e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	4b57      	ldr	r3, [pc, #348]	; (800375c <HAL_GPIO_Init+0x2e8>)
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	4a56      	ldr	r2, [pc, #344]	; (800375c <HAL_GPIO_Init+0x2e8>)
 8003604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003608:	6453      	str	r3, [r2, #68]	; 0x44
 800360a:	4b54      	ldr	r3, [pc, #336]	; (800375c <HAL_GPIO_Init+0x2e8>)
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003616:	4a52      	ldr	r2, [pc, #328]	; (8003760 <HAL_GPIO_Init+0x2ec>)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	089b      	lsrs	r3, r3, #2
 800361c:	3302      	adds	r3, #2
 800361e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	220f      	movs	r2, #15
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a49      	ldr	r2, [pc, #292]	; (8003764 <HAL_GPIO_Init+0x2f0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d019      	beq.n	8003676 <HAL_GPIO_Init+0x202>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a48      	ldr	r2, [pc, #288]	; (8003768 <HAL_GPIO_Init+0x2f4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <HAL_GPIO_Init+0x1fe>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a47      	ldr	r2, [pc, #284]	; (800376c <HAL_GPIO_Init+0x2f8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00d      	beq.n	800366e <HAL_GPIO_Init+0x1fa>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a46      	ldr	r2, [pc, #280]	; (8003770 <HAL_GPIO_Init+0x2fc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d007      	beq.n	800366a <HAL_GPIO_Init+0x1f6>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a45      	ldr	r2, [pc, #276]	; (8003774 <HAL_GPIO_Init+0x300>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d101      	bne.n	8003666 <HAL_GPIO_Init+0x1f2>
 8003662:	2304      	movs	r3, #4
 8003664:	e008      	b.n	8003678 <HAL_GPIO_Init+0x204>
 8003666:	2307      	movs	r3, #7
 8003668:	e006      	b.n	8003678 <HAL_GPIO_Init+0x204>
 800366a:	2303      	movs	r3, #3
 800366c:	e004      	b.n	8003678 <HAL_GPIO_Init+0x204>
 800366e:	2302      	movs	r3, #2
 8003670:	e002      	b.n	8003678 <HAL_GPIO_Init+0x204>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <HAL_GPIO_Init+0x204>
 8003676:	2300      	movs	r3, #0
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	f002 0203 	and.w	r2, r2, #3
 800367e:	0092      	lsls	r2, r2, #2
 8003680:	4093      	lsls	r3, r2
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003688:	4935      	ldr	r1, [pc, #212]	; (8003760 <HAL_GPIO_Init+0x2ec>)
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	089b      	lsrs	r3, r3, #2
 800368e:	3302      	adds	r3, #2
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003696:	4b38      	ldr	r3, [pc, #224]	; (8003778 <HAL_GPIO_Init+0x304>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ba:	4a2f      	ldr	r2, [pc, #188]	; (8003778 <HAL_GPIO_Init+0x304>)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036c0:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <HAL_GPIO_Init+0x304>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036e4:	4a24      	ldr	r2, [pc, #144]	; (8003778 <HAL_GPIO_Init+0x304>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036ea:	4b23      	ldr	r3, [pc, #140]	; (8003778 <HAL_GPIO_Init+0x304>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800370e:	4a1a      	ldr	r2, [pc, #104]	; (8003778 <HAL_GPIO_Init+0x304>)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003714:	4b18      	ldr	r3, [pc, #96]	; (8003778 <HAL_GPIO_Init+0x304>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003738:	4a0f      	ldr	r2, [pc, #60]	; (8003778 <HAL_GPIO_Init+0x304>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3301      	adds	r3, #1
 8003742:	61fb      	str	r3, [r7, #28]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b0f      	cmp	r3, #15
 8003748:	f67f aea2 	bls.w	8003490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	3724      	adds	r7, #36	; 0x24
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40023800 	.word	0x40023800
 8003760:	40013800 	.word	0x40013800
 8003764:	40020000 	.word	0x40020000
 8003768:	40020400 	.word	0x40020400
 800376c:	40020800 	.word	0x40020800
 8003770:	40020c00 	.word	0x40020c00
 8003774:	40021000 	.word	0x40021000
 8003778:	40013c00 	.word	0x40013c00

0800377c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	887b      	ldrh	r3, [r7, #2]
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
 8003798:	e001      	b.n	800379e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800379e:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
 80037b8:	4613      	mov	r3, r2
 80037ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037bc:	787b      	ldrb	r3, [r7, #1]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037c2:	887a      	ldrh	r2, [r7, #2]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037c8:	e003      	b.n	80037d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037ca:	887b      	ldrh	r3, [r7, #2]
 80037cc:	041a      	lsls	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	619a      	str	r2, [r3, #24]
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037f0:	887a      	ldrh	r2, [r7, #2]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4013      	ands	r3, r2
 80037f6:	041a      	lsls	r2, r3, #16
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	43d9      	mvns	r1, r3
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	400b      	ands	r3, r1
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	619a      	str	r2, [r3, #24]
}
 8003806:	bf00      	nop
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e12b      	b.n	8003a7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd fdf6 	bl	800142c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2224      	movs	r2, #36	; 0x24
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003866:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003878:	f002 ff20 	bl	80066bc <HAL_RCC_GetPCLK1Freq>
 800387c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4a81      	ldr	r2, [pc, #516]	; (8003a88 <HAL_I2C_Init+0x274>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d807      	bhi.n	8003898 <HAL_I2C_Init+0x84>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a80      	ldr	r2, [pc, #512]	; (8003a8c <HAL_I2C_Init+0x278>)
 800388c:	4293      	cmp	r3, r2
 800388e:	bf94      	ite	ls
 8003890:	2301      	movls	r3, #1
 8003892:	2300      	movhi	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	e006      	b.n	80038a6 <HAL_I2C_Init+0x92>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4a7d      	ldr	r2, [pc, #500]	; (8003a90 <HAL_I2C_Init+0x27c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	bf94      	ite	ls
 80038a0:	2301      	movls	r3, #1
 80038a2:	2300      	movhi	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e0e7      	b.n	8003a7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a78      	ldr	r2, [pc, #480]	; (8003a94 <HAL_I2C_Init+0x280>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	0c9b      	lsrs	r3, r3, #18
 80038b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4a6a      	ldr	r2, [pc, #424]	; (8003a88 <HAL_I2C_Init+0x274>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d802      	bhi.n	80038e8 <HAL_I2C_Init+0xd4>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3301      	adds	r3, #1
 80038e6:	e009      	b.n	80038fc <HAL_I2C_Init+0xe8>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	4a69      	ldr	r2, [pc, #420]	; (8003a98 <HAL_I2C_Init+0x284>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	099b      	lsrs	r3, r3, #6
 80038fa:	3301      	adds	r3, #1
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	430b      	orrs	r3, r1
 8003902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800390e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	495c      	ldr	r1, [pc, #368]	; (8003a88 <HAL_I2C_Init+0x274>)
 8003918:	428b      	cmp	r3, r1
 800391a:	d819      	bhi.n	8003950 <HAL_I2C_Init+0x13c>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1e59      	subs	r1, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	fbb1 f3f3 	udiv	r3, r1, r3
 800392a:	1c59      	adds	r1, r3, #1
 800392c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003930:	400b      	ands	r3, r1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_I2C_Init+0x138>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1e59      	subs	r1, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	fbb1 f3f3 	udiv	r3, r1, r3
 8003944:	3301      	adds	r3, #1
 8003946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394a:	e051      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 800394c:	2304      	movs	r3, #4
 800394e:	e04f      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d111      	bne.n	800397c <HAL_I2C_Init+0x168>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1e58      	subs	r0, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	440b      	add	r3, r1
 8003966:	fbb0 f3f3 	udiv	r3, r0, r3
 800396a:	3301      	adds	r3, #1
 800396c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	e012      	b.n	80039a2 <HAL_I2C_Init+0x18e>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	0099      	lsls	r1, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003992:	3301      	adds	r3, #1
 8003994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_I2C_Init+0x196>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e022      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10e      	bne.n	80039d0 <HAL_I2C_Init+0x1bc>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1e58      	subs	r0, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	440b      	add	r3, r1
 80039c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c4:	3301      	adds	r3, #1
 80039c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ce:	e00f      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	1e58      	subs	r0, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	0099      	lsls	r1, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e6:	3301      	adds	r3, #1
 80039e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	6809      	ldr	r1, [r1, #0]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6911      	ldr	r1, [r2, #16]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68d2      	ldr	r2, [r2, #12]
 8003a2a:	4311      	orrs	r1, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	430b      	orrs	r3, r1
 8003a32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	000186a0 	.word	0x000186a0
 8003a8c:	001e847f 	.word	0x001e847f
 8003a90:	003d08ff 	.word	0x003d08ff
 8003a94:	431bde83 	.word	0x431bde83
 8003a98:	10624dd3 	.word	0x10624dd3

08003a9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08c      	sub	sp, #48	; 0x30
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4603      	mov	r3, r0
 8003aac:	817b      	strh	r3, [r7, #10]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	813b      	strh	r3, [r7, #8]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ab6:	f7ff fafb 	bl	80030b0 <HAL_GetTick>
 8003aba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	f040 8208 	bne.w	8003eda <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	2319      	movs	r3, #25
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	497b      	ldr	r1, [pc, #492]	; (8003cc0 <HAL_I2C_Mem_Read+0x224>)
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f001 ffd7 	bl	8005a88 <I2C_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e1fb      	b.n	8003edc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_I2C_Mem_Read+0x56>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e1f4      	b.n	8003edc <HAL_I2C_Mem_Read+0x440>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d007      	beq.n	8003b18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2222      	movs	r2, #34	; 0x22
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2240      	movs	r2, #64	; 0x40
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a5b      	ldr	r2, [pc, #364]	; (8003cc4 <HAL_I2C_Mem_Read+0x228>)
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b5a:	88f8      	ldrh	r0, [r7, #6]
 8003b5c:	893a      	ldrh	r2, [r7, #8]
 8003b5e:	8979      	ldrh	r1, [r7, #10]
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	4603      	mov	r3, r0
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f001 fdfc 	bl	8005768 <I2C_RequestMemoryRead>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e1b0      	b.n	8003edc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d113      	bne.n	8003baa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b82:	2300      	movs	r3, #0
 8003b84:	623b      	str	r3, [r7, #32]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	623b      	str	r3, [r7, #32]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	623b      	str	r3, [r7, #32]
 8003b96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e184      	b.n	8003eb4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d11b      	bne.n	8003bea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	e164      	b.n	8003eb4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d11b      	bne.n	8003c2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	e144      	b.n	8003eb4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c40:	e138      	b.n	8003eb4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	f200 80f1 	bhi.w	8003e2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d123      	bne.n	8003c9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f002 f85f 	bl	8005d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e139      	b.n	8003edc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c9a:	e10b      	b.n	8003eb4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d14e      	bne.n	8003d42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003caa:	2200      	movs	r2, #0
 8003cac:	4906      	ldr	r1, [pc, #24]	; (8003cc8 <HAL_I2C_Mem_Read+0x22c>)
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f001 feea 	bl	8005a88 <I2C_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e10e      	b.n	8003edc <HAL_I2C_Mem_Read+0x440>
 8003cbe:	bf00      	nop
 8003cc0:	00100002 	.word	0x00100002
 8003cc4:	ffff0000 	.word	0xffff0000
 8003cc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d40:	e0b8      	b.n	8003eb4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d48:	2200      	movs	r2, #0
 8003d4a:	4966      	ldr	r1, [pc, #408]	; (8003ee4 <HAL_I2C_Mem_Read+0x448>)
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f001 fe9b 	bl	8005a88 <I2C_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0bf      	b.n	8003edc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	2200      	movs	r2, #0
 8003da6:	494f      	ldr	r1, [pc, #316]	; (8003ee4 <HAL_I2C_Mem_Read+0x448>)
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f001 fe6d 	bl	8005a88 <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e091      	b.n	8003edc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e2c:	e042      	b.n	8003eb4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f001 ff72 	bl	8005d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e04c      	b.n	8003edc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d118      	bne.n	8003eb4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f47f aec2 	bne.w	8003c42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003eda:	2302      	movs	r3, #2
  }
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3728      	adds	r7, #40	; 0x28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	00010004 	.word	0x00010004

08003ee8 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	817b      	strh	r3, [r7, #10]
 8003efa:	460b      	mov	r3, r1
 8003efc:	813b      	strh	r3, [r7, #8]
 8003efe:	4613      	mov	r3, r2
 8003f00:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	f040 808e 	bne.w	8004030 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f14:	4b4a      	ldr	r3, [pc, #296]	; (8004040 <HAL_I2C_Mem_Write_IT+0x158>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	08db      	lsrs	r3, r3, #3
 8003f1a:	4a4a      	ldr	r2, [pc, #296]	; (8004044 <HAL_I2C_Mem_Write_IT+0x15c>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	0a1a      	lsrs	r2, r3, #8
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	009a      	lsls	r2, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d116      	bne.n	8003f68 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e064      	b.n	8004032 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d0db      	beq.n	8003f2e <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_I2C_Mem_Write_IT+0x9c>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e056      	b.n	8004032 <HAL_I2C_Mem_Write_IT+0x14a>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d007      	beq.n	8003faa <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0201 	orr.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2221      	movs	r2, #33	; 0x21
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2240      	movs	r2, #64	; 0x40
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a3a      	ldr	r2, [r7, #32]
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4a17      	ldr	r2, [pc, #92]	; (8004048 <HAL_I2C_Mem_Write_IT+0x160>)
 8003fea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003fec:	897a      	ldrh	r2, [r7, #10]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003ff2:	893a      	ldrh	r2, [r7, #8]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004012:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800402a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	e000      	b.n	8004032 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004030:	2302      	movs	r3, #2
  }
}
 8004032:	4618      	mov	r0, r3
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000000 	.word	0x20000000
 8004044:	14f8b589 	.word	0x14f8b589
 8004048:	ffff0000 	.word	0xffff0000

0800404c <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	4608      	mov	r0, r1
 8004056:	4611      	mov	r1, r2
 8004058:	461a      	mov	r2, r3
 800405a:	4603      	mov	r3, r0
 800405c:	817b      	strh	r3, [r7, #10]
 800405e:	460b      	mov	r3, r1
 8004060:	813b      	strh	r3, [r7, #8]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b20      	cmp	r3, #32
 8004074:	f040 809a 	bne.w	80041ac <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004078:	4b50      	ldr	r3, [pc, #320]	; (80041bc <HAL_I2C_Mem_Read_IT+0x170>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	08db      	lsrs	r3, r3, #3
 800407e:	4a50      	ldr	r2, [pc, #320]	; (80041c0 <HAL_I2C_Mem_Read_IT+0x174>)
 8004080:	fba2 2303 	umull	r2, r3, r2, r3
 8004084:	0a1a      	lsrs	r2, r3, #8
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	009a      	lsls	r2, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	3b01      	subs	r3, #1
 8004096:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d116      	bne.n	80040cc <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	f043 0220 	orr.w	r2, r3, #32
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e070      	b.n	80041ae <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d0db      	beq.n	8004092 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_I2C_Mem_Read_IT+0x9c>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e062      	b.n	80041ae <HAL_I2C_Mem_Read_IT+0x162>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d007      	beq.n	800410e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0201 	orr.w	r2, r2, #1
 800410c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800411c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2222      	movs	r2, #34	; 0x22
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2240      	movs	r2, #64	; 0x40
 800412a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a3a      	ldr	r2, [r7, #32]
 8004138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800413e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a1d      	ldr	r2, [pc, #116]	; (80041c4 <HAL_I2C_Mem_Read_IT+0x178>)
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004150:	897a      	ldrh	r2, [r7, #10]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004156:	893a      	ldrh	r2, [r7, #8]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800415c:	88fa      	ldrh	r2, [r7, #6]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004176:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004186:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004194:	2b00      	cmp	r3, #0
 8004196:	d007      	beq.n	80041a8 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80041a6:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e000      	b.n	80041ae <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80041ac:	2302      	movs	r3, #2
  }
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000000 	.word	0x20000000
 80041c0:	14f8b589 	.word	0x14f8b589
 80041c4:	ffff0000 	.word	0xffff0000

080041c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d003      	beq.n	8004200 <HAL_I2C_EV_IRQHandler+0x38>
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	f040 80c1 	bne.w	8004382 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10d      	bne.n	8004236 <HAL_I2C_EV_IRQHandler+0x6e>
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004220:	d003      	beq.n	800422a <HAL_I2C_EV_IRQHandler+0x62>
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004228:	d101      	bne.n	800422e <HAL_I2C_EV_IRQHandler+0x66>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_I2C_EV_IRQHandler+0x68>
 800422e:	2300      	movs	r3, #0
 8004230:	2b01      	cmp	r3, #1
 8004232:	f000 8132 	beq.w	800449a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00c      	beq.n	800425a <HAL_I2C_EV_IRQHandler+0x92>
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	0a5b      	lsrs	r3, r3, #9
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d006      	beq.n	800425a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f001 fdea 	bl	8005e26 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fcdc 	bl	8004c10 <I2C_Master_SB>
 8004258:	e092      	b.n	8004380 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	08db      	lsrs	r3, r3, #3
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_I2C_EV_IRQHandler+0xb2>
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	0a5b      	lsrs	r3, r3, #9
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fd52 	bl	8004d1c <I2C_Master_ADD10>
 8004278:	e082      	b.n	8004380 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d009      	beq.n	800429a <HAL_I2C_EV_IRQHandler+0xd2>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	0a5b      	lsrs	r3, r3, #9
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fd6c 	bl	8004d70 <I2C_Master_ADDR>
 8004298:	e072      	b.n	8004380 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	089b      	lsrs	r3, r3, #2
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d03b      	beq.n	800431e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b4:	f000 80f3 	beq.w	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	09db      	lsrs	r3, r3, #7
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00f      	beq.n	80042e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	0a9b      	lsrs	r3, r3, #10
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d009      	beq.n	80042e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	089b      	lsrs	r3, r3, #2
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d103      	bne.n	80042e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f94c 	bl	800457a <I2C_MasterTransmit_TXE>
 80042e2:	e04d      	b.n	8004380 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	089b      	lsrs	r3, r3, #2
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80d6 	beq.w	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	0a5b      	lsrs	r3, r3, #9
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80cf 	beq.w	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004300:	7bbb      	ldrb	r3, [r7, #14]
 8004302:	2b21      	cmp	r3, #33	; 0x21
 8004304:	d103      	bne.n	800430e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f9d3 	bl	80046b2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800430c:	e0c7      	b.n	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	f040 80c4 	bne.w	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fa41 	bl	800479e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800431c:	e0bf      	b.n	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432c:	f000 80b7 	beq.w	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	099b      	lsrs	r3, r3, #6
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00f      	beq.n	800435c <HAL_I2C_EV_IRQHandler+0x194>
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	0a9b      	lsrs	r3, r3, #10
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d009      	beq.n	800435c <HAL_I2C_EV_IRQHandler+0x194>
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	089b      	lsrs	r3, r3, #2
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d103      	bne.n	800435c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fab6 	bl	80048c6 <I2C_MasterReceive_RXNE>
 800435a:	e011      	b.n	8004380 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	089b      	lsrs	r3, r3, #2
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 809a 	beq.w	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	0a5b      	lsrs	r3, r3, #9
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8093 	beq.w	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fb5f 	bl	8004a3c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800437e:	e08e      	b.n	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004380:	e08d      	b.n	800449e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	e007      	b.n	80043a4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d012      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0x20e>
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	0a5b      	lsrs	r3, r3, #9
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00c      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80043cc:	69b9      	ldr	r1, [r7, #24]
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 ff1d 	bl	800520e <I2C_Slave_ADDR>
 80043d4:	e066      	b.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_I2C_EV_IRQHandler+0x22e>
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	0a5b      	lsrs	r3, r3, #9
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 ff58 	bl	80052a4 <I2C_Slave_STOPF>
 80043f4:	e056      	b.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043f6:	7bbb      	ldrb	r3, [r7, #14]
 80043f8:	2b21      	cmp	r3, #33	; 0x21
 80043fa:	d002      	beq.n	8004402 <HAL_I2C_EV_IRQHandler+0x23a>
 80043fc:	7bbb      	ldrb	r3, [r7, #14]
 80043fe:	2b29      	cmp	r3, #41	; 0x29
 8004400:	d125      	bne.n	800444e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	09db      	lsrs	r3, r3, #7
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00f      	beq.n	800442e <HAL_I2C_EV_IRQHandler+0x266>
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	0a9b      	lsrs	r3, r3, #10
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_I2C_EV_IRQHandler+0x266>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fe33 	bl	8005092 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800442c:	e039      	b.n	80044a2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	089b      	lsrs	r3, r3, #2
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d033      	beq.n	80044a2 <HAL_I2C_EV_IRQHandler+0x2da>
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	0a5b      	lsrs	r3, r3, #9
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02d      	beq.n	80044a2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fe60 	bl	800510c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800444c:	e029      	b.n	80044a2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	099b      	lsrs	r3, r3, #6
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00f      	beq.n	800447a <HAL_I2C_EV_IRQHandler+0x2b2>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	0a9b      	lsrs	r3, r3, #10
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	089b      	lsrs	r3, r3, #2
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fe6b 	bl	800514e <I2C_SlaveReceive_RXNE>
 8004478:	e014      	b.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	089b      	lsrs	r3, r3, #2
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00e      	beq.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	0a5b      	lsrs	r3, r3, #9
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d008      	beq.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fe99 	bl	80051ca <I2C_SlaveReceive_BTF>
 8004498:	e004      	b.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	460b      	mov	r3, r1
 8004504:	70fb      	strb	r3, [r7, #3]
 8004506:	4613      	mov	r3, r2
 8004508:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004588:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004590:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459c:	2b00      	cmp	r3, #0
 800459e:	d150      	bne.n	8004642 <I2C_MasterTransmit_TXE+0xc8>
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b21      	cmp	r3, #33	; 0x21
 80045a4:	d14d      	bne.n	8004642 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d01d      	beq.n	80045e8 <I2C_MasterTransmit_TXE+0x6e>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d01a      	beq.n	80045e8 <I2C_MasterTransmit_TXE+0x6e>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045b8:	d016      	beq.n	80045e8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045c8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2211      	movs	r2, #17
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff ff62 	bl	80044aa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045e6:	e060      	b.n	80046aa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045f6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004606:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b40      	cmp	r3, #64	; 0x40
 8004620:	d107      	bne.n	8004632 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff ff7d 	bl	800452a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004630:	e03b      	b.n	80046aa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff ff35 	bl	80044aa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004640:	e033      	b.n	80046aa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	2b21      	cmp	r3, #33	; 0x21
 8004646:	d005      	beq.n	8004654 <I2C_MasterTransmit_TXE+0xda>
 8004648:	7bbb      	ldrb	r3, [r7, #14]
 800464a:	2b40      	cmp	r3, #64	; 0x40
 800464c:	d12d      	bne.n	80046aa <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2b22      	cmp	r3, #34	; 0x22
 8004652:	d12a      	bne.n	80046aa <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d108      	bne.n	8004670 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800466c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800466e:	e01c      	b.n	80046aa <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b40      	cmp	r3, #64	; 0x40
 800467a:	d103      	bne.n	8004684 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f88e 	bl	800479e <I2C_MemoryTransmit_TXE_BTF>
}
 8004682:	e012      	b.n	80046aa <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046a8:	e7ff      	b.n	80046aa <I2C_MasterTransmit_TXE+0x130>
 80046aa:	bf00      	nop
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b21      	cmp	r3, #33	; 0x21
 80046ca:	d164      	bne.n	8004796 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d012      	beq.n	80046fc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	781a      	ldrb	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80046fa:	e04c      	b.n	8004796 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d01d      	beq.n	800473e <I2C_MasterTransmit_BTF+0x8c>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b20      	cmp	r3, #32
 8004706:	d01a      	beq.n	800473e <I2C_MasterTransmit_BTF+0x8c>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800470e:	d016      	beq.n	800473e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800471e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2211      	movs	r2, #17
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff feb7 	bl	80044aa <HAL_I2C_MasterTxCpltCallback>
}
 800473c:	e02b      	b.n	8004796 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800474c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b40      	cmp	r3, #64	; 0x40
 8004776:	d107      	bne.n	8004788 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff fed2 	bl	800452a <HAL_I2C_MemTxCpltCallback>
}
 8004786:	e006      	b.n	8004796 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff fe8a 	bl	80044aa <HAL_I2C_MasterTxCpltCallback>
}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d11d      	bne.n	80047f2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d10b      	bne.n	80047d6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ce:	1c9a      	adds	r2, r3, #2
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80047d4:	e073      	b.n	80048be <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047da:	b29b      	uxth	r3, r3
 80047dc:	121b      	asrs	r3, r3, #8
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047f0:	e065      	b.n	80048be <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d10b      	bne.n	8004812 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004810:	e055      	b.n	80048be <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004816:	2b02      	cmp	r3, #2
 8004818:	d151      	bne.n	80048be <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	2b22      	cmp	r3, #34	; 0x22
 800481e:	d10d      	bne.n	800483c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800482e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	651a      	str	r2, [r3, #80]	; 0x50
}
 800483a:	e040      	b.n	80048be <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d015      	beq.n	8004872 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	2b21      	cmp	r3, #33	; 0x21
 800484a:	d112      	bne.n	8004872 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004870:	e025      	b.n	80048be <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d120      	bne.n	80048be <I2C_MemoryTransmit_TXE_BTF+0x120>
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b21      	cmp	r3, #33	; 0x21
 8004880:	d11d      	bne.n	80048be <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004890:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff fe36 	bl	800452a <HAL_I2C_MemTxCpltCallback>
}
 80048be:	bf00      	nop
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b22      	cmp	r3, #34	; 0x22
 80048d8:	f040 80ac 	bne.w	8004a34 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d921      	bls.n	800492e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b03      	cmp	r3, #3
 8004918:	f040 808c 	bne.w	8004a34 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800492c:	e082      	b.n	8004a34 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	2b02      	cmp	r3, #2
 8004934:	d075      	beq.n	8004a22 <I2C_MasterReceive_RXNE+0x15c>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d002      	beq.n	8004942 <I2C_MasterReceive_RXNE+0x7c>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d16f      	bne.n	8004a22 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f001 f9b8 	bl	8005cb8 <I2C_WaitOnSTOPRequestThroughIT>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d142      	bne.n	80049d4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800496c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d10a      	bne.n	80049be <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff fdc1 	bl	800453e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80049bc:	e03a      	b.n	8004a34 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2212      	movs	r2, #18
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff fd76 	bl	80044be <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80049d2:	e02f      	b.n	8004a34 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049e2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff fd99 	bl	8004552 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a20:	e008      	b.n	8004a34 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a30:	605a      	str	r2, [r3, #4]
}
 8004a32:	e7ff      	b.n	8004a34 <I2C_MasterReceive_RXNE+0x16e>
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d11b      	bne.n	8004a8c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a62:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691a      	ldr	r2, [r3, #16]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004a8a:	e0bd      	b.n	8004c08 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d129      	bne.n	8004aea <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d00a      	beq.n	8004ac2 <I2C_MasterReceive_BTF+0x86>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d007      	beq.n	8004ac2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ae8:	e08e      	b.n	8004c08 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d176      	bne.n	8004be2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d002      	beq.n	8004b00 <I2C_MasterReceive_BTF+0xc4>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b10      	cmp	r3, #16
 8004afe:	d108      	bne.n	8004b12 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	e019      	b.n	8004b46 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d002      	beq.n	8004b1e <I2C_MasterReceive_BTF+0xe2>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d108      	bne.n	8004b30 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e00a      	b.n	8004b46 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d007      	beq.n	8004b46 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b44:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ba0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d10a      	bne.n	8004bcc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff fcba 	bl	800453e <HAL_I2C_MemRxCpltCallback>
}
 8004bca:	e01d      	b.n	8004c08 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2212      	movs	r2, #18
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff fc6f 	bl	80044be <HAL_I2C_MasterRxCpltCallback>
}
 8004be0:	e012      	b.n	8004c08 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	d117      	bne.n	8004c54 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c3c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004c3e:	e067      	b.n	8004d10 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f043 0301 	orr.w	r3, r3, #1
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	611a      	str	r2, [r3, #16]
}
 8004c52:	e05d      	b.n	8004d10 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c5c:	d133      	bne.n	8004cc6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b21      	cmp	r3, #33	; 0x21
 8004c68:	d109      	bne.n	8004c7e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c7a:	611a      	str	r2, [r3, #16]
 8004c7c:	e008      	b.n	8004c90 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	f043 0301 	orr.w	r3, r3, #1
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d004      	beq.n	8004ca2 <I2C_Master_SB+0x92>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d108      	bne.n	8004cb4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d032      	beq.n	8004d10 <I2C_Master_SB+0x100>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d02d      	beq.n	8004d10 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc2:	605a      	str	r2, [r3, #4]
}
 8004cc4:	e024      	b.n	8004d10 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10e      	bne.n	8004cec <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	11db      	asrs	r3, r3, #7
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	f003 0306 	and.w	r3, r3, #6
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	f063 030f 	orn	r3, r3, #15
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	611a      	str	r2, [r3, #16]
}
 8004cea:	e011      	b.n	8004d10 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d10d      	bne.n	8004d10 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	11db      	asrs	r3, r3, #7
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	f003 0306 	and.w	r3, r3, #6
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	f063 030e 	orn	r3, r3, #14
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	611a      	str	r2, [r3, #16]
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d004      	beq.n	8004d42 <I2C_Master_ADD10+0x26>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d108      	bne.n	8004d54 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00c      	beq.n	8004d64 <I2C_Master_ADD10+0x48>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d62:	605a      	str	r2, [r3, #4]
  }
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b091      	sub	sp, #68	; 0x44
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b22      	cmp	r3, #34	; 0x22
 8004d98:	f040 8169 	bne.w	800506e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10f      	bne.n	8004dc4 <I2C_Master_ADDR+0x54>
 8004da4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004da8:	2b40      	cmp	r3, #64	; 0x40
 8004daa:	d10b      	bne.n	8004dc4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dac:	2300      	movs	r3, #0
 8004dae:	633b      	str	r3, [r7, #48]	; 0x30
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	633b      	str	r3, [r7, #48]	; 0x30
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	e160      	b.n	8005086 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d11d      	bne.n	8004e08 <I2C_Master_ADDR+0x98>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004dd4:	d118      	bne.n	8004e08 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dfa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	651a      	str	r2, [r3, #80]	; 0x50
 8004e06:	e13e      	b.n	8005086 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d113      	bne.n	8004e3a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e12:	2300      	movs	r3, #0
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	e115      	b.n	8005066 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	f040 808a 	bne.w	8004f5a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e4c:	d137      	bne.n	8004ebe <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e6c:	d113      	bne.n	8004e96 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e7c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e7e:	2300      	movs	r3, #0
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	e0e7      	b.n	8005066 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e96:	2300      	movs	r3, #0
 8004e98:	623b      	str	r3, [r7, #32]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	623b      	str	r3, [r7, #32]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	623b      	str	r3, [r7, #32]
 8004eaa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e0d3      	b.n	8005066 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d02e      	beq.n	8004f22 <I2C_Master_ADDR+0x1b2>
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d02b      	beq.n	8004f22 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ecc:	2b12      	cmp	r3, #18
 8004ece:	d102      	bne.n	8004ed6 <I2C_Master_ADDR+0x166>
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d125      	bne.n	8004f22 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d00e      	beq.n	8004efa <I2C_Master_ADDR+0x18a>
 8004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d00b      	beq.n	8004efa <I2C_Master_ADDR+0x18a>
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	2b10      	cmp	r3, #16
 8004ee6:	d008      	beq.n	8004efa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e007      	b.n	8004f0a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f08:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	61fb      	str	r3, [r7, #28]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	61fb      	str	r3, [r7, #28]
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	e0a1      	b.n	8005066 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f30:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f32:	2300      	movs	r3, #0
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	e085      	b.n	8005066 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d14d      	bne.n	8005000 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d016      	beq.n	8004f98 <I2C_Master_ADDR+0x228>
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d013      	beq.n	8004f98 <I2C_Master_ADDR+0x228>
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d010      	beq.n	8004f98 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f84:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	e007      	b.n	8004fa8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fa6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb6:	d117      	bne.n	8004fe8 <I2C_Master_ADDR+0x278>
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fbe:	d00b      	beq.n	8004fd8 <I2C_Master_ADDR+0x268>
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d008      	beq.n	8004fd8 <I2C_Master_ADDR+0x268>
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d005      	beq.n	8004fd8 <I2C_Master_ADDR+0x268>
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d002      	beq.n	8004fd8 <I2C_Master_ADDR+0x268>
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d107      	bne.n	8004fe8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fe6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	e032      	b.n	8005066 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800500e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800501a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800501e:	d117      	bne.n	8005050 <I2C_Master_ADDR+0x2e0>
 8005020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005022:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005026:	d00b      	beq.n	8005040 <I2C_Master_ADDR+0x2d0>
 8005028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502a:	2b01      	cmp	r3, #1
 800502c:	d008      	beq.n	8005040 <I2C_Master_ADDR+0x2d0>
 800502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005030:	2b08      	cmp	r3, #8
 8005032:	d005      	beq.n	8005040 <I2C_Master_ADDR+0x2d0>
 8005034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005036:	2b10      	cmp	r3, #16
 8005038:	d002      	beq.n	8005040 <I2C_Master_ADDR+0x2d0>
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	2b20      	cmp	r3, #32
 800503e:	d107      	bne.n	8005050 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800504e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005050:	2300      	movs	r3, #0
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800506c:	e00b      	b.n	8005086 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	68fb      	ldr	r3, [r7, #12]
}
 8005084:	e7ff      	b.n	8005086 <I2C_Master_ADDR+0x316>
 8005086:	bf00      	nop
 8005088:	3744      	adds	r7, #68	; 0x44
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d02b      	beq.n	8005104 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	781a      	ldrb	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d114      	bne.n	8005104 <I2C_SlaveTransmit_TXE+0x72>
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	2b29      	cmp	r3, #41	; 0x29
 80050de:	d111      	bne.n	8005104 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2221      	movs	r2, #33	; 0x21
 80050f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2228      	movs	r2, #40	; 0x28
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff f9e7 	bl	80044d2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005104:	bf00      	nop
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d011      	beq.n	8005142 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	781a      	ldrb	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d02c      	beq.n	80051c2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d114      	bne.n	80051c2 <I2C_SlaveReceive_RXNE+0x74>
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	2b2a      	cmp	r3, #42	; 0x2a
 800519c:	d111      	bne.n	80051c2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2222      	movs	r2, #34	; 0x22
 80051b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2228      	movs	r2, #40	; 0x28
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7ff f992 	bl	80044e6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d012      	beq.n	8005202 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005218:	2300      	movs	r3, #0
 800521a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005228:	2b28      	cmp	r3, #40	; 0x28
 800522a:	d127      	bne.n	800527c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	089b      	lsrs	r3, r3, #2
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005248:	2301      	movs	r3, #1
 800524a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	09db      	lsrs	r3, r3, #7
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	81bb      	strh	r3, [r7, #12]
 800525e:	e002      	b.n	8005266 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800526e:	89ba      	ldrh	r2, [r7, #12]
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	4619      	mov	r1, r3
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff f940 	bl	80044fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800527a:	e00e      	b.n	800529a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527c:	2300      	movs	r3, #0
 800527e:	60bb      	str	r3, [r7, #8]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	60bb      	str	r3, [r7, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	60bb      	str	r3, [r7, #8]
 8005290:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800529a:	bf00      	nop
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80052c4:	2300      	movs	r3, #0
 80052c6:	60bb      	str	r3, [r7, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	60bb      	str	r3, [r7, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005300:	d172      	bne.n	80053e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	2b22      	cmp	r3, #34	; 0x22
 8005306:	d002      	beq.n	800530e <I2C_Slave_STOPF+0x6a>
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	2b2a      	cmp	r3, #42	; 0x2a
 800530c:	d135      	bne.n	800537a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	b29a      	uxth	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f043 0204 	orr.w	r2, r3, #4
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005340:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	4618      	mov	r0, r3
 8005348:	f7fe f885 	bl	8003456 <HAL_DMA_GetState>
 800534c:	4603      	mov	r3, r0
 800534e:	2b01      	cmp	r3, #1
 8005350:	d049      	beq.n	80053e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	4a69      	ldr	r2, [pc, #420]	; (80054fc <I2C_Slave_STOPF+0x258>)
 8005358:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe f857 	bl	8003412 <HAL_DMA_Abort_IT>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d03d      	beq.n	80053e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005374:	4610      	mov	r0, r2
 8005376:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005378:	e035      	b.n	80053e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	b29a      	uxth	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d005      	beq.n	800539e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	f043 0204 	orr.w	r2, r3, #4
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fe f84f 	bl	8003456 <HAL_DMA_GetState>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d014      	beq.n	80053e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c2:	4a4e      	ldr	r2, [pc, #312]	; (80054fc <I2C_Slave_STOPF+0x258>)
 80053c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fe f821 	bl	8003412 <HAL_DMA_Abort_IT>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053e0:	4610      	mov	r0, r2
 80053e2:	4798      	blx	r3
 80053e4:	e000      	b.n	80053e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d03e      	beq.n	8005470 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d112      	bne.n	8005426 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005430:	2b40      	cmp	r3, #64	; 0x40
 8005432:	d112      	bne.n	800545a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	f043 0204 	orr.w	r2, r3, #4
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f843 	bl	8005504 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800547e:	e039      	b.n	80054f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	2b2a      	cmp	r3, #42	; 0x2a
 8005484:	d109      	bne.n	800549a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2228      	movs	r2, #40	; 0x28
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff f826 	bl	80044e6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b28      	cmp	r3, #40	; 0x28
 80054a4:	d111      	bne.n	80054ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a15      	ldr	r2, [pc, #84]	; (8005500 <I2C_Slave_STOPF+0x25c>)
 80054aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff f827 	bl	8004516 <HAL_I2C_ListenCpltCallback>
}
 80054c8:	e014      	b.n	80054f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	2b22      	cmp	r3, #34	; 0x22
 80054d0:	d002      	beq.n	80054d8 <I2C_Slave_STOPF+0x234>
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	2b22      	cmp	r3, #34	; 0x22
 80054d6:	d10d      	bne.n	80054f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fe fff9 	bl	80044e6 <HAL_I2C_SlaveRxCpltCallback>
}
 80054f4:	bf00      	nop
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	08005939 	.word	0x08005939
 8005500:	ffff0000 	.word	0xffff0000

08005504 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005512:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800551a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800551c:	7bbb      	ldrb	r3, [r7, #14]
 800551e:	2b10      	cmp	r3, #16
 8005520:	d002      	beq.n	8005528 <I2C_ITError+0x24>
 8005522:	7bbb      	ldrb	r3, [r7, #14]
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d10a      	bne.n	800553e <I2C_ITError+0x3a>
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	2b22      	cmp	r3, #34	; 0x22
 800552c:	d107      	bne.n	800553e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800553c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005544:	2b28      	cmp	r3, #40	; 0x28
 8005546:	d107      	bne.n	8005558 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2228      	movs	r2, #40	; 0x28
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005556:	e015      	b.n	8005584 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005566:	d00a      	beq.n	800557e <I2C_ITError+0x7a>
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	2b60      	cmp	r3, #96	; 0x60
 800556c:	d007      	beq.n	800557e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800558e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005592:	d162      	bne.n	800565a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055a2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d020      	beq.n	80055f4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b6:	4a6a      	ldr	r2, [pc, #424]	; (8005760 <I2C_ITError+0x25c>)
 80055b8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fd ff27 	bl	8003412 <HAL_DMA_Abort_IT>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 8089 	beq.w	80056de <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0201 	bic.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055ee:	4610      	mov	r0, r2
 80055f0:	4798      	blx	r3
 80055f2:	e074      	b.n	80056de <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	4a59      	ldr	r2, [pc, #356]	; (8005760 <I2C_ITError+0x25c>)
 80055fa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	4618      	mov	r0, r3
 8005602:	f7fd ff06 	bl	8003412 <HAL_DMA_Abort_IT>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d068      	beq.n	80056de <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d10b      	bne.n	8005632 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0201 	bic.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005654:	4610      	mov	r0, r2
 8005656:	4798      	blx	r3
 8005658:	e041      	b.n	80056de <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b60      	cmp	r3, #96	; 0x60
 8005664:	d125      	bne.n	80056b2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567e:	2b40      	cmp	r3, #64	; 0x40
 8005680:	d10b      	bne.n	800569a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7fe ff5b 	bl	8004566 <HAL_I2C_AbortCpltCallback>
 80056b0:	e015      	b.n	80056de <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056bc:	2b40      	cmp	r3, #64	; 0x40
 80056be:	d10b      	bne.n	80056d8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7fe ff3a 	bl	8004552 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10e      	bne.n	800570c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d109      	bne.n	800570c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d104      	bne.n	800570c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800571a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005722:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b04      	cmp	r3, #4
 800572e:	d113      	bne.n	8005758 <I2C_ITError+0x254>
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	2b28      	cmp	r3, #40	; 0x28
 8005734:	d110      	bne.n	8005758 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <I2C_ITError+0x260>)
 800573a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fe fedf 	bl	8004516 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005758:	bf00      	nop
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	08005939 	.word	0x08005939
 8005764:	ffff0000 	.word	0xffff0000

08005768 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	4608      	mov	r0, r1
 8005772:	4611      	mov	r1, r2
 8005774:	461a      	mov	r2, r3
 8005776:	4603      	mov	r3, r0
 8005778:	817b      	strh	r3, [r7, #10]
 800577a:	460b      	mov	r3, r1
 800577c:	813b      	strh	r3, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005790:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 f96a 	bl	8005a88 <I2C_WaitOnFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00d      	beq.n	80057d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c8:	d103      	bne.n	80057d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e0aa      	b.n	800592c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057d6:	897b      	ldrh	r3, [r7, #10]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	461a      	mov	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	6a3a      	ldr	r2, [r7, #32]
 80057ea:	4952      	ldr	r1, [pc, #328]	; (8005934 <I2C_RequestMemoryRead+0x1cc>)
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f9a2 	bl	8005b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e097      	b.n	800592c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005814:	6a39      	ldr	r1, [r7, #32]
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fa0c 	bl	8005c34 <I2C_WaitOnTXEFlagUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00d      	beq.n	800583e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	2b04      	cmp	r3, #4
 8005828:	d107      	bne.n	800583a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005838:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e076      	b.n	800592c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d105      	bne.n	8005850 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005844:	893b      	ldrh	r3, [r7, #8]
 8005846:	b2da      	uxtb	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	611a      	str	r2, [r3, #16]
 800584e:	e021      	b.n	8005894 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005850:	893b      	ldrh	r3, [r7, #8]
 8005852:	0a1b      	lsrs	r3, r3, #8
 8005854:	b29b      	uxth	r3, r3
 8005856:	b2da      	uxtb	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800585e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005860:	6a39      	ldr	r1, [r7, #32]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f9e6 	bl	8005c34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00d      	beq.n	800588a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	2b04      	cmp	r3, #4
 8005874:	d107      	bne.n	8005886 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005884:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e050      	b.n	800592c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800588a:	893b      	ldrh	r3, [r7, #8]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005896:	6a39      	ldr	r1, [r7, #32]
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 f9cb 	bl	8005c34 <I2C_WaitOnTXEFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00d      	beq.n	80058c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d107      	bne.n	80058bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e035      	b.n	800592c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 f8d3 	bl	8005a88 <I2C_WaitOnFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00d      	beq.n	8005904 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f6:	d103      	bne.n	8005900 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e013      	b.n	800592c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005904:	897b      	ldrh	r3, [r7, #10]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f043 0301 	orr.w	r3, r3, #1
 800590c:	b2da      	uxtb	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	6a3a      	ldr	r2, [r7, #32]
 8005918:	4906      	ldr	r1, [pc, #24]	; (8005934 <I2C_RequestMemoryRead+0x1cc>)
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 f90b 	bl	8005b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e000      	b.n	800592c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	00010002 	.word	0x00010002

08005938 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005950:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005952:	4b4b      	ldr	r3, [pc, #300]	; (8005a80 <I2C_DMAAbort+0x148>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	08db      	lsrs	r3, r3, #3
 8005958:	4a4a      	ldr	r2, [pc, #296]	; (8005a84 <I2C_DMAAbort+0x14c>)
 800595a:	fba2 2303 	umull	r2, r3, r2, r3
 800595e:	0a1a      	lsrs	r2, r3, #8
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	00da      	lsls	r2, r3, #3
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f043 0220 	orr.w	r2, r3, #32
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800597e:	e00a      	b.n	8005996 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3b01      	subs	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005994:	d0ea      	beq.n	800596c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a2:	2200      	movs	r2, #0
 80059a4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	2200      	movs	r2, #0
 80059b4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2200      	movs	r2, #0
 80059ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d8:	2200      	movs	r2, #0
 80059da:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	2200      	movs	r2, #0
 80059ea:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0201 	bic.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b60      	cmp	r3, #96	; 0x60
 8005a06:	d10e      	bne.n	8005a26 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a1e:	6978      	ldr	r0, [r7, #20]
 8005a20:	f7fe fda1 	bl	8004566 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a24:	e027      	b.n	8005a76 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a26:	7cfb      	ldrb	r3, [r7, #19]
 8005a28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a2c:	2b28      	cmp	r3, #40	; 0x28
 8005a2e:	d117      	bne.n	8005a60 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2200      	movs	r2, #0
 8005a54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2228      	movs	r2, #40	; 0x28
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a5e:	e007      	b.n	8005a70 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005a70:	6978      	ldr	r0, [r7, #20]
 8005a72:	f7fe fd6e 	bl	8004552 <HAL_I2C_ErrorCallback>
}
 8005a76:	bf00      	nop
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000000 	.word	0x20000000
 8005a84:	14f8b589 	.word	0x14f8b589

08005a88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a98:	e025      	b.n	8005ae6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa0:	d021      	beq.n	8005ae6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa2:	f7fd fb05 	bl	80030b0 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d302      	bcc.n	8005ab8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d116      	bne.n	8005ae6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f043 0220 	orr.w	r2, r3, #32
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e023      	b.n	8005b2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	0c1b      	lsrs	r3, r3, #16
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d10d      	bne.n	8005b0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	43da      	mvns	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4013      	ands	r3, r2
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bf0c      	ite	eq
 8005b02:	2301      	moveq	r3, #1
 8005b04:	2300      	movne	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	e00c      	b.n	8005b26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	43da      	mvns	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4013      	ands	r3, r2
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	bf0c      	ite	eq
 8005b1e:	2301      	moveq	r3, #1
 8005b20:	2300      	movne	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	79fb      	ldrb	r3, [r7, #7]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d0b6      	beq.n	8005a9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
 8005b42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b44:	e051      	b.n	8005bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b54:	d123      	bne.n	8005b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	f043 0204 	orr.w	r2, r3, #4
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e046      	b.n	8005c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba4:	d021      	beq.n	8005bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba6:	f7fd fa83 	bl	80030b0 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d302      	bcc.n	8005bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d116      	bne.n	8005bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f043 0220 	orr.w	r2, r3, #32
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e020      	b.n	8005c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	0c1b      	lsrs	r3, r3, #16
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d10c      	bne.n	8005c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	43da      	mvns	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	bf14      	ite	ne
 8005c06:	2301      	movne	r3, #1
 8005c08:	2300      	moveq	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	e00b      	b.n	8005c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	43da      	mvns	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bf14      	ite	ne
 8005c20:	2301      	movne	r3, #1
 8005c22:	2300      	moveq	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d18d      	bne.n	8005b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c40:	e02d      	b.n	8005c9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 f8c0 	bl	8005dc8 <I2C_IsAcknowledgeFailed>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e02d      	b.n	8005cae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c58:	d021      	beq.n	8005c9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c5a:	f7fd fa29 	bl	80030b0 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d302      	bcc.n	8005c70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d116      	bne.n	8005c9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	f043 0220 	orr.w	r2, r3, #32
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e007      	b.n	8005cae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca8:	2b80      	cmp	r3, #128	; 0x80
 8005caa:	d1ca      	bne.n	8005c42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005cc4:	4b13      	ldr	r3, [pc, #76]	; (8005d14 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	08db      	lsrs	r3, r3, #3
 8005cca:	4a13      	ldr	r2, [pc, #76]	; (8005d18 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	0a1a      	lsrs	r2, r3, #8
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d107      	bne.n	8005cf6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	f043 0220 	orr.w	r2, r3, #32
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e008      	b.n	8005d08 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d04:	d0e9      	beq.n	8005cda <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	20000000 	.word	0x20000000
 8005d18:	14f8b589 	.word	0x14f8b589

08005d1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d28:	e042      	b.n	8005db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d119      	bne.n	8005d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0210 	mvn.w	r2, #16
 8005d40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e029      	b.n	8005dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6c:	f7fd f9a0 	bl	80030b0 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d302      	bcc.n	8005d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d116      	bne.n	8005db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	f043 0220 	orr.w	r2, r3, #32
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e007      	b.n	8005dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dba:	2b40      	cmp	r3, #64	; 0x40
 8005dbc:	d1b5      	bne.n	8005d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dde:	d11b      	bne.n	8005e18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005de8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	f043 0204 	orr.w	r2, r3, #4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005e36:	d103      	bne.n	8005e40 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005e3e:	e007      	b.n	8005e50 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005e48:	d102      	bne.n	8005e50 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e267      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d075      	beq.n	8005f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e7a:	4b88      	ldr	r3, [pc, #544]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 030c 	and.w	r3, r3, #12
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d00c      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e86:	4b85      	ldr	r3, [pc, #532]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d112      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e92:	4b82      	ldr	r3, [pc, #520]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e9e:	d10b      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea0:	4b7e      	ldr	r3, [pc, #504]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d05b      	beq.n	8005f64 <HAL_RCC_OscConfig+0x108>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d157      	bne.n	8005f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e242      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec0:	d106      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x74>
 8005ec2:	4b76      	ldr	r3, [pc, #472]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a75      	ldr	r2, [pc, #468]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	e01d      	b.n	8005f0c <HAL_RCC_OscConfig+0xb0>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ed8:	d10c      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x98>
 8005eda:	4b70      	ldr	r3, [pc, #448]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a6f      	ldr	r2, [pc, #444]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	4b6d      	ldr	r3, [pc, #436]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a6c      	ldr	r2, [pc, #432]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	e00b      	b.n	8005f0c <HAL_RCC_OscConfig+0xb0>
 8005ef4:	4b69      	ldr	r3, [pc, #420]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a68      	ldr	r2, [pc, #416]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	4b66      	ldr	r3, [pc, #408]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a65      	ldr	r2, [pc, #404]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d013      	beq.n	8005f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f14:	f7fd f8cc 	bl	80030b0 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f1c:	f7fd f8c8 	bl	80030b0 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b64      	cmp	r3, #100	; 0x64
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e207      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f2e:	4b5b      	ldr	r3, [pc, #364]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0f0      	beq.n	8005f1c <HAL_RCC_OscConfig+0xc0>
 8005f3a:	e014      	b.n	8005f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3c:	f7fd f8b8 	bl	80030b0 <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f44:	f7fd f8b4 	bl	80030b0 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b64      	cmp	r3, #100	; 0x64
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e1f3      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f56:	4b51      	ldr	r3, [pc, #324]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f0      	bne.n	8005f44 <HAL_RCC_OscConfig+0xe8>
 8005f62:	e000      	b.n	8005f66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d063      	beq.n	800603a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f72:	4b4a      	ldr	r3, [pc, #296]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 030c 	and.w	r3, r3, #12
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00b      	beq.n	8005f96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f7e:	4b47      	ldr	r3, [pc, #284]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d11c      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f8a:	4b44      	ldr	r3, [pc, #272]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d116      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f96:	4b41      	ldr	r3, [pc, #260]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d005      	beq.n	8005fae <HAL_RCC_OscConfig+0x152>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d001      	beq.n	8005fae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e1c7      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fae:	4b3b      	ldr	r3, [pc, #236]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	4937      	ldr	r1, [pc, #220]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fc2:	e03a      	b.n	800603a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d020      	beq.n	800600e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fcc:	4b34      	ldr	r3, [pc, #208]	; (80060a0 <HAL_RCC_OscConfig+0x244>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd2:	f7fd f86d 	bl	80030b0 <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fda:	f7fd f869 	bl	80030b0 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e1a8      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fec:	4b2b      	ldr	r3, [pc, #172]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0f0      	beq.n	8005fda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff8:	4b28      	ldr	r3, [pc, #160]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	4925      	ldr	r1, [pc, #148]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8006008:	4313      	orrs	r3, r2
 800600a:	600b      	str	r3, [r1, #0]
 800600c:	e015      	b.n	800603a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800600e:	4b24      	ldr	r3, [pc, #144]	; (80060a0 <HAL_RCC_OscConfig+0x244>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006014:	f7fd f84c 	bl	80030b0 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800601c:	f7fd f848 	bl	80030b0 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e187      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800602e:	4b1b      	ldr	r3, [pc, #108]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1f0      	bne.n	800601c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d036      	beq.n	80060b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d016      	beq.n	800607c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800604e:	4b15      	ldr	r3, [pc, #84]	; (80060a4 <HAL_RCC_OscConfig+0x248>)
 8006050:	2201      	movs	r2, #1
 8006052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006054:	f7fd f82c 	bl	80030b0 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800605c:	f7fd f828 	bl	80030b0 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e167      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800606e:	4b0b      	ldr	r3, [pc, #44]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8006070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0x200>
 800607a:	e01b      	b.n	80060b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800607c:	4b09      	ldr	r3, [pc, #36]	; (80060a4 <HAL_RCC_OscConfig+0x248>)
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006082:	f7fd f815 	bl	80030b0 <HAL_GetTick>
 8006086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006088:	e00e      	b.n	80060a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800608a:	f7fd f811 	bl	80030b0 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d907      	bls.n	80060a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e150      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
 800609c:	40023800 	.word	0x40023800
 80060a0:	42470000 	.word	0x42470000
 80060a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060a8:	4b88      	ldr	r3, [pc, #544]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80060aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1ea      	bne.n	800608a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 8097 	beq.w	80061f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060c2:	2300      	movs	r3, #0
 80060c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060c6:	4b81      	ldr	r3, [pc, #516]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10f      	bne.n	80060f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060d2:	2300      	movs	r3, #0
 80060d4:	60bb      	str	r3, [r7, #8]
 80060d6:	4b7d      	ldr	r3, [pc, #500]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	4a7c      	ldr	r2, [pc, #496]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80060dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e0:	6413      	str	r3, [r2, #64]	; 0x40
 80060e2:	4b7a      	ldr	r3, [pc, #488]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ea:	60bb      	str	r3, [r7, #8]
 80060ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ee:	2301      	movs	r3, #1
 80060f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f2:	4b77      	ldr	r3, [pc, #476]	; (80062d0 <HAL_RCC_OscConfig+0x474>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d118      	bne.n	8006130 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060fe:	4b74      	ldr	r3, [pc, #464]	; (80062d0 <HAL_RCC_OscConfig+0x474>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a73      	ldr	r2, [pc, #460]	; (80062d0 <HAL_RCC_OscConfig+0x474>)
 8006104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800610a:	f7fc ffd1 	bl	80030b0 <HAL_GetTick>
 800610e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006110:	e008      	b.n	8006124 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006112:	f7fc ffcd 	bl	80030b0 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e10c      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006124:	4b6a      	ldr	r3, [pc, #424]	; (80062d0 <HAL_RCC_OscConfig+0x474>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0f0      	beq.n	8006112 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d106      	bne.n	8006146 <HAL_RCC_OscConfig+0x2ea>
 8006138:	4b64      	ldr	r3, [pc, #400]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 800613a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613c:	4a63      	ldr	r2, [pc, #396]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 800613e:	f043 0301 	orr.w	r3, r3, #1
 8006142:	6713      	str	r3, [r2, #112]	; 0x70
 8006144:	e01c      	b.n	8006180 <HAL_RCC_OscConfig+0x324>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b05      	cmp	r3, #5
 800614c:	d10c      	bne.n	8006168 <HAL_RCC_OscConfig+0x30c>
 800614e:	4b5f      	ldr	r3, [pc, #380]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 8006150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006152:	4a5e      	ldr	r2, [pc, #376]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 8006154:	f043 0304 	orr.w	r3, r3, #4
 8006158:	6713      	str	r3, [r2, #112]	; 0x70
 800615a:	4b5c      	ldr	r3, [pc, #368]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 800615c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615e:	4a5b      	ldr	r2, [pc, #364]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 8006160:	f043 0301 	orr.w	r3, r3, #1
 8006164:	6713      	str	r3, [r2, #112]	; 0x70
 8006166:	e00b      	b.n	8006180 <HAL_RCC_OscConfig+0x324>
 8006168:	4b58      	ldr	r3, [pc, #352]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 800616a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616c:	4a57      	ldr	r2, [pc, #348]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 800616e:	f023 0301 	bic.w	r3, r3, #1
 8006172:	6713      	str	r3, [r2, #112]	; 0x70
 8006174:	4b55      	ldr	r3, [pc, #340]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 8006176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006178:	4a54      	ldr	r2, [pc, #336]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 800617a:	f023 0304 	bic.w	r3, r3, #4
 800617e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d015      	beq.n	80061b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006188:	f7fc ff92 	bl	80030b0 <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800618e:	e00a      	b.n	80061a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006190:	f7fc ff8e 	bl	80030b0 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	f241 3288 	movw	r2, #5000	; 0x1388
 800619e:	4293      	cmp	r3, r2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e0cb      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a6:	4b49      	ldr	r3, [pc, #292]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80061a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0ee      	beq.n	8006190 <HAL_RCC_OscConfig+0x334>
 80061b2:	e014      	b.n	80061de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061b4:	f7fc ff7c 	bl	80030b0 <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ba:	e00a      	b.n	80061d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061bc:	f7fc ff78 	bl	80030b0 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e0b5      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061d2:	4b3e      	ldr	r3, [pc, #248]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80061d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1ee      	bne.n	80061bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d105      	bne.n	80061f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061e4:	4b39      	ldr	r3, [pc, #228]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	4a38      	ldr	r2, [pc, #224]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80061ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 80a1 	beq.w	800633c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061fa:	4b34      	ldr	r3, [pc, #208]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b08      	cmp	r3, #8
 8006204:	d05c      	beq.n	80062c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d141      	bne.n	8006292 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800620e:	4b31      	ldr	r3, [pc, #196]	; (80062d4 <HAL_RCC_OscConfig+0x478>)
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006214:	f7fc ff4c 	bl	80030b0 <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800621c:	f7fc ff48 	bl	80030b0 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e087      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622e:	4b27      	ldr	r3, [pc, #156]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69da      	ldr	r2, [r3, #28]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	019b      	lsls	r3, r3, #6
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	3b01      	subs	r3, #1
 8006254:	041b      	lsls	r3, r3, #16
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	061b      	lsls	r3, r3, #24
 800625e:	491b      	ldr	r1, [pc, #108]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 8006260:	4313      	orrs	r3, r2
 8006262:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006264:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <HAL_RCC_OscConfig+0x478>)
 8006266:	2201      	movs	r2, #1
 8006268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800626a:	f7fc ff21 	bl	80030b0 <HAL_GetTick>
 800626e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006270:	e008      	b.n	8006284 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006272:	f7fc ff1d 	bl	80030b0 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e05c      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006284:	4b11      	ldr	r3, [pc, #68]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0f0      	beq.n	8006272 <HAL_RCC_OscConfig+0x416>
 8006290:	e054      	b.n	800633c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006292:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <HAL_RCC_OscConfig+0x478>)
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006298:	f7fc ff0a 	bl	80030b0 <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062a0:	f7fc ff06 	bl	80030b0 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e045      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1f0      	bne.n	80062a0 <HAL_RCC_OscConfig+0x444>
 80062be:	e03d      	b.n	800633c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d107      	bne.n	80062d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e038      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
 80062cc:	40023800 	.word	0x40023800
 80062d0:	40007000 	.word	0x40007000
 80062d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062d8:	4b1b      	ldr	r3, [pc, #108]	; (8006348 <HAL_RCC_OscConfig+0x4ec>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d028      	beq.n	8006338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d121      	bne.n	8006338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062fe:	429a      	cmp	r2, r3
 8006300:	d11a      	bne.n	8006338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006308:	4013      	ands	r3, r2
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800630e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006310:	4293      	cmp	r3, r2
 8006312:	d111      	bne.n	8006338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	3b01      	subs	r3, #1
 8006322:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006324:	429a      	cmp	r2, r3
 8006326:	d107      	bne.n	8006338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006334:	429a      	cmp	r2, r3
 8006336:	d001      	beq.n	800633c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40023800 	.word	0x40023800

0800634c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e0cc      	b.n	80064fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006360:	4b68      	ldr	r3, [pc, #416]	; (8006504 <HAL_RCC_ClockConfig+0x1b8>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d90c      	bls.n	8006388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800636e:	4b65      	ldr	r3, [pc, #404]	; (8006504 <HAL_RCC_ClockConfig+0x1b8>)
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006376:	4b63      	ldr	r3, [pc, #396]	; (8006504 <HAL_RCC_ClockConfig+0x1b8>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	429a      	cmp	r2, r3
 8006382:	d001      	beq.n	8006388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e0b8      	b.n	80064fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d020      	beq.n	80063d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d005      	beq.n	80063ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063a0:	4b59      	ldr	r3, [pc, #356]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	4a58      	ldr	r2, [pc, #352]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80063a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063b8:	4b53      	ldr	r3, [pc, #332]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	4a52      	ldr	r2, [pc, #328]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80063be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063c4:	4b50      	ldr	r3, [pc, #320]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	494d      	ldr	r1, [pc, #308]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d044      	beq.n	800646c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d107      	bne.n	80063fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ea:	4b47      	ldr	r3, [pc, #284]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d119      	bne.n	800642a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e07f      	b.n	80064fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d003      	beq.n	800640a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006406:	2b03      	cmp	r3, #3
 8006408:	d107      	bne.n	800641a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800640a:	4b3f      	ldr	r3, [pc, #252]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d109      	bne.n	800642a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e06f      	b.n	80064fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800641a:	4b3b      	ldr	r3, [pc, #236]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e067      	b.n	80064fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800642a:	4b37      	ldr	r3, [pc, #220]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f023 0203 	bic.w	r2, r3, #3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	4934      	ldr	r1, [pc, #208]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 8006438:	4313      	orrs	r3, r2
 800643a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800643c:	f7fc fe38 	bl	80030b0 <HAL_GetTick>
 8006440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006442:	e00a      	b.n	800645a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006444:	f7fc fe34 	bl	80030b0 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006452:	4293      	cmp	r3, r2
 8006454:	d901      	bls.n	800645a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e04f      	b.n	80064fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800645a:	4b2b      	ldr	r3, [pc, #172]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 020c 	and.w	r2, r3, #12
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	429a      	cmp	r2, r3
 800646a:	d1eb      	bne.n	8006444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800646c:	4b25      	ldr	r3, [pc, #148]	; (8006504 <HAL_RCC_ClockConfig+0x1b8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d20c      	bcs.n	8006494 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800647a:	4b22      	ldr	r3, [pc, #136]	; (8006504 <HAL_RCC_ClockConfig+0x1b8>)
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006482:	4b20      	ldr	r3, [pc, #128]	; (8006504 <HAL_RCC_ClockConfig+0x1b8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d001      	beq.n	8006494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e032      	b.n	80064fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d008      	beq.n	80064b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064a0:	4b19      	ldr	r3, [pc, #100]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4916      	ldr	r1, [pc, #88]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0308 	and.w	r3, r3, #8
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d009      	beq.n	80064d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064be:	4b12      	ldr	r3, [pc, #72]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	490e      	ldr	r1, [pc, #56]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064d2:	f000 f821 	bl	8006518 <HAL_RCC_GetSysClockFreq>
 80064d6:	4602      	mov	r2, r0
 80064d8:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	091b      	lsrs	r3, r3, #4
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	490a      	ldr	r1, [pc, #40]	; (800650c <HAL_RCC_ClockConfig+0x1c0>)
 80064e4:	5ccb      	ldrb	r3, [r1, r3]
 80064e6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ea:	4a09      	ldr	r2, [pc, #36]	; (8006510 <HAL_RCC_ClockConfig+0x1c4>)
 80064ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064ee:	4b09      	ldr	r3, [pc, #36]	; (8006514 <HAL_RCC_ClockConfig+0x1c8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fc fd98 	bl	8003028 <HAL_InitTick>

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40023c00 	.word	0x40023c00
 8006508:	40023800 	.word	0x40023800
 800650c:	0800d7f4 	.word	0x0800d7f4
 8006510:	20000000 	.word	0x20000000
 8006514:	20000014 	.word	0x20000014

08006518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800651c:	b090      	sub	sp, #64	; 0x40
 800651e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	637b      	str	r3, [r7, #52]	; 0x34
 8006524:	2300      	movs	r3, #0
 8006526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006528:	2300      	movs	r3, #0
 800652a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006530:	4b59      	ldr	r3, [pc, #356]	; (8006698 <HAL_RCC_GetSysClockFreq+0x180>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 030c 	and.w	r3, r3, #12
 8006538:	2b08      	cmp	r3, #8
 800653a:	d00d      	beq.n	8006558 <HAL_RCC_GetSysClockFreq+0x40>
 800653c:	2b08      	cmp	r3, #8
 800653e:	f200 80a1 	bhi.w	8006684 <HAL_RCC_GetSysClockFreq+0x16c>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <HAL_RCC_GetSysClockFreq+0x34>
 8006546:	2b04      	cmp	r3, #4
 8006548:	d003      	beq.n	8006552 <HAL_RCC_GetSysClockFreq+0x3a>
 800654a:	e09b      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800654c:	4b53      	ldr	r3, [pc, #332]	; (800669c <HAL_RCC_GetSysClockFreq+0x184>)
 800654e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006550:	e09b      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006552:	4b53      	ldr	r3, [pc, #332]	; (80066a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006554:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006556:	e098      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006558:	4b4f      	ldr	r3, [pc, #316]	; (8006698 <HAL_RCC_GetSysClockFreq+0x180>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006560:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006562:	4b4d      	ldr	r3, [pc, #308]	; (8006698 <HAL_RCC_GetSysClockFreq+0x180>)
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d028      	beq.n	80065c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800656e:	4b4a      	ldr	r3, [pc, #296]	; (8006698 <HAL_RCC_GetSysClockFreq+0x180>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	099b      	lsrs	r3, r3, #6
 8006574:	2200      	movs	r2, #0
 8006576:	623b      	str	r3, [r7, #32]
 8006578:	627a      	str	r2, [r7, #36]	; 0x24
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006580:	2100      	movs	r1, #0
 8006582:	4b47      	ldr	r3, [pc, #284]	; (80066a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006584:	fb03 f201 	mul.w	r2, r3, r1
 8006588:	2300      	movs	r3, #0
 800658a:	fb00 f303 	mul.w	r3, r0, r3
 800658e:	4413      	add	r3, r2
 8006590:	4a43      	ldr	r2, [pc, #268]	; (80066a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006592:	fba0 1202 	umull	r1, r2, r0, r2
 8006596:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006598:	460a      	mov	r2, r1
 800659a:	62ba      	str	r2, [r7, #40]	; 0x28
 800659c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800659e:	4413      	add	r3, r2
 80065a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a4:	2200      	movs	r2, #0
 80065a6:	61bb      	str	r3, [r7, #24]
 80065a8:	61fa      	str	r2, [r7, #28]
 80065aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80065b2:	f7fa fb81 	bl	8000cb8 <__aeabi_uldivmod>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4613      	mov	r3, r2
 80065bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065be:	e053      	b.n	8006668 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065c0:	4b35      	ldr	r3, [pc, #212]	; (8006698 <HAL_RCC_GetSysClockFreq+0x180>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	099b      	lsrs	r3, r3, #6
 80065c6:	2200      	movs	r2, #0
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	617a      	str	r2, [r7, #20]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80065d2:	f04f 0b00 	mov.w	fp, #0
 80065d6:	4652      	mov	r2, sl
 80065d8:	465b      	mov	r3, fp
 80065da:	f04f 0000 	mov.w	r0, #0
 80065de:	f04f 0100 	mov.w	r1, #0
 80065e2:	0159      	lsls	r1, r3, #5
 80065e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065e8:	0150      	lsls	r0, r2, #5
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	ebb2 080a 	subs.w	r8, r2, sl
 80065f2:	eb63 090b 	sbc.w	r9, r3, fp
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	f04f 0300 	mov.w	r3, #0
 80065fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006602:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006606:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800660a:	ebb2 0408 	subs.w	r4, r2, r8
 800660e:	eb63 0509 	sbc.w	r5, r3, r9
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	f04f 0300 	mov.w	r3, #0
 800661a:	00eb      	lsls	r3, r5, #3
 800661c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006620:	00e2      	lsls	r2, r4, #3
 8006622:	4614      	mov	r4, r2
 8006624:	461d      	mov	r5, r3
 8006626:	eb14 030a 	adds.w	r3, r4, sl
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	eb45 030b 	adc.w	r3, r5, fp
 8006630:	607b      	str	r3, [r7, #4]
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	f04f 0300 	mov.w	r3, #0
 800663a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800663e:	4629      	mov	r1, r5
 8006640:	028b      	lsls	r3, r1, #10
 8006642:	4621      	mov	r1, r4
 8006644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006648:	4621      	mov	r1, r4
 800664a:	028a      	lsls	r2, r1, #10
 800664c:	4610      	mov	r0, r2
 800664e:	4619      	mov	r1, r3
 8006650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006652:	2200      	movs	r2, #0
 8006654:	60bb      	str	r3, [r7, #8]
 8006656:	60fa      	str	r2, [r7, #12]
 8006658:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800665c:	f7fa fb2c 	bl	8000cb8 <__aeabi_uldivmod>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4613      	mov	r3, r2
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006668:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <HAL_RCC_GetSysClockFreq+0x180>)
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	3301      	adds	r3, #1
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006678:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006680:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006682:	e002      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <HAL_RCC_GetSysClockFreq+0x184>)
 8006686:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800668c:	4618      	mov	r0, r3
 800668e:	3740      	adds	r7, #64	; 0x40
 8006690:	46bd      	mov	sp, r7
 8006692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006696:	bf00      	nop
 8006698:	40023800 	.word	0x40023800
 800669c:	00f42400 	.word	0x00f42400
 80066a0:	017d7840 	.word	0x017d7840

080066a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066a4:	b480      	push	{r7}
 80066a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066a8:	4b03      	ldr	r3, [pc, #12]	; (80066b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80066aa:	681b      	ldr	r3, [r3, #0]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	20000000 	.word	0x20000000

080066bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066c0:	f7ff fff0 	bl	80066a4 <HAL_RCC_GetHCLKFreq>
 80066c4:	4602      	mov	r2, r0
 80066c6:	4b05      	ldr	r3, [pc, #20]	; (80066dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	0a9b      	lsrs	r3, r3, #10
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	4903      	ldr	r1, [pc, #12]	; (80066e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066d2:	5ccb      	ldrb	r3, [r1, r3]
 80066d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d8:	4618      	mov	r0, r3
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	40023800 	.word	0x40023800
 80066e0:	0800d804 	.word	0x0800d804

080066e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066e8:	f7ff ffdc 	bl	80066a4 <HAL_RCC_GetHCLKFreq>
 80066ec:	4602      	mov	r2, r0
 80066ee:	4b05      	ldr	r3, [pc, #20]	; (8006704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	0b5b      	lsrs	r3, r3, #13
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	4903      	ldr	r1, [pc, #12]	; (8006708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066fa:	5ccb      	ldrb	r3, [r1, r3]
 80066fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006700:	4618      	mov	r0, r3
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40023800 	.word	0x40023800
 8006708:	0800d804 	.word	0x0800d804

0800670c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e07b      	b.n	8006816 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	2b00      	cmp	r3, #0
 8006724:	d108      	bne.n	8006738 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800672e:	d009      	beq.n	8006744 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	61da      	str	r2, [r3, #28]
 8006736:	e005      	b.n	8006744 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fb fbfe 	bl	8001f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800677a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c8:	ea42 0103 	orr.w	r1, r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	0c1b      	lsrs	r3, r3, #16
 80067e2:	f003 0104 	and.w	r1, r3, #4
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	f003 0210 	and.w	r2, r3, #16
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69da      	ldr	r2, [r3, #28]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006804:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b088      	sub	sp, #32
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	603b      	str	r3, [r7, #0]
 800682a:	4613      	mov	r3, r2
 800682c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_SPI_Transmit+0x22>
 800683c:	2302      	movs	r3, #2
 800683e:	e126      	b.n	8006a8e <HAL_SPI_Transmit+0x270>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006848:	f7fc fc32 	bl	80030b0 <HAL_GetTick>
 800684c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b01      	cmp	r3, #1
 800685c:	d002      	beq.n	8006864 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800685e:	2302      	movs	r3, #2
 8006860:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006862:	e10b      	b.n	8006a7c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <HAL_SPI_Transmit+0x52>
 800686a:	88fb      	ldrh	r3, [r7, #6]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d102      	bne.n	8006876 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006874:	e102      	b.n	8006a7c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2203      	movs	r2, #3
 800687a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	88fa      	ldrh	r2, [r7, #6]
 800688e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	88fa      	ldrh	r2, [r7, #6]
 8006894:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068bc:	d10f      	bne.n	80068de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e8:	2b40      	cmp	r3, #64	; 0x40
 80068ea:	d007      	beq.n	80068fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006904:	d14b      	bne.n	800699e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_SPI_Transmit+0xf6>
 800690e:	8afb      	ldrh	r3, [r7, #22]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d13e      	bne.n	8006992 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006918:	881a      	ldrh	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	1c9a      	adds	r2, r3, #2
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800692e:	b29b      	uxth	r3, r3
 8006930:	3b01      	subs	r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006938:	e02b      	b.n	8006992 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b02      	cmp	r3, #2
 8006946:	d112      	bne.n	800696e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694c:	881a      	ldrh	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006958:	1c9a      	adds	r2, r3, #2
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006962:	b29b      	uxth	r3, r3
 8006964:	3b01      	subs	r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	86da      	strh	r2, [r3, #54]	; 0x36
 800696c:	e011      	b.n	8006992 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800696e:	f7fc fb9f 	bl	80030b0 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d803      	bhi.n	8006986 <HAL_SPI_Transmit+0x168>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d102      	bne.n	800698c <HAL_SPI_Transmit+0x16e>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006990:	e074      	b.n	8006a7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006996:	b29b      	uxth	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1ce      	bne.n	800693a <HAL_SPI_Transmit+0x11c>
 800699c:	e04c      	b.n	8006a38 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <HAL_SPI_Transmit+0x18e>
 80069a6:	8afb      	ldrh	r3, [r7, #22]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d140      	bne.n	8006a2e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	330c      	adds	r3, #12
 80069b6:	7812      	ldrb	r2, [r2, #0]
 80069b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80069d2:	e02c      	b.n	8006a2e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d113      	bne.n	8006a0a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	330c      	adds	r3, #12
 80069ec:	7812      	ldrb	r2, [r2, #0]
 80069ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	3b01      	subs	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a08:	e011      	b.n	8006a2e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a0a:	f7fc fb51 	bl	80030b0 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d803      	bhi.n	8006a22 <HAL_SPI_Transmit+0x204>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d102      	bne.n	8006a28 <HAL_SPI_Transmit+0x20a>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d102      	bne.n	8006a2e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a2c:	e026      	b.n	8006a7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1cd      	bne.n	80069d4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f8b3 	bl	8006ba8 <SPI_EndRxTxTransaction>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10a      	bne.n	8006a6c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a56:	2300      	movs	r3, #0
 8006a58:	613b      	str	r3, [r7, #16]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	613b      	str	r3, [r7, #16]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	613b      	str	r3, [r7, #16]
 8006a6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	77fb      	strb	r3, [r7, #31]
 8006a78:	e000      	b.n	8006a7c <HAL_SPI_Transmit+0x25e>
  }

error:
 8006a7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3720      	adds	r7, #32
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006aa8:	f7fc fb02 	bl	80030b0 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	1a9b      	subs	r3, r3, r2
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ab8:	f7fc fafa 	bl	80030b0 <HAL_GetTick>
 8006abc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006abe:	4b39      	ldr	r3, [pc, #228]	; (8006ba4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	015b      	lsls	r3, r3, #5
 8006ac4:	0d1b      	lsrs	r3, r3, #20
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	fb02 f303 	mul.w	r3, r2, r3
 8006acc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ace:	e054      	b.n	8006b7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad6:	d050      	beq.n	8006b7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ad8:	f7fc faea 	bl	80030b0 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	69fa      	ldr	r2, [r7, #28]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d902      	bls.n	8006aee <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d13d      	bne.n	8006b6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006afc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b06:	d111      	bne.n	8006b2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b10:	d004      	beq.n	8006b1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b1a:	d107      	bne.n	8006b2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b34:	d10f      	bne.n	8006b56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e017      	b.n	8006b9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	4013      	ands	r3, r2
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	bf0c      	ite	eq
 8006b8a:	2301      	moveq	r3, #1
 8006b8c:	2300      	movne	r3, #0
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	461a      	mov	r2, r3
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d19b      	bne.n	8006ad0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3720      	adds	r7, #32
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000000 	.word	0x20000000

08006ba8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006bb4:	4b1b      	ldr	r3, [pc, #108]	; (8006c24 <SPI_EndRxTxTransaction+0x7c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a1b      	ldr	r2, [pc, #108]	; (8006c28 <SPI_EndRxTxTransaction+0x80>)
 8006bba:	fba2 2303 	umull	r2, r3, r2, r3
 8006bbe:	0d5b      	lsrs	r3, r3, #21
 8006bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bc4:	fb02 f303 	mul.w	r3, r2, r3
 8006bc8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bd2:	d112      	bne.n	8006bfa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2180      	movs	r1, #128	; 0x80
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f7ff ff5a 	bl	8006a98 <SPI_WaitFlagStateUntilTimeout>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d016      	beq.n	8006c18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bee:	f043 0220 	orr.w	r2, r3, #32
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e00f      	b.n	8006c1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c10:	2b80      	cmp	r3, #128	; 0x80
 8006c12:	d0f2      	beq.n	8006bfa <SPI_EndRxTxTransaction+0x52>
 8006c14:	e000      	b.n	8006c18 <SPI_EndRxTxTransaction+0x70>
        break;
 8006c16:	bf00      	nop
  }

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20000000 	.word	0x20000000
 8006c28:	165e9f81 	.word	0x165e9f81

08006c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e041      	b.n	8006cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7fb fb52 	bl	80022fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3304      	adds	r3, #4
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	f000 f888 	bl	8006d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d001      	beq.n	8006ce4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e03c      	b.n	8006d5e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a1e      	ldr	r2, [pc, #120]	; (8006d6c <HAL_TIM_Base_Start+0xa0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d018      	beq.n	8006d28 <HAL_TIM_Base_Start+0x5c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cfe:	d013      	beq.n	8006d28 <HAL_TIM_Base_Start+0x5c>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a1a      	ldr	r2, [pc, #104]	; (8006d70 <HAL_TIM_Base_Start+0xa4>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00e      	beq.n	8006d28 <HAL_TIM_Base_Start+0x5c>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a19      	ldr	r2, [pc, #100]	; (8006d74 <HAL_TIM_Base_Start+0xa8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d009      	beq.n	8006d28 <HAL_TIM_Base_Start+0x5c>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a17      	ldr	r2, [pc, #92]	; (8006d78 <HAL_TIM_Base_Start+0xac>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d004      	beq.n	8006d28 <HAL_TIM_Base_Start+0x5c>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a16      	ldr	r2, [pc, #88]	; (8006d7c <HAL_TIM_Base_Start+0xb0>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d111      	bne.n	8006d4c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b06      	cmp	r3, #6
 8006d38:	d010      	beq.n	8006d5c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 0201 	orr.w	r2, r2, #1
 8006d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d4a:	e007      	b.n	8006d5c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0201 	orr.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	40010000 	.word	0x40010000
 8006d70:	40000400 	.word	0x40000400
 8006d74:	40000800 	.word	0x40000800
 8006d78:	40000c00 	.word	0x40000c00
 8006d7c:	40014000 	.word	0x40014000

08006d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a34      	ldr	r2, [pc, #208]	; (8006e64 <TIM_Base_SetConfig+0xe4>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00f      	beq.n	8006db8 <TIM_Base_SetConfig+0x38>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9e:	d00b      	beq.n	8006db8 <TIM_Base_SetConfig+0x38>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a31      	ldr	r2, [pc, #196]	; (8006e68 <TIM_Base_SetConfig+0xe8>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d007      	beq.n	8006db8 <TIM_Base_SetConfig+0x38>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a30      	ldr	r2, [pc, #192]	; (8006e6c <TIM_Base_SetConfig+0xec>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d003      	beq.n	8006db8 <TIM_Base_SetConfig+0x38>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a2f      	ldr	r2, [pc, #188]	; (8006e70 <TIM_Base_SetConfig+0xf0>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d108      	bne.n	8006dca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a25      	ldr	r2, [pc, #148]	; (8006e64 <TIM_Base_SetConfig+0xe4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d01b      	beq.n	8006e0a <TIM_Base_SetConfig+0x8a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd8:	d017      	beq.n	8006e0a <TIM_Base_SetConfig+0x8a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a22      	ldr	r2, [pc, #136]	; (8006e68 <TIM_Base_SetConfig+0xe8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d013      	beq.n	8006e0a <TIM_Base_SetConfig+0x8a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a21      	ldr	r2, [pc, #132]	; (8006e6c <TIM_Base_SetConfig+0xec>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d00f      	beq.n	8006e0a <TIM_Base_SetConfig+0x8a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a20      	ldr	r2, [pc, #128]	; (8006e70 <TIM_Base_SetConfig+0xf0>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00b      	beq.n	8006e0a <TIM_Base_SetConfig+0x8a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a1f      	ldr	r2, [pc, #124]	; (8006e74 <TIM_Base_SetConfig+0xf4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d007      	beq.n	8006e0a <TIM_Base_SetConfig+0x8a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a1e      	ldr	r2, [pc, #120]	; (8006e78 <TIM_Base_SetConfig+0xf8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d003      	beq.n	8006e0a <TIM_Base_SetConfig+0x8a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a1d      	ldr	r2, [pc, #116]	; (8006e7c <TIM_Base_SetConfig+0xfc>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d108      	bne.n	8006e1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a08      	ldr	r2, [pc, #32]	; (8006e64 <TIM_Base_SetConfig+0xe4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d103      	bne.n	8006e50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	691a      	ldr	r2, [r3, #16]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	615a      	str	r2, [r3, #20]
}
 8006e56:	bf00      	nop
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	40010000 	.word	0x40010000
 8006e68:	40000400 	.word	0x40000400
 8006e6c:	40000800 	.word	0x40000800
 8006e70:	40000c00 	.word	0x40000c00
 8006e74:	40014000 	.word	0x40014000
 8006e78:	40014400 	.word	0x40014400
 8006e7c:	40014800 	.word	0x40014800

08006e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e03f      	b.n	8006f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fb fa8a 	bl	80023c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2224      	movs	r2, #36	; 0x24
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fddf 	bl	8007a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691a      	ldr	r2, [r3, #16]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	695a      	ldr	r2, [r3, #20]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b08a      	sub	sp, #40	; 0x28
 8006f1e:	af02      	add	r7, sp, #8
 8006f20:	60f8      	str	r0, [r7, #12]
 8006f22:	60b9      	str	r1, [r7, #8]
 8006f24:	603b      	str	r3, [r7, #0]
 8006f26:	4613      	mov	r3, r2
 8006f28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	d17c      	bne.n	8007034 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <HAL_UART_Transmit+0x2c>
 8006f40:	88fb      	ldrh	r3, [r7, #6]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e075      	b.n	8007036 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d101      	bne.n	8006f58 <HAL_UART_Transmit+0x3e>
 8006f54:	2302      	movs	r3, #2
 8006f56:	e06e      	b.n	8007036 <HAL_UART_Transmit+0x11c>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2221      	movs	r2, #33	; 0x21
 8006f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f6e:	f7fc f89f 	bl	80030b0 <HAL_GetTick>
 8006f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	88fa      	ldrh	r2, [r7, #6]
 8006f78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	88fa      	ldrh	r2, [r7, #6]
 8006f7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f88:	d108      	bne.n	8006f9c <HAL_UART_Transmit+0x82>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	61bb      	str	r3, [r7, #24]
 8006f9a:	e003      	b.n	8006fa4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006fac:	e02a      	b.n	8007004 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2180      	movs	r1, #128	; 0x80
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 fb1f 	bl	80075fc <UART_WaitOnFlagUntilTimeout>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e036      	b.n	8007036 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10b      	bne.n	8006fe6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	3302      	adds	r3, #2
 8006fe2:	61bb      	str	r3, [r7, #24]
 8006fe4:	e007      	b.n	8006ff6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	781a      	ldrb	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1cf      	bne.n	8006fae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2200      	movs	r2, #0
 8007016:	2140      	movs	r1, #64	; 0x40
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 faef 	bl	80075fc <UART_WaitOnFlagUntilTimeout>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e006      	b.n	8007036 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	e000      	b.n	8007036 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007034:	2302      	movs	r3, #2
  }
}
 8007036:	4618      	mov	r0, r3
 8007038:	3720      	adds	r7, #32
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	4613      	mov	r3, r2
 800704a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b20      	cmp	r3, #32
 8007056:	d11d      	bne.n	8007094 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <HAL_UART_Receive_IT+0x26>
 800705e:	88fb      	ldrh	r3, [r7, #6]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e016      	b.n	8007096 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800706e:	2b01      	cmp	r3, #1
 8007070:	d101      	bne.n	8007076 <HAL_UART_Receive_IT+0x38>
 8007072:	2302      	movs	r3, #2
 8007074:	e00f      	b.n	8007096 <HAL_UART_Receive_IT+0x58>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007084:	88fb      	ldrh	r3, [r7, #6]
 8007086:	461a      	mov	r2, r3
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 fb24 	bl	80076d8 <UART_Start_Receive_IT>
 8007090:	4603      	mov	r3, r0
 8007092:	e000      	b.n	8007096 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007094:	2302      	movs	r3, #2
  }
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b0ba      	sub	sp, #232	; 0xe8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10f      	bne.n	8007106 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d009      	beq.n	8007106 <HAL_UART_IRQHandler+0x66>
 80070f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f6:	f003 0320 	and.w	r3, r3, #32
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fc07 	bl	8007912 <UART_Receive_IT>
      return;
 8007104:	e256      	b.n	80075b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 80de 	beq.w	80072cc <HAL_UART_IRQHandler+0x22c>
 8007110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d106      	bne.n	800712a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800711c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007120:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 80d1 	beq.w	80072cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800712a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00b      	beq.n	800714e <HAL_UART_IRQHandler+0xae>
 8007136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800713a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713e:	2b00      	cmp	r3, #0
 8007140:	d005      	beq.n	800714e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	f043 0201 	orr.w	r2, r3, #1
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800714e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007152:	f003 0304 	and.w	r3, r3, #4
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00b      	beq.n	8007172 <HAL_UART_IRQHandler+0xd2>
 800715a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	f043 0202 	orr.w	r2, r3, #2
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00b      	beq.n	8007196 <HAL_UART_IRQHandler+0xf6>
 800717e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d005      	beq.n	8007196 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	f043 0204 	orr.w	r2, r3, #4
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719a:	f003 0308 	and.w	r3, r3, #8
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d011      	beq.n	80071c6 <HAL_UART_IRQHandler+0x126>
 80071a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a6:	f003 0320 	and.w	r3, r3, #32
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d105      	bne.n	80071ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f043 0208 	orr.w	r2, r3, #8
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 81ed 	beq.w	80075aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d4:	f003 0320 	and.w	r3, r3, #32
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d008      	beq.n	80071ee <HAL_UART_IRQHandler+0x14e>
 80071dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e0:	f003 0320 	and.w	r3, r3, #32
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fb92 	bl	8007912 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f8:	2b40      	cmp	r3, #64	; 0x40
 80071fa:	bf0c      	ite	eq
 80071fc:	2301      	moveq	r3, #1
 80071fe:	2300      	movne	r3, #0
 8007200:	b2db      	uxtb	r3, r3
 8007202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	f003 0308 	and.w	r3, r3, #8
 800720e:	2b00      	cmp	r3, #0
 8007210:	d103      	bne.n	800721a <HAL_UART_IRQHandler+0x17a>
 8007212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d04f      	beq.n	80072ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa9a 	bl	8007754 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722a:	2b40      	cmp	r3, #64	; 0x40
 800722c:	d141      	bne.n	80072b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3314      	adds	r3, #20
 8007234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800724c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	3314      	adds	r3, #20
 8007256:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800725a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800725e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007262:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007266:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1d9      	bne.n	800722e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727e:	2b00      	cmp	r3, #0
 8007280:	d013      	beq.n	80072aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007286:	4a7d      	ldr	r2, [pc, #500]	; (800747c <HAL_UART_IRQHandler+0x3dc>)
 8007288:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	4618      	mov	r0, r3
 8007290:	f7fc f8bf 	bl	8003412 <HAL_DMA_Abort_IT>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d016      	beq.n	80072c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072a4:	4610      	mov	r0, r2
 80072a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a8:	e00e      	b.n	80072c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f990 	bl	80075d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b0:	e00a      	b.n	80072c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f98c 	bl	80075d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b8:	e006      	b.n	80072c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f988 	bl	80075d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80072c6:	e170      	b.n	80075aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c8:	bf00      	nop
    return;
 80072ca:	e16e      	b.n	80075aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	f040 814a 	bne.w	800756a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072da:	f003 0310 	and.w	r3, r3, #16
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8143 	beq.w	800756a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072e8:	f003 0310 	and.w	r3, r3, #16
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 813c 	beq.w	800756a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072f2:	2300      	movs	r3, #0
 80072f4:	60bb      	str	r3, [r7, #8]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	60bb      	str	r3, [r7, #8]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	60bb      	str	r3, [r7, #8]
 8007306:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007312:	2b40      	cmp	r3, #64	; 0x40
 8007314:	f040 80b4 	bne.w	8007480 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007324:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 8140 	beq.w	80075ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007336:	429a      	cmp	r2, r3
 8007338:	f080 8139 	bcs.w	80075ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007342:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800734e:	f000 8088 	beq.w	8007462 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	330c      	adds	r3, #12
 8007358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800736c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	330c      	adds	r3, #12
 800737a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800737e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800738a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1d9      	bne.n	8007352 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3314      	adds	r3, #20
 80073a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073b0:	f023 0301 	bic.w	r3, r3, #1
 80073b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3314      	adds	r3, #20
 80073be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e1      	bne.n	800739e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3314      	adds	r3, #20
 80073e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3314      	adds	r3, #20
 80073fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007400:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007404:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800740c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e3      	bne.n	80073da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	330c      	adds	r3, #12
 8007426:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800742a:	e853 3f00 	ldrex	r3, [r3]
 800742e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007432:	f023 0310 	bic.w	r3, r3, #16
 8007436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	330c      	adds	r3, #12
 8007440:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007444:	65ba      	str	r2, [r7, #88]	; 0x58
 8007446:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800744a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e3      	bne.n	8007420 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745c:	4618      	mov	r0, r3
 800745e:	f7fb ff68 	bl	8003332 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800746a:	b29b      	uxth	r3, r3
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	b29b      	uxth	r3, r3
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f8b6 	bl	80075e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007478:	e099      	b.n	80075ae <HAL_UART_IRQHandler+0x50e>
 800747a:	bf00      	nop
 800747c:	0800781b 	.word	0x0800781b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007488:	b29b      	uxth	r3, r3
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 808b 	beq.w	80075b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800749c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 8086 	beq.w	80075b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	330c      	adds	r3, #12
 80074ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	330c      	adds	r3, #12
 80074c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80074ca:	647a      	str	r2, [r7, #68]	; 0x44
 80074cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1e3      	bne.n	80074a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3314      	adds	r3, #20
 80074e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	623b      	str	r3, [r7, #32]
   return(result);
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	f023 0301 	bic.w	r3, r3, #1
 80074f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3314      	adds	r3, #20
 80074fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007502:	633a      	str	r2, [r7, #48]	; 0x30
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e3      	bne.n	80074de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	330c      	adds	r3, #12
 800752a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	60fb      	str	r3, [r7, #12]
   return(result);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f023 0310 	bic.w	r3, r3, #16
 800753a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	330c      	adds	r3, #12
 8007544:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007548:	61fa      	str	r2, [r7, #28]
 800754a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	69b9      	ldr	r1, [r7, #24]
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	617b      	str	r3, [r7, #20]
   return(result);
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e3      	bne.n	8007524 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800755c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f83e 	bl	80075e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007568:	e023      	b.n	80075b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800756a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007572:	2b00      	cmp	r3, #0
 8007574:	d009      	beq.n	800758a <HAL_UART_IRQHandler+0x4ea>
 8007576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800757a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f95d 	bl	8007842 <UART_Transmit_IT>
    return;
 8007588:	e014      	b.n	80075b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800758a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00e      	beq.n	80075b4 <HAL_UART_IRQHandler+0x514>
 8007596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d008      	beq.n	80075b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f99d 	bl	80078e2 <UART_EndTransmit_IT>
    return;
 80075a8:	e004      	b.n	80075b4 <HAL_UART_IRQHandler+0x514>
    return;
 80075aa:	bf00      	nop
 80075ac:	e002      	b.n	80075b4 <HAL_UART_IRQHandler+0x514>
      return;
 80075ae:	bf00      	nop
 80075b0:	e000      	b.n	80075b4 <HAL_UART_IRQHandler+0x514>
      return;
 80075b2:	bf00      	nop
  }
}
 80075b4:	37e8      	adds	r7, #232	; 0xe8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop

080075bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b090      	sub	sp, #64	; 0x40
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	603b      	str	r3, [r7, #0]
 8007608:	4613      	mov	r3, r2
 800760a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800760c:	e050      	b.n	80076b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800760e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007614:	d04c      	beq.n	80076b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007618:	2b00      	cmp	r3, #0
 800761a:	d007      	beq.n	800762c <UART_WaitOnFlagUntilTimeout+0x30>
 800761c:	f7fb fd48 	bl	80030b0 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007628:	429a      	cmp	r2, r3
 800762a:	d241      	bcs.n	80076b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	330c      	adds	r3, #12
 8007632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	330c      	adds	r3, #12
 800764a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800764c:	637a      	str	r2, [r7, #52]	; 0x34
 800764e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e5      	bne.n	800762c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3314      	adds	r3, #20
 8007666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	e853 3f00 	ldrex	r3, [r3]
 800766e:	613b      	str	r3, [r7, #16]
   return(result);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f023 0301 	bic.w	r3, r3, #1
 8007676:	63bb      	str	r3, [r7, #56]	; 0x38
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3314      	adds	r3, #20
 800767e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007680:	623a      	str	r2, [r7, #32]
 8007682:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	69f9      	ldr	r1, [r7, #28]
 8007686:	6a3a      	ldr	r2, [r7, #32]
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	61bb      	str	r3, [r7, #24]
   return(result);
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e5      	bne.n	8007660 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2220      	movs	r2, #32
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2220      	movs	r2, #32
 80076a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e00f      	b.n	80076d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	4013      	ands	r3, r2
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	429a      	cmp	r2, r3
 80076be:	bf0c      	ite	eq
 80076c0:	2301      	moveq	r3, #1
 80076c2:	2300      	movne	r3, #0
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	461a      	mov	r2, r3
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d09f      	beq.n	800760e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3740      	adds	r7, #64	; 0x40
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	4613      	mov	r3, r2
 80076e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	88fa      	ldrh	r2, [r7, #6]
 80076f0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	88fa      	ldrh	r2, [r7, #6]
 80076f6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2222      	movs	r2, #34	; 0x22
 8007702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d007      	beq.n	8007726 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007724:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695a      	ldr	r2, [r3, #20]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f042 0201 	orr.w	r2, r2, #1
 8007734:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f042 0220 	orr.w	r2, r2, #32
 8007744:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007754:	b480      	push	{r7}
 8007756:	b095      	sub	sp, #84	; 0x54
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	330c      	adds	r3, #12
 8007762:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	330c      	adds	r3, #12
 800777a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800777c:	643a      	str	r2, [r7, #64]	; 0x40
 800777e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007782:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800778a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e5      	bne.n	800775c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3314      	adds	r3, #20
 8007796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	e853 3f00 	ldrex	r3, [r3]
 800779e:	61fb      	str	r3, [r7, #28]
   return(result);
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	f023 0301 	bic.w	r3, r3, #1
 80077a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3314      	adds	r3, #20
 80077ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b8:	e841 2300 	strex	r3, r2, [r1]
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e5      	bne.n	8007790 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d119      	bne.n	8007800 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	330c      	adds	r3, #12
 80077d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	e853 3f00 	ldrex	r3, [r3]
 80077da:	60bb      	str	r3, [r7, #8]
   return(result);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f023 0310 	bic.w	r3, r3, #16
 80077e2:	647b      	str	r3, [r7, #68]	; 0x44
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	330c      	adds	r3, #12
 80077ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077ec:	61ba      	str	r2, [r7, #24]
 80077ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f0:	6979      	ldr	r1, [r7, #20]
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	e841 2300 	strex	r3, r2, [r1]
 80077f8:	613b      	str	r3, [r7, #16]
   return(result);
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e5      	bne.n	80077cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2220      	movs	r2, #32
 8007804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800780e:	bf00      	nop
 8007810:	3754      	adds	r7, #84	; 0x54
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007826:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f7ff fecb 	bl	80075d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800783a:	bf00      	nop
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007842:	b480      	push	{r7}
 8007844:	b085      	sub	sp, #20
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b21      	cmp	r3, #33	; 0x21
 8007854:	d13e      	bne.n	80078d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800785e:	d114      	bne.n	800788a <UART_Transmit_IT+0x48>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d110      	bne.n	800788a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800787c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	1c9a      	adds	r2, r3, #2
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	621a      	str	r2, [r3, #32]
 8007888:	e008      	b.n	800789c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	1c59      	adds	r1, r3, #1
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	6211      	str	r1, [r2, #32]
 8007894:	781a      	ldrb	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3b01      	subs	r3, #1
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	4619      	mov	r1, r3
 80078aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10f      	bne.n	80078d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	e000      	b.n	80078d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078d4:	2302      	movs	r3, #2
  }
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b082      	sub	sp, #8
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68da      	ldr	r2, [r3, #12]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff fe5a 	bl	80075bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b08c      	sub	sp, #48	; 0x30
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b22      	cmp	r3, #34	; 0x22
 8007924:	f040 80ab 	bne.w	8007a7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007930:	d117      	bne.n	8007962 <UART_Receive_IT+0x50>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d113      	bne.n	8007962 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800793a:	2300      	movs	r3, #0
 800793c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	b29b      	uxth	r3, r3
 800794c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007950:	b29a      	uxth	r2, r3
 8007952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007954:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795a:	1c9a      	adds	r2, r3, #2
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	629a      	str	r2, [r3, #40]	; 0x28
 8007960:	e026      	b.n	80079b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007966:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007968:	2300      	movs	r3, #0
 800796a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007974:	d007      	beq.n	8007986 <UART_Receive_IT+0x74>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <UART_Receive_IT+0x82>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	b2da      	uxtb	r2, r3
 800798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	e008      	b.n	80079a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	3b01      	subs	r3, #1
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	4619      	mov	r1, r3
 80079be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d15a      	bne.n	8007a7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68da      	ldr	r2, [r3, #12]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 0220 	bic.w	r2, r2, #32
 80079d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	695a      	ldr	r2, [r3, #20]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0201 	bic.w	r2, r2, #1
 80079f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2220      	movs	r2, #32
 80079f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d135      	bne.n	8007a70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	330c      	adds	r3, #12
 8007a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	613b      	str	r3, [r7, #16]
   return(result);
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f023 0310 	bic.w	r3, r3, #16
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	330c      	adds	r3, #12
 8007a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2a:	623a      	str	r2, [r7, #32]
 8007a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	69f9      	ldr	r1, [r7, #28]
 8007a30:	6a3a      	ldr	r2, [r7, #32]
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e5      	bne.n	8007a0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0310 	and.w	r3, r3, #16
 8007a48:	2b10      	cmp	r3, #16
 8007a4a:	d10a      	bne.n	8007a62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff fdbb 	bl	80075e4 <HAL_UARTEx_RxEventCallback>
 8007a6e:	e002      	b.n	8007a76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7f9 ff7d 	bl	8001970 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	e002      	b.n	8007a80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e000      	b.n	8007a80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a7e:	2302      	movs	r3, #2
  }
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3730      	adds	r7, #48	; 0x30
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a8c:	b0c0      	sub	sp, #256	; 0x100
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa4:	68d9      	ldr	r1, [r3, #12]
 8007aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	ea40 0301 	orr.w	r3, r0, r1
 8007ab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ae0:	f021 010c 	bic.w	r1, r1, #12
 8007ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007aee:	430b      	orrs	r3, r1
 8007af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b02:	6999      	ldr	r1, [r3, #24]
 8007b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	ea40 0301 	orr.w	r3, r0, r1
 8007b0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	4b8f      	ldr	r3, [pc, #572]	; (8007d54 <UART_SetConfig+0x2cc>)
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d005      	beq.n	8007b28 <UART_SetConfig+0xa0>
 8007b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	4b8d      	ldr	r3, [pc, #564]	; (8007d58 <UART_SetConfig+0x2d0>)
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d104      	bne.n	8007b32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b28:	f7fe fddc 	bl	80066e4 <HAL_RCC_GetPCLK2Freq>
 8007b2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b30:	e003      	b.n	8007b3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b32:	f7fe fdc3 	bl	80066bc <HAL_RCC_GetPCLK1Freq>
 8007b36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b44:	f040 810c 	bne.w	8007d60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b5a:	4622      	mov	r2, r4
 8007b5c:	462b      	mov	r3, r5
 8007b5e:	1891      	adds	r1, r2, r2
 8007b60:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b62:	415b      	adcs	r3, r3
 8007b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b6a:	4621      	mov	r1, r4
 8007b6c:	eb12 0801 	adds.w	r8, r2, r1
 8007b70:	4629      	mov	r1, r5
 8007b72:	eb43 0901 	adc.w	r9, r3, r1
 8007b76:	f04f 0200 	mov.w	r2, #0
 8007b7a:	f04f 0300 	mov.w	r3, #0
 8007b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b8a:	4690      	mov	r8, r2
 8007b8c:	4699      	mov	r9, r3
 8007b8e:	4623      	mov	r3, r4
 8007b90:	eb18 0303 	adds.w	r3, r8, r3
 8007b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b98:	462b      	mov	r3, r5
 8007b9a:	eb49 0303 	adc.w	r3, r9, r3
 8007b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007bb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	18db      	adds	r3, r3, r3
 8007bba:	653b      	str	r3, [r7, #80]	; 0x50
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	eb42 0303 	adc.w	r3, r2, r3
 8007bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8007bc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007bc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007bcc:	f7f9 f874 	bl	8000cb8 <__aeabi_uldivmod>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4b61      	ldr	r3, [pc, #388]	; (8007d5c <UART_SetConfig+0x2d4>)
 8007bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8007bda:	095b      	lsrs	r3, r3, #5
 8007bdc:	011c      	lsls	r4, r3, #4
 8007bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007be8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007bec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007bf0:	4642      	mov	r2, r8
 8007bf2:	464b      	mov	r3, r9
 8007bf4:	1891      	adds	r1, r2, r2
 8007bf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007bf8:	415b      	adcs	r3, r3
 8007bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c00:	4641      	mov	r1, r8
 8007c02:	eb12 0a01 	adds.w	sl, r2, r1
 8007c06:	4649      	mov	r1, r9
 8007c08:	eb43 0b01 	adc.w	fp, r3, r1
 8007c0c:	f04f 0200 	mov.w	r2, #0
 8007c10:	f04f 0300 	mov.w	r3, #0
 8007c14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c20:	4692      	mov	sl, r2
 8007c22:	469b      	mov	fp, r3
 8007c24:	4643      	mov	r3, r8
 8007c26:	eb1a 0303 	adds.w	r3, sl, r3
 8007c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c2e:	464b      	mov	r3, r9
 8007c30:	eb4b 0303 	adc.w	r3, fp, r3
 8007c34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	18db      	adds	r3, r3, r3
 8007c50:	643b      	str	r3, [r7, #64]	; 0x40
 8007c52:	4613      	mov	r3, r2
 8007c54:	eb42 0303 	adc.w	r3, r2, r3
 8007c58:	647b      	str	r3, [r7, #68]	; 0x44
 8007c5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c62:	f7f9 f829 	bl	8000cb8 <__aeabi_uldivmod>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	4b3b      	ldr	r3, [pc, #236]	; (8007d5c <UART_SetConfig+0x2d4>)
 8007c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c72:	095b      	lsrs	r3, r3, #5
 8007c74:	2264      	movs	r2, #100	; 0x64
 8007c76:	fb02 f303 	mul.w	r3, r2, r3
 8007c7a:	1acb      	subs	r3, r1, r3
 8007c7c:	00db      	lsls	r3, r3, #3
 8007c7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c82:	4b36      	ldr	r3, [pc, #216]	; (8007d5c <UART_SetConfig+0x2d4>)
 8007c84:	fba3 2302 	umull	r2, r3, r3, r2
 8007c88:	095b      	lsrs	r3, r3, #5
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c90:	441c      	add	r4, r3
 8007c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007ca0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ca4:	4642      	mov	r2, r8
 8007ca6:	464b      	mov	r3, r9
 8007ca8:	1891      	adds	r1, r2, r2
 8007caa:	63b9      	str	r1, [r7, #56]	; 0x38
 8007cac:	415b      	adcs	r3, r3
 8007cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007cb4:	4641      	mov	r1, r8
 8007cb6:	1851      	adds	r1, r2, r1
 8007cb8:	6339      	str	r1, [r7, #48]	; 0x30
 8007cba:	4649      	mov	r1, r9
 8007cbc:	414b      	adcs	r3, r1
 8007cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc0:	f04f 0200 	mov.w	r2, #0
 8007cc4:	f04f 0300 	mov.w	r3, #0
 8007cc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ccc:	4659      	mov	r1, fp
 8007cce:	00cb      	lsls	r3, r1, #3
 8007cd0:	4651      	mov	r1, sl
 8007cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cd6:	4651      	mov	r1, sl
 8007cd8:	00ca      	lsls	r2, r1, #3
 8007cda:	4610      	mov	r0, r2
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	189b      	adds	r3, r3, r2
 8007ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ce8:	464b      	mov	r3, r9
 8007cea:	460a      	mov	r2, r1
 8007cec:	eb42 0303 	adc.w	r3, r2, r3
 8007cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d08:	460b      	mov	r3, r1
 8007d0a:	18db      	adds	r3, r3, r3
 8007d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d0e:	4613      	mov	r3, r2
 8007d10:	eb42 0303 	adc.w	r3, r2, r3
 8007d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d1e:	f7f8 ffcb 	bl	8000cb8 <__aeabi_uldivmod>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4b0d      	ldr	r3, [pc, #52]	; (8007d5c <UART_SetConfig+0x2d4>)
 8007d28:	fba3 1302 	umull	r1, r3, r3, r2
 8007d2c:	095b      	lsrs	r3, r3, #5
 8007d2e:	2164      	movs	r1, #100	; 0x64
 8007d30:	fb01 f303 	mul.w	r3, r1, r3
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	00db      	lsls	r3, r3, #3
 8007d38:	3332      	adds	r3, #50	; 0x32
 8007d3a:	4a08      	ldr	r2, [pc, #32]	; (8007d5c <UART_SetConfig+0x2d4>)
 8007d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d40:	095b      	lsrs	r3, r3, #5
 8007d42:	f003 0207 	and.w	r2, r3, #7
 8007d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4422      	add	r2, r4
 8007d4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d50:	e105      	b.n	8007f5e <UART_SetConfig+0x4d6>
 8007d52:	bf00      	nop
 8007d54:	40011000 	.word	0x40011000
 8007d58:	40011400 	.word	0x40011400
 8007d5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d72:	4642      	mov	r2, r8
 8007d74:	464b      	mov	r3, r9
 8007d76:	1891      	adds	r1, r2, r2
 8007d78:	6239      	str	r1, [r7, #32]
 8007d7a:	415b      	adcs	r3, r3
 8007d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d82:	4641      	mov	r1, r8
 8007d84:	1854      	adds	r4, r2, r1
 8007d86:	4649      	mov	r1, r9
 8007d88:	eb43 0501 	adc.w	r5, r3, r1
 8007d8c:	f04f 0200 	mov.w	r2, #0
 8007d90:	f04f 0300 	mov.w	r3, #0
 8007d94:	00eb      	lsls	r3, r5, #3
 8007d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d9a:	00e2      	lsls	r2, r4, #3
 8007d9c:	4614      	mov	r4, r2
 8007d9e:	461d      	mov	r5, r3
 8007da0:	4643      	mov	r3, r8
 8007da2:	18e3      	adds	r3, r4, r3
 8007da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007da8:	464b      	mov	r3, r9
 8007daa:	eb45 0303 	adc.w	r3, r5, r3
 8007dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007dc2:	f04f 0200 	mov.w	r2, #0
 8007dc6:	f04f 0300 	mov.w	r3, #0
 8007dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007dce:	4629      	mov	r1, r5
 8007dd0:	008b      	lsls	r3, r1, #2
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dd8:	4621      	mov	r1, r4
 8007dda:	008a      	lsls	r2, r1, #2
 8007ddc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007de0:	f7f8 ff6a 	bl	8000cb8 <__aeabi_uldivmod>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4b60      	ldr	r3, [pc, #384]	; (8007f6c <UART_SetConfig+0x4e4>)
 8007dea:	fba3 2302 	umull	r2, r3, r3, r2
 8007dee:	095b      	lsrs	r3, r3, #5
 8007df0:	011c      	lsls	r4, r3, #4
 8007df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007dfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e04:	4642      	mov	r2, r8
 8007e06:	464b      	mov	r3, r9
 8007e08:	1891      	adds	r1, r2, r2
 8007e0a:	61b9      	str	r1, [r7, #24]
 8007e0c:	415b      	adcs	r3, r3
 8007e0e:	61fb      	str	r3, [r7, #28]
 8007e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e14:	4641      	mov	r1, r8
 8007e16:	1851      	adds	r1, r2, r1
 8007e18:	6139      	str	r1, [r7, #16]
 8007e1a:	4649      	mov	r1, r9
 8007e1c:	414b      	adcs	r3, r1
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	f04f 0200 	mov.w	r2, #0
 8007e24:	f04f 0300 	mov.w	r3, #0
 8007e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e2c:	4659      	mov	r1, fp
 8007e2e:	00cb      	lsls	r3, r1, #3
 8007e30:	4651      	mov	r1, sl
 8007e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e36:	4651      	mov	r1, sl
 8007e38:	00ca      	lsls	r2, r1, #3
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	4603      	mov	r3, r0
 8007e40:	4642      	mov	r2, r8
 8007e42:	189b      	adds	r3, r3, r2
 8007e44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e48:	464b      	mov	r3, r9
 8007e4a:	460a      	mov	r2, r1
 8007e4c:	eb42 0303 	adc.w	r3, r2, r3
 8007e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e60:	f04f 0200 	mov.w	r2, #0
 8007e64:	f04f 0300 	mov.w	r3, #0
 8007e68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e6c:	4649      	mov	r1, r9
 8007e6e:	008b      	lsls	r3, r1, #2
 8007e70:	4641      	mov	r1, r8
 8007e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e76:	4641      	mov	r1, r8
 8007e78:	008a      	lsls	r2, r1, #2
 8007e7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e7e:	f7f8 ff1b 	bl	8000cb8 <__aeabi_uldivmod>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	4b39      	ldr	r3, [pc, #228]	; (8007f6c <UART_SetConfig+0x4e4>)
 8007e88:	fba3 1302 	umull	r1, r3, r3, r2
 8007e8c:	095b      	lsrs	r3, r3, #5
 8007e8e:	2164      	movs	r1, #100	; 0x64
 8007e90:	fb01 f303 	mul.w	r3, r1, r3
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	011b      	lsls	r3, r3, #4
 8007e98:	3332      	adds	r3, #50	; 0x32
 8007e9a:	4a34      	ldr	r2, [pc, #208]	; (8007f6c <UART_SetConfig+0x4e4>)
 8007e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea0:	095b      	lsrs	r3, r3, #5
 8007ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ea6:	441c      	add	r4, r3
 8007ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eac:	2200      	movs	r2, #0
 8007eae:	673b      	str	r3, [r7, #112]	; 0x70
 8007eb0:	677a      	str	r2, [r7, #116]	; 0x74
 8007eb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007eb6:	4642      	mov	r2, r8
 8007eb8:	464b      	mov	r3, r9
 8007eba:	1891      	adds	r1, r2, r2
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	415b      	adcs	r3, r3
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ec6:	4641      	mov	r1, r8
 8007ec8:	1851      	adds	r1, r2, r1
 8007eca:	6039      	str	r1, [r7, #0]
 8007ecc:	4649      	mov	r1, r9
 8007ece:	414b      	adcs	r3, r1
 8007ed0:	607b      	str	r3, [r7, #4]
 8007ed2:	f04f 0200 	mov.w	r2, #0
 8007ed6:	f04f 0300 	mov.w	r3, #0
 8007eda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ede:	4659      	mov	r1, fp
 8007ee0:	00cb      	lsls	r3, r1, #3
 8007ee2:	4651      	mov	r1, sl
 8007ee4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ee8:	4651      	mov	r1, sl
 8007eea:	00ca      	lsls	r2, r1, #3
 8007eec:	4610      	mov	r0, r2
 8007eee:	4619      	mov	r1, r3
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	4642      	mov	r2, r8
 8007ef4:	189b      	adds	r3, r3, r2
 8007ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ef8:	464b      	mov	r3, r9
 8007efa:	460a      	mov	r2, r1
 8007efc:	eb42 0303 	adc.w	r3, r2, r3
 8007f00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8007f0c:	667a      	str	r2, [r7, #100]	; 0x64
 8007f0e:	f04f 0200 	mov.w	r2, #0
 8007f12:	f04f 0300 	mov.w	r3, #0
 8007f16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	008b      	lsls	r3, r1, #2
 8007f1e:	4641      	mov	r1, r8
 8007f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f24:	4641      	mov	r1, r8
 8007f26:	008a      	lsls	r2, r1, #2
 8007f28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f2c:	f7f8 fec4 	bl	8000cb8 <__aeabi_uldivmod>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4b0d      	ldr	r3, [pc, #52]	; (8007f6c <UART_SetConfig+0x4e4>)
 8007f36:	fba3 1302 	umull	r1, r3, r3, r2
 8007f3a:	095b      	lsrs	r3, r3, #5
 8007f3c:	2164      	movs	r1, #100	; 0x64
 8007f3e:	fb01 f303 	mul.w	r3, r1, r3
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	011b      	lsls	r3, r3, #4
 8007f46:	3332      	adds	r3, #50	; 0x32
 8007f48:	4a08      	ldr	r2, [pc, #32]	; (8007f6c <UART_SetConfig+0x4e4>)
 8007f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f4e:	095b      	lsrs	r3, r3, #5
 8007f50:	f003 020f 	and.w	r2, r3, #15
 8007f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4422      	add	r2, r4
 8007f5c:	609a      	str	r2, [r3, #8]
}
 8007f5e:	bf00      	nop
 8007f60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f64:	46bd      	mov	sp, r7
 8007f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f6a:	bf00      	nop
 8007f6c:	51eb851f 	.word	0x51eb851f

08007f70 <__errno>:
 8007f70:	4b01      	ldr	r3, [pc, #4]	; (8007f78 <__errno+0x8>)
 8007f72:	6818      	ldr	r0, [r3, #0]
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	2000001c 	.word	0x2000001c

08007f7c <__libc_init_array>:
 8007f7c:	b570      	push	{r4, r5, r6, lr}
 8007f7e:	4d0d      	ldr	r5, [pc, #52]	; (8007fb4 <__libc_init_array+0x38>)
 8007f80:	4c0d      	ldr	r4, [pc, #52]	; (8007fb8 <__libc_init_array+0x3c>)
 8007f82:	1b64      	subs	r4, r4, r5
 8007f84:	10a4      	asrs	r4, r4, #2
 8007f86:	2600      	movs	r6, #0
 8007f88:	42a6      	cmp	r6, r4
 8007f8a:	d109      	bne.n	8007fa0 <__libc_init_array+0x24>
 8007f8c:	4d0b      	ldr	r5, [pc, #44]	; (8007fbc <__libc_init_array+0x40>)
 8007f8e:	4c0c      	ldr	r4, [pc, #48]	; (8007fc0 <__libc_init_array+0x44>)
 8007f90:	f005 fbac 	bl	800d6ec <_init>
 8007f94:	1b64      	subs	r4, r4, r5
 8007f96:	10a4      	asrs	r4, r4, #2
 8007f98:	2600      	movs	r6, #0
 8007f9a:	42a6      	cmp	r6, r4
 8007f9c:	d105      	bne.n	8007faa <__libc_init_array+0x2e>
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa4:	4798      	blx	r3
 8007fa6:	3601      	adds	r6, #1
 8007fa8:	e7ee      	b.n	8007f88 <__libc_init_array+0xc>
 8007faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fae:	4798      	blx	r3
 8007fb0:	3601      	adds	r6, #1
 8007fb2:	e7f2      	b.n	8007f9a <__libc_init_array+0x1e>
 8007fb4:	0800f1b8 	.word	0x0800f1b8
 8007fb8:	0800f1b8 	.word	0x0800f1b8
 8007fbc:	0800f1b8 	.word	0x0800f1b8
 8007fc0:	0800f1bc 	.word	0x0800f1bc

08007fc4 <memset>:
 8007fc4:	4402      	add	r2, r0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d100      	bne.n	8007fce <memset+0xa>
 8007fcc:	4770      	bx	lr
 8007fce:	f803 1b01 	strb.w	r1, [r3], #1
 8007fd2:	e7f9      	b.n	8007fc8 <memset+0x4>

08007fd4 <__cvt>:
 8007fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd8:	ec55 4b10 	vmov	r4, r5, d0
 8007fdc:	2d00      	cmp	r5, #0
 8007fde:	460e      	mov	r6, r1
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	462b      	mov	r3, r5
 8007fe4:	bfbb      	ittet	lt
 8007fe6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007fea:	461d      	movlt	r5, r3
 8007fec:	2300      	movge	r3, #0
 8007fee:	232d      	movlt	r3, #45	; 0x2d
 8007ff0:	700b      	strb	r3, [r1, #0]
 8007ff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ff4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ff8:	4691      	mov	r9, r2
 8007ffa:	f023 0820 	bic.w	r8, r3, #32
 8007ffe:	bfbc      	itt	lt
 8008000:	4622      	movlt	r2, r4
 8008002:	4614      	movlt	r4, r2
 8008004:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008008:	d005      	beq.n	8008016 <__cvt+0x42>
 800800a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800800e:	d100      	bne.n	8008012 <__cvt+0x3e>
 8008010:	3601      	adds	r6, #1
 8008012:	2102      	movs	r1, #2
 8008014:	e000      	b.n	8008018 <__cvt+0x44>
 8008016:	2103      	movs	r1, #3
 8008018:	ab03      	add	r3, sp, #12
 800801a:	9301      	str	r3, [sp, #4]
 800801c:	ab02      	add	r3, sp, #8
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	ec45 4b10 	vmov	d0, r4, r5
 8008024:	4653      	mov	r3, sl
 8008026:	4632      	mov	r2, r6
 8008028:	f001 fdae 	bl	8009b88 <_dtoa_r>
 800802c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008030:	4607      	mov	r7, r0
 8008032:	d102      	bne.n	800803a <__cvt+0x66>
 8008034:	f019 0f01 	tst.w	r9, #1
 8008038:	d022      	beq.n	8008080 <__cvt+0xac>
 800803a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800803e:	eb07 0906 	add.w	r9, r7, r6
 8008042:	d110      	bne.n	8008066 <__cvt+0x92>
 8008044:	783b      	ldrb	r3, [r7, #0]
 8008046:	2b30      	cmp	r3, #48	; 0x30
 8008048:	d10a      	bne.n	8008060 <__cvt+0x8c>
 800804a:	2200      	movs	r2, #0
 800804c:	2300      	movs	r3, #0
 800804e:	4620      	mov	r0, r4
 8008050:	4629      	mov	r1, r5
 8008052:	f7f8 fd51 	bl	8000af8 <__aeabi_dcmpeq>
 8008056:	b918      	cbnz	r0, 8008060 <__cvt+0x8c>
 8008058:	f1c6 0601 	rsb	r6, r6, #1
 800805c:	f8ca 6000 	str.w	r6, [sl]
 8008060:	f8da 3000 	ldr.w	r3, [sl]
 8008064:	4499      	add	r9, r3
 8008066:	2200      	movs	r2, #0
 8008068:	2300      	movs	r3, #0
 800806a:	4620      	mov	r0, r4
 800806c:	4629      	mov	r1, r5
 800806e:	f7f8 fd43 	bl	8000af8 <__aeabi_dcmpeq>
 8008072:	b108      	cbz	r0, 8008078 <__cvt+0xa4>
 8008074:	f8cd 900c 	str.w	r9, [sp, #12]
 8008078:	2230      	movs	r2, #48	; 0x30
 800807a:	9b03      	ldr	r3, [sp, #12]
 800807c:	454b      	cmp	r3, r9
 800807e:	d307      	bcc.n	8008090 <__cvt+0xbc>
 8008080:	9b03      	ldr	r3, [sp, #12]
 8008082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008084:	1bdb      	subs	r3, r3, r7
 8008086:	4638      	mov	r0, r7
 8008088:	6013      	str	r3, [r2, #0]
 800808a:	b004      	add	sp, #16
 800808c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008090:	1c59      	adds	r1, r3, #1
 8008092:	9103      	str	r1, [sp, #12]
 8008094:	701a      	strb	r2, [r3, #0]
 8008096:	e7f0      	b.n	800807a <__cvt+0xa6>

08008098 <__exponent>:
 8008098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800809a:	4603      	mov	r3, r0
 800809c:	2900      	cmp	r1, #0
 800809e:	bfb8      	it	lt
 80080a0:	4249      	neglt	r1, r1
 80080a2:	f803 2b02 	strb.w	r2, [r3], #2
 80080a6:	bfb4      	ite	lt
 80080a8:	222d      	movlt	r2, #45	; 0x2d
 80080aa:	222b      	movge	r2, #43	; 0x2b
 80080ac:	2909      	cmp	r1, #9
 80080ae:	7042      	strb	r2, [r0, #1]
 80080b0:	dd2a      	ble.n	8008108 <__exponent+0x70>
 80080b2:	f10d 0407 	add.w	r4, sp, #7
 80080b6:	46a4      	mov	ip, r4
 80080b8:	270a      	movs	r7, #10
 80080ba:	46a6      	mov	lr, r4
 80080bc:	460a      	mov	r2, r1
 80080be:	fb91 f6f7 	sdiv	r6, r1, r7
 80080c2:	fb07 1516 	mls	r5, r7, r6, r1
 80080c6:	3530      	adds	r5, #48	; 0x30
 80080c8:	2a63      	cmp	r2, #99	; 0x63
 80080ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80080ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80080d2:	4631      	mov	r1, r6
 80080d4:	dcf1      	bgt.n	80080ba <__exponent+0x22>
 80080d6:	3130      	adds	r1, #48	; 0x30
 80080d8:	f1ae 0502 	sub.w	r5, lr, #2
 80080dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80080e0:	1c44      	adds	r4, r0, #1
 80080e2:	4629      	mov	r1, r5
 80080e4:	4561      	cmp	r1, ip
 80080e6:	d30a      	bcc.n	80080fe <__exponent+0x66>
 80080e8:	f10d 0209 	add.w	r2, sp, #9
 80080ec:	eba2 020e 	sub.w	r2, r2, lr
 80080f0:	4565      	cmp	r5, ip
 80080f2:	bf88      	it	hi
 80080f4:	2200      	movhi	r2, #0
 80080f6:	4413      	add	r3, r2
 80080f8:	1a18      	subs	r0, r3, r0
 80080fa:	b003      	add	sp, #12
 80080fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008102:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008106:	e7ed      	b.n	80080e4 <__exponent+0x4c>
 8008108:	2330      	movs	r3, #48	; 0x30
 800810a:	3130      	adds	r1, #48	; 0x30
 800810c:	7083      	strb	r3, [r0, #2]
 800810e:	70c1      	strb	r1, [r0, #3]
 8008110:	1d03      	adds	r3, r0, #4
 8008112:	e7f1      	b.n	80080f8 <__exponent+0x60>

08008114 <_printf_float>:
 8008114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008118:	ed2d 8b02 	vpush	{d8}
 800811c:	b08d      	sub	sp, #52	; 0x34
 800811e:	460c      	mov	r4, r1
 8008120:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008124:	4616      	mov	r6, r2
 8008126:	461f      	mov	r7, r3
 8008128:	4605      	mov	r5, r0
 800812a:	f002 fe8b 	bl	800ae44 <_localeconv_r>
 800812e:	f8d0 a000 	ldr.w	sl, [r0]
 8008132:	4650      	mov	r0, sl
 8008134:	f7f8 f85e 	bl	80001f4 <strlen>
 8008138:	2300      	movs	r3, #0
 800813a:	930a      	str	r3, [sp, #40]	; 0x28
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	9305      	str	r3, [sp, #20]
 8008140:	f8d8 3000 	ldr.w	r3, [r8]
 8008144:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008148:	3307      	adds	r3, #7
 800814a:	f023 0307 	bic.w	r3, r3, #7
 800814e:	f103 0208 	add.w	r2, r3, #8
 8008152:	f8c8 2000 	str.w	r2, [r8]
 8008156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800815e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008162:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008166:	9307      	str	r3, [sp, #28]
 8008168:	f8cd 8018 	str.w	r8, [sp, #24]
 800816c:	ee08 0a10 	vmov	s16, r0
 8008170:	4b9f      	ldr	r3, [pc, #636]	; (80083f0 <_printf_float+0x2dc>)
 8008172:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008176:	f04f 32ff 	mov.w	r2, #4294967295
 800817a:	f7f8 fcef 	bl	8000b5c <__aeabi_dcmpun>
 800817e:	bb88      	cbnz	r0, 80081e4 <_printf_float+0xd0>
 8008180:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008184:	4b9a      	ldr	r3, [pc, #616]	; (80083f0 <_printf_float+0x2dc>)
 8008186:	f04f 32ff 	mov.w	r2, #4294967295
 800818a:	f7f8 fcc9 	bl	8000b20 <__aeabi_dcmple>
 800818e:	bb48      	cbnz	r0, 80081e4 <_printf_float+0xd0>
 8008190:	2200      	movs	r2, #0
 8008192:	2300      	movs	r3, #0
 8008194:	4640      	mov	r0, r8
 8008196:	4649      	mov	r1, r9
 8008198:	f7f8 fcb8 	bl	8000b0c <__aeabi_dcmplt>
 800819c:	b110      	cbz	r0, 80081a4 <_printf_float+0x90>
 800819e:	232d      	movs	r3, #45	; 0x2d
 80081a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081a4:	4b93      	ldr	r3, [pc, #588]	; (80083f4 <_printf_float+0x2e0>)
 80081a6:	4894      	ldr	r0, [pc, #592]	; (80083f8 <_printf_float+0x2e4>)
 80081a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80081ac:	bf94      	ite	ls
 80081ae:	4698      	movls	r8, r3
 80081b0:	4680      	movhi	r8, r0
 80081b2:	2303      	movs	r3, #3
 80081b4:	6123      	str	r3, [r4, #16]
 80081b6:	9b05      	ldr	r3, [sp, #20]
 80081b8:	f023 0204 	bic.w	r2, r3, #4
 80081bc:	6022      	str	r2, [r4, #0]
 80081be:	f04f 0900 	mov.w	r9, #0
 80081c2:	9700      	str	r7, [sp, #0]
 80081c4:	4633      	mov	r3, r6
 80081c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80081c8:	4621      	mov	r1, r4
 80081ca:	4628      	mov	r0, r5
 80081cc:	f000 f9d8 	bl	8008580 <_printf_common>
 80081d0:	3001      	adds	r0, #1
 80081d2:	f040 8090 	bne.w	80082f6 <_printf_float+0x1e2>
 80081d6:	f04f 30ff 	mov.w	r0, #4294967295
 80081da:	b00d      	add	sp, #52	; 0x34
 80081dc:	ecbd 8b02 	vpop	{d8}
 80081e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e4:	4642      	mov	r2, r8
 80081e6:	464b      	mov	r3, r9
 80081e8:	4640      	mov	r0, r8
 80081ea:	4649      	mov	r1, r9
 80081ec:	f7f8 fcb6 	bl	8000b5c <__aeabi_dcmpun>
 80081f0:	b140      	cbz	r0, 8008204 <_printf_float+0xf0>
 80081f2:	464b      	mov	r3, r9
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bfbc      	itt	lt
 80081f8:	232d      	movlt	r3, #45	; 0x2d
 80081fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80081fe:	487f      	ldr	r0, [pc, #508]	; (80083fc <_printf_float+0x2e8>)
 8008200:	4b7f      	ldr	r3, [pc, #508]	; (8008400 <_printf_float+0x2ec>)
 8008202:	e7d1      	b.n	80081a8 <_printf_float+0x94>
 8008204:	6863      	ldr	r3, [r4, #4]
 8008206:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800820a:	9206      	str	r2, [sp, #24]
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	d13f      	bne.n	8008290 <_printf_float+0x17c>
 8008210:	2306      	movs	r3, #6
 8008212:	6063      	str	r3, [r4, #4]
 8008214:	9b05      	ldr	r3, [sp, #20]
 8008216:	6861      	ldr	r1, [r4, #4]
 8008218:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800821c:	2300      	movs	r3, #0
 800821e:	9303      	str	r3, [sp, #12]
 8008220:	ab0a      	add	r3, sp, #40	; 0x28
 8008222:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008226:	ab09      	add	r3, sp, #36	; 0x24
 8008228:	ec49 8b10 	vmov	d0, r8, r9
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	6022      	str	r2, [r4, #0]
 8008230:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008234:	4628      	mov	r0, r5
 8008236:	f7ff fecd 	bl	8007fd4 <__cvt>
 800823a:	9b06      	ldr	r3, [sp, #24]
 800823c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800823e:	2b47      	cmp	r3, #71	; 0x47
 8008240:	4680      	mov	r8, r0
 8008242:	d108      	bne.n	8008256 <_printf_float+0x142>
 8008244:	1cc8      	adds	r0, r1, #3
 8008246:	db02      	blt.n	800824e <_printf_float+0x13a>
 8008248:	6863      	ldr	r3, [r4, #4]
 800824a:	4299      	cmp	r1, r3
 800824c:	dd41      	ble.n	80082d2 <_printf_float+0x1be>
 800824e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008252:	fa5f fb8b 	uxtb.w	fp, fp
 8008256:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800825a:	d820      	bhi.n	800829e <_printf_float+0x18a>
 800825c:	3901      	subs	r1, #1
 800825e:	465a      	mov	r2, fp
 8008260:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008264:	9109      	str	r1, [sp, #36]	; 0x24
 8008266:	f7ff ff17 	bl	8008098 <__exponent>
 800826a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800826c:	1813      	adds	r3, r2, r0
 800826e:	2a01      	cmp	r2, #1
 8008270:	4681      	mov	r9, r0
 8008272:	6123      	str	r3, [r4, #16]
 8008274:	dc02      	bgt.n	800827c <_printf_float+0x168>
 8008276:	6822      	ldr	r2, [r4, #0]
 8008278:	07d2      	lsls	r2, r2, #31
 800827a:	d501      	bpl.n	8008280 <_printf_float+0x16c>
 800827c:	3301      	adds	r3, #1
 800827e:	6123      	str	r3, [r4, #16]
 8008280:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008284:	2b00      	cmp	r3, #0
 8008286:	d09c      	beq.n	80081c2 <_printf_float+0xae>
 8008288:	232d      	movs	r3, #45	; 0x2d
 800828a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800828e:	e798      	b.n	80081c2 <_printf_float+0xae>
 8008290:	9a06      	ldr	r2, [sp, #24]
 8008292:	2a47      	cmp	r2, #71	; 0x47
 8008294:	d1be      	bne.n	8008214 <_printf_float+0x100>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1bc      	bne.n	8008214 <_printf_float+0x100>
 800829a:	2301      	movs	r3, #1
 800829c:	e7b9      	b.n	8008212 <_printf_float+0xfe>
 800829e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80082a2:	d118      	bne.n	80082d6 <_printf_float+0x1c2>
 80082a4:	2900      	cmp	r1, #0
 80082a6:	6863      	ldr	r3, [r4, #4]
 80082a8:	dd0b      	ble.n	80082c2 <_printf_float+0x1ae>
 80082aa:	6121      	str	r1, [r4, #16]
 80082ac:	b913      	cbnz	r3, 80082b4 <_printf_float+0x1a0>
 80082ae:	6822      	ldr	r2, [r4, #0]
 80082b0:	07d0      	lsls	r0, r2, #31
 80082b2:	d502      	bpl.n	80082ba <_printf_float+0x1a6>
 80082b4:	3301      	adds	r3, #1
 80082b6:	440b      	add	r3, r1
 80082b8:	6123      	str	r3, [r4, #16]
 80082ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80082bc:	f04f 0900 	mov.w	r9, #0
 80082c0:	e7de      	b.n	8008280 <_printf_float+0x16c>
 80082c2:	b913      	cbnz	r3, 80082ca <_printf_float+0x1b6>
 80082c4:	6822      	ldr	r2, [r4, #0]
 80082c6:	07d2      	lsls	r2, r2, #31
 80082c8:	d501      	bpl.n	80082ce <_printf_float+0x1ba>
 80082ca:	3302      	adds	r3, #2
 80082cc:	e7f4      	b.n	80082b8 <_printf_float+0x1a4>
 80082ce:	2301      	movs	r3, #1
 80082d0:	e7f2      	b.n	80082b8 <_printf_float+0x1a4>
 80082d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80082d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d8:	4299      	cmp	r1, r3
 80082da:	db05      	blt.n	80082e8 <_printf_float+0x1d4>
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	6121      	str	r1, [r4, #16]
 80082e0:	07d8      	lsls	r0, r3, #31
 80082e2:	d5ea      	bpl.n	80082ba <_printf_float+0x1a6>
 80082e4:	1c4b      	adds	r3, r1, #1
 80082e6:	e7e7      	b.n	80082b8 <_printf_float+0x1a4>
 80082e8:	2900      	cmp	r1, #0
 80082ea:	bfd4      	ite	le
 80082ec:	f1c1 0202 	rsble	r2, r1, #2
 80082f0:	2201      	movgt	r2, #1
 80082f2:	4413      	add	r3, r2
 80082f4:	e7e0      	b.n	80082b8 <_printf_float+0x1a4>
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	055a      	lsls	r2, r3, #21
 80082fa:	d407      	bmi.n	800830c <_printf_float+0x1f8>
 80082fc:	6923      	ldr	r3, [r4, #16]
 80082fe:	4642      	mov	r2, r8
 8008300:	4631      	mov	r1, r6
 8008302:	4628      	mov	r0, r5
 8008304:	47b8      	blx	r7
 8008306:	3001      	adds	r0, #1
 8008308:	d12c      	bne.n	8008364 <_printf_float+0x250>
 800830a:	e764      	b.n	80081d6 <_printf_float+0xc2>
 800830c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008310:	f240 80e0 	bls.w	80084d4 <_printf_float+0x3c0>
 8008314:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008318:	2200      	movs	r2, #0
 800831a:	2300      	movs	r3, #0
 800831c:	f7f8 fbec 	bl	8000af8 <__aeabi_dcmpeq>
 8008320:	2800      	cmp	r0, #0
 8008322:	d034      	beq.n	800838e <_printf_float+0x27a>
 8008324:	4a37      	ldr	r2, [pc, #220]	; (8008404 <_printf_float+0x2f0>)
 8008326:	2301      	movs	r3, #1
 8008328:	4631      	mov	r1, r6
 800832a:	4628      	mov	r0, r5
 800832c:	47b8      	blx	r7
 800832e:	3001      	adds	r0, #1
 8008330:	f43f af51 	beq.w	80081d6 <_printf_float+0xc2>
 8008334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008338:	429a      	cmp	r2, r3
 800833a:	db02      	blt.n	8008342 <_printf_float+0x22e>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	07d8      	lsls	r0, r3, #31
 8008340:	d510      	bpl.n	8008364 <_printf_float+0x250>
 8008342:	ee18 3a10 	vmov	r3, s16
 8008346:	4652      	mov	r2, sl
 8008348:	4631      	mov	r1, r6
 800834a:	4628      	mov	r0, r5
 800834c:	47b8      	blx	r7
 800834e:	3001      	adds	r0, #1
 8008350:	f43f af41 	beq.w	80081d6 <_printf_float+0xc2>
 8008354:	f04f 0800 	mov.w	r8, #0
 8008358:	f104 091a 	add.w	r9, r4, #26
 800835c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800835e:	3b01      	subs	r3, #1
 8008360:	4543      	cmp	r3, r8
 8008362:	dc09      	bgt.n	8008378 <_printf_float+0x264>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	079b      	lsls	r3, r3, #30
 8008368:	f100 8105 	bmi.w	8008576 <_printf_float+0x462>
 800836c:	68e0      	ldr	r0, [r4, #12]
 800836e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008370:	4298      	cmp	r0, r3
 8008372:	bfb8      	it	lt
 8008374:	4618      	movlt	r0, r3
 8008376:	e730      	b.n	80081da <_printf_float+0xc6>
 8008378:	2301      	movs	r3, #1
 800837a:	464a      	mov	r2, r9
 800837c:	4631      	mov	r1, r6
 800837e:	4628      	mov	r0, r5
 8008380:	47b8      	blx	r7
 8008382:	3001      	adds	r0, #1
 8008384:	f43f af27 	beq.w	80081d6 <_printf_float+0xc2>
 8008388:	f108 0801 	add.w	r8, r8, #1
 800838c:	e7e6      	b.n	800835c <_printf_float+0x248>
 800838e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008390:	2b00      	cmp	r3, #0
 8008392:	dc39      	bgt.n	8008408 <_printf_float+0x2f4>
 8008394:	4a1b      	ldr	r2, [pc, #108]	; (8008404 <_printf_float+0x2f0>)
 8008396:	2301      	movs	r3, #1
 8008398:	4631      	mov	r1, r6
 800839a:	4628      	mov	r0, r5
 800839c:	47b8      	blx	r7
 800839e:	3001      	adds	r0, #1
 80083a0:	f43f af19 	beq.w	80081d6 <_printf_float+0xc2>
 80083a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083a8:	4313      	orrs	r3, r2
 80083aa:	d102      	bne.n	80083b2 <_printf_float+0x29e>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	07d9      	lsls	r1, r3, #31
 80083b0:	d5d8      	bpl.n	8008364 <_printf_float+0x250>
 80083b2:	ee18 3a10 	vmov	r3, s16
 80083b6:	4652      	mov	r2, sl
 80083b8:	4631      	mov	r1, r6
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	f43f af09 	beq.w	80081d6 <_printf_float+0xc2>
 80083c4:	f04f 0900 	mov.w	r9, #0
 80083c8:	f104 0a1a 	add.w	sl, r4, #26
 80083cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ce:	425b      	negs	r3, r3
 80083d0:	454b      	cmp	r3, r9
 80083d2:	dc01      	bgt.n	80083d8 <_printf_float+0x2c4>
 80083d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d6:	e792      	b.n	80082fe <_printf_float+0x1ea>
 80083d8:	2301      	movs	r3, #1
 80083da:	4652      	mov	r2, sl
 80083dc:	4631      	mov	r1, r6
 80083de:	4628      	mov	r0, r5
 80083e0:	47b8      	blx	r7
 80083e2:	3001      	adds	r0, #1
 80083e4:	f43f aef7 	beq.w	80081d6 <_printf_float+0xc2>
 80083e8:	f109 0901 	add.w	r9, r9, #1
 80083ec:	e7ee      	b.n	80083cc <_printf_float+0x2b8>
 80083ee:	bf00      	nop
 80083f0:	7fefffff 	.word	0x7fefffff
 80083f4:	0800ecd8 	.word	0x0800ecd8
 80083f8:	0800ecdc 	.word	0x0800ecdc
 80083fc:	0800ece4 	.word	0x0800ece4
 8008400:	0800ece0 	.word	0x0800ece0
 8008404:	0800ece8 	.word	0x0800ece8
 8008408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800840a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800840c:	429a      	cmp	r2, r3
 800840e:	bfa8      	it	ge
 8008410:	461a      	movge	r2, r3
 8008412:	2a00      	cmp	r2, #0
 8008414:	4691      	mov	r9, r2
 8008416:	dc37      	bgt.n	8008488 <_printf_float+0x374>
 8008418:	f04f 0b00 	mov.w	fp, #0
 800841c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008420:	f104 021a 	add.w	r2, r4, #26
 8008424:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008426:	9305      	str	r3, [sp, #20]
 8008428:	eba3 0309 	sub.w	r3, r3, r9
 800842c:	455b      	cmp	r3, fp
 800842e:	dc33      	bgt.n	8008498 <_printf_float+0x384>
 8008430:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008434:	429a      	cmp	r2, r3
 8008436:	db3b      	blt.n	80084b0 <_printf_float+0x39c>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	07da      	lsls	r2, r3, #31
 800843c:	d438      	bmi.n	80084b0 <_printf_float+0x39c>
 800843e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008440:	9a05      	ldr	r2, [sp, #20]
 8008442:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008444:	1a9a      	subs	r2, r3, r2
 8008446:	eba3 0901 	sub.w	r9, r3, r1
 800844a:	4591      	cmp	r9, r2
 800844c:	bfa8      	it	ge
 800844e:	4691      	movge	r9, r2
 8008450:	f1b9 0f00 	cmp.w	r9, #0
 8008454:	dc35      	bgt.n	80084c2 <_printf_float+0x3ae>
 8008456:	f04f 0800 	mov.w	r8, #0
 800845a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800845e:	f104 0a1a 	add.w	sl, r4, #26
 8008462:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008466:	1a9b      	subs	r3, r3, r2
 8008468:	eba3 0309 	sub.w	r3, r3, r9
 800846c:	4543      	cmp	r3, r8
 800846e:	f77f af79 	ble.w	8008364 <_printf_float+0x250>
 8008472:	2301      	movs	r3, #1
 8008474:	4652      	mov	r2, sl
 8008476:	4631      	mov	r1, r6
 8008478:	4628      	mov	r0, r5
 800847a:	47b8      	blx	r7
 800847c:	3001      	adds	r0, #1
 800847e:	f43f aeaa 	beq.w	80081d6 <_printf_float+0xc2>
 8008482:	f108 0801 	add.w	r8, r8, #1
 8008486:	e7ec      	b.n	8008462 <_printf_float+0x34e>
 8008488:	4613      	mov	r3, r2
 800848a:	4631      	mov	r1, r6
 800848c:	4642      	mov	r2, r8
 800848e:	4628      	mov	r0, r5
 8008490:	47b8      	blx	r7
 8008492:	3001      	adds	r0, #1
 8008494:	d1c0      	bne.n	8008418 <_printf_float+0x304>
 8008496:	e69e      	b.n	80081d6 <_printf_float+0xc2>
 8008498:	2301      	movs	r3, #1
 800849a:	4631      	mov	r1, r6
 800849c:	4628      	mov	r0, r5
 800849e:	9205      	str	r2, [sp, #20]
 80084a0:	47b8      	blx	r7
 80084a2:	3001      	adds	r0, #1
 80084a4:	f43f ae97 	beq.w	80081d6 <_printf_float+0xc2>
 80084a8:	9a05      	ldr	r2, [sp, #20]
 80084aa:	f10b 0b01 	add.w	fp, fp, #1
 80084ae:	e7b9      	b.n	8008424 <_printf_float+0x310>
 80084b0:	ee18 3a10 	vmov	r3, s16
 80084b4:	4652      	mov	r2, sl
 80084b6:	4631      	mov	r1, r6
 80084b8:	4628      	mov	r0, r5
 80084ba:	47b8      	blx	r7
 80084bc:	3001      	adds	r0, #1
 80084be:	d1be      	bne.n	800843e <_printf_float+0x32a>
 80084c0:	e689      	b.n	80081d6 <_printf_float+0xc2>
 80084c2:	9a05      	ldr	r2, [sp, #20]
 80084c4:	464b      	mov	r3, r9
 80084c6:	4442      	add	r2, r8
 80084c8:	4631      	mov	r1, r6
 80084ca:	4628      	mov	r0, r5
 80084cc:	47b8      	blx	r7
 80084ce:	3001      	adds	r0, #1
 80084d0:	d1c1      	bne.n	8008456 <_printf_float+0x342>
 80084d2:	e680      	b.n	80081d6 <_printf_float+0xc2>
 80084d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084d6:	2a01      	cmp	r2, #1
 80084d8:	dc01      	bgt.n	80084de <_printf_float+0x3ca>
 80084da:	07db      	lsls	r3, r3, #31
 80084dc:	d538      	bpl.n	8008550 <_printf_float+0x43c>
 80084de:	2301      	movs	r3, #1
 80084e0:	4642      	mov	r2, r8
 80084e2:	4631      	mov	r1, r6
 80084e4:	4628      	mov	r0, r5
 80084e6:	47b8      	blx	r7
 80084e8:	3001      	adds	r0, #1
 80084ea:	f43f ae74 	beq.w	80081d6 <_printf_float+0xc2>
 80084ee:	ee18 3a10 	vmov	r3, s16
 80084f2:	4652      	mov	r2, sl
 80084f4:	4631      	mov	r1, r6
 80084f6:	4628      	mov	r0, r5
 80084f8:	47b8      	blx	r7
 80084fa:	3001      	adds	r0, #1
 80084fc:	f43f ae6b 	beq.w	80081d6 <_printf_float+0xc2>
 8008500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008504:	2200      	movs	r2, #0
 8008506:	2300      	movs	r3, #0
 8008508:	f7f8 faf6 	bl	8000af8 <__aeabi_dcmpeq>
 800850c:	b9d8      	cbnz	r0, 8008546 <_printf_float+0x432>
 800850e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008510:	f108 0201 	add.w	r2, r8, #1
 8008514:	3b01      	subs	r3, #1
 8008516:	4631      	mov	r1, r6
 8008518:	4628      	mov	r0, r5
 800851a:	47b8      	blx	r7
 800851c:	3001      	adds	r0, #1
 800851e:	d10e      	bne.n	800853e <_printf_float+0x42a>
 8008520:	e659      	b.n	80081d6 <_printf_float+0xc2>
 8008522:	2301      	movs	r3, #1
 8008524:	4652      	mov	r2, sl
 8008526:	4631      	mov	r1, r6
 8008528:	4628      	mov	r0, r5
 800852a:	47b8      	blx	r7
 800852c:	3001      	adds	r0, #1
 800852e:	f43f ae52 	beq.w	80081d6 <_printf_float+0xc2>
 8008532:	f108 0801 	add.w	r8, r8, #1
 8008536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008538:	3b01      	subs	r3, #1
 800853a:	4543      	cmp	r3, r8
 800853c:	dcf1      	bgt.n	8008522 <_printf_float+0x40e>
 800853e:	464b      	mov	r3, r9
 8008540:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008544:	e6dc      	b.n	8008300 <_printf_float+0x1ec>
 8008546:	f04f 0800 	mov.w	r8, #0
 800854a:	f104 0a1a 	add.w	sl, r4, #26
 800854e:	e7f2      	b.n	8008536 <_printf_float+0x422>
 8008550:	2301      	movs	r3, #1
 8008552:	4642      	mov	r2, r8
 8008554:	e7df      	b.n	8008516 <_printf_float+0x402>
 8008556:	2301      	movs	r3, #1
 8008558:	464a      	mov	r2, r9
 800855a:	4631      	mov	r1, r6
 800855c:	4628      	mov	r0, r5
 800855e:	47b8      	blx	r7
 8008560:	3001      	adds	r0, #1
 8008562:	f43f ae38 	beq.w	80081d6 <_printf_float+0xc2>
 8008566:	f108 0801 	add.w	r8, r8, #1
 800856a:	68e3      	ldr	r3, [r4, #12]
 800856c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800856e:	1a5b      	subs	r3, r3, r1
 8008570:	4543      	cmp	r3, r8
 8008572:	dcf0      	bgt.n	8008556 <_printf_float+0x442>
 8008574:	e6fa      	b.n	800836c <_printf_float+0x258>
 8008576:	f04f 0800 	mov.w	r8, #0
 800857a:	f104 0919 	add.w	r9, r4, #25
 800857e:	e7f4      	b.n	800856a <_printf_float+0x456>

08008580 <_printf_common>:
 8008580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008584:	4616      	mov	r6, r2
 8008586:	4699      	mov	r9, r3
 8008588:	688a      	ldr	r2, [r1, #8]
 800858a:	690b      	ldr	r3, [r1, #16]
 800858c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008590:	4293      	cmp	r3, r2
 8008592:	bfb8      	it	lt
 8008594:	4613      	movlt	r3, r2
 8008596:	6033      	str	r3, [r6, #0]
 8008598:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800859c:	4607      	mov	r7, r0
 800859e:	460c      	mov	r4, r1
 80085a0:	b10a      	cbz	r2, 80085a6 <_printf_common+0x26>
 80085a2:	3301      	adds	r3, #1
 80085a4:	6033      	str	r3, [r6, #0]
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	0699      	lsls	r1, r3, #26
 80085aa:	bf42      	ittt	mi
 80085ac:	6833      	ldrmi	r3, [r6, #0]
 80085ae:	3302      	addmi	r3, #2
 80085b0:	6033      	strmi	r3, [r6, #0]
 80085b2:	6825      	ldr	r5, [r4, #0]
 80085b4:	f015 0506 	ands.w	r5, r5, #6
 80085b8:	d106      	bne.n	80085c8 <_printf_common+0x48>
 80085ba:	f104 0a19 	add.w	sl, r4, #25
 80085be:	68e3      	ldr	r3, [r4, #12]
 80085c0:	6832      	ldr	r2, [r6, #0]
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	42ab      	cmp	r3, r5
 80085c6:	dc26      	bgt.n	8008616 <_printf_common+0x96>
 80085c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085cc:	1e13      	subs	r3, r2, #0
 80085ce:	6822      	ldr	r2, [r4, #0]
 80085d0:	bf18      	it	ne
 80085d2:	2301      	movne	r3, #1
 80085d4:	0692      	lsls	r2, r2, #26
 80085d6:	d42b      	bmi.n	8008630 <_printf_common+0xb0>
 80085d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085dc:	4649      	mov	r1, r9
 80085de:	4638      	mov	r0, r7
 80085e0:	47c0      	blx	r8
 80085e2:	3001      	adds	r0, #1
 80085e4:	d01e      	beq.n	8008624 <_printf_common+0xa4>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	68e5      	ldr	r5, [r4, #12]
 80085ea:	6832      	ldr	r2, [r6, #0]
 80085ec:	f003 0306 	and.w	r3, r3, #6
 80085f0:	2b04      	cmp	r3, #4
 80085f2:	bf08      	it	eq
 80085f4:	1aad      	subeq	r5, r5, r2
 80085f6:	68a3      	ldr	r3, [r4, #8]
 80085f8:	6922      	ldr	r2, [r4, #16]
 80085fa:	bf0c      	ite	eq
 80085fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008600:	2500      	movne	r5, #0
 8008602:	4293      	cmp	r3, r2
 8008604:	bfc4      	itt	gt
 8008606:	1a9b      	subgt	r3, r3, r2
 8008608:	18ed      	addgt	r5, r5, r3
 800860a:	2600      	movs	r6, #0
 800860c:	341a      	adds	r4, #26
 800860e:	42b5      	cmp	r5, r6
 8008610:	d11a      	bne.n	8008648 <_printf_common+0xc8>
 8008612:	2000      	movs	r0, #0
 8008614:	e008      	b.n	8008628 <_printf_common+0xa8>
 8008616:	2301      	movs	r3, #1
 8008618:	4652      	mov	r2, sl
 800861a:	4649      	mov	r1, r9
 800861c:	4638      	mov	r0, r7
 800861e:	47c0      	blx	r8
 8008620:	3001      	adds	r0, #1
 8008622:	d103      	bne.n	800862c <_printf_common+0xac>
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862c:	3501      	adds	r5, #1
 800862e:	e7c6      	b.n	80085be <_printf_common+0x3e>
 8008630:	18e1      	adds	r1, r4, r3
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	2030      	movs	r0, #48	; 0x30
 8008636:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800863a:	4422      	add	r2, r4
 800863c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008640:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008644:	3302      	adds	r3, #2
 8008646:	e7c7      	b.n	80085d8 <_printf_common+0x58>
 8008648:	2301      	movs	r3, #1
 800864a:	4622      	mov	r2, r4
 800864c:	4649      	mov	r1, r9
 800864e:	4638      	mov	r0, r7
 8008650:	47c0      	blx	r8
 8008652:	3001      	adds	r0, #1
 8008654:	d0e6      	beq.n	8008624 <_printf_common+0xa4>
 8008656:	3601      	adds	r6, #1
 8008658:	e7d9      	b.n	800860e <_printf_common+0x8e>
	...

0800865c <_printf_i>:
 800865c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008660:	7e0f      	ldrb	r7, [r1, #24]
 8008662:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008664:	2f78      	cmp	r7, #120	; 0x78
 8008666:	4691      	mov	r9, r2
 8008668:	4680      	mov	r8, r0
 800866a:	460c      	mov	r4, r1
 800866c:	469a      	mov	sl, r3
 800866e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008672:	d807      	bhi.n	8008684 <_printf_i+0x28>
 8008674:	2f62      	cmp	r7, #98	; 0x62
 8008676:	d80a      	bhi.n	800868e <_printf_i+0x32>
 8008678:	2f00      	cmp	r7, #0
 800867a:	f000 80d8 	beq.w	800882e <_printf_i+0x1d2>
 800867e:	2f58      	cmp	r7, #88	; 0x58
 8008680:	f000 80a3 	beq.w	80087ca <_printf_i+0x16e>
 8008684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008688:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800868c:	e03a      	b.n	8008704 <_printf_i+0xa8>
 800868e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008692:	2b15      	cmp	r3, #21
 8008694:	d8f6      	bhi.n	8008684 <_printf_i+0x28>
 8008696:	a101      	add	r1, pc, #4	; (adr r1, 800869c <_printf_i+0x40>)
 8008698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800869c:	080086f5 	.word	0x080086f5
 80086a0:	08008709 	.word	0x08008709
 80086a4:	08008685 	.word	0x08008685
 80086a8:	08008685 	.word	0x08008685
 80086ac:	08008685 	.word	0x08008685
 80086b0:	08008685 	.word	0x08008685
 80086b4:	08008709 	.word	0x08008709
 80086b8:	08008685 	.word	0x08008685
 80086bc:	08008685 	.word	0x08008685
 80086c0:	08008685 	.word	0x08008685
 80086c4:	08008685 	.word	0x08008685
 80086c8:	08008815 	.word	0x08008815
 80086cc:	08008739 	.word	0x08008739
 80086d0:	080087f7 	.word	0x080087f7
 80086d4:	08008685 	.word	0x08008685
 80086d8:	08008685 	.word	0x08008685
 80086dc:	08008837 	.word	0x08008837
 80086e0:	08008685 	.word	0x08008685
 80086e4:	08008739 	.word	0x08008739
 80086e8:	08008685 	.word	0x08008685
 80086ec:	08008685 	.word	0x08008685
 80086f0:	080087ff 	.word	0x080087ff
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	1d1a      	adds	r2, r3, #4
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	602a      	str	r2, [r5, #0]
 80086fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008704:	2301      	movs	r3, #1
 8008706:	e0a3      	b.n	8008850 <_printf_i+0x1f4>
 8008708:	6820      	ldr	r0, [r4, #0]
 800870a:	6829      	ldr	r1, [r5, #0]
 800870c:	0606      	lsls	r6, r0, #24
 800870e:	f101 0304 	add.w	r3, r1, #4
 8008712:	d50a      	bpl.n	800872a <_printf_i+0xce>
 8008714:	680e      	ldr	r6, [r1, #0]
 8008716:	602b      	str	r3, [r5, #0]
 8008718:	2e00      	cmp	r6, #0
 800871a:	da03      	bge.n	8008724 <_printf_i+0xc8>
 800871c:	232d      	movs	r3, #45	; 0x2d
 800871e:	4276      	negs	r6, r6
 8008720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008724:	485e      	ldr	r0, [pc, #376]	; (80088a0 <_printf_i+0x244>)
 8008726:	230a      	movs	r3, #10
 8008728:	e019      	b.n	800875e <_printf_i+0x102>
 800872a:	680e      	ldr	r6, [r1, #0]
 800872c:	602b      	str	r3, [r5, #0]
 800872e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008732:	bf18      	it	ne
 8008734:	b236      	sxthne	r6, r6
 8008736:	e7ef      	b.n	8008718 <_printf_i+0xbc>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	6820      	ldr	r0, [r4, #0]
 800873c:	1d19      	adds	r1, r3, #4
 800873e:	6029      	str	r1, [r5, #0]
 8008740:	0601      	lsls	r1, r0, #24
 8008742:	d501      	bpl.n	8008748 <_printf_i+0xec>
 8008744:	681e      	ldr	r6, [r3, #0]
 8008746:	e002      	b.n	800874e <_printf_i+0xf2>
 8008748:	0646      	lsls	r6, r0, #25
 800874a:	d5fb      	bpl.n	8008744 <_printf_i+0xe8>
 800874c:	881e      	ldrh	r6, [r3, #0]
 800874e:	4854      	ldr	r0, [pc, #336]	; (80088a0 <_printf_i+0x244>)
 8008750:	2f6f      	cmp	r7, #111	; 0x6f
 8008752:	bf0c      	ite	eq
 8008754:	2308      	moveq	r3, #8
 8008756:	230a      	movne	r3, #10
 8008758:	2100      	movs	r1, #0
 800875a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800875e:	6865      	ldr	r5, [r4, #4]
 8008760:	60a5      	str	r5, [r4, #8]
 8008762:	2d00      	cmp	r5, #0
 8008764:	bfa2      	ittt	ge
 8008766:	6821      	ldrge	r1, [r4, #0]
 8008768:	f021 0104 	bicge.w	r1, r1, #4
 800876c:	6021      	strge	r1, [r4, #0]
 800876e:	b90e      	cbnz	r6, 8008774 <_printf_i+0x118>
 8008770:	2d00      	cmp	r5, #0
 8008772:	d04d      	beq.n	8008810 <_printf_i+0x1b4>
 8008774:	4615      	mov	r5, r2
 8008776:	fbb6 f1f3 	udiv	r1, r6, r3
 800877a:	fb03 6711 	mls	r7, r3, r1, r6
 800877e:	5dc7      	ldrb	r7, [r0, r7]
 8008780:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008784:	4637      	mov	r7, r6
 8008786:	42bb      	cmp	r3, r7
 8008788:	460e      	mov	r6, r1
 800878a:	d9f4      	bls.n	8008776 <_printf_i+0x11a>
 800878c:	2b08      	cmp	r3, #8
 800878e:	d10b      	bne.n	80087a8 <_printf_i+0x14c>
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	07de      	lsls	r6, r3, #31
 8008794:	d508      	bpl.n	80087a8 <_printf_i+0x14c>
 8008796:	6923      	ldr	r3, [r4, #16]
 8008798:	6861      	ldr	r1, [r4, #4]
 800879a:	4299      	cmp	r1, r3
 800879c:	bfde      	ittt	le
 800879e:	2330      	movle	r3, #48	; 0x30
 80087a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087a8:	1b52      	subs	r2, r2, r5
 80087aa:	6122      	str	r2, [r4, #16]
 80087ac:	f8cd a000 	str.w	sl, [sp]
 80087b0:	464b      	mov	r3, r9
 80087b2:	aa03      	add	r2, sp, #12
 80087b4:	4621      	mov	r1, r4
 80087b6:	4640      	mov	r0, r8
 80087b8:	f7ff fee2 	bl	8008580 <_printf_common>
 80087bc:	3001      	adds	r0, #1
 80087be:	d14c      	bne.n	800885a <_printf_i+0x1fe>
 80087c0:	f04f 30ff 	mov.w	r0, #4294967295
 80087c4:	b004      	add	sp, #16
 80087c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ca:	4835      	ldr	r0, [pc, #212]	; (80088a0 <_printf_i+0x244>)
 80087cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087d0:	6829      	ldr	r1, [r5, #0]
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80087d8:	6029      	str	r1, [r5, #0]
 80087da:	061d      	lsls	r5, r3, #24
 80087dc:	d514      	bpl.n	8008808 <_printf_i+0x1ac>
 80087de:	07df      	lsls	r7, r3, #31
 80087e0:	bf44      	itt	mi
 80087e2:	f043 0320 	orrmi.w	r3, r3, #32
 80087e6:	6023      	strmi	r3, [r4, #0]
 80087e8:	b91e      	cbnz	r6, 80087f2 <_printf_i+0x196>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	f023 0320 	bic.w	r3, r3, #32
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	2310      	movs	r3, #16
 80087f4:	e7b0      	b.n	8008758 <_printf_i+0xfc>
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	f043 0320 	orr.w	r3, r3, #32
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	2378      	movs	r3, #120	; 0x78
 8008800:	4828      	ldr	r0, [pc, #160]	; (80088a4 <_printf_i+0x248>)
 8008802:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008806:	e7e3      	b.n	80087d0 <_printf_i+0x174>
 8008808:	0659      	lsls	r1, r3, #25
 800880a:	bf48      	it	mi
 800880c:	b2b6      	uxthmi	r6, r6
 800880e:	e7e6      	b.n	80087de <_printf_i+0x182>
 8008810:	4615      	mov	r5, r2
 8008812:	e7bb      	b.n	800878c <_printf_i+0x130>
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	6826      	ldr	r6, [r4, #0]
 8008818:	6961      	ldr	r1, [r4, #20]
 800881a:	1d18      	adds	r0, r3, #4
 800881c:	6028      	str	r0, [r5, #0]
 800881e:	0635      	lsls	r5, r6, #24
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	d501      	bpl.n	8008828 <_printf_i+0x1cc>
 8008824:	6019      	str	r1, [r3, #0]
 8008826:	e002      	b.n	800882e <_printf_i+0x1d2>
 8008828:	0670      	lsls	r0, r6, #25
 800882a:	d5fb      	bpl.n	8008824 <_printf_i+0x1c8>
 800882c:	8019      	strh	r1, [r3, #0]
 800882e:	2300      	movs	r3, #0
 8008830:	6123      	str	r3, [r4, #16]
 8008832:	4615      	mov	r5, r2
 8008834:	e7ba      	b.n	80087ac <_printf_i+0x150>
 8008836:	682b      	ldr	r3, [r5, #0]
 8008838:	1d1a      	adds	r2, r3, #4
 800883a:	602a      	str	r2, [r5, #0]
 800883c:	681d      	ldr	r5, [r3, #0]
 800883e:	6862      	ldr	r2, [r4, #4]
 8008840:	2100      	movs	r1, #0
 8008842:	4628      	mov	r0, r5
 8008844:	f7f7 fce4 	bl	8000210 <memchr>
 8008848:	b108      	cbz	r0, 800884e <_printf_i+0x1f2>
 800884a:	1b40      	subs	r0, r0, r5
 800884c:	6060      	str	r0, [r4, #4]
 800884e:	6863      	ldr	r3, [r4, #4]
 8008850:	6123      	str	r3, [r4, #16]
 8008852:	2300      	movs	r3, #0
 8008854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008858:	e7a8      	b.n	80087ac <_printf_i+0x150>
 800885a:	6923      	ldr	r3, [r4, #16]
 800885c:	462a      	mov	r2, r5
 800885e:	4649      	mov	r1, r9
 8008860:	4640      	mov	r0, r8
 8008862:	47d0      	blx	sl
 8008864:	3001      	adds	r0, #1
 8008866:	d0ab      	beq.n	80087c0 <_printf_i+0x164>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	079b      	lsls	r3, r3, #30
 800886c:	d413      	bmi.n	8008896 <_printf_i+0x23a>
 800886e:	68e0      	ldr	r0, [r4, #12]
 8008870:	9b03      	ldr	r3, [sp, #12]
 8008872:	4298      	cmp	r0, r3
 8008874:	bfb8      	it	lt
 8008876:	4618      	movlt	r0, r3
 8008878:	e7a4      	b.n	80087c4 <_printf_i+0x168>
 800887a:	2301      	movs	r3, #1
 800887c:	4632      	mov	r2, r6
 800887e:	4649      	mov	r1, r9
 8008880:	4640      	mov	r0, r8
 8008882:	47d0      	blx	sl
 8008884:	3001      	adds	r0, #1
 8008886:	d09b      	beq.n	80087c0 <_printf_i+0x164>
 8008888:	3501      	adds	r5, #1
 800888a:	68e3      	ldr	r3, [r4, #12]
 800888c:	9903      	ldr	r1, [sp, #12]
 800888e:	1a5b      	subs	r3, r3, r1
 8008890:	42ab      	cmp	r3, r5
 8008892:	dcf2      	bgt.n	800887a <_printf_i+0x21e>
 8008894:	e7eb      	b.n	800886e <_printf_i+0x212>
 8008896:	2500      	movs	r5, #0
 8008898:	f104 0619 	add.w	r6, r4, #25
 800889c:	e7f5      	b.n	800888a <_printf_i+0x22e>
 800889e:	bf00      	nop
 80088a0:	0800ecea 	.word	0x0800ecea
 80088a4:	0800ecfb 	.word	0x0800ecfb

080088a8 <_scanf_float>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	b087      	sub	sp, #28
 80088ae:	4617      	mov	r7, r2
 80088b0:	9303      	str	r3, [sp, #12]
 80088b2:	688b      	ldr	r3, [r1, #8]
 80088b4:	1e5a      	subs	r2, r3, #1
 80088b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80088ba:	bf83      	ittte	hi
 80088bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80088c0:	195b      	addhi	r3, r3, r5
 80088c2:	9302      	strhi	r3, [sp, #8]
 80088c4:	2300      	movls	r3, #0
 80088c6:	bf86      	itte	hi
 80088c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80088cc:	608b      	strhi	r3, [r1, #8]
 80088ce:	9302      	strls	r3, [sp, #8]
 80088d0:	680b      	ldr	r3, [r1, #0]
 80088d2:	468b      	mov	fp, r1
 80088d4:	2500      	movs	r5, #0
 80088d6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80088da:	f84b 3b1c 	str.w	r3, [fp], #28
 80088de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80088e2:	4680      	mov	r8, r0
 80088e4:	460c      	mov	r4, r1
 80088e6:	465e      	mov	r6, fp
 80088e8:	46aa      	mov	sl, r5
 80088ea:	46a9      	mov	r9, r5
 80088ec:	9501      	str	r5, [sp, #4]
 80088ee:	68a2      	ldr	r2, [r4, #8]
 80088f0:	b152      	cbz	r2, 8008908 <_scanf_float+0x60>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	2b4e      	cmp	r3, #78	; 0x4e
 80088f8:	d864      	bhi.n	80089c4 <_scanf_float+0x11c>
 80088fa:	2b40      	cmp	r3, #64	; 0x40
 80088fc:	d83c      	bhi.n	8008978 <_scanf_float+0xd0>
 80088fe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008902:	b2c8      	uxtb	r0, r1
 8008904:	280e      	cmp	r0, #14
 8008906:	d93a      	bls.n	800897e <_scanf_float+0xd6>
 8008908:	f1b9 0f00 	cmp.w	r9, #0
 800890c:	d003      	beq.n	8008916 <_scanf_float+0x6e>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	f10a 3aff 	add.w	sl, sl, #4294967295
 800891a:	f1ba 0f01 	cmp.w	sl, #1
 800891e:	f200 8113 	bhi.w	8008b48 <_scanf_float+0x2a0>
 8008922:	455e      	cmp	r6, fp
 8008924:	f200 8105 	bhi.w	8008b32 <_scanf_float+0x28a>
 8008928:	2501      	movs	r5, #1
 800892a:	4628      	mov	r0, r5
 800892c:	b007      	add	sp, #28
 800892e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008932:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008936:	2a0d      	cmp	r2, #13
 8008938:	d8e6      	bhi.n	8008908 <_scanf_float+0x60>
 800893a:	a101      	add	r1, pc, #4	; (adr r1, 8008940 <_scanf_float+0x98>)
 800893c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008940:	08008a7f 	.word	0x08008a7f
 8008944:	08008909 	.word	0x08008909
 8008948:	08008909 	.word	0x08008909
 800894c:	08008909 	.word	0x08008909
 8008950:	08008adf 	.word	0x08008adf
 8008954:	08008ab7 	.word	0x08008ab7
 8008958:	08008909 	.word	0x08008909
 800895c:	08008909 	.word	0x08008909
 8008960:	08008a8d 	.word	0x08008a8d
 8008964:	08008909 	.word	0x08008909
 8008968:	08008909 	.word	0x08008909
 800896c:	08008909 	.word	0x08008909
 8008970:	08008909 	.word	0x08008909
 8008974:	08008a45 	.word	0x08008a45
 8008978:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800897c:	e7db      	b.n	8008936 <_scanf_float+0x8e>
 800897e:	290e      	cmp	r1, #14
 8008980:	d8c2      	bhi.n	8008908 <_scanf_float+0x60>
 8008982:	a001      	add	r0, pc, #4	; (adr r0, 8008988 <_scanf_float+0xe0>)
 8008984:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008988:	08008a37 	.word	0x08008a37
 800898c:	08008909 	.word	0x08008909
 8008990:	08008a37 	.word	0x08008a37
 8008994:	08008acb 	.word	0x08008acb
 8008998:	08008909 	.word	0x08008909
 800899c:	080089e5 	.word	0x080089e5
 80089a0:	08008a21 	.word	0x08008a21
 80089a4:	08008a21 	.word	0x08008a21
 80089a8:	08008a21 	.word	0x08008a21
 80089ac:	08008a21 	.word	0x08008a21
 80089b0:	08008a21 	.word	0x08008a21
 80089b4:	08008a21 	.word	0x08008a21
 80089b8:	08008a21 	.word	0x08008a21
 80089bc:	08008a21 	.word	0x08008a21
 80089c0:	08008a21 	.word	0x08008a21
 80089c4:	2b6e      	cmp	r3, #110	; 0x6e
 80089c6:	d809      	bhi.n	80089dc <_scanf_float+0x134>
 80089c8:	2b60      	cmp	r3, #96	; 0x60
 80089ca:	d8b2      	bhi.n	8008932 <_scanf_float+0x8a>
 80089cc:	2b54      	cmp	r3, #84	; 0x54
 80089ce:	d077      	beq.n	8008ac0 <_scanf_float+0x218>
 80089d0:	2b59      	cmp	r3, #89	; 0x59
 80089d2:	d199      	bne.n	8008908 <_scanf_float+0x60>
 80089d4:	2d07      	cmp	r5, #7
 80089d6:	d197      	bne.n	8008908 <_scanf_float+0x60>
 80089d8:	2508      	movs	r5, #8
 80089da:	e029      	b.n	8008a30 <_scanf_float+0x188>
 80089dc:	2b74      	cmp	r3, #116	; 0x74
 80089de:	d06f      	beq.n	8008ac0 <_scanf_float+0x218>
 80089e0:	2b79      	cmp	r3, #121	; 0x79
 80089e2:	e7f6      	b.n	80089d2 <_scanf_float+0x12a>
 80089e4:	6821      	ldr	r1, [r4, #0]
 80089e6:	05c8      	lsls	r0, r1, #23
 80089e8:	d51a      	bpl.n	8008a20 <_scanf_float+0x178>
 80089ea:	9b02      	ldr	r3, [sp, #8]
 80089ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80089f0:	6021      	str	r1, [r4, #0]
 80089f2:	f109 0901 	add.w	r9, r9, #1
 80089f6:	b11b      	cbz	r3, 8008a00 <_scanf_float+0x158>
 80089f8:	3b01      	subs	r3, #1
 80089fa:	3201      	adds	r2, #1
 80089fc:	9302      	str	r3, [sp, #8]
 80089fe:	60a2      	str	r2, [r4, #8]
 8008a00:	68a3      	ldr	r3, [r4, #8]
 8008a02:	3b01      	subs	r3, #1
 8008a04:	60a3      	str	r3, [r4, #8]
 8008a06:	6923      	ldr	r3, [r4, #16]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	6123      	str	r3, [r4, #16]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	607b      	str	r3, [r7, #4]
 8008a14:	f340 8084 	ble.w	8008b20 <_scanf_float+0x278>
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	603b      	str	r3, [r7, #0]
 8008a1e:	e766      	b.n	80088ee <_scanf_float+0x46>
 8008a20:	eb1a 0f05 	cmn.w	sl, r5
 8008a24:	f47f af70 	bne.w	8008908 <_scanf_float+0x60>
 8008a28:	6822      	ldr	r2, [r4, #0]
 8008a2a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008a2e:	6022      	str	r2, [r4, #0]
 8008a30:	f806 3b01 	strb.w	r3, [r6], #1
 8008a34:	e7e4      	b.n	8008a00 <_scanf_float+0x158>
 8008a36:	6822      	ldr	r2, [r4, #0]
 8008a38:	0610      	lsls	r0, r2, #24
 8008a3a:	f57f af65 	bpl.w	8008908 <_scanf_float+0x60>
 8008a3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a42:	e7f4      	b.n	8008a2e <_scanf_float+0x186>
 8008a44:	f1ba 0f00 	cmp.w	sl, #0
 8008a48:	d10e      	bne.n	8008a68 <_scanf_float+0x1c0>
 8008a4a:	f1b9 0f00 	cmp.w	r9, #0
 8008a4e:	d10e      	bne.n	8008a6e <_scanf_float+0x1c6>
 8008a50:	6822      	ldr	r2, [r4, #0]
 8008a52:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a56:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a5a:	d108      	bne.n	8008a6e <_scanf_float+0x1c6>
 8008a5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a60:	6022      	str	r2, [r4, #0]
 8008a62:	f04f 0a01 	mov.w	sl, #1
 8008a66:	e7e3      	b.n	8008a30 <_scanf_float+0x188>
 8008a68:	f1ba 0f02 	cmp.w	sl, #2
 8008a6c:	d055      	beq.n	8008b1a <_scanf_float+0x272>
 8008a6e:	2d01      	cmp	r5, #1
 8008a70:	d002      	beq.n	8008a78 <_scanf_float+0x1d0>
 8008a72:	2d04      	cmp	r5, #4
 8008a74:	f47f af48 	bne.w	8008908 <_scanf_float+0x60>
 8008a78:	3501      	adds	r5, #1
 8008a7a:	b2ed      	uxtb	r5, r5
 8008a7c:	e7d8      	b.n	8008a30 <_scanf_float+0x188>
 8008a7e:	f1ba 0f01 	cmp.w	sl, #1
 8008a82:	f47f af41 	bne.w	8008908 <_scanf_float+0x60>
 8008a86:	f04f 0a02 	mov.w	sl, #2
 8008a8a:	e7d1      	b.n	8008a30 <_scanf_float+0x188>
 8008a8c:	b97d      	cbnz	r5, 8008aae <_scanf_float+0x206>
 8008a8e:	f1b9 0f00 	cmp.w	r9, #0
 8008a92:	f47f af3c 	bne.w	800890e <_scanf_float+0x66>
 8008a96:	6822      	ldr	r2, [r4, #0]
 8008a98:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a9c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008aa0:	f47f af39 	bne.w	8008916 <_scanf_float+0x6e>
 8008aa4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008aa8:	6022      	str	r2, [r4, #0]
 8008aaa:	2501      	movs	r5, #1
 8008aac:	e7c0      	b.n	8008a30 <_scanf_float+0x188>
 8008aae:	2d03      	cmp	r5, #3
 8008ab0:	d0e2      	beq.n	8008a78 <_scanf_float+0x1d0>
 8008ab2:	2d05      	cmp	r5, #5
 8008ab4:	e7de      	b.n	8008a74 <_scanf_float+0x1cc>
 8008ab6:	2d02      	cmp	r5, #2
 8008ab8:	f47f af26 	bne.w	8008908 <_scanf_float+0x60>
 8008abc:	2503      	movs	r5, #3
 8008abe:	e7b7      	b.n	8008a30 <_scanf_float+0x188>
 8008ac0:	2d06      	cmp	r5, #6
 8008ac2:	f47f af21 	bne.w	8008908 <_scanf_float+0x60>
 8008ac6:	2507      	movs	r5, #7
 8008ac8:	e7b2      	b.n	8008a30 <_scanf_float+0x188>
 8008aca:	6822      	ldr	r2, [r4, #0]
 8008acc:	0591      	lsls	r1, r2, #22
 8008ace:	f57f af1b 	bpl.w	8008908 <_scanf_float+0x60>
 8008ad2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008ad6:	6022      	str	r2, [r4, #0]
 8008ad8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008adc:	e7a8      	b.n	8008a30 <_scanf_float+0x188>
 8008ade:	6822      	ldr	r2, [r4, #0]
 8008ae0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008ae4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008ae8:	d006      	beq.n	8008af8 <_scanf_float+0x250>
 8008aea:	0550      	lsls	r0, r2, #21
 8008aec:	f57f af0c 	bpl.w	8008908 <_scanf_float+0x60>
 8008af0:	f1b9 0f00 	cmp.w	r9, #0
 8008af4:	f43f af0f 	beq.w	8008916 <_scanf_float+0x6e>
 8008af8:	0591      	lsls	r1, r2, #22
 8008afa:	bf58      	it	pl
 8008afc:	9901      	ldrpl	r1, [sp, #4]
 8008afe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b02:	bf58      	it	pl
 8008b04:	eba9 0101 	subpl.w	r1, r9, r1
 8008b08:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008b0c:	bf58      	it	pl
 8008b0e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008b12:	6022      	str	r2, [r4, #0]
 8008b14:	f04f 0900 	mov.w	r9, #0
 8008b18:	e78a      	b.n	8008a30 <_scanf_float+0x188>
 8008b1a:	f04f 0a03 	mov.w	sl, #3
 8008b1e:	e787      	b.n	8008a30 <_scanf_float+0x188>
 8008b20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b24:	4639      	mov	r1, r7
 8008b26:	4640      	mov	r0, r8
 8008b28:	4798      	blx	r3
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	f43f aedf 	beq.w	80088ee <_scanf_float+0x46>
 8008b30:	e6ea      	b.n	8008908 <_scanf_float+0x60>
 8008b32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b3a:	463a      	mov	r2, r7
 8008b3c:	4640      	mov	r0, r8
 8008b3e:	4798      	blx	r3
 8008b40:	6923      	ldr	r3, [r4, #16]
 8008b42:	3b01      	subs	r3, #1
 8008b44:	6123      	str	r3, [r4, #16]
 8008b46:	e6ec      	b.n	8008922 <_scanf_float+0x7a>
 8008b48:	1e6b      	subs	r3, r5, #1
 8008b4a:	2b06      	cmp	r3, #6
 8008b4c:	d825      	bhi.n	8008b9a <_scanf_float+0x2f2>
 8008b4e:	2d02      	cmp	r5, #2
 8008b50:	d836      	bhi.n	8008bc0 <_scanf_float+0x318>
 8008b52:	455e      	cmp	r6, fp
 8008b54:	f67f aee8 	bls.w	8008928 <_scanf_float+0x80>
 8008b58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b5c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b60:	463a      	mov	r2, r7
 8008b62:	4640      	mov	r0, r8
 8008b64:	4798      	blx	r3
 8008b66:	6923      	ldr	r3, [r4, #16]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	6123      	str	r3, [r4, #16]
 8008b6c:	e7f1      	b.n	8008b52 <_scanf_float+0x2aa>
 8008b6e:	9802      	ldr	r0, [sp, #8]
 8008b70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b74:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008b78:	9002      	str	r0, [sp, #8]
 8008b7a:	463a      	mov	r2, r7
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	4798      	blx	r3
 8008b80:	6923      	ldr	r3, [r4, #16]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	6123      	str	r3, [r4, #16]
 8008b86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b8a:	fa5f fa8a 	uxtb.w	sl, sl
 8008b8e:	f1ba 0f02 	cmp.w	sl, #2
 8008b92:	d1ec      	bne.n	8008b6e <_scanf_float+0x2c6>
 8008b94:	3d03      	subs	r5, #3
 8008b96:	b2ed      	uxtb	r5, r5
 8008b98:	1b76      	subs	r6, r6, r5
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	05da      	lsls	r2, r3, #23
 8008b9e:	d52f      	bpl.n	8008c00 <_scanf_float+0x358>
 8008ba0:	055b      	lsls	r3, r3, #21
 8008ba2:	d510      	bpl.n	8008bc6 <_scanf_float+0x31e>
 8008ba4:	455e      	cmp	r6, fp
 8008ba6:	f67f aebf 	bls.w	8008928 <_scanf_float+0x80>
 8008baa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008bb2:	463a      	mov	r2, r7
 8008bb4:	4640      	mov	r0, r8
 8008bb6:	4798      	blx	r3
 8008bb8:	6923      	ldr	r3, [r4, #16]
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	6123      	str	r3, [r4, #16]
 8008bbe:	e7f1      	b.n	8008ba4 <_scanf_float+0x2fc>
 8008bc0:	46aa      	mov	sl, r5
 8008bc2:	9602      	str	r6, [sp, #8]
 8008bc4:	e7df      	b.n	8008b86 <_scanf_float+0x2de>
 8008bc6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008bca:	6923      	ldr	r3, [r4, #16]
 8008bcc:	2965      	cmp	r1, #101	; 0x65
 8008bce:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bd2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008bd6:	6123      	str	r3, [r4, #16]
 8008bd8:	d00c      	beq.n	8008bf4 <_scanf_float+0x34c>
 8008bda:	2945      	cmp	r1, #69	; 0x45
 8008bdc:	d00a      	beq.n	8008bf4 <_scanf_float+0x34c>
 8008bde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008be2:	463a      	mov	r2, r7
 8008be4:	4640      	mov	r0, r8
 8008be6:	4798      	blx	r3
 8008be8:	6923      	ldr	r3, [r4, #16]
 8008bea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	1eb5      	subs	r5, r6, #2
 8008bf2:	6123      	str	r3, [r4, #16]
 8008bf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bf8:	463a      	mov	r2, r7
 8008bfa:	4640      	mov	r0, r8
 8008bfc:	4798      	blx	r3
 8008bfe:	462e      	mov	r6, r5
 8008c00:	6825      	ldr	r5, [r4, #0]
 8008c02:	f015 0510 	ands.w	r5, r5, #16
 8008c06:	d159      	bne.n	8008cbc <_scanf_float+0x414>
 8008c08:	7035      	strb	r5, [r6, #0]
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c14:	d11b      	bne.n	8008c4e <_scanf_float+0x3a6>
 8008c16:	9b01      	ldr	r3, [sp, #4]
 8008c18:	454b      	cmp	r3, r9
 8008c1a:	eba3 0209 	sub.w	r2, r3, r9
 8008c1e:	d123      	bne.n	8008c68 <_scanf_float+0x3c0>
 8008c20:	2200      	movs	r2, #0
 8008c22:	4659      	mov	r1, fp
 8008c24:	4640      	mov	r0, r8
 8008c26:	f000 fe99 	bl	800995c <_strtod_r>
 8008c2a:	6822      	ldr	r2, [r4, #0]
 8008c2c:	9b03      	ldr	r3, [sp, #12]
 8008c2e:	f012 0f02 	tst.w	r2, #2
 8008c32:	ec57 6b10 	vmov	r6, r7, d0
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	d021      	beq.n	8008c7e <_scanf_float+0x3d6>
 8008c3a:	9903      	ldr	r1, [sp, #12]
 8008c3c:	1d1a      	adds	r2, r3, #4
 8008c3e:	600a      	str	r2, [r1, #0]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	e9c3 6700 	strd	r6, r7, [r3]
 8008c46:	68e3      	ldr	r3, [r4, #12]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	60e3      	str	r3, [r4, #12]
 8008c4c:	e66d      	b.n	800892a <_scanf_float+0x82>
 8008c4e:	9b04      	ldr	r3, [sp, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0e5      	beq.n	8008c20 <_scanf_float+0x378>
 8008c54:	9905      	ldr	r1, [sp, #20]
 8008c56:	230a      	movs	r3, #10
 8008c58:	462a      	mov	r2, r5
 8008c5a:	3101      	adds	r1, #1
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	f000 ff05 	bl	8009a6c <_strtol_r>
 8008c62:	9b04      	ldr	r3, [sp, #16]
 8008c64:	9e05      	ldr	r6, [sp, #20]
 8008c66:	1ac2      	subs	r2, r0, r3
 8008c68:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008c6c:	429e      	cmp	r6, r3
 8008c6e:	bf28      	it	cs
 8008c70:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008c74:	4912      	ldr	r1, [pc, #72]	; (8008cc0 <_scanf_float+0x418>)
 8008c76:	4630      	mov	r0, r6
 8008c78:	f000 f82c 	bl	8008cd4 <siprintf>
 8008c7c:	e7d0      	b.n	8008c20 <_scanf_float+0x378>
 8008c7e:	9903      	ldr	r1, [sp, #12]
 8008c80:	f012 0f04 	tst.w	r2, #4
 8008c84:	f103 0204 	add.w	r2, r3, #4
 8008c88:	600a      	str	r2, [r1, #0]
 8008c8a:	d1d9      	bne.n	8008c40 <_scanf_float+0x398>
 8008c8c:	f8d3 8000 	ldr.w	r8, [r3]
 8008c90:	ee10 2a10 	vmov	r2, s0
 8008c94:	ee10 0a10 	vmov	r0, s0
 8008c98:	463b      	mov	r3, r7
 8008c9a:	4639      	mov	r1, r7
 8008c9c:	f7f7 ff5e 	bl	8000b5c <__aeabi_dcmpun>
 8008ca0:	b128      	cbz	r0, 8008cae <_scanf_float+0x406>
 8008ca2:	4808      	ldr	r0, [pc, #32]	; (8008cc4 <_scanf_float+0x41c>)
 8008ca4:	f000 f810 	bl	8008cc8 <nanf>
 8008ca8:	ed88 0a00 	vstr	s0, [r8]
 8008cac:	e7cb      	b.n	8008c46 <_scanf_float+0x39e>
 8008cae:	4630      	mov	r0, r6
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	f7f7 ffb1 	bl	8000c18 <__aeabi_d2f>
 8008cb6:	f8c8 0000 	str.w	r0, [r8]
 8008cba:	e7c4      	b.n	8008c46 <_scanf_float+0x39e>
 8008cbc:	2500      	movs	r5, #0
 8008cbe:	e634      	b.n	800892a <_scanf_float+0x82>
 8008cc0:	0800ed0c 	.word	0x0800ed0c
 8008cc4:	0800f118 	.word	0x0800f118

08008cc8 <nanf>:
 8008cc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008cd0 <nanf+0x8>
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	7fc00000 	.word	0x7fc00000

08008cd4 <siprintf>:
 8008cd4:	b40e      	push	{r1, r2, r3}
 8008cd6:	b500      	push	{lr}
 8008cd8:	b09c      	sub	sp, #112	; 0x70
 8008cda:	ab1d      	add	r3, sp, #116	; 0x74
 8008cdc:	9002      	str	r0, [sp, #8]
 8008cde:	9006      	str	r0, [sp, #24]
 8008ce0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ce4:	4809      	ldr	r0, [pc, #36]	; (8008d0c <siprintf+0x38>)
 8008ce6:	9107      	str	r1, [sp, #28]
 8008ce8:	9104      	str	r1, [sp, #16]
 8008cea:	4909      	ldr	r1, [pc, #36]	; (8008d10 <siprintf+0x3c>)
 8008cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf0:	9105      	str	r1, [sp, #20]
 8008cf2:	6800      	ldr	r0, [r0, #0]
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	a902      	add	r1, sp, #8
 8008cf8:	f002 fee4 	bl	800bac4 <_svfiprintf_r>
 8008cfc:	9b02      	ldr	r3, [sp, #8]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	b01c      	add	sp, #112	; 0x70
 8008d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d08:	b003      	add	sp, #12
 8008d0a:	4770      	bx	lr
 8008d0c:	2000001c 	.word	0x2000001c
 8008d10:	ffff0208 	.word	0xffff0208

08008d14 <sulp>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	4604      	mov	r4, r0
 8008d18:	460d      	mov	r5, r1
 8008d1a:	ec45 4b10 	vmov	d0, r4, r5
 8008d1e:	4616      	mov	r6, r2
 8008d20:	f002 fc2e 	bl	800b580 <__ulp>
 8008d24:	ec51 0b10 	vmov	r0, r1, d0
 8008d28:	b17e      	cbz	r6, 8008d4a <sulp+0x36>
 8008d2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008d2e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	dd09      	ble.n	8008d4a <sulp+0x36>
 8008d36:	051b      	lsls	r3, r3, #20
 8008d38:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008d3c:	2400      	movs	r4, #0
 8008d3e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008d42:	4622      	mov	r2, r4
 8008d44:	462b      	mov	r3, r5
 8008d46:	f7f7 fc6f 	bl	8000628 <__aeabi_dmul>
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}
 8008d4c:	0000      	movs	r0, r0
	...

08008d50 <_strtod_l>:
 8008d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d54:	ed2d 8b02 	vpush	{d8}
 8008d58:	b09d      	sub	sp, #116	; 0x74
 8008d5a:	461f      	mov	r7, r3
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	9318      	str	r3, [sp, #96]	; 0x60
 8008d60:	4ba2      	ldr	r3, [pc, #648]	; (8008fec <_strtod_l+0x29c>)
 8008d62:	9213      	str	r2, [sp, #76]	; 0x4c
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	9305      	str	r3, [sp, #20]
 8008d68:	4604      	mov	r4, r0
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	4688      	mov	r8, r1
 8008d6e:	f7f7 fa41 	bl	80001f4 <strlen>
 8008d72:	f04f 0a00 	mov.w	sl, #0
 8008d76:	4605      	mov	r5, r0
 8008d78:	f04f 0b00 	mov.w	fp, #0
 8008d7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008d80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d82:	781a      	ldrb	r2, [r3, #0]
 8008d84:	2a2b      	cmp	r2, #43	; 0x2b
 8008d86:	d04e      	beq.n	8008e26 <_strtod_l+0xd6>
 8008d88:	d83b      	bhi.n	8008e02 <_strtod_l+0xb2>
 8008d8a:	2a0d      	cmp	r2, #13
 8008d8c:	d834      	bhi.n	8008df8 <_strtod_l+0xa8>
 8008d8e:	2a08      	cmp	r2, #8
 8008d90:	d834      	bhi.n	8008dfc <_strtod_l+0xac>
 8008d92:	2a00      	cmp	r2, #0
 8008d94:	d03e      	beq.n	8008e14 <_strtod_l+0xc4>
 8008d96:	2300      	movs	r3, #0
 8008d98:	930a      	str	r3, [sp, #40]	; 0x28
 8008d9a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008d9c:	7833      	ldrb	r3, [r6, #0]
 8008d9e:	2b30      	cmp	r3, #48	; 0x30
 8008da0:	f040 80b0 	bne.w	8008f04 <_strtod_l+0x1b4>
 8008da4:	7873      	ldrb	r3, [r6, #1]
 8008da6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008daa:	2b58      	cmp	r3, #88	; 0x58
 8008dac:	d168      	bne.n	8008e80 <_strtod_l+0x130>
 8008dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	ab18      	add	r3, sp, #96	; 0x60
 8008db4:	9702      	str	r7, [sp, #8]
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	4a8d      	ldr	r2, [pc, #564]	; (8008ff0 <_strtod_l+0x2a0>)
 8008dba:	ab19      	add	r3, sp, #100	; 0x64
 8008dbc:	a917      	add	r1, sp, #92	; 0x5c
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f001 fd38 	bl	800a834 <__gethex>
 8008dc4:	f010 0707 	ands.w	r7, r0, #7
 8008dc8:	4605      	mov	r5, r0
 8008dca:	d005      	beq.n	8008dd8 <_strtod_l+0x88>
 8008dcc:	2f06      	cmp	r7, #6
 8008dce:	d12c      	bne.n	8008e2a <_strtod_l+0xda>
 8008dd0:	3601      	adds	r6, #1
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	9617      	str	r6, [sp, #92]	; 0x5c
 8008dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8008dd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f040 8590 	bne.w	8009900 <_strtod_l+0xbb0>
 8008de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de2:	b1eb      	cbz	r3, 8008e20 <_strtod_l+0xd0>
 8008de4:	4652      	mov	r2, sl
 8008de6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008dea:	ec43 2b10 	vmov	d0, r2, r3
 8008dee:	b01d      	add	sp, #116	; 0x74
 8008df0:	ecbd 8b02 	vpop	{d8}
 8008df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df8:	2a20      	cmp	r2, #32
 8008dfa:	d1cc      	bne.n	8008d96 <_strtod_l+0x46>
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e00:	e7be      	b.n	8008d80 <_strtod_l+0x30>
 8008e02:	2a2d      	cmp	r2, #45	; 0x2d
 8008e04:	d1c7      	bne.n	8008d96 <_strtod_l+0x46>
 8008e06:	2201      	movs	r2, #1
 8008e08:	920a      	str	r2, [sp, #40]	; 0x28
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e0e:	785b      	ldrb	r3, [r3, #1]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1c2      	bne.n	8008d9a <_strtod_l+0x4a>
 8008e14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e16:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f040 856e 	bne.w	80098fc <_strtod_l+0xbac>
 8008e20:	4652      	mov	r2, sl
 8008e22:	465b      	mov	r3, fp
 8008e24:	e7e1      	b.n	8008dea <_strtod_l+0x9a>
 8008e26:	2200      	movs	r2, #0
 8008e28:	e7ee      	b.n	8008e08 <_strtod_l+0xb8>
 8008e2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008e2c:	b13a      	cbz	r2, 8008e3e <_strtod_l+0xee>
 8008e2e:	2135      	movs	r1, #53	; 0x35
 8008e30:	a81a      	add	r0, sp, #104	; 0x68
 8008e32:	f002 fcb0 	bl	800b796 <__copybits>
 8008e36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f002 f86f 	bl	800af1c <_Bfree>
 8008e3e:	3f01      	subs	r7, #1
 8008e40:	2f04      	cmp	r7, #4
 8008e42:	d806      	bhi.n	8008e52 <_strtod_l+0x102>
 8008e44:	e8df f007 	tbb	[pc, r7]
 8008e48:	1714030a 	.word	0x1714030a
 8008e4c:	0a          	.byte	0x0a
 8008e4d:	00          	.byte	0x00
 8008e4e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008e52:	0728      	lsls	r0, r5, #28
 8008e54:	d5c0      	bpl.n	8008dd8 <_strtod_l+0x88>
 8008e56:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008e5a:	e7bd      	b.n	8008dd8 <_strtod_l+0x88>
 8008e5c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008e60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008e66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008e6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008e6e:	e7f0      	b.n	8008e52 <_strtod_l+0x102>
 8008e70:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008ff4 <_strtod_l+0x2a4>
 8008e74:	e7ed      	b.n	8008e52 <_strtod_l+0x102>
 8008e76:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008e7a:	f04f 3aff 	mov.w	sl, #4294967295
 8008e7e:	e7e8      	b.n	8008e52 <_strtod_l+0x102>
 8008e80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e82:	1c5a      	adds	r2, r3, #1
 8008e84:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e86:	785b      	ldrb	r3, [r3, #1]
 8008e88:	2b30      	cmp	r3, #48	; 0x30
 8008e8a:	d0f9      	beq.n	8008e80 <_strtod_l+0x130>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0a3      	beq.n	8008dd8 <_strtod_l+0x88>
 8008e90:	2301      	movs	r3, #1
 8008e92:	f04f 0900 	mov.w	r9, #0
 8008e96:	9304      	str	r3, [sp, #16]
 8008e98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e9a:	9308      	str	r3, [sp, #32]
 8008e9c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008ea0:	464f      	mov	r7, r9
 8008ea2:	220a      	movs	r2, #10
 8008ea4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008ea6:	7806      	ldrb	r6, [r0, #0]
 8008ea8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008eac:	b2d9      	uxtb	r1, r3
 8008eae:	2909      	cmp	r1, #9
 8008eb0:	d92a      	bls.n	8008f08 <_strtod_l+0x1b8>
 8008eb2:	9905      	ldr	r1, [sp, #20]
 8008eb4:	462a      	mov	r2, r5
 8008eb6:	f002 ff1f 	bl	800bcf8 <strncmp>
 8008eba:	b398      	cbz	r0, 8008f24 <_strtod_l+0x1d4>
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	4632      	mov	r2, r6
 8008ec0:	463d      	mov	r5, r7
 8008ec2:	9005      	str	r0, [sp, #20]
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2a65      	cmp	r2, #101	; 0x65
 8008ec8:	d001      	beq.n	8008ece <_strtod_l+0x17e>
 8008eca:	2a45      	cmp	r2, #69	; 0x45
 8008ecc:	d118      	bne.n	8008f00 <_strtod_l+0x1b0>
 8008ece:	b91d      	cbnz	r5, 8008ed8 <_strtod_l+0x188>
 8008ed0:	9a04      	ldr	r2, [sp, #16]
 8008ed2:	4302      	orrs	r2, r0
 8008ed4:	d09e      	beq.n	8008e14 <_strtod_l+0xc4>
 8008ed6:	2500      	movs	r5, #0
 8008ed8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008edc:	f108 0201 	add.w	r2, r8, #1
 8008ee0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ee2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008ee6:	2a2b      	cmp	r2, #43	; 0x2b
 8008ee8:	d075      	beq.n	8008fd6 <_strtod_l+0x286>
 8008eea:	2a2d      	cmp	r2, #45	; 0x2d
 8008eec:	d07b      	beq.n	8008fe6 <_strtod_l+0x296>
 8008eee:	f04f 0c00 	mov.w	ip, #0
 8008ef2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008ef6:	2909      	cmp	r1, #9
 8008ef8:	f240 8082 	bls.w	8009000 <_strtod_l+0x2b0>
 8008efc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008f00:	2600      	movs	r6, #0
 8008f02:	e09d      	b.n	8009040 <_strtod_l+0x2f0>
 8008f04:	2300      	movs	r3, #0
 8008f06:	e7c4      	b.n	8008e92 <_strtod_l+0x142>
 8008f08:	2f08      	cmp	r7, #8
 8008f0a:	bfd8      	it	le
 8008f0c:	9907      	ldrle	r1, [sp, #28]
 8008f0e:	f100 0001 	add.w	r0, r0, #1
 8008f12:	bfda      	itte	le
 8008f14:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f18:	9307      	strle	r3, [sp, #28]
 8008f1a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008f1e:	3701      	adds	r7, #1
 8008f20:	9017      	str	r0, [sp, #92]	; 0x5c
 8008f22:	e7bf      	b.n	8008ea4 <_strtod_l+0x154>
 8008f24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f26:	195a      	adds	r2, r3, r5
 8008f28:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f2a:	5d5a      	ldrb	r2, [r3, r5]
 8008f2c:	2f00      	cmp	r7, #0
 8008f2e:	d037      	beq.n	8008fa0 <_strtod_l+0x250>
 8008f30:	9005      	str	r0, [sp, #20]
 8008f32:	463d      	mov	r5, r7
 8008f34:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008f38:	2b09      	cmp	r3, #9
 8008f3a:	d912      	bls.n	8008f62 <_strtod_l+0x212>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e7c2      	b.n	8008ec6 <_strtod_l+0x176>
 8008f40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f46:	785a      	ldrb	r2, [r3, #1]
 8008f48:	3001      	adds	r0, #1
 8008f4a:	2a30      	cmp	r2, #48	; 0x30
 8008f4c:	d0f8      	beq.n	8008f40 <_strtod_l+0x1f0>
 8008f4e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008f52:	2b08      	cmp	r3, #8
 8008f54:	f200 84d9 	bhi.w	800990a <_strtod_l+0xbba>
 8008f58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f5a:	9005      	str	r0, [sp, #20]
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	9308      	str	r3, [sp, #32]
 8008f60:	4605      	mov	r5, r0
 8008f62:	3a30      	subs	r2, #48	; 0x30
 8008f64:	f100 0301 	add.w	r3, r0, #1
 8008f68:	d014      	beq.n	8008f94 <_strtod_l+0x244>
 8008f6a:	9905      	ldr	r1, [sp, #20]
 8008f6c:	4419      	add	r1, r3
 8008f6e:	9105      	str	r1, [sp, #20]
 8008f70:	462b      	mov	r3, r5
 8008f72:	eb00 0e05 	add.w	lr, r0, r5
 8008f76:	210a      	movs	r1, #10
 8008f78:	4573      	cmp	r3, lr
 8008f7a:	d113      	bne.n	8008fa4 <_strtod_l+0x254>
 8008f7c:	182b      	adds	r3, r5, r0
 8008f7e:	2b08      	cmp	r3, #8
 8008f80:	f105 0501 	add.w	r5, r5, #1
 8008f84:	4405      	add	r5, r0
 8008f86:	dc1c      	bgt.n	8008fc2 <_strtod_l+0x272>
 8008f88:	9907      	ldr	r1, [sp, #28]
 8008f8a:	230a      	movs	r3, #10
 8008f8c:	fb03 2301 	mla	r3, r3, r1, r2
 8008f90:	9307      	str	r3, [sp, #28]
 8008f92:	2300      	movs	r3, #0
 8008f94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f96:	1c51      	adds	r1, r2, #1
 8008f98:	9117      	str	r1, [sp, #92]	; 0x5c
 8008f9a:	7852      	ldrb	r2, [r2, #1]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	e7c9      	b.n	8008f34 <_strtod_l+0x1e4>
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	e7d2      	b.n	8008f4a <_strtod_l+0x1fa>
 8008fa4:	2b08      	cmp	r3, #8
 8008fa6:	dc04      	bgt.n	8008fb2 <_strtod_l+0x262>
 8008fa8:	9e07      	ldr	r6, [sp, #28]
 8008faa:	434e      	muls	r6, r1
 8008fac:	9607      	str	r6, [sp, #28]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	e7e2      	b.n	8008f78 <_strtod_l+0x228>
 8008fb2:	f103 0c01 	add.w	ip, r3, #1
 8008fb6:	f1bc 0f10 	cmp.w	ip, #16
 8008fba:	bfd8      	it	le
 8008fbc:	fb01 f909 	mulle.w	r9, r1, r9
 8008fc0:	e7f5      	b.n	8008fae <_strtod_l+0x25e>
 8008fc2:	2d10      	cmp	r5, #16
 8008fc4:	bfdc      	itt	le
 8008fc6:	230a      	movle	r3, #10
 8008fc8:	fb03 2909 	mlale	r9, r3, r9, r2
 8008fcc:	e7e1      	b.n	8008f92 <_strtod_l+0x242>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9305      	str	r3, [sp, #20]
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e77c      	b.n	8008ed0 <_strtod_l+0x180>
 8008fd6:	f04f 0c00 	mov.w	ip, #0
 8008fda:	f108 0202 	add.w	r2, r8, #2
 8008fde:	9217      	str	r2, [sp, #92]	; 0x5c
 8008fe0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008fe4:	e785      	b.n	8008ef2 <_strtod_l+0x1a2>
 8008fe6:	f04f 0c01 	mov.w	ip, #1
 8008fea:	e7f6      	b.n	8008fda <_strtod_l+0x28a>
 8008fec:	0800ef60 	.word	0x0800ef60
 8008ff0:	0800ed14 	.word	0x0800ed14
 8008ff4:	7ff00000 	.word	0x7ff00000
 8008ff8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ffa:	1c51      	adds	r1, r2, #1
 8008ffc:	9117      	str	r1, [sp, #92]	; 0x5c
 8008ffe:	7852      	ldrb	r2, [r2, #1]
 8009000:	2a30      	cmp	r2, #48	; 0x30
 8009002:	d0f9      	beq.n	8008ff8 <_strtod_l+0x2a8>
 8009004:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009008:	2908      	cmp	r1, #8
 800900a:	f63f af79 	bhi.w	8008f00 <_strtod_l+0x1b0>
 800900e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009012:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009014:	9206      	str	r2, [sp, #24]
 8009016:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009018:	1c51      	adds	r1, r2, #1
 800901a:	9117      	str	r1, [sp, #92]	; 0x5c
 800901c:	7852      	ldrb	r2, [r2, #1]
 800901e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009022:	2e09      	cmp	r6, #9
 8009024:	d937      	bls.n	8009096 <_strtod_l+0x346>
 8009026:	9e06      	ldr	r6, [sp, #24]
 8009028:	1b89      	subs	r1, r1, r6
 800902a:	2908      	cmp	r1, #8
 800902c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009030:	dc02      	bgt.n	8009038 <_strtod_l+0x2e8>
 8009032:	4576      	cmp	r6, lr
 8009034:	bfa8      	it	ge
 8009036:	4676      	movge	r6, lr
 8009038:	f1bc 0f00 	cmp.w	ip, #0
 800903c:	d000      	beq.n	8009040 <_strtod_l+0x2f0>
 800903e:	4276      	negs	r6, r6
 8009040:	2d00      	cmp	r5, #0
 8009042:	d14d      	bne.n	80090e0 <_strtod_l+0x390>
 8009044:	9904      	ldr	r1, [sp, #16]
 8009046:	4301      	orrs	r1, r0
 8009048:	f47f aec6 	bne.w	8008dd8 <_strtod_l+0x88>
 800904c:	2b00      	cmp	r3, #0
 800904e:	f47f aee1 	bne.w	8008e14 <_strtod_l+0xc4>
 8009052:	2a69      	cmp	r2, #105	; 0x69
 8009054:	d027      	beq.n	80090a6 <_strtod_l+0x356>
 8009056:	dc24      	bgt.n	80090a2 <_strtod_l+0x352>
 8009058:	2a49      	cmp	r2, #73	; 0x49
 800905a:	d024      	beq.n	80090a6 <_strtod_l+0x356>
 800905c:	2a4e      	cmp	r2, #78	; 0x4e
 800905e:	f47f aed9 	bne.w	8008e14 <_strtod_l+0xc4>
 8009062:	499f      	ldr	r1, [pc, #636]	; (80092e0 <_strtod_l+0x590>)
 8009064:	a817      	add	r0, sp, #92	; 0x5c
 8009066:	f001 fe3d 	bl	800ace4 <__match>
 800906a:	2800      	cmp	r0, #0
 800906c:	f43f aed2 	beq.w	8008e14 <_strtod_l+0xc4>
 8009070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	2b28      	cmp	r3, #40	; 0x28
 8009076:	d12d      	bne.n	80090d4 <_strtod_l+0x384>
 8009078:	499a      	ldr	r1, [pc, #616]	; (80092e4 <_strtod_l+0x594>)
 800907a:	aa1a      	add	r2, sp, #104	; 0x68
 800907c:	a817      	add	r0, sp, #92	; 0x5c
 800907e:	f001 fe45 	bl	800ad0c <__hexnan>
 8009082:	2805      	cmp	r0, #5
 8009084:	d126      	bne.n	80090d4 <_strtod_l+0x384>
 8009086:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009088:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800908c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009090:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009094:	e6a0      	b.n	8008dd8 <_strtod_l+0x88>
 8009096:	210a      	movs	r1, #10
 8009098:	fb01 2e0e 	mla	lr, r1, lr, r2
 800909c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80090a0:	e7b9      	b.n	8009016 <_strtod_l+0x2c6>
 80090a2:	2a6e      	cmp	r2, #110	; 0x6e
 80090a4:	e7db      	b.n	800905e <_strtod_l+0x30e>
 80090a6:	4990      	ldr	r1, [pc, #576]	; (80092e8 <_strtod_l+0x598>)
 80090a8:	a817      	add	r0, sp, #92	; 0x5c
 80090aa:	f001 fe1b 	bl	800ace4 <__match>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f43f aeb0 	beq.w	8008e14 <_strtod_l+0xc4>
 80090b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090b6:	498d      	ldr	r1, [pc, #564]	; (80092ec <_strtod_l+0x59c>)
 80090b8:	3b01      	subs	r3, #1
 80090ba:	a817      	add	r0, sp, #92	; 0x5c
 80090bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80090be:	f001 fe11 	bl	800ace4 <__match>
 80090c2:	b910      	cbnz	r0, 80090ca <_strtod_l+0x37a>
 80090c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090c6:	3301      	adds	r3, #1
 80090c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80090ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 80092fc <_strtod_l+0x5ac>
 80090ce:	f04f 0a00 	mov.w	sl, #0
 80090d2:	e681      	b.n	8008dd8 <_strtod_l+0x88>
 80090d4:	4886      	ldr	r0, [pc, #536]	; (80092f0 <_strtod_l+0x5a0>)
 80090d6:	f002 fdf7 	bl	800bcc8 <nan>
 80090da:	ec5b ab10 	vmov	sl, fp, d0
 80090de:	e67b      	b.n	8008dd8 <_strtod_l+0x88>
 80090e0:	9b05      	ldr	r3, [sp, #20]
 80090e2:	9807      	ldr	r0, [sp, #28]
 80090e4:	1af3      	subs	r3, r6, r3
 80090e6:	2f00      	cmp	r7, #0
 80090e8:	bf08      	it	eq
 80090ea:	462f      	moveq	r7, r5
 80090ec:	2d10      	cmp	r5, #16
 80090ee:	9306      	str	r3, [sp, #24]
 80090f0:	46a8      	mov	r8, r5
 80090f2:	bfa8      	it	ge
 80090f4:	f04f 0810 	movge.w	r8, #16
 80090f8:	f7f7 fa1c 	bl	8000534 <__aeabi_ui2d>
 80090fc:	2d09      	cmp	r5, #9
 80090fe:	4682      	mov	sl, r0
 8009100:	468b      	mov	fp, r1
 8009102:	dd13      	ble.n	800912c <_strtod_l+0x3dc>
 8009104:	4b7b      	ldr	r3, [pc, #492]	; (80092f4 <_strtod_l+0x5a4>)
 8009106:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800910a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800910e:	f7f7 fa8b 	bl	8000628 <__aeabi_dmul>
 8009112:	4682      	mov	sl, r0
 8009114:	4648      	mov	r0, r9
 8009116:	468b      	mov	fp, r1
 8009118:	f7f7 fa0c 	bl	8000534 <__aeabi_ui2d>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4650      	mov	r0, sl
 8009122:	4659      	mov	r1, fp
 8009124:	f7f7 f8ca 	bl	80002bc <__adddf3>
 8009128:	4682      	mov	sl, r0
 800912a:	468b      	mov	fp, r1
 800912c:	2d0f      	cmp	r5, #15
 800912e:	dc38      	bgt.n	80091a2 <_strtod_l+0x452>
 8009130:	9b06      	ldr	r3, [sp, #24]
 8009132:	2b00      	cmp	r3, #0
 8009134:	f43f ae50 	beq.w	8008dd8 <_strtod_l+0x88>
 8009138:	dd24      	ble.n	8009184 <_strtod_l+0x434>
 800913a:	2b16      	cmp	r3, #22
 800913c:	dc0b      	bgt.n	8009156 <_strtod_l+0x406>
 800913e:	496d      	ldr	r1, [pc, #436]	; (80092f4 <_strtod_l+0x5a4>)
 8009140:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009148:	4652      	mov	r2, sl
 800914a:	465b      	mov	r3, fp
 800914c:	f7f7 fa6c 	bl	8000628 <__aeabi_dmul>
 8009150:	4682      	mov	sl, r0
 8009152:	468b      	mov	fp, r1
 8009154:	e640      	b.n	8008dd8 <_strtod_l+0x88>
 8009156:	9a06      	ldr	r2, [sp, #24]
 8009158:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800915c:	4293      	cmp	r3, r2
 800915e:	db20      	blt.n	80091a2 <_strtod_l+0x452>
 8009160:	4c64      	ldr	r4, [pc, #400]	; (80092f4 <_strtod_l+0x5a4>)
 8009162:	f1c5 050f 	rsb	r5, r5, #15
 8009166:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800916a:	4652      	mov	r2, sl
 800916c:	465b      	mov	r3, fp
 800916e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009172:	f7f7 fa59 	bl	8000628 <__aeabi_dmul>
 8009176:	9b06      	ldr	r3, [sp, #24]
 8009178:	1b5d      	subs	r5, r3, r5
 800917a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800917e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009182:	e7e3      	b.n	800914c <_strtod_l+0x3fc>
 8009184:	9b06      	ldr	r3, [sp, #24]
 8009186:	3316      	adds	r3, #22
 8009188:	db0b      	blt.n	80091a2 <_strtod_l+0x452>
 800918a:	9b05      	ldr	r3, [sp, #20]
 800918c:	1b9e      	subs	r6, r3, r6
 800918e:	4b59      	ldr	r3, [pc, #356]	; (80092f4 <_strtod_l+0x5a4>)
 8009190:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009194:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009198:	4650      	mov	r0, sl
 800919a:	4659      	mov	r1, fp
 800919c:	f7f7 fb6e 	bl	800087c <__aeabi_ddiv>
 80091a0:	e7d6      	b.n	8009150 <_strtod_l+0x400>
 80091a2:	9b06      	ldr	r3, [sp, #24]
 80091a4:	eba5 0808 	sub.w	r8, r5, r8
 80091a8:	4498      	add	r8, r3
 80091aa:	f1b8 0f00 	cmp.w	r8, #0
 80091ae:	dd74      	ble.n	800929a <_strtod_l+0x54a>
 80091b0:	f018 030f 	ands.w	r3, r8, #15
 80091b4:	d00a      	beq.n	80091cc <_strtod_l+0x47c>
 80091b6:	494f      	ldr	r1, [pc, #316]	; (80092f4 <_strtod_l+0x5a4>)
 80091b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091bc:	4652      	mov	r2, sl
 80091be:	465b      	mov	r3, fp
 80091c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091c4:	f7f7 fa30 	bl	8000628 <__aeabi_dmul>
 80091c8:	4682      	mov	sl, r0
 80091ca:	468b      	mov	fp, r1
 80091cc:	f038 080f 	bics.w	r8, r8, #15
 80091d0:	d04f      	beq.n	8009272 <_strtod_l+0x522>
 80091d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80091d6:	dd22      	ble.n	800921e <_strtod_l+0x4ce>
 80091d8:	2500      	movs	r5, #0
 80091da:	462e      	mov	r6, r5
 80091dc:	9507      	str	r5, [sp, #28]
 80091de:	9505      	str	r5, [sp, #20]
 80091e0:	2322      	movs	r3, #34	; 0x22
 80091e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80092fc <_strtod_l+0x5ac>
 80091e6:	6023      	str	r3, [r4, #0]
 80091e8:	f04f 0a00 	mov.w	sl, #0
 80091ec:	9b07      	ldr	r3, [sp, #28]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f43f adf2 	beq.w	8008dd8 <_strtod_l+0x88>
 80091f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80091f6:	4620      	mov	r0, r4
 80091f8:	f001 fe90 	bl	800af1c <_Bfree>
 80091fc:	9905      	ldr	r1, [sp, #20]
 80091fe:	4620      	mov	r0, r4
 8009200:	f001 fe8c 	bl	800af1c <_Bfree>
 8009204:	4631      	mov	r1, r6
 8009206:	4620      	mov	r0, r4
 8009208:	f001 fe88 	bl	800af1c <_Bfree>
 800920c:	9907      	ldr	r1, [sp, #28]
 800920e:	4620      	mov	r0, r4
 8009210:	f001 fe84 	bl	800af1c <_Bfree>
 8009214:	4629      	mov	r1, r5
 8009216:	4620      	mov	r0, r4
 8009218:	f001 fe80 	bl	800af1c <_Bfree>
 800921c:	e5dc      	b.n	8008dd8 <_strtod_l+0x88>
 800921e:	4b36      	ldr	r3, [pc, #216]	; (80092f8 <_strtod_l+0x5a8>)
 8009220:	9304      	str	r3, [sp, #16]
 8009222:	2300      	movs	r3, #0
 8009224:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009228:	4650      	mov	r0, sl
 800922a:	4659      	mov	r1, fp
 800922c:	4699      	mov	r9, r3
 800922e:	f1b8 0f01 	cmp.w	r8, #1
 8009232:	dc21      	bgt.n	8009278 <_strtod_l+0x528>
 8009234:	b10b      	cbz	r3, 800923a <_strtod_l+0x4ea>
 8009236:	4682      	mov	sl, r0
 8009238:	468b      	mov	fp, r1
 800923a:	4b2f      	ldr	r3, [pc, #188]	; (80092f8 <_strtod_l+0x5a8>)
 800923c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009240:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009244:	4652      	mov	r2, sl
 8009246:	465b      	mov	r3, fp
 8009248:	e9d9 0100 	ldrd	r0, r1, [r9]
 800924c:	f7f7 f9ec 	bl	8000628 <__aeabi_dmul>
 8009250:	4b2a      	ldr	r3, [pc, #168]	; (80092fc <_strtod_l+0x5ac>)
 8009252:	460a      	mov	r2, r1
 8009254:	400b      	ands	r3, r1
 8009256:	492a      	ldr	r1, [pc, #168]	; (8009300 <_strtod_l+0x5b0>)
 8009258:	428b      	cmp	r3, r1
 800925a:	4682      	mov	sl, r0
 800925c:	d8bc      	bhi.n	80091d8 <_strtod_l+0x488>
 800925e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009262:	428b      	cmp	r3, r1
 8009264:	bf86      	itte	hi
 8009266:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009304 <_strtod_l+0x5b4>
 800926a:	f04f 3aff 	movhi.w	sl, #4294967295
 800926e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009272:	2300      	movs	r3, #0
 8009274:	9304      	str	r3, [sp, #16]
 8009276:	e084      	b.n	8009382 <_strtod_l+0x632>
 8009278:	f018 0f01 	tst.w	r8, #1
 800927c:	d005      	beq.n	800928a <_strtod_l+0x53a>
 800927e:	9b04      	ldr	r3, [sp, #16]
 8009280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009284:	f7f7 f9d0 	bl	8000628 <__aeabi_dmul>
 8009288:	2301      	movs	r3, #1
 800928a:	9a04      	ldr	r2, [sp, #16]
 800928c:	3208      	adds	r2, #8
 800928e:	f109 0901 	add.w	r9, r9, #1
 8009292:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009296:	9204      	str	r2, [sp, #16]
 8009298:	e7c9      	b.n	800922e <_strtod_l+0x4de>
 800929a:	d0ea      	beq.n	8009272 <_strtod_l+0x522>
 800929c:	f1c8 0800 	rsb	r8, r8, #0
 80092a0:	f018 020f 	ands.w	r2, r8, #15
 80092a4:	d00a      	beq.n	80092bc <_strtod_l+0x56c>
 80092a6:	4b13      	ldr	r3, [pc, #76]	; (80092f4 <_strtod_l+0x5a4>)
 80092a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092ac:	4650      	mov	r0, sl
 80092ae:	4659      	mov	r1, fp
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f7f7 fae2 	bl	800087c <__aeabi_ddiv>
 80092b8:	4682      	mov	sl, r0
 80092ba:	468b      	mov	fp, r1
 80092bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80092c0:	d0d7      	beq.n	8009272 <_strtod_l+0x522>
 80092c2:	f1b8 0f1f 	cmp.w	r8, #31
 80092c6:	dd1f      	ble.n	8009308 <_strtod_l+0x5b8>
 80092c8:	2500      	movs	r5, #0
 80092ca:	462e      	mov	r6, r5
 80092cc:	9507      	str	r5, [sp, #28]
 80092ce:	9505      	str	r5, [sp, #20]
 80092d0:	2322      	movs	r3, #34	; 0x22
 80092d2:	f04f 0a00 	mov.w	sl, #0
 80092d6:	f04f 0b00 	mov.w	fp, #0
 80092da:	6023      	str	r3, [r4, #0]
 80092dc:	e786      	b.n	80091ec <_strtod_l+0x49c>
 80092de:	bf00      	nop
 80092e0:	0800ece5 	.word	0x0800ece5
 80092e4:	0800ed28 	.word	0x0800ed28
 80092e8:	0800ecdd 	.word	0x0800ecdd
 80092ec:	0800ee6c 	.word	0x0800ee6c
 80092f0:	0800f118 	.word	0x0800f118
 80092f4:	0800eff8 	.word	0x0800eff8
 80092f8:	0800efd0 	.word	0x0800efd0
 80092fc:	7ff00000 	.word	0x7ff00000
 8009300:	7ca00000 	.word	0x7ca00000
 8009304:	7fefffff 	.word	0x7fefffff
 8009308:	f018 0310 	ands.w	r3, r8, #16
 800930c:	bf18      	it	ne
 800930e:	236a      	movne	r3, #106	; 0x6a
 8009310:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80096c0 <_strtod_l+0x970>
 8009314:	9304      	str	r3, [sp, #16]
 8009316:	4650      	mov	r0, sl
 8009318:	4659      	mov	r1, fp
 800931a:	2300      	movs	r3, #0
 800931c:	f018 0f01 	tst.w	r8, #1
 8009320:	d004      	beq.n	800932c <_strtod_l+0x5dc>
 8009322:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009326:	f7f7 f97f 	bl	8000628 <__aeabi_dmul>
 800932a:	2301      	movs	r3, #1
 800932c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009330:	f109 0908 	add.w	r9, r9, #8
 8009334:	d1f2      	bne.n	800931c <_strtod_l+0x5cc>
 8009336:	b10b      	cbz	r3, 800933c <_strtod_l+0x5ec>
 8009338:	4682      	mov	sl, r0
 800933a:	468b      	mov	fp, r1
 800933c:	9b04      	ldr	r3, [sp, #16]
 800933e:	b1c3      	cbz	r3, 8009372 <_strtod_l+0x622>
 8009340:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009344:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009348:	2b00      	cmp	r3, #0
 800934a:	4659      	mov	r1, fp
 800934c:	dd11      	ble.n	8009372 <_strtod_l+0x622>
 800934e:	2b1f      	cmp	r3, #31
 8009350:	f340 8124 	ble.w	800959c <_strtod_l+0x84c>
 8009354:	2b34      	cmp	r3, #52	; 0x34
 8009356:	bfde      	ittt	le
 8009358:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800935c:	f04f 33ff 	movle.w	r3, #4294967295
 8009360:	fa03 f202 	lslle.w	r2, r3, r2
 8009364:	f04f 0a00 	mov.w	sl, #0
 8009368:	bfcc      	ite	gt
 800936a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800936e:	ea02 0b01 	andle.w	fp, r2, r1
 8009372:	2200      	movs	r2, #0
 8009374:	2300      	movs	r3, #0
 8009376:	4650      	mov	r0, sl
 8009378:	4659      	mov	r1, fp
 800937a:	f7f7 fbbd 	bl	8000af8 <__aeabi_dcmpeq>
 800937e:	2800      	cmp	r0, #0
 8009380:	d1a2      	bne.n	80092c8 <_strtod_l+0x578>
 8009382:	9b07      	ldr	r3, [sp, #28]
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	9908      	ldr	r1, [sp, #32]
 8009388:	462b      	mov	r3, r5
 800938a:	463a      	mov	r2, r7
 800938c:	4620      	mov	r0, r4
 800938e:	f001 fe2d 	bl	800afec <__s2b>
 8009392:	9007      	str	r0, [sp, #28]
 8009394:	2800      	cmp	r0, #0
 8009396:	f43f af1f 	beq.w	80091d8 <_strtod_l+0x488>
 800939a:	9b05      	ldr	r3, [sp, #20]
 800939c:	1b9e      	subs	r6, r3, r6
 800939e:	9b06      	ldr	r3, [sp, #24]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	bfb4      	ite	lt
 80093a4:	4633      	movlt	r3, r6
 80093a6:	2300      	movge	r3, #0
 80093a8:	930c      	str	r3, [sp, #48]	; 0x30
 80093aa:	9b06      	ldr	r3, [sp, #24]
 80093ac:	2500      	movs	r5, #0
 80093ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80093b2:	9312      	str	r3, [sp, #72]	; 0x48
 80093b4:	462e      	mov	r6, r5
 80093b6:	9b07      	ldr	r3, [sp, #28]
 80093b8:	4620      	mov	r0, r4
 80093ba:	6859      	ldr	r1, [r3, #4]
 80093bc:	f001 fd6e 	bl	800ae9c <_Balloc>
 80093c0:	9005      	str	r0, [sp, #20]
 80093c2:	2800      	cmp	r0, #0
 80093c4:	f43f af0c 	beq.w	80091e0 <_strtod_l+0x490>
 80093c8:	9b07      	ldr	r3, [sp, #28]
 80093ca:	691a      	ldr	r2, [r3, #16]
 80093cc:	3202      	adds	r2, #2
 80093ce:	f103 010c 	add.w	r1, r3, #12
 80093d2:	0092      	lsls	r2, r2, #2
 80093d4:	300c      	adds	r0, #12
 80093d6:	f001 fd53 	bl	800ae80 <memcpy>
 80093da:	ec4b ab10 	vmov	d0, sl, fp
 80093de:	aa1a      	add	r2, sp, #104	; 0x68
 80093e0:	a919      	add	r1, sp, #100	; 0x64
 80093e2:	4620      	mov	r0, r4
 80093e4:	f002 f948 	bl	800b678 <__d2b>
 80093e8:	ec4b ab18 	vmov	d8, sl, fp
 80093ec:	9018      	str	r0, [sp, #96]	; 0x60
 80093ee:	2800      	cmp	r0, #0
 80093f0:	f43f aef6 	beq.w	80091e0 <_strtod_l+0x490>
 80093f4:	2101      	movs	r1, #1
 80093f6:	4620      	mov	r0, r4
 80093f8:	f001 fe92 	bl	800b120 <__i2b>
 80093fc:	4606      	mov	r6, r0
 80093fe:	2800      	cmp	r0, #0
 8009400:	f43f aeee 	beq.w	80091e0 <_strtod_l+0x490>
 8009404:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009406:	9904      	ldr	r1, [sp, #16]
 8009408:	2b00      	cmp	r3, #0
 800940a:	bfab      	itete	ge
 800940c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800940e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009410:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009412:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009416:	bfac      	ite	ge
 8009418:	eb03 0902 	addge.w	r9, r3, r2
 800941c:	1ad7      	sublt	r7, r2, r3
 800941e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009420:	eba3 0801 	sub.w	r8, r3, r1
 8009424:	4490      	add	r8, r2
 8009426:	4ba1      	ldr	r3, [pc, #644]	; (80096ac <_strtod_l+0x95c>)
 8009428:	f108 38ff 	add.w	r8, r8, #4294967295
 800942c:	4598      	cmp	r8, r3
 800942e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009432:	f280 80c7 	bge.w	80095c4 <_strtod_l+0x874>
 8009436:	eba3 0308 	sub.w	r3, r3, r8
 800943a:	2b1f      	cmp	r3, #31
 800943c:	eba2 0203 	sub.w	r2, r2, r3
 8009440:	f04f 0101 	mov.w	r1, #1
 8009444:	f300 80b1 	bgt.w	80095aa <_strtod_l+0x85a>
 8009448:	fa01 f303 	lsl.w	r3, r1, r3
 800944c:	930d      	str	r3, [sp, #52]	; 0x34
 800944e:	2300      	movs	r3, #0
 8009450:	9308      	str	r3, [sp, #32]
 8009452:	eb09 0802 	add.w	r8, r9, r2
 8009456:	9b04      	ldr	r3, [sp, #16]
 8009458:	45c1      	cmp	r9, r8
 800945a:	4417      	add	r7, r2
 800945c:	441f      	add	r7, r3
 800945e:	464b      	mov	r3, r9
 8009460:	bfa8      	it	ge
 8009462:	4643      	movge	r3, r8
 8009464:	42bb      	cmp	r3, r7
 8009466:	bfa8      	it	ge
 8009468:	463b      	movge	r3, r7
 800946a:	2b00      	cmp	r3, #0
 800946c:	bfc2      	ittt	gt
 800946e:	eba8 0803 	subgt.w	r8, r8, r3
 8009472:	1aff      	subgt	r7, r7, r3
 8009474:	eba9 0903 	subgt.w	r9, r9, r3
 8009478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800947a:	2b00      	cmp	r3, #0
 800947c:	dd17      	ble.n	80094ae <_strtod_l+0x75e>
 800947e:	4631      	mov	r1, r6
 8009480:	461a      	mov	r2, r3
 8009482:	4620      	mov	r0, r4
 8009484:	f001 ff0c 	bl	800b2a0 <__pow5mult>
 8009488:	4606      	mov	r6, r0
 800948a:	2800      	cmp	r0, #0
 800948c:	f43f aea8 	beq.w	80091e0 <_strtod_l+0x490>
 8009490:	4601      	mov	r1, r0
 8009492:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009494:	4620      	mov	r0, r4
 8009496:	f001 fe59 	bl	800b14c <__multiply>
 800949a:	900b      	str	r0, [sp, #44]	; 0x2c
 800949c:	2800      	cmp	r0, #0
 800949e:	f43f ae9f 	beq.w	80091e0 <_strtod_l+0x490>
 80094a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80094a4:	4620      	mov	r0, r4
 80094a6:	f001 fd39 	bl	800af1c <_Bfree>
 80094aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ac:	9318      	str	r3, [sp, #96]	; 0x60
 80094ae:	f1b8 0f00 	cmp.w	r8, #0
 80094b2:	f300 808c 	bgt.w	80095ce <_strtod_l+0x87e>
 80094b6:	9b06      	ldr	r3, [sp, #24]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	dd08      	ble.n	80094ce <_strtod_l+0x77e>
 80094bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094be:	9905      	ldr	r1, [sp, #20]
 80094c0:	4620      	mov	r0, r4
 80094c2:	f001 feed 	bl	800b2a0 <__pow5mult>
 80094c6:	9005      	str	r0, [sp, #20]
 80094c8:	2800      	cmp	r0, #0
 80094ca:	f43f ae89 	beq.w	80091e0 <_strtod_l+0x490>
 80094ce:	2f00      	cmp	r7, #0
 80094d0:	dd08      	ble.n	80094e4 <_strtod_l+0x794>
 80094d2:	9905      	ldr	r1, [sp, #20]
 80094d4:	463a      	mov	r2, r7
 80094d6:	4620      	mov	r0, r4
 80094d8:	f001 ff3c 	bl	800b354 <__lshift>
 80094dc:	9005      	str	r0, [sp, #20]
 80094de:	2800      	cmp	r0, #0
 80094e0:	f43f ae7e 	beq.w	80091e0 <_strtod_l+0x490>
 80094e4:	f1b9 0f00 	cmp.w	r9, #0
 80094e8:	dd08      	ble.n	80094fc <_strtod_l+0x7ac>
 80094ea:	4631      	mov	r1, r6
 80094ec:	464a      	mov	r2, r9
 80094ee:	4620      	mov	r0, r4
 80094f0:	f001 ff30 	bl	800b354 <__lshift>
 80094f4:	4606      	mov	r6, r0
 80094f6:	2800      	cmp	r0, #0
 80094f8:	f43f ae72 	beq.w	80091e0 <_strtod_l+0x490>
 80094fc:	9a05      	ldr	r2, [sp, #20]
 80094fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009500:	4620      	mov	r0, r4
 8009502:	f001 ffb3 	bl	800b46c <__mdiff>
 8009506:	4605      	mov	r5, r0
 8009508:	2800      	cmp	r0, #0
 800950a:	f43f ae69 	beq.w	80091e0 <_strtod_l+0x490>
 800950e:	68c3      	ldr	r3, [r0, #12]
 8009510:	930b      	str	r3, [sp, #44]	; 0x2c
 8009512:	2300      	movs	r3, #0
 8009514:	60c3      	str	r3, [r0, #12]
 8009516:	4631      	mov	r1, r6
 8009518:	f001 ff8c 	bl	800b434 <__mcmp>
 800951c:	2800      	cmp	r0, #0
 800951e:	da60      	bge.n	80095e2 <_strtod_l+0x892>
 8009520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009522:	ea53 030a 	orrs.w	r3, r3, sl
 8009526:	f040 8082 	bne.w	800962e <_strtod_l+0x8de>
 800952a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800952e:	2b00      	cmp	r3, #0
 8009530:	d17d      	bne.n	800962e <_strtod_l+0x8de>
 8009532:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009536:	0d1b      	lsrs	r3, r3, #20
 8009538:	051b      	lsls	r3, r3, #20
 800953a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800953e:	d976      	bls.n	800962e <_strtod_l+0x8de>
 8009540:	696b      	ldr	r3, [r5, #20]
 8009542:	b913      	cbnz	r3, 800954a <_strtod_l+0x7fa>
 8009544:	692b      	ldr	r3, [r5, #16]
 8009546:	2b01      	cmp	r3, #1
 8009548:	dd71      	ble.n	800962e <_strtod_l+0x8de>
 800954a:	4629      	mov	r1, r5
 800954c:	2201      	movs	r2, #1
 800954e:	4620      	mov	r0, r4
 8009550:	f001 ff00 	bl	800b354 <__lshift>
 8009554:	4631      	mov	r1, r6
 8009556:	4605      	mov	r5, r0
 8009558:	f001 ff6c 	bl	800b434 <__mcmp>
 800955c:	2800      	cmp	r0, #0
 800955e:	dd66      	ble.n	800962e <_strtod_l+0x8de>
 8009560:	9904      	ldr	r1, [sp, #16]
 8009562:	4a53      	ldr	r2, [pc, #332]	; (80096b0 <_strtod_l+0x960>)
 8009564:	465b      	mov	r3, fp
 8009566:	2900      	cmp	r1, #0
 8009568:	f000 8081 	beq.w	800966e <_strtod_l+0x91e>
 800956c:	ea02 010b 	and.w	r1, r2, fp
 8009570:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009574:	dc7b      	bgt.n	800966e <_strtod_l+0x91e>
 8009576:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800957a:	f77f aea9 	ble.w	80092d0 <_strtod_l+0x580>
 800957e:	4b4d      	ldr	r3, [pc, #308]	; (80096b4 <_strtod_l+0x964>)
 8009580:	4650      	mov	r0, sl
 8009582:	4659      	mov	r1, fp
 8009584:	2200      	movs	r2, #0
 8009586:	f7f7 f84f 	bl	8000628 <__aeabi_dmul>
 800958a:	460b      	mov	r3, r1
 800958c:	4303      	orrs	r3, r0
 800958e:	bf08      	it	eq
 8009590:	2322      	moveq	r3, #34	; 0x22
 8009592:	4682      	mov	sl, r0
 8009594:	468b      	mov	fp, r1
 8009596:	bf08      	it	eq
 8009598:	6023      	streq	r3, [r4, #0]
 800959a:	e62b      	b.n	80091f4 <_strtod_l+0x4a4>
 800959c:	f04f 32ff 	mov.w	r2, #4294967295
 80095a0:	fa02 f303 	lsl.w	r3, r2, r3
 80095a4:	ea03 0a0a 	and.w	sl, r3, sl
 80095a8:	e6e3      	b.n	8009372 <_strtod_l+0x622>
 80095aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80095ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80095b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80095b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80095ba:	fa01 f308 	lsl.w	r3, r1, r8
 80095be:	9308      	str	r3, [sp, #32]
 80095c0:	910d      	str	r1, [sp, #52]	; 0x34
 80095c2:	e746      	b.n	8009452 <_strtod_l+0x702>
 80095c4:	2300      	movs	r3, #0
 80095c6:	9308      	str	r3, [sp, #32]
 80095c8:	2301      	movs	r3, #1
 80095ca:	930d      	str	r3, [sp, #52]	; 0x34
 80095cc:	e741      	b.n	8009452 <_strtod_l+0x702>
 80095ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80095d0:	4642      	mov	r2, r8
 80095d2:	4620      	mov	r0, r4
 80095d4:	f001 febe 	bl	800b354 <__lshift>
 80095d8:	9018      	str	r0, [sp, #96]	; 0x60
 80095da:	2800      	cmp	r0, #0
 80095dc:	f47f af6b 	bne.w	80094b6 <_strtod_l+0x766>
 80095e0:	e5fe      	b.n	80091e0 <_strtod_l+0x490>
 80095e2:	465f      	mov	r7, fp
 80095e4:	d16e      	bne.n	80096c4 <_strtod_l+0x974>
 80095e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095ec:	b342      	cbz	r2, 8009640 <_strtod_l+0x8f0>
 80095ee:	4a32      	ldr	r2, [pc, #200]	; (80096b8 <_strtod_l+0x968>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d128      	bne.n	8009646 <_strtod_l+0x8f6>
 80095f4:	9b04      	ldr	r3, [sp, #16]
 80095f6:	4651      	mov	r1, sl
 80095f8:	b1eb      	cbz	r3, 8009636 <_strtod_l+0x8e6>
 80095fa:	4b2d      	ldr	r3, [pc, #180]	; (80096b0 <_strtod_l+0x960>)
 80095fc:	403b      	ands	r3, r7
 80095fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009602:	f04f 32ff 	mov.w	r2, #4294967295
 8009606:	d819      	bhi.n	800963c <_strtod_l+0x8ec>
 8009608:	0d1b      	lsrs	r3, r3, #20
 800960a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800960e:	fa02 f303 	lsl.w	r3, r2, r3
 8009612:	4299      	cmp	r1, r3
 8009614:	d117      	bne.n	8009646 <_strtod_l+0x8f6>
 8009616:	4b29      	ldr	r3, [pc, #164]	; (80096bc <_strtod_l+0x96c>)
 8009618:	429f      	cmp	r7, r3
 800961a:	d102      	bne.n	8009622 <_strtod_l+0x8d2>
 800961c:	3101      	adds	r1, #1
 800961e:	f43f addf 	beq.w	80091e0 <_strtod_l+0x490>
 8009622:	4b23      	ldr	r3, [pc, #140]	; (80096b0 <_strtod_l+0x960>)
 8009624:	403b      	ands	r3, r7
 8009626:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800962a:	f04f 0a00 	mov.w	sl, #0
 800962e:	9b04      	ldr	r3, [sp, #16]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1a4      	bne.n	800957e <_strtod_l+0x82e>
 8009634:	e5de      	b.n	80091f4 <_strtod_l+0x4a4>
 8009636:	f04f 33ff 	mov.w	r3, #4294967295
 800963a:	e7ea      	b.n	8009612 <_strtod_l+0x8c2>
 800963c:	4613      	mov	r3, r2
 800963e:	e7e8      	b.n	8009612 <_strtod_l+0x8c2>
 8009640:	ea53 030a 	orrs.w	r3, r3, sl
 8009644:	d08c      	beq.n	8009560 <_strtod_l+0x810>
 8009646:	9b08      	ldr	r3, [sp, #32]
 8009648:	b1db      	cbz	r3, 8009682 <_strtod_l+0x932>
 800964a:	423b      	tst	r3, r7
 800964c:	d0ef      	beq.n	800962e <_strtod_l+0x8de>
 800964e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009650:	9a04      	ldr	r2, [sp, #16]
 8009652:	4650      	mov	r0, sl
 8009654:	4659      	mov	r1, fp
 8009656:	b1c3      	cbz	r3, 800968a <_strtod_l+0x93a>
 8009658:	f7ff fb5c 	bl	8008d14 <sulp>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	ec51 0b18 	vmov	r0, r1, d8
 8009664:	f7f6 fe2a 	bl	80002bc <__adddf3>
 8009668:	4682      	mov	sl, r0
 800966a:	468b      	mov	fp, r1
 800966c:	e7df      	b.n	800962e <_strtod_l+0x8de>
 800966e:	4013      	ands	r3, r2
 8009670:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009674:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009678:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800967c:	f04f 3aff 	mov.w	sl, #4294967295
 8009680:	e7d5      	b.n	800962e <_strtod_l+0x8de>
 8009682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009684:	ea13 0f0a 	tst.w	r3, sl
 8009688:	e7e0      	b.n	800964c <_strtod_l+0x8fc>
 800968a:	f7ff fb43 	bl	8008d14 <sulp>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	ec51 0b18 	vmov	r0, r1, d8
 8009696:	f7f6 fe0f 	bl	80002b8 <__aeabi_dsub>
 800969a:	2200      	movs	r2, #0
 800969c:	2300      	movs	r3, #0
 800969e:	4682      	mov	sl, r0
 80096a0:	468b      	mov	fp, r1
 80096a2:	f7f7 fa29 	bl	8000af8 <__aeabi_dcmpeq>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d0c1      	beq.n	800962e <_strtod_l+0x8de>
 80096aa:	e611      	b.n	80092d0 <_strtod_l+0x580>
 80096ac:	fffffc02 	.word	0xfffffc02
 80096b0:	7ff00000 	.word	0x7ff00000
 80096b4:	39500000 	.word	0x39500000
 80096b8:	000fffff 	.word	0x000fffff
 80096bc:	7fefffff 	.word	0x7fefffff
 80096c0:	0800ed40 	.word	0x0800ed40
 80096c4:	4631      	mov	r1, r6
 80096c6:	4628      	mov	r0, r5
 80096c8:	f002 f832 	bl	800b730 <__ratio>
 80096cc:	ec59 8b10 	vmov	r8, r9, d0
 80096d0:	ee10 0a10 	vmov	r0, s0
 80096d4:	2200      	movs	r2, #0
 80096d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096da:	4649      	mov	r1, r9
 80096dc:	f7f7 fa20 	bl	8000b20 <__aeabi_dcmple>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d07a      	beq.n	80097da <_strtod_l+0xa8a>
 80096e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d04a      	beq.n	8009780 <_strtod_l+0xa30>
 80096ea:	4b95      	ldr	r3, [pc, #596]	; (8009940 <_strtod_l+0xbf0>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80096f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009940 <_strtod_l+0xbf0>
 80096f6:	f04f 0800 	mov.w	r8, #0
 80096fa:	4b92      	ldr	r3, [pc, #584]	; (8009944 <_strtod_l+0xbf4>)
 80096fc:	403b      	ands	r3, r7
 80096fe:	930d      	str	r3, [sp, #52]	; 0x34
 8009700:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009702:	4b91      	ldr	r3, [pc, #580]	; (8009948 <_strtod_l+0xbf8>)
 8009704:	429a      	cmp	r2, r3
 8009706:	f040 80b0 	bne.w	800986a <_strtod_l+0xb1a>
 800970a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800970e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009712:	ec4b ab10 	vmov	d0, sl, fp
 8009716:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800971a:	f001 ff31 	bl	800b580 <__ulp>
 800971e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009722:	ec53 2b10 	vmov	r2, r3, d0
 8009726:	f7f6 ff7f 	bl	8000628 <__aeabi_dmul>
 800972a:	4652      	mov	r2, sl
 800972c:	465b      	mov	r3, fp
 800972e:	f7f6 fdc5 	bl	80002bc <__adddf3>
 8009732:	460b      	mov	r3, r1
 8009734:	4983      	ldr	r1, [pc, #524]	; (8009944 <_strtod_l+0xbf4>)
 8009736:	4a85      	ldr	r2, [pc, #532]	; (800994c <_strtod_l+0xbfc>)
 8009738:	4019      	ands	r1, r3
 800973a:	4291      	cmp	r1, r2
 800973c:	4682      	mov	sl, r0
 800973e:	d960      	bls.n	8009802 <_strtod_l+0xab2>
 8009740:	ee18 3a90 	vmov	r3, s17
 8009744:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009748:	4293      	cmp	r3, r2
 800974a:	d104      	bne.n	8009756 <_strtod_l+0xa06>
 800974c:	ee18 3a10 	vmov	r3, s16
 8009750:	3301      	adds	r3, #1
 8009752:	f43f ad45 	beq.w	80091e0 <_strtod_l+0x490>
 8009756:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009958 <_strtod_l+0xc08>
 800975a:	f04f 3aff 	mov.w	sl, #4294967295
 800975e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009760:	4620      	mov	r0, r4
 8009762:	f001 fbdb 	bl	800af1c <_Bfree>
 8009766:	9905      	ldr	r1, [sp, #20]
 8009768:	4620      	mov	r0, r4
 800976a:	f001 fbd7 	bl	800af1c <_Bfree>
 800976e:	4631      	mov	r1, r6
 8009770:	4620      	mov	r0, r4
 8009772:	f001 fbd3 	bl	800af1c <_Bfree>
 8009776:	4629      	mov	r1, r5
 8009778:	4620      	mov	r0, r4
 800977a:	f001 fbcf 	bl	800af1c <_Bfree>
 800977e:	e61a      	b.n	80093b6 <_strtod_l+0x666>
 8009780:	f1ba 0f00 	cmp.w	sl, #0
 8009784:	d11b      	bne.n	80097be <_strtod_l+0xa6e>
 8009786:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800978a:	b9f3      	cbnz	r3, 80097ca <_strtod_l+0xa7a>
 800978c:	4b6c      	ldr	r3, [pc, #432]	; (8009940 <_strtod_l+0xbf0>)
 800978e:	2200      	movs	r2, #0
 8009790:	4640      	mov	r0, r8
 8009792:	4649      	mov	r1, r9
 8009794:	f7f7 f9ba 	bl	8000b0c <__aeabi_dcmplt>
 8009798:	b9d0      	cbnz	r0, 80097d0 <_strtod_l+0xa80>
 800979a:	4640      	mov	r0, r8
 800979c:	4649      	mov	r1, r9
 800979e:	4b6c      	ldr	r3, [pc, #432]	; (8009950 <_strtod_l+0xc00>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	f7f6 ff41 	bl	8000628 <__aeabi_dmul>
 80097a6:	4680      	mov	r8, r0
 80097a8:	4689      	mov	r9, r1
 80097aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80097ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80097b2:	9315      	str	r3, [sp, #84]	; 0x54
 80097b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80097b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80097bc:	e79d      	b.n	80096fa <_strtod_l+0x9aa>
 80097be:	f1ba 0f01 	cmp.w	sl, #1
 80097c2:	d102      	bne.n	80097ca <_strtod_l+0xa7a>
 80097c4:	2f00      	cmp	r7, #0
 80097c6:	f43f ad83 	beq.w	80092d0 <_strtod_l+0x580>
 80097ca:	4b62      	ldr	r3, [pc, #392]	; (8009954 <_strtod_l+0xc04>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	e78e      	b.n	80096ee <_strtod_l+0x99e>
 80097d0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009950 <_strtod_l+0xc00>
 80097d4:	f04f 0800 	mov.w	r8, #0
 80097d8:	e7e7      	b.n	80097aa <_strtod_l+0xa5a>
 80097da:	4b5d      	ldr	r3, [pc, #372]	; (8009950 <_strtod_l+0xc00>)
 80097dc:	4640      	mov	r0, r8
 80097de:	4649      	mov	r1, r9
 80097e0:	2200      	movs	r2, #0
 80097e2:	f7f6 ff21 	bl	8000628 <__aeabi_dmul>
 80097e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097e8:	4680      	mov	r8, r0
 80097ea:	4689      	mov	r9, r1
 80097ec:	b933      	cbnz	r3, 80097fc <_strtod_l+0xaac>
 80097ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097f2:	900e      	str	r0, [sp, #56]	; 0x38
 80097f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80097f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80097fa:	e7dd      	b.n	80097b8 <_strtod_l+0xa68>
 80097fc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009800:	e7f9      	b.n	80097f6 <_strtod_l+0xaa6>
 8009802:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009806:	9b04      	ldr	r3, [sp, #16]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1a8      	bne.n	800975e <_strtod_l+0xa0e>
 800980c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009810:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009812:	0d1b      	lsrs	r3, r3, #20
 8009814:	051b      	lsls	r3, r3, #20
 8009816:	429a      	cmp	r2, r3
 8009818:	d1a1      	bne.n	800975e <_strtod_l+0xa0e>
 800981a:	4640      	mov	r0, r8
 800981c:	4649      	mov	r1, r9
 800981e:	f7f7 fa63 	bl	8000ce8 <__aeabi_d2lz>
 8009822:	f7f6 fed3 	bl	80005cc <__aeabi_l2d>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	4640      	mov	r0, r8
 800982c:	4649      	mov	r1, r9
 800982e:	f7f6 fd43 	bl	80002b8 <__aeabi_dsub>
 8009832:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009834:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009838:	ea43 030a 	orr.w	r3, r3, sl
 800983c:	4313      	orrs	r3, r2
 800983e:	4680      	mov	r8, r0
 8009840:	4689      	mov	r9, r1
 8009842:	d055      	beq.n	80098f0 <_strtod_l+0xba0>
 8009844:	a336      	add	r3, pc, #216	; (adr r3, 8009920 <_strtod_l+0xbd0>)
 8009846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984a:	f7f7 f95f 	bl	8000b0c <__aeabi_dcmplt>
 800984e:	2800      	cmp	r0, #0
 8009850:	f47f acd0 	bne.w	80091f4 <_strtod_l+0x4a4>
 8009854:	a334      	add	r3, pc, #208	; (adr r3, 8009928 <_strtod_l+0xbd8>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	4640      	mov	r0, r8
 800985c:	4649      	mov	r1, r9
 800985e:	f7f7 f973 	bl	8000b48 <__aeabi_dcmpgt>
 8009862:	2800      	cmp	r0, #0
 8009864:	f43f af7b 	beq.w	800975e <_strtod_l+0xa0e>
 8009868:	e4c4      	b.n	80091f4 <_strtod_l+0x4a4>
 800986a:	9b04      	ldr	r3, [sp, #16]
 800986c:	b333      	cbz	r3, 80098bc <_strtod_l+0xb6c>
 800986e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009870:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009874:	d822      	bhi.n	80098bc <_strtod_l+0xb6c>
 8009876:	a32e      	add	r3, pc, #184	; (adr r3, 8009930 <_strtod_l+0xbe0>)
 8009878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987c:	4640      	mov	r0, r8
 800987e:	4649      	mov	r1, r9
 8009880:	f7f7 f94e 	bl	8000b20 <__aeabi_dcmple>
 8009884:	b1a0      	cbz	r0, 80098b0 <_strtod_l+0xb60>
 8009886:	4649      	mov	r1, r9
 8009888:	4640      	mov	r0, r8
 800988a:	f7f7 f9a5 	bl	8000bd8 <__aeabi_d2uiz>
 800988e:	2801      	cmp	r0, #1
 8009890:	bf38      	it	cc
 8009892:	2001      	movcc	r0, #1
 8009894:	f7f6 fe4e 	bl	8000534 <__aeabi_ui2d>
 8009898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800989a:	4680      	mov	r8, r0
 800989c:	4689      	mov	r9, r1
 800989e:	bb23      	cbnz	r3, 80098ea <_strtod_l+0xb9a>
 80098a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098a4:	9010      	str	r0, [sp, #64]	; 0x40
 80098a6:	9311      	str	r3, [sp, #68]	; 0x44
 80098a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80098b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80098b8:	1a9b      	subs	r3, r3, r2
 80098ba:	9309      	str	r3, [sp, #36]	; 0x24
 80098bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80098c0:	eeb0 0a48 	vmov.f32	s0, s16
 80098c4:	eef0 0a68 	vmov.f32	s1, s17
 80098c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80098cc:	f001 fe58 	bl	800b580 <__ulp>
 80098d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80098d4:	ec53 2b10 	vmov	r2, r3, d0
 80098d8:	f7f6 fea6 	bl	8000628 <__aeabi_dmul>
 80098dc:	ec53 2b18 	vmov	r2, r3, d8
 80098e0:	f7f6 fcec 	bl	80002bc <__adddf3>
 80098e4:	4682      	mov	sl, r0
 80098e6:	468b      	mov	fp, r1
 80098e8:	e78d      	b.n	8009806 <_strtod_l+0xab6>
 80098ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80098ee:	e7db      	b.n	80098a8 <_strtod_l+0xb58>
 80098f0:	a311      	add	r3, pc, #68	; (adr r3, 8009938 <_strtod_l+0xbe8>)
 80098f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f6:	f7f7 f909 	bl	8000b0c <__aeabi_dcmplt>
 80098fa:	e7b2      	b.n	8009862 <_strtod_l+0xb12>
 80098fc:	2300      	movs	r3, #0
 80098fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009900:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009902:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009904:	6013      	str	r3, [r2, #0]
 8009906:	f7ff ba6b 	b.w	8008de0 <_strtod_l+0x90>
 800990a:	2a65      	cmp	r2, #101	; 0x65
 800990c:	f43f ab5f 	beq.w	8008fce <_strtod_l+0x27e>
 8009910:	2a45      	cmp	r2, #69	; 0x45
 8009912:	f43f ab5c 	beq.w	8008fce <_strtod_l+0x27e>
 8009916:	2301      	movs	r3, #1
 8009918:	f7ff bb94 	b.w	8009044 <_strtod_l+0x2f4>
 800991c:	f3af 8000 	nop.w
 8009920:	94a03595 	.word	0x94a03595
 8009924:	3fdfffff 	.word	0x3fdfffff
 8009928:	35afe535 	.word	0x35afe535
 800992c:	3fe00000 	.word	0x3fe00000
 8009930:	ffc00000 	.word	0xffc00000
 8009934:	41dfffff 	.word	0x41dfffff
 8009938:	94a03595 	.word	0x94a03595
 800993c:	3fcfffff 	.word	0x3fcfffff
 8009940:	3ff00000 	.word	0x3ff00000
 8009944:	7ff00000 	.word	0x7ff00000
 8009948:	7fe00000 	.word	0x7fe00000
 800994c:	7c9fffff 	.word	0x7c9fffff
 8009950:	3fe00000 	.word	0x3fe00000
 8009954:	bff00000 	.word	0xbff00000
 8009958:	7fefffff 	.word	0x7fefffff

0800995c <_strtod_r>:
 800995c:	4b01      	ldr	r3, [pc, #4]	; (8009964 <_strtod_r+0x8>)
 800995e:	f7ff b9f7 	b.w	8008d50 <_strtod_l>
 8009962:	bf00      	nop
 8009964:	20000084 	.word	0x20000084

08009968 <_strtol_l.constprop.0>:
 8009968:	2b01      	cmp	r3, #1
 800996a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800996e:	d001      	beq.n	8009974 <_strtol_l.constprop.0+0xc>
 8009970:	2b24      	cmp	r3, #36	; 0x24
 8009972:	d906      	bls.n	8009982 <_strtol_l.constprop.0+0x1a>
 8009974:	f7fe fafc 	bl	8007f70 <__errno>
 8009978:	2316      	movs	r3, #22
 800997a:	6003      	str	r3, [r0, #0]
 800997c:	2000      	movs	r0, #0
 800997e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009982:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009a68 <_strtol_l.constprop.0+0x100>
 8009986:	460d      	mov	r5, r1
 8009988:	462e      	mov	r6, r5
 800998a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800998e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009992:	f017 0708 	ands.w	r7, r7, #8
 8009996:	d1f7      	bne.n	8009988 <_strtol_l.constprop.0+0x20>
 8009998:	2c2d      	cmp	r4, #45	; 0x2d
 800999a:	d132      	bne.n	8009a02 <_strtol_l.constprop.0+0x9a>
 800999c:	782c      	ldrb	r4, [r5, #0]
 800999e:	2701      	movs	r7, #1
 80099a0:	1cb5      	adds	r5, r6, #2
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d05b      	beq.n	8009a5e <_strtol_l.constprop.0+0xf6>
 80099a6:	2b10      	cmp	r3, #16
 80099a8:	d109      	bne.n	80099be <_strtol_l.constprop.0+0x56>
 80099aa:	2c30      	cmp	r4, #48	; 0x30
 80099ac:	d107      	bne.n	80099be <_strtol_l.constprop.0+0x56>
 80099ae:	782c      	ldrb	r4, [r5, #0]
 80099b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80099b4:	2c58      	cmp	r4, #88	; 0x58
 80099b6:	d14d      	bne.n	8009a54 <_strtol_l.constprop.0+0xec>
 80099b8:	786c      	ldrb	r4, [r5, #1]
 80099ba:	2310      	movs	r3, #16
 80099bc:	3502      	adds	r5, #2
 80099be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80099c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80099c6:	f04f 0c00 	mov.w	ip, #0
 80099ca:	fbb8 f9f3 	udiv	r9, r8, r3
 80099ce:	4666      	mov	r6, ip
 80099d0:	fb03 8a19 	mls	sl, r3, r9, r8
 80099d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80099d8:	f1be 0f09 	cmp.w	lr, #9
 80099dc:	d816      	bhi.n	8009a0c <_strtol_l.constprop.0+0xa4>
 80099de:	4674      	mov	r4, lr
 80099e0:	42a3      	cmp	r3, r4
 80099e2:	dd24      	ble.n	8009a2e <_strtol_l.constprop.0+0xc6>
 80099e4:	f1bc 0f00 	cmp.w	ip, #0
 80099e8:	db1e      	blt.n	8009a28 <_strtol_l.constprop.0+0xc0>
 80099ea:	45b1      	cmp	r9, r6
 80099ec:	d31c      	bcc.n	8009a28 <_strtol_l.constprop.0+0xc0>
 80099ee:	d101      	bne.n	80099f4 <_strtol_l.constprop.0+0x8c>
 80099f0:	45a2      	cmp	sl, r4
 80099f2:	db19      	blt.n	8009a28 <_strtol_l.constprop.0+0xc0>
 80099f4:	fb06 4603 	mla	r6, r6, r3, r4
 80099f8:	f04f 0c01 	mov.w	ip, #1
 80099fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a00:	e7e8      	b.n	80099d4 <_strtol_l.constprop.0+0x6c>
 8009a02:	2c2b      	cmp	r4, #43	; 0x2b
 8009a04:	bf04      	itt	eq
 8009a06:	782c      	ldrbeq	r4, [r5, #0]
 8009a08:	1cb5      	addeq	r5, r6, #2
 8009a0a:	e7ca      	b.n	80099a2 <_strtol_l.constprop.0+0x3a>
 8009a0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009a10:	f1be 0f19 	cmp.w	lr, #25
 8009a14:	d801      	bhi.n	8009a1a <_strtol_l.constprop.0+0xb2>
 8009a16:	3c37      	subs	r4, #55	; 0x37
 8009a18:	e7e2      	b.n	80099e0 <_strtol_l.constprop.0+0x78>
 8009a1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009a1e:	f1be 0f19 	cmp.w	lr, #25
 8009a22:	d804      	bhi.n	8009a2e <_strtol_l.constprop.0+0xc6>
 8009a24:	3c57      	subs	r4, #87	; 0x57
 8009a26:	e7db      	b.n	80099e0 <_strtol_l.constprop.0+0x78>
 8009a28:	f04f 3cff 	mov.w	ip, #4294967295
 8009a2c:	e7e6      	b.n	80099fc <_strtol_l.constprop.0+0x94>
 8009a2e:	f1bc 0f00 	cmp.w	ip, #0
 8009a32:	da05      	bge.n	8009a40 <_strtol_l.constprop.0+0xd8>
 8009a34:	2322      	movs	r3, #34	; 0x22
 8009a36:	6003      	str	r3, [r0, #0]
 8009a38:	4646      	mov	r6, r8
 8009a3a:	b942      	cbnz	r2, 8009a4e <_strtol_l.constprop.0+0xe6>
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	e79e      	b.n	800997e <_strtol_l.constprop.0+0x16>
 8009a40:	b107      	cbz	r7, 8009a44 <_strtol_l.constprop.0+0xdc>
 8009a42:	4276      	negs	r6, r6
 8009a44:	2a00      	cmp	r2, #0
 8009a46:	d0f9      	beq.n	8009a3c <_strtol_l.constprop.0+0xd4>
 8009a48:	f1bc 0f00 	cmp.w	ip, #0
 8009a4c:	d000      	beq.n	8009a50 <_strtol_l.constprop.0+0xe8>
 8009a4e:	1e69      	subs	r1, r5, #1
 8009a50:	6011      	str	r1, [r2, #0]
 8009a52:	e7f3      	b.n	8009a3c <_strtol_l.constprop.0+0xd4>
 8009a54:	2430      	movs	r4, #48	; 0x30
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1b1      	bne.n	80099be <_strtol_l.constprop.0+0x56>
 8009a5a:	2308      	movs	r3, #8
 8009a5c:	e7af      	b.n	80099be <_strtol_l.constprop.0+0x56>
 8009a5e:	2c30      	cmp	r4, #48	; 0x30
 8009a60:	d0a5      	beq.n	80099ae <_strtol_l.constprop.0+0x46>
 8009a62:	230a      	movs	r3, #10
 8009a64:	e7ab      	b.n	80099be <_strtol_l.constprop.0+0x56>
 8009a66:	bf00      	nop
 8009a68:	0800ed69 	.word	0x0800ed69

08009a6c <_strtol_r>:
 8009a6c:	f7ff bf7c 	b.w	8009968 <_strtol_l.constprop.0>

08009a70 <quorem>:
 8009a70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a74:	6903      	ldr	r3, [r0, #16]
 8009a76:	690c      	ldr	r4, [r1, #16]
 8009a78:	42a3      	cmp	r3, r4
 8009a7a:	4607      	mov	r7, r0
 8009a7c:	f2c0 8081 	blt.w	8009b82 <quorem+0x112>
 8009a80:	3c01      	subs	r4, #1
 8009a82:	f101 0814 	add.w	r8, r1, #20
 8009a86:	f100 0514 	add.w	r5, r0, #20
 8009a8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a8e:	9301      	str	r3, [sp, #4]
 8009a90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a98:	3301      	adds	r3, #1
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009aa0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009aa4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009aa8:	d331      	bcc.n	8009b0e <quorem+0x9e>
 8009aaa:	f04f 0e00 	mov.w	lr, #0
 8009aae:	4640      	mov	r0, r8
 8009ab0:	46ac      	mov	ip, r5
 8009ab2:	46f2      	mov	sl, lr
 8009ab4:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ab8:	b293      	uxth	r3, r2
 8009aba:	fb06 e303 	mla	r3, r6, r3, lr
 8009abe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	ebaa 0303 	sub.w	r3, sl, r3
 8009ac8:	f8dc a000 	ldr.w	sl, [ip]
 8009acc:	0c12      	lsrs	r2, r2, #16
 8009ace:	fa13 f38a 	uxtah	r3, r3, sl
 8009ad2:	fb06 e202 	mla	r2, r6, r2, lr
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	9b00      	ldr	r3, [sp, #0]
 8009ada:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ade:	b292      	uxth	r2, r2
 8009ae0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ae4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ae8:	f8bd 3000 	ldrh.w	r3, [sp]
 8009aec:	4581      	cmp	r9, r0
 8009aee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009af2:	f84c 3b04 	str.w	r3, [ip], #4
 8009af6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009afa:	d2db      	bcs.n	8009ab4 <quorem+0x44>
 8009afc:	f855 300b 	ldr.w	r3, [r5, fp]
 8009b00:	b92b      	cbnz	r3, 8009b0e <quorem+0x9e>
 8009b02:	9b01      	ldr	r3, [sp, #4]
 8009b04:	3b04      	subs	r3, #4
 8009b06:	429d      	cmp	r5, r3
 8009b08:	461a      	mov	r2, r3
 8009b0a:	d32e      	bcc.n	8009b6a <quorem+0xfa>
 8009b0c:	613c      	str	r4, [r7, #16]
 8009b0e:	4638      	mov	r0, r7
 8009b10:	f001 fc90 	bl	800b434 <__mcmp>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	db24      	blt.n	8009b62 <quorem+0xf2>
 8009b18:	3601      	adds	r6, #1
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f04f 0c00 	mov.w	ip, #0
 8009b20:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b24:	f8d0 e000 	ldr.w	lr, [r0]
 8009b28:	b293      	uxth	r3, r2
 8009b2a:	ebac 0303 	sub.w	r3, ip, r3
 8009b2e:	0c12      	lsrs	r2, r2, #16
 8009b30:	fa13 f38e 	uxtah	r3, r3, lr
 8009b34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009b38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b42:	45c1      	cmp	r9, r8
 8009b44:	f840 3b04 	str.w	r3, [r0], #4
 8009b48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009b4c:	d2e8      	bcs.n	8009b20 <quorem+0xb0>
 8009b4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b56:	b922      	cbnz	r2, 8009b62 <quorem+0xf2>
 8009b58:	3b04      	subs	r3, #4
 8009b5a:	429d      	cmp	r5, r3
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	d30a      	bcc.n	8009b76 <quorem+0x106>
 8009b60:	613c      	str	r4, [r7, #16]
 8009b62:	4630      	mov	r0, r6
 8009b64:	b003      	add	sp, #12
 8009b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6a:	6812      	ldr	r2, [r2, #0]
 8009b6c:	3b04      	subs	r3, #4
 8009b6e:	2a00      	cmp	r2, #0
 8009b70:	d1cc      	bne.n	8009b0c <quorem+0x9c>
 8009b72:	3c01      	subs	r4, #1
 8009b74:	e7c7      	b.n	8009b06 <quorem+0x96>
 8009b76:	6812      	ldr	r2, [r2, #0]
 8009b78:	3b04      	subs	r3, #4
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	d1f0      	bne.n	8009b60 <quorem+0xf0>
 8009b7e:	3c01      	subs	r4, #1
 8009b80:	e7eb      	b.n	8009b5a <quorem+0xea>
 8009b82:	2000      	movs	r0, #0
 8009b84:	e7ee      	b.n	8009b64 <quorem+0xf4>
	...

08009b88 <_dtoa_r>:
 8009b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8c:	ed2d 8b04 	vpush	{d8-d9}
 8009b90:	ec57 6b10 	vmov	r6, r7, d0
 8009b94:	b093      	sub	sp, #76	; 0x4c
 8009b96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b9c:	9106      	str	r1, [sp, #24]
 8009b9e:	ee10 aa10 	vmov	sl, s0
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ba6:	930c      	str	r3, [sp, #48]	; 0x30
 8009ba8:	46bb      	mov	fp, r7
 8009baa:	b975      	cbnz	r5, 8009bca <_dtoa_r+0x42>
 8009bac:	2010      	movs	r0, #16
 8009bae:	f001 f94d 	bl	800ae4c <malloc>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	6260      	str	r0, [r4, #36]	; 0x24
 8009bb6:	b920      	cbnz	r0, 8009bc2 <_dtoa_r+0x3a>
 8009bb8:	4ba7      	ldr	r3, [pc, #668]	; (8009e58 <_dtoa_r+0x2d0>)
 8009bba:	21ea      	movs	r1, #234	; 0xea
 8009bbc:	48a7      	ldr	r0, [pc, #668]	; (8009e5c <_dtoa_r+0x2d4>)
 8009bbe:	f002 f8bd 	bl	800bd3c <__assert_func>
 8009bc2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009bc6:	6005      	str	r5, [r0, #0]
 8009bc8:	60c5      	str	r5, [r0, #12]
 8009bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bcc:	6819      	ldr	r1, [r3, #0]
 8009bce:	b151      	cbz	r1, 8009be6 <_dtoa_r+0x5e>
 8009bd0:	685a      	ldr	r2, [r3, #4]
 8009bd2:	604a      	str	r2, [r1, #4]
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	4093      	lsls	r3, r2
 8009bd8:	608b      	str	r3, [r1, #8]
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f001 f99e 	bl	800af1c <_Bfree>
 8009be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
 8009be6:	1e3b      	subs	r3, r7, #0
 8009be8:	bfaa      	itet	ge
 8009bea:	2300      	movge	r3, #0
 8009bec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009bf0:	f8c8 3000 	strge.w	r3, [r8]
 8009bf4:	4b9a      	ldr	r3, [pc, #616]	; (8009e60 <_dtoa_r+0x2d8>)
 8009bf6:	bfbc      	itt	lt
 8009bf8:	2201      	movlt	r2, #1
 8009bfa:	f8c8 2000 	strlt.w	r2, [r8]
 8009bfe:	ea33 030b 	bics.w	r3, r3, fp
 8009c02:	d11b      	bne.n	8009c3c <_dtoa_r+0xb4>
 8009c04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c06:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c0a:	6013      	str	r3, [r2, #0]
 8009c0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c10:	4333      	orrs	r3, r6
 8009c12:	f000 8592 	beq.w	800a73a <_dtoa_r+0xbb2>
 8009c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c18:	b963      	cbnz	r3, 8009c34 <_dtoa_r+0xac>
 8009c1a:	4b92      	ldr	r3, [pc, #584]	; (8009e64 <_dtoa_r+0x2dc>)
 8009c1c:	e022      	b.n	8009c64 <_dtoa_r+0xdc>
 8009c1e:	4b92      	ldr	r3, [pc, #584]	; (8009e68 <_dtoa_r+0x2e0>)
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	3308      	adds	r3, #8
 8009c24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	9801      	ldr	r0, [sp, #4]
 8009c2a:	b013      	add	sp, #76	; 0x4c
 8009c2c:	ecbd 8b04 	vpop	{d8-d9}
 8009c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c34:	4b8b      	ldr	r3, [pc, #556]	; (8009e64 <_dtoa_r+0x2dc>)
 8009c36:	9301      	str	r3, [sp, #4]
 8009c38:	3303      	adds	r3, #3
 8009c3a:	e7f3      	b.n	8009c24 <_dtoa_r+0x9c>
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	2300      	movs	r3, #0
 8009c40:	4650      	mov	r0, sl
 8009c42:	4659      	mov	r1, fp
 8009c44:	f7f6 ff58 	bl	8000af8 <__aeabi_dcmpeq>
 8009c48:	ec4b ab19 	vmov	d9, sl, fp
 8009c4c:	4680      	mov	r8, r0
 8009c4e:	b158      	cbz	r0, 8009c68 <_dtoa_r+0xe0>
 8009c50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c52:	2301      	movs	r3, #1
 8009c54:	6013      	str	r3, [r2, #0]
 8009c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 856b 	beq.w	800a734 <_dtoa_r+0xbac>
 8009c5e:	4883      	ldr	r0, [pc, #524]	; (8009e6c <_dtoa_r+0x2e4>)
 8009c60:	6018      	str	r0, [r3, #0]
 8009c62:	1e43      	subs	r3, r0, #1
 8009c64:	9301      	str	r3, [sp, #4]
 8009c66:	e7df      	b.n	8009c28 <_dtoa_r+0xa0>
 8009c68:	ec4b ab10 	vmov	d0, sl, fp
 8009c6c:	aa10      	add	r2, sp, #64	; 0x40
 8009c6e:	a911      	add	r1, sp, #68	; 0x44
 8009c70:	4620      	mov	r0, r4
 8009c72:	f001 fd01 	bl	800b678 <__d2b>
 8009c76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009c7a:	ee08 0a10 	vmov	s16, r0
 8009c7e:	2d00      	cmp	r5, #0
 8009c80:	f000 8084 	beq.w	8009d8c <_dtoa_r+0x204>
 8009c84:	ee19 3a90 	vmov	r3, s19
 8009c88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009c90:	4656      	mov	r6, sl
 8009c92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009c96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009c9e:	4b74      	ldr	r3, [pc, #464]	; (8009e70 <_dtoa_r+0x2e8>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	4639      	mov	r1, r7
 8009ca6:	f7f6 fb07 	bl	80002b8 <__aeabi_dsub>
 8009caa:	a365      	add	r3, pc, #404	; (adr r3, 8009e40 <_dtoa_r+0x2b8>)
 8009cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb0:	f7f6 fcba 	bl	8000628 <__aeabi_dmul>
 8009cb4:	a364      	add	r3, pc, #400	; (adr r3, 8009e48 <_dtoa_r+0x2c0>)
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	f7f6 faff 	bl	80002bc <__adddf3>
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	460f      	mov	r7, r1
 8009cc4:	f7f6 fc46 	bl	8000554 <__aeabi_i2d>
 8009cc8:	a361      	add	r3, pc, #388	; (adr r3, 8009e50 <_dtoa_r+0x2c8>)
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	f7f6 fcab 	bl	8000628 <__aeabi_dmul>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	4639      	mov	r1, r7
 8009cda:	f7f6 faef 	bl	80002bc <__adddf3>
 8009cde:	4606      	mov	r6, r0
 8009ce0:	460f      	mov	r7, r1
 8009ce2:	f7f6 ff51 	bl	8000b88 <__aeabi_d2iz>
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	9000      	str	r0, [sp, #0]
 8009cea:	2300      	movs	r3, #0
 8009cec:	4630      	mov	r0, r6
 8009cee:	4639      	mov	r1, r7
 8009cf0:	f7f6 ff0c 	bl	8000b0c <__aeabi_dcmplt>
 8009cf4:	b150      	cbz	r0, 8009d0c <_dtoa_r+0x184>
 8009cf6:	9800      	ldr	r0, [sp, #0]
 8009cf8:	f7f6 fc2c 	bl	8000554 <__aeabi_i2d>
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	463b      	mov	r3, r7
 8009d00:	f7f6 fefa 	bl	8000af8 <__aeabi_dcmpeq>
 8009d04:	b910      	cbnz	r0, 8009d0c <_dtoa_r+0x184>
 8009d06:	9b00      	ldr	r3, [sp, #0]
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	9b00      	ldr	r3, [sp, #0]
 8009d0e:	2b16      	cmp	r3, #22
 8009d10:	d85a      	bhi.n	8009dc8 <_dtoa_r+0x240>
 8009d12:	9a00      	ldr	r2, [sp, #0]
 8009d14:	4b57      	ldr	r3, [pc, #348]	; (8009e74 <_dtoa_r+0x2ec>)
 8009d16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	ec51 0b19 	vmov	r0, r1, d9
 8009d22:	f7f6 fef3 	bl	8000b0c <__aeabi_dcmplt>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d050      	beq.n	8009dcc <_dtoa_r+0x244>
 8009d2a:	9b00      	ldr	r3, [sp, #0]
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	2300      	movs	r3, #0
 8009d32:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d36:	1b5d      	subs	r5, r3, r5
 8009d38:	1e6b      	subs	r3, r5, #1
 8009d3a:	9305      	str	r3, [sp, #20]
 8009d3c:	bf45      	ittet	mi
 8009d3e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009d42:	9304      	strmi	r3, [sp, #16]
 8009d44:	2300      	movpl	r3, #0
 8009d46:	2300      	movmi	r3, #0
 8009d48:	bf4c      	ite	mi
 8009d4a:	9305      	strmi	r3, [sp, #20]
 8009d4c:	9304      	strpl	r3, [sp, #16]
 8009d4e:	9b00      	ldr	r3, [sp, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	db3d      	blt.n	8009dd0 <_dtoa_r+0x248>
 8009d54:	9b05      	ldr	r3, [sp, #20]
 8009d56:	9a00      	ldr	r2, [sp, #0]
 8009d58:	920a      	str	r2, [sp, #40]	; 0x28
 8009d5a:	4413      	add	r3, r2
 8009d5c:	9305      	str	r3, [sp, #20]
 8009d5e:	2300      	movs	r3, #0
 8009d60:	9307      	str	r3, [sp, #28]
 8009d62:	9b06      	ldr	r3, [sp, #24]
 8009d64:	2b09      	cmp	r3, #9
 8009d66:	f200 8089 	bhi.w	8009e7c <_dtoa_r+0x2f4>
 8009d6a:	2b05      	cmp	r3, #5
 8009d6c:	bfc4      	itt	gt
 8009d6e:	3b04      	subgt	r3, #4
 8009d70:	9306      	strgt	r3, [sp, #24]
 8009d72:	9b06      	ldr	r3, [sp, #24]
 8009d74:	f1a3 0302 	sub.w	r3, r3, #2
 8009d78:	bfcc      	ite	gt
 8009d7a:	2500      	movgt	r5, #0
 8009d7c:	2501      	movle	r5, #1
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	f200 8087 	bhi.w	8009e92 <_dtoa_r+0x30a>
 8009d84:	e8df f003 	tbb	[pc, r3]
 8009d88:	59383a2d 	.word	0x59383a2d
 8009d8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009d90:	441d      	add	r5, r3
 8009d92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009d96:	2b20      	cmp	r3, #32
 8009d98:	bfc1      	itttt	gt
 8009d9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009da2:	fa0b f303 	lslgt.w	r3, fp, r3
 8009da6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009daa:	bfda      	itte	le
 8009dac:	f1c3 0320 	rsble	r3, r3, #32
 8009db0:	fa06 f003 	lslle.w	r0, r6, r3
 8009db4:	4318      	orrgt	r0, r3
 8009db6:	f7f6 fbbd 	bl	8000534 <__aeabi_ui2d>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009dc2:	3d01      	subs	r5, #1
 8009dc4:	930e      	str	r3, [sp, #56]	; 0x38
 8009dc6:	e76a      	b.n	8009c9e <_dtoa_r+0x116>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e7b2      	b.n	8009d32 <_dtoa_r+0x1aa>
 8009dcc:	900b      	str	r0, [sp, #44]	; 0x2c
 8009dce:	e7b1      	b.n	8009d34 <_dtoa_r+0x1ac>
 8009dd0:	9b04      	ldr	r3, [sp, #16]
 8009dd2:	9a00      	ldr	r2, [sp, #0]
 8009dd4:	1a9b      	subs	r3, r3, r2
 8009dd6:	9304      	str	r3, [sp, #16]
 8009dd8:	4253      	negs	r3, r2
 8009dda:	9307      	str	r3, [sp, #28]
 8009ddc:	2300      	movs	r3, #0
 8009dde:	930a      	str	r3, [sp, #40]	; 0x28
 8009de0:	e7bf      	b.n	8009d62 <_dtoa_r+0x1da>
 8009de2:	2300      	movs	r3, #0
 8009de4:	9308      	str	r3, [sp, #32]
 8009de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	dc55      	bgt.n	8009e98 <_dtoa_r+0x310>
 8009dec:	2301      	movs	r3, #1
 8009dee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009df2:	461a      	mov	r2, r3
 8009df4:	9209      	str	r2, [sp, #36]	; 0x24
 8009df6:	e00c      	b.n	8009e12 <_dtoa_r+0x28a>
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e7f3      	b.n	8009de4 <_dtoa_r+0x25c>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e00:	9308      	str	r3, [sp, #32]
 8009e02:	9b00      	ldr	r3, [sp, #0]
 8009e04:	4413      	add	r3, r2
 8009e06:	9302      	str	r3, [sp, #8]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	9303      	str	r3, [sp, #12]
 8009e0e:	bfb8      	it	lt
 8009e10:	2301      	movlt	r3, #1
 8009e12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009e14:	2200      	movs	r2, #0
 8009e16:	6042      	str	r2, [r0, #4]
 8009e18:	2204      	movs	r2, #4
 8009e1a:	f102 0614 	add.w	r6, r2, #20
 8009e1e:	429e      	cmp	r6, r3
 8009e20:	6841      	ldr	r1, [r0, #4]
 8009e22:	d93d      	bls.n	8009ea0 <_dtoa_r+0x318>
 8009e24:	4620      	mov	r0, r4
 8009e26:	f001 f839 	bl	800ae9c <_Balloc>
 8009e2a:	9001      	str	r0, [sp, #4]
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	d13b      	bne.n	8009ea8 <_dtoa_r+0x320>
 8009e30:	4b11      	ldr	r3, [pc, #68]	; (8009e78 <_dtoa_r+0x2f0>)
 8009e32:	4602      	mov	r2, r0
 8009e34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009e38:	e6c0      	b.n	8009bbc <_dtoa_r+0x34>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e7df      	b.n	8009dfe <_dtoa_r+0x276>
 8009e3e:	bf00      	nop
 8009e40:	636f4361 	.word	0x636f4361
 8009e44:	3fd287a7 	.word	0x3fd287a7
 8009e48:	8b60c8b3 	.word	0x8b60c8b3
 8009e4c:	3fc68a28 	.word	0x3fc68a28
 8009e50:	509f79fb 	.word	0x509f79fb
 8009e54:	3fd34413 	.word	0x3fd34413
 8009e58:	0800ee76 	.word	0x0800ee76
 8009e5c:	0800ee8d 	.word	0x0800ee8d
 8009e60:	7ff00000 	.word	0x7ff00000
 8009e64:	0800ee72 	.word	0x0800ee72
 8009e68:	0800ee69 	.word	0x0800ee69
 8009e6c:	0800ece9 	.word	0x0800ece9
 8009e70:	3ff80000 	.word	0x3ff80000
 8009e74:	0800eff8 	.word	0x0800eff8
 8009e78:	0800eee8 	.word	0x0800eee8
 8009e7c:	2501      	movs	r5, #1
 8009e7e:	2300      	movs	r3, #0
 8009e80:	9306      	str	r3, [sp, #24]
 8009e82:	9508      	str	r5, [sp, #32]
 8009e84:	f04f 33ff 	mov.w	r3, #4294967295
 8009e88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2312      	movs	r3, #18
 8009e90:	e7b0      	b.n	8009df4 <_dtoa_r+0x26c>
 8009e92:	2301      	movs	r3, #1
 8009e94:	9308      	str	r3, [sp, #32]
 8009e96:	e7f5      	b.n	8009e84 <_dtoa_r+0x2fc>
 8009e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e9e:	e7b8      	b.n	8009e12 <_dtoa_r+0x28a>
 8009ea0:	3101      	adds	r1, #1
 8009ea2:	6041      	str	r1, [r0, #4]
 8009ea4:	0052      	lsls	r2, r2, #1
 8009ea6:	e7b8      	b.n	8009e1a <_dtoa_r+0x292>
 8009ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eaa:	9a01      	ldr	r2, [sp, #4]
 8009eac:	601a      	str	r2, [r3, #0]
 8009eae:	9b03      	ldr	r3, [sp, #12]
 8009eb0:	2b0e      	cmp	r3, #14
 8009eb2:	f200 809d 	bhi.w	8009ff0 <_dtoa_r+0x468>
 8009eb6:	2d00      	cmp	r5, #0
 8009eb8:	f000 809a 	beq.w	8009ff0 <_dtoa_r+0x468>
 8009ebc:	9b00      	ldr	r3, [sp, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	dd32      	ble.n	8009f28 <_dtoa_r+0x3a0>
 8009ec2:	4ab7      	ldr	r2, [pc, #732]	; (800a1a0 <_dtoa_r+0x618>)
 8009ec4:	f003 030f 	and.w	r3, r3, #15
 8009ec8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009ecc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ed0:	9b00      	ldr	r3, [sp, #0]
 8009ed2:	05d8      	lsls	r0, r3, #23
 8009ed4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009ed8:	d516      	bpl.n	8009f08 <_dtoa_r+0x380>
 8009eda:	4bb2      	ldr	r3, [pc, #712]	; (800a1a4 <_dtoa_r+0x61c>)
 8009edc:	ec51 0b19 	vmov	r0, r1, d9
 8009ee0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ee4:	f7f6 fcca 	bl	800087c <__aeabi_ddiv>
 8009ee8:	f007 070f 	and.w	r7, r7, #15
 8009eec:	4682      	mov	sl, r0
 8009eee:	468b      	mov	fp, r1
 8009ef0:	2503      	movs	r5, #3
 8009ef2:	4eac      	ldr	r6, [pc, #688]	; (800a1a4 <_dtoa_r+0x61c>)
 8009ef4:	b957      	cbnz	r7, 8009f0c <_dtoa_r+0x384>
 8009ef6:	4642      	mov	r2, r8
 8009ef8:	464b      	mov	r3, r9
 8009efa:	4650      	mov	r0, sl
 8009efc:	4659      	mov	r1, fp
 8009efe:	f7f6 fcbd 	bl	800087c <__aeabi_ddiv>
 8009f02:	4682      	mov	sl, r0
 8009f04:	468b      	mov	fp, r1
 8009f06:	e028      	b.n	8009f5a <_dtoa_r+0x3d2>
 8009f08:	2502      	movs	r5, #2
 8009f0a:	e7f2      	b.n	8009ef2 <_dtoa_r+0x36a>
 8009f0c:	07f9      	lsls	r1, r7, #31
 8009f0e:	d508      	bpl.n	8009f22 <_dtoa_r+0x39a>
 8009f10:	4640      	mov	r0, r8
 8009f12:	4649      	mov	r1, r9
 8009f14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f18:	f7f6 fb86 	bl	8000628 <__aeabi_dmul>
 8009f1c:	3501      	adds	r5, #1
 8009f1e:	4680      	mov	r8, r0
 8009f20:	4689      	mov	r9, r1
 8009f22:	107f      	asrs	r7, r7, #1
 8009f24:	3608      	adds	r6, #8
 8009f26:	e7e5      	b.n	8009ef4 <_dtoa_r+0x36c>
 8009f28:	f000 809b 	beq.w	800a062 <_dtoa_r+0x4da>
 8009f2c:	9b00      	ldr	r3, [sp, #0]
 8009f2e:	4f9d      	ldr	r7, [pc, #628]	; (800a1a4 <_dtoa_r+0x61c>)
 8009f30:	425e      	negs	r6, r3
 8009f32:	4b9b      	ldr	r3, [pc, #620]	; (800a1a0 <_dtoa_r+0x618>)
 8009f34:	f006 020f 	and.w	r2, r6, #15
 8009f38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f40:	ec51 0b19 	vmov	r0, r1, d9
 8009f44:	f7f6 fb70 	bl	8000628 <__aeabi_dmul>
 8009f48:	1136      	asrs	r6, r6, #4
 8009f4a:	4682      	mov	sl, r0
 8009f4c:	468b      	mov	fp, r1
 8009f4e:	2300      	movs	r3, #0
 8009f50:	2502      	movs	r5, #2
 8009f52:	2e00      	cmp	r6, #0
 8009f54:	d17a      	bne.n	800a04c <_dtoa_r+0x4c4>
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1d3      	bne.n	8009f02 <_dtoa_r+0x37a>
 8009f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 8082 	beq.w	800a066 <_dtoa_r+0x4de>
 8009f62:	4b91      	ldr	r3, [pc, #580]	; (800a1a8 <_dtoa_r+0x620>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	4650      	mov	r0, sl
 8009f68:	4659      	mov	r1, fp
 8009f6a:	f7f6 fdcf 	bl	8000b0c <__aeabi_dcmplt>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d079      	beq.n	800a066 <_dtoa_r+0x4de>
 8009f72:	9b03      	ldr	r3, [sp, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d076      	beq.n	800a066 <_dtoa_r+0x4de>
 8009f78:	9b02      	ldr	r3, [sp, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	dd36      	ble.n	8009fec <_dtoa_r+0x464>
 8009f7e:	9b00      	ldr	r3, [sp, #0]
 8009f80:	4650      	mov	r0, sl
 8009f82:	4659      	mov	r1, fp
 8009f84:	1e5f      	subs	r7, r3, #1
 8009f86:	2200      	movs	r2, #0
 8009f88:	4b88      	ldr	r3, [pc, #544]	; (800a1ac <_dtoa_r+0x624>)
 8009f8a:	f7f6 fb4d 	bl	8000628 <__aeabi_dmul>
 8009f8e:	9e02      	ldr	r6, [sp, #8]
 8009f90:	4682      	mov	sl, r0
 8009f92:	468b      	mov	fp, r1
 8009f94:	3501      	adds	r5, #1
 8009f96:	4628      	mov	r0, r5
 8009f98:	f7f6 fadc 	bl	8000554 <__aeabi_i2d>
 8009f9c:	4652      	mov	r2, sl
 8009f9e:	465b      	mov	r3, fp
 8009fa0:	f7f6 fb42 	bl	8000628 <__aeabi_dmul>
 8009fa4:	4b82      	ldr	r3, [pc, #520]	; (800a1b0 <_dtoa_r+0x628>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f7f6 f988 	bl	80002bc <__adddf3>
 8009fac:	46d0      	mov	r8, sl
 8009fae:	46d9      	mov	r9, fp
 8009fb0:	4682      	mov	sl, r0
 8009fb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009fb6:	2e00      	cmp	r6, #0
 8009fb8:	d158      	bne.n	800a06c <_dtoa_r+0x4e4>
 8009fba:	4b7e      	ldr	r3, [pc, #504]	; (800a1b4 <_dtoa_r+0x62c>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	4640      	mov	r0, r8
 8009fc0:	4649      	mov	r1, r9
 8009fc2:	f7f6 f979 	bl	80002b8 <__aeabi_dsub>
 8009fc6:	4652      	mov	r2, sl
 8009fc8:	465b      	mov	r3, fp
 8009fca:	4680      	mov	r8, r0
 8009fcc:	4689      	mov	r9, r1
 8009fce:	f7f6 fdbb 	bl	8000b48 <__aeabi_dcmpgt>
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	f040 8295 	bne.w	800a502 <_dtoa_r+0x97a>
 8009fd8:	4652      	mov	r2, sl
 8009fda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009fde:	4640      	mov	r0, r8
 8009fe0:	4649      	mov	r1, r9
 8009fe2:	f7f6 fd93 	bl	8000b0c <__aeabi_dcmplt>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	f040 8289 	bne.w	800a4fe <_dtoa_r+0x976>
 8009fec:	ec5b ab19 	vmov	sl, fp, d9
 8009ff0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f2c0 8148 	blt.w	800a288 <_dtoa_r+0x700>
 8009ff8:	9a00      	ldr	r2, [sp, #0]
 8009ffa:	2a0e      	cmp	r2, #14
 8009ffc:	f300 8144 	bgt.w	800a288 <_dtoa_r+0x700>
 800a000:	4b67      	ldr	r3, [pc, #412]	; (800a1a0 <_dtoa_r+0x618>)
 800a002:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a006:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f280 80d5 	bge.w	800a1bc <_dtoa_r+0x634>
 800a012:	9b03      	ldr	r3, [sp, #12]
 800a014:	2b00      	cmp	r3, #0
 800a016:	f300 80d1 	bgt.w	800a1bc <_dtoa_r+0x634>
 800a01a:	f040 826f 	bne.w	800a4fc <_dtoa_r+0x974>
 800a01e:	4b65      	ldr	r3, [pc, #404]	; (800a1b4 <_dtoa_r+0x62c>)
 800a020:	2200      	movs	r2, #0
 800a022:	4640      	mov	r0, r8
 800a024:	4649      	mov	r1, r9
 800a026:	f7f6 faff 	bl	8000628 <__aeabi_dmul>
 800a02a:	4652      	mov	r2, sl
 800a02c:	465b      	mov	r3, fp
 800a02e:	f7f6 fd81 	bl	8000b34 <__aeabi_dcmpge>
 800a032:	9e03      	ldr	r6, [sp, #12]
 800a034:	4637      	mov	r7, r6
 800a036:	2800      	cmp	r0, #0
 800a038:	f040 8245 	bne.w	800a4c6 <_dtoa_r+0x93e>
 800a03c:	9d01      	ldr	r5, [sp, #4]
 800a03e:	2331      	movs	r3, #49	; 0x31
 800a040:	f805 3b01 	strb.w	r3, [r5], #1
 800a044:	9b00      	ldr	r3, [sp, #0]
 800a046:	3301      	adds	r3, #1
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	e240      	b.n	800a4ce <_dtoa_r+0x946>
 800a04c:	07f2      	lsls	r2, r6, #31
 800a04e:	d505      	bpl.n	800a05c <_dtoa_r+0x4d4>
 800a050:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a054:	f7f6 fae8 	bl	8000628 <__aeabi_dmul>
 800a058:	3501      	adds	r5, #1
 800a05a:	2301      	movs	r3, #1
 800a05c:	1076      	asrs	r6, r6, #1
 800a05e:	3708      	adds	r7, #8
 800a060:	e777      	b.n	8009f52 <_dtoa_r+0x3ca>
 800a062:	2502      	movs	r5, #2
 800a064:	e779      	b.n	8009f5a <_dtoa_r+0x3d2>
 800a066:	9f00      	ldr	r7, [sp, #0]
 800a068:	9e03      	ldr	r6, [sp, #12]
 800a06a:	e794      	b.n	8009f96 <_dtoa_r+0x40e>
 800a06c:	9901      	ldr	r1, [sp, #4]
 800a06e:	4b4c      	ldr	r3, [pc, #304]	; (800a1a0 <_dtoa_r+0x618>)
 800a070:	4431      	add	r1, r6
 800a072:	910d      	str	r1, [sp, #52]	; 0x34
 800a074:	9908      	ldr	r1, [sp, #32]
 800a076:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a07a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a07e:	2900      	cmp	r1, #0
 800a080:	d043      	beq.n	800a10a <_dtoa_r+0x582>
 800a082:	494d      	ldr	r1, [pc, #308]	; (800a1b8 <_dtoa_r+0x630>)
 800a084:	2000      	movs	r0, #0
 800a086:	f7f6 fbf9 	bl	800087c <__aeabi_ddiv>
 800a08a:	4652      	mov	r2, sl
 800a08c:	465b      	mov	r3, fp
 800a08e:	f7f6 f913 	bl	80002b8 <__aeabi_dsub>
 800a092:	9d01      	ldr	r5, [sp, #4]
 800a094:	4682      	mov	sl, r0
 800a096:	468b      	mov	fp, r1
 800a098:	4649      	mov	r1, r9
 800a09a:	4640      	mov	r0, r8
 800a09c:	f7f6 fd74 	bl	8000b88 <__aeabi_d2iz>
 800a0a0:	4606      	mov	r6, r0
 800a0a2:	f7f6 fa57 	bl	8000554 <__aeabi_i2d>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	4640      	mov	r0, r8
 800a0ac:	4649      	mov	r1, r9
 800a0ae:	f7f6 f903 	bl	80002b8 <__aeabi_dsub>
 800a0b2:	3630      	adds	r6, #48	; 0x30
 800a0b4:	f805 6b01 	strb.w	r6, [r5], #1
 800a0b8:	4652      	mov	r2, sl
 800a0ba:	465b      	mov	r3, fp
 800a0bc:	4680      	mov	r8, r0
 800a0be:	4689      	mov	r9, r1
 800a0c0:	f7f6 fd24 	bl	8000b0c <__aeabi_dcmplt>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d163      	bne.n	800a190 <_dtoa_r+0x608>
 800a0c8:	4642      	mov	r2, r8
 800a0ca:	464b      	mov	r3, r9
 800a0cc:	4936      	ldr	r1, [pc, #216]	; (800a1a8 <_dtoa_r+0x620>)
 800a0ce:	2000      	movs	r0, #0
 800a0d0:	f7f6 f8f2 	bl	80002b8 <__aeabi_dsub>
 800a0d4:	4652      	mov	r2, sl
 800a0d6:	465b      	mov	r3, fp
 800a0d8:	f7f6 fd18 	bl	8000b0c <__aeabi_dcmplt>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	f040 80b5 	bne.w	800a24c <_dtoa_r+0x6c4>
 800a0e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0e4:	429d      	cmp	r5, r3
 800a0e6:	d081      	beq.n	8009fec <_dtoa_r+0x464>
 800a0e8:	4b30      	ldr	r3, [pc, #192]	; (800a1ac <_dtoa_r+0x624>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	4650      	mov	r0, sl
 800a0ee:	4659      	mov	r1, fp
 800a0f0:	f7f6 fa9a 	bl	8000628 <__aeabi_dmul>
 800a0f4:	4b2d      	ldr	r3, [pc, #180]	; (800a1ac <_dtoa_r+0x624>)
 800a0f6:	4682      	mov	sl, r0
 800a0f8:	468b      	mov	fp, r1
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	4649      	mov	r1, r9
 800a0fe:	2200      	movs	r2, #0
 800a100:	f7f6 fa92 	bl	8000628 <__aeabi_dmul>
 800a104:	4680      	mov	r8, r0
 800a106:	4689      	mov	r9, r1
 800a108:	e7c6      	b.n	800a098 <_dtoa_r+0x510>
 800a10a:	4650      	mov	r0, sl
 800a10c:	4659      	mov	r1, fp
 800a10e:	f7f6 fa8b 	bl	8000628 <__aeabi_dmul>
 800a112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a114:	9d01      	ldr	r5, [sp, #4]
 800a116:	930f      	str	r3, [sp, #60]	; 0x3c
 800a118:	4682      	mov	sl, r0
 800a11a:	468b      	mov	fp, r1
 800a11c:	4649      	mov	r1, r9
 800a11e:	4640      	mov	r0, r8
 800a120:	f7f6 fd32 	bl	8000b88 <__aeabi_d2iz>
 800a124:	4606      	mov	r6, r0
 800a126:	f7f6 fa15 	bl	8000554 <__aeabi_i2d>
 800a12a:	3630      	adds	r6, #48	; 0x30
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	4640      	mov	r0, r8
 800a132:	4649      	mov	r1, r9
 800a134:	f7f6 f8c0 	bl	80002b8 <__aeabi_dsub>
 800a138:	f805 6b01 	strb.w	r6, [r5], #1
 800a13c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a13e:	429d      	cmp	r5, r3
 800a140:	4680      	mov	r8, r0
 800a142:	4689      	mov	r9, r1
 800a144:	f04f 0200 	mov.w	r2, #0
 800a148:	d124      	bne.n	800a194 <_dtoa_r+0x60c>
 800a14a:	4b1b      	ldr	r3, [pc, #108]	; (800a1b8 <_dtoa_r+0x630>)
 800a14c:	4650      	mov	r0, sl
 800a14e:	4659      	mov	r1, fp
 800a150:	f7f6 f8b4 	bl	80002bc <__adddf3>
 800a154:	4602      	mov	r2, r0
 800a156:	460b      	mov	r3, r1
 800a158:	4640      	mov	r0, r8
 800a15a:	4649      	mov	r1, r9
 800a15c:	f7f6 fcf4 	bl	8000b48 <__aeabi_dcmpgt>
 800a160:	2800      	cmp	r0, #0
 800a162:	d173      	bne.n	800a24c <_dtoa_r+0x6c4>
 800a164:	4652      	mov	r2, sl
 800a166:	465b      	mov	r3, fp
 800a168:	4913      	ldr	r1, [pc, #76]	; (800a1b8 <_dtoa_r+0x630>)
 800a16a:	2000      	movs	r0, #0
 800a16c:	f7f6 f8a4 	bl	80002b8 <__aeabi_dsub>
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	4640      	mov	r0, r8
 800a176:	4649      	mov	r1, r9
 800a178:	f7f6 fcc8 	bl	8000b0c <__aeabi_dcmplt>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	f43f af35 	beq.w	8009fec <_dtoa_r+0x464>
 800a182:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a184:	1e6b      	subs	r3, r5, #1
 800a186:	930f      	str	r3, [sp, #60]	; 0x3c
 800a188:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a18c:	2b30      	cmp	r3, #48	; 0x30
 800a18e:	d0f8      	beq.n	800a182 <_dtoa_r+0x5fa>
 800a190:	9700      	str	r7, [sp, #0]
 800a192:	e049      	b.n	800a228 <_dtoa_r+0x6a0>
 800a194:	4b05      	ldr	r3, [pc, #20]	; (800a1ac <_dtoa_r+0x624>)
 800a196:	f7f6 fa47 	bl	8000628 <__aeabi_dmul>
 800a19a:	4680      	mov	r8, r0
 800a19c:	4689      	mov	r9, r1
 800a19e:	e7bd      	b.n	800a11c <_dtoa_r+0x594>
 800a1a0:	0800eff8 	.word	0x0800eff8
 800a1a4:	0800efd0 	.word	0x0800efd0
 800a1a8:	3ff00000 	.word	0x3ff00000
 800a1ac:	40240000 	.word	0x40240000
 800a1b0:	401c0000 	.word	0x401c0000
 800a1b4:	40140000 	.word	0x40140000
 800a1b8:	3fe00000 	.word	0x3fe00000
 800a1bc:	9d01      	ldr	r5, [sp, #4]
 800a1be:	4656      	mov	r6, sl
 800a1c0:	465f      	mov	r7, fp
 800a1c2:	4642      	mov	r2, r8
 800a1c4:	464b      	mov	r3, r9
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	f7f6 fb57 	bl	800087c <__aeabi_ddiv>
 800a1ce:	f7f6 fcdb 	bl	8000b88 <__aeabi_d2iz>
 800a1d2:	4682      	mov	sl, r0
 800a1d4:	f7f6 f9be 	bl	8000554 <__aeabi_i2d>
 800a1d8:	4642      	mov	r2, r8
 800a1da:	464b      	mov	r3, r9
 800a1dc:	f7f6 fa24 	bl	8000628 <__aeabi_dmul>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a1ec:	f7f6 f864 	bl	80002b8 <__aeabi_dsub>
 800a1f0:	f805 6b01 	strb.w	r6, [r5], #1
 800a1f4:	9e01      	ldr	r6, [sp, #4]
 800a1f6:	9f03      	ldr	r7, [sp, #12]
 800a1f8:	1bae      	subs	r6, r5, r6
 800a1fa:	42b7      	cmp	r7, r6
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	d135      	bne.n	800a26e <_dtoa_r+0x6e6>
 800a202:	f7f6 f85b 	bl	80002bc <__adddf3>
 800a206:	4642      	mov	r2, r8
 800a208:	464b      	mov	r3, r9
 800a20a:	4606      	mov	r6, r0
 800a20c:	460f      	mov	r7, r1
 800a20e:	f7f6 fc9b 	bl	8000b48 <__aeabi_dcmpgt>
 800a212:	b9d0      	cbnz	r0, 800a24a <_dtoa_r+0x6c2>
 800a214:	4642      	mov	r2, r8
 800a216:	464b      	mov	r3, r9
 800a218:	4630      	mov	r0, r6
 800a21a:	4639      	mov	r1, r7
 800a21c:	f7f6 fc6c 	bl	8000af8 <__aeabi_dcmpeq>
 800a220:	b110      	cbz	r0, 800a228 <_dtoa_r+0x6a0>
 800a222:	f01a 0f01 	tst.w	sl, #1
 800a226:	d110      	bne.n	800a24a <_dtoa_r+0x6c2>
 800a228:	4620      	mov	r0, r4
 800a22a:	ee18 1a10 	vmov	r1, s16
 800a22e:	f000 fe75 	bl	800af1c <_Bfree>
 800a232:	2300      	movs	r3, #0
 800a234:	9800      	ldr	r0, [sp, #0]
 800a236:	702b      	strb	r3, [r5, #0]
 800a238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a23a:	3001      	adds	r0, #1
 800a23c:	6018      	str	r0, [r3, #0]
 800a23e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a240:	2b00      	cmp	r3, #0
 800a242:	f43f acf1 	beq.w	8009c28 <_dtoa_r+0xa0>
 800a246:	601d      	str	r5, [r3, #0]
 800a248:	e4ee      	b.n	8009c28 <_dtoa_r+0xa0>
 800a24a:	9f00      	ldr	r7, [sp, #0]
 800a24c:	462b      	mov	r3, r5
 800a24e:	461d      	mov	r5, r3
 800a250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a254:	2a39      	cmp	r2, #57	; 0x39
 800a256:	d106      	bne.n	800a266 <_dtoa_r+0x6de>
 800a258:	9a01      	ldr	r2, [sp, #4]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d1f7      	bne.n	800a24e <_dtoa_r+0x6c6>
 800a25e:	9901      	ldr	r1, [sp, #4]
 800a260:	2230      	movs	r2, #48	; 0x30
 800a262:	3701      	adds	r7, #1
 800a264:	700a      	strb	r2, [r1, #0]
 800a266:	781a      	ldrb	r2, [r3, #0]
 800a268:	3201      	adds	r2, #1
 800a26a:	701a      	strb	r2, [r3, #0]
 800a26c:	e790      	b.n	800a190 <_dtoa_r+0x608>
 800a26e:	4ba6      	ldr	r3, [pc, #664]	; (800a508 <_dtoa_r+0x980>)
 800a270:	2200      	movs	r2, #0
 800a272:	f7f6 f9d9 	bl	8000628 <__aeabi_dmul>
 800a276:	2200      	movs	r2, #0
 800a278:	2300      	movs	r3, #0
 800a27a:	4606      	mov	r6, r0
 800a27c:	460f      	mov	r7, r1
 800a27e:	f7f6 fc3b 	bl	8000af8 <__aeabi_dcmpeq>
 800a282:	2800      	cmp	r0, #0
 800a284:	d09d      	beq.n	800a1c2 <_dtoa_r+0x63a>
 800a286:	e7cf      	b.n	800a228 <_dtoa_r+0x6a0>
 800a288:	9a08      	ldr	r2, [sp, #32]
 800a28a:	2a00      	cmp	r2, #0
 800a28c:	f000 80d7 	beq.w	800a43e <_dtoa_r+0x8b6>
 800a290:	9a06      	ldr	r2, [sp, #24]
 800a292:	2a01      	cmp	r2, #1
 800a294:	f300 80ba 	bgt.w	800a40c <_dtoa_r+0x884>
 800a298:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a29a:	2a00      	cmp	r2, #0
 800a29c:	f000 80b2 	beq.w	800a404 <_dtoa_r+0x87c>
 800a2a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a2a4:	9e07      	ldr	r6, [sp, #28]
 800a2a6:	9d04      	ldr	r5, [sp, #16]
 800a2a8:	9a04      	ldr	r2, [sp, #16]
 800a2aa:	441a      	add	r2, r3
 800a2ac:	9204      	str	r2, [sp, #16]
 800a2ae:	9a05      	ldr	r2, [sp, #20]
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	441a      	add	r2, r3
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	9205      	str	r2, [sp, #20]
 800a2b8:	f000 ff32 	bl	800b120 <__i2b>
 800a2bc:	4607      	mov	r7, r0
 800a2be:	2d00      	cmp	r5, #0
 800a2c0:	dd0c      	ble.n	800a2dc <_dtoa_r+0x754>
 800a2c2:	9b05      	ldr	r3, [sp, #20]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	dd09      	ble.n	800a2dc <_dtoa_r+0x754>
 800a2c8:	42ab      	cmp	r3, r5
 800a2ca:	9a04      	ldr	r2, [sp, #16]
 800a2cc:	bfa8      	it	ge
 800a2ce:	462b      	movge	r3, r5
 800a2d0:	1ad2      	subs	r2, r2, r3
 800a2d2:	9204      	str	r2, [sp, #16]
 800a2d4:	9a05      	ldr	r2, [sp, #20]
 800a2d6:	1aed      	subs	r5, r5, r3
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	9305      	str	r3, [sp, #20]
 800a2dc:	9b07      	ldr	r3, [sp, #28]
 800a2de:	b31b      	cbz	r3, 800a328 <_dtoa_r+0x7a0>
 800a2e0:	9b08      	ldr	r3, [sp, #32]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f000 80af 	beq.w	800a446 <_dtoa_r+0x8be>
 800a2e8:	2e00      	cmp	r6, #0
 800a2ea:	dd13      	ble.n	800a314 <_dtoa_r+0x78c>
 800a2ec:	4639      	mov	r1, r7
 800a2ee:	4632      	mov	r2, r6
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f000 ffd5 	bl	800b2a0 <__pow5mult>
 800a2f6:	ee18 2a10 	vmov	r2, s16
 800a2fa:	4601      	mov	r1, r0
 800a2fc:	4607      	mov	r7, r0
 800a2fe:	4620      	mov	r0, r4
 800a300:	f000 ff24 	bl	800b14c <__multiply>
 800a304:	ee18 1a10 	vmov	r1, s16
 800a308:	4680      	mov	r8, r0
 800a30a:	4620      	mov	r0, r4
 800a30c:	f000 fe06 	bl	800af1c <_Bfree>
 800a310:	ee08 8a10 	vmov	s16, r8
 800a314:	9b07      	ldr	r3, [sp, #28]
 800a316:	1b9a      	subs	r2, r3, r6
 800a318:	d006      	beq.n	800a328 <_dtoa_r+0x7a0>
 800a31a:	ee18 1a10 	vmov	r1, s16
 800a31e:	4620      	mov	r0, r4
 800a320:	f000 ffbe 	bl	800b2a0 <__pow5mult>
 800a324:	ee08 0a10 	vmov	s16, r0
 800a328:	2101      	movs	r1, #1
 800a32a:	4620      	mov	r0, r4
 800a32c:	f000 fef8 	bl	800b120 <__i2b>
 800a330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a332:	2b00      	cmp	r3, #0
 800a334:	4606      	mov	r6, r0
 800a336:	f340 8088 	ble.w	800a44a <_dtoa_r+0x8c2>
 800a33a:	461a      	mov	r2, r3
 800a33c:	4601      	mov	r1, r0
 800a33e:	4620      	mov	r0, r4
 800a340:	f000 ffae 	bl	800b2a0 <__pow5mult>
 800a344:	9b06      	ldr	r3, [sp, #24]
 800a346:	2b01      	cmp	r3, #1
 800a348:	4606      	mov	r6, r0
 800a34a:	f340 8081 	ble.w	800a450 <_dtoa_r+0x8c8>
 800a34e:	f04f 0800 	mov.w	r8, #0
 800a352:	6933      	ldr	r3, [r6, #16]
 800a354:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a358:	6918      	ldr	r0, [r3, #16]
 800a35a:	f000 fe91 	bl	800b080 <__hi0bits>
 800a35e:	f1c0 0020 	rsb	r0, r0, #32
 800a362:	9b05      	ldr	r3, [sp, #20]
 800a364:	4418      	add	r0, r3
 800a366:	f010 001f 	ands.w	r0, r0, #31
 800a36a:	f000 8092 	beq.w	800a492 <_dtoa_r+0x90a>
 800a36e:	f1c0 0320 	rsb	r3, r0, #32
 800a372:	2b04      	cmp	r3, #4
 800a374:	f340 808a 	ble.w	800a48c <_dtoa_r+0x904>
 800a378:	f1c0 001c 	rsb	r0, r0, #28
 800a37c:	9b04      	ldr	r3, [sp, #16]
 800a37e:	4403      	add	r3, r0
 800a380:	9304      	str	r3, [sp, #16]
 800a382:	9b05      	ldr	r3, [sp, #20]
 800a384:	4403      	add	r3, r0
 800a386:	4405      	add	r5, r0
 800a388:	9305      	str	r3, [sp, #20]
 800a38a:	9b04      	ldr	r3, [sp, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	dd07      	ble.n	800a3a0 <_dtoa_r+0x818>
 800a390:	ee18 1a10 	vmov	r1, s16
 800a394:	461a      	mov	r2, r3
 800a396:	4620      	mov	r0, r4
 800a398:	f000 ffdc 	bl	800b354 <__lshift>
 800a39c:	ee08 0a10 	vmov	s16, r0
 800a3a0:	9b05      	ldr	r3, [sp, #20]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	dd05      	ble.n	800a3b2 <_dtoa_r+0x82a>
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f000 ffd2 	bl	800b354 <__lshift>
 800a3b0:	4606      	mov	r6, r0
 800a3b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d06e      	beq.n	800a496 <_dtoa_r+0x90e>
 800a3b8:	ee18 0a10 	vmov	r0, s16
 800a3bc:	4631      	mov	r1, r6
 800a3be:	f001 f839 	bl	800b434 <__mcmp>
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	da67      	bge.n	800a496 <_dtoa_r+0x90e>
 800a3c6:	9b00      	ldr	r3, [sp, #0]
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	ee18 1a10 	vmov	r1, s16
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	220a      	movs	r2, #10
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f000 fdc3 	bl	800af60 <__multadd>
 800a3da:	9b08      	ldr	r3, [sp, #32]
 800a3dc:	ee08 0a10 	vmov	s16, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f000 81b1 	beq.w	800a748 <_dtoa_r+0xbc0>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	4639      	mov	r1, r7
 800a3ea:	220a      	movs	r2, #10
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f000 fdb7 	bl	800af60 <__multadd>
 800a3f2:	9b02      	ldr	r3, [sp, #8]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	4607      	mov	r7, r0
 800a3f8:	f300 808e 	bgt.w	800a518 <_dtoa_r+0x990>
 800a3fc:	9b06      	ldr	r3, [sp, #24]
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	dc51      	bgt.n	800a4a6 <_dtoa_r+0x91e>
 800a402:	e089      	b.n	800a518 <_dtoa_r+0x990>
 800a404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a406:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a40a:	e74b      	b.n	800a2a4 <_dtoa_r+0x71c>
 800a40c:	9b03      	ldr	r3, [sp, #12]
 800a40e:	1e5e      	subs	r6, r3, #1
 800a410:	9b07      	ldr	r3, [sp, #28]
 800a412:	42b3      	cmp	r3, r6
 800a414:	bfbf      	itttt	lt
 800a416:	9b07      	ldrlt	r3, [sp, #28]
 800a418:	9607      	strlt	r6, [sp, #28]
 800a41a:	1af2      	sublt	r2, r6, r3
 800a41c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a41e:	bfb6      	itet	lt
 800a420:	189b      	addlt	r3, r3, r2
 800a422:	1b9e      	subge	r6, r3, r6
 800a424:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a426:	9b03      	ldr	r3, [sp, #12]
 800a428:	bfb8      	it	lt
 800a42a:	2600      	movlt	r6, #0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	bfb7      	itett	lt
 800a430:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a434:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a438:	1a9d      	sublt	r5, r3, r2
 800a43a:	2300      	movlt	r3, #0
 800a43c:	e734      	b.n	800a2a8 <_dtoa_r+0x720>
 800a43e:	9e07      	ldr	r6, [sp, #28]
 800a440:	9d04      	ldr	r5, [sp, #16]
 800a442:	9f08      	ldr	r7, [sp, #32]
 800a444:	e73b      	b.n	800a2be <_dtoa_r+0x736>
 800a446:	9a07      	ldr	r2, [sp, #28]
 800a448:	e767      	b.n	800a31a <_dtoa_r+0x792>
 800a44a:	9b06      	ldr	r3, [sp, #24]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	dc18      	bgt.n	800a482 <_dtoa_r+0x8fa>
 800a450:	f1ba 0f00 	cmp.w	sl, #0
 800a454:	d115      	bne.n	800a482 <_dtoa_r+0x8fa>
 800a456:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a45a:	b993      	cbnz	r3, 800a482 <_dtoa_r+0x8fa>
 800a45c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a460:	0d1b      	lsrs	r3, r3, #20
 800a462:	051b      	lsls	r3, r3, #20
 800a464:	b183      	cbz	r3, 800a488 <_dtoa_r+0x900>
 800a466:	9b04      	ldr	r3, [sp, #16]
 800a468:	3301      	adds	r3, #1
 800a46a:	9304      	str	r3, [sp, #16]
 800a46c:	9b05      	ldr	r3, [sp, #20]
 800a46e:	3301      	adds	r3, #1
 800a470:	9305      	str	r3, [sp, #20]
 800a472:	f04f 0801 	mov.w	r8, #1
 800a476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f47f af6a 	bne.w	800a352 <_dtoa_r+0x7ca>
 800a47e:	2001      	movs	r0, #1
 800a480:	e76f      	b.n	800a362 <_dtoa_r+0x7da>
 800a482:	f04f 0800 	mov.w	r8, #0
 800a486:	e7f6      	b.n	800a476 <_dtoa_r+0x8ee>
 800a488:	4698      	mov	r8, r3
 800a48a:	e7f4      	b.n	800a476 <_dtoa_r+0x8ee>
 800a48c:	f43f af7d 	beq.w	800a38a <_dtoa_r+0x802>
 800a490:	4618      	mov	r0, r3
 800a492:	301c      	adds	r0, #28
 800a494:	e772      	b.n	800a37c <_dtoa_r+0x7f4>
 800a496:	9b03      	ldr	r3, [sp, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	dc37      	bgt.n	800a50c <_dtoa_r+0x984>
 800a49c:	9b06      	ldr	r3, [sp, #24]
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	dd34      	ble.n	800a50c <_dtoa_r+0x984>
 800a4a2:	9b03      	ldr	r3, [sp, #12]
 800a4a4:	9302      	str	r3, [sp, #8]
 800a4a6:	9b02      	ldr	r3, [sp, #8]
 800a4a8:	b96b      	cbnz	r3, 800a4c6 <_dtoa_r+0x93e>
 800a4aa:	4631      	mov	r1, r6
 800a4ac:	2205      	movs	r2, #5
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f000 fd56 	bl	800af60 <__multadd>
 800a4b4:	4601      	mov	r1, r0
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	ee18 0a10 	vmov	r0, s16
 800a4bc:	f000 ffba 	bl	800b434 <__mcmp>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	f73f adbb 	bgt.w	800a03c <_dtoa_r+0x4b4>
 800a4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c8:	9d01      	ldr	r5, [sp, #4]
 800a4ca:	43db      	mvns	r3, r3
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	f04f 0800 	mov.w	r8, #0
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f000 fd21 	bl	800af1c <_Bfree>
 800a4da:	2f00      	cmp	r7, #0
 800a4dc:	f43f aea4 	beq.w	800a228 <_dtoa_r+0x6a0>
 800a4e0:	f1b8 0f00 	cmp.w	r8, #0
 800a4e4:	d005      	beq.n	800a4f2 <_dtoa_r+0x96a>
 800a4e6:	45b8      	cmp	r8, r7
 800a4e8:	d003      	beq.n	800a4f2 <_dtoa_r+0x96a>
 800a4ea:	4641      	mov	r1, r8
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f000 fd15 	bl	800af1c <_Bfree>
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f000 fd11 	bl	800af1c <_Bfree>
 800a4fa:	e695      	b.n	800a228 <_dtoa_r+0x6a0>
 800a4fc:	2600      	movs	r6, #0
 800a4fe:	4637      	mov	r7, r6
 800a500:	e7e1      	b.n	800a4c6 <_dtoa_r+0x93e>
 800a502:	9700      	str	r7, [sp, #0]
 800a504:	4637      	mov	r7, r6
 800a506:	e599      	b.n	800a03c <_dtoa_r+0x4b4>
 800a508:	40240000 	.word	0x40240000
 800a50c:	9b08      	ldr	r3, [sp, #32]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f000 80ca 	beq.w	800a6a8 <_dtoa_r+0xb20>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	9302      	str	r3, [sp, #8]
 800a518:	2d00      	cmp	r5, #0
 800a51a:	dd05      	ble.n	800a528 <_dtoa_r+0x9a0>
 800a51c:	4639      	mov	r1, r7
 800a51e:	462a      	mov	r2, r5
 800a520:	4620      	mov	r0, r4
 800a522:	f000 ff17 	bl	800b354 <__lshift>
 800a526:	4607      	mov	r7, r0
 800a528:	f1b8 0f00 	cmp.w	r8, #0
 800a52c:	d05b      	beq.n	800a5e6 <_dtoa_r+0xa5e>
 800a52e:	6879      	ldr	r1, [r7, #4]
 800a530:	4620      	mov	r0, r4
 800a532:	f000 fcb3 	bl	800ae9c <_Balloc>
 800a536:	4605      	mov	r5, r0
 800a538:	b928      	cbnz	r0, 800a546 <_dtoa_r+0x9be>
 800a53a:	4b87      	ldr	r3, [pc, #540]	; (800a758 <_dtoa_r+0xbd0>)
 800a53c:	4602      	mov	r2, r0
 800a53e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a542:	f7ff bb3b 	b.w	8009bbc <_dtoa_r+0x34>
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	3202      	adds	r2, #2
 800a54a:	0092      	lsls	r2, r2, #2
 800a54c:	f107 010c 	add.w	r1, r7, #12
 800a550:	300c      	adds	r0, #12
 800a552:	f000 fc95 	bl	800ae80 <memcpy>
 800a556:	2201      	movs	r2, #1
 800a558:	4629      	mov	r1, r5
 800a55a:	4620      	mov	r0, r4
 800a55c:	f000 fefa 	bl	800b354 <__lshift>
 800a560:	9b01      	ldr	r3, [sp, #4]
 800a562:	f103 0901 	add.w	r9, r3, #1
 800a566:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a56a:	4413      	add	r3, r2
 800a56c:	9305      	str	r3, [sp, #20]
 800a56e:	f00a 0301 	and.w	r3, sl, #1
 800a572:	46b8      	mov	r8, r7
 800a574:	9304      	str	r3, [sp, #16]
 800a576:	4607      	mov	r7, r0
 800a578:	4631      	mov	r1, r6
 800a57a:	ee18 0a10 	vmov	r0, s16
 800a57e:	f7ff fa77 	bl	8009a70 <quorem>
 800a582:	4641      	mov	r1, r8
 800a584:	9002      	str	r0, [sp, #8]
 800a586:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a58a:	ee18 0a10 	vmov	r0, s16
 800a58e:	f000 ff51 	bl	800b434 <__mcmp>
 800a592:	463a      	mov	r2, r7
 800a594:	9003      	str	r0, [sp, #12]
 800a596:	4631      	mov	r1, r6
 800a598:	4620      	mov	r0, r4
 800a59a:	f000 ff67 	bl	800b46c <__mdiff>
 800a59e:	68c2      	ldr	r2, [r0, #12]
 800a5a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800a5a4:	4605      	mov	r5, r0
 800a5a6:	bb02      	cbnz	r2, 800a5ea <_dtoa_r+0xa62>
 800a5a8:	4601      	mov	r1, r0
 800a5aa:	ee18 0a10 	vmov	r0, s16
 800a5ae:	f000 ff41 	bl	800b434 <__mcmp>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	9207      	str	r2, [sp, #28]
 800a5ba:	f000 fcaf 	bl	800af1c <_Bfree>
 800a5be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a5c2:	ea43 0102 	orr.w	r1, r3, r2
 800a5c6:	9b04      	ldr	r3, [sp, #16]
 800a5c8:	430b      	orrs	r3, r1
 800a5ca:	464d      	mov	r5, r9
 800a5cc:	d10f      	bne.n	800a5ee <_dtoa_r+0xa66>
 800a5ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a5d2:	d02a      	beq.n	800a62a <_dtoa_r+0xaa2>
 800a5d4:	9b03      	ldr	r3, [sp, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	dd02      	ble.n	800a5e0 <_dtoa_r+0xa58>
 800a5da:	9b02      	ldr	r3, [sp, #8]
 800a5dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a5e0:	f88b a000 	strb.w	sl, [fp]
 800a5e4:	e775      	b.n	800a4d2 <_dtoa_r+0x94a>
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	e7ba      	b.n	800a560 <_dtoa_r+0x9d8>
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	e7e2      	b.n	800a5b4 <_dtoa_r+0xa2c>
 800a5ee:	9b03      	ldr	r3, [sp, #12]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	db04      	blt.n	800a5fe <_dtoa_r+0xa76>
 800a5f4:	9906      	ldr	r1, [sp, #24]
 800a5f6:	430b      	orrs	r3, r1
 800a5f8:	9904      	ldr	r1, [sp, #16]
 800a5fa:	430b      	orrs	r3, r1
 800a5fc:	d122      	bne.n	800a644 <_dtoa_r+0xabc>
 800a5fe:	2a00      	cmp	r2, #0
 800a600:	ddee      	ble.n	800a5e0 <_dtoa_r+0xa58>
 800a602:	ee18 1a10 	vmov	r1, s16
 800a606:	2201      	movs	r2, #1
 800a608:	4620      	mov	r0, r4
 800a60a:	f000 fea3 	bl	800b354 <__lshift>
 800a60e:	4631      	mov	r1, r6
 800a610:	ee08 0a10 	vmov	s16, r0
 800a614:	f000 ff0e 	bl	800b434 <__mcmp>
 800a618:	2800      	cmp	r0, #0
 800a61a:	dc03      	bgt.n	800a624 <_dtoa_r+0xa9c>
 800a61c:	d1e0      	bne.n	800a5e0 <_dtoa_r+0xa58>
 800a61e:	f01a 0f01 	tst.w	sl, #1
 800a622:	d0dd      	beq.n	800a5e0 <_dtoa_r+0xa58>
 800a624:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a628:	d1d7      	bne.n	800a5da <_dtoa_r+0xa52>
 800a62a:	2339      	movs	r3, #57	; 0x39
 800a62c:	f88b 3000 	strb.w	r3, [fp]
 800a630:	462b      	mov	r3, r5
 800a632:	461d      	mov	r5, r3
 800a634:	3b01      	subs	r3, #1
 800a636:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a63a:	2a39      	cmp	r2, #57	; 0x39
 800a63c:	d071      	beq.n	800a722 <_dtoa_r+0xb9a>
 800a63e:	3201      	adds	r2, #1
 800a640:	701a      	strb	r2, [r3, #0]
 800a642:	e746      	b.n	800a4d2 <_dtoa_r+0x94a>
 800a644:	2a00      	cmp	r2, #0
 800a646:	dd07      	ble.n	800a658 <_dtoa_r+0xad0>
 800a648:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a64c:	d0ed      	beq.n	800a62a <_dtoa_r+0xaa2>
 800a64e:	f10a 0301 	add.w	r3, sl, #1
 800a652:	f88b 3000 	strb.w	r3, [fp]
 800a656:	e73c      	b.n	800a4d2 <_dtoa_r+0x94a>
 800a658:	9b05      	ldr	r3, [sp, #20]
 800a65a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a65e:	4599      	cmp	r9, r3
 800a660:	d047      	beq.n	800a6f2 <_dtoa_r+0xb6a>
 800a662:	ee18 1a10 	vmov	r1, s16
 800a666:	2300      	movs	r3, #0
 800a668:	220a      	movs	r2, #10
 800a66a:	4620      	mov	r0, r4
 800a66c:	f000 fc78 	bl	800af60 <__multadd>
 800a670:	45b8      	cmp	r8, r7
 800a672:	ee08 0a10 	vmov	s16, r0
 800a676:	f04f 0300 	mov.w	r3, #0
 800a67a:	f04f 020a 	mov.w	r2, #10
 800a67e:	4641      	mov	r1, r8
 800a680:	4620      	mov	r0, r4
 800a682:	d106      	bne.n	800a692 <_dtoa_r+0xb0a>
 800a684:	f000 fc6c 	bl	800af60 <__multadd>
 800a688:	4680      	mov	r8, r0
 800a68a:	4607      	mov	r7, r0
 800a68c:	f109 0901 	add.w	r9, r9, #1
 800a690:	e772      	b.n	800a578 <_dtoa_r+0x9f0>
 800a692:	f000 fc65 	bl	800af60 <__multadd>
 800a696:	4639      	mov	r1, r7
 800a698:	4680      	mov	r8, r0
 800a69a:	2300      	movs	r3, #0
 800a69c:	220a      	movs	r2, #10
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f000 fc5e 	bl	800af60 <__multadd>
 800a6a4:	4607      	mov	r7, r0
 800a6a6:	e7f1      	b.n	800a68c <_dtoa_r+0xb04>
 800a6a8:	9b03      	ldr	r3, [sp, #12]
 800a6aa:	9302      	str	r3, [sp, #8]
 800a6ac:	9d01      	ldr	r5, [sp, #4]
 800a6ae:	ee18 0a10 	vmov	r0, s16
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	f7ff f9dc 	bl	8009a70 <quorem>
 800a6b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a6bc:	9b01      	ldr	r3, [sp, #4]
 800a6be:	f805 ab01 	strb.w	sl, [r5], #1
 800a6c2:	1aea      	subs	r2, r5, r3
 800a6c4:	9b02      	ldr	r3, [sp, #8]
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	dd09      	ble.n	800a6de <_dtoa_r+0xb56>
 800a6ca:	ee18 1a10 	vmov	r1, s16
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	220a      	movs	r2, #10
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 fc44 	bl	800af60 <__multadd>
 800a6d8:	ee08 0a10 	vmov	s16, r0
 800a6dc:	e7e7      	b.n	800a6ae <_dtoa_r+0xb26>
 800a6de:	9b02      	ldr	r3, [sp, #8]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	bfc8      	it	gt
 800a6e4:	461d      	movgt	r5, r3
 800a6e6:	9b01      	ldr	r3, [sp, #4]
 800a6e8:	bfd8      	it	le
 800a6ea:	2501      	movle	r5, #1
 800a6ec:	441d      	add	r5, r3
 800a6ee:	f04f 0800 	mov.w	r8, #0
 800a6f2:	ee18 1a10 	vmov	r1, s16
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 fe2b 	bl	800b354 <__lshift>
 800a6fe:	4631      	mov	r1, r6
 800a700:	ee08 0a10 	vmov	s16, r0
 800a704:	f000 fe96 	bl	800b434 <__mcmp>
 800a708:	2800      	cmp	r0, #0
 800a70a:	dc91      	bgt.n	800a630 <_dtoa_r+0xaa8>
 800a70c:	d102      	bne.n	800a714 <_dtoa_r+0xb8c>
 800a70e:	f01a 0f01 	tst.w	sl, #1
 800a712:	d18d      	bne.n	800a630 <_dtoa_r+0xaa8>
 800a714:	462b      	mov	r3, r5
 800a716:	461d      	mov	r5, r3
 800a718:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a71c:	2a30      	cmp	r2, #48	; 0x30
 800a71e:	d0fa      	beq.n	800a716 <_dtoa_r+0xb8e>
 800a720:	e6d7      	b.n	800a4d2 <_dtoa_r+0x94a>
 800a722:	9a01      	ldr	r2, [sp, #4]
 800a724:	429a      	cmp	r2, r3
 800a726:	d184      	bne.n	800a632 <_dtoa_r+0xaaa>
 800a728:	9b00      	ldr	r3, [sp, #0]
 800a72a:	3301      	adds	r3, #1
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	2331      	movs	r3, #49	; 0x31
 800a730:	7013      	strb	r3, [r2, #0]
 800a732:	e6ce      	b.n	800a4d2 <_dtoa_r+0x94a>
 800a734:	4b09      	ldr	r3, [pc, #36]	; (800a75c <_dtoa_r+0xbd4>)
 800a736:	f7ff ba95 	b.w	8009c64 <_dtoa_r+0xdc>
 800a73a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f47f aa6e 	bne.w	8009c1e <_dtoa_r+0x96>
 800a742:	4b07      	ldr	r3, [pc, #28]	; (800a760 <_dtoa_r+0xbd8>)
 800a744:	f7ff ba8e 	b.w	8009c64 <_dtoa_r+0xdc>
 800a748:	9b02      	ldr	r3, [sp, #8]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	dcae      	bgt.n	800a6ac <_dtoa_r+0xb24>
 800a74e:	9b06      	ldr	r3, [sp, #24]
 800a750:	2b02      	cmp	r3, #2
 800a752:	f73f aea8 	bgt.w	800a4a6 <_dtoa_r+0x91e>
 800a756:	e7a9      	b.n	800a6ac <_dtoa_r+0xb24>
 800a758:	0800eee8 	.word	0x0800eee8
 800a75c:	0800ece8 	.word	0x0800ece8
 800a760:	0800ee69 	.word	0x0800ee69

0800a764 <rshift>:
 800a764:	6903      	ldr	r3, [r0, #16]
 800a766:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a76a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a76e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a772:	f100 0414 	add.w	r4, r0, #20
 800a776:	dd45      	ble.n	800a804 <rshift+0xa0>
 800a778:	f011 011f 	ands.w	r1, r1, #31
 800a77c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a780:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a784:	d10c      	bne.n	800a7a0 <rshift+0x3c>
 800a786:	f100 0710 	add.w	r7, r0, #16
 800a78a:	4629      	mov	r1, r5
 800a78c:	42b1      	cmp	r1, r6
 800a78e:	d334      	bcc.n	800a7fa <rshift+0x96>
 800a790:	1a9b      	subs	r3, r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	1eea      	subs	r2, r5, #3
 800a796:	4296      	cmp	r6, r2
 800a798:	bf38      	it	cc
 800a79a:	2300      	movcc	r3, #0
 800a79c:	4423      	add	r3, r4
 800a79e:	e015      	b.n	800a7cc <rshift+0x68>
 800a7a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a7a4:	f1c1 0820 	rsb	r8, r1, #32
 800a7a8:	40cf      	lsrs	r7, r1
 800a7aa:	f105 0e04 	add.w	lr, r5, #4
 800a7ae:	46a1      	mov	r9, r4
 800a7b0:	4576      	cmp	r6, lr
 800a7b2:	46f4      	mov	ip, lr
 800a7b4:	d815      	bhi.n	800a7e2 <rshift+0x7e>
 800a7b6:	1a9a      	subs	r2, r3, r2
 800a7b8:	0092      	lsls	r2, r2, #2
 800a7ba:	3a04      	subs	r2, #4
 800a7bc:	3501      	adds	r5, #1
 800a7be:	42ae      	cmp	r6, r5
 800a7c0:	bf38      	it	cc
 800a7c2:	2200      	movcc	r2, #0
 800a7c4:	18a3      	adds	r3, r4, r2
 800a7c6:	50a7      	str	r7, [r4, r2]
 800a7c8:	b107      	cbz	r7, 800a7cc <rshift+0x68>
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	1b1a      	subs	r2, r3, r4
 800a7ce:	42a3      	cmp	r3, r4
 800a7d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a7d4:	bf08      	it	eq
 800a7d6:	2300      	moveq	r3, #0
 800a7d8:	6102      	str	r2, [r0, #16]
 800a7da:	bf08      	it	eq
 800a7dc:	6143      	streq	r3, [r0, #20]
 800a7de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7e2:	f8dc c000 	ldr.w	ip, [ip]
 800a7e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a7ea:	ea4c 0707 	orr.w	r7, ip, r7
 800a7ee:	f849 7b04 	str.w	r7, [r9], #4
 800a7f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7f6:	40cf      	lsrs	r7, r1
 800a7f8:	e7da      	b.n	800a7b0 <rshift+0x4c>
 800a7fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800a7fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800a802:	e7c3      	b.n	800a78c <rshift+0x28>
 800a804:	4623      	mov	r3, r4
 800a806:	e7e1      	b.n	800a7cc <rshift+0x68>

0800a808 <__hexdig_fun>:
 800a808:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a80c:	2b09      	cmp	r3, #9
 800a80e:	d802      	bhi.n	800a816 <__hexdig_fun+0xe>
 800a810:	3820      	subs	r0, #32
 800a812:	b2c0      	uxtb	r0, r0
 800a814:	4770      	bx	lr
 800a816:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a81a:	2b05      	cmp	r3, #5
 800a81c:	d801      	bhi.n	800a822 <__hexdig_fun+0x1a>
 800a81e:	3847      	subs	r0, #71	; 0x47
 800a820:	e7f7      	b.n	800a812 <__hexdig_fun+0xa>
 800a822:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a826:	2b05      	cmp	r3, #5
 800a828:	d801      	bhi.n	800a82e <__hexdig_fun+0x26>
 800a82a:	3827      	subs	r0, #39	; 0x27
 800a82c:	e7f1      	b.n	800a812 <__hexdig_fun+0xa>
 800a82e:	2000      	movs	r0, #0
 800a830:	4770      	bx	lr
	...

0800a834 <__gethex>:
 800a834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a838:	ed2d 8b02 	vpush	{d8}
 800a83c:	b089      	sub	sp, #36	; 0x24
 800a83e:	ee08 0a10 	vmov	s16, r0
 800a842:	9304      	str	r3, [sp, #16]
 800a844:	4bb4      	ldr	r3, [pc, #720]	; (800ab18 <__gethex+0x2e4>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	9301      	str	r3, [sp, #4]
 800a84a:	4618      	mov	r0, r3
 800a84c:	468b      	mov	fp, r1
 800a84e:	4690      	mov	r8, r2
 800a850:	f7f5 fcd0 	bl	80001f4 <strlen>
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	f8db 2000 	ldr.w	r2, [fp]
 800a85a:	4403      	add	r3, r0
 800a85c:	4682      	mov	sl, r0
 800a85e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a862:	9305      	str	r3, [sp, #20]
 800a864:	1c93      	adds	r3, r2, #2
 800a866:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a86a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a86e:	32fe      	adds	r2, #254	; 0xfe
 800a870:	18d1      	adds	r1, r2, r3
 800a872:	461f      	mov	r7, r3
 800a874:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a878:	9100      	str	r1, [sp, #0]
 800a87a:	2830      	cmp	r0, #48	; 0x30
 800a87c:	d0f8      	beq.n	800a870 <__gethex+0x3c>
 800a87e:	f7ff ffc3 	bl	800a808 <__hexdig_fun>
 800a882:	4604      	mov	r4, r0
 800a884:	2800      	cmp	r0, #0
 800a886:	d13a      	bne.n	800a8fe <__gethex+0xca>
 800a888:	9901      	ldr	r1, [sp, #4]
 800a88a:	4652      	mov	r2, sl
 800a88c:	4638      	mov	r0, r7
 800a88e:	f001 fa33 	bl	800bcf8 <strncmp>
 800a892:	4605      	mov	r5, r0
 800a894:	2800      	cmp	r0, #0
 800a896:	d168      	bne.n	800a96a <__gethex+0x136>
 800a898:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a89c:	eb07 060a 	add.w	r6, r7, sl
 800a8a0:	f7ff ffb2 	bl	800a808 <__hexdig_fun>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d062      	beq.n	800a96e <__gethex+0x13a>
 800a8a8:	4633      	mov	r3, r6
 800a8aa:	7818      	ldrb	r0, [r3, #0]
 800a8ac:	2830      	cmp	r0, #48	; 0x30
 800a8ae:	461f      	mov	r7, r3
 800a8b0:	f103 0301 	add.w	r3, r3, #1
 800a8b4:	d0f9      	beq.n	800a8aa <__gethex+0x76>
 800a8b6:	f7ff ffa7 	bl	800a808 <__hexdig_fun>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	fab0 f480 	clz	r4, r0
 800a8c0:	0964      	lsrs	r4, r4, #5
 800a8c2:	4635      	mov	r5, r6
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	463a      	mov	r2, r7
 800a8c8:	4616      	mov	r6, r2
 800a8ca:	3201      	adds	r2, #1
 800a8cc:	7830      	ldrb	r0, [r6, #0]
 800a8ce:	f7ff ff9b 	bl	800a808 <__hexdig_fun>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d1f8      	bne.n	800a8c8 <__gethex+0x94>
 800a8d6:	9901      	ldr	r1, [sp, #4]
 800a8d8:	4652      	mov	r2, sl
 800a8da:	4630      	mov	r0, r6
 800a8dc:	f001 fa0c 	bl	800bcf8 <strncmp>
 800a8e0:	b980      	cbnz	r0, 800a904 <__gethex+0xd0>
 800a8e2:	b94d      	cbnz	r5, 800a8f8 <__gethex+0xc4>
 800a8e4:	eb06 050a 	add.w	r5, r6, sl
 800a8e8:	462a      	mov	r2, r5
 800a8ea:	4616      	mov	r6, r2
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	7830      	ldrb	r0, [r6, #0]
 800a8f0:	f7ff ff8a 	bl	800a808 <__hexdig_fun>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	d1f8      	bne.n	800a8ea <__gethex+0xb6>
 800a8f8:	1bad      	subs	r5, r5, r6
 800a8fa:	00ad      	lsls	r5, r5, #2
 800a8fc:	e004      	b.n	800a908 <__gethex+0xd4>
 800a8fe:	2400      	movs	r4, #0
 800a900:	4625      	mov	r5, r4
 800a902:	e7e0      	b.n	800a8c6 <__gethex+0x92>
 800a904:	2d00      	cmp	r5, #0
 800a906:	d1f7      	bne.n	800a8f8 <__gethex+0xc4>
 800a908:	7833      	ldrb	r3, [r6, #0]
 800a90a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a90e:	2b50      	cmp	r3, #80	; 0x50
 800a910:	d13b      	bne.n	800a98a <__gethex+0x156>
 800a912:	7873      	ldrb	r3, [r6, #1]
 800a914:	2b2b      	cmp	r3, #43	; 0x2b
 800a916:	d02c      	beq.n	800a972 <__gethex+0x13e>
 800a918:	2b2d      	cmp	r3, #45	; 0x2d
 800a91a:	d02e      	beq.n	800a97a <__gethex+0x146>
 800a91c:	1c71      	adds	r1, r6, #1
 800a91e:	f04f 0900 	mov.w	r9, #0
 800a922:	7808      	ldrb	r0, [r1, #0]
 800a924:	f7ff ff70 	bl	800a808 <__hexdig_fun>
 800a928:	1e43      	subs	r3, r0, #1
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	2b18      	cmp	r3, #24
 800a92e:	d82c      	bhi.n	800a98a <__gethex+0x156>
 800a930:	f1a0 0210 	sub.w	r2, r0, #16
 800a934:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a938:	f7ff ff66 	bl	800a808 <__hexdig_fun>
 800a93c:	1e43      	subs	r3, r0, #1
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	2b18      	cmp	r3, #24
 800a942:	d91d      	bls.n	800a980 <__gethex+0x14c>
 800a944:	f1b9 0f00 	cmp.w	r9, #0
 800a948:	d000      	beq.n	800a94c <__gethex+0x118>
 800a94a:	4252      	negs	r2, r2
 800a94c:	4415      	add	r5, r2
 800a94e:	f8cb 1000 	str.w	r1, [fp]
 800a952:	b1e4      	cbz	r4, 800a98e <__gethex+0x15a>
 800a954:	9b00      	ldr	r3, [sp, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	bf14      	ite	ne
 800a95a:	2700      	movne	r7, #0
 800a95c:	2706      	moveq	r7, #6
 800a95e:	4638      	mov	r0, r7
 800a960:	b009      	add	sp, #36	; 0x24
 800a962:	ecbd 8b02 	vpop	{d8}
 800a966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96a:	463e      	mov	r6, r7
 800a96c:	4625      	mov	r5, r4
 800a96e:	2401      	movs	r4, #1
 800a970:	e7ca      	b.n	800a908 <__gethex+0xd4>
 800a972:	f04f 0900 	mov.w	r9, #0
 800a976:	1cb1      	adds	r1, r6, #2
 800a978:	e7d3      	b.n	800a922 <__gethex+0xee>
 800a97a:	f04f 0901 	mov.w	r9, #1
 800a97e:	e7fa      	b.n	800a976 <__gethex+0x142>
 800a980:	230a      	movs	r3, #10
 800a982:	fb03 0202 	mla	r2, r3, r2, r0
 800a986:	3a10      	subs	r2, #16
 800a988:	e7d4      	b.n	800a934 <__gethex+0x100>
 800a98a:	4631      	mov	r1, r6
 800a98c:	e7df      	b.n	800a94e <__gethex+0x11a>
 800a98e:	1bf3      	subs	r3, r6, r7
 800a990:	3b01      	subs	r3, #1
 800a992:	4621      	mov	r1, r4
 800a994:	2b07      	cmp	r3, #7
 800a996:	dc0b      	bgt.n	800a9b0 <__gethex+0x17c>
 800a998:	ee18 0a10 	vmov	r0, s16
 800a99c:	f000 fa7e 	bl	800ae9c <_Balloc>
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	b940      	cbnz	r0, 800a9b6 <__gethex+0x182>
 800a9a4:	4b5d      	ldr	r3, [pc, #372]	; (800ab1c <__gethex+0x2e8>)
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	21de      	movs	r1, #222	; 0xde
 800a9aa:	485d      	ldr	r0, [pc, #372]	; (800ab20 <__gethex+0x2ec>)
 800a9ac:	f001 f9c6 	bl	800bd3c <__assert_func>
 800a9b0:	3101      	adds	r1, #1
 800a9b2:	105b      	asrs	r3, r3, #1
 800a9b4:	e7ee      	b.n	800a994 <__gethex+0x160>
 800a9b6:	f100 0914 	add.w	r9, r0, #20
 800a9ba:	f04f 0b00 	mov.w	fp, #0
 800a9be:	f1ca 0301 	rsb	r3, sl, #1
 800a9c2:	f8cd 9008 	str.w	r9, [sp, #8]
 800a9c6:	f8cd b000 	str.w	fp, [sp]
 800a9ca:	9306      	str	r3, [sp, #24]
 800a9cc:	42b7      	cmp	r7, r6
 800a9ce:	d340      	bcc.n	800aa52 <__gethex+0x21e>
 800a9d0:	9802      	ldr	r0, [sp, #8]
 800a9d2:	9b00      	ldr	r3, [sp, #0]
 800a9d4:	f840 3b04 	str.w	r3, [r0], #4
 800a9d8:	eba0 0009 	sub.w	r0, r0, r9
 800a9dc:	1080      	asrs	r0, r0, #2
 800a9de:	0146      	lsls	r6, r0, #5
 800a9e0:	6120      	str	r0, [r4, #16]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f000 fb4c 	bl	800b080 <__hi0bits>
 800a9e8:	1a30      	subs	r0, r6, r0
 800a9ea:	f8d8 6000 	ldr.w	r6, [r8]
 800a9ee:	42b0      	cmp	r0, r6
 800a9f0:	dd63      	ble.n	800aaba <__gethex+0x286>
 800a9f2:	1b87      	subs	r7, r0, r6
 800a9f4:	4639      	mov	r1, r7
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f000 fef0 	bl	800b7dc <__any_on>
 800a9fc:	4682      	mov	sl, r0
 800a9fe:	b1a8      	cbz	r0, 800aa2c <__gethex+0x1f8>
 800aa00:	1e7b      	subs	r3, r7, #1
 800aa02:	1159      	asrs	r1, r3, #5
 800aa04:	f003 021f 	and.w	r2, r3, #31
 800aa08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aa0c:	f04f 0a01 	mov.w	sl, #1
 800aa10:	fa0a f202 	lsl.w	r2, sl, r2
 800aa14:	420a      	tst	r2, r1
 800aa16:	d009      	beq.n	800aa2c <__gethex+0x1f8>
 800aa18:	4553      	cmp	r3, sl
 800aa1a:	dd05      	ble.n	800aa28 <__gethex+0x1f4>
 800aa1c:	1eb9      	subs	r1, r7, #2
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f000 fedc 	bl	800b7dc <__any_on>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d145      	bne.n	800aab4 <__gethex+0x280>
 800aa28:	f04f 0a02 	mov.w	sl, #2
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f7ff fe98 	bl	800a764 <rshift>
 800aa34:	443d      	add	r5, r7
 800aa36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa3a:	42ab      	cmp	r3, r5
 800aa3c:	da4c      	bge.n	800aad8 <__gethex+0x2a4>
 800aa3e:	ee18 0a10 	vmov	r0, s16
 800aa42:	4621      	mov	r1, r4
 800aa44:	f000 fa6a 	bl	800af1c <_Bfree>
 800aa48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	27a3      	movs	r7, #163	; 0xa3
 800aa50:	e785      	b.n	800a95e <__gethex+0x12a>
 800aa52:	1e73      	subs	r3, r6, #1
 800aa54:	9a05      	ldr	r2, [sp, #20]
 800aa56:	9303      	str	r3, [sp, #12]
 800aa58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d019      	beq.n	800aa94 <__gethex+0x260>
 800aa60:	f1bb 0f20 	cmp.w	fp, #32
 800aa64:	d107      	bne.n	800aa76 <__gethex+0x242>
 800aa66:	9b02      	ldr	r3, [sp, #8]
 800aa68:	9a00      	ldr	r2, [sp, #0]
 800aa6a:	f843 2b04 	str.w	r2, [r3], #4
 800aa6e:	9302      	str	r3, [sp, #8]
 800aa70:	2300      	movs	r3, #0
 800aa72:	9300      	str	r3, [sp, #0]
 800aa74:	469b      	mov	fp, r3
 800aa76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aa7a:	f7ff fec5 	bl	800a808 <__hexdig_fun>
 800aa7e:	9b00      	ldr	r3, [sp, #0]
 800aa80:	f000 000f 	and.w	r0, r0, #15
 800aa84:	fa00 f00b 	lsl.w	r0, r0, fp
 800aa88:	4303      	orrs	r3, r0
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	f10b 0b04 	add.w	fp, fp, #4
 800aa90:	9b03      	ldr	r3, [sp, #12]
 800aa92:	e00d      	b.n	800aab0 <__gethex+0x27c>
 800aa94:	9b03      	ldr	r3, [sp, #12]
 800aa96:	9a06      	ldr	r2, [sp, #24]
 800aa98:	4413      	add	r3, r2
 800aa9a:	42bb      	cmp	r3, r7
 800aa9c:	d3e0      	bcc.n	800aa60 <__gethex+0x22c>
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	9901      	ldr	r1, [sp, #4]
 800aaa2:	9307      	str	r3, [sp, #28]
 800aaa4:	4652      	mov	r2, sl
 800aaa6:	f001 f927 	bl	800bcf8 <strncmp>
 800aaaa:	9b07      	ldr	r3, [sp, #28]
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d1d7      	bne.n	800aa60 <__gethex+0x22c>
 800aab0:	461e      	mov	r6, r3
 800aab2:	e78b      	b.n	800a9cc <__gethex+0x198>
 800aab4:	f04f 0a03 	mov.w	sl, #3
 800aab8:	e7b8      	b.n	800aa2c <__gethex+0x1f8>
 800aaba:	da0a      	bge.n	800aad2 <__gethex+0x29e>
 800aabc:	1a37      	subs	r7, r6, r0
 800aabe:	4621      	mov	r1, r4
 800aac0:	ee18 0a10 	vmov	r0, s16
 800aac4:	463a      	mov	r2, r7
 800aac6:	f000 fc45 	bl	800b354 <__lshift>
 800aaca:	1bed      	subs	r5, r5, r7
 800aacc:	4604      	mov	r4, r0
 800aace:	f100 0914 	add.w	r9, r0, #20
 800aad2:	f04f 0a00 	mov.w	sl, #0
 800aad6:	e7ae      	b.n	800aa36 <__gethex+0x202>
 800aad8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aadc:	42a8      	cmp	r0, r5
 800aade:	dd72      	ble.n	800abc6 <__gethex+0x392>
 800aae0:	1b45      	subs	r5, r0, r5
 800aae2:	42ae      	cmp	r6, r5
 800aae4:	dc36      	bgt.n	800ab54 <__gethex+0x320>
 800aae6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d02a      	beq.n	800ab44 <__gethex+0x310>
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	d02c      	beq.n	800ab4c <__gethex+0x318>
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d11c      	bne.n	800ab30 <__gethex+0x2fc>
 800aaf6:	42ae      	cmp	r6, r5
 800aaf8:	d11a      	bne.n	800ab30 <__gethex+0x2fc>
 800aafa:	2e01      	cmp	r6, #1
 800aafc:	d112      	bne.n	800ab24 <__gethex+0x2f0>
 800aafe:	9a04      	ldr	r2, [sp, #16]
 800ab00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab04:	6013      	str	r3, [r2, #0]
 800ab06:	2301      	movs	r3, #1
 800ab08:	6123      	str	r3, [r4, #16]
 800ab0a:	f8c9 3000 	str.w	r3, [r9]
 800ab0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab10:	2762      	movs	r7, #98	; 0x62
 800ab12:	601c      	str	r4, [r3, #0]
 800ab14:	e723      	b.n	800a95e <__gethex+0x12a>
 800ab16:	bf00      	nop
 800ab18:	0800ef60 	.word	0x0800ef60
 800ab1c:	0800eee8 	.word	0x0800eee8
 800ab20:	0800eef9 	.word	0x0800eef9
 800ab24:	1e71      	subs	r1, r6, #1
 800ab26:	4620      	mov	r0, r4
 800ab28:	f000 fe58 	bl	800b7dc <__any_on>
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	d1e6      	bne.n	800aafe <__gethex+0x2ca>
 800ab30:	ee18 0a10 	vmov	r0, s16
 800ab34:	4621      	mov	r1, r4
 800ab36:	f000 f9f1 	bl	800af1c <_Bfree>
 800ab3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	6013      	str	r3, [r2, #0]
 800ab40:	2750      	movs	r7, #80	; 0x50
 800ab42:	e70c      	b.n	800a95e <__gethex+0x12a>
 800ab44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1f2      	bne.n	800ab30 <__gethex+0x2fc>
 800ab4a:	e7d8      	b.n	800aafe <__gethex+0x2ca>
 800ab4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1d5      	bne.n	800aafe <__gethex+0x2ca>
 800ab52:	e7ed      	b.n	800ab30 <__gethex+0x2fc>
 800ab54:	1e6f      	subs	r7, r5, #1
 800ab56:	f1ba 0f00 	cmp.w	sl, #0
 800ab5a:	d131      	bne.n	800abc0 <__gethex+0x38c>
 800ab5c:	b127      	cbz	r7, 800ab68 <__gethex+0x334>
 800ab5e:	4639      	mov	r1, r7
 800ab60:	4620      	mov	r0, r4
 800ab62:	f000 fe3b 	bl	800b7dc <__any_on>
 800ab66:	4682      	mov	sl, r0
 800ab68:	117b      	asrs	r3, r7, #5
 800ab6a:	2101      	movs	r1, #1
 800ab6c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ab70:	f007 071f 	and.w	r7, r7, #31
 800ab74:	fa01 f707 	lsl.w	r7, r1, r7
 800ab78:	421f      	tst	r7, r3
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	bf18      	it	ne
 800ab80:	f04a 0a02 	orrne.w	sl, sl, #2
 800ab84:	1b76      	subs	r6, r6, r5
 800ab86:	f7ff fded 	bl	800a764 <rshift>
 800ab8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ab8e:	2702      	movs	r7, #2
 800ab90:	f1ba 0f00 	cmp.w	sl, #0
 800ab94:	d048      	beq.n	800ac28 <__gethex+0x3f4>
 800ab96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d015      	beq.n	800abca <__gethex+0x396>
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	d017      	beq.n	800abd2 <__gethex+0x39e>
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d109      	bne.n	800abba <__gethex+0x386>
 800aba6:	f01a 0f02 	tst.w	sl, #2
 800abaa:	d006      	beq.n	800abba <__gethex+0x386>
 800abac:	f8d9 0000 	ldr.w	r0, [r9]
 800abb0:	ea4a 0a00 	orr.w	sl, sl, r0
 800abb4:	f01a 0f01 	tst.w	sl, #1
 800abb8:	d10e      	bne.n	800abd8 <__gethex+0x3a4>
 800abba:	f047 0710 	orr.w	r7, r7, #16
 800abbe:	e033      	b.n	800ac28 <__gethex+0x3f4>
 800abc0:	f04f 0a01 	mov.w	sl, #1
 800abc4:	e7d0      	b.n	800ab68 <__gethex+0x334>
 800abc6:	2701      	movs	r7, #1
 800abc8:	e7e2      	b.n	800ab90 <__gethex+0x35c>
 800abca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abcc:	f1c3 0301 	rsb	r3, r3, #1
 800abd0:	9315      	str	r3, [sp, #84]	; 0x54
 800abd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d0f0      	beq.n	800abba <__gethex+0x386>
 800abd8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800abdc:	f104 0314 	add.w	r3, r4, #20
 800abe0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800abe4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800abe8:	f04f 0c00 	mov.w	ip, #0
 800abec:	4618      	mov	r0, r3
 800abee:	f853 2b04 	ldr.w	r2, [r3], #4
 800abf2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800abf6:	d01c      	beq.n	800ac32 <__gethex+0x3fe>
 800abf8:	3201      	adds	r2, #1
 800abfa:	6002      	str	r2, [r0, #0]
 800abfc:	2f02      	cmp	r7, #2
 800abfe:	f104 0314 	add.w	r3, r4, #20
 800ac02:	d13f      	bne.n	800ac84 <__gethex+0x450>
 800ac04:	f8d8 2000 	ldr.w	r2, [r8]
 800ac08:	3a01      	subs	r2, #1
 800ac0a:	42b2      	cmp	r2, r6
 800ac0c:	d10a      	bne.n	800ac24 <__gethex+0x3f0>
 800ac0e:	1171      	asrs	r1, r6, #5
 800ac10:	2201      	movs	r2, #1
 800ac12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac16:	f006 061f 	and.w	r6, r6, #31
 800ac1a:	fa02 f606 	lsl.w	r6, r2, r6
 800ac1e:	421e      	tst	r6, r3
 800ac20:	bf18      	it	ne
 800ac22:	4617      	movne	r7, r2
 800ac24:	f047 0720 	orr.w	r7, r7, #32
 800ac28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac2a:	601c      	str	r4, [r3, #0]
 800ac2c:	9b04      	ldr	r3, [sp, #16]
 800ac2e:	601d      	str	r5, [r3, #0]
 800ac30:	e695      	b.n	800a95e <__gethex+0x12a>
 800ac32:	4299      	cmp	r1, r3
 800ac34:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac38:	d8d8      	bhi.n	800abec <__gethex+0x3b8>
 800ac3a:	68a3      	ldr	r3, [r4, #8]
 800ac3c:	459b      	cmp	fp, r3
 800ac3e:	db19      	blt.n	800ac74 <__gethex+0x440>
 800ac40:	6861      	ldr	r1, [r4, #4]
 800ac42:	ee18 0a10 	vmov	r0, s16
 800ac46:	3101      	adds	r1, #1
 800ac48:	f000 f928 	bl	800ae9c <_Balloc>
 800ac4c:	4681      	mov	r9, r0
 800ac4e:	b918      	cbnz	r0, 800ac58 <__gethex+0x424>
 800ac50:	4b1a      	ldr	r3, [pc, #104]	; (800acbc <__gethex+0x488>)
 800ac52:	4602      	mov	r2, r0
 800ac54:	2184      	movs	r1, #132	; 0x84
 800ac56:	e6a8      	b.n	800a9aa <__gethex+0x176>
 800ac58:	6922      	ldr	r2, [r4, #16]
 800ac5a:	3202      	adds	r2, #2
 800ac5c:	f104 010c 	add.w	r1, r4, #12
 800ac60:	0092      	lsls	r2, r2, #2
 800ac62:	300c      	adds	r0, #12
 800ac64:	f000 f90c 	bl	800ae80 <memcpy>
 800ac68:	4621      	mov	r1, r4
 800ac6a:	ee18 0a10 	vmov	r0, s16
 800ac6e:	f000 f955 	bl	800af1c <_Bfree>
 800ac72:	464c      	mov	r4, r9
 800ac74:	6923      	ldr	r3, [r4, #16]
 800ac76:	1c5a      	adds	r2, r3, #1
 800ac78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac7c:	6122      	str	r2, [r4, #16]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	615a      	str	r2, [r3, #20]
 800ac82:	e7bb      	b.n	800abfc <__gethex+0x3c8>
 800ac84:	6922      	ldr	r2, [r4, #16]
 800ac86:	455a      	cmp	r2, fp
 800ac88:	dd0b      	ble.n	800aca2 <__gethex+0x46e>
 800ac8a:	2101      	movs	r1, #1
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f7ff fd69 	bl	800a764 <rshift>
 800ac92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac96:	3501      	adds	r5, #1
 800ac98:	42ab      	cmp	r3, r5
 800ac9a:	f6ff aed0 	blt.w	800aa3e <__gethex+0x20a>
 800ac9e:	2701      	movs	r7, #1
 800aca0:	e7c0      	b.n	800ac24 <__gethex+0x3f0>
 800aca2:	f016 061f 	ands.w	r6, r6, #31
 800aca6:	d0fa      	beq.n	800ac9e <__gethex+0x46a>
 800aca8:	4453      	add	r3, sl
 800acaa:	f1c6 0620 	rsb	r6, r6, #32
 800acae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800acb2:	f000 f9e5 	bl	800b080 <__hi0bits>
 800acb6:	42b0      	cmp	r0, r6
 800acb8:	dbe7      	blt.n	800ac8a <__gethex+0x456>
 800acba:	e7f0      	b.n	800ac9e <__gethex+0x46a>
 800acbc:	0800eee8 	.word	0x0800eee8

0800acc0 <L_shift>:
 800acc0:	f1c2 0208 	rsb	r2, r2, #8
 800acc4:	0092      	lsls	r2, r2, #2
 800acc6:	b570      	push	{r4, r5, r6, lr}
 800acc8:	f1c2 0620 	rsb	r6, r2, #32
 800accc:	6843      	ldr	r3, [r0, #4]
 800acce:	6804      	ldr	r4, [r0, #0]
 800acd0:	fa03 f506 	lsl.w	r5, r3, r6
 800acd4:	432c      	orrs	r4, r5
 800acd6:	40d3      	lsrs	r3, r2
 800acd8:	6004      	str	r4, [r0, #0]
 800acda:	f840 3f04 	str.w	r3, [r0, #4]!
 800acde:	4288      	cmp	r0, r1
 800ace0:	d3f4      	bcc.n	800accc <L_shift+0xc>
 800ace2:	bd70      	pop	{r4, r5, r6, pc}

0800ace4 <__match>:
 800ace4:	b530      	push	{r4, r5, lr}
 800ace6:	6803      	ldr	r3, [r0, #0]
 800ace8:	3301      	adds	r3, #1
 800acea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acee:	b914      	cbnz	r4, 800acf6 <__match+0x12>
 800acf0:	6003      	str	r3, [r0, #0]
 800acf2:	2001      	movs	r0, #1
 800acf4:	bd30      	pop	{r4, r5, pc}
 800acf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acfa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800acfe:	2d19      	cmp	r5, #25
 800ad00:	bf98      	it	ls
 800ad02:	3220      	addls	r2, #32
 800ad04:	42a2      	cmp	r2, r4
 800ad06:	d0f0      	beq.n	800acea <__match+0x6>
 800ad08:	2000      	movs	r0, #0
 800ad0a:	e7f3      	b.n	800acf4 <__match+0x10>

0800ad0c <__hexnan>:
 800ad0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad10:	680b      	ldr	r3, [r1, #0]
 800ad12:	115e      	asrs	r6, r3, #5
 800ad14:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad18:	f013 031f 	ands.w	r3, r3, #31
 800ad1c:	b087      	sub	sp, #28
 800ad1e:	bf18      	it	ne
 800ad20:	3604      	addne	r6, #4
 800ad22:	2500      	movs	r5, #0
 800ad24:	1f37      	subs	r7, r6, #4
 800ad26:	4690      	mov	r8, r2
 800ad28:	6802      	ldr	r2, [r0, #0]
 800ad2a:	9301      	str	r3, [sp, #4]
 800ad2c:	4682      	mov	sl, r0
 800ad2e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad32:	46b9      	mov	r9, r7
 800ad34:	463c      	mov	r4, r7
 800ad36:	9502      	str	r5, [sp, #8]
 800ad38:	46ab      	mov	fp, r5
 800ad3a:	7851      	ldrb	r1, [r2, #1]
 800ad3c:	1c53      	adds	r3, r2, #1
 800ad3e:	9303      	str	r3, [sp, #12]
 800ad40:	b341      	cbz	r1, 800ad94 <__hexnan+0x88>
 800ad42:	4608      	mov	r0, r1
 800ad44:	9205      	str	r2, [sp, #20]
 800ad46:	9104      	str	r1, [sp, #16]
 800ad48:	f7ff fd5e 	bl	800a808 <__hexdig_fun>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d14f      	bne.n	800adf0 <__hexnan+0xe4>
 800ad50:	9904      	ldr	r1, [sp, #16]
 800ad52:	9a05      	ldr	r2, [sp, #20]
 800ad54:	2920      	cmp	r1, #32
 800ad56:	d818      	bhi.n	800ad8a <__hexnan+0x7e>
 800ad58:	9b02      	ldr	r3, [sp, #8]
 800ad5a:	459b      	cmp	fp, r3
 800ad5c:	dd13      	ble.n	800ad86 <__hexnan+0x7a>
 800ad5e:	454c      	cmp	r4, r9
 800ad60:	d206      	bcs.n	800ad70 <__hexnan+0x64>
 800ad62:	2d07      	cmp	r5, #7
 800ad64:	dc04      	bgt.n	800ad70 <__hexnan+0x64>
 800ad66:	462a      	mov	r2, r5
 800ad68:	4649      	mov	r1, r9
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f7ff ffa8 	bl	800acc0 <L_shift>
 800ad70:	4544      	cmp	r4, r8
 800ad72:	d950      	bls.n	800ae16 <__hexnan+0x10a>
 800ad74:	2300      	movs	r3, #0
 800ad76:	f1a4 0904 	sub.w	r9, r4, #4
 800ad7a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad7e:	f8cd b008 	str.w	fp, [sp, #8]
 800ad82:	464c      	mov	r4, r9
 800ad84:	461d      	mov	r5, r3
 800ad86:	9a03      	ldr	r2, [sp, #12]
 800ad88:	e7d7      	b.n	800ad3a <__hexnan+0x2e>
 800ad8a:	2929      	cmp	r1, #41	; 0x29
 800ad8c:	d156      	bne.n	800ae3c <__hexnan+0x130>
 800ad8e:	3202      	adds	r2, #2
 800ad90:	f8ca 2000 	str.w	r2, [sl]
 800ad94:	f1bb 0f00 	cmp.w	fp, #0
 800ad98:	d050      	beq.n	800ae3c <__hexnan+0x130>
 800ad9a:	454c      	cmp	r4, r9
 800ad9c:	d206      	bcs.n	800adac <__hexnan+0xa0>
 800ad9e:	2d07      	cmp	r5, #7
 800ada0:	dc04      	bgt.n	800adac <__hexnan+0xa0>
 800ada2:	462a      	mov	r2, r5
 800ada4:	4649      	mov	r1, r9
 800ada6:	4620      	mov	r0, r4
 800ada8:	f7ff ff8a 	bl	800acc0 <L_shift>
 800adac:	4544      	cmp	r4, r8
 800adae:	d934      	bls.n	800ae1a <__hexnan+0x10e>
 800adb0:	f1a8 0204 	sub.w	r2, r8, #4
 800adb4:	4623      	mov	r3, r4
 800adb6:	f853 1b04 	ldr.w	r1, [r3], #4
 800adba:	f842 1f04 	str.w	r1, [r2, #4]!
 800adbe:	429f      	cmp	r7, r3
 800adc0:	d2f9      	bcs.n	800adb6 <__hexnan+0xaa>
 800adc2:	1b3b      	subs	r3, r7, r4
 800adc4:	f023 0303 	bic.w	r3, r3, #3
 800adc8:	3304      	adds	r3, #4
 800adca:	3401      	adds	r4, #1
 800adcc:	3e03      	subs	r6, #3
 800adce:	42b4      	cmp	r4, r6
 800add0:	bf88      	it	hi
 800add2:	2304      	movhi	r3, #4
 800add4:	4443      	add	r3, r8
 800add6:	2200      	movs	r2, #0
 800add8:	f843 2b04 	str.w	r2, [r3], #4
 800addc:	429f      	cmp	r7, r3
 800adde:	d2fb      	bcs.n	800add8 <__hexnan+0xcc>
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	b91b      	cbnz	r3, 800adec <__hexnan+0xe0>
 800ade4:	4547      	cmp	r7, r8
 800ade6:	d127      	bne.n	800ae38 <__hexnan+0x12c>
 800ade8:	2301      	movs	r3, #1
 800adea:	603b      	str	r3, [r7, #0]
 800adec:	2005      	movs	r0, #5
 800adee:	e026      	b.n	800ae3e <__hexnan+0x132>
 800adf0:	3501      	adds	r5, #1
 800adf2:	2d08      	cmp	r5, #8
 800adf4:	f10b 0b01 	add.w	fp, fp, #1
 800adf8:	dd06      	ble.n	800ae08 <__hexnan+0xfc>
 800adfa:	4544      	cmp	r4, r8
 800adfc:	d9c3      	bls.n	800ad86 <__hexnan+0x7a>
 800adfe:	2300      	movs	r3, #0
 800ae00:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae04:	2501      	movs	r5, #1
 800ae06:	3c04      	subs	r4, #4
 800ae08:	6822      	ldr	r2, [r4, #0]
 800ae0a:	f000 000f 	and.w	r0, r0, #15
 800ae0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ae12:	6022      	str	r2, [r4, #0]
 800ae14:	e7b7      	b.n	800ad86 <__hexnan+0x7a>
 800ae16:	2508      	movs	r5, #8
 800ae18:	e7b5      	b.n	800ad86 <__hexnan+0x7a>
 800ae1a:	9b01      	ldr	r3, [sp, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d0df      	beq.n	800ade0 <__hexnan+0xd4>
 800ae20:	f04f 32ff 	mov.w	r2, #4294967295
 800ae24:	f1c3 0320 	rsb	r3, r3, #32
 800ae28:	fa22 f303 	lsr.w	r3, r2, r3
 800ae2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ae30:	401a      	ands	r2, r3
 800ae32:	f846 2c04 	str.w	r2, [r6, #-4]
 800ae36:	e7d3      	b.n	800ade0 <__hexnan+0xd4>
 800ae38:	3f04      	subs	r7, #4
 800ae3a:	e7d1      	b.n	800ade0 <__hexnan+0xd4>
 800ae3c:	2004      	movs	r0, #4
 800ae3e:	b007      	add	sp, #28
 800ae40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae44 <_localeconv_r>:
 800ae44:	4800      	ldr	r0, [pc, #0]	; (800ae48 <_localeconv_r+0x4>)
 800ae46:	4770      	bx	lr
 800ae48:	20000174 	.word	0x20000174

0800ae4c <malloc>:
 800ae4c:	4b02      	ldr	r3, [pc, #8]	; (800ae58 <malloc+0xc>)
 800ae4e:	4601      	mov	r1, r0
 800ae50:	6818      	ldr	r0, [r3, #0]
 800ae52:	f000 bd67 	b.w	800b924 <_malloc_r>
 800ae56:	bf00      	nop
 800ae58:	2000001c 	.word	0x2000001c

0800ae5c <__ascii_mbtowc>:
 800ae5c:	b082      	sub	sp, #8
 800ae5e:	b901      	cbnz	r1, 800ae62 <__ascii_mbtowc+0x6>
 800ae60:	a901      	add	r1, sp, #4
 800ae62:	b142      	cbz	r2, 800ae76 <__ascii_mbtowc+0x1a>
 800ae64:	b14b      	cbz	r3, 800ae7a <__ascii_mbtowc+0x1e>
 800ae66:	7813      	ldrb	r3, [r2, #0]
 800ae68:	600b      	str	r3, [r1, #0]
 800ae6a:	7812      	ldrb	r2, [r2, #0]
 800ae6c:	1e10      	subs	r0, r2, #0
 800ae6e:	bf18      	it	ne
 800ae70:	2001      	movne	r0, #1
 800ae72:	b002      	add	sp, #8
 800ae74:	4770      	bx	lr
 800ae76:	4610      	mov	r0, r2
 800ae78:	e7fb      	b.n	800ae72 <__ascii_mbtowc+0x16>
 800ae7a:	f06f 0001 	mvn.w	r0, #1
 800ae7e:	e7f8      	b.n	800ae72 <__ascii_mbtowc+0x16>

0800ae80 <memcpy>:
 800ae80:	440a      	add	r2, r1
 800ae82:	4291      	cmp	r1, r2
 800ae84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae88:	d100      	bne.n	800ae8c <memcpy+0xc>
 800ae8a:	4770      	bx	lr
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae96:	4291      	cmp	r1, r2
 800ae98:	d1f9      	bne.n	800ae8e <memcpy+0xe>
 800ae9a:	bd10      	pop	{r4, pc}

0800ae9c <_Balloc>:
 800ae9c:	b570      	push	{r4, r5, r6, lr}
 800ae9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aea0:	4604      	mov	r4, r0
 800aea2:	460d      	mov	r5, r1
 800aea4:	b976      	cbnz	r6, 800aec4 <_Balloc+0x28>
 800aea6:	2010      	movs	r0, #16
 800aea8:	f7ff ffd0 	bl	800ae4c <malloc>
 800aeac:	4602      	mov	r2, r0
 800aeae:	6260      	str	r0, [r4, #36]	; 0x24
 800aeb0:	b920      	cbnz	r0, 800aebc <_Balloc+0x20>
 800aeb2:	4b18      	ldr	r3, [pc, #96]	; (800af14 <_Balloc+0x78>)
 800aeb4:	4818      	ldr	r0, [pc, #96]	; (800af18 <_Balloc+0x7c>)
 800aeb6:	2166      	movs	r1, #102	; 0x66
 800aeb8:	f000 ff40 	bl	800bd3c <__assert_func>
 800aebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aec0:	6006      	str	r6, [r0, #0]
 800aec2:	60c6      	str	r6, [r0, #12]
 800aec4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aec6:	68f3      	ldr	r3, [r6, #12]
 800aec8:	b183      	cbz	r3, 800aeec <_Balloc+0x50>
 800aeca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aed2:	b9b8      	cbnz	r0, 800af04 <_Balloc+0x68>
 800aed4:	2101      	movs	r1, #1
 800aed6:	fa01 f605 	lsl.w	r6, r1, r5
 800aeda:	1d72      	adds	r2, r6, #5
 800aedc:	0092      	lsls	r2, r2, #2
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 fc9d 	bl	800b81e <_calloc_r>
 800aee4:	b160      	cbz	r0, 800af00 <_Balloc+0x64>
 800aee6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aeea:	e00e      	b.n	800af0a <_Balloc+0x6e>
 800aeec:	2221      	movs	r2, #33	; 0x21
 800aeee:	2104      	movs	r1, #4
 800aef0:	4620      	mov	r0, r4
 800aef2:	f000 fc94 	bl	800b81e <_calloc_r>
 800aef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aef8:	60f0      	str	r0, [r6, #12]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1e4      	bne.n	800aeca <_Balloc+0x2e>
 800af00:	2000      	movs	r0, #0
 800af02:	bd70      	pop	{r4, r5, r6, pc}
 800af04:	6802      	ldr	r2, [r0, #0]
 800af06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af0a:	2300      	movs	r3, #0
 800af0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af10:	e7f7      	b.n	800af02 <_Balloc+0x66>
 800af12:	bf00      	nop
 800af14:	0800ee76 	.word	0x0800ee76
 800af18:	0800ef74 	.word	0x0800ef74

0800af1c <_Bfree>:
 800af1c:	b570      	push	{r4, r5, r6, lr}
 800af1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af20:	4605      	mov	r5, r0
 800af22:	460c      	mov	r4, r1
 800af24:	b976      	cbnz	r6, 800af44 <_Bfree+0x28>
 800af26:	2010      	movs	r0, #16
 800af28:	f7ff ff90 	bl	800ae4c <malloc>
 800af2c:	4602      	mov	r2, r0
 800af2e:	6268      	str	r0, [r5, #36]	; 0x24
 800af30:	b920      	cbnz	r0, 800af3c <_Bfree+0x20>
 800af32:	4b09      	ldr	r3, [pc, #36]	; (800af58 <_Bfree+0x3c>)
 800af34:	4809      	ldr	r0, [pc, #36]	; (800af5c <_Bfree+0x40>)
 800af36:	218a      	movs	r1, #138	; 0x8a
 800af38:	f000 ff00 	bl	800bd3c <__assert_func>
 800af3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af40:	6006      	str	r6, [r0, #0]
 800af42:	60c6      	str	r6, [r0, #12]
 800af44:	b13c      	cbz	r4, 800af56 <_Bfree+0x3a>
 800af46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af48:	6862      	ldr	r2, [r4, #4]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af50:	6021      	str	r1, [r4, #0]
 800af52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af56:	bd70      	pop	{r4, r5, r6, pc}
 800af58:	0800ee76 	.word	0x0800ee76
 800af5c:	0800ef74 	.word	0x0800ef74

0800af60 <__multadd>:
 800af60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af64:	690d      	ldr	r5, [r1, #16]
 800af66:	4607      	mov	r7, r0
 800af68:	460c      	mov	r4, r1
 800af6a:	461e      	mov	r6, r3
 800af6c:	f101 0c14 	add.w	ip, r1, #20
 800af70:	2000      	movs	r0, #0
 800af72:	f8dc 3000 	ldr.w	r3, [ip]
 800af76:	b299      	uxth	r1, r3
 800af78:	fb02 6101 	mla	r1, r2, r1, r6
 800af7c:	0c1e      	lsrs	r6, r3, #16
 800af7e:	0c0b      	lsrs	r3, r1, #16
 800af80:	fb02 3306 	mla	r3, r2, r6, r3
 800af84:	b289      	uxth	r1, r1
 800af86:	3001      	adds	r0, #1
 800af88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af8c:	4285      	cmp	r5, r0
 800af8e:	f84c 1b04 	str.w	r1, [ip], #4
 800af92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af96:	dcec      	bgt.n	800af72 <__multadd+0x12>
 800af98:	b30e      	cbz	r6, 800afde <__multadd+0x7e>
 800af9a:	68a3      	ldr	r3, [r4, #8]
 800af9c:	42ab      	cmp	r3, r5
 800af9e:	dc19      	bgt.n	800afd4 <__multadd+0x74>
 800afa0:	6861      	ldr	r1, [r4, #4]
 800afa2:	4638      	mov	r0, r7
 800afa4:	3101      	adds	r1, #1
 800afa6:	f7ff ff79 	bl	800ae9c <_Balloc>
 800afaa:	4680      	mov	r8, r0
 800afac:	b928      	cbnz	r0, 800afba <__multadd+0x5a>
 800afae:	4602      	mov	r2, r0
 800afb0:	4b0c      	ldr	r3, [pc, #48]	; (800afe4 <__multadd+0x84>)
 800afb2:	480d      	ldr	r0, [pc, #52]	; (800afe8 <__multadd+0x88>)
 800afb4:	21b5      	movs	r1, #181	; 0xb5
 800afb6:	f000 fec1 	bl	800bd3c <__assert_func>
 800afba:	6922      	ldr	r2, [r4, #16]
 800afbc:	3202      	adds	r2, #2
 800afbe:	f104 010c 	add.w	r1, r4, #12
 800afc2:	0092      	lsls	r2, r2, #2
 800afc4:	300c      	adds	r0, #12
 800afc6:	f7ff ff5b 	bl	800ae80 <memcpy>
 800afca:	4621      	mov	r1, r4
 800afcc:	4638      	mov	r0, r7
 800afce:	f7ff ffa5 	bl	800af1c <_Bfree>
 800afd2:	4644      	mov	r4, r8
 800afd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afd8:	3501      	adds	r5, #1
 800afda:	615e      	str	r6, [r3, #20]
 800afdc:	6125      	str	r5, [r4, #16]
 800afde:	4620      	mov	r0, r4
 800afe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe4:	0800eee8 	.word	0x0800eee8
 800afe8:	0800ef74 	.word	0x0800ef74

0800afec <__s2b>:
 800afec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aff0:	460c      	mov	r4, r1
 800aff2:	4615      	mov	r5, r2
 800aff4:	461f      	mov	r7, r3
 800aff6:	2209      	movs	r2, #9
 800aff8:	3308      	adds	r3, #8
 800affa:	4606      	mov	r6, r0
 800affc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b000:	2100      	movs	r1, #0
 800b002:	2201      	movs	r2, #1
 800b004:	429a      	cmp	r2, r3
 800b006:	db09      	blt.n	800b01c <__s2b+0x30>
 800b008:	4630      	mov	r0, r6
 800b00a:	f7ff ff47 	bl	800ae9c <_Balloc>
 800b00e:	b940      	cbnz	r0, 800b022 <__s2b+0x36>
 800b010:	4602      	mov	r2, r0
 800b012:	4b19      	ldr	r3, [pc, #100]	; (800b078 <__s2b+0x8c>)
 800b014:	4819      	ldr	r0, [pc, #100]	; (800b07c <__s2b+0x90>)
 800b016:	21ce      	movs	r1, #206	; 0xce
 800b018:	f000 fe90 	bl	800bd3c <__assert_func>
 800b01c:	0052      	lsls	r2, r2, #1
 800b01e:	3101      	adds	r1, #1
 800b020:	e7f0      	b.n	800b004 <__s2b+0x18>
 800b022:	9b08      	ldr	r3, [sp, #32]
 800b024:	6143      	str	r3, [r0, #20]
 800b026:	2d09      	cmp	r5, #9
 800b028:	f04f 0301 	mov.w	r3, #1
 800b02c:	6103      	str	r3, [r0, #16]
 800b02e:	dd16      	ble.n	800b05e <__s2b+0x72>
 800b030:	f104 0909 	add.w	r9, r4, #9
 800b034:	46c8      	mov	r8, r9
 800b036:	442c      	add	r4, r5
 800b038:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b03c:	4601      	mov	r1, r0
 800b03e:	3b30      	subs	r3, #48	; 0x30
 800b040:	220a      	movs	r2, #10
 800b042:	4630      	mov	r0, r6
 800b044:	f7ff ff8c 	bl	800af60 <__multadd>
 800b048:	45a0      	cmp	r8, r4
 800b04a:	d1f5      	bne.n	800b038 <__s2b+0x4c>
 800b04c:	f1a5 0408 	sub.w	r4, r5, #8
 800b050:	444c      	add	r4, r9
 800b052:	1b2d      	subs	r5, r5, r4
 800b054:	1963      	adds	r3, r4, r5
 800b056:	42bb      	cmp	r3, r7
 800b058:	db04      	blt.n	800b064 <__s2b+0x78>
 800b05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b05e:	340a      	adds	r4, #10
 800b060:	2509      	movs	r5, #9
 800b062:	e7f6      	b.n	800b052 <__s2b+0x66>
 800b064:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b068:	4601      	mov	r1, r0
 800b06a:	3b30      	subs	r3, #48	; 0x30
 800b06c:	220a      	movs	r2, #10
 800b06e:	4630      	mov	r0, r6
 800b070:	f7ff ff76 	bl	800af60 <__multadd>
 800b074:	e7ee      	b.n	800b054 <__s2b+0x68>
 800b076:	bf00      	nop
 800b078:	0800eee8 	.word	0x0800eee8
 800b07c:	0800ef74 	.word	0x0800ef74

0800b080 <__hi0bits>:
 800b080:	0c03      	lsrs	r3, r0, #16
 800b082:	041b      	lsls	r3, r3, #16
 800b084:	b9d3      	cbnz	r3, 800b0bc <__hi0bits+0x3c>
 800b086:	0400      	lsls	r0, r0, #16
 800b088:	2310      	movs	r3, #16
 800b08a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b08e:	bf04      	itt	eq
 800b090:	0200      	lsleq	r0, r0, #8
 800b092:	3308      	addeq	r3, #8
 800b094:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b098:	bf04      	itt	eq
 800b09a:	0100      	lsleq	r0, r0, #4
 800b09c:	3304      	addeq	r3, #4
 800b09e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0a2:	bf04      	itt	eq
 800b0a4:	0080      	lsleq	r0, r0, #2
 800b0a6:	3302      	addeq	r3, #2
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	db05      	blt.n	800b0b8 <__hi0bits+0x38>
 800b0ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0b0:	f103 0301 	add.w	r3, r3, #1
 800b0b4:	bf08      	it	eq
 800b0b6:	2320      	moveq	r3, #32
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	4770      	bx	lr
 800b0bc:	2300      	movs	r3, #0
 800b0be:	e7e4      	b.n	800b08a <__hi0bits+0xa>

0800b0c0 <__lo0bits>:
 800b0c0:	6803      	ldr	r3, [r0, #0]
 800b0c2:	f013 0207 	ands.w	r2, r3, #7
 800b0c6:	4601      	mov	r1, r0
 800b0c8:	d00b      	beq.n	800b0e2 <__lo0bits+0x22>
 800b0ca:	07da      	lsls	r2, r3, #31
 800b0cc:	d423      	bmi.n	800b116 <__lo0bits+0x56>
 800b0ce:	0798      	lsls	r0, r3, #30
 800b0d0:	bf49      	itett	mi
 800b0d2:	085b      	lsrmi	r3, r3, #1
 800b0d4:	089b      	lsrpl	r3, r3, #2
 800b0d6:	2001      	movmi	r0, #1
 800b0d8:	600b      	strmi	r3, [r1, #0]
 800b0da:	bf5c      	itt	pl
 800b0dc:	600b      	strpl	r3, [r1, #0]
 800b0de:	2002      	movpl	r0, #2
 800b0e0:	4770      	bx	lr
 800b0e2:	b298      	uxth	r0, r3
 800b0e4:	b9a8      	cbnz	r0, 800b112 <__lo0bits+0x52>
 800b0e6:	0c1b      	lsrs	r3, r3, #16
 800b0e8:	2010      	movs	r0, #16
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	b90a      	cbnz	r2, 800b0f2 <__lo0bits+0x32>
 800b0ee:	3008      	adds	r0, #8
 800b0f0:	0a1b      	lsrs	r3, r3, #8
 800b0f2:	071a      	lsls	r2, r3, #28
 800b0f4:	bf04      	itt	eq
 800b0f6:	091b      	lsreq	r3, r3, #4
 800b0f8:	3004      	addeq	r0, #4
 800b0fa:	079a      	lsls	r2, r3, #30
 800b0fc:	bf04      	itt	eq
 800b0fe:	089b      	lsreq	r3, r3, #2
 800b100:	3002      	addeq	r0, #2
 800b102:	07da      	lsls	r2, r3, #31
 800b104:	d403      	bmi.n	800b10e <__lo0bits+0x4e>
 800b106:	085b      	lsrs	r3, r3, #1
 800b108:	f100 0001 	add.w	r0, r0, #1
 800b10c:	d005      	beq.n	800b11a <__lo0bits+0x5a>
 800b10e:	600b      	str	r3, [r1, #0]
 800b110:	4770      	bx	lr
 800b112:	4610      	mov	r0, r2
 800b114:	e7e9      	b.n	800b0ea <__lo0bits+0x2a>
 800b116:	2000      	movs	r0, #0
 800b118:	4770      	bx	lr
 800b11a:	2020      	movs	r0, #32
 800b11c:	4770      	bx	lr
	...

0800b120 <__i2b>:
 800b120:	b510      	push	{r4, lr}
 800b122:	460c      	mov	r4, r1
 800b124:	2101      	movs	r1, #1
 800b126:	f7ff feb9 	bl	800ae9c <_Balloc>
 800b12a:	4602      	mov	r2, r0
 800b12c:	b928      	cbnz	r0, 800b13a <__i2b+0x1a>
 800b12e:	4b05      	ldr	r3, [pc, #20]	; (800b144 <__i2b+0x24>)
 800b130:	4805      	ldr	r0, [pc, #20]	; (800b148 <__i2b+0x28>)
 800b132:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b136:	f000 fe01 	bl	800bd3c <__assert_func>
 800b13a:	2301      	movs	r3, #1
 800b13c:	6144      	str	r4, [r0, #20]
 800b13e:	6103      	str	r3, [r0, #16]
 800b140:	bd10      	pop	{r4, pc}
 800b142:	bf00      	nop
 800b144:	0800eee8 	.word	0x0800eee8
 800b148:	0800ef74 	.word	0x0800ef74

0800b14c <__multiply>:
 800b14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b150:	4691      	mov	r9, r2
 800b152:	690a      	ldr	r2, [r1, #16]
 800b154:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b158:	429a      	cmp	r2, r3
 800b15a:	bfb8      	it	lt
 800b15c:	460b      	movlt	r3, r1
 800b15e:	460c      	mov	r4, r1
 800b160:	bfbc      	itt	lt
 800b162:	464c      	movlt	r4, r9
 800b164:	4699      	movlt	r9, r3
 800b166:	6927      	ldr	r7, [r4, #16]
 800b168:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b16c:	68a3      	ldr	r3, [r4, #8]
 800b16e:	6861      	ldr	r1, [r4, #4]
 800b170:	eb07 060a 	add.w	r6, r7, sl
 800b174:	42b3      	cmp	r3, r6
 800b176:	b085      	sub	sp, #20
 800b178:	bfb8      	it	lt
 800b17a:	3101      	addlt	r1, #1
 800b17c:	f7ff fe8e 	bl	800ae9c <_Balloc>
 800b180:	b930      	cbnz	r0, 800b190 <__multiply+0x44>
 800b182:	4602      	mov	r2, r0
 800b184:	4b44      	ldr	r3, [pc, #272]	; (800b298 <__multiply+0x14c>)
 800b186:	4845      	ldr	r0, [pc, #276]	; (800b29c <__multiply+0x150>)
 800b188:	f240 115d 	movw	r1, #349	; 0x15d
 800b18c:	f000 fdd6 	bl	800bd3c <__assert_func>
 800b190:	f100 0514 	add.w	r5, r0, #20
 800b194:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b198:	462b      	mov	r3, r5
 800b19a:	2200      	movs	r2, #0
 800b19c:	4543      	cmp	r3, r8
 800b19e:	d321      	bcc.n	800b1e4 <__multiply+0x98>
 800b1a0:	f104 0314 	add.w	r3, r4, #20
 800b1a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1a8:	f109 0314 	add.w	r3, r9, #20
 800b1ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b1b0:	9202      	str	r2, [sp, #8]
 800b1b2:	1b3a      	subs	r2, r7, r4
 800b1b4:	3a15      	subs	r2, #21
 800b1b6:	f022 0203 	bic.w	r2, r2, #3
 800b1ba:	3204      	adds	r2, #4
 800b1bc:	f104 0115 	add.w	r1, r4, #21
 800b1c0:	428f      	cmp	r7, r1
 800b1c2:	bf38      	it	cc
 800b1c4:	2204      	movcc	r2, #4
 800b1c6:	9201      	str	r2, [sp, #4]
 800b1c8:	9a02      	ldr	r2, [sp, #8]
 800b1ca:	9303      	str	r3, [sp, #12]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d80c      	bhi.n	800b1ea <__multiply+0x9e>
 800b1d0:	2e00      	cmp	r6, #0
 800b1d2:	dd03      	ble.n	800b1dc <__multiply+0x90>
 800b1d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d05a      	beq.n	800b292 <__multiply+0x146>
 800b1dc:	6106      	str	r6, [r0, #16]
 800b1de:	b005      	add	sp, #20
 800b1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e4:	f843 2b04 	str.w	r2, [r3], #4
 800b1e8:	e7d8      	b.n	800b19c <__multiply+0x50>
 800b1ea:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1ee:	f1ba 0f00 	cmp.w	sl, #0
 800b1f2:	d024      	beq.n	800b23e <__multiply+0xf2>
 800b1f4:	f104 0e14 	add.w	lr, r4, #20
 800b1f8:	46a9      	mov	r9, r5
 800b1fa:	f04f 0c00 	mov.w	ip, #0
 800b1fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b202:	f8d9 1000 	ldr.w	r1, [r9]
 800b206:	fa1f fb82 	uxth.w	fp, r2
 800b20a:	b289      	uxth	r1, r1
 800b20c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b210:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b214:	f8d9 2000 	ldr.w	r2, [r9]
 800b218:	4461      	add	r1, ip
 800b21a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b21e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b222:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b226:	b289      	uxth	r1, r1
 800b228:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b22c:	4577      	cmp	r7, lr
 800b22e:	f849 1b04 	str.w	r1, [r9], #4
 800b232:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b236:	d8e2      	bhi.n	800b1fe <__multiply+0xb2>
 800b238:	9a01      	ldr	r2, [sp, #4]
 800b23a:	f845 c002 	str.w	ip, [r5, r2]
 800b23e:	9a03      	ldr	r2, [sp, #12]
 800b240:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b244:	3304      	adds	r3, #4
 800b246:	f1b9 0f00 	cmp.w	r9, #0
 800b24a:	d020      	beq.n	800b28e <__multiply+0x142>
 800b24c:	6829      	ldr	r1, [r5, #0]
 800b24e:	f104 0c14 	add.w	ip, r4, #20
 800b252:	46ae      	mov	lr, r5
 800b254:	f04f 0a00 	mov.w	sl, #0
 800b258:	f8bc b000 	ldrh.w	fp, [ip]
 800b25c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b260:	fb09 220b 	mla	r2, r9, fp, r2
 800b264:	4492      	add	sl, r2
 800b266:	b289      	uxth	r1, r1
 800b268:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b26c:	f84e 1b04 	str.w	r1, [lr], #4
 800b270:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b274:	f8be 1000 	ldrh.w	r1, [lr]
 800b278:	0c12      	lsrs	r2, r2, #16
 800b27a:	fb09 1102 	mla	r1, r9, r2, r1
 800b27e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b282:	4567      	cmp	r7, ip
 800b284:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b288:	d8e6      	bhi.n	800b258 <__multiply+0x10c>
 800b28a:	9a01      	ldr	r2, [sp, #4]
 800b28c:	50a9      	str	r1, [r5, r2]
 800b28e:	3504      	adds	r5, #4
 800b290:	e79a      	b.n	800b1c8 <__multiply+0x7c>
 800b292:	3e01      	subs	r6, #1
 800b294:	e79c      	b.n	800b1d0 <__multiply+0x84>
 800b296:	bf00      	nop
 800b298:	0800eee8 	.word	0x0800eee8
 800b29c:	0800ef74 	.word	0x0800ef74

0800b2a0 <__pow5mult>:
 800b2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2a4:	4615      	mov	r5, r2
 800b2a6:	f012 0203 	ands.w	r2, r2, #3
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	460f      	mov	r7, r1
 800b2ae:	d007      	beq.n	800b2c0 <__pow5mult+0x20>
 800b2b0:	4c25      	ldr	r4, [pc, #148]	; (800b348 <__pow5mult+0xa8>)
 800b2b2:	3a01      	subs	r2, #1
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2ba:	f7ff fe51 	bl	800af60 <__multadd>
 800b2be:	4607      	mov	r7, r0
 800b2c0:	10ad      	asrs	r5, r5, #2
 800b2c2:	d03d      	beq.n	800b340 <__pow5mult+0xa0>
 800b2c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2c6:	b97c      	cbnz	r4, 800b2e8 <__pow5mult+0x48>
 800b2c8:	2010      	movs	r0, #16
 800b2ca:	f7ff fdbf 	bl	800ae4c <malloc>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	6270      	str	r0, [r6, #36]	; 0x24
 800b2d2:	b928      	cbnz	r0, 800b2e0 <__pow5mult+0x40>
 800b2d4:	4b1d      	ldr	r3, [pc, #116]	; (800b34c <__pow5mult+0xac>)
 800b2d6:	481e      	ldr	r0, [pc, #120]	; (800b350 <__pow5mult+0xb0>)
 800b2d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b2dc:	f000 fd2e 	bl	800bd3c <__assert_func>
 800b2e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2e4:	6004      	str	r4, [r0, #0]
 800b2e6:	60c4      	str	r4, [r0, #12]
 800b2e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2f0:	b94c      	cbnz	r4, 800b306 <__pow5mult+0x66>
 800b2f2:	f240 2171 	movw	r1, #625	; 0x271
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f7ff ff12 	bl	800b120 <__i2b>
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800b302:	4604      	mov	r4, r0
 800b304:	6003      	str	r3, [r0, #0]
 800b306:	f04f 0900 	mov.w	r9, #0
 800b30a:	07eb      	lsls	r3, r5, #31
 800b30c:	d50a      	bpl.n	800b324 <__pow5mult+0x84>
 800b30e:	4639      	mov	r1, r7
 800b310:	4622      	mov	r2, r4
 800b312:	4630      	mov	r0, r6
 800b314:	f7ff ff1a 	bl	800b14c <__multiply>
 800b318:	4639      	mov	r1, r7
 800b31a:	4680      	mov	r8, r0
 800b31c:	4630      	mov	r0, r6
 800b31e:	f7ff fdfd 	bl	800af1c <_Bfree>
 800b322:	4647      	mov	r7, r8
 800b324:	106d      	asrs	r5, r5, #1
 800b326:	d00b      	beq.n	800b340 <__pow5mult+0xa0>
 800b328:	6820      	ldr	r0, [r4, #0]
 800b32a:	b938      	cbnz	r0, 800b33c <__pow5mult+0x9c>
 800b32c:	4622      	mov	r2, r4
 800b32e:	4621      	mov	r1, r4
 800b330:	4630      	mov	r0, r6
 800b332:	f7ff ff0b 	bl	800b14c <__multiply>
 800b336:	6020      	str	r0, [r4, #0]
 800b338:	f8c0 9000 	str.w	r9, [r0]
 800b33c:	4604      	mov	r4, r0
 800b33e:	e7e4      	b.n	800b30a <__pow5mult+0x6a>
 800b340:	4638      	mov	r0, r7
 800b342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b346:	bf00      	nop
 800b348:	0800f0c0 	.word	0x0800f0c0
 800b34c:	0800ee76 	.word	0x0800ee76
 800b350:	0800ef74 	.word	0x0800ef74

0800b354 <__lshift>:
 800b354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b358:	460c      	mov	r4, r1
 800b35a:	6849      	ldr	r1, [r1, #4]
 800b35c:	6923      	ldr	r3, [r4, #16]
 800b35e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b362:	68a3      	ldr	r3, [r4, #8]
 800b364:	4607      	mov	r7, r0
 800b366:	4691      	mov	r9, r2
 800b368:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b36c:	f108 0601 	add.w	r6, r8, #1
 800b370:	42b3      	cmp	r3, r6
 800b372:	db0b      	blt.n	800b38c <__lshift+0x38>
 800b374:	4638      	mov	r0, r7
 800b376:	f7ff fd91 	bl	800ae9c <_Balloc>
 800b37a:	4605      	mov	r5, r0
 800b37c:	b948      	cbnz	r0, 800b392 <__lshift+0x3e>
 800b37e:	4602      	mov	r2, r0
 800b380:	4b2a      	ldr	r3, [pc, #168]	; (800b42c <__lshift+0xd8>)
 800b382:	482b      	ldr	r0, [pc, #172]	; (800b430 <__lshift+0xdc>)
 800b384:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b388:	f000 fcd8 	bl	800bd3c <__assert_func>
 800b38c:	3101      	adds	r1, #1
 800b38e:	005b      	lsls	r3, r3, #1
 800b390:	e7ee      	b.n	800b370 <__lshift+0x1c>
 800b392:	2300      	movs	r3, #0
 800b394:	f100 0114 	add.w	r1, r0, #20
 800b398:	f100 0210 	add.w	r2, r0, #16
 800b39c:	4618      	mov	r0, r3
 800b39e:	4553      	cmp	r3, sl
 800b3a0:	db37      	blt.n	800b412 <__lshift+0xbe>
 800b3a2:	6920      	ldr	r0, [r4, #16]
 800b3a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3a8:	f104 0314 	add.w	r3, r4, #20
 800b3ac:	f019 091f 	ands.w	r9, r9, #31
 800b3b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b3b8:	d02f      	beq.n	800b41a <__lshift+0xc6>
 800b3ba:	f1c9 0e20 	rsb	lr, r9, #32
 800b3be:	468a      	mov	sl, r1
 800b3c0:	f04f 0c00 	mov.w	ip, #0
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	fa02 f209 	lsl.w	r2, r2, r9
 800b3ca:	ea42 020c 	orr.w	r2, r2, ip
 800b3ce:	f84a 2b04 	str.w	r2, [sl], #4
 800b3d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3d6:	4298      	cmp	r0, r3
 800b3d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b3dc:	d8f2      	bhi.n	800b3c4 <__lshift+0x70>
 800b3de:	1b03      	subs	r3, r0, r4
 800b3e0:	3b15      	subs	r3, #21
 800b3e2:	f023 0303 	bic.w	r3, r3, #3
 800b3e6:	3304      	adds	r3, #4
 800b3e8:	f104 0215 	add.w	r2, r4, #21
 800b3ec:	4290      	cmp	r0, r2
 800b3ee:	bf38      	it	cc
 800b3f0:	2304      	movcc	r3, #4
 800b3f2:	f841 c003 	str.w	ip, [r1, r3]
 800b3f6:	f1bc 0f00 	cmp.w	ip, #0
 800b3fa:	d001      	beq.n	800b400 <__lshift+0xac>
 800b3fc:	f108 0602 	add.w	r6, r8, #2
 800b400:	3e01      	subs	r6, #1
 800b402:	4638      	mov	r0, r7
 800b404:	612e      	str	r6, [r5, #16]
 800b406:	4621      	mov	r1, r4
 800b408:	f7ff fd88 	bl	800af1c <_Bfree>
 800b40c:	4628      	mov	r0, r5
 800b40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b412:	f842 0f04 	str.w	r0, [r2, #4]!
 800b416:	3301      	adds	r3, #1
 800b418:	e7c1      	b.n	800b39e <__lshift+0x4a>
 800b41a:	3904      	subs	r1, #4
 800b41c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b420:	f841 2f04 	str.w	r2, [r1, #4]!
 800b424:	4298      	cmp	r0, r3
 800b426:	d8f9      	bhi.n	800b41c <__lshift+0xc8>
 800b428:	e7ea      	b.n	800b400 <__lshift+0xac>
 800b42a:	bf00      	nop
 800b42c:	0800eee8 	.word	0x0800eee8
 800b430:	0800ef74 	.word	0x0800ef74

0800b434 <__mcmp>:
 800b434:	b530      	push	{r4, r5, lr}
 800b436:	6902      	ldr	r2, [r0, #16]
 800b438:	690c      	ldr	r4, [r1, #16]
 800b43a:	1b12      	subs	r2, r2, r4
 800b43c:	d10e      	bne.n	800b45c <__mcmp+0x28>
 800b43e:	f100 0314 	add.w	r3, r0, #20
 800b442:	3114      	adds	r1, #20
 800b444:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b448:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b44c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b450:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b454:	42a5      	cmp	r5, r4
 800b456:	d003      	beq.n	800b460 <__mcmp+0x2c>
 800b458:	d305      	bcc.n	800b466 <__mcmp+0x32>
 800b45a:	2201      	movs	r2, #1
 800b45c:	4610      	mov	r0, r2
 800b45e:	bd30      	pop	{r4, r5, pc}
 800b460:	4283      	cmp	r3, r0
 800b462:	d3f3      	bcc.n	800b44c <__mcmp+0x18>
 800b464:	e7fa      	b.n	800b45c <__mcmp+0x28>
 800b466:	f04f 32ff 	mov.w	r2, #4294967295
 800b46a:	e7f7      	b.n	800b45c <__mcmp+0x28>

0800b46c <__mdiff>:
 800b46c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	460c      	mov	r4, r1
 800b472:	4606      	mov	r6, r0
 800b474:	4611      	mov	r1, r2
 800b476:	4620      	mov	r0, r4
 800b478:	4690      	mov	r8, r2
 800b47a:	f7ff ffdb 	bl	800b434 <__mcmp>
 800b47e:	1e05      	subs	r5, r0, #0
 800b480:	d110      	bne.n	800b4a4 <__mdiff+0x38>
 800b482:	4629      	mov	r1, r5
 800b484:	4630      	mov	r0, r6
 800b486:	f7ff fd09 	bl	800ae9c <_Balloc>
 800b48a:	b930      	cbnz	r0, 800b49a <__mdiff+0x2e>
 800b48c:	4b3a      	ldr	r3, [pc, #232]	; (800b578 <__mdiff+0x10c>)
 800b48e:	4602      	mov	r2, r0
 800b490:	f240 2132 	movw	r1, #562	; 0x232
 800b494:	4839      	ldr	r0, [pc, #228]	; (800b57c <__mdiff+0x110>)
 800b496:	f000 fc51 	bl	800bd3c <__assert_func>
 800b49a:	2301      	movs	r3, #1
 800b49c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a4:	bfa4      	itt	ge
 800b4a6:	4643      	movge	r3, r8
 800b4a8:	46a0      	movge	r8, r4
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4b0:	bfa6      	itte	ge
 800b4b2:	461c      	movge	r4, r3
 800b4b4:	2500      	movge	r5, #0
 800b4b6:	2501      	movlt	r5, #1
 800b4b8:	f7ff fcf0 	bl	800ae9c <_Balloc>
 800b4bc:	b920      	cbnz	r0, 800b4c8 <__mdiff+0x5c>
 800b4be:	4b2e      	ldr	r3, [pc, #184]	; (800b578 <__mdiff+0x10c>)
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4c6:	e7e5      	b.n	800b494 <__mdiff+0x28>
 800b4c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4cc:	6926      	ldr	r6, [r4, #16]
 800b4ce:	60c5      	str	r5, [r0, #12]
 800b4d0:	f104 0914 	add.w	r9, r4, #20
 800b4d4:	f108 0514 	add.w	r5, r8, #20
 800b4d8:	f100 0e14 	add.w	lr, r0, #20
 800b4dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b4e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b4e4:	f108 0210 	add.w	r2, r8, #16
 800b4e8:	46f2      	mov	sl, lr
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b4f4:	fa1f f883 	uxth.w	r8, r3
 800b4f8:	fa11 f18b 	uxtah	r1, r1, fp
 800b4fc:	0c1b      	lsrs	r3, r3, #16
 800b4fe:	eba1 0808 	sub.w	r8, r1, r8
 800b502:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b506:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b50a:	fa1f f888 	uxth.w	r8, r8
 800b50e:	1419      	asrs	r1, r3, #16
 800b510:	454e      	cmp	r6, r9
 800b512:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b516:	f84a 3b04 	str.w	r3, [sl], #4
 800b51a:	d8e7      	bhi.n	800b4ec <__mdiff+0x80>
 800b51c:	1b33      	subs	r3, r6, r4
 800b51e:	3b15      	subs	r3, #21
 800b520:	f023 0303 	bic.w	r3, r3, #3
 800b524:	3304      	adds	r3, #4
 800b526:	3415      	adds	r4, #21
 800b528:	42a6      	cmp	r6, r4
 800b52a:	bf38      	it	cc
 800b52c:	2304      	movcc	r3, #4
 800b52e:	441d      	add	r5, r3
 800b530:	4473      	add	r3, lr
 800b532:	469e      	mov	lr, r3
 800b534:	462e      	mov	r6, r5
 800b536:	4566      	cmp	r6, ip
 800b538:	d30e      	bcc.n	800b558 <__mdiff+0xec>
 800b53a:	f10c 0203 	add.w	r2, ip, #3
 800b53e:	1b52      	subs	r2, r2, r5
 800b540:	f022 0203 	bic.w	r2, r2, #3
 800b544:	3d03      	subs	r5, #3
 800b546:	45ac      	cmp	ip, r5
 800b548:	bf38      	it	cc
 800b54a:	2200      	movcc	r2, #0
 800b54c:	441a      	add	r2, r3
 800b54e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b552:	b17b      	cbz	r3, 800b574 <__mdiff+0x108>
 800b554:	6107      	str	r7, [r0, #16]
 800b556:	e7a3      	b.n	800b4a0 <__mdiff+0x34>
 800b558:	f856 8b04 	ldr.w	r8, [r6], #4
 800b55c:	fa11 f288 	uxtah	r2, r1, r8
 800b560:	1414      	asrs	r4, r2, #16
 800b562:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b566:	b292      	uxth	r2, r2
 800b568:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b56c:	f84e 2b04 	str.w	r2, [lr], #4
 800b570:	1421      	asrs	r1, r4, #16
 800b572:	e7e0      	b.n	800b536 <__mdiff+0xca>
 800b574:	3f01      	subs	r7, #1
 800b576:	e7ea      	b.n	800b54e <__mdiff+0xe2>
 800b578:	0800eee8 	.word	0x0800eee8
 800b57c:	0800ef74 	.word	0x0800ef74

0800b580 <__ulp>:
 800b580:	b082      	sub	sp, #8
 800b582:	ed8d 0b00 	vstr	d0, [sp]
 800b586:	9b01      	ldr	r3, [sp, #4]
 800b588:	4912      	ldr	r1, [pc, #72]	; (800b5d4 <__ulp+0x54>)
 800b58a:	4019      	ands	r1, r3
 800b58c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b590:	2900      	cmp	r1, #0
 800b592:	dd05      	ble.n	800b5a0 <__ulp+0x20>
 800b594:	2200      	movs	r2, #0
 800b596:	460b      	mov	r3, r1
 800b598:	ec43 2b10 	vmov	d0, r2, r3
 800b59c:	b002      	add	sp, #8
 800b59e:	4770      	bx	lr
 800b5a0:	4249      	negs	r1, r1
 800b5a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b5a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b5aa:	f04f 0200 	mov.w	r2, #0
 800b5ae:	f04f 0300 	mov.w	r3, #0
 800b5b2:	da04      	bge.n	800b5be <__ulp+0x3e>
 800b5b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b5b8:	fa41 f300 	asr.w	r3, r1, r0
 800b5bc:	e7ec      	b.n	800b598 <__ulp+0x18>
 800b5be:	f1a0 0114 	sub.w	r1, r0, #20
 800b5c2:	291e      	cmp	r1, #30
 800b5c4:	bfda      	itte	le
 800b5c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b5ca:	fa20 f101 	lsrle.w	r1, r0, r1
 800b5ce:	2101      	movgt	r1, #1
 800b5d0:	460a      	mov	r2, r1
 800b5d2:	e7e1      	b.n	800b598 <__ulp+0x18>
 800b5d4:	7ff00000 	.word	0x7ff00000

0800b5d8 <__b2d>:
 800b5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5da:	6905      	ldr	r5, [r0, #16]
 800b5dc:	f100 0714 	add.w	r7, r0, #20
 800b5e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b5e4:	1f2e      	subs	r6, r5, #4
 800b5e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f7ff fd48 	bl	800b080 <__hi0bits>
 800b5f0:	f1c0 0320 	rsb	r3, r0, #32
 800b5f4:	280a      	cmp	r0, #10
 800b5f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b674 <__b2d+0x9c>
 800b5fa:	600b      	str	r3, [r1, #0]
 800b5fc:	dc14      	bgt.n	800b628 <__b2d+0x50>
 800b5fe:	f1c0 0e0b 	rsb	lr, r0, #11
 800b602:	fa24 f10e 	lsr.w	r1, r4, lr
 800b606:	42b7      	cmp	r7, r6
 800b608:	ea41 030c 	orr.w	r3, r1, ip
 800b60c:	bf34      	ite	cc
 800b60e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b612:	2100      	movcs	r1, #0
 800b614:	3015      	adds	r0, #21
 800b616:	fa04 f000 	lsl.w	r0, r4, r0
 800b61a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b61e:	ea40 0201 	orr.w	r2, r0, r1
 800b622:	ec43 2b10 	vmov	d0, r2, r3
 800b626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b628:	42b7      	cmp	r7, r6
 800b62a:	bf3a      	itte	cc
 800b62c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b630:	f1a5 0608 	subcc.w	r6, r5, #8
 800b634:	2100      	movcs	r1, #0
 800b636:	380b      	subs	r0, #11
 800b638:	d017      	beq.n	800b66a <__b2d+0x92>
 800b63a:	f1c0 0c20 	rsb	ip, r0, #32
 800b63e:	fa04 f500 	lsl.w	r5, r4, r0
 800b642:	42be      	cmp	r6, r7
 800b644:	fa21 f40c 	lsr.w	r4, r1, ip
 800b648:	ea45 0504 	orr.w	r5, r5, r4
 800b64c:	bf8c      	ite	hi
 800b64e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b652:	2400      	movls	r4, #0
 800b654:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b658:	fa01 f000 	lsl.w	r0, r1, r0
 800b65c:	fa24 f40c 	lsr.w	r4, r4, ip
 800b660:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b664:	ea40 0204 	orr.w	r2, r0, r4
 800b668:	e7db      	b.n	800b622 <__b2d+0x4a>
 800b66a:	ea44 030c 	orr.w	r3, r4, ip
 800b66e:	460a      	mov	r2, r1
 800b670:	e7d7      	b.n	800b622 <__b2d+0x4a>
 800b672:	bf00      	nop
 800b674:	3ff00000 	.word	0x3ff00000

0800b678 <__d2b>:
 800b678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b67c:	4689      	mov	r9, r1
 800b67e:	2101      	movs	r1, #1
 800b680:	ec57 6b10 	vmov	r6, r7, d0
 800b684:	4690      	mov	r8, r2
 800b686:	f7ff fc09 	bl	800ae9c <_Balloc>
 800b68a:	4604      	mov	r4, r0
 800b68c:	b930      	cbnz	r0, 800b69c <__d2b+0x24>
 800b68e:	4602      	mov	r2, r0
 800b690:	4b25      	ldr	r3, [pc, #148]	; (800b728 <__d2b+0xb0>)
 800b692:	4826      	ldr	r0, [pc, #152]	; (800b72c <__d2b+0xb4>)
 800b694:	f240 310a 	movw	r1, #778	; 0x30a
 800b698:	f000 fb50 	bl	800bd3c <__assert_func>
 800b69c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b6a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b6a4:	bb35      	cbnz	r5, 800b6f4 <__d2b+0x7c>
 800b6a6:	2e00      	cmp	r6, #0
 800b6a8:	9301      	str	r3, [sp, #4]
 800b6aa:	d028      	beq.n	800b6fe <__d2b+0x86>
 800b6ac:	4668      	mov	r0, sp
 800b6ae:	9600      	str	r6, [sp, #0]
 800b6b0:	f7ff fd06 	bl	800b0c0 <__lo0bits>
 800b6b4:	9900      	ldr	r1, [sp, #0]
 800b6b6:	b300      	cbz	r0, 800b6fa <__d2b+0x82>
 800b6b8:	9a01      	ldr	r2, [sp, #4]
 800b6ba:	f1c0 0320 	rsb	r3, r0, #32
 800b6be:	fa02 f303 	lsl.w	r3, r2, r3
 800b6c2:	430b      	orrs	r3, r1
 800b6c4:	40c2      	lsrs	r2, r0
 800b6c6:	6163      	str	r3, [r4, #20]
 800b6c8:	9201      	str	r2, [sp, #4]
 800b6ca:	9b01      	ldr	r3, [sp, #4]
 800b6cc:	61a3      	str	r3, [r4, #24]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	bf14      	ite	ne
 800b6d2:	2202      	movne	r2, #2
 800b6d4:	2201      	moveq	r2, #1
 800b6d6:	6122      	str	r2, [r4, #16]
 800b6d8:	b1d5      	cbz	r5, 800b710 <__d2b+0x98>
 800b6da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b6de:	4405      	add	r5, r0
 800b6e0:	f8c9 5000 	str.w	r5, [r9]
 800b6e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6e8:	f8c8 0000 	str.w	r0, [r8]
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	b003      	add	sp, #12
 800b6f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6f8:	e7d5      	b.n	800b6a6 <__d2b+0x2e>
 800b6fa:	6161      	str	r1, [r4, #20]
 800b6fc:	e7e5      	b.n	800b6ca <__d2b+0x52>
 800b6fe:	a801      	add	r0, sp, #4
 800b700:	f7ff fcde 	bl	800b0c0 <__lo0bits>
 800b704:	9b01      	ldr	r3, [sp, #4]
 800b706:	6163      	str	r3, [r4, #20]
 800b708:	2201      	movs	r2, #1
 800b70a:	6122      	str	r2, [r4, #16]
 800b70c:	3020      	adds	r0, #32
 800b70e:	e7e3      	b.n	800b6d8 <__d2b+0x60>
 800b710:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b714:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b718:	f8c9 0000 	str.w	r0, [r9]
 800b71c:	6918      	ldr	r0, [r3, #16]
 800b71e:	f7ff fcaf 	bl	800b080 <__hi0bits>
 800b722:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b726:	e7df      	b.n	800b6e8 <__d2b+0x70>
 800b728:	0800eee8 	.word	0x0800eee8
 800b72c:	0800ef74 	.word	0x0800ef74

0800b730 <__ratio>:
 800b730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b734:	4688      	mov	r8, r1
 800b736:	4669      	mov	r1, sp
 800b738:	4681      	mov	r9, r0
 800b73a:	f7ff ff4d 	bl	800b5d8 <__b2d>
 800b73e:	a901      	add	r1, sp, #4
 800b740:	4640      	mov	r0, r8
 800b742:	ec55 4b10 	vmov	r4, r5, d0
 800b746:	f7ff ff47 	bl	800b5d8 <__b2d>
 800b74a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b74e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b752:	eba3 0c02 	sub.w	ip, r3, r2
 800b756:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b75a:	1a9b      	subs	r3, r3, r2
 800b75c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b760:	ec51 0b10 	vmov	r0, r1, d0
 800b764:	2b00      	cmp	r3, #0
 800b766:	bfd6      	itet	le
 800b768:	460a      	movle	r2, r1
 800b76a:	462a      	movgt	r2, r5
 800b76c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b770:	468b      	mov	fp, r1
 800b772:	462f      	mov	r7, r5
 800b774:	bfd4      	ite	le
 800b776:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b77a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b77e:	4620      	mov	r0, r4
 800b780:	ee10 2a10 	vmov	r2, s0
 800b784:	465b      	mov	r3, fp
 800b786:	4639      	mov	r1, r7
 800b788:	f7f5 f878 	bl	800087c <__aeabi_ddiv>
 800b78c:	ec41 0b10 	vmov	d0, r0, r1
 800b790:	b003      	add	sp, #12
 800b792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b796 <__copybits>:
 800b796:	3901      	subs	r1, #1
 800b798:	b570      	push	{r4, r5, r6, lr}
 800b79a:	1149      	asrs	r1, r1, #5
 800b79c:	6914      	ldr	r4, [r2, #16]
 800b79e:	3101      	adds	r1, #1
 800b7a0:	f102 0314 	add.w	r3, r2, #20
 800b7a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b7a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b7ac:	1f05      	subs	r5, r0, #4
 800b7ae:	42a3      	cmp	r3, r4
 800b7b0:	d30c      	bcc.n	800b7cc <__copybits+0x36>
 800b7b2:	1aa3      	subs	r3, r4, r2
 800b7b4:	3b11      	subs	r3, #17
 800b7b6:	f023 0303 	bic.w	r3, r3, #3
 800b7ba:	3211      	adds	r2, #17
 800b7bc:	42a2      	cmp	r2, r4
 800b7be:	bf88      	it	hi
 800b7c0:	2300      	movhi	r3, #0
 800b7c2:	4418      	add	r0, r3
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	4288      	cmp	r0, r1
 800b7c8:	d305      	bcc.n	800b7d6 <__copybits+0x40>
 800b7ca:	bd70      	pop	{r4, r5, r6, pc}
 800b7cc:	f853 6b04 	ldr.w	r6, [r3], #4
 800b7d0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b7d4:	e7eb      	b.n	800b7ae <__copybits+0x18>
 800b7d6:	f840 3b04 	str.w	r3, [r0], #4
 800b7da:	e7f4      	b.n	800b7c6 <__copybits+0x30>

0800b7dc <__any_on>:
 800b7dc:	f100 0214 	add.w	r2, r0, #20
 800b7e0:	6900      	ldr	r0, [r0, #16]
 800b7e2:	114b      	asrs	r3, r1, #5
 800b7e4:	4298      	cmp	r0, r3
 800b7e6:	b510      	push	{r4, lr}
 800b7e8:	db11      	blt.n	800b80e <__any_on+0x32>
 800b7ea:	dd0a      	ble.n	800b802 <__any_on+0x26>
 800b7ec:	f011 011f 	ands.w	r1, r1, #31
 800b7f0:	d007      	beq.n	800b802 <__any_on+0x26>
 800b7f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b7f6:	fa24 f001 	lsr.w	r0, r4, r1
 800b7fa:	fa00 f101 	lsl.w	r1, r0, r1
 800b7fe:	428c      	cmp	r4, r1
 800b800:	d10b      	bne.n	800b81a <__any_on+0x3e>
 800b802:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b806:	4293      	cmp	r3, r2
 800b808:	d803      	bhi.n	800b812 <__any_on+0x36>
 800b80a:	2000      	movs	r0, #0
 800b80c:	bd10      	pop	{r4, pc}
 800b80e:	4603      	mov	r3, r0
 800b810:	e7f7      	b.n	800b802 <__any_on+0x26>
 800b812:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b816:	2900      	cmp	r1, #0
 800b818:	d0f5      	beq.n	800b806 <__any_on+0x2a>
 800b81a:	2001      	movs	r0, #1
 800b81c:	e7f6      	b.n	800b80c <__any_on+0x30>

0800b81e <_calloc_r>:
 800b81e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b820:	fba1 2402 	umull	r2, r4, r1, r2
 800b824:	b94c      	cbnz	r4, 800b83a <_calloc_r+0x1c>
 800b826:	4611      	mov	r1, r2
 800b828:	9201      	str	r2, [sp, #4]
 800b82a:	f000 f87b 	bl	800b924 <_malloc_r>
 800b82e:	9a01      	ldr	r2, [sp, #4]
 800b830:	4605      	mov	r5, r0
 800b832:	b930      	cbnz	r0, 800b842 <_calloc_r+0x24>
 800b834:	4628      	mov	r0, r5
 800b836:	b003      	add	sp, #12
 800b838:	bd30      	pop	{r4, r5, pc}
 800b83a:	220c      	movs	r2, #12
 800b83c:	6002      	str	r2, [r0, #0]
 800b83e:	2500      	movs	r5, #0
 800b840:	e7f8      	b.n	800b834 <_calloc_r+0x16>
 800b842:	4621      	mov	r1, r4
 800b844:	f7fc fbbe 	bl	8007fc4 <memset>
 800b848:	e7f4      	b.n	800b834 <_calloc_r+0x16>
	...

0800b84c <_free_r>:
 800b84c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b84e:	2900      	cmp	r1, #0
 800b850:	d044      	beq.n	800b8dc <_free_r+0x90>
 800b852:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b856:	9001      	str	r0, [sp, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f1a1 0404 	sub.w	r4, r1, #4
 800b85e:	bfb8      	it	lt
 800b860:	18e4      	addlt	r4, r4, r3
 800b862:	f000 fab5 	bl	800bdd0 <__malloc_lock>
 800b866:	4a1e      	ldr	r2, [pc, #120]	; (800b8e0 <_free_r+0x94>)
 800b868:	9801      	ldr	r0, [sp, #4]
 800b86a:	6813      	ldr	r3, [r2, #0]
 800b86c:	b933      	cbnz	r3, 800b87c <_free_r+0x30>
 800b86e:	6063      	str	r3, [r4, #4]
 800b870:	6014      	str	r4, [r2, #0]
 800b872:	b003      	add	sp, #12
 800b874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b878:	f000 bab0 	b.w	800bddc <__malloc_unlock>
 800b87c:	42a3      	cmp	r3, r4
 800b87e:	d908      	bls.n	800b892 <_free_r+0x46>
 800b880:	6825      	ldr	r5, [r4, #0]
 800b882:	1961      	adds	r1, r4, r5
 800b884:	428b      	cmp	r3, r1
 800b886:	bf01      	itttt	eq
 800b888:	6819      	ldreq	r1, [r3, #0]
 800b88a:	685b      	ldreq	r3, [r3, #4]
 800b88c:	1949      	addeq	r1, r1, r5
 800b88e:	6021      	streq	r1, [r4, #0]
 800b890:	e7ed      	b.n	800b86e <_free_r+0x22>
 800b892:	461a      	mov	r2, r3
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	b10b      	cbz	r3, 800b89c <_free_r+0x50>
 800b898:	42a3      	cmp	r3, r4
 800b89a:	d9fa      	bls.n	800b892 <_free_r+0x46>
 800b89c:	6811      	ldr	r1, [r2, #0]
 800b89e:	1855      	adds	r5, r2, r1
 800b8a0:	42a5      	cmp	r5, r4
 800b8a2:	d10b      	bne.n	800b8bc <_free_r+0x70>
 800b8a4:	6824      	ldr	r4, [r4, #0]
 800b8a6:	4421      	add	r1, r4
 800b8a8:	1854      	adds	r4, r2, r1
 800b8aa:	42a3      	cmp	r3, r4
 800b8ac:	6011      	str	r1, [r2, #0]
 800b8ae:	d1e0      	bne.n	800b872 <_free_r+0x26>
 800b8b0:	681c      	ldr	r4, [r3, #0]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	6053      	str	r3, [r2, #4]
 800b8b6:	4421      	add	r1, r4
 800b8b8:	6011      	str	r1, [r2, #0]
 800b8ba:	e7da      	b.n	800b872 <_free_r+0x26>
 800b8bc:	d902      	bls.n	800b8c4 <_free_r+0x78>
 800b8be:	230c      	movs	r3, #12
 800b8c0:	6003      	str	r3, [r0, #0]
 800b8c2:	e7d6      	b.n	800b872 <_free_r+0x26>
 800b8c4:	6825      	ldr	r5, [r4, #0]
 800b8c6:	1961      	adds	r1, r4, r5
 800b8c8:	428b      	cmp	r3, r1
 800b8ca:	bf04      	itt	eq
 800b8cc:	6819      	ldreq	r1, [r3, #0]
 800b8ce:	685b      	ldreq	r3, [r3, #4]
 800b8d0:	6063      	str	r3, [r4, #4]
 800b8d2:	bf04      	itt	eq
 800b8d4:	1949      	addeq	r1, r1, r5
 800b8d6:	6021      	streq	r1, [r4, #0]
 800b8d8:	6054      	str	r4, [r2, #4]
 800b8da:	e7ca      	b.n	800b872 <_free_r+0x26>
 800b8dc:	b003      	add	sp, #12
 800b8de:	bd30      	pop	{r4, r5, pc}
 800b8e0:	20000430 	.word	0x20000430

0800b8e4 <sbrk_aligned>:
 800b8e4:	b570      	push	{r4, r5, r6, lr}
 800b8e6:	4e0e      	ldr	r6, [pc, #56]	; (800b920 <sbrk_aligned+0x3c>)
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	6831      	ldr	r1, [r6, #0]
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	b911      	cbnz	r1, 800b8f6 <sbrk_aligned+0x12>
 800b8f0:	f000 f9f2 	bl	800bcd8 <_sbrk_r>
 800b8f4:	6030      	str	r0, [r6, #0]
 800b8f6:	4621      	mov	r1, r4
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	f000 f9ed 	bl	800bcd8 <_sbrk_r>
 800b8fe:	1c43      	adds	r3, r0, #1
 800b900:	d00a      	beq.n	800b918 <sbrk_aligned+0x34>
 800b902:	1cc4      	adds	r4, r0, #3
 800b904:	f024 0403 	bic.w	r4, r4, #3
 800b908:	42a0      	cmp	r0, r4
 800b90a:	d007      	beq.n	800b91c <sbrk_aligned+0x38>
 800b90c:	1a21      	subs	r1, r4, r0
 800b90e:	4628      	mov	r0, r5
 800b910:	f000 f9e2 	bl	800bcd8 <_sbrk_r>
 800b914:	3001      	adds	r0, #1
 800b916:	d101      	bne.n	800b91c <sbrk_aligned+0x38>
 800b918:	f04f 34ff 	mov.w	r4, #4294967295
 800b91c:	4620      	mov	r0, r4
 800b91e:	bd70      	pop	{r4, r5, r6, pc}
 800b920:	20000434 	.word	0x20000434

0800b924 <_malloc_r>:
 800b924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b928:	1ccd      	adds	r5, r1, #3
 800b92a:	f025 0503 	bic.w	r5, r5, #3
 800b92e:	3508      	adds	r5, #8
 800b930:	2d0c      	cmp	r5, #12
 800b932:	bf38      	it	cc
 800b934:	250c      	movcc	r5, #12
 800b936:	2d00      	cmp	r5, #0
 800b938:	4607      	mov	r7, r0
 800b93a:	db01      	blt.n	800b940 <_malloc_r+0x1c>
 800b93c:	42a9      	cmp	r1, r5
 800b93e:	d905      	bls.n	800b94c <_malloc_r+0x28>
 800b940:	230c      	movs	r3, #12
 800b942:	603b      	str	r3, [r7, #0]
 800b944:	2600      	movs	r6, #0
 800b946:	4630      	mov	r0, r6
 800b948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b94c:	4e2e      	ldr	r6, [pc, #184]	; (800ba08 <_malloc_r+0xe4>)
 800b94e:	f000 fa3f 	bl	800bdd0 <__malloc_lock>
 800b952:	6833      	ldr	r3, [r6, #0]
 800b954:	461c      	mov	r4, r3
 800b956:	bb34      	cbnz	r4, 800b9a6 <_malloc_r+0x82>
 800b958:	4629      	mov	r1, r5
 800b95a:	4638      	mov	r0, r7
 800b95c:	f7ff ffc2 	bl	800b8e4 <sbrk_aligned>
 800b960:	1c43      	adds	r3, r0, #1
 800b962:	4604      	mov	r4, r0
 800b964:	d14d      	bne.n	800ba02 <_malloc_r+0xde>
 800b966:	6834      	ldr	r4, [r6, #0]
 800b968:	4626      	mov	r6, r4
 800b96a:	2e00      	cmp	r6, #0
 800b96c:	d140      	bne.n	800b9f0 <_malloc_r+0xcc>
 800b96e:	6823      	ldr	r3, [r4, #0]
 800b970:	4631      	mov	r1, r6
 800b972:	4638      	mov	r0, r7
 800b974:	eb04 0803 	add.w	r8, r4, r3
 800b978:	f000 f9ae 	bl	800bcd8 <_sbrk_r>
 800b97c:	4580      	cmp	r8, r0
 800b97e:	d13a      	bne.n	800b9f6 <_malloc_r+0xd2>
 800b980:	6821      	ldr	r1, [r4, #0]
 800b982:	3503      	adds	r5, #3
 800b984:	1a6d      	subs	r5, r5, r1
 800b986:	f025 0503 	bic.w	r5, r5, #3
 800b98a:	3508      	adds	r5, #8
 800b98c:	2d0c      	cmp	r5, #12
 800b98e:	bf38      	it	cc
 800b990:	250c      	movcc	r5, #12
 800b992:	4629      	mov	r1, r5
 800b994:	4638      	mov	r0, r7
 800b996:	f7ff ffa5 	bl	800b8e4 <sbrk_aligned>
 800b99a:	3001      	adds	r0, #1
 800b99c:	d02b      	beq.n	800b9f6 <_malloc_r+0xd2>
 800b99e:	6823      	ldr	r3, [r4, #0]
 800b9a0:	442b      	add	r3, r5
 800b9a2:	6023      	str	r3, [r4, #0]
 800b9a4:	e00e      	b.n	800b9c4 <_malloc_r+0xa0>
 800b9a6:	6822      	ldr	r2, [r4, #0]
 800b9a8:	1b52      	subs	r2, r2, r5
 800b9aa:	d41e      	bmi.n	800b9ea <_malloc_r+0xc6>
 800b9ac:	2a0b      	cmp	r2, #11
 800b9ae:	d916      	bls.n	800b9de <_malloc_r+0xba>
 800b9b0:	1961      	adds	r1, r4, r5
 800b9b2:	42a3      	cmp	r3, r4
 800b9b4:	6025      	str	r5, [r4, #0]
 800b9b6:	bf18      	it	ne
 800b9b8:	6059      	strne	r1, [r3, #4]
 800b9ba:	6863      	ldr	r3, [r4, #4]
 800b9bc:	bf08      	it	eq
 800b9be:	6031      	streq	r1, [r6, #0]
 800b9c0:	5162      	str	r2, [r4, r5]
 800b9c2:	604b      	str	r3, [r1, #4]
 800b9c4:	4638      	mov	r0, r7
 800b9c6:	f104 060b 	add.w	r6, r4, #11
 800b9ca:	f000 fa07 	bl	800bddc <__malloc_unlock>
 800b9ce:	f026 0607 	bic.w	r6, r6, #7
 800b9d2:	1d23      	adds	r3, r4, #4
 800b9d4:	1af2      	subs	r2, r6, r3
 800b9d6:	d0b6      	beq.n	800b946 <_malloc_r+0x22>
 800b9d8:	1b9b      	subs	r3, r3, r6
 800b9da:	50a3      	str	r3, [r4, r2]
 800b9dc:	e7b3      	b.n	800b946 <_malloc_r+0x22>
 800b9de:	6862      	ldr	r2, [r4, #4]
 800b9e0:	42a3      	cmp	r3, r4
 800b9e2:	bf0c      	ite	eq
 800b9e4:	6032      	streq	r2, [r6, #0]
 800b9e6:	605a      	strne	r2, [r3, #4]
 800b9e8:	e7ec      	b.n	800b9c4 <_malloc_r+0xa0>
 800b9ea:	4623      	mov	r3, r4
 800b9ec:	6864      	ldr	r4, [r4, #4]
 800b9ee:	e7b2      	b.n	800b956 <_malloc_r+0x32>
 800b9f0:	4634      	mov	r4, r6
 800b9f2:	6876      	ldr	r6, [r6, #4]
 800b9f4:	e7b9      	b.n	800b96a <_malloc_r+0x46>
 800b9f6:	230c      	movs	r3, #12
 800b9f8:	603b      	str	r3, [r7, #0]
 800b9fa:	4638      	mov	r0, r7
 800b9fc:	f000 f9ee 	bl	800bddc <__malloc_unlock>
 800ba00:	e7a1      	b.n	800b946 <_malloc_r+0x22>
 800ba02:	6025      	str	r5, [r4, #0]
 800ba04:	e7de      	b.n	800b9c4 <_malloc_r+0xa0>
 800ba06:	bf00      	nop
 800ba08:	20000430 	.word	0x20000430

0800ba0c <__ssputs_r>:
 800ba0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba10:	688e      	ldr	r6, [r1, #8]
 800ba12:	429e      	cmp	r6, r3
 800ba14:	4682      	mov	sl, r0
 800ba16:	460c      	mov	r4, r1
 800ba18:	4690      	mov	r8, r2
 800ba1a:	461f      	mov	r7, r3
 800ba1c:	d838      	bhi.n	800ba90 <__ssputs_r+0x84>
 800ba1e:	898a      	ldrh	r2, [r1, #12]
 800ba20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba24:	d032      	beq.n	800ba8c <__ssputs_r+0x80>
 800ba26:	6825      	ldr	r5, [r4, #0]
 800ba28:	6909      	ldr	r1, [r1, #16]
 800ba2a:	eba5 0901 	sub.w	r9, r5, r1
 800ba2e:	6965      	ldr	r5, [r4, #20]
 800ba30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba38:	3301      	adds	r3, #1
 800ba3a:	444b      	add	r3, r9
 800ba3c:	106d      	asrs	r5, r5, #1
 800ba3e:	429d      	cmp	r5, r3
 800ba40:	bf38      	it	cc
 800ba42:	461d      	movcc	r5, r3
 800ba44:	0553      	lsls	r3, r2, #21
 800ba46:	d531      	bpl.n	800baac <__ssputs_r+0xa0>
 800ba48:	4629      	mov	r1, r5
 800ba4a:	f7ff ff6b 	bl	800b924 <_malloc_r>
 800ba4e:	4606      	mov	r6, r0
 800ba50:	b950      	cbnz	r0, 800ba68 <__ssputs_r+0x5c>
 800ba52:	230c      	movs	r3, #12
 800ba54:	f8ca 3000 	str.w	r3, [sl]
 800ba58:	89a3      	ldrh	r3, [r4, #12]
 800ba5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba5e:	81a3      	strh	r3, [r4, #12]
 800ba60:	f04f 30ff 	mov.w	r0, #4294967295
 800ba64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba68:	6921      	ldr	r1, [r4, #16]
 800ba6a:	464a      	mov	r2, r9
 800ba6c:	f7ff fa08 	bl	800ae80 <memcpy>
 800ba70:	89a3      	ldrh	r3, [r4, #12]
 800ba72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba7a:	81a3      	strh	r3, [r4, #12]
 800ba7c:	6126      	str	r6, [r4, #16]
 800ba7e:	6165      	str	r5, [r4, #20]
 800ba80:	444e      	add	r6, r9
 800ba82:	eba5 0509 	sub.w	r5, r5, r9
 800ba86:	6026      	str	r6, [r4, #0]
 800ba88:	60a5      	str	r5, [r4, #8]
 800ba8a:	463e      	mov	r6, r7
 800ba8c:	42be      	cmp	r6, r7
 800ba8e:	d900      	bls.n	800ba92 <__ssputs_r+0x86>
 800ba90:	463e      	mov	r6, r7
 800ba92:	6820      	ldr	r0, [r4, #0]
 800ba94:	4632      	mov	r2, r6
 800ba96:	4641      	mov	r1, r8
 800ba98:	f000 f980 	bl	800bd9c <memmove>
 800ba9c:	68a3      	ldr	r3, [r4, #8]
 800ba9e:	1b9b      	subs	r3, r3, r6
 800baa0:	60a3      	str	r3, [r4, #8]
 800baa2:	6823      	ldr	r3, [r4, #0]
 800baa4:	4433      	add	r3, r6
 800baa6:	6023      	str	r3, [r4, #0]
 800baa8:	2000      	movs	r0, #0
 800baaa:	e7db      	b.n	800ba64 <__ssputs_r+0x58>
 800baac:	462a      	mov	r2, r5
 800baae:	f000 f99b 	bl	800bde8 <_realloc_r>
 800bab2:	4606      	mov	r6, r0
 800bab4:	2800      	cmp	r0, #0
 800bab6:	d1e1      	bne.n	800ba7c <__ssputs_r+0x70>
 800bab8:	6921      	ldr	r1, [r4, #16]
 800baba:	4650      	mov	r0, sl
 800babc:	f7ff fec6 	bl	800b84c <_free_r>
 800bac0:	e7c7      	b.n	800ba52 <__ssputs_r+0x46>
	...

0800bac4 <_svfiprintf_r>:
 800bac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac8:	4698      	mov	r8, r3
 800baca:	898b      	ldrh	r3, [r1, #12]
 800bacc:	061b      	lsls	r3, r3, #24
 800bace:	b09d      	sub	sp, #116	; 0x74
 800bad0:	4607      	mov	r7, r0
 800bad2:	460d      	mov	r5, r1
 800bad4:	4614      	mov	r4, r2
 800bad6:	d50e      	bpl.n	800baf6 <_svfiprintf_r+0x32>
 800bad8:	690b      	ldr	r3, [r1, #16]
 800bada:	b963      	cbnz	r3, 800baf6 <_svfiprintf_r+0x32>
 800badc:	2140      	movs	r1, #64	; 0x40
 800bade:	f7ff ff21 	bl	800b924 <_malloc_r>
 800bae2:	6028      	str	r0, [r5, #0]
 800bae4:	6128      	str	r0, [r5, #16]
 800bae6:	b920      	cbnz	r0, 800baf2 <_svfiprintf_r+0x2e>
 800bae8:	230c      	movs	r3, #12
 800baea:	603b      	str	r3, [r7, #0]
 800baec:	f04f 30ff 	mov.w	r0, #4294967295
 800baf0:	e0d1      	b.n	800bc96 <_svfiprintf_r+0x1d2>
 800baf2:	2340      	movs	r3, #64	; 0x40
 800baf4:	616b      	str	r3, [r5, #20]
 800baf6:	2300      	movs	r3, #0
 800baf8:	9309      	str	r3, [sp, #36]	; 0x24
 800bafa:	2320      	movs	r3, #32
 800bafc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb00:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb04:	2330      	movs	r3, #48	; 0x30
 800bb06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bcb0 <_svfiprintf_r+0x1ec>
 800bb0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb0e:	f04f 0901 	mov.w	r9, #1
 800bb12:	4623      	mov	r3, r4
 800bb14:	469a      	mov	sl, r3
 800bb16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb1a:	b10a      	cbz	r2, 800bb20 <_svfiprintf_r+0x5c>
 800bb1c:	2a25      	cmp	r2, #37	; 0x25
 800bb1e:	d1f9      	bne.n	800bb14 <_svfiprintf_r+0x50>
 800bb20:	ebba 0b04 	subs.w	fp, sl, r4
 800bb24:	d00b      	beq.n	800bb3e <_svfiprintf_r+0x7a>
 800bb26:	465b      	mov	r3, fp
 800bb28:	4622      	mov	r2, r4
 800bb2a:	4629      	mov	r1, r5
 800bb2c:	4638      	mov	r0, r7
 800bb2e:	f7ff ff6d 	bl	800ba0c <__ssputs_r>
 800bb32:	3001      	adds	r0, #1
 800bb34:	f000 80aa 	beq.w	800bc8c <_svfiprintf_r+0x1c8>
 800bb38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb3a:	445a      	add	r2, fp
 800bb3c:	9209      	str	r2, [sp, #36]	; 0x24
 800bb3e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	f000 80a2 	beq.w	800bc8c <_svfiprintf_r+0x1c8>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb52:	f10a 0a01 	add.w	sl, sl, #1
 800bb56:	9304      	str	r3, [sp, #16]
 800bb58:	9307      	str	r3, [sp, #28]
 800bb5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb5e:	931a      	str	r3, [sp, #104]	; 0x68
 800bb60:	4654      	mov	r4, sl
 800bb62:	2205      	movs	r2, #5
 800bb64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb68:	4851      	ldr	r0, [pc, #324]	; (800bcb0 <_svfiprintf_r+0x1ec>)
 800bb6a:	f7f4 fb51 	bl	8000210 <memchr>
 800bb6e:	9a04      	ldr	r2, [sp, #16]
 800bb70:	b9d8      	cbnz	r0, 800bbaa <_svfiprintf_r+0xe6>
 800bb72:	06d0      	lsls	r0, r2, #27
 800bb74:	bf44      	itt	mi
 800bb76:	2320      	movmi	r3, #32
 800bb78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb7c:	0711      	lsls	r1, r2, #28
 800bb7e:	bf44      	itt	mi
 800bb80:	232b      	movmi	r3, #43	; 0x2b
 800bb82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb86:	f89a 3000 	ldrb.w	r3, [sl]
 800bb8a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb8c:	d015      	beq.n	800bbba <_svfiprintf_r+0xf6>
 800bb8e:	9a07      	ldr	r2, [sp, #28]
 800bb90:	4654      	mov	r4, sl
 800bb92:	2000      	movs	r0, #0
 800bb94:	f04f 0c0a 	mov.w	ip, #10
 800bb98:	4621      	mov	r1, r4
 800bb9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb9e:	3b30      	subs	r3, #48	; 0x30
 800bba0:	2b09      	cmp	r3, #9
 800bba2:	d94e      	bls.n	800bc42 <_svfiprintf_r+0x17e>
 800bba4:	b1b0      	cbz	r0, 800bbd4 <_svfiprintf_r+0x110>
 800bba6:	9207      	str	r2, [sp, #28]
 800bba8:	e014      	b.n	800bbd4 <_svfiprintf_r+0x110>
 800bbaa:	eba0 0308 	sub.w	r3, r0, r8
 800bbae:	fa09 f303 	lsl.w	r3, r9, r3
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	9304      	str	r3, [sp, #16]
 800bbb6:	46a2      	mov	sl, r4
 800bbb8:	e7d2      	b.n	800bb60 <_svfiprintf_r+0x9c>
 800bbba:	9b03      	ldr	r3, [sp, #12]
 800bbbc:	1d19      	adds	r1, r3, #4
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	9103      	str	r1, [sp, #12]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	bfbb      	ittet	lt
 800bbc6:	425b      	neglt	r3, r3
 800bbc8:	f042 0202 	orrlt.w	r2, r2, #2
 800bbcc:	9307      	strge	r3, [sp, #28]
 800bbce:	9307      	strlt	r3, [sp, #28]
 800bbd0:	bfb8      	it	lt
 800bbd2:	9204      	strlt	r2, [sp, #16]
 800bbd4:	7823      	ldrb	r3, [r4, #0]
 800bbd6:	2b2e      	cmp	r3, #46	; 0x2e
 800bbd8:	d10c      	bne.n	800bbf4 <_svfiprintf_r+0x130>
 800bbda:	7863      	ldrb	r3, [r4, #1]
 800bbdc:	2b2a      	cmp	r3, #42	; 0x2a
 800bbde:	d135      	bne.n	800bc4c <_svfiprintf_r+0x188>
 800bbe0:	9b03      	ldr	r3, [sp, #12]
 800bbe2:	1d1a      	adds	r2, r3, #4
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	9203      	str	r2, [sp, #12]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	bfb8      	it	lt
 800bbec:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbf0:	3402      	adds	r4, #2
 800bbf2:	9305      	str	r3, [sp, #20]
 800bbf4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bcc0 <_svfiprintf_r+0x1fc>
 800bbf8:	7821      	ldrb	r1, [r4, #0]
 800bbfa:	2203      	movs	r2, #3
 800bbfc:	4650      	mov	r0, sl
 800bbfe:	f7f4 fb07 	bl	8000210 <memchr>
 800bc02:	b140      	cbz	r0, 800bc16 <_svfiprintf_r+0x152>
 800bc04:	2340      	movs	r3, #64	; 0x40
 800bc06:	eba0 000a 	sub.w	r0, r0, sl
 800bc0a:	fa03 f000 	lsl.w	r0, r3, r0
 800bc0e:	9b04      	ldr	r3, [sp, #16]
 800bc10:	4303      	orrs	r3, r0
 800bc12:	3401      	adds	r4, #1
 800bc14:	9304      	str	r3, [sp, #16]
 800bc16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc1a:	4826      	ldr	r0, [pc, #152]	; (800bcb4 <_svfiprintf_r+0x1f0>)
 800bc1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc20:	2206      	movs	r2, #6
 800bc22:	f7f4 faf5 	bl	8000210 <memchr>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	d038      	beq.n	800bc9c <_svfiprintf_r+0x1d8>
 800bc2a:	4b23      	ldr	r3, [pc, #140]	; (800bcb8 <_svfiprintf_r+0x1f4>)
 800bc2c:	bb1b      	cbnz	r3, 800bc76 <_svfiprintf_r+0x1b2>
 800bc2e:	9b03      	ldr	r3, [sp, #12]
 800bc30:	3307      	adds	r3, #7
 800bc32:	f023 0307 	bic.w	r3, r3, #7
 800bc36:	3308      	adds	r3, #8
 800bc38:	9303      	str	r3, [sp, #12]
 800bc3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc3c:	4433      	add	r3, r6
 800bc3e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc40:	e767      	b.n	800bb12 <_svfiprintf_r+0x4e>
 800bc42:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc46:	460c      	mov	r4, r1
 800bc48:	2001      	movs	r0, #1
 800bc4a:	e7a5      	b.n	800bb98 <_svfiprintf_r+0xd4>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	3401      	adds	r4, #1
 800bc50:	9305      	str	r3, [sp, #20]
 800bc52:	4619      	mov	r1, r3
 800bc54:	f04f 0c0a 	mov.w	ip, #10
 800bc58:	4620      	mov	r0, r4
 800bc5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc5e:	3a30      	subs	r2, #48	; 0x30
 800bc60:	2a09      	cmp	r2, #9
 800bc62:	d903      	bls.n	800bc6c <_svfiprintf_r+0x1a8>
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d0c5      	beq.n	800bbf4 <_svfiprintf_r+0x130>
 800bc68:	9105      	str	r1, [sp, #20]
 800bc6a:	e7c3      	b.n	800bbf4 <_svfiprintf_r+0x130>
 800bc6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc70:	4604      	mov	r4, r0
 800bc72:	2301      	movs	r3, #1
 800bc74:	e7f0      	b.n	800bc58 <_svfiprintf_r+0x194>
 800bc76:	ab03      	add	r3, sp, #12
 800bc78:	9300      	str	r3, [sp, #0]
 800bc7a:	462a      	mov	r2, r5
 800bc7c:	4b0f      	ldr	r3, [pc, #60]	; (800bcbc <_svfiprintf_r+0x1f8>)
 800bc7e:	a904      	add	r1, sp, #16
 800bc80:	4638      	mov	r0, r7
 800bc82:	f7fc fa47 	bl	8008114 <_printf_float>
 800bc86:	1c42      	adds	r2, r0, #1
 800bc88:	4606      	mov	r6, r0
 800bc8a:	d1d6      	bne.n	800bc3a <_svfiprintf_r+0x176>
 800bc8c:	89ab      	ldrh	r3, [r5, #12]
 800bc8e:	065b      	lsls	r3, r3, #25
 800bc90:	f53f af2c 	bmi.w	800baec <_svfiprintf_r+0x28>
 800bc94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc96:	b01d      	add	sp, #116	; 0x74
 800bc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9c:	ab03      	add	r3, sp, #12
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	462a      	mov	r2, r5
 800bca2:	4b06      	ldr	r3, [pc, #24]	; (800bcbc <_svfiprintf_r+0x1f8>)
 800bca4:	a904      	add	r1, sp, #16
 800bca6:	4638      	mov	r0, r7
 800bca8:	f7fc fcd8 	bl	800865c <_printf_i>
 800bcac:	e7eb      	b.n	800bc86 <_svfiprintf_r+0x1c2>
 800bcae:	bf00      	nop
 800bcb0:	0800f0cc 	.word	0x0800f0cc
 800bcb4:	0800f0d6 	.word	0x0800f0d6
 800bcb8:	08008115 	.word	0x08008115
 800bcbc:	0800ba0d 	.word	0x0800ba0d
 800bcc0:	0800f0d2 	.word	0x0800f0d2
 800bcc4:	00000000 	.word	0x00000000

0800bcc8 <nan>:
 800bcc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bcd0 <nan+0x8>
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	00000000 	.word	0x00000000
 800bcd4:	7ff80000 	.word	0x7ff80000

0800bcd8 <_sbrk_r>:
 800bcd8:	b538      	push	{r3, r4, r5, lr}
 800bcda:	4d06      	ldr	r5, [pc, #24]	; (800bcf4 <_sbrk_r+0x1c>)
 800bcdc:	2300      	movs	r3, #0
 800bcde:	4604      	mov	r4, r0
 800bce0:	4608      	mov	r0, r1
 800bce2:	602b      	str	r3, [r5, #0]
 800bce4:	f7f6 fa7a 	bl	80021dc <_sbrk>
 800bce8:	1c43      	adds	r3, r0, #1
 800bcea:	d102      	bne.n	800bcf2 <_sbrk_r+0x1a>
 800bcec:	682b      	ldr	r3, [r5, #0]
 800bcee:	b103      	cbz	r3, 800bcf2 <_sbrk_r+0x1a>
 800bcf0:	6023      	str	r3, [r4, #0]
 800bcf2:	bd38      	pop	{r3, r4, r5, pc}
 800bcf4:	20000438 	.word	0x20000438

0800bcf8 <strncmp>:
 800bcf8:	b510      	push	{r4, lr}
 800bcfa:	b17a      	cbz	r2, 800bd1c <strncmp+0x24>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	3901      	subs	r1, #1
 800bd00:	1884      	adds	r4, r0, r2
 800bd02:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bd06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bd0a:	4290      	cmp	r0, r2
 800bd0c:	d101      	bne.n	800bd12 <strncmp+0x1a>
 800bd0e:	42a3      	cmp	r3, r4
 800bd10:	d101      	bne.n	800bd16 <strncmp+0x1e>
 800bd12:	1a80      	subs	r0, r0, r2
 800bd14:	bd10      	pop	{r4, pc}
 800bd16:	2800      	cmp	r0, #0
 800bd18:	d1f3      	bne.n	800bd02 <strncmp+0xa>
 800bd1a:	e7fa      	b.n	800bd12 <strncmp+0x1a>
 800bd1c:	4610      	mov	r0, r2
 800bd1e:	e7f9      	b.n	800bd14 <strncmp+0x1c>

0800bd20 <__ascii_wctomb>:
 800bd20:	b149      	cbz	r1, 800bd36 <__ascii_wctomb+0x16>
 800bd22:	2aff      	cmp	r2, #255	; 0xff
 800bd24:	bf85      	ittet	hi
 800bd26:	238a      	movhi	r3, #138	; 0x8a
 800bd28:	6003      	strhi	r3, [r0, #0]
 800bd2a:	700a      	strbls	r2, [r1, #0]
 800bd2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd30:	bf98      	it	ls
 800bd32:	2001      	movls	r0, #1
 800bd34:	4770      	bx	lr
 800bd36:	4608      	mov	r0, r1
 800bd38:	4770      	bx	lr
	...

0800bd3c <__assert_func>:
 800bd3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd3e:	4614      	mov	r4, r2
 800bd40:	461a      	mov	r2, r3
 800bd42:	4b09      	ldr	r3, [pc, #36]	; (800bd68 <__assert_func+0x2c>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4605      	mov	r5, r0
 800bd48:	68d8      	ldr	r0, [r3, #12]
 800bd4a:	b14c      	cbz	r4, 800bd60 <__assert_func+0x24>
 800bd4c:	4b07      	ldr	r3, [pc, #28]	; (800bd6c <__assert_func+0x30>)
 800bd4e:	9100      	str	r1, [sp, #0]
 800bd50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd54:	4906      	ldr	r1, [pc, #24]	; (800bd70 <__assert_func+0x34>)
 800bd56:	462b      	mov	r3, r5
 800bd58:	f000 f80e 	bl	800bd78 <fiprintf>
 800bd5c:	f000 fa8c 	bl	800c278 <abort>
 800bd60:	4b04      	ldr	r3, [pc, #16]	; (800bd74 <__assert_func+0x38>)
 800bd62:	461c      	mov	r4, r3
 800bd64:	e7f3      	b.n	800bd4e <__assert_func+0x12>
 800bd66:	bf00      	nop
 800bd68:	2000001c 	.word	0x2000001c
 800bd6c:	0800f0dd 	.word	0x0800f0dd
 800bd70:	0800f0ea 	.word	0x0800f0ea
 800bd74:	0800f118 	.word	0x0800f118

0800bd78 <fiprintf>:
 800bd78:	b40e      	push	{r1, r2, r3}
 800bd7a:	b503      	push	{r0, r1, lr}
 800bd7c:	4601      	mov	r1, r0
 800bd7e:	ab03      	add	r3, sp, #12
 800bd80:	4805      	ldr	r0, [pc, #20]	; (800bd98 <fiprintf+0x20>)
 800bd82:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd86:	6800      	ldr	r0, [r0, #0]
 800bd88:	9301      	str	r3, [sp, #4]
 800bd8a:	f000 f885 	bl	800be98 <_vfiprintf_r>
 800bd8e:	b002      	add	sp, #8
 800bd90:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd94:	b003      	add	sp, #12
 800bd96:	4770      	bx	lr
 800bd98:	2000001c 	.word	0x2000001c

0800bd9c <memmove>:
 800bd9c:	4288      	cmp	r0, r1
 800bd9e:	b510      	push	{r4, lr}
 800bda0:	eb01 0402 	add.w	r4, r1, r2
 800bda4:	d902      	bls.n	800bdac <memmove+0x10>
 800bda6:	4284      	cmp	r4, r0
 800bda8:	4623      	mov	r3, r4
 800bdaa:	d807      	bhi.n	800bdbc <memmove+0x20>
 800bdac:	1e43      	subs	r3, r0, #1
 800bdae:	42a1      	cmp	r1, r4
 800bdb0:	d008      	beq.n	800bdc4 <memmove+0x28>
 800bdb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdba:	e7f8      	b.n	800bdae <memmove+0x12>
 800bdbc:	4402      	add	r2, r0
 800bdbe:	4601      	mov	r1, r0
 800bdc0:	428a      	cmp	r2, r1
 800bdc2:	d100      	bne.n	800bdc6 <memmove+0x2a>
 800bdc4:	bd10      	pop	{r4, pc}
 800bdc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdce:	e7f7      	b.n	800bdc0 <memmove+0x24>

0800bdd0 <__malloc_lock>:
 800bdd0:	4801      	ldr	r0, [pc, #4]	; (800bdd8 <__malloc_lock+0x8>)
 800bdd2:	f000 bc11 	b.w	800c5f8 <__retarget_lock_acquire_recursive>
 800bdd6:	bf00      	nop
 800bdd8:	2000043c 	.word	0x2000043c

0800bddc <__malloc_unlock>:
 800bddc:	4801      	ldr	r0, [pc, #4]	; (800bde4 <__malloc_unlock+0x8>)
 800bdde:	f000 bc0c 	b.w	800c5fa <__retarget_lock_release_recursive>
 800bde2:	bf00      	nop
 800bde4:	2000043c 	.word	0x2000043c

0800bde8 <_realloc_r>:
 800bde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdec:	4680      	mov	r8, r0
 800bdee:	4614      	mov	r4, r2
 800bdf0:	460e      	mov	r6, r1
 800bdf2:	b921      	cbnz	r1, 800bdfe <_realloc_r+0x16>
 800bdf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	f7ff bd93 	b.w	800b924 <_malloc_r>
 800bdfe:	b92a      	cbnz	r2, 800be0c <_realloc_r+0x24>
 800be00:	f7ff fd24 	bl	800b84c <_free_r>
 800be04:	4625      	mov	r5, r4
 800be06:	4628      	mov	r0, r5
 800be08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be0c:	f000 fc5c 	bl	800c6c8 <_malloc_usable_size_r>
 800be10:	4284      	cmp	r4, r0
 800be12:	4607      	mov	r7, r0
 800be14:	d802      	bhi.n	800be1c <_realloc_r+0x34>
 800be16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be1a:	d812      	bhi.n	800be42 <_realloc_r+0x5a>
 800be1c:	4621      	mov	r1, r4
 800be1e:	4640      	mov	r0, r8
 800be20:	f7ff fd80 	bl	800b924 <_malloc_r>
 800be24:	4605      	mov	r5, r0
 800be26:	2800      	cmp	r0, #0
 800be28:	d0ed      	beq.n	800be06 <_realloc_r+0x1e>
 800be2a:	42bc      	cmp	r4, r7
 800be2c:	4622      	mov	r2, r4
 800be2e:	4631      	mov	r1, r6
 800be30:	bf28      	it	cs
 800be32:	463a      	movcs	r2, r7
 800be34:	f7ff f824 	bl	800ae80 <memcpy>
 800be38:	4631      	mov	r1, r6
 800be3a:	4640      	mov	r0, r8
 800be3c:	f7ff fd06 	bl	800b84c <_free_r>
 800be40:	e7e1      	b.n	800be06 <_realloc_r+0x1e>
 800be42:	4635      	mov	r5, r6
 800be44:	e7df      	b.n	800be06 <_realloc_r+0x1e>

0800be46 <__sfputc_r>:
 800be46:	6893      	ldr	r3, [r2, #8]
 800be48:	3b01      	subs	r3, #1
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	b410      	push	{r4}
 800be4e:	6093      	str	r3, [r2, #8]
 800be50:	da08      	bge.n	800be64 <__sfputc_r+0x1e>
 800be52:	6994      	ldr	r4, [r2, #24]
 800be54:	42a3      	cmp	r3, r4
 800be56:	db01      	blt.n	800be5c <__sfputc_r+0x16>
 800be58:	290a      	cmp	r1, #10
 800be5a:	d103      	bne.n	800be64 <__sfputc_r+0x1e>
 800be5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be60:	f000 b94a 	b.w	800c0f8 <__swbuf_r>
 800be64:	6813      	ldr	r3, [r2, #0]
 800be66:	1c58      	adds	r0, r3, #1
 800be68:	6010      	str	r0, [r2, #0]
 800be6a:	7019      	strb	r1, [r3, #0]
 800be6c:	4608      	mov	r0, r1
 800be6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <__sfputs_r>:
 800be74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be76:	4606      	mov	r6, r0
 800be78:	460f      	mov	r7, r1
 800be7a:	4614      	mov	r4, r2
 800be7c:	18d5      	adds	r5, r2, r3
 800be7e:	42ac      	cmp	r4, r5
 800be80:	d101      	bne.n	800be86 <__sfputs_r+0x12>
 800be82:	2000      	movs	r0, #0
 800be84:	e007      	b.n	800be96 <__sfputs_r+0x22>
 800be86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be8a:	463a      	mov	r2, r7
 800be8c:	4630      	mov	r0, r6
 800be8e:	f7ff ffda 	bl	800be46 <__sfputc_r>
 800be92:	1c43      	adds	r3, r0, #1
 800be94:	d1f3      	bne.n	800be7e <__sfputs_r+0xa>
 800be96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be98 <_vfiprintf_r>:
 800be98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9c:	460d      	mov	r5, r1
 800be9e:	b09d      	sub	sp, #116	; 0x74
 800bea0:	4614      	mov	r4, r2
 800bea2:	4698      	mov	r8, r3
 800bea4:	4606      	mov	r6, r0
 800bea6:	b118      	cbz	r0, 800beb0 <_vfiprintf_r+0x18>
 800bea8:	6983      	ldr	r3, [r0, #24]
 800beaa:	b90b      	cbnz	r3, 800beb0 <_vfiprintf_r+0x18>
 800beac:	f000 fb06 	bl	800c4bc <__sinit>
 800beb0:	4b89      	ldr	r3, [pc, #548]	; (800c0d8 <_vfiprintf_r+0x240>)
 800beb2:	429d      	cmp	r5, r3
 800beb4:	d11b      	bne.n	800beee <_vfiprintf_r+0x56>
 800beb6:	6875      	ldr	r5, [r6, #4]
 800beb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800beba:	07d9      	lsls	r1, r3, #31
 800bebc:	d405      	bmi.n	800beca <_vfiprintf_r+0x32>
 800bebe:	89ab      	ldrh	r3, [r5, #12]
 800bec0:	059a      	lsls	r2, r3, #22
 800bec2:	d402      	bmi.n	800beca <_vfiprintf_r+0x32>
 800bec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bec6:	f000 fb97 	bl	800c5f8 <__retarget_lock_acquire_recursive>
 800beca:	89ab      	ldrh	r3, [r5, #12]
 800becc:	071b      	lsls	r3, r3, #28
 800bece:	d501      	bpl.n	800bed4 <_vfiprintf_r+0x3c>
 800bed0:	692b      	ldr	r3, [r5, #16]
 800bed2:	b9eb      	cbnz	r3, 800bf10 <_vfiprintf_r+0x78>
 800bed4:	4629      	mov	r1, r5
 800bed6:	4630      	mov	r0, r6
 800bed8:	f000 f960 	bl	800c19c <__swsetup_r>
 800bedc:	b1c0      	cbz	r0, 800bf10 <_vfiprintf_r+0x78>
 800bede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bee0:	07dc      	lsls	r4, r3, #31
 800bee2:	d50e      	bpl.n	800bf02 <_vfiprintf_r+0x6a>
 800bee4:	f04f 30ff 	mov.w	r0, #4294967295
 800bee8:	b01d      	add	sp, #116	; 0x74
 800beea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beee:	4b7b      	ldr	r3, [pc, #492]	; (800c0dc <_vfiprintf_r+0x244>)
 800bef0:	429d      	cmp	r5, r3
 800bef2:	d101      	bne.n	800bef8 <_vfiprintf_r+0x60>
 800bef4:	68b5      	ldr	r5, [r6, #8]
 800bef6:	e7df      	b.n	800beb8 <_vfiprintf_r+0x20>
 800bef8:	4b79      	ldr	r3, [pc, #484]	; (800c0e0 <_vfiprintf_r+0x248>)
 800befa:	429d      	cmp	r5, r3
 800befc:	bf08      	it	eq
 800befe:	68f5      	ldreq	r5, [r6, #12]
 800bf00:	e7da      	b.n	800beb8 <_vfiprintf_r+0x20>
 800bf02:	89ab      	ldrh	r3, [r5, #12]
 800bf04:	0598      	lsls	r0, r3, #22
 800bf06:	d4ed      	bmi.n	800bee4 <_vfiprintf_r+0x4c>
 800bf08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf0a:	f000 fb76 	bl	800c5fa <__retarget_lock_release_recursive>
 800bf0e:	e7e9      	b.n	800bee4 <_vfiprintf_r+0x4c>
 800bf10:	2300      	movs	r3, #0
 800bf12:	9309      	str	r3, [sp, #36]	; 0x24
 800bf14:	2320      	movs	r3, #32
 800bf16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf1e:	2330      	movs	r3, #48	; 0x30
 800bf20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c0e4 <_vfiprintf_r+0x24c>
 800bf24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf28:	f04f 0901 	mov.w	r9, #1
 800bf2c:	4623      	mov	r3, r4
 800bf2e:	469a      	mov	sl, r3
 800bf30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf34:	b10a      	cbz	r2, 800bf3a <_vfiprintf_r+0xa2>
 800bf36:	2a25      	cmp	r2, #37	; 0x25
 800bf38:	d1f9      	bne.n	800bf2e <_vfiprintf_r+0x96>
 800bf3a:	ebba 0b04 	subs.w	fp, sl, r4
 800bf3e:	d00b      	beq.n	800bf58 <_vfiprintf_r+0xc0>
 800bf40:	465b      	mov	r3, fp
 800bf42:	4622      	mov	r2, r4
 800bf44:	4629      	mov	r1, r5
 800bf46:	4630      	mov	r0, r6
 800bf48:	f7ff ff94 	bl	800be74 <__sfputs_r>
 800bf4c:	3001      	adds	r0, #1
 800bf4e:	f000 80aa 	beq.w	800c0a6 <_vfiprintf_r+0x20e>
 800bf52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf54:	445a      	add	r2, fp
 800bf56:	9209      	str	r2, [sp, #36]	; 0x24
 800bf58:	f89a 3000 	ldrb.w	r3, [sl]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f000 80a2 	beq.w	800c0a6 <_vfiprintf_r+0x20e>
 800bf62:	2300      	movs	r3, #0
 800bf64:	f04f 32ff 	mov.w	r2, #4294967295
 800bf68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf6c:	f10a 0a01 	add.w	sl, sl, #1
 800bf70:	9304      	str	r3, [sp, #16]
 800bf72:	9307      	str	r3, [sp, #28]
 800bf74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf78:	931a      	str	r3, [sp, #104]	; 0x68
 800bf7a:	4654      	mov	r4, sl
 800bf7c:	2205      	movs	r2, #5
 800bf7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf82:	4858      	ldr	r0, [pc, #352]	; (800c0e4 <_vfiprintf_r+0x24c>)
 800bf84:	f7f4 f944 	bl	8000210 <memchr>
 800bf88:	9a04      	ldr	r2, [sp, #16]
 800bf8a:	b9d8      	cbnz	r0, 800bfc4 <_vfiprintf_r+0x12c>
 800bf8c:	06d1      	lsls	r1, r2, #27
 800bf8e:	bf44      	itt	mi
 800bf90:	2320      	movmi	r3, #32
 800bf92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf96:	0713      	lsls	r3, r2, #28
 800bf98:	bf44      	itt	mi
 800bf9a:	232b      	movmi	r3, #43	; 0x2b
 800bf9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfa0:	f89a 3000 	ldrb.w	r3, [sl]
 800bfa4:	2b2a      	cmp	r3, #42	; 0x2a
 800bfa6:	d015      	beq.n	800bfd4 <_vfiprintf_r+0x13c>
 800bfa8:	9a07      	ldr	r2, [sp, #28]
 800bfaa:	4654      	mov	r4, sl
 800bfac:	2000      	movs	r0, #0
 800bfae:	f04f 0c0a 	mov.w	ip, #10
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfb8:	3b30      	subs	r3, #48	; 0x30
 800bfba:	2b09      	cmp	r3, #9
 800bfbc:	d94e      	bls.n	800c05c <_vfiprintf_r+0x1c4>
 800bfbe:	b1b0      	cbz	r0, 800bfee <_vfiprintf_r+0x156>
 800bfc0:	9207      	str	r2, [sp, #28]
 800bfc2:	e014      	b.n	800bfee <_vfiprintf_r+0x156>
 800bfc4:	eba0 0308 	sub.w	r3, r0, r8
 800bfc8:	fa09 f303 	lsl.w	r3, r9, r3
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	9304      	str	r3, [sp, #16]
 800bfd0:	46a2      	mov	sl, r4
 800bfd2:	e7d2      	b.n	800bf7a <_vfiprintf_r+0xe2>
 800bfd4:	9b03      	ldr	r3, [sp, #12]
 800bfd6:	1d19      	adds	r1, r3, #4
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	9103      	str	r1, [sp, #12]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	bfbb      	ittet	lt
 800bfe0:	425b      	neglt	r3, r3
 800bfe2:	f042 0202 	orrlt.w	r2, r2, #2
 800bfe6:	9307      	strge	r3, [sp, #28]
 800bfe8:	9307      	strlt	r3, [sp, #28]
 800bfea:	bfb8      	it	lt
 800bfec:	9204      	strlt	r2, [sp, #16]
 800bfee:	7823      	ldrb	r3, [r4, #0]
 800bff0:	2b2e      	cmp	r3, #46	; 0x2e
 800bff2:	d10c      	bne.n	800c00e <_vfiprintf_r+0x176>
 800bff4:	7863      	ldrb	r3, [r4, #1]
 800bff6:	2b2a      	cmp	r3, #42	; 0x2a
 800bff8:	d135      	bne.n	800c066 <_vfiprintf_r+0x1ce>
 800bffa:	9b03      	ldr	r3, [sp, #12]
 800bffc:	1d1a      	adds	r2, r3, #4
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	9203      	str	r2, [sp, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	bfb8      	it	lt
 800c006:	f04f 33ff 	movlt.w	r3, #4294967295
 800c00a:	3402      	adds	r4, #2
 800c00c:	9305      	str	r3, [sp, #20]
 800c00e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c0f4 <_vfiprintf_r+0x25c>
 800c012:	7821      	ldrb	r1, [r4, #0]
 800c014:	2203      	movs	r2, #3
 800c016:	4650      	mov	r0, sl
 800c018:	f7f4 f8fa 	bl	8000210 <memchr>
 800c01c:	b140      	cbz	r0, 800c030 <_vfiprintf_r+0x198>
 800c01e:	2340      	movs	r3, #64	; 0x40
 800c020:	eba0 000a 	sub.w	r0, r0, sl
 800c024:	fa03 f000 	lsl.w	r0, r3, r0
 800c028:	9b04      	ldr	r3, [sp, #16]
 800c02a:	4303      	orrs	r3, r0
 800c02c:	3401      	adds	r4, #1
 800c02e:	9304      	str	r3, [sp, #16]
 800c030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c034:	482c      	ldr	r0, [pc, #176]	; (800c0e8 <_vfiprintf_r+0x250>)
 800c036:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c03a:	2206      	movs	r2, #6
 800c03c:	f7f4 f8e8 	bl	8000210 <memchr>
 800c040:	2800      	cmp	r0, #0
 800c042:	d03f      	beq.n	800c0c4 <_vfiprintf_r+0x22c>
 800c044:	4b29      	ldr	r3, [pc, #164]	; (800c0ec <_vfiprintf_r+0x254>)
 800c046:	bb1b      	cbnz	r3, 800c090 <_vfiprintf_r+0x1f8>
 800c048:	9b03      	ldr	r3, [sp, #12]
 800c04a:	3307      	adds	r3, #7
 800c04c:	f023 0307 	bic.w	r3, r3, #7
 800c050:	3308      	adds	r3, #8
 800c052:	9303      	str	r3, [sp, #12]
 800c054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c056:	443b      	add	r3, r7
 800c058:	9309      	str	r3, [sp, #36]	; 0x24
 800c05a:	e767      	b.n	800bf2c <_vfiprintf_r+0x94>
 800c05c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c060:	460c      	mov	r4, r1
 800c062:	2001      	movs	r0, #1
 800c064:	e7a5      	b.n	800bfb2 <_vfiprintf_r+0x11a>
 800c066:	2300      	movs	r3, #0
 800c068:	3401      	adds	r4, #1
 800c06a:	9305      	str	r3, [sp, #20]
 800c06c:	4619      	mov	r1, r3
 800c06e:	f04f 0c0a 	mov.w	ip, #10
 800c072:	4620      	mov	r0, r4
 800c074:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c078:	3a30      	subs	r2, #48	; 0x30
 800c07a:	2a09      	cmp	r2, #9
 800c07c:	d903      	bls.n	800c086 <_vfiprintf_r+0x1ee>
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d0c5      	beq.n	800c00e <_vfiprintf_r+0x176>
 800c082:	9105      	str	r1, [sp, #20]
 800c084:	e7c3      	b.n	800c00e <_vfiprintf_r+0x176>
 800c086:	fb0c 2101 	mla	r1, ip, r1, r2
 800c08a:	4604      	mov	r4, r0
 800c08c:	2301      	movs	r3, #1
 800c08e:	e7f0      	b.n	800c072 <_vfiprintf_r+0x1da>
 800c090:	ab03      	add	r3, sp, #12
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	462a      	mov	r2, r5
 800c096:	4b16      	ldr	r3, [pc, #88]	; (800c0f0 <_vfiprintf_r+0x258>)
 800c098:	a904      	add	r1, sp, #16
 800c09a:	4630      	mov	r0, r6
 800c09c:	f7fc f83a 	bl	8008114 <_printf_float>
 800c0a0:	4607      	mov	r7, r0
 800c0a2:	1c78      	adds	r0, r7, #1
 800c0a4:	d1d6      	bne.n	800c054 <_vfiprintf_r+0x1bc>
 800c0a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0a8:	07d9      	lsls	r1, r3, #31
 800c0aa:	d405      	bmi.n	800c0b8 <_vfiprintf_r+0x220>
 800c0ac:	89ab      	ldrh	r3, [r5, #12]
 800c0ae:	059a      	lsls	r2, r3, #22
 800c0b0:	d402      	bmi.n	800c0b8 <_vfiprintf_r+0x220>
 800c0b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0b4:	f000 faa1 	bl	800c5fa <__retarget_lock_release_recursive>
 800c0b8:	89ab      	ldrh	r3, [r5, #12]
 800c0ba:	065b      	lsls	r3, r3, #25
 800c0bc:	f53f af12 	bmi.w	800bee4 <_vfiprintf_r+0x4c>
 800c0c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0c2:	e711      	b.n	800bee8 <_vfiprintf_r+0x50>
 800c0c4:	ab03      	add	r3, sp, #12
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	462a      	mov	r2, r5
 800c0ca:	4b09      	ldr	r3, [pc, #36]	; (800c0f0 <_vfiprintf_r+0x258>)
 800c0cc:	a904      	add	r1, sp, #16
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	f7fc fac4 	bl	800865c <_printf_i>
 800c0d4:	e7e4      	b.n	800c0a0 <_vfiprintf_r+0x208>
 800c0d6:	bf00      	nop
 800c0d8:	0800f13c 	.word	0x0800f13c
 800c0dc:	0800f15c 	.word	0x0800f15c
 800c0e0:	0800f11c 	.word	0x0800f11c
 800c0e4:	0800f0cc 	.word	0x0800f0cc
 800c0e8:	0800f0d6 	.word	0x0800f0d6
 800c0ec:	08008115 	.word	0x08008115
 800c0f0:	0800be75 	.word	0x0800be75
 800c0f4:	0800f0d2 	.word	0x0800f0d2

0800c0f8 <__swbuf_r>:
 800c0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fa:	460e      	mov	r6, r1
 800c0fc:	4614      	mov	r4, r2
 800c0fe:	4605      	mov	r5, r0
 800c100:	b118      	cbz	r0, 800c10a <__swbuf_r+0x12>
 800c102:	6983      	ldr	r3, [r0, #24]
 800c104:	b90b      	cbnz	r3, 800c10a <__swbuf_r+0x12>
 800c106:	f000 f9d9 	bl	800c4bc <__sinit>
 800c10a:	4b21      	ldr	r3, [pc, #132]	; (800c190 <__swbuf_r+0x98>)
 800c10c:	429c      	cmp	r4, r3
 800c10e:	d12b      	bne.n	800c168 <__swbuf_r+0x70>
 800c110:	686c      	ldr	r4, [r5, #4]
 800c112:	69a3      	ldr	r3, [r4, #24]
 800c114:	60a3      	str	r3, [r4, #8]
 800c116:	89a3      	ldrh	r3, [r4, #12]
 800c118:	071a      	lsls	r2, r3, #28
 800c11a:	d52f      	bpl.n	800c17c <__swbuf_r+0x84>
 800c11c:	6923      	ldr	r3, [r4, #16]
 800c11e:	b36b      	cbz	r3, 800c17c <__swbuf_r+0x84>
 800c120:	6923      	ldr	r3, [r4, #16]
 800c122:	6820      	ldr	r0, [r4, #0]
 800c124:	1ac0      	subs	r0, r0, r3
 800c126:	6963      	ldr	r3, [r4, #20]
 800c128:	b2f6      	uxtb	r6, r6
 800c12a:	4283      	cmp	r3, r0
 800c12c:	4637      	mov	r7, r6
 800c12e:	dc04      	bgt.n	800c13a <__swbuf_r+0x42>
 800c130:	4621      	mov	r1, r4
 800c132:	4628      	mov	r0, r5
 800c134:	f000 f92e 	bl	800c394 <_fflush_r>
 800c138:	bb30      	cbnz	r0, 800c188 <__swbuf_r+0x90>
 800c13a:	68a3      	ldr	r3, [r4, #8]
 800c13c:	3b01      	subs	r3, #1
 800c13e:	60a3      	str	r3, [r4, #8]
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	1c5a      	adds	r2, r3, #1
 800c144:	6022      	str	r2, [r4, #0]
 800c146:	701e      	strb	r6, [r3, #0]
 800c148:	6963      	ldr	r3, [r4, #20]
 800c14a:	3001      	adds	r0, #1
 800c14c:	4283      	cmp	r3, r0
 800c14e:	d004      	beq.n	800c15a <__swbuf_r+0x62>
 800c150:	89a3      	ldrh	r3, [r4, #12]
 800c152:	07db      	lsls	r3, r3, #31
 800c154:	d506      	bpl.n	800c164 <__swbuf_r+0x6c>
 800c156:	2e0a      	cmp	r6, #10
 800c158:	d104      	bne.n	800c164 <__swbuf_r+0x6c>
 800c15a:	4621      	mov	r1, r4
 800c15c:	4628      	mov	r0, r5
 800c15e:	f000 f919 	bl	800c394 <_fflush_r>
 800c162:	b988      	cbnz	r0, 800c188 <__swbuf_r+0x90>
 800c164:	4638      	mov	r0, r7
 800c166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c168:	4b0a      	ldr	r3, [pc, #40]	; (800c194 <__swbuf_r+0x9c>)
 800c16a:	429c      	cmp	r4, r3
 800c16c:	d101      	bne.n	800c172 <__swbuf_r+0x7a>
 800c16e:	68ac      	ldr	r4, [r5, #8]
 800c170:	e7cf      	b.n	800c112 <__swbuf_r+0x1a>
 800c172:	4b09      	ldr	r3, [pc, #36]	; (800c198 <__swbuf_r+0xa0>)
 800c174:	429c      	cmp	r4, r3
 800c176:	bf08      	it	eq
 800c178:	68ec      	ldreq	r4, [r5, #12]
 800c17a:	e7ca      	b.n	800c112 <__swbuf_r+0x1a>
 800c17c:	4621      	mov	r1, r4
 800c17e:	4628      	mov	r0, r5
 800c180:	f000 f80c 	bl	800c19c <__swsetup_r>
 800c184:	2800      	cmp	r0, #0
 800c186:	d0cb      	beq.n	800c120 <__swbuf_r+0x28>
 800c188:	f04f 37ff 	mov.w	r7, #4294967295
 800c18c:	e7ea      	b.n	800c164 <__swbuf_r+0x6c>
 800c18e:	bf00      	nop
 800c190:	0800f13c 	.word	0x0800f13c
 800c194:	0800f15c 	.word	0x0800f15c
 800c198:	0800f11c 	.word	0x0800f11c

0800c19c <__swsetup_r>:
 800c19c:	4b32      	ldr	r3, [pc, #200]	; (800c268 <__swsetup_r+0xcc>)
 800c19e:	b570      	push	{r4, r5, r6, lr}
 800c1a0:	681d      	ldr	r5, [r3, #0]
 800c1a2:	4606      	mov	r6, r0
 800c1a4:	460c      	mov	r4, r1
 800c1a6:	b125      	cbz	r5, 800c1b2 <__swsetup_r+0x16>
 800c1a8:	69ab      	ldr	r3, [r5, #24]
 800c1aa:	b913      	cbnz	r3, 800c1b2 <__swsetup_r+0x16>
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	f000 f985 	bl	800c4bc <__sinit>
 800c1b2:	4b2e      	ldr	r3, [pc, #184]	; (800c26c <__swsetup_r+0xd0>)
 800c1b4:	429c      	cmp	r4, r3
 800c1b6:	d10f      	bne.n	800c1d8 <__swsetup_r+0x3c>
 800c1b8:	686c      	ldr	r4, [r5, #4]
 800c1ba:	89a3      	ldrh	r3, [r4, #12]
 800c1bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1c0:	0719      	lsls	r1, r3, #28
 800c1c2:	d42c      	bmi.n	800c21e <__swsetup_r+0x82>
 800c1c4:	06dd      	lsls	r5, r3, #27
 800c1c6:	d411      	bmi.n	800c1ec <__swsetup_r+0x50>
 800c1c8:	2309      	movs	r3, #9
 800c1ca:	6033      	str	r3, [r6, #0]
 800c1cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c1d0:	81a3      	strh	r3, [r4, #12]
 800c1d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d6:	e03e      	b.n	800c256 <__swsetup_r+0xba>
 800c1d8:	4b25      	ldr	r3, [pc, #148]	; (800c270 <__swsetup_r+0xd4>)
 800c1da:	429c      	cmp	r4, r3
 800c1dc:	d101      	bne.n	800c1e2 <__swsetup_r+0x46>
 800c1de:	68ac      	ldr	r4, [r5, #8]
 800c1e0:	e7eb      	b.n	800c1ba <__swsetup_r+0x1e>
 800c1e2:	4b24      	ldr	r3, [pc, #144]	; (800c274 <__swsetup_r+0xd8>)
 800c1e4:	429c      	cmp	r4, r3
 800c1e6:	bf08      	it	eq
 800c1e8:	68ec      	ldreq	r4, [r5, #12]
 800c1ea:	e7e6      	b.n	800c1ba <__swsetup_r+0x1e>
 800c1ec:	0758      	lsls	r0, r3, #29
 800c1ee:	d512      	bpl.n	800c216 <__swsetup_r+0x7a>
 800c1f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1f2:	b141      	cbz	r1, 800c206 <__swsetup_r+0x6a>
 800c1f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1f8:	4299      	cmp	r1, r3
 800c1fa:	d002      	beq.n	800c202 <__swsetup_r+0x66>
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	f7ff fb25 	bl	800b84c <_free_r>
 800c202:	2300      	movs	r3, #0
 800c204:	6363      	str	r3, [r4, #52]	; 0x34
 800c206:	89a3      	ldrh	r3, [r4, #12]
 800c208:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c20c:	81a3      	strh	r3, [r4, #12]
 800c20e:	2300      	movs	r3, #0
 800c210:	6063      	str	r3, [r4, #4]
 800c212:	6923      	ldr	r3, [r4, #16]
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	89a3      	ldrh	r3, [r4, #12]
 800c218:	f043 0308 	orr.w	r3, r3, #8
 800c21c:	81a3      	strh	r3, [r4, #12]
 800c21e:	6923      	ldr	r3, [r4, #16]
 800c220:	b94b      	cbnz	r3, 800c236 <__swsetup_r+0x9a>
 800c222:	89a3      	ldrh	r3, [r4, #12]
 800c224:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c22c:	d003      	beq.n	800c236 <__swsetup_r+0x9a>
 800c22e:	4621      	mov	r1, r4
 800c230:	4630      	mov	r0, r6
 800c232:	f000 fa09 	bl	800c648 <__smakebuf_r>
 800c236:	89a0      	ldrh	r0, [r4, #12]
 800c238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c23c:	f010 0301 	ands.w	r3, r0, #1
 800c240:	d00a      	beq.n	800c258 <__swsetup_r+0xbc>
 800c242:	2300      	movs	r3, #0
 800c244:	60a3      	str	r3, [r4, #8]
 800c246:	6963      	ldr	r3, [r4, #20]
 800c248:	425b      	negs	r3, r3
 800c24a:	61a3      	str	r3, [r4, #24]
 800c24c:	6923      	ldr	r3, [r4, #16]
 800c24e:	b943      	cbnz	r3, 800c262 <__swsetup_r+0xc6>
 800c250:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c254:	d1ba      	bne.n	800c1cc <__swsetup_r+0x30>
 800c256:	bd70      	pop	{r4, r5, r6, pc}
 800c258:	0781      	lsls	r1, r0, #30
 800c25a:	bf58      	it	pl
 800c25c:	6963      	ldrpl	r3, [r4, #20]
 800c25e:	60a3      	str	r3, [r4, #8]
 800c260:	e7f4      	b.n	800c24c <__swsetup_r+0xb0>
 800c262:	2000      	movs	r0, #0
 800c264:	e7f7      	b.n	800c256 <__swsetup_r+0xba>
 800c266:	bf00      	nop
 800c268:	2000001c 	.word	0x2000001c
 800c26c:	0800f13c 	.word	0x0800f13c
 800c270:	0800f15c 	.word	0x0800f15c
 800c274:	0800f11c 	.word	0x0800f11c

0800c278 <abort>:
 800c278:	b508      	push	{r3, lr}
 800c27a:	2006      	movs	r0, #6
 800c27c:	f000 fa54 	bl	800c728 <raise>
 800c280:	2001      	movs	r0, #1
 800c282:	f7f5 ff33 	bl	80020ec <_exit>
	...

0800c288 <__sflush_r>:
 800c288:	898a      	ldrh	r2, [r1, #12]
 800c28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c28e:	4605      	mov	r5, r0
 800c290:	0710      	lsls	r0, r2, #28
 800c292:	460c      	mov	r4, r1
 800c294:	d458      	bmi.n	800c348 <__sflush_r+0xc0>
 800c296:	684b      	ldr	r3, [r1, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	dc05      	bgt.n	800c2a8 <__sflush_r+0x20>
 800c29c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	dc02      	bgt.n	800c2a8 <__sflush_r+0x20>
 800c2a2:	2000      	movs	r0, #0
 800c2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2aa:	2e00      	cmp	r6, #0
 800c2ac:	d0f9      	beq.n	800c2a2 <__sflush_r+0x1a>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2b4:	682f      	ldr	r7, [r5, #0]
 800c2b6:	602b      	str	r3, [r5, #0]
 800c2b8:	d032      	beq.n	800c320 <__sflush_r+0x98>
 800c2ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	075a      	lsls	r2, r3, #29
 800c2c0:	d505      	bpl.n	800c2ce <__sflush_r+0x46>
 800c2c2:	6863      	ldr	r3, [r4, #4]
 800c2c4:	1ac0      	subs	r0, r0, r3
 800c2c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2c8:	b10b      	cbz	r3, 800c2ce <__sflush_r+0x46>
 800c2ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2cc:	1ac0      	subs	r0, r0, r3
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2d4:	6a21      	ldr	r1, [r4, #32]
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	47b0      	blx	r6
 800c2da:	1c43      	adds	r3, r0, #1
 800c2dc:	89a3      	ldrh	r3, [r4, #12]
 800c2de:	d106      	bne.n	800c2ee <__sflush_r+0x66>
 800c2e0:	6829      	ldr	r1, [r5, #0]
 800c2e2:	291d      	cmp	r1, #29
 800c2e4:	d82c      	bhi.n	800c340 <__sflush_r+0xb8>
 800c2e6:	4a2a      	ldr	r2, [pc, #168]	; (800c390 <__sflush_r+0x108>)
 800c2e8:	40ca      	lsrs	r2, r1
 800c2ea:	07d6      	lsls	r6, r2, #31
 800c2ec:	d528      	bpl.n	800c340 <__sflush_r+0xb8>
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	6062      	str	r2, [r4, #4]
 800c2f2:	04d9      	lsls	r1, r3, #19
 800c2f4:	6922      	ldr	r2, [r4, #16]
 800c2f6:	6022      	str	r2, [r4, #0]
 800c2f8:	d504      	bpl.n	800c304 <__sflush_r+0x7c>
 800c2fa:	1c42      	adds	r2, r0, #1
 800c2fc:	d101      	bne.n	800c302 <__sflush_r+0x7a>
 800c2fe:	682b      	ldr	r3, [r5, #0]
 800c300:	b903      	cbnz	r3, 800c304 <__sflush_r+0x7c>
 800c302:	6560      	str	r0, [r4, #84]	; 0x54
 800c304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c306:	602f      	str	r7, [r5, #0]
 800c308:	2900      	cmp	r1, #0
 800c30a:	d0ca      	beq.n	800c2a2 <__sflush_r+0x1a>
 800c30c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c310:	4299      	cmp	r1, r3
 800c312:	d002      	beq.n	800c31a <__sflush_r+0x92>
 800c314:	4628      	mov	r0, r5
 800c316:	f7ff fa99 	bl	800b84c <_free_r>
 800c31a:	2000      	movs	r0, #0
 800c31c:	6360      	str	r0, [r4, #52]	; 0x34
 800c31e:	e7c1      	b.n	800c2a4 <__sflush_r+0x1c>
 800c320:	6a21      	ldr	r1, [r4, #32]
 800c322:	2301      	movs	r3, #1
 800c324:	4628      	mov	r0, r5
 800c326:	47b0      	blx	r6
 800c328:	1c41      	adds	r1, r0, #1
 800c32a:	d1c7      	bne.n	800c2bc <__sflush_r+0x34>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d0c4      	beq.n	800c2bc <__sflush_r+0x34>
 800c332:	2b1d      	cmp	r3, #29
 800c334:	d001      	beq.n	800c33a <__sflush_r+0xb2>
 800c336:	2b16      	cmp	r3, #22
 800c338:	d101      	bne.n	800c33e <__sflush_r+0xb6>
 800c33a:	602f      	str	r7, [r5, #0]
 800c33c:	e7b1      	b.n	800c2a2 <__sflush_r+0x1a>
 800c33e:	89a3      	ldrh	r3, [r4, #12]
 800c340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c344:	81a3      	strh	r3, [r4, #12]
 800c346:	e7ad      	b.n	800c2a4 <__sflush_r+0x1c>
 800c348:	690f      	ldr	r7, [r1, #16]
 800c34a:	2f00      	cmp	r7, #0
 800c34c:	d0a9      	beq.n	800c2a2 <__sflush_r+0x1a>
 800c34e:	0793      	lsls	r3, r2, #30
 800c350:	680e      	ldr	r6, [r1, #0]
 800c352:	bf08      	it	eq
 800c354:	694b      	ldreq	r3, [r1, #20]
 800c356:	600f      	str	r7, [r1, #0]
 800c358:	bf18      	it	ne
 800c35a:	2300      	movne	r3, #0
 800c35c:	eba6 0807 	sub.w	r8, r6, r7
 800c360:	608b      	str	r3, [r1, #8]
 800c362:	f1b8 0f00 	cmp.w	r8, #0
 800c366:	dd9c      	ble.n	800c2a2 <__sflush_r+0x1a>
 800c368:	6a21      	ldr	r1, [r4, #32]
 800c36a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c36c:	4643      	mov	r3, r8
 800c36e:	463a      	mov	r2, r7
 800c370:	4628      	mov	r0, r5
 800c372:	47b0      	blx	r6
 800c374:	2800      	cmp	r0, #0
 800c376:	dc06      	bgt.n	800c386 <__sflush_r+0xfe>
 800c378:	89a3      	ldrh	r3, [r4, #12]
 800c37a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c37e:	81a3      	strh	r3, [r4, #12]
 800c380:	f04f 30ff 	mov.w	r0, #4294967295
 800c384:	e78e      	b.n	800c2a4 <__sflush_r+0x1c>
 800c386:	4407      	add	r7, r0
 800c388:	eba8 0800 	sub.w	r8, r8, r0
 800c38c:	e7e9      	b.n	800c362 <__sflush_r+0xda>
 800c38e:	bf00      	nop
 800c390:	20400001 	.word	0x20400001

0800c394 <_fflush_r>:
 800c394:	b538      	push	{r3, r4, r5, lr}
 800c396:	690b      	ldr	r3, [r1, #16]
 800c398:	4605      	mov	r5, r0
 800c39a:	460c      	mov	r4, r1
 800c39c:	b913      	cbnz	r3, 800c3a4 <_fflush_r+0x10>
 800c39e:	2500      	movs	r5, #0
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	bd38      	pop	{r3, r4, r5, pc}
 800c3a4:	b118      	cbz	r0, 800c3ae <_fflush_r+0x1a>
 800c3a6:	6983      	ldr	r3, [r0, #24]
 800c3a8:	b90b      	cbnz	r3, 800c3ae <_fflush_r+0x1a>
 800c3aa:	f000 f887 	bl	800c4bc <__sinit>
 800c3ae:	4b14      	ldr	r3, [pc, #80]	; (800c400 <_fflush_r+0x6c>)
 800c3b0:	429c      	cmp	r4, r3
 800c3b2:	d11b      	bne.n	800c3ec <_fflush_r+0x58>
 800c3b4:	686c      	ldr	r4, [r5, #4]
 800c3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d0ef      	beq.n	800c39e <_fflush_r+0xa>
 800c3be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3c0:	07d0      	lsls	r0, r2, #31
 800c3c2:	d404      	bmi.n	800c3ce <_fflush_r+0x3a>
 800c3c4:	0599      	lsls	r1, r3, #22
 800c3c6:	d402      	bmi.n	800c3ce <_fflush_r+0x3a>
 800c3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3ca:	f000 f915 	bl	800c5f8 <__retarget_lock_acquire_recursive>
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	4621      	mov	r1, r4
 800c3d2:	f7ff ff59 	bl	800c288 <__sflush_r>
 800c3d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3d8:	07da      	lsls	r2, r3, #31
 800c3da:	4605      	mov	r5, r0
 800c3dc:	d4e0      	bmi.n	800c3a0 <_fflush_r+0xc>
 800c3de:	89a3      	ldrh	r3, [r4, #12]
 800c3e0:	059b      	lsls	r3, r3, #22
 800c3e2:	d4dd      	bmi.n	800c3a0 <_fflush_r+0xc>
 800c3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3e6:	f000 f908 	bl	800c5fa <__retarget_lock_release_recursive>
 800c3ea:	e7d9      	b.n	800c3a0 <_fflush_r+0xc>
 800c3ec:	4b05      	ldr	r3, [pc, #20]	; (800c404 <_fflush_r+0x70>)
 800c3ee:	429c      	cmp	r4, r3
 800c3f0:	d101      	bne.n	800c3f6 <_fflush_r+0x62>
 800c3f2:	68ac      	ldr	r4, [r5, #8]
 800c3f4:	e7df      	b.n	800c3b6 <_fflush_r+0x22>
 800c3f6:	4b04      	ldr	r3, [pc, #16]	; (800c408 <_fflush_r+0x74>)
 800c3f8:	429c      	cmp	r4, r3
 800c3fa:	bf08      	it	eq
 800c3fc:	68ec      	ldreq	r4, [r5, #12]
 800c3fe:	e7da      	b.n	800c3b6 <_fflush_r+0x22>
 800c400:	0800f13c 	.word	0x0800f13c
 800c404:	0800f15c 	.word	0x0800f15c
 800c408:	0800f11c 	.word	0x0800f11c

0800c40c <std>:
 800c40c:	2300      	movs	r3, #0
 800c40e:	b510      	push	{r4, lr}
 800c410:	4604      	mov	r4, r0
 800c412:	e9c0 3300 	strd	r3, r3, [r0]
 800c416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c41a:	6083      	str	r3, [r0, #8]
 800c41c:	8181      	strh	r1, [r0, #12]
 800c41e:	6643      	str	r3, [r0, #100]	; 0x64
 800c420:	81c2      	strh	r2, [r0, #14]
 800c422:	6183      	str	r3, [r0, #24]
 800c424:	4619      	mov	r1, r3
 800c426:	2208      	movs	r2, #8
 800c428:	305c      	adds	r0, #92	; 0x5c
 800c42a:	f7fb fdcb 	bl	8007fc4 <memset>
 800c42e:	4b05      	ldr	r3, [pc, #20]	; (800c444 <std+0x38>)
 800c430:	6263      	str	r3, [r4, #36]	; 0x24
 800c432:	4b05      	ldr	r3, [pc, #20]	; (800c448 <std+0x3c>)
 800c434:	62a3      	str	r3, [r4, #40]	; 0x28
 800c436:	4b05      	ldr	r3, [pc, #20]	; (800c44c <std+0x40>)
 800c438:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c43a:	4b05      	ldr	r3, [pc, #20]	; (800c450 <std+0x44>)
 800c43c:	6224      	str	r4, [r4, #32]
 800c43e:	6323      	str	r3, [r4, #48]	; 0x30
 800c440:	bd10      	pop	{r4, pc}
 800c442:	bf00      	nop
 800c444:	0800c761 	.word	0x0800c761
 800c448:	0800c783 	.word	0x0800c783
 800c44c:	0800c7bb 	.word	0x0800c7bb
 800c450:	0800c7df 	.word	0x0800c7df

0800c454 <_cleanup_r>:
 800c454:	4901      	ldr	r1, [pc, #4]	; (800c45c <_cleanup_r+0x8>)
 800c456:	f000 b8af 	b.w	800c5b8 <_fwalk_reent>
 800c45a:	bf00      	nop
 800c45c:	0800c395 	.word	0x0800c395

0800c460 <__sfmoreglue>:
 800c460:	b570      	push	{r4, r5, r6, lr}
 800c462:	2268      	movs	r2, #104	; 0x68
 800c464:	1e4d      	subs	r5, r1, #1
 800c466:	4355      	muls	r5, r2
 800c468:	460e      	mov	r6, r1
 800c46a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c46e:	f7ff fa59 	bl	800b924 <_malloc_r>
 800c472:	4604      	mov	r4, r0
 800c474:	b140      	cbz	r0, 800c488 <__sfmoreglue+0x28>
 800c476:	2100      	movs	r1, #0
 800c478:	e9c0 1600 	strd	r1, r6, [r0]
 800c47c:	300c      	adds	r0, #12
 800c47e:	60a0      	str	r0, [r4, #8]
 800c480:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c484:	f7fb fd9e 	bl	8007fc4 <memset>
 800c488:	4620      	mov	r0, r4
 800c48a:	bd70      	pop	{r4, r5, r6, pc}

0800c48c <__sfp_lock_acquire>:
 800c48c:	4801      	ldr	r0, [pc, #4]	; (800c494 <__sfp_lock_acquire+0x8>)
 800c48e:	f000 b8b3 	b.w	800c5f8 <__retarget_lock_acquire_recursive>
 800c492:	bf00      	nop
 800c494:	2000043d 	.word	0x2000043d

0800c498 <__sfp_lock_release>:
 800c498:	4801      	ldr	r0, [pc, #4]	; (800c4a0 <__sfp_lock_release+0x8>)
 800c49a:	f000 b8ae 	b.w	800c5fa <__retarget_lock_release_recursive>
 800c49e:	bf00      	nop
 800c4a0:	2000043d 	.word	0x2000043d

0800c4a4 <__sinit_lock_acquire>:
 800c4a4:	4801      	ldr	r0, [pc, #4]	; (800c4ac <__sinit_lock_acquire+0x8>)
 800c4a6:	f000 b8a7 	b.w	800c5f8 <__retarget_lock_acquire_recursive>
 800c4aa:	bf00      	nop
 800c4ac:	2000043e 	.word	0x2000043e

0800c4b0 <__sinit_lock_release>:
 800c4b0:	4801      	ldr	r0, [pc, #4]	; (800c4b8 <__sinit_lock_release+0x8>)
 800c4b2:	f000 b8a2 	b.w	800c5fa <__retarget_lock_release_recursive>
 800c4b6:	bf00      	nop
 800c4b8:	2000043e 	.word	0x2000043e

0800c4bc <__sinit>:
 800c4bc:	b510      	push	{r4, lr}
 800c4be:	4604      	mov	r4, r0
 800c4c0:	f7ff fff0 	bl	800c4a4 <__sinit_lock_acquire>
 800c4c4:	69a3      	ldr	r3, [r4, #24]
 800c4c6:	b11b      	cbz	r3, 800c4d0 <__sinit+0x14>
 800c4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4cc:	f7ff bff0 	b.w	800c4b0 <__sinit_lock_release>
 800c4d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c4d4:	6523      	str	r3, [r4, #80]	; 0x50
 800c4d6:	4b13      	ldr	r3, [pc, #76]	; (800c524 <__sinit+0x68>)
 800c4d8:	4a13      	ldr	r2, [pc, #76]	; (800c528 <__sinit+0x6c>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800c4de:	42a3      	cmp	r3, r4
 800c4e0:	bf04      	itt	eq
 800c4e2:	2301      	moveq	r3, #1
 800c4e4:	61a3      	streq	r3, [r4, #24]
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	f000 f820 	bl	800c52c <__sfp>
 800c4ec:	6060      	str	r0, [r4, #4]
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	f000 f81c 	bl	800c52c <__sfp>
 800c4f4:	60a0      	str	r0, [r4, #8]
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f000 f818 	bl	800c52c <__sfp>
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	60e0      	str	r0, [r4, #12]
 800c500:	2104      	movs	r1, #4
 800c502:	6860      	ldr	r0, [r4, #4]
 800c504:	f7ff ff82 	bl	800c40c <std>
 800c508:	68a0      	ldr	r0, [r4, #8]
 800c50a:	2201      	movs	r2, #1
 800c50c:	2109      	movs	r1, #9
 800c50e:	f7ff ff7d 	bl	800c40c <std>
 800c512:	68e0      	ldr	r0, [r4, #12]
 800c514:	2202      	movs	r2, #2
 800c516:	2112      	movs	r1, #18
 800c518:	f7ff ff78 	bl	800c40c <std>
 800c51c:	2301      	movs	r3, #1
 800c51e:	61a3      	str	r3, [r4, #24]
 800c520:	e7d2      	b.n	800c4c8 <__sinit+0xc>
 800c522:	bf00      	nop
 800c524:	0800ecd4 	.word	0x0800ecd4
 800c528:	0800c455 	.word	0x0800c455

0800c52c <__sfp>:
 800c52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52e:	4607      	mov	r7, r0
 800c530:	f7ff ffac 	bl	800c48c <__sfp_lock_acquire>
 800c534:	4b1e      	ldr	r3, [pc, #120]	; (800c5b0 <__sfp+0x84>)
 800c536:	681e      	ldr	r6, [r3, #0]
 800c538:	69b3      	ldr	r3, [r6, #24]
 800c53a:	b913      	cbnz	r3, 800c542 <__sfp+0x16>
 800c53c:	4630      	mov	r0, r6
 800c53e:	f7ff ffbd 	bl	800c4bc <__sinit>
 800c542:	3648      	adds	r6, #72	; 0x48
 800c544:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c548:	3b01      	subs	r3, #1
 800c54a:	d503      	bpl.n	800c554 <__sfp+0x28>
 800c54c:	6833      	ldr	r3, [r6, #0]
 800c54e:	b30b      	cbz	r3, 800c594 <__sfp+0x68>
 800c550:	6836      	ldr	r6, [r6, #0]
 800c552:	e7f7      	b.n	800c544 <__sfp+0x18>
 800c554:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c558:	b9d5      	cbnz	r5, 800c590 <__sfp+0x64>
 800c55a:	4b16      	ldr	r3, [pc, #88]	; (800c5b4 <__sfp+0x88>)
 800c55c:	60e3      	str	r3, [r4, #12]
 800c55e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c562:	6665      	str	r5, [r4, #100]	; 0x64
 800c564:	f000 f847 	bl	800c5f6 <__retarget_lock_init_recursive>
 800c568:	f7ff ff96 	bl	800c498 <__sfp_lock_release>
 800c56c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c570:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c574:	6025      	str	r5, [r4, #0]
 800c576:	61a5      	str	r5, [r4, #24]
 800c578:	2208      	movs	r2, #8
 800c57a:	4629      	mov	r1, r5
 800c57c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c580:	f7fb fd20 	bl	8007fc4 <memset>
 800c584:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c588:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c58c:	4620      	mov	r0, r4
 800c58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c590:	3468      	adds	r4, #104	; 0x68
 800c592:	e7d9      	b.n	800c548 <__sfp+0x1c>
 800c594:	2104      	movs	r1, #4
 800c596:	4638      	mov	r0, r7
 800c598:	f7ff ff62 	bl	800c460 <__sfmoreglue>
 800c59c:	4604      	mov	r4, r0
 800c59e:	6030      	str	r0, [r6, #0]
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d1d5      	bne.n	800c550 <__sfp+0x24>
 800c5a4:	f7ff ff78 	bl	800c498 <__sfp_lock_release>
 800c5a8:	230c      	movs	r3, #12
 800c5aa:	603b      	str	r3, [r7, #0]
 800c5ac:	e7ee      	b.n	800c58c <__sfp+0x60>
 800c5ae:	bf00      	nop
 800c5b0:	0800ecd4 	.word	0x0800ecd4
 800c5b4:	ffff0001 	.word	0xffff0001

0800c5b8 <_fwalk_reent>:
 800c5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5bc:	4606      	mov	r6, r0
 800c5be:	4688      	mov	r8, r1
 800c5c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c5c4:	2700      	movs	r7, #0
 800c5c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5ca:	f1b9 0901 	subs.w	r9, r9, #1
 800c5ce:	d505      	bpl.n	800c5dc <_fwalk_reent+0x24>
 800c5d0:	6824      	ldr	r4, [r4, #0]
 800c5d2:	2c00      	cmp	r4, #0
 800c5d4:	d1f7      	bne.n	800c5c6 <_fwalk_reent+0xe>
 800c5d6:	4638      	mov	r0, r7
 800c5d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5dc:	89ab      	ldrh	r3, [r5, #12]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d907      	bls.n	800c5f2 <_fwalk_reent+0x3a>
 800c5e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	d003      	beq.n	800c5f2 <_fwalk_reent+0x3a>
 800c5ea:	4629      	mov	r1, r5
 800c5ec:	4630      	mov	r0, r6
 800c5ee:	47c0      	blx	r8
 800c5f0:	4307      	orrs	r7, r0
 800c5f2:	3568      	adds	r5, #104	; 0x68
 800c5f4:	e7e9      	b.n	800c5ca <_fwalk_reent+0x12>

0800c5f6 <__retarget_lock_init_recursive>:
 800c5f6:	4770      	bx	lr

0800c5f8 <__retarget_lock_acquire_recursive>:
 800c5f8:	4770      	bx	lr

0800c5fa <__retarget_lock_release_recursive>:
 800c5fa:	4770      	bx	lr

0800c5fc <__swhatbuf_r>:
 800c5fc:	b570      	push	{r4, r5, r6, lr}
 800c5fe:	460e      	mov	r6, r1
 800c600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c604:	2900      	cmp	r1, #0
 800c606:	b096      	sub	sp, #88	; 0x58
 800c608:	4614      	mov	r4, r2
 800c60a:	461d      	mov	r5, r3
 800c60c:	da08      	bge.n	800c620 <__swhatbuf_r+0x24>
 800c60e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	602a      	str	r2, [r5, #0]
 800c616:	061a      	lsls	r2, r3, #24
 800c618:	d410      	bmi.n	800c63c <__swhatbuf_r+0x40>
 800c61a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c61e:	e00e      	b.n	800c63e <__swhatbuf_r+0x42>
 800c620:	466a      	mov	r2, sp
 800c622:	f000 f903 	bl	800c82c <_fstat_r>
 800c626:	2800      	cmp	r0, #0
 800c628:	dbf1      	blt.n	800c60e <__swhatbuf_r+0x12>
 800c62a:	9a01      	ldr	r2, [sp, #4]
 800c62c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c630:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c634:	425a      	negs	r2, r3
 800c636:	415a      	adcs	r2, r3
 800c638:	602a      	str	r2, [r5, #0]
 800c63a:	e7ee      	b.n	800c61a <__swhatbuf_r+0x1e>
 800c63c:	2340      	movs	r3, #64	; 0x40
 800c63e:	2000      	movs	r0, #0
 800c640:	6023      	str	r3, [r4, #0]
 800c642:	b016      	add	sp, #88	; 0x58
 800c644:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c648 <__smakebuf_r>:
 800c648:	898b      	ldrh	r3, [r1, #12]
 800c64a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c64c:	079d      	lsls	r5, r3, #30
 800c64e:	4606      	mov	r6, r0
 800c650:	460c      	mov	r4, r1
 800c652:	d507      	bpl.n	800c664 <__smakebuf_r+0x1c>
 800c654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c658:	6023      	str	r3, [r4, #0]
 800c65a:	6123      	str	r3, [r4, #16]
 800c65c:	2301      	movs	r3, #1
 800c65e:	6163      	str	r3, [r4, #20]
 800c660:	b002      	add	sp, #8
 800c662:	bd70      	pop	{r4, r5, r6, pc}
 800c664:	ab01      	add	r3, sp, #4
 800c666:	466a      	mov	r2, sp
 800c668:	f7ff ffc8 	bl	800c5fc <__swhatbuf_r>
 800c66c:	9900      	ldr	r1, [sp, #0]
 800c66e:	4605      	mov	r5, r0
 800c670:	4630      	mov	r0, r6
 800c672:	f7ff f957 	bl	800b924 <_malloc_r>
 800c676:	b948      	cbnz	r0, 800c68c <__smakebuf_r+0x44>
 800c678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c67c:	059a      	lsls	r2, r3, #22
 800c67e:	d4ef      	bmi.n	800c660 <__smakebuf_r+0x18>
 800c680:	f023 0303 	bic.w	r3, r3, #3
 800c684:	f043 0302 	orr.w	r3, r3, #2
 800c688:	81a3      	strh	r3, [r4, #12]
 800c68a:	e7e3      	b.n	800c654 <__smakebuf_r+0xc>
 800c68c:	4b0d      	ldr	r3, [pc, #52]	; (800c6c4 <__smakebuf_r+0x7c>)
 800c68e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c690:	89a3      	ldrh	r3, [r4, #12]
 800c692:	6020      	str	r0, [r4, #0]
 800c694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c698:	81a3      	strh	r3, [r4, #12]
 800c69a:	9b00      	ldr	r3, [sp, #0]
 800c69c:	6163      	str	r3, [r4, #20]
 800c69e:	9b01      	ldr	r3, [sp, #4]
 800c6a0:	6120      	str	r0, [r4, #16]
 800c6a2:	b15b      	cbz	r3, 800c6bc <__smakebuf_r+0x74>
 800c6a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	f000 f8d1 	bl	800c850 <_isatty_r>
 800c6ae:	b128      	cbz	r0, 800c6bc <__smakebuf_r+0x74>
 800c6b0:	89a3      	ldrh	r3, [r4, #12]
 800c6b2:	f023 0303 	bic.w	r3, r3, #3
 800c6b6:	f043 0301 	orr.w	r3, r3, #1
 800c6ba:	81a3      	strh	r3, [r4, #12]
 800c6bc:	89a0      	ldrh	r0, [r4, #12]
 800c6be:	4305      	orrs	r5, r0
 800c6c0:	81a5      	strh	r5, [r4, #12]
 800c6c2:	e7cd      	b.n	800c660 <__smakebuf_r+0x18>
 800c6c4:	0800c455 	.word	0x0800c455

0800c6c8 <_malloc_usable_size_r>:
 800c6c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6cc:	1f18      	subs	r0, r3, #4
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	bfbc      	itt	lt
 800c6d2:	580b      	ldrlt	r3, [r1, r0]
 800c6d4:	18c0      	addlt	r0, r0, r3
 800c6d6:	4770      	bx	lr

0800c6d8 <_raise_r>:
 800c6d8:	291f      	cmp	r1, #31
 800c6da:	b538      	push	{r3, r4, r5, lr}
 800c6dc:	4604      	mov	r4, r0
 800c6de:	460d      	mov	r5, r1
 800c6e0:	d904      	bls.n	800c6ec <_raise_r+0x14>
 800c6e2:	2316      	movs	r3, #22
 800c6e4:	6003      	str	r3, [r0, #0]
 800c6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ea:	bd38      	pop	{r3, r4, r5, pc}
 800c6ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c6ee:	b112      	cbz	r2, 800c6f6 <_raise_r+0x1e>
 800c6f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6f4:	b94b      	cbnz	r3, 800c70a <_raise_r+0x32>
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f000 f830 	bl	800c75c <_getpid_r>
 800c6fc:	462a      	mov	r2, r5
 800c6fe:	4601      	mov	r1, r0
 800c700:	4620      	mov	r0, r4
 800c702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c706:	f000 b817 	b.w	800c738 <_kill_r>
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d00a      	beq.n	800c724 <_raise_r+0x4c>
 800c70e:	1c59      	adds	r1, r3, #1
 800c710:	d103      	bne.n	800c71a <_raise_r+0x42>
 800c712:	2316      	movs	r3, #22
 800c714:	6003      	str	r3, [r0, #0]
 800c716:	2001      	movs	r0, #1
 800c718:	e7e7      	b.n	800c6ea <_raise_r+0x12>
 800c71a:	2400      	movs	r4, #0
 800c71c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c720:	4628      	mov	r0, r5
 800c722:	4798      	blx	r3
 800c724:	2000      	movs	r0, #0
 800c726:	e7e0      	b.n	800c6ea <_raise_r+0x12>

0800c728 <raise>:
 800c728:	4b02      	ldr	r3, [pc, #8]	; (800c734 <raise+0xc>)
 800c72a:	4601      	mov	r1, r0
 800c72c:	6818      	ldr	r0, [r3, #0]
 800c72e:	f7ff bfd3 	b.w	800c6d8 <_raise_r>
 800c732:	bf00      	nop
 800c734:	2000001c 	.word	0x2000001c

0800c738 <_kill_r>:
 800c738:	b538      	push	{r3, r4, r5, lr}
 800c73a:	4d07      	ldr	r5, [pc, #28]	; (800c758 <_kill_r+0x20>)
 800c73c:	2300      	movs	r3, #0
 800c73e:	4604      	mov	r4, r0
 800c740:	4608      	mov	r0, r1
 800c742:	4611      	mov	r1, r2
 800c744:	602b      	str	r3, [r5, #0]
 800c746:	f7f5 fcc1 	bl	80020cc <_kill>
 800c74a:	1c43      	adds	r3, r0, #1
 800c74c:	d102      	bne.n	800c754 <_kill_r+0x1c>
 800c74e:	682b      	ldr	r3, [r5, #0]
 800c750:	b103      	cbz	r3, 800c754 <_kill_r+0x1c>
 800c752:	6023      	str	r3, [r4, #0]
 800c754:	bd38      	pop	{r3, r4, r5, pc}
 800c756:	bf00      	nop
 800c758:	20000438 	.word	0x20000438

0800c75c <_getpid_r>:
 800c75c:	f7f5 bcae 	b.w	80020bc <_getpid>

0800c760 <__sread>:
 800c760:	b510      	push	{r4, lr}
 800c762:	460c      	mov	r4, r1
 800c764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c768:	f000 f894 	bl	800c894 <_read_r>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	bfab      	itete	ge
 800c770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c772:	89a3      	ldrhlt	r3, [r4, #12]
 800c774:	181b      	addge	r3, r3, r0
 800c776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c77a:	bfac      	ite	ge
 800c77c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c77e:	81a3      	strhlt	r3, [r4, #12]
 800c780:	bd10      	pop	{r4, pc}

0800c782 <__swrite>:
 800c782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c786:	461f      	mov	r7, r3
 800c788:	898b      	ldrh	r3, [r1, #12]
 800c78a:	05db      	lsls	r3, r3, #23
 800c78c:	4605      	mov	r5, r0
 800c78e:	460c      	mov	r4, r1
 800c790:	4616      	mov	r6, r2
 800c792:	d505      	bpl.n	800c7a0 <__swrite+0x1e>
 800c794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c798:	2302      	movs	r3, #2
 800c79a:	2200      	movs	r2, #0
 800c79c:	f000 f868 	bl	800c870 <_lseek_r>
 800c7a0:	89a3      	ldrh	r3, [r4, #12]
 800c7a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7aa:	81a3      	strh	r3, [r4, #12]
 800c7ac:	4632      	mov	r2, r6
 800c7ae:	463b      	mov	r3, r7
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b6:	f000 b817 	b.w	800c7e8 <_write_r>

0800c7ba <__sseek>:
 800c7ba:	b510      	push	{r4, lr}
 800c7bc:	460c      	mov	r4, r1
 800c7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c2:	f000 f855 	bl	800c870 <_lseek_r>
 800c7c6:	1c43      	adds	r3, r0, #1
 800c7c8:	89a3      	ldrh	r3, [r4, #12]
 800c7ca:	bf15      	itete	ne
 800c7cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7d6:	81a3      	strheq	r3, [r4, #12]
 800c7d8:	bf18      	it	ne
 800c7da:	81a3      	strhne	r3, [r4, #12]
 800c7dc:	bd10      	pop	{r4, pc}

0800c7de <__sclose>:
 800c7de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7e2:	f000 b813 	b.w	800c80c <_close_r>
	...

0800c7e8 <_write_r>:
 800c7e8:	b538      	push	{r3, r4, r5, lr}
 800c7ea:	4d07      	ldr	r5, [pc, #28]	; (800c808 <_write_r+0x20>)
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	4608      	mov	r0, r1
 800c7f0:	4611      	mov	r1, r2
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	602a      	str	r2, [r5, #0]
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	f7f5 fc9f 	bl	800213a <_write>
 800c7fc:	1c43      	adds	r3, r0, #1
 800c7fe:	d102      	bne.n	800c806 <_write_r+0x1e>
 800c800:	682b      	ldr	r3, [r5, #0]
 800c802:	b103      	cbz	r3, 800c806 <_write_r+0x1e>
 800c804:	6023      	str	r3, [r4, #0]
 800c806:	bd38      	pop	{r3, r4, r5, pc}
 800c808:	20000438 	.word	0x20000438

0800c80c <_close_r>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	4d06      	ldr	r5, [pc, #24]	; (800c828 <_close_r+0x1c>)
 800c810:	2300      	movs	r3, #0
 800c812:	4604      	mov	r4, r0
 800c814:	4608      	mov	r0, r1
 800c816:	602b      	str	r3, [r5, #0]
 800c818:	f7f5 fcab 	bl	8002172 <_close>
 800c81c:	1c43      	adds	r3, r0, #1
 800c81e:	d102      	bne.n	800c826 <_close_r+0x1a>
 800c820:	682b      	ldr	r3, [r5, #0]
 800c822:	b103      	cbz	r3, 800c826 <_close_r+0x1a>
 800c824:	6023      	str	r3, [r4, #0]
 800c826:	bd38      	pop	{r3, r4, r5, pc}
 800c828:	20000438 	.word	0x20000438

0800c82c <_fstat_r>:
 800c82c:	b538      	push	{r3, r4, r5, lr}
 800c82e:	4d07      	ldr	r5, [pc, #28]	; (800c84c <_fstat_r+0x20>)
 800c830:	2300      	movs	r3, #0
 800c832:	4604      	mov	r4, r0
 800c834:	4608      	mov	r0, r1
 800c836:	4611      	mov	r1, r2
 800c838:	602b      	str	r3, [r5, #0]
 800c83a:	f7f5 fca6 	bl	800218a <_fstat>
 800c83e:	1c43      	adds	r3, r0, #1
 800c840:	d102      	bne.n	800c848 <_fstat_r+0x1c>
 800c842:	682b      	ldr	r3, [r5, #0]
 800c844:	b103      	cbz	r3, 800c848 <_fstat_r+0x1c>
 800c846:	6023      	str	r3, [r4, #0]
 800c848:	bd38      	pop	{r3, r4, r5, pc}
 800c84a:	bf00      	nop
 800c84c:	20000438 	.word	0x20000438

0800c850 <_isatty_r>:
 800c850:	b538      	push	{r3, r4, r5, lr}
 800c852:	4d06      	ldr	r5, [pc, #24]	; (800c86c <_isatty_r+0x1c>)
 800c854:	2300      	movs	r3, #0
 800c856:	4604      	mov	r4, r0
 800c858:	4608      	mov	r0, r1
 800c85a:	602b      	str	r3, [r5, #0]
 800c85c:	f7f5 fca5 	bl	80021aa <_isatty>
 800c860:	1c43      	adds	r3, r0, #1
 800c862:	d102      	bne.n	800c86a <_isatty_r+0x1a>
 800c864:	682b      	ldr	r3, [r5, #0]
 800c866:	b103      	cbz	r3, 800c86a <_isatty_r+0x1a>
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	bd38      	pop	{r3, r4, r5, pc}
 800c86c:	20000438 	.word	0x20000438

0800c870 <_lseek_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4d07      	ldr	r5, [pc, #28]	; (800c890 <_lseek_r+0x20>)
 800c874:	4604      	mov	r4, r0
 800c876:	4608      	mov	r0, r1
 800c878:	4611      	mov	r1, r2
 800c87a:	2200      	movs	r2, #0
 800c87c:	602a      	str	r2, [r5, #0]
 800c87e:	461a      	mov	r2, r3
 800c880:	f7f5 fc9e 	bl	80021c0 <_lseek>
 800c884:	1c43      	adds	r3, r0, #1
 800c886:	d102      	bne.n	800c88e <_lseek_r+0x1e>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	b103      	cbz	r3, 800c88e <_lseek_r+0x1e>
 800c88c:	6023      	str	r3, [r4, #0]
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	20000438 	.word	0x20000438

0800c894 <_read_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	4d07      	ldr	r5, [pc, #28]	; (800c8b4 <_read_r+0x20>)
 800c898:	4604      	mov	r4, r0
 800c89a:	4608      	mov	r0, r1
 800c89c:	4611      	mov	r1, r2
 800c89e:	2200      	movs	r2, #0
 800c8a0:	602a      	str	r2, [r5, #0]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	f7f5 fc2c 	bl	8002100 <_read>
 800c8a8:	1c43      	adds	r3, r0, #1
 800c8aa:	d102      	bne.n	800c8b2 <_read_r+0x1e>
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	b103      	cbz	r3, 800c8b2 <_read_r+0x1e>
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	bd38      	pop	{r3, r4, r5, pc}
 800c8b4:	20000438 	.word	0x20000438

0800c8b8 <pow>:
 800c8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ba:	ed2d 8b02 	vpush	{d8}
 800c8be:	eeb0 8a40 	vmov.f32	s16, s0
 800c8c2:	eef0 8a60 	vmov.f32	s17, s1
 800c8c6:	ec55 4b11 	vmov	r4, r5, d1
 800c8ca:	f000 f865 	bl	800c998 <__ieee754_pow>
 800c8ce:	4622      	mov	r2, r4
 800c8d0:	462b      	mov	r3, r5
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	4629      	mov	r1, r5
 800c8d6:	ec57 6b10 	vmov	r6, r7, d0
 800c8da:	f7f4 f93f 	bl	8000b5c <__aeabi_dcmpun>
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d13b      	bne.n	800c95a <pow+0xa2>
 800c8e2:	ec51 0b18 	vmov	r0, r1, d8
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	f7f4 f905 	bl	8000af8 <__aeabi_dcmpeq>
 800c8ee:	b1b8      	cbz	r0, 800c920 <pow+0x68>
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	4629      	mov	r1, r5
 800c8f8:	f7f4 f8fe 	bl	8000af8 <__aeabi_dcmpeq>
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	d146      	bne.n	800c98e <pow+0xd6>
 800c900:	ec45 4b10 	vmov	d0, r4, r5
 800c904:	f000 fe61 	bl	800d5ca <finite>
 800c908:	b338      	cbz	r0, 800c95a <pow+0xa2>
 800c90a:	2200      	movs	r2, #0
 800c90c:	2300      	movs	r3, #0
 800c90e:	4620      	mov	r0, r4
 800c910:	4629      	mov	r1, r5
 800c912:	f7f4 f8fb 	bl	8000b0c <__aeabi_dcmplt>
 800c916:	b300      	cbz	r0, 800c95a <pow+0xa2>
 800c918:	f7fb fb2a 	bl	8007f70 <__errno>
 800c91c:	2322      	movs	r3, #34	; 0x22
 800c91e:	e01b      	b.n	800c958 <pow+0xa0>
 800c920:	ec47 6b10 	vmov	d0, r6, r7
 800c924:	f000 fe51 	bl	800d5ca <finite>
 800c928:	b9e0      	cbnz	r0, 800c964 <pow+0xac>
 800c92a:	eeb0 0a48 	vmov.f32	s0, s16
 800c92e:	eef0 0a68 	vmov.f32	s1, s17
 800c932:	f000 fe4a 	bl	800d5ca <finite>
 800c936:	b1a8      	cbz	r0, 800c964 <pow+0xac>
 800c938:	ec45 4b10 	vmov	d0, r4, r5
 800c93c:	f000 fe45 	bl	800d5ca <finite>
 800c940:	b180      	cbz	r0, 800c964 <pow+0xac>
 800c942:	4632      	mov	r2, r6
 800c944:	463b      	mov	r3, r7
 800c946:	4630      	mov	r0, r6
 800c948:	4639      	mov	r1, r7
 800c94a:	f7f4 f907 	bl	8000b5c <__aeabi_dcmpun>
 800c94e:	2800      	cmp	r0, #0
 800c950:	d0e2      	beq.n	800c918 <pow+0x60>
 800c952:	f7fb fb0d 	bl	8007f70 <__errno>
 800c956:	2321      	movs	r3, #33	; 0x21
 800c958:	6003      	str	r3, [r0, #0]
 800c95a:	ecbd 8b02 	vpop	{d8}
 800c95e:	ec47 6b10 	vmov	d0, r6, r7
 800c962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c964:	2200      	movs	r2, #0
 800c966:	2300      	movs	r3, #0
 800c968:	4630      	mov	r0, r6
 800c96a:	4639      	mov	r1, r7
 800c96c:	f7f4 f8c4 	bl	8000af8 <__aeabi_dcmpeq>
 800c970:	2800      	cmp	r0, #0
 800c972:	d0f2      	beq.n	800c95a <pow+0xa2>
 800c974:	eeb0 0a48 	vmov.f32	s0, s16
 800c978:	eef0 0a68 	vmov.f32	s1, s17
 800c97c:	f000 fe25 	bl	800d5ca <finite>
 800c980:	2800      	cmp	r0, #0
 800c982:	d0ea      	beq.n	800c95a <pow+0xa2>
 800c984:	ec45 4b10 	vmov	d0, r4, r5
 800c988:	f000 fe1f 	bl	800d5ca <finite>
 800c98c:	e7c3      	b.n	800c916 <pow+0x5e>
 800c98e:	4f01      	ldr	r7, [pc, #4]	; (800c994 <pow+0xdc>)
 800c990:	2600      	movs	r6, #0
 800c992:	e7e2      	b.n	800c95a <pow+0xa2>
 800c994:	3ff00000 	.word	0x3ff00000

0800c998 <__ieee754_pow>:
 800c998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99c:	ed2d 8b06 	vpush	{d8-d10}
 800c9a0:	b089      	sub	sp, #36	; 0x24
 800c9a2:	ed8d 1b00 	vstr	d1, [sp]
 800c9a6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c9aa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c9ae:	ea58 0102 	orrs.w	r1, r8, r2
 800c9b2:	ec57 6b10 	vmov	r6, r7, d0
 800c9b6:	d115      	bne.n	800c9e4 <__ieee754_pow+0x4c>
 800c9b8:	19b3      	adds	r3, r6, r6
 800c9ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c9be:	4152      	adcs	r2, r2
 800c9c0:	4299      	cmp	r1, r3
 800c9c2:	4b89      	ldr	r3, [pc, #548]	; (800cbe8 <__ieee754_pow+0x250>)
 800c9c4:	4193      	sbcs	r3, r2
 800c9c6:	f080 84d2 	bcs.w	800d36e <__ieee754_pow+0x9d6>
 800c9ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	4639      	mov	r1, r7
 800c9d2:	f7f3 fc73 	bl	80002bc <__adddf3>
 800c9d6:	ec41 0b10 	vmov	d0, r0, r1
 800c9da:	b009      	add	sp, #36	; 0x24
 800c9dc:	ecbd 8b06 	vpop	{d8-d10}
 800c9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9e4:	4b81      	ldr	r3, [pc, #516]	; (800cbec <__ieee754_pow+0x254>)
 800c9e6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c9ea:	429c      	cmp	r4, r3
 800c9ec:	ee10 aa10 	vmov	sl, s0
 800c9f0:	463d      	mov	r5, r7
 800c9f2:	dc06      	bgt.n	800ca02 <__ieee754_pow+0x6a>
 800c9f4:	d101      	bne.n	800c9fa <__ieee754_pow+0x62>
 800c9f6:	2e00      	cmp	r6, #0
 800c9f8:	d1e7      	bne.n	800c9ca <__ieee754_pow+0x32>
 800c9fa:	4598      	cmp	r8, r3
 800c9fc:	dc01      	bgt.n	800ca02 <__ieee754_pow+0x6a>
 800c9fe:	d10f      	bne.n	800ca20 <__ieee754_pow+0x88>
 800ca00:	b172      	cbz	r2, 800ca20 <__ieee754_pow+0x88>
 800ca02:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ca06:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ca0a:	ea55 050a 	orrs.w	r5, r5, sl
 800ca0e:	d1dc      	bne.n	800c9ca <__ieee754_pow+0x32>
 800ca10:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ca14:	18db      	adds	r3, r3, r3
 800ca16:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ca1a:	4152      	adcs	r2, r2
 800ca1c:	429d      	cmp	r5, r3
 800ca1e:	e7d0      	b.n	800c9c2 <__ieee754_pow+0x2a>
 800ca20:	2d00      	cmp	r5, #0
 800ca22:	da3b      	bge.n	800ca9c <__ieee754_pow+0x104>
 800ca24:	4b72      	ldr	r3, [pc, #456]	; (800cbf0 <__ieee754_pow+0x258>)
 800ca26:	4598      	cmp	r8, r3
 800ca28:	dc51      	bgt.n	800cace <__ieee754_pow+0x136>
 800ca2a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ca2e:	4598      	cmp	r8, r3
 800ca30:	f340 84ac 	ble.w	800d38c <__ieee754_pow+0x9f4>
 800ca34:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ca38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ca3c:	2b14      	cmp	r3, #20
 800ca3e:	dd0f      	ble.n	800ca60 <__ieee754_pow+0xc8>
 800ca40:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ca44:	fa22 f103 	lsr.w	r1, r2, r3
 800ca48:	fa01 f303 	lsl.w	r3, r1, r3
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	f040 849d 	bne.w	800d38c <__ieee754_pow+0x9f4>
 800ca52:	f001 0101 	and.w	r1, r1, #1
 800ca56:	f1c1 0302 	rsb	r3, r1, #2
 800ca5a:	9304      	str	r3, [sp, #16]
 800ca5c:	b182      	cbz	r2, 800ca80 <__ieee754_pow+0xe8>
 800ca5e:	e05f      	b.n	800cb20 <__ieee754_pow+0x188>
 800ca60:	2a00      	cmp	r2, #0
 800ca62:	d15b      	bne.n	800cb1c <__ieee754_pow+0x184>
 800ca64:	f1c3 0314 	rsb	r3, r3, #20
 800ca68:	fa48 f103 	asr.w	r1, r8, r3
 800ca6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ca70:	4543      	cmp	r3, r8
 800ca72:	f040 8488 	bne.w	800d386 <__ieee754_pow+0x9ee>
 800ca76:	f001 0101 	and.w	r1, r1, #1
 800ca7a:	f1c1 0302 	rsb	r3, r1, #2
 800ca7e:	9304      	str	r3, [sp, #16]
 800ca80:	4b5c      	ldr	r3, [pc, #368]	; (800cbf4 <__ieee754_pow+0x25c>)
 800ca82:	4598      	cmp	r8, r3
 800ca84:	d132      	bne.n	800caec <__ieee754_pow+0x154>
 800ca86:	f1b9 0f00 	cmp.w	r9, #0
 800ca8a:	f280 8478 	bge.w	800d37e <__ieee754_pow+0x9e6>
 800ca8e:	4959      	ldr	r1, [pc, #356]	; (800cbf4 <__ieee754_pow+0x25c>)
 800ca90:	4632      	mov	r2, r6
 800ca92:	463b      	mov	r3, r7
 800ca94:	2000      	movs	r0, #0
 800ca96:	f7f3 fef1 	bl	800087c <__aeabi_ddiv>
 800ca9a:	e79c      	b.n	800c9d6 <__ieee754_pow+0x3e>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	9304      	str	r3, [sp, #16]
 800caa0:	2a00      	cmp	r2, #0
 800caa2:	d13d      	bne.n	800cb20 <__ieee754_pow+0x188>
 800caa4:	4b51      	ldr	r3, [pc, #324]	; (800cbec <__ieee754_pow+0x254>)
 800caa6:	4598      	cmp	r8, r3
 800caa8:	d1ea      	bne.n	800ca80 <__ieee754_pow+0xe8>
 800caaa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800caae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cab2:	ea53 030a 	orrs.w	r3, r3, sl
 800cab6:	f000 845a 	beq.w	800d36e <__ieee754_pow+0x9d6>
 800caba:	4b4f      	ldr	r3, [pc, #316]	; (800cbf8 <__ieee754_pow+0x260>)
 800cabc:	429c      	cmp	r4, r3
 800cabe:	dd08      	ble.n	800cad2 <__ieee754_pow+0x13a>
 800cac0:	f1b9 0f00 	cmp.w	r9, #0
 800cac4:	f2c0 8457 	blt.w	800d376 <__ieee754_pow+0x9de>
 800cac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cacc:	e783      	b.n	800c9d6 <__ieee754_pow+0x3e>
 800cace:	2302      	movs	r3, #2
 800cad0:	e7e5      	b.n	800ca9e <__ieee754_pow+0x106>
 800cad2:	f1b9 0f00 	cmp.w	r9, #0
 800cad6:	f04f 0000 	mov.w	r0, #0
 800cada:	f04f 0100 	mov.w	r1, #0
 800cade:	f6bf af7a 	bge.w	800c9d6 <__ieee754_pow+0x3e>
 800cae2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cae6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800caea:	e774      	b.n	800c9d6 <__ieee754_pow+0x3e>
 800caec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800caf0:	d106      	bne.n	800cb00 <__ieee754_pow+0x168>
 800caf2:	4632      	mov	r2, r6
 800caf4:	463b      	mov	r3, r7
 800caf6:	4630      	mov	r0, r6
 800caf8:	4639      	mov	r1, r7
 800cafa:	f7f3 fd95 	bl	8000628 <__aeabi_dmul>
 800cafe:	e76a      	b.n	800c9d6 <__ieee754_pow+0x3e>
 800cb00:	4b3e      	ldr	r3, [pc, #248]	; (800cbfc <__ieee754_pow+0x264>)
 800cb02:	4599      	cmp	r9, r3
 800cb04:	d10c      	bne.n	800cb20 <__ieee754_pow+0x188>
 800cb06:	2d00      	cmp	r5, #0
 800cb08:	db0a      	blt.n	800cb20 <__ieee754_pow+0x188>
 800cb0a:	ec47 6b10 	vmov	d0, r6, r7
 800cb0e:	b009      	add	sp, #36	; 0x24
 800cb10:	ecbd 8b06 	vpop	{d8-d10}
 800cb14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb18:	f000 bc6c 	b.w	800d3f4 <__ieee754_sqrt>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	9304      	str	r3, [sp, #16]
 800cb20:	ec47 6b10 	vmov	d0, r6, r7
 800cb24:	f000 fd48 	bl	800d5b8 <fabs>
 800cb28:	ec51 0b10 	vmov	r0, r1, d0
 800cb2c:	f1ba 0f00 	cmp.w	sl, #0
 800cb30:	d129      	bne.n	800cb86 <__ieee754_pow+0x1ee>
 800cb32:	b124      	cbz	r4, 800cb3e <__ieee754_pow+0x1a6>
 800cb34:	4b2f      	ldr	r3, [pc, #188]	; (800cbf4 <__ieee754_pow+0x25c>)
 800cb36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d123      	bne.n	800cb86 <__ieee754_pow+0x1ee>
 800cb3e:	f1b9 0f00 	cmp.w	r9, #0
 800cb42:	da05      	bge.n	800cb50 <__ieee754_pow+0x1b8>
 800cb44:	4602      	mov	r2, r0
 800cb46:	460b      	mov	r3, r1
 800cb48:	2000      	movs	r0, #0
 800cb4a:	492a      	ldr	r1, [pc, #168]	; (800cbf4 <__ieee754_pow+0x25c>)
 800cb4c:	f7f3 fe96 	bl	800087c <__aeabi_ddiv>
 800cb50:	2d00      	cmp	r5, #0
 800cb52:	f6bf af40 	bge.w	800c9d6 <__ieee754_pow+0x3e>
 800cb56:	9b04      	ldr	r3, [sp, #16]
 800cb58:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cb5c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cb60:	4323      	orrs	r3, r4
 800cb62:	d108      	bne.n	800cb76 <__ieee754_pow+0x1de>
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	4610      	mov	r0, r2
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	f7f3 fba4 	bl	80002b8 <__aeabi_dsub>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	e78f      	b.n	800ca96 <__ieee754_pow+0xfe>
 800cb76:	9b04      	ldr	r3, [sp, #16]
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	f47f af2c 	bne.w	800c9d6 <__ieee754_pow+0x3e>
 800cb7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb82:	4619      	mov	r1, r3
 800cb84:	e727      	b.n	800c9d6 <__ieee754_pow+0x3e>
 800cb86:	0feb      	lsrs	r3, r5, #31
 800cb88:	3b01      	subs	r3, #1
 800cb8a:	9306      	str	r3, [sp, #24]
 800cb8c:	9a06      	ldr	r2, [sp, #24]
 800cb8e:	9b04      	ldr	r3, [sp, #16]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	d102      	bne.n	800cb9a <__ieee754_pow+0x202>
 800cb94:	4632      	mov	r2, r6
 800cb96:	463b      	mov	r3, r7
 800cb98:	e7e6      	b.n	800cb68 <__ieee754_pow+0x1d0>
 800cb9a:	4b19      	ldr	r3, [pc, #100]	; (800cc00 <__ieee754_pow+0x268>)
 800cb9c:	4598      	cmp	r8, r3
 800cb9e:	f340 80fb 	ble.w	800cd98 <__ieee754_pow+0x400>
 800cba2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cba6:	4598      	cmp	r8, r3
 800cba8:	4b13      	ldr	r3, [pc, #76]	; (800cbf8 <__ieee754_pow+0x260>)
 800cbaa:	dd0c      	ble.n	800cbc6 <__ieee754_pow+0x22e>
 800cbac:	429c      	cmp	r4, r3
 800cbae:	dc0f      	bgt.n	800cbd0 <__ieee754_pow+0x238>
 800cbb0:	f1b9 0f00 	cmp.w	r9, #0
 800cbb4:	da0f      	bge.n	800cbd6 <__ieee754_pow+0x23e>
 800cbb6:	2000      	movs	r0, #0
 800cbb8:	b009      	add	sp, #36	; 0x24
 800cbba:	ecbd 8b06 	vpop	{d8-d10}
 800cbbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc2:	f000 bcf0 	b.w	800d5a6 <__math_oflow>
 800cbc6:	429c      	cmp	r4, r3
 800cbc8:	dbf2      	blt.n	800cbb0 <__ieee754_pow+0x218>
 800cbca:	4b0a      	ldr	r3, [pc, #40]	; (800cbf4 <__ieee754_pow+0x25c>)
 800cbcc:	429c      	cmp	r4, r3
 800cbce:	dd19      	ble.n	800cc04 <__ieee754_pow+0x26c>
 800cbd0:	f1b9 0f00 	cmp.w	r9, #0
 800cbd4:	dcef      	bgt.n	800cbb6 <__ieee754_pow+0x21e>
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	b009      	add	sp, #36	; 0x24
 800cbda:	ecbd 8b06 	vpop	{d8-d10}
 800cbde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe2:	f000 bcd7 	b.w	800d594 <__math_uflow>
 800cbe6:	bf00      	nop
 800cbe8:	fff00000 	.word	0xfff00000
 800cbec:	7ff00000 	.word	0x7ff00000
 800cbf0:	433fffff 	.word	0x433fffff
 800cbf4:	3ff00000 	.word	0x3ff00000
 800cbf8:	3fefffff 	.word	0x3fefffff
 800cbfc:	3fe00000 	.word	0x3fe00000
 800cc00:	41e00000 	.word	0x41e00000
 800cc04:	4b60      	ldr	r3, [pc, #384]	; (800cd88 <__ieee754_pow+0x3f0>)
 800cc06:	2200      	movs	r2, #0
 800cc08:	f7f3 fb56 	bl	80002b8 <__aeabi_dsub>
 800cc0c:	a354      	add	r3, pc, #336	; (adr r3, 800cd60 <__ieee754_pow+0x3c8>)
 800cc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc12:	4604      	mov	r4, r0
 800cc14:	460d      	mov	r5, r1
 800cc16:	f7f3 fd07 	bl	8000628 <__aeabi_dmul>
 800cc1a:	a353      	add	r3, pc, #332	; (adr r3, 800cd68 <__ieee754_pow+0x3d0>)
 800cc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc20:	4606      	mov	r6, r0
 800cc22:	460f      	mov	r7, r1
 800cc24:	4620      	mov	r0, r4
 800cc26:	4629      	mov	r1, r5
 800cc28:	f7f3 fcfe 	bl	8000628 <__aeabi_dmul>
 800cc2c:	4b57      	ldr	r3, [pc, #348]	; (800cd8c <__ieee754_pow+0x3f4>)
 800cc2e:	4682      	mov	sl, r0
 800cc30:	468b      	mov	fp, r1
 800cc32:	2200      	movs	r2, #0
 800cc34:	4620      	mov	r0, r4
 800cc36:	4629      	mov	r1, r5
 800cc38:	f7f3 fcf6 	bl	8000628 <__aeabi_dmul>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	460b      	mov	r3, r1
 800cc40:	a14b      	add	r1, pc, #300	; (adr r1, 800cd70 <__ieee754_pow+0x3d8>)
 800cc42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc46:	f7f3 fb37 	bl	80002b8 <__aeabi_dsub>
 800cc4a:	4622      	mov	r2, r4
 800cc4c:	462b      	mov	r3, r5
 800cc4e:	f7f3 fceb 	bl	8000628 <__aeabi_dmul>
 800cc52:	4602      	mov	r2, r0
 800cc54:	460b      	mov	r3, r1
 800cc56:	2000      	movs	r0, #0
 800cc58:	494d      	ldr	r1, [pc, #308]	; (800cd90 <__ieee754_pow+0x3f8>)
 800cc5a:	f7f3 fb2d 	bl	80002b8 <__aeabi_dsub>
 800cc5e:	4622      	mov	r2, r4
 800cc60:	4680      	mov	r8, r0
 800cc62:	4689      	mov	r9, r1
 800cc64:	462b      	mov	r3, r5
 800cc66:	4620      	mov	r0, r4
 800cc68:	4629      	mov	r1, r5
 800cc6a:	f7f3 fcdd 	bl	8000628 <__aeabi_dmul>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	460b      	mov	r3, r1
 800cc72:	4640      	mov	r0, r8
 800cc74:	4649      	mov	r1, r9
 800cc76:	f7f3 fcd7 	bl	8000628 <__aeabi_dmul>
 800cc7a:	a33f      	add	r3, pc, #252	; (adr r3, 800cd78 <__ieee754_pow+0x3e0>)
 800cc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc80:	f7f3 fcd2 	bl	8000628 <__aeabi_dmul>
 800cc84:	4602      	mov	r2, r0
 800cc86:	460b      	mov	r3, r1
 800cc88:	4650      	mov	r0, sl
 800cc8a:	4659      	mov	r1, fp
 800cc8c:	f7f3 fb14 	bl	80002b8 <__aeabi_dsub>
 800cc90:	4602      	mov	r2, r0
 800cc92:	460b      	mov	r3, r1
 800cc94:	4680      	mov	r8, r0
 800cc96:	4689      	mov	r9, r1
 800cc98:	4630      	mov	r0, r6
 800cc9a:	4639      	mov	r1, r7
 800cc9c:	f7f3 fb0e 	bl	80002bc <__adddf3>
 800cca0:	2000      	movs	r0, #0
 800cca2:	4632      	mov	r2, r6
 800cca4:	463b      	mov	r3, r7
 800cca6:	4604      	mov	r4, r0
 800cca8:	460d      	mov	r5, r1
 800ccaa:	f7f3 fb05 	bl	80002b8 <__aeabi_dsub>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	4640      	mov	r0, r8
 800ccb4:	4649      	mov	r1, r9
 800ccb6:	f7f3 faff 	bl	80002b8 <__aeabi_dsub>
 800ccba:	9b04      	ldr	r3, [sp, #16]
 800ccbc:	9a06      	ldr	r2, [sp, #24]
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	4682      	mov	sl, r0
 800ccc4:	468b      	mov	fp, r1
 800ccc6:	f040 81e7 	bne.w	800d098 <__ieee754_pow+0x700>
 800ccca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800cd80 <__ieee754_pow+0x3e8>
 800ccce:	eeb0 8a47 	vmov.f32	s16, s14
 800ccd2:	eef0 8a67 	vmov.f32	s17, s15
 800ccd6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ccda:	2600      	movs	r6, #0
 800ccdc:	4632      	mov	r2, r6
 800ccde:	463b      	mov	r3, r7
 800cce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cce4:	f7f3 fae8 	bl	80002b8 <__aeabi_dsub>
 800cce8:	4622      	mov	r2, r4
 800ccea:	462b      	mov	r3, r5
 800ccec:	f7f3 fc9c 	bl	8000628 <__aeabi_dmul>
 800ccf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccf4:	4680      	mov	r8, r0
 800ccf6:	4689      	mov	r9, r1
 800ccf8:	4650      	mov	r0, sl
 800ccfa:	4659      	mov	r1, fp
 800ccfc:	f7f3 fc94 	bl	8000628 <__aeabi_dmul>
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	4640      	mov	r0, r8
 800cd06:	4649      	mov	r1, r9
 800cd08:	f7f3 fad8 	bl	80002bc <__adddf3>
 800cd0c:	4632      	mov	r2, r6
 800cd0e:	463b      	mov	r3, r7
 800cd10:	4680      	mov	r8, r0
 800cd12:	4689      	mov	r9, r1
 800cd14:	4620      	mov	r0, r4
 800cd16:	4629      	mov	r1, r5
 800cd18:	f7f3 fc86 	bl	8000628 <__aeabi_dmul>
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	4604      	mov	r4, r0
 800cd20:	460d      	mov	r5, r1
 800cd22:	4602      	mov	r2, r0
 800cd24:	4649      	mov	r1, r9
 800cd26:	4640      	mov	r0, r8
 800cd28:	f7f3 fac8 	bl	80002bc <__adddf3>
 800cd2c:	4b19      	ldr	r3, [pc, #100]	; (800cd94 <__ieee754_pow+0x3fc>)
 800cd2e:	4299      	cmp	r1, r3
 800cd30:	ec45 4b19 	vmov	d9, r4, r5
 800cd34:	4606      	mov	r6, r0
 800cd36:	460f      	mov	r7, r1
 800cd38:	468b      	mov	fp, r1
 800cd3a:	f340 82f1 	ble.w	800d320 <__ieee754_pow+0x988>
 800cd3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800cd42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800cd46:	4303      	orrs	r3, r0
 800cd48:	f000 81e4 	beq.w	800d114 <__ieee754_pow+0x77c>
 800cd4c:	ec51 0b18 	vmov	r0, r1, d8
 800cd50:	2200      	movs	r2, #0
 800cd52:	2300      	movs	r3, #0
 800cd54:	f7f3 feda 	bl	8000b0c <__aeabi_dcmplt>
 800cd58:	3800      	subs	r0, #0
 800cd5a:	bf18      	it	ne
 800cd5c:	2001      	movne	r0, #1
 800cd5e:	e72b      	b.n	800cbb8 <__ieee754_pow+0x220>
 800cd60:	60000000 	.word	0x60000000
 800cd64:	3ff71547 	.word	0x3ff71547
 800cd68:	f85ddf44 	.word	0xf85ddf44
 800cd6c:	3e54ae0b 	.word	0x3e54ae0b
 800cd70:	55555555 	.word	0x55555555
 800cd74:	3fd55555 	.word	0x3fd55555
 800cd78:	652b82fe 	.word	0x652b82fe
 800cd7c:	3ff71547 	.word	0x3ff71547
 800cd80:	00000000 	.word	0x00000000
 800cd84:	bff00000 	.word	0xbff00000
 800cd88:	3ff00000 	.word	0x3ff00000
 800cd8c:	3fd00000 	.word	0x3fd00000
 800cd90:	3fe00000 	.word	0x3fe00000
 800cd94:	408fffff 	.word	0x408fffff
 800cd98:	4bd5      	ldr	r3, [pc, #852]	; (800d0f0 <__ieee754_pow+0x758>)
 800cd9a:	402b      	ands	r3, r5
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	b92b      	cbnz	r3, 800cdac <__ieee754_pow+0x414>
 800cda0:	4bd4      	ldr	r3, [pc, #848]	; (800d0f4 <__ieee754_pow+0x75c>)
 800cda2:	f7f3 fc41 	bl	8000628 <__aeabi_dmul>
 800cda6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800cdaa:	460c      	mov	r4, r1
 800cdac:	1523      	asrs	r3, r4, #20
 800cdae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cdb2:	4413      	add	r3, r2
 800cdb4:	9305      	str	r3, [sp, #20]
 800cdb6:	4bd0      	ldr	r3, [pc, #832]	; (800d0f8 <__ieee754_pow+0x760>)
 800cdb8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cdbc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cdc0:	429c      	cmp	r4, r3
 800cdc2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cdc6:	dd08      	ble.n	800cdda <__ieee754_pow+0x442>
 800cdc8:	4bcc      	ldr	r3, [pc, #816]	; (800d0fc <__ieee754_pow+0x764>)
 800cdca:	429c      	cmp	r4, r3
 800cdcc:	f340 8162 	ble.w	800d094 <__ieee754_pow+0x6fc>
 800cdd0:	9b05      	ldr	r3, [sp, #20]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	9305      	str	r3, [sp, #20]
 800cdd6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cdda:	2400      	movs	r4, #0
 800cddc:	00e3      	lsls	r3, r4, #3
 800cdde:	9307      	str	r3, [sp, #28]
 800cde0:	4bc7      	ldr	r3, [pc, #796]	; (800d100 <__ieee754_pow+0x768>)
 800cde2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cde6:	ed93 7b00 	vldr	d7, [r3]
 800cdea:	4629      	mov	r1, r5
 800cdec:	ec53 2b17 	vmov	r2, r3, d7
 800cdf0:	eeb0 9a47 	vmov.f32	s18, s14
 800cdf4:	eef0 9a67 	vmov.f32	s19, s15
 800cdf8:	4682      	mov	sl, r0
 800cdfa:	f7f3 fa5d 	bl	80002b8 <__aeabi_dsub>
 800cdfe:	4652      	mov	r2, sl
 800ce00:	4606      	mov	r6, r0
 800ce02:	460f      	mov	r7, r1
 800ce04:	462b      	mov	r3, r5
 800ce06:	ec51 0b19 	vmov	r0, r1, d9
 800ce0a:	f7f3 fa57 	bl	80002bc <__adddf3>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	460b      	mov	r3, r1
 800ce12:	2000      	movs	r0, #0
 800ce14:	49bb      	ldr	r1, [pc, #748]	; (800d104 <__ieee754_pow+0x76c>)
 800ce16:	f7f3 fd31 	bl	800087c <__aeabi_ddiv>
 800ce1a:	ec41 0b1a 	vmov	d10, r0, r1
 800ce1e:	4602      	mov	r2, r0
 800ce20:	460b      	mov	r3, r1
 800ce22:	4630      	mov	r0, r6
 800ce24:	4639      	mov	r1, r7
 800ce26:	f7f3 fbff 	bl	8000628 <__aeabi_dmul>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce30:	9302      	str	r3, [sp, #8]
 800ce32:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ce36:	46ab      	mov	fp, r5
 800ce38:	106d      	asrs	r5, r5, #1
 800ce3a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ce3e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ce42:	ec41 0b18 	vmov	d8, r0, r1
 800ce46:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	4640      	mov	r0, r8
 800ce4e:	4649      	mov	r1, r9
 800ce50:	4614      	mov	r4, r2
 800ce52:	461d      	mov	r5, r3
 800ce54:	f7f3 fbe8 	bl	8000628 <__aeabi_dmul>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	4639      	mov	r1, r7
 800ce60:	f7f3 fa2a 	bl	80002b8 <__aeabi_dsub>
 800ce64:	ec53 2b19 	vmov	r2, r3, d9
 800ce68:	4606      	mov	r6, r0
 800ce6a:	460f      	mov	r7, r1
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	4629      	mov	r1, r5
 800ce70:	f7f3 fa22 	bl	80002b8 <__aeabi_dsub>
 800ce74:	4602      	mov	r2, r0
 800ce76:	460b      	mov	r3, r1
 800ce78:	4650      	mov	r0, sl
 800ce7a:	4659      	mov	r1, fp
 800ce7c:	f7f3 fa1c 	bl	80002b8 <__aeabi_dsub>
 800ce80:	4642      	mov	r2, r8
 800ce82:	464b      	mov	r3, r9
 800ce84:	f7f3 fbd0 	bl	8000628 <__aeabi_dmul>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	4639      	mov	r1, r7
 800ce90:	f7f3 fa12 	bl	80002b8 <__aeabi_dsub>
 800ce94:	ec53 2b1a 	vmov	r2, r3, d10
 800ce98:	f7f3 fbc6 	bl	8000628 <__aeabi_dmul>
 800ce9c:	ec53 2b18 	vmov	r2, r3, d8
 800cea0:	ec41 0b19 	vmov	d9, r0, r1
 800cea4:	ec51 0b18 	vmov	r0, r1, d8
 800cea8:	f7f3 fbbe 	bl	8000628 <__aeabi_dmul>
 800ceac:	a37c      	add	r3, pc, #496	; (adr r3, 800d0a0 <__ieee754_pow+0x708>)
 800ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	460d      	mov	r5, r1
 800ceb6:	f7f3 fbb7 	bl	8000628 <__aeabi_dmul>
 800ceba:	a37b      	add	r3, pc, #492	; (adr r3, 800d0a8 <__ieee754_pow+0x710>)
 800cebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec0:	f7f3 f9fc 	bl	80002bc <__adddf3>
 800cec4:	4622      	mov	r2, r4
 800cec6:	462b      	mov	r3, r5
 800cec8:	f7f3 fbae 	bl	8000628 <__aeabi_dmul>
 800cecc:	a378      	add	r3, pc, #480	; (adr r3, 800d0b0 <__ieee754_pow+0x718>)
 800cece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced2:	f7f3 f9f3 	bl	80002bc <__adddf3>
 800ced6:	4622      	mov	r2, r4
 800ced8:	462b      	mov	r3, r5
 800ceda:	f7f3 fba5 	bl	8000628 <__aeabi_dmul>
 800cede:	a376      	add	r3, pc, #472	; (adr r3, 800d0b8 <__ieee754_pow+0x720>)
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	f7f3 f9ea 	bl	80002bc <__adddf3>
 800cee8:	4622      	mov	r2, r4
 800ceea:	462b      	mov	r3, r5
 800ceec:	f7f3 fb9c 	bl	8000628 <__aeabi_dmul>
 800cef0:	a373      	add	r3, pc, #460	; (adr r3, 800d0c0 <__ieee754_pow+0x728>)
 800cef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef6:	f7f3 f9e1 	bl	80002bc <__adddf3>
 800cefa:	4622      	mov	r2, r4
 800cefc:	462b      	mov	r3, r5
 800cefe:	f7f3 fb93 	bl	8000628 <__aeabi_dmul>
 800cf02:	a371      	add	r3, pc, #452	; (adr r3, 800d0c8 <__ieee754_pow+0x730>)
 800cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf08:	f7f3 f9d8 	bl	80002bc <__adddf3>
 800cf0c:	4622      	mov	r2, r4
 800cf0e:	4606      	mov	r6, r0
 800cf10:	460f      	mov	r7, r1
 800cf12:	462b      	mov	r3, r5
 800cf14:	4620      	mov	r0, r4
 800cf16:	4629      	mov	r1, r5
 800cf18:	f7f3 fb86 	bl	8000628 <__aeabi_dmul>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	460b      	mov	r3, r1
 800cf20:	4630      	mov	r0, r6
 800cf22:	4639      	mov	r1, r7
 800cf24:	f7f3 fb80 	bl	8000628 <__aeabi_dmul>
 800cf28:	4642      	mov	r2, r8
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	460d      	mov	r5, r1
 800cf2e:	464b      	mov	r3, r9
 800cf30:	ec51 0b18 	vmov	r0, r1, d8
 800cf34:	f7f3 f9c2 	bl	80002bc <__adddf3>
 800cf38:	ec53 2b19 	vmov	r2, r3, d9
 800cf3c:	f7f3 fb74 	bl	8000628 <__aeabi_dmul>
 800cf40:	4622      	mov	r2, r4
 800cf42:	462b      	mov	r3, r5
 800cf44:	f7f3 f9ba 	bl	80002bc <__adddf3>
 800cf48:	4642      	mov	r2, r8
 800cf4a:	4682      	mov	sl, r0
 800cf4c:	468b      	mov	fp, r1
 800cf4e:	464b      	mov	r3, r9
 800cf50:	4640      	mov	r0, r8
 800cf52:	4649      	mov	r1, r9
 800cf54:	f7f3 fb68 	bl	8000628 <__aeabi_dmul>
 800cf58:	4b6b      	ldr	r3, [pc, #428]	; (800d108 <__ieee754_pow+0x770>)
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	4606      	mov	r6, r0
 800cf5e:	460f      	mov	r7, r1
 800cf60:	f7f3 f9ac 	bl	80002bc <__adddf3>
 800cf64:	4652      	mov	r2, sl
 800cf66:	465b      	mov	r3, fp
 800cf68:	f7f3 f9a8 	bl	80002bc <__adddf3>
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	4604      	mov	r4, r0
 800cf70:	460d      	mov	r5, r1
 800cf72:	4602      	mov	r2, r0
 800cf74:	460b      	mov	r3, r1
 800cf76:	4640      	mov	r0, r8
 800cf78:	4649      	mov	r1, r9
 800cf7a:	f7f3 fb55 	bl	8000628 <__aeabi_dmul>
 800cf7e:	4b62      	ldr	r3, [pc, #392]	; (800d108 <__ieee754_pow+0x770>)
 800cf80:	4680      	mov	r8, r0
 800cf82:	4689      	mov	r9, r1
 800cf84:	2200      	movs	r2, #0
 800cf86:	4620      	mov	r0, r4
 800cf88:	4629      	mov	r1, r5
 800cf8a:	f7f3 f995 	bl	80002b8 <__aeabi_dsub>
 800cf8e:	4632      	mov	r2, r6
 800cf90:	463b      	mov	r3, r7
 800cf92:	f7f3 f991 	bl	80002b8 <__aeabi_dsub>
 800cf96:	4602      	mov	r2, r0
 800cf98:	460b      	mov	r3, r1
 800cf9a:	4650      	mov	r0, sl
 800cf9c:	4659      	mov	r1, fp
 800cf9e:	f7f3 f98b 	bl	80002b8 <__aeabi_dsub>
 800cfa2:	ec53 2b18 	vmov	r2, r3, d8
 800cfa6:	f7f3 fb3f 	bl	8000628 <__aeabi_dmul>
 800cfaa:	4622      	mov	r2, r4
 800cfac:	4606      	mov	r6, r0
 800cfae:	460f      	mov	r7, r1
 800cfb0:	462b      	mov	r3, r5
 800cfb2:	ec51 0b19 	vmov	r0, r1, d9
 800cfb6:	f7f3 fb37 	bl	8000628 <__aeabi_dmul>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	4639      	mov	r1, r7
 800cfc2:	f7f3 f97b 	bl	80002bc <__adddf3>
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	460f      	mov	r7, r1
 800cfca:	4602      	mov	r2, r0
 800cfcc:	460b      	mov	r3, r1
 800cfce:	4640      	mov	r0, r8
 800cfd0:	4649      	mov	r1, r9
 800cfd2:	f7f3 f973 	bl	80002bc <__adddf3>
 800cfd6:	a33e      	add	r3, pc, #248	; (adr r3, 800d0d0 <__ieee754_pow+0x738>)
 800cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfdc:	2000      	movs	r0, #0
 800cfde:	4604      	mov	r4, r0
 800cfe0:	460d      	mov	r5, r1
 800cfe2:	f7f3 fb21 	bl	8000628 <__aeabi_dmul>
 800cfe6:	4642      	mov	r2, r8
 800cfe8:	ec41 0b18 	vmov	d8, r0, r1
 800cfec:	464b      	mov	r3, r9
 800cfee:	4620      	mov	r0, r4
 800cff0:	4629      	mov	r1, r5
 800cff2:	f7f3 f961 	bl	80002b8 <__aeabi_dsub>
 800cff6:	4602      	mov	r2, r0
 800cff8:	460b      	mov	r3, r1
 800cffa:	4630      	mov	r0, r6
 800cffc:	4639      	mov	r1, r7
 800cffe:	f7f3 f95b 	bl	80002b8 <__aeabi_dsub>
 800d002:	a335      	add	r3, pc, #212	; (adr r3, 800d0d8 <__ieee754_pow+0x740>)
 800d004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d008:	f7f3 fb0e 	bl	8000628 <__aeabi_dmul>
 800d00c:	a334      	add	r3, pc, #208	; (adr r3, 800d0e0 <__ieee754_pow+0x748>)
 800d00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d012:	4606      	mov	r6, r0
 800d014:	460f      	mov	r7, r1
 800d016:	4620      	mov	r0, r4
 800d018:	4629      	mov	r1, r5
 800d01a:	f7f3 fb05 	bl	8000628 <__aeabi_dmul>
 800d01e:	4602      	mov	r2, r0
 800d020:	460b      	mov	r3, r1
 800d022:	4630      	mov	r0, r6
 800d024:	4639      	mov	r1, r7
 800d026:	f7f3 f949 	bl	80002bc <__adddf3>
 800d02a:	9a07      	ldr	r2, [sp, #28]
 800d02c:	4b37      	ldr	r3, [pc, #220]	; (800d10c <__ieee754_pow+0x774>)
 800d02e:	4413      	add	r3, r2
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	f7f3 f942 	bl	80002bc <__adddf3>
 800d038:	4682      	mov	sl, r0
 800d03a:	9805      	ldr	r0, [sp, #20]
 800d03c:	468b      	mov	fp, r1
 800d03e:	f7f3 fa89 	bl	8000554 <__aeabi_i2d>
 800d042:	9a07      	ldr	r2, [sp, #28]
 800d044:	4b32      	ldr	r3, [pc, #200]	; (800d110 <__ieee754_pow+0x778>)
 800d046:	4413      	add	r3, r2
 800d048:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d04c:	4606      	mov	r6, r0
 800d04e:	460f      	mov	r7, r1
 800d050:	4652      	mov	r2, sl
 800d052:	465b      	mov	r3, fp
 800d054:	ec51 0b18 	vmov	r0, r1, d8
 800d058:	f7f3 f930 	bl	80002bc <__adddf3>
 800d05c:	4642      	mov	r2, r8
 800d05e:	464b      	mov	r3, r9
 800d060:	f7f3 f92c 	bl	80002bc <__adddf3>
 800d064:	4632      	mov	r2, r6
 800d066:	463b      	mov	r3, r7
 800d068:	f7f3 f928 	bl	80002bc <__adddf3>
 800d06c:	2000      	movs	r0, #0
 800d06e:	4632      	mov	r2, r6
 800d070:	463b      	mov	r3, r7
 800d072:	4604      	mov	r4, r0
 800d074:	460d      	mov	r5, r1
 800d076:	f7f3 f91f 	bl	80002b8 <__aeabi_dsub>
 800d07a:	4642      	mov	r2, r8
 800d07c:	464b      	mov	r3, r9
 800d07e:	f7f3 f91b 	bl	80002b8 <__aeabi_dsub>
 800d082:	ec53 2b18 	vmov	r2, r3, d8
 800d086:	f7f3 f917 	bl	80002b8 <__aeabi_dsub>
 800d08a:	4602      	mov	r2, r0
 800d08c:	460b      	mov	r3, r1
 800d08e:	4650      	mov	r0, sl
 800d090:	4659      	mov	r1, fp
 800d092:	e610      	b.n	800ccb6 <__ieee754_pow+0x31e>
 800d094:	2401      	movs	r4, #1
 800d096:	e6a1      	b.n	800cddc <__ieee754_pow+0x444>
 800d098:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d0e8 <__ieee754_pow+0x750>
 800d09c:	e617      	b.n	800ccce <__ieee754_pow+0x336>
 800d09e:	bf00      	nop
 800d0a0:	4a454eef 	.word	0x4a454eef
 800d0a4:	3fca7e28 	.word	0x3fca7e28
 800d0a8:	93c9db65 	.word	0x93c9db65
 800d0ac:	3fcd864a 	.word	0x3fcd864a
 800d0b0:	a91d4101 	.word	0xa91d4101
 800d0b4:	3fd17460 	.word	0x3fd17460
 800d0b8:	518f264d 	.word	0x518f264d
 800d0bc:	3fd55555 	.word	0x3fd55555
 800d0c0:	db6fabff 	.word	0xdb6fabff
 800d0c4:	3fdb6db6 	.word	0x3fdb6db6
 800d0c8:	33333303 	.word	0x33333303
 800d0cc:	3fe33333 	.word	0x3fe33333
 800d0d0:	e0000000 	.word	0xe0000000
 800d0d4:	3feec709 	.word	0x3feec709
 800d0d8:	dc3a03fd 	.word	0xdc3a03fd
 800d0dc:	3feec709 	.word	0x3feec709
 800d0e0:	145b01f5 	.word	0x145b01f5
 800d0e4:	be3e2fe0 	.word	0xbe3e2fe0
 800d0e8:	00000000 	.word	0x00000000
 800d0ec:	3ff00000 	.word	0x3ff00000
 800d0f0:	7ff00000 	.word	0x7ff00000
 800d0f4:	43400000 	.word	0x43400000
 800d0f8:	0003988e 	.word	0x0003988e
 800d0fc:	000bb679 	.word	0x000bb679
 800d100:	0800f180 	.word	0x0800f180
 800d104:	3ff00000 	.word	0x3ff00000
 800d108:	40080000 	.word	0x40080000
 800d10c:	0800f1a0 	.word	0x0800f1a0
 800d110:	0800f190 	.word	0x0800f190
 800d114:	a3b5      	add	r3, pc, #724	; (adr r3, 800d3ec <__ieee754_pow+0xa54>)
 800d116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11a:	4640      	mov	r0, r8
 800d11c:	4649      	mov	r1, r9
 800d11e:	f7f3 f8cd 	bl	80002bc <__adddf3>
 800d122:	4622      	mov	r2, r4
 800d124:	ec41 0b1a 	vmov	d10, r0, r1
 800d128:	462b      	mov	r3, r5
 800d12a:	4630      	mov	r0, r6
 800d12c:	4639      	mov	r1, r7
 800d12e:	f7f3 f8c3 	bl	80002b8 <__aeabi_dsub>
 800d132:	4602      	mov	r2, r0
 800d134:	460b      	mov	r3, r1
 800d136:	ec51 0b1a 	vmov	r0, r1, d10
 800d13a:	f7f3 fd05 	bl	8000b48 <__aeabi_dcmpgt>
 800d13e:	2800      	cmp	r0, #0
 800d140:	f47f ae04 	bne.w	800cd4c <__ieee754_pow+0x3b4>
 800d144:	4aa4      	ldr	r2, [pc, #656]	; (800d3d8 <__ieee754_pow+0xa40>)
 800d146:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d14a:	4293      	cmp	r3, r2
 800d14c:	f340 8108 	ble.w	800d360 <__ieee754_pow+0x9c8>
 800d150:	151b      	asrs	r3, r3, #20
 800d152:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d156:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d15a:	fa4a f303 	asr.w	r3, sl, r3
 800d15e:	445b      	add	r3, fp
 800d160:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d164:	4e9d      	ldr	r6, [pc, #628]	; (800d3dc <__ieee754_pow+0xa44>)
 800d166:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d16a:	4116      	asrs	r6, r2
 800d16c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d170:	2000      	movs	r0, #0
 800d172:	ea23 0106 	bic.w	r1, r3, r6
 800d176:	f1c2 0214 	rsb	r2, r2, #20
 800d17a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d17e:	fa4a fa02 	asr.w	sl, sl, r2
 800d182:	f1bb 0f00 	cmp.w	fp, #0
 800d186:	4602      	mov	r2, r0
 800d188:	460b      	mov	r3, r1
 800d18a:	4620      	mov	r0, r4
 800d18c:	4629      	mov	r1, r5
 800d18e:	bfb8      	it	lt
 800d190:	f1ca 0a00 	rsblt	sl, sl, #0
 800d194:	f7f3 f890 	bl	80002b8 <__aeabi_dsub>
 800d198:	ec41 0b19 	vmov	d9, r0, r1
 800d19c:	4642      	mov	r2, r8
 800d19e:	464b      	mov	r3, r9
 800d1a0:	ec51 0b19 	vmov	r0, r1, d9
 800d1a4:	f7f3 f88a 	bl	80002bc <__adddf3>
 800d1a8:	a37b      	add	r3, pc, #492	; (adr r3, 800d398 <__ieee754_pow+0xa00>)
 800d1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	460d      	mov	r5, r1
 800d1b4:	f7f3 fa38 	bl	8000628 <__aeabi_dmul>
 800d1b8:	ec53 2b19 	vmov	r2, r3, d9
 800d1bc:	4606      	mov	r6, r0
 800d1be:	460f      	mov	r7, r1
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	4629      	mov	r1, r5
 800d1c4:	f7f3 f878 	bl	80002b8 <__aeabi_dsub>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	460b      	mov	r3, r1
 800d1cc:	4640      	mov	r0, r8
 800d1ce:	4649      	mov	r1, r9
 800d1d0:	f7f3 f872 	bl	80002b8 <__aeabi_dsub>
 800d1d4:	a372      	add	r3, pc, #456	; (adr r3, 800d3a0 <__ieee754_pow+0xa08>)
 800d1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1da:	f7f3 fa25 	bl	8000628 <__aeabi_dmul>
 800d1de:	a372      	add	r3, pc, #456	; (adr r3, 800d3a8 <__ieee754_pow+0xa10>)
 800d1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e4:	4680      	mov	r8, r0
 800d1e6:	4689      	mov	r9, r1
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	4629      	mov	r1, r5
 800d1ec:	f7f3 fa1c 	bl	8000628 <__aeabi_dmul>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	4640      	mov	r0, r8
 800d1f6:	4649      	mov	r1, r9
 800d1f8:	f7f3 f860 	bl	80002bc <__adddf3>
 800d1fc:	4604      	mov	r4, r0
 800d1fe:	460d      	mov	r5, r1
 800d200:	4602      	mov	r2, r0
 800d202:	460b      	mov	r3, r1
 800d204:	4630      	mov	r0, r6
 800d206:	4639      	mov	r1, r7
 800d208:	f7f3 f858 	bl	80002bc <__adddf3>
 800d20c:	4632      	mov	r2, r6
 800d20e:	463b      	mov	r3, r7
 800d210:	4680      	mov	r8, r0
 800d212:	4689      	mov	r9, r1
 800d214:	f7f3 f850 	bl	80002b8 <__aeabi_dsub>
 800d218:	4602      	mov	r2, r0
 800d21a:	460b      	mov	r3, r1
 800d21c:	4620      	mov	r0, r4
 800d21e:	4629      	mov	r1, r5
 800d220:	f7f3 f84a 	bl	80002b8 <__aeabi_dsub>
 800d224:	4642      	mov	r2, r8
 800d226:	4606      	mov	r6, r0
 800d228:	460f      	mov	r7, r1
 800d22a:	464b      	mov	r3, r9
 800d22c:	4640      	mov	r0, r8
 800d22e:	4649      	mov	r1, r9
 800d230:	f7f3 f9fa 	bl	8000628 <__aeabi_dmul>
 800d234:	a35e      	add	r3, pc, #376	; (adr r3, 800d3b0 <__ieee754_pow+0xa18>)
 800d236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23a:	4604      	mov	r4, r0
 800d23c:	460d      	mov	r5, r1
 800d23e:	f7f3 f9f3 	bl	8000628 <__aeabi_dmul>
 800d242:	a35d      	add	r3, pc, #372	; (adr r3, 800d3b8 <__ieee754_pow+0xa20>)
 800d244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d248:	f7f3 f836 	bl	80002b8 <__aeabi_dsub>
 800d24c:	4622      	mov	r2, r4
 800d24e:	462b      	mov	r3, r5
 800d250:	f7f3 f9ea 	bl	8000628 <__aeabi_dmul>
 800d254:	a35a      	add	r3, pc, #360	; (adr r3, 800d3c0 <__ieee754_pow+0xa28>)
 800d256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25a:	f7f3 f82f 	bl	80002bc <__adddf3>
 800d25e:	4622      	mov	r2, r4
 800d260:	462b      	mov	r3, r5
 800d262:	f7f3 f9e1 	bl	8000628 <__aeabi_dmul>
 800d266:	a358      	add	r3, pc, #352	; (adr r3, 800d3c8 <__ieee754_pow+0xa30>)
 800d268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26c:	f7f3 f824 	bl	80002b8 <__aeabi_dsub>
 800d270:	4622      	mov	r2, r4
 800d272:	462b      	mov	r3, r5
 800d274:	f7f3 f9d8 	bl	8000628 <__aeabi_dmul>
 800d278:	a355      	add	r3, pc, #340	; (adr r3, 800d3d0 <__ieee754_pow+0xa38>)
 800d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27e:	f7f3 f81d 	bl	80002bc <__adddf3>
 800d282:	4622      	mov	r2, r4
 800d284:	462b      	mov	r3, r5
 800d286:	f7f3 f9cf 	bl	8000628 <__aeabi_dmul>
 800d28a:	4602      	mov	r2, r0
 800d28c:	460b      	mov	r3, r1
 800d28e:	4640      	mov	r0, r8
 800d290:	4649      	mov	r1, r9
 800d292:	f7f3 f811 	bl	80002b8 <__aeabi_dsub>
 800d296:	4604      	mov	r4, r0
 800d298:	460d      	mov	r5, r1
 800d29a:	4602      	mov	r2, r0
 800d29c:	460b      	mov	r3, r1
 800d29e:	4640      	mov	r0, r8
 800d2a0:	4649      	mov	r1, r9
 800d2a2:	f7f3 f9c1 	bl	8000628 <__aeabi_dmul>
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	ec41 0b19 	vmov	d9, r0, r1
 800d2ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	4629      	mov	r1, r5
 800d2b4:	f7f3 f800 	bl	80002b8 <__aeabi_dsub>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	ec51 0b19 	vmov	r0, r1, d9
 800d2c0:	f7f3 fadc 	bl	800087c <__aeabi_ddiv>
 800d2c4:	4632      	mov	r2, r6
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	460d      	mov	r5, r1
 800d2ca:	463b      	mov	r3, r7
 800d2cc:	4640      	mov	r0, r8
 800d2ce:	4649      	mov	r1, r9
 800d2d0:	f7f3 f9aa 	bl	8000628 <__aeabi_dmul>
 800d2d4:	4632      	mov	r2, r6
 800d2d6:	463b      	mov	r3, r7
 800d2d8:	f7f2 fff0 	bl	80002bc <__adddf3>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	460b      	mov	r3, r1
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	4629      	mov	r1, r5
 800d2e4:	f7f2 ffe8 	bl	80002b8 <__aeabi_dsub>
 800d2e8:	4642      	mov	r2, r8
 800d2ea:	464b      	mov	r3, r9
 800d2ec:	f7f2 ffe4 	bl	80002b8 <__aeabi_dsub>
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	493a      	ldr	r1, [pc, #232]	; (800d3e0 <__ieee754_pow+0xa48>)
 800d2f6:	2000      	movs	r0, #0
 800d2f8:	f7f2 ffde 	bl	80002b8 <__aeabi_dsub>
 800d2fc:	ec41 0b10 	vmov	d0, r0, r1
 800d300:	ee10 3a90 	vmov	r3, s1
 800d304:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d30c:	da2b      	bge.n	800d366 <__ieee754_pow+0x9ce>
 800d30e:	4650      	mov	r0, sl
 800d310:	f000 f966 	bl	800d5e0 <scalbn>
 800d314:	ec51 0b10 	vmov	r0, r1, d0
 800d318:	ec53 2b18 	vmov	r2, r3, d8
 800d31c:	f7ff bbed 	b.w	800cafa <__ieee754_pow+0x162>
 800d320:	4b30      	ldr	r3, [pc, #192]	; (800d3e4 <__ieee754_pow+0xa4c>)
 800d322:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d326:	429e      	cmp	r6, r3
 800d328:	f77f af0c 	ble.w	800d144 <__ieee754_pow+0x7ac>
 800d32c:	4b2e      	ldr	r3, [pc, #184]	; (800d3e8 <__ieee754_pow+0xa50>)
 800d32e:	440b      	add	r3, r1
 800d330:	4303      	orrs	r3, r0
 800d332:	d009      	beq.n	800d348 <__ieee754_pow+0x9b0>
 800d334:	ec51 0b18 	vmov	r0, r1, d8
 800d338:	2200      	movs	r2, #0
 800d33a:	2300      	movs	r3, #0
 800d33c:	f7f3 fbe6 	bl	8000b0c <__aeabi_dcmplt>
 800d340:	3800      	subs	r0, #0
 800d342:	bf18      	it	ne
 800d344:	2001      	movne	r0, #1
 800d346:	e447      	b.n	800cbd8 <__ieee754_pow+0x240>
 800d348:	4622      	mov	r2, r4
 800d34a:	462b      	mov	r3, r5
 800d34c:	f7f2 ffb4 	bl	80002b8 <__aeabi_dsub>
 800d350:	4642      	mov	r2, r8
 800d352:	464b      	mov	r3, r9
 800d354:	f7f3 fbee 	bl	8000b34 <__aeabi_dcmpge>
 800d358:	2800      	cmp	r0, #0
 800d35a:	f43f aef3 	beq.w	800d144 <__ieee754_pow+0x7ac>
 800d35e:	e7e9      	b.n	800d334 <__ieee754_pow+0x99c>
 800d360:	f04f 0a00 	mov.w	sl, #0
 800d364:	e71a      	b.n	800d19c <__ieee754_pow+0x804>
 800d366:	ec51 0b10 	vmov	r0, r1, d0
 800d36a:	4619      	mov	r1, r3
 800d36c:	e7d4      	b.n	800d318 <__ieee754_pow+0x980>
 800d36e:	491c      	ldr	r1, [pc, #112]	; (800d3e0 <__ieee754_pow+0xa48>)
 800d370:	2000      	movs	r0, #0
 800d372:	f7ff bb30 	b.w	800c9d6 <__ieee754_pow+0x3e>
 800d376:	2000      	movs	r0, #0
 800d378:	2100      	movs	r1, #0
 800d37a:	f7ff bb2c 	b.w	800c9d6 <__ieee754_pow+0x3e>
 800d37e:	4630      	mov	r0, r6
 800d380:	4639      	mov	r1, r7
 800d382:	f7ff bb28 	b.w	800c9d6 <__ieee754_pow+0x3e>
 800d386:	9204      	str	r2, [sp, #16]
 800d388:	f7ff bb7a 	b.w	800ca80 <__ieee754_pow+0xe8>
 800d38c:	2300      	movs	r3, #0
 800d38e:	f7ff bb64 	b.w	800ca5a <__ieee754_pow+0xc2>
 800d392:	bf00      	nop
 800d394:	f3af 8000 	nop.w
 800d398:	00000000 	.word	0x00000000
 800d39c:	3fe62e43 	.word	0x3fe62e43
 800d3a0:	fefa39ef 	.word	0xfefa39ef
 800d3a4:	3fe62e42 	.word	0x3fe62e42
 800d3a8:	0ca86c39 	.word	0x0ca86c39
 800d3ac:	be205c61 	.word	0xbe205c61
 800d3b0:	72bea4d0 	.word	0x72bea4d0
 800d3b4:	3e663769 	.word	0x3e663769
 800d3b8:	c5d26bf1 	.word	0xc5d26bf1
 800d3bc:	3ebbbd41 	.word	0x3ebbbd41
 800d3c0:	af25de2c 	.word	0xaf25de2c
 800d3c4:	3f11566a 	.word	0x3f11566a
 800d3c8:	16bebd93 	.word	0x16bebd93
 800d3cc:	3f66c16c 	.word	0x3f66c16c
 800d3d0:	5555553e 	.word	0x5555553e
 800d3d4:	3fc55555 	.word	0x3fc55555
 800d3d8:	3fe00000 	.word	0x3fe00000
 800d3dc:	000fffff 	.word	0x000fffff
 800d3e0:	3ff00000 	.word	0x3ff00000
 800d3e4:	4090cbff 	.word	0x4090cbff
 800d3e8:	3f6f3400 	.word	0x3f6f3400
 800d3ec:	652b82fe 	.word	0x652b82fe
 800d3f0:	3c971547 	.word	0x3c971547

0800d3f4 <__ieee754_sqrt>:
 800d3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f8:	ec55 4b10 	vmov	r4, r5, d0
 800d3fc:	4e55      	ldr	r6, [pc, #340]	; (800d554 <__ieee754_sqrt+0x160>)
 800d3fe:	43ae      	bics	r6, r5
 800d400:	ee10 0a10 	vmov	r0, s0
 800d404:	ee10 3a10 	vmov	r3, s0
 800d408:	462a      	mov	r2, r5
 800d40a:	4629      	mov	r1, r5
 800d40c:	d110      	bne.n	800d430 <__ieee754_sqrt+0x3c>
 800d40e:	ee10 2a10 	vmov	r2, s0
 800d412:	462b      	mov	r3, r5
 800d414:	f7f3 f908 	bl	8000628 <__aeabi_dmul>
 800d418:	4602      	mov	r2, r0
 800d41a:	460b      	mov	r3, r1
 800d41c:	4620      	mov	r0, r4
 800d41e:	4629      	mov	r1, r5
 800d420:	f7f2 ff4c 	bl	80002bc <__adddf3>
 800d424:	4604      	mov	r4, r0
 800d426:	460d      	mov	r5, r1
 800d428:	ec45 4b10 	vmov	d0, r4, r5
 800d42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d430:	2d00      	cmp	r5, #0
 800d432:	dc10      	bgt.n	800d456 <__ieee754_sqrt+0x62>
 800d434:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d438:	4330      	orrs	r0, r6
 800d43a:	d0f5      	beq.n	800d428 <__ieee754_sqrt+0x34>
 800d43c:	b15d      	cbz	r5, 800d456 <__ieee754_sqrt+0x62>
 800d43e:	ee10 2a10 	vmov	r2, s0
 800d442:	462b      	mov	r3, r5
 800d444:	ee10 0a10 	vmov	r0, s0
 800d448:	f7f2 ff36 	bl	80002b8 <__aeabi_dsub>
 800d44c:	4602      	mov	r2, r0
 800d44e:	460b      	mov	r3, r1
 800d450:	f7f3 fa14 	bl	800087c <__aeabi_ddiv>
 800d454:	e7e6      	b.n	800d424 <__ieee754_sqrt+0x30>
 800d456:	1512      	asrs	r2, r2, #20
 800d458:	d074      	beq.n	800d544 <__ieee754_sqrt+0x150>
 800d45a:	07d4      	lsls	r4, r2, #31
 800d45c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d460:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d464:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d468:	bf5e      	ittt	pl
 800d46a:	0fda      	lsrpl	r2, r3, #31
 800d46c:	005b      	lslpl	r3, r3, #1
 800d46e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d472:	2400      	movs	r4, #0
 800d474:	0fda      	lsrs	r2, r3, #31
 800d476:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d47a:	107f      	asrs	r7, r7, #1
 800d47c:	005b      	lsls	r3, r3, #1
 800d47e:	2516      	movs	r5, #22
 800d480:	4620      	mov	r0, r4
 800d482:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d486:	1886      	adds	r6, r0, r2
 800d488:	428e      	cmp	r6, r1
 800d48a:	bfde      	ittt	le
 800d48c:	1b89      	suble	r1, r1, r6
 800d48e:	18b0      	addle	r0, r6, r2
 800d490:	18a4      	addle	r4, r4, r2
 800d492:	0049      	lsls	r1, r1, #1
 800d494:	3d01      	subs	r5, #1
 800d496:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d49a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d49e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d4a2:	d1f0      	bne.n	800d486 <__ieee754_sqrt+0x92>
 800d4a4:	462a      	mov	r2, r5
 800d4a6:	f04f 0e20 	mov.w	lr, #32
 800d4aa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d4ae:	4281      	cmp	r1, r0
 800d4b0:	eb06 0c05 	add.w	ip, r6, r5
 800d4b4:	dc02      	bgt.n	800d4bc <__ieee754_sqrt+0xc8>
 800d4b6:	d113      	bne.n	800d4e0 <__ieee754_sqrt+0xec>
 800d4b8:	459c      	cmp	ip, r3
 800d4ba:	d811      	bhi.n	800d4e0 <__ieee754_sqrt+0xec>
 800d4bc:	f1bc 0f00 	cmp.w	ip, #0
 800d4c0:	eb0c 0506 	add.w	r5, ip, r6
 800d4c4:	da43      	bge.n	800d54e <__ieee754_sqrt+0x15a>
 800d4c6:	2d00      	cmp	r5, #0
 800d4c8:	db41      	blt.n	800d54e <__ieee754_sqrt+0x15a>
 800d4ca:	f100 0801 	add.w	r8, r0, #1
 800d4ce:	1a09      	subs	r1, r1, r0
 800d4d0:	459c      	cmp	ip, r3
 800d4d2:	bf88      	it	hi
 800d4d4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d4d8:	eba3 030c 	sub.w	r3, r3, ip
 800d4dc:	4432      	add	r2, r6
 800d4de:	4640      	mov	r0, r8
 800d4e0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d4e4:	f1be 0e01 	subs.w	lr, lr, #1
 800d4e8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d4ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d4f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d4f4:	d1db      	bne.n	800d4ae <__ieee754_sqrt+0xba>
 800d4f6:	430b      	orrs	r3, r1
 800d4f8:	d006      	beq.n	800d508 <__ieee754_sqrt+0x114>
 800d4fa:	1c50      	adds	r0, r2, #1
 800d4fc:	bf13      	iteet	ne
 800d4fe:	3201      	addne	r2, #1
 800d500:	3401      	addeq	r4, #1
 800d502:	4672      	moveq	r2, lr
 800d504:	f022 0201 	bicne.w	r2, r2, #1
 800d508:	1063      	asrs	r3, r4, #1
 800d50a:	0852      	lsrs	r2, r2, #1
 800d50c:	07e1      	lsls	r1, r4, #31
 800d50e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d512:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d516:	bf48      	it	mi
 800d518:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d51c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d520:	4614      	mov	r4, r2
 800d522:	e781      	b.n	800d428 <__ieee754_sqrt+0x34>
 800d524:	0ad9      	lsrs	r1, r3, #11
 800d526:	3815      	subs	r0, #21
 800d528:	055b      	lsls	r3, r3, #21
 800d52a:	2900      	cmp	r1, #0
 800d52c:	d0fa      	beq.n	800d524 <__ieee754_sqrt+0x130>
 800d52e:	02cd      	lsls	r5, r1, #11
 800d530:	d50a      	bpl.n	800d548 <__ieee754_sqrt+0x154>
 800d532:	f1c2 0420 	rsb	r4, r2, #32
 800d536:	fa23 f404 	lsr.w	r4, r3, r4
 800d53a:	1e55      	subs	r5, r2, #1
 800d53c:	4093      	lsls	r3, r2
 800d53e:	4321      	orrs	r1, r4
 800d540:	1b42      	subs	r2, r0, r5
 800d542:	e78a      	b.n	800d45a <__ieee754_sqrt+0x66>
 800d544:	4610      	mov	r0, r2
 800d546:	e7f0      	b.n	800d52a <__ieee754_sqrt+0x136>
 800d548:	0049      	lsls	r1, r1, #1
 800d54a:	3201      	adds	r2, #1
 800d54c:	e7ef      	b.n	800d52e <__ieee754_sqrt+0x13a>
 800d54e:	4680      	mov	r8, r0
 800d550:	e7bd      	b.n	800d4ce <__ieee754_sqrt+0xda>
 800d552:	bf00      	nop
 800d554:	7ff00000 	.word	0x7ff00000

0800d558 <with_errno>:
 800d558:	b570      	push	{r4, r5, r6, lr}
 800d55a:	4604      	mov	r4, r0
 800d55c:	460d      	mov	r5, r1
 800d55e:	4616      	mov	r6, r2
 800d560:	f7fa fd06 	bl	8007f70 <__errno>
 800d564:	4629      	mov	r1, r5
 800d566:	6006      	str	r6, [r0, #0]
 800d568:	4620      	mov	r0, r4
 800d56a:	bd70      	pop	{r4, r5, r6, pc}

0800d56c <xflow>:
 800d56c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d56e:	4614      	mov	r4, r2
 800d570:	461d      	mov	r5, r3
 800d572:	b108      	cbz	r0, 800d578 <xflow+0xc>
 800d574:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d578:	e9cd 2300 	strd	r2, r3, [sp]
 800d57c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d580:	4620      	mov	r0, r4
 800d582:	4629      	mov	r1, r5
 800d584:	f7f3 f850 	bl	8000628 <__aeabi_dmul>
 800d588:	2222      	movs	r2, #34	; 0x22
 800d58a:	b003      	add	sp, #12
 800d58c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d590:	f7ff bfe2 	b.w	800d558 <with_errno>

0800d594 <__math_uflow>:
 800d594:	b508      	push	{r3, lr}
 800d596:	2200      	movs	r2, #0
 800d598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d59c:	f7ff ffe6 	bl	800d56c <xflow>
 800d5a0:	ec41 0b10 	vmov	d0, r0, r1
 800d5a4:	bd08      	pop	{r3, pc}

0800d5a6 <__math_oflow>:
 800d5a6:	b508      	push	{r3, lr}
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d5ae:	f7ff ffdd 	bl	800d56c <xflow>
 800d5b2:	ec41 0b10 	vmov	d0, r0, r1
 800d5b6:	bd08      	pop	{r3, pc}

0800d5b8 <fabs>:
 800d5b8:	ec51 0b10 	vmov	r0, r1, d0
 800d5bc:	ee10 2a10 	vmov	r2, s0
 800d5c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d5c4:	ec43 2b10 	vmov	d0, r2, r3
 800d5c8:	4770      	bx	lr

0800d5ca <finite>:
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	ed8d 0b00 	vstr	d0, [sp]
 800d5d0:	9801      	ldr	r0, [sp, #4]
 800d5d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d5d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d5da:	0fc0      	lsrs	r0, r0, #31
 800d5dc:	b002      	add	sp, #8
 800d5de:	4770      	bx	lr

0800d5e0 <scalbn>:
 800d5e0:	b570      	push	{r4, r5, r6, lr}
 800d5e2:	ec55 4b10 	vmov	r4, r5, d0
 800d5e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	462b      	mov	r3, r5
 800d5ee:	b99a      	cbnz	r2, 800d618 <scalbn+0x38>
 800d5f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d5f4:	4323      	orrs	r3, r4
 800d5f6:	d036      	beq.n	800d666 <scalbn+0x86>
 800d5f8:	4b39      	ldr	r3, [pc, #228]	; (800d6e0 <scalbn+0x100>)
 800d5fa:	4629      	mov	r1, r5
 800d5fc:	ee10 0a10 	vmov	r0, s0
 800d600:	2200      	movs	r2, #0
 800d602:	f7f3 f811 	bl	8000628 <__aeabi_dmul>
 800d606:	4b37      	ldr	r3, [pc, #220]	; (800d6e4 <scalbn+0x104>)
 800d608:	429e      	cmp	r6, r3
 800d60a:	4604      	mov	r4, r0
 800d60c:	460d      	mov	r5, r1
 800d60e:	da10      	bge.n	800d632 <scalbn+0x52>
 800d610:	a32b      	add	r3, pc, #172	; (adr r3, 800d6c0 <scalbn+0xe0>)
 800d612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d616:	e03a      	b.n	800d68e <scalbn+0xae>
 800d618:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d61c:	428a      	cmp	r2, r1
 800d61e:	d10c      	bne.n	800d63a <scalbn+0x5a>
 800d620:	ee10 2a10 	vmov	r2, s0
 800d624:	4620      	mov	r0, r4
 800d626:	4629      	mov	r1, r5
 800d628:	f7f2 fe48 	bl	80002bc <__adddf3>
 800d62c:	4604      	mov	r4, r0
 800d62e:	460d      	mov	r5, r1
 800d630:	e019      	b.n	800d666 <scalbn+0x86>
 800d632:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d636:	460b      	mov	r3, r1
 800d638:	3a36      	subs	r2, #54	; 0x36
 800d63a:	4432      	add	r2, r6
 800d63c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d640:	428a      	cmp	r2, r1
 800d642:	dd08      	ble.n	800d656 <scalbn+0x76>
 800d644:	2d00      	cmp	r5, #0
 800d646:	a120      	add	r1, pc, #128	; (adr r1, 800d6c8 <scalbn+0xe8>)
 800d648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d64c:	da1c      	bge.n	800d688 <scalbn+0xa8>
 800d64e:	a120      	add	r1, pc, #128	; (adr r1, 800d6d0 <scalbn+0xf0>)
 800d650:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d654:	e018      	b.n	800d688 <scalbn+0xa8>
 800d656:	2a00      	cmp	r2, #0
 800d658:	dd08      	ble.n	800d66c <scalbn+0x8c>
 800d65a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d65e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d662:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d666:	ec45 4b10 	vmov	d0, r4, r5
 800d66a:	bd70      	pop	{r4, r5, r6, pc}
 800d66c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d670:	da19      	bge.n	800d6a6 <scalbn+0xc6>
 800d672:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d676:	429e      	cmp	r6, r3
 800d678:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d67c:	dd0a      	ble.n	800d694 <scalbn+0xb4>
 800d67e:	a112      	add	r1, pc, #72	; (adr r1, 800d6c8 <scalbn+0xe8>)
 800d680:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d1e2      	bne.n	800d64e <scalbn+0x6e>
 800d688:	a30f      	add	r3, pc, #60	; (adr r3, 800d6c8 <scalbn+0xe8>)
 800d68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68e:	f7f2 ffcb 	bl	8000628 <__aeabi_dmul>
 800d692:	e7cb      	b.n	800d62c <scalbn+0x4c>
 800d694:	a10a      	add	r1, pc, #40	; (adr r1, 800d6c0 <scalbn+0xe0>)
 800d696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d0b8      	beq.n	800d610 <scalbn+0x30>
 800d69e:	a10e      	add	r1, pc, #56	; (adr r1, 800d6d8 <scalbn+0xf8>)
 800d6a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6a4:	e7b4      	b.n	800d610 <scalbn+0x30>
 800d6a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d6aa:	3236      	adds	r2, #54	; 0x36
 800d6ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d6b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	4b0c      	ldr	r3, [pc, #48]	; (800d6e8 <scalbn+0x108>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	e7e8      	b.n	800d68e <scalbn+0xae>
 800d6bc:	f3af 8000 	nop.w
 800d6c0:	c2f8f359 	.word	0xc2f8f359
 800d6c4:	01a56e1f 	.word	0x01a56e1f
 800d6c8:	8800759c 	.word	0x8800759c
 800d6cc:	7e37e43c 	.word	0x7e37e43c
 800d6d0:	8800759c 	.word	0x8800759c
 800d6d4:	fe37e43c 	.word	0xfe37e43c
 800d6d8:	c2f8f359 	.word	0xc2f8f359
 800d6dc:	81a56e1f 	.word	0x81a56e1f
 800d6e0:	43500000 	.word	0x43500000
 800d6e4:	ffff3cb0 	.word	0xffff3cb0
 800d6e8:	3c900000 	.word	0x3c900000

0800d6ec <_init>:
 800d6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ee:	bf00      	nop
 800d6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6f2:	bc08      	pop	{r3}
 800d6f4:	469e      	mov	lr, r3
 800d6f6:	4770      	bx	lr

0800d6f8 <_fini>:
 800d6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6fa:	bf00      	nop
 800d6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6fe:	bc08      	pop	{r3}
 800d700:	469e      	mov	lr, r3
 800d702:	4770      	bx	lr
